-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv14_310 : STD_LOGIC_VECTOR (13 downto 0) := "00001100010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_606 : STD_LOGIC_VECTOR (15 downto 0) := "0000011000000110";
    constant ap_const_lv16_FBE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111101111101000";
    constant ap_const_lv16_FEB3 : STD_LOGIC_VECTOR (15 downto 0) := "1111111010110011";
    constant ap_const_lv16_30F : STD_LOGIC_VECTOR (15 downto 0) := "0000001100001111";
    constant ap_const_lv16_FCEC : STD_LOGIC_VECTOR (15 downto 0) := "1111110011101100";
    constant ap_const_lv16_FCDC : STD_LOGIC_VECTOR (15 downto 0) := "1111110011011100";
    constant ap_const_lv16_2F6 : STD_LOGIC_VECTOR (15 downto 0) := "0000001011110110";
    constant ap_const_lv16_FEAA : STD_LOGIC_VECTOR (15 downto 0) := "1111111010101010";
    constant ap_const_lv16_43B : STD_LOGIC_VECTOR (15 downto 0) := "0000010000111011";
    constant ap_const_lv16_9D0 : STD_LOGIC_VECTOR (15 downto 0) := "0000100111010000";
    constant ap_const_lv16_1B9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000110111001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_FC3D : STD_LOGIC_VECTOR (15 downto 0) := "1111110000111101";
    constant ap_const_lv16_67 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100111";
    constant ap_const_lv16_FD47 : STD_LOGIC_VECTOR (15 downto 0) := "1111110101000111";
    constant ap_const_lv16_FCAC : STD_LOGIC_VECTOR (15 downto 0) := "1111110010101100";
    constant ap_const_lv16_F916 : STD_LOGIC_VECTOR (15 downto 0) := "1111100100010110";
    constant ap_const_lv16_19EF : STD_LOGIC_VECTOR (15 downto 0) := "0001100111101111";
    constant ap_const_lv16_1F9D : STD_LOGIC_VECTOR (15 downto 0) := "0001111110011101";
    constant ap_const_lv16_FD8C : STD_LOGIC_VECTOR (15 downto 0) := "1111110110001100";
    constant ap_const_lv16_1338 : STD_LOGIC_VECTOR (15 downto 0) := "0001001100111000";
    constant ap_const_lv16_2592 : STD_LOGIC_VECTOR (15 downto 0) := "0010010110010010";
    constant ap_const_lv16_DBDB : STD_LOGIC_VECTOR (15 downto 0) := "1101101111011011";
    constant ap_const_lv16_609 : STD_LOGIC_VECTOR (15 downto 0) := "0000011000001001";
    constant ap_const_lv16_D598 : STD_LOGIC_VECTOR (15 downto 0) := "1101010110011000";
    constant ap_const_lv16_AAD : STD_LOGIC_VECTOR (15 downto 0) := "0000101010101101";
    constant ap_const_lv16_4AA : STD_LOGIC_VECTOR (15 downto 0) := "0000010010101010";
    constant ap_const_lv16_1793 : STD_LOGIC_VECTOR (15 downto 0) := "0001011110010011";
    constant ap_const_lv16_F74 : STD_LOGIC_VECTOR (15 downto 0) := "0000111101110100";
    constant ap_const_lv16_E4E9 : STD_LOGIC_VECTOR (15 downto 0) := "1110010011101001";
    constant ap_const_lv16_1526 : STD_LOGIC_VECTOR (15 downto 0) := "0001010100100110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buffer_0_reg_220 : STD_LOGIC_VECTOR (18 downto 0);
    signal in_d_0_reg_230 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_d_0_reg_230_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in_d_0_reg_230_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_fu_243_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln24_reg_577 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln24_fu_247_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_reg_582 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_fu_259_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_590 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln34_fu_307_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln34_reg_595 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln24_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln31_fu_394_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_reg_604 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_fu_412_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_reg_609 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_fu_458_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_reg_614 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln39_fu_470_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_reg_619 : STD_LOGIC_VECTOR (10 downto 0);
    signal input_addr_reg_624 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_load_reg_629 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_634 : STD_LOGIC_VECTOR (17 downto 0);
    signal buffer_fu_510_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal out_w_fu_566_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_in_d_0_phi_fu_234_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal out_d_0_reg_165 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_176 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_reg_187 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_198 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_209 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln39_3_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_buffer_0_1_fu_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_0_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln25_fu_265_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_269_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_311_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_358_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln39_1_fu_370_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_2_fu_366_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln39_4_fu_378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_400_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln39_mid1_fu_420_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln39_1_mid1_fu_432_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_fu_428_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln39_16_fu_440_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln39_5_fu_444_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln39_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_fu_466_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_12_fu_450_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln39_1_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_fu_491_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln39_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln39_2_fu_507_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_516_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_fu_534_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_fu_524_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_fu_549_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln47_1_fu_552_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln47_1_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component network_mux_164_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    network_mux_164_16_1_1_U19 : component network_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_606,
        din1 => ap_const_lv16_FBE8,
        din2 => ap_const_lv16_FEB3,
        din3 => ap_const_lv16_30F,
        din4 => ap_const_lv16_FCEC,
        din5 => ap_const_lv16_FCDC,
        din6 => ap_const_lv16_2F6,
        din7 => ap_const_lv16_FEAA,
        din8 => ap_const_lv16_43B,
        din9 => ap_const_lv16_9D0,
        din10 => ap_const_lv16_1B9,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_FC3D,
        din13 => ap_const_lv16_67,
        din14 => ap_const_lv16_FD47,
        din15 => ap_const_lv16_FCAC,
        din16 => trunc_ln25_fu_265_p1,
        dout => tmp_1_fu_269_p18);

    network_mux_164_16_1_1_U20 : component network_mux_164_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_F916,
        din1 => ap_const_lv16_19EF,
        din2 => ap_const_lv16_1F9D,
        din3 => ap_const_lv16_FD8C,
        din4 => ap_const_lv16_1338,
        din5 => ap_const_lv16_2592,
        din6 => ap_const_lv16_DBDB,
        din7 => ap_const_lv16_609,
        din8 => ap_const_lv16_D598,
        din9 => ap_const_lv16_AAD,
        din10 => ap_const_lv16_4AA,
        din11 => ap_const_lv16_1793,
        din12 => ap_const_lv16_F74,
        din13 => ap_const_lv16_E4E9,
        din14 => ap_const_lv16_1526,
        din15 => ap_const_lv16_19EF,
        din16 => trunc_ln25_fu_265_p1,
        dout => tmp_3_fu_311_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln31_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((icmp_ln31_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_0_reg_220 <= sext_ln34_reg_595;
            elsif (((in_d_0_reg_230_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                buffer_0_reg_220 <= buffer_fu_510_p2;
            end if; 
        end if;
    end process;

    in_d_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                in_d_0_reg_230 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (in_d_0_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                in_d_0_reg_230 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_187 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_187 <= add_ln31_reg_604;
            end if; 
        end if;
    end process;

    out_d_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_0_reg_165 <= out_d_reg_590;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_165 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_0_reg_198 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                out_h_0_reg_198 <= select_ln31_reg_614;
            end if; 
        end if;
    end process;

    out_w_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_w_0_reg_209 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                out_w_0_reg_209 <= out_w_fu_566_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_176 <= add_ln24_reg_582;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_176 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln24_reg_582 <= add_ln24_fu_247_p2;
                out_d_reg_590 <= out_d_fu_259_p2;
                    zext_ln24_reg_577(13 downto 0) <= zext_ln24_fu_243_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln31_reg_604 <= add_ln31_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln39_reg_619 <= add_ln39_fu_470_p2;
                input_addr_reg_624 <= zext_ln39_3_fu_480_p1(14 - 1 downto 0);
                select_ln31_reg_614 <= select_ln31_fu_458_p3;
                select_ln32_reg_609 <= select_ln32_fu_412_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_d_0_reg_230_pp0_iter1_reg <= in_d_0_reg_230;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                in_d_0_reg_230_pp0_iter2_reg <= in_d_0_reg_230_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (in_d_0_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_load_reg_629 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                kernel_buffer_0_1_fu_136 <= kernel_buffer_0_fu_349_p1;
                sext_ln34_reg_595 <= sext_ln34_fu_307_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (in_d_0_reg_230_pp0_iter1_reg = ap_const_lv1_0))) then
                trunc_ln_reg_634 <= mul_ln39_fu_491_p2(31 downto 14);
            end if;
        end if;
    end process;
    zext_ln24_reg_577(14) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_253_p2, icmp_ln31_fu_388_p2, ap_CS_fsm_state3, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_phi_mux_in_d_0_phi_fu_234_p4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln24_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln31_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_phi_mux_in_d_0_phi_fu_234_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_phi_mux_in_d_0_phi_fu_234_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln24_fu_247_p2 <= std_logic_vector(unsigned(phi_mul_reg_176) + unsigned(ap_const_lv14_310));
    add_ln31_fu_394_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_187) + unsigned(ap_const_lv10_1));
    add_ln39_fu_470_p2 <= std_logic_vector(unsigned(zext_ln36_fu_466_p1) + unsigned(select_ln32_12_fu_450_p3));
    add_ln47_1_fu_552_p2 <= std_logic_vector(unsigned(zext_ln24_reg_577) + unsigned(sext_ln47_fu_549_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(ap_phi_mux_in_d_0_phi_fu_234_p4)
    begin
        if ((ap_phi_mux_in_d_0_phi_fu_234_p4 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_253_p2)
    begin
        if ((((icmp_ln24_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_in_d_0_phi_fu_234_p4_assign_proc : process(in_d_0_reg_230, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((in_d_0_reg_230 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_in_d_0_phi_fu_234_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_in_d_0_phi_fu_234_p4 <= in_d_0_reg_230;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_253_p2)
    begin
        if (((icmp_ln24_fu_253_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_510_p2 <= std_logic_vector(signed(sext_ln39_2_fu_507_p1) + signed(buffer_0_reg_220));
    icmp_ln24_fu_253_p2 <= "1" when (out_d_0_reg_165 = ap_const_lv5_10) else "0";
    icmp_ln31_fu_388_p2 <= "1" when (indvar_flatten_reg_187 = ap_const_lv10_310) else "0";
    icmp_ln33_fu_406_p2 <= "1" when (out_w_0_reg_209 = ap_const_lv5_1C) else "0";
    input_r_address0 <= input_addr_reg_624;

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        kernel_buffer_0_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_311_p18),32));

    mul_ln39_fu_491_p0 <= kernel_buffer_0_1_fu_136;
    mul_ln39_fu_491_p1 <= input_load_reg_629;
    mul_ln39_fu_491_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln39_fu_491_p0) * signed(mul_ln39_fu_491_p1))), 32));
    out_d_fu_259_p2 <= std_logic_vector(unsigned(out_d_0_reg_165) + unsigned(ap_const_lv5_1));
    out_h_fu_400_p2 <= std_logic_vector(unsigned(out_h_0_reg_198) + unsigned(ap_const_lv5_1));
    out_w_fu_566_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln32_reg_609));
    output_r_address0 <= zext_ln47_fu_561_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln46_fu_524_p1 and select_ln46_fu_534_p3);

    output_r_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln31_fu_458_p3 <= 
        out_h_fu_400_p2 when (icmp_ln33_fu_406_p2(0) = '1') else 
        out_h_0_reg_198;
    select_ln32_12_fu_450_p3 <= 
        sub_ln39_5_fu_444_p2 when (icmp_ln33_fu_406_p2(0) = '1') else 
        sub_ln39_fu_382_p2;
    select_ln32_fu_412_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_fu_406_p2(0) = '1') else 
        out_w_0_reg_209;
    select_ln46_fu_534_p3 <= 
        ap_const_lv16_FFFF when (xor_ln46_fu_528_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln34_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_269_p18),19));

        sext_ln39_1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln39_fu_470_p2),32));

        sext_ln39_2_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_634),19));

        sext_ln47_1_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_1_fu_552_p2),32));

        sext_ln47_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln39_reg_619),15));

    shl_ln39_1_fu_370_p3 <= (out_h_0_reg_198 & ap_const_lv2_0);
    shl_ln39_1_mid1_fu_432_p3 <= (out_h_fu_400_p2 & ap_const_lv2_0);
    shl_ln39_mid1_fu_420_p3 <= (out_h_fu_400_p2 & ap_const_lv5_0);
    shl_ln_fu_358_p3 <= (out_h_0_reg_198 & ap_const_lv5_0);
    sub_ln39_5_fu_444_p2 <= std_logic_vector(unsigned(zext_ln39_fu_428_p1) - unsigned(zext_ln39_16_fu_440_p1));
    sub_ln39_fu_382_p2 <= std_logic_vector(unsigned(zext_ln39_2_fu_366_p1) - unsigned(zext_ln39_4_fu_378_p1));
    tmp_fu_516_p3 <= buffer_0_reg_220(18 downto 18);
    trunc_ln25_fu_265_p1 <= out_d_0_reg_165(4 - 1 downto 0);
    trunc_ln46_fu_524_p1 <= buffer_0_reg_220(16 - 1 downto 0);
    xor_ln46_fu_528_p2 <= (tmp_fu_516_p3 xor ap_const_lv1_1);
    zext_ln24_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_176),15));
    zext_ln36_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_412_p3),11));
    zext_ln39_16_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_1_mid1_fu_432_p3),11));
    zext_ln39_2_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_358_p3),11));
    zext_ln39_3_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln39_1_fu_476_p1),64));
    zext_ln39_4_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_1_fu_370_p3),11));
    zext_ln39_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_mid1_fu_420_p3),11));
    zext_ln47_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_1_fu_557_p1),64));
end behav;
