-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten48_reg_298 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_d_0_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_356 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_1170 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1170_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_360 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln40_fu_364_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_reg_1109 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_1_cast14_fu_368_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_cast14_reg_1115 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_fu_372_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_reg_1122 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_1_cast_fu_376_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_1_cast_reg_1128 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_380_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1133 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln4_reg_1138 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_402_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_1143 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_436_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_reg_1153 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_fu_442_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_reg_1158 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_fu_447_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_reg_1164 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln23_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1170_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_457_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1174 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln32_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1180 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_2_fu_484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_2_reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_0_0_fu_494_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_reg_1199 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_fu_499_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_reg_1204 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_fu_504_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_reg_1209 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln24_fu_510_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_reg_1214 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_19_fu_530_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln24_19_reg_1225 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_8_fu_534_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_8_reg_1235 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_9_fu_540_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_9_reg_1240 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_18_fu_546_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_18_reg_1245 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_2_fu_551_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_2_reg_1251 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_14_fu_561_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_14_reg_1257 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_0_mid2_fu_572_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_reg_1264 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_2_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_2_reg_1271 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_load_reg_1276 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_fu_586_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_reg_1281 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_10_fu_599_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_10_reg_1296 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_fu_624_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_1301 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp10_0_0_mid2_v_v_fu_639_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_v_v_reg_1306 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid2_v_v_fu_652_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid2_v_v_reg_1313 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_load_10_reg_1323 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_11_reg_1328 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_11_fu_667_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_11_reg_1338 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_12_fu_672_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_12_reg_1343 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_680_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid2_reg_1348 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_v_v_fu_685_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_v_v_reg_1355 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_v_v_fu_690_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_v_v_reg_1360 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_load_9_reg_1365 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_12_reg_1370 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_13_fu_703_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_13_reg_1385 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_14_fu_708_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_14_reg_1390 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_9_fu_713_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_9_reg_1395 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp10_1_0_mid2_fu_722_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_reg_1401 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_730_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_reg_1408 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_fu_735_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_reg_1415 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_fu_738_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_reg_1422 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_17_fu_748_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_17_reg_1427 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_14_fu_752_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_14_reg_1433 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_14_fu_757_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_14_reg_1438 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_load_13_reg_1443 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_14_reg_1448 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_fu_771_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_reg_1463 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_fu_780_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_1473 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_15_fu_785_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_15_reg_1478 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_12_fu_789_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_12_reg_1484 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_15_fu_798_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_15_reg_1494 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_load_15_reg_1499 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_16_reg_1504 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_16_fu_817_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_16_reg_1524 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_17_fu_821_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_17_reg_1529 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_18_fu_825_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_18_reg_1534 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_19_fu_829_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_19_reg_1539 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_20_fu_833_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_20_reg_1544 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1049_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1549 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1549_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal bias_load_reg_1554 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_9_fu_1055_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_9_reg_1559 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_11_fu_1061_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_11_reg_1564 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_10_fu_1067_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_10_reg_1579 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln48_s_reg_1584 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_12_fu_1073_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_12_reg_1589 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_9_fu_899_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_9_reg_1604 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_9_reg_1609 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_13_fu_1079_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_13_reg_1614 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_14_fu_1085_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_14_reg_1619 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_10_fu_940_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_10_reg_1629 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_15_fu_1091_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_15_reg_1634 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_16_fu_1097_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_16_reg_1639 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_12_fu_981_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_12_reg_1644 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_13_fu_986_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_13_reg_1649 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_3_reg_1654 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_4_reg_1659 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_17_fu_1103_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_17_reg_1664 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_15_fu_1031_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_15_reg_1669 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_17_fu_1040_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_17_reg_1674 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten48_phi_fu_302_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_314_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_326_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_338_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_349_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_11_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_12_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_10_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_13_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_14_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_15_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_16_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_17_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_14_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_18_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_18_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_16_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_19_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_20_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_21_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_22_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_23_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_24_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_1045_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_59_fu_384_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_396_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_396_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln27_fu_424_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_fu_420_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_428_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_fu_442_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_2_fu_416_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_fu_442_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln48_fu_447_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln48_fu_447_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_2_fu_472_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_4_fu_468_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln27_mid1_fu_476_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln40_2_cast_fu_490_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_8_fu_520_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_18_fu_546_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_4_fu_517_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_18_fu_546_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln48_2_fu_551_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln48_2_fu_551_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_2_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_61_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln40_2_cast_mid_fu_629_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_10_fu_604_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_mid1_fu_633_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_12_fu_614_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_11_fu_609_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_mid1_fu_646_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_13_fu_619_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_680_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_0_0_mid2_fu_680_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_722_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_1_0_mid2_fu_722_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_fu_730_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_2_0_mid2_fu_730_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_13_fu_743_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln_fu_865_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_8_fu_919_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_11_fu_977_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_2_fu_960_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_1_fu_951_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_5_fu_1017_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_14_fu_1026_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_16_fu_1036_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1049_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1049_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1049_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1049_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln4_fu_396_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln4_fu_396_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_0_0_mid2_fu_680_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_fu_722_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_730_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mac_muladd_5ns_7ns_4ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mac_muladd_5ns_7ns_4ns_11_1_1_U68 : component network_mac_muladd_5ns_7ns_4ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1049_p0,
        din1 => grp_fu_1049_p1,
        din2 => grp_fu_1049_p2,
        dout => grp_fu_1049_p3);

    network_mul_mul_16s_16s_30_1_1_U69 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_reg_1276,
        dout => mul_ln40_9_fu_1055_p2);

    network_mul_mul_16s_16s_30_1_1_U70 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_360,
        din1 => kernel_load_10_reg_1323,
        dout => mul_ln40_11_fu_1061_p2);

    network_mul_mul_16s_16s_30_1_1_U71 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_9_reg_1365,
        dout => mul_ln40_10_fu_1067_p2);

    network_mul_mul_16s_16s_30_1_1_U72 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_360,
        din1 => kernel_load_11_reg_1328,
        dout => mul_ln40_12_fu_1073_p2);

    network_mul_mul_16s_16s_30_1_1_U73 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_12_reg_1370,
        dout => mul_ln40_13_fu_1079_p2);

    network_mul_mul_16s_16s_30_1_1_U74 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_360,
        din1 => kernel_load_13_reg_1443,
        dout => mul_ln40_14_fu_1085_p2);

    network_mul_mul_16s_16s_30_1_1_U75 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_14_reg_1448,
        dout => mul_ln40_15_fu_1091_p2);

    network_mul_mul_16s_16s_30_1_1_U76 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_360,
        din1 => kernel_load_15_reg_1499,
        dout => mul_ln40_16_fu_1097_p2);

    network_mul_mul_16s_16s_30_1_1_U77 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_16_reg_1504,
        dout => mul_ln40_17_fu_1103_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten48_reg_298 <= add_ln23_reg_1209;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten48_reg_298 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_322 <= select_ln32_14_reg_1438;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_322 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_310 <= select_ln24_9_reg_1395;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_310 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_h_0_reg_334 <= select_ln32_reg_1463;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_334 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_w_0_reg_345 <= out_w_reg_1473;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_345 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln23_reg_1209 <= add_ln23_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln24_10_reg_1296 <= add_ln24_10_fu_599_p2;
                add_ln24_reg_1281 <= add_ln24_fu_586_p2;
                out_h_reg_1301 <= out_h_fu_624_p2;
                tmp10_0_0_mid2_v_v_reg_1306 <= tmp10_0_0_mid2_v_v_fu_639_p3;
                tmp12_mid2_v_v_reg_1313 <= tmp12_mid2_v_v_fu_652_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln24_11_reg_1338 <= add_ln24_11_fu_667_p2;
                add_ln24_12_reg_1343 <= add_ln24_12_fu_672_p2;
                tmp10_0_0_mid2_reg_1348 <= tmp10_0_0_mid2_fu_680_p2;
                tmp10_1_0_mid2_v_v_reg_1355 <= tmp10_1_0_mid2_v_v_fu_685_p2;
                tmp10_2_0_mid2_v_v_reg_1360 <= tmp10_2_0_mid2_v_v_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln24_13_reg_1385 <= add_ln24_13_fu_703_p2;
                add_ln24_14_reg_1390 <= add_ln24_14_fu_708_p2;
                add_ln40_14_reg_1433 <= add_ln40_14_fu_752_p2;
                add_ln40_reg_1422 <= add_ln40_fu_738_p2;
                tmp10_1_0_mid2_reg_1401 <= tmp10_1_0_mid2_fu_722_p2;
                tmp10_2_0_mid2_reg_1408 <= tmp10_2_0_mid2_fu_730_p2;
                    zext_ln40_13_reg_1415(3 downto 0) <= zext_ln40_13_fu_735_p1(3 downto 0);
                    zext_ln40_17_reg_1427(3 downto 0) <= zext_ln40_17_fu_748_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln24_8_reg_1235 <= add_ln24_8_fu_534_p2;
                add_ln24_9_reg_1240 <= add_ln24_9_fu_540_p2;
                mul_ln40_18_reg_1245 <= mul_ln40_18_fu_546_p2;
                mul_ln48_2_reg_1251 <= mul_ln48_2_fu_551_p2;
                out_w_0_mid2_reg_1264 <= out_w_0_mid2_fu_572_p3;
                select_ln24_14_reg_1257 <= select_ln24_14_fu_561_p3;
                select_ln24_reg_1214 <= select_ln24_fu_510_p3;
                    zext_ln24_19_reg_1225(5 downto 0) <= zext_ln24_19_fu_530_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_452_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln27_2_reg_1194 <= add_ln27_2_fu_484_p2;
                icmp_ln32_reg_1180 <= icmp_ln32_fu_463_p2;
                out_d_reg_1174 <= out_d_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln27_reg_1153 <= add_ln27_fu_436_p2;
                icmp_ln23_reg_1170 <= icmp_ln23_fu_452_p2;
                icmp_ln23_reg_1170_pp0_iter1_reg <= icmp_ln23_reg_1170;
                icmp_ln23_reg_1170_pp0_iter2_reg <= icmp_ln23_reg_1170_pp0_iter1_reg;
                mul_ln40_reg_1158 <= mul_ln40_fu_442_p2;
                mul_ln48_reg_1164 <= mul_ln48_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1180 = ap_const_lv1_0) and (icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln32_2_reg_1271 <= add_ln32_2_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln40_12_reg_1484 <= add_ln40_12_fu_789_p2;
                add_ln40_15_reg_1494 <= add_ln40_15_fu_798_p2;
                    zext_ln40_15_reg_1478(3 downto 0) <= zext_ln40_15_fu_785_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln40_16_reg_1524 <= add_ln40_16_fu_817_p2;
                add_ln40_17_reg_1529 <= add_ln40_17_fu_821_p2;
                add_ln40_18_reg_1534 <= add_ln40_18_fu_825_p2;
                add_ln40_19_reg_1539 <= add_ln40_19_fu_829_p2;
                add_ln40_20_reg_1544 <= add_ln40_20_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln48_10_reg_1629 <= add_ln48_10_fu_940_p2;
                mul_ln40_13_reg_1614 <= mul_ln40_13_fu_1079_p2;
                mul_ln40_14_reg_1619 <= mul_ln40_14_fu_1085_p2;
                trunc_ln48_9_reg_1609 <= mul_ln40_10_reg_1579(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln48_12_reg_1644 <= add_ln48_12_fu_981_p2;
                add_ln48_13_reg_1649 <= add_ln48_13_fu_986_p2;
                mul_ln40_15_reg_1634 <= mul_ln40_15_fu_1091_p2;
                mul_ln40_16_reg_1639 <= mul_ln40_16_fu_1097_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln48_15_reg_1669 <= add_ln48_15_fu_1031_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln48_17_reg_1674 <= add_ln48_17_fu_1040_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln48_9_reg_1604 <= add_ln48_9_fu_899_p2;
                mul_ln40_10_reg_1579 <= mul_ln40_10_fu_1067_p2;
                mul_ln40_12_reg_1589 <= mul_ln40_12_fu_1073_p2;
                trunc_ln48_s_reg_1584 <= mul_ln40_11_reg_1564(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_reg_1549 <= grp_fu_1049_p3;
                kernel_load_15_reg_1499 <= kernel_q0;
                kernel_load_16_reg_1504 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_reg_1549_pp0_iter2_reg <= add_ln48_reg_1549;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                bias_load_reg_1554 <= bias_q0;
                mul_ln40_11_reg_1564 <= mul_ln40_11_fu_1061_p2;
                mul_ln40_9_reg_1559 <= mul_ln40_9_fu_1055_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1133 <= empty_fu_380_p1;
                icmp_ln33_reg_1148 <= icmp_ln33_fu_410_p2;
                mul_ln4_reg_1138 <= mul_ln4_fu_396_p2;
                    tmp_2_reg_1143(10 downto 3) <= tmp_2_fu_402_p3(10 downto 3);
                    zext_ln40_1_cast14_reg_1115(5 downto 0) <= zext_ln40_1_cast14_fu_368_p1(5 downto 0);
                    zext_ln40_reg_1109(5 downto 0) <= zext_ln40_fu_364_p1(5 downto 0);
                    zext_ln48_1_cast_reg_1128(4 downto 0) <= zext_ln48_1_cast_fu_376_p1(4 downto 0);
                    zext_ln48_reg_1122(4 downto 0) <= zext_ln48_fu_372_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                kernel_load_10_reg_1323 <= kernel_q1;
                kernel_load_11_reg_1328 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                kernel_load_12_reg_1370 <= kernel_q0;
                kernel_load_9_reg_1365 <= kernel_q1;
                select_ln24_9_reg_1395 <= select_ln24_9_fu_713_p3;
                select_ln32_14_reg_1438 <= select_ln32_14_fu_757_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_load_13_reg_1443 <= kernel_q1;
                kernel_load_14_reg_1448 <= kernel_q0;
                out_w_reg_1473 <= out_w_fu_780_p2;
                select_ln32_reg_1463 <= select_ln32_fu_771_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                kernel_load_reg_1276 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1170_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln40_17_reg_1664 <= mul_ln40_17_fu_1103_p2;
                trunc_ln48_3_reg_1654 <= mul_ln40_15_reg_1634(29 downto 14);
                trunc_ln48_4_reg_1659 <= mul_ln40_16_reg_1639(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_356 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_360 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1180 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp11_reg_1204 <= tmp11_fu_499_p2;
                tmp_0_0_reg_1199 <= tmp_0_0_fu_494_p2;
            end if;
        end if;
    end process;
    zext_ln40_reg_1109(6) <= '0';
    zext_ln40_1_cast14_reg_1115(10 downto 6) <= "00000";
    zext_ln48_reg_1122(6 downto 5) <= "00";
    zext_ln48_1_cast_reg_1128(10 downto 5) <= "000000";
    tmp_2_reg_1143(2 downto 0) <= "000";
    zext_ln24_19_reg_1225(6) <= '0';
    zext_ln40_13_reg_1415(10 downto 4) <= "0000000";
    zext_ln40_17_reg_1427(10 downto 4) <= "0000000";
    zext_ln40_15_reg_1478(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1170, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((icmp_ln23_reg_1170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((icmp_ln23_reg_1170 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln23_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten48_reg_298));
    add_ln24_10_fu_599_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(zext_ln24_19_reg_1225));
    add_ln24_11_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(zext_ln24_19_reg_1225));
    add_ln24_12_fu_672_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) + unsigned(zext_ln24_19_reg_1225));
    add_ln24_13_fu_703_p2 <= std_logic_vector(unsigned(ap_const_lv7_7) + unsigned(zext_ln24_19_reg_1225));
    add_ln24_14_fu_708_p2 <= std_logic_vector(unsigned(ap_const_lv7_8) + unsigned(zext_ln24_19_reg_1225));
    add_ln24_8_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(zext_ln24_19_fu_530_p1));
    add_ln24_9_fu_540_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(zext_ln24_19_fu_530_p1));
    add_ln24_fu_586_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(zext_ln24_19_reg_1225));
    add_ln27_2_fu_484_p2 <= std_logic_vector(unsigned(zext_ln27_4_fu_468_p1) + unsigned(shl_ln27_mid1_fu_476_p3));
    add_ln27_fu_436_p2 <= std_logic_vector(unsigned(zext_ln27_fu_420_p1) + unsigned(shl_ln_fu_428_p3));
    add_ln32_2_fu_580_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_322));
    add_ln40_12_fu_789_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1348) + unsigned(zext_ln40_15_fu_785_p1));
    add_ln40_13_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(out_w_0_mid2_reg_1264));
    add_ln40_14_fu_752_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1348) + unsigned(zext_ln40_17_fu_748_p1));
    add_ln40_15_fu_798_p2 <= std_logic_vector(unsigned(zext_ln40_13_reg_1415) + unsigned(tmp10_1_0_mid2_reg_1401));
    add_ln40_16_fu_817_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1401) + unsigned(zext_ln40_15_reg_1478));
    add_ln40_17_fu_821_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1401) + unsigned(zext_ln40_17_reg_1427));
    add_ln40_18_fu_825_p2 <= std_logic_vector(unsigned(zext_ln40_13_reg_1415) + unsigned(tmp10_2_0_mid2_reg_1408));
    add_ln40_19_fu_829_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1408) + unsigned(zext_ln40_15_reg_1478));
    add_ln40_20_fu_833_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1408) + unsigned(zext_ln40_17_reg_1427));
    add_ln40_fu_738_p2 <= std_logic_vector(unsigned(zext_ln40_13_fu_735_p1) + unsigned(tmp10_0_0_mid2_reg_1348));
    add_ln48_10_fu_940_p2 <= std_logic_vector(unsigned(trunc_ln48_8_fu_919_p4) + unsigned(trunc_ln48_s_reg_1584));
    add_ln48_11_fu_977_p2 <= std_logic_vector(unsigned(trunc_ln48_9_reg_1609) + unsigned(add_ln48_10_reg_1629));
    add_ln48_12_fu_981_p2 <= std_logic_vector(unsigned(add_ln48_9_reg_1604) + unsigned(add_ln48_11_fu_977_p2));
    add_ln48_13_fu_986_p2 <= std_logic_vector(unsigned(trunc_ln48_2_fu_960_p4) + unsigned(trunc_ln48_1_fu_951_p4));
    add_ln48_14_fu_1026_p2 <= std_logic_vector(unsigned(trunc_ln48_5_fu_1017_p4) + unsigned(trunc_ln48_4_reg_1659));
    add_ln48_15_fu_1031_p2 <= std_logic_vector(unsigned(trunc_ln48_3_reg_1654) + unsigned(add_ln48_14_fu_1026_p2));
    add_ln48_16_fu_1036_p2 <= std_logic_vector(unsigned(add_ln48_13_reg_1649) + unsigned(add_ln48_15_reg_1669));
    add_ln48_17_fu_1040_p2 <= std_logic_vector(unsigned(add_ln48_12_reg_1644) + unsigned(add_ln48_16_fu_1036_p2));
    add_ln48_9_fu_899_p2 <= std_logic_vector(unsigned(trunc_ln_fu_865_p4) + unsigned(bias_load_reg_1554));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln23_reg_1170)
    begin
        if ((icmp_ln23_reg_1170 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten48_phi_fu_302_p4_assign_proc : process(indvar_flatten48_reg_298, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1170, ap_CS_fsm_pp0_stage0, add_ln23_reg_1209, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten48_phi_fu_302_p4 <= add_ln23_reg_1209;
        else 
            ap_phi_mux_indvar_flatten48_phi_fu_302_p4 <= indvar_flatten48_reg_298;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_326_p4_assign_proc : process(indvar_flatten_reg_322, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1170, ap_CS_fsm_pp0_stage0, select_ln32_14_reg_1438, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_326_p4 <= select_ln32_14_reg_1438;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_326_p4 <= indvar_flatten_reg_322;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_314_p4_assign_proc : process(out_d_0_reg_310, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1170, ap_CS_fsm_pp0_stage0, select_ln24_9_reg_1395, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1170 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_314_p4 <= select_ln24_9_reg_1395;
        else 
            ap_phi_mux_out_d_0_phi_fu_314_p4 <= out_d_0_reg_310;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_338_p4_assign_proc : process(out_h_0_reg_334, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1170_pp0_iter1_reg, select_ln32_reg_1463, ap_block_pp0_stage1)
    begin
        if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_out_h_0_phi_fu_338_p4 <= select_ln32_reg_1463;
        else 
            ap_phi_mux_out_h_0_phi_fu_338_p4 <= out_h_0_reg_334;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_349_p4_assign_proc : process(out_w_0_reg_345, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1170_pp0_iter1_reg, out_w_reg_1473, ap_block_pp0_stage1)
    begin
        if (((icmp_ln23_reg_1170_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_out_w_0_phi_fu_349_p4 <= out_w_reg_1473;
        else 
            ap_phi_mux_out_w_0_phi_fu_349_p4 <= out_w_0_reg_345;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln24_18_fu_802_p1(3 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_59_fu_384_p1 <= output_height(4 - 1 downto 0);
    empty_61_fu_567_p2 <= (select_ln24_14_fu_561_p3 or icmp_ln32_reg_1180);
    empty_fu_380_p1 <= output_width(4 - 1 downto 0);
    grp_fu_1049_p0 <= zext_ln48_1_cast_reg_1128(5 - 1 downto 0);
    grp_fu_1049_p1 <= grp_fu_1049_p10(7 - 1 downto 0);
    grp_fu_1049_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_mid2_v_v_reg_1313),11));
    grp_fu_1049_p2 <= zext_ln40_13_reg_1415(4 - 1 downto 0);
    icmp_ln23_fu_452_p2 <= "1" when (ap_phi_mux_indvar_flatten48_phi_fu_302_p4 = tmp_2_reg_1143) else "0";
    icmp_ln32_fu_463_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_326_p4 = mul_ln4_reg_1138) else "0";
    icmp_ln33_2_fu_556_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_349_p4 = empty_reg_1133) else "0";
    icmp_ln33_fu_410_p2 <= "1" when (empty_fu_380_p1 = ap_const_lv4_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, zext_ln40_14_fu_776_p1, zext_ln40_16_fu_809_p1, zext_ln40_20_fu_851_p1, zext_ln40_22_fu_891_p1, zext_ln40_24_fu_936_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address0 <= zext_ln40_24_fu_936_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address0 <= zext_ln40_22_fu_891_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address0 <= zext_ln40_20_fu_851_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln40_16_fu_809_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln40_14_fu_776_p1(14 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln40_18_fu_794_p1, zext_ln40_19_fu_813_p1, zext_ln40_21_fu_855_p1, zext_ln40_23_fu_895_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= zext_ln40_23_fu_895_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln40_21_fu_855_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln40_19_fu_813_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address1 <= zext_ln40_18_fu_794_p1(14 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln24_fu_525_p1, ap_block_pp0_stage2, zext_ln24_12_fu_595_p1, ap_block_pp0_stage3, zext_ln24_13_fu_663_p1, ap_block_pp0_stage4, zext_ln24_15_fu_699_p1, zext_ln24_16_fu_763_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_address0 <= zext_ln24_16_fu_763_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            kernel_address0 <= zext_ln24_15_fu_699_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            kernel_address0 <= zext_ln24_13_fu_663_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_address0 <= zext_ln24_12_fu_595_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_address0 <= zext_ln24_fu_525_p1(7 - 1 downto 0);
        else 
            kernel_address0 <= "XXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln24_11_fu_591_p1, ap_block_pp0_stage2, zext_ln24_10_fu_659_p1, ap_block_pp0_stage3, zext_ln24_14_fu_695_p1, ap_block_pp0_stage4, zext_ln24_17_fu_767_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_address1 <= zext_ln24_17_fu_767_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            kernel_address1 <= zext_ln24_14_fu_695_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            kernel_address1 <= zext_ln24_10_fu_659_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_address1 <= zext_ln24_11_fu_591_p1(7 - 1 downto 0);
        else 
            kernel_address1 <= "XXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln40_18_fu_546_p0 <= zext_ln48_4_fu_517_p1(4 - 1 downto 0);
    mul_ln40_18_fu_546_p1 <= zext_ln40_reg_1109(6 - 1 downto 0);
    mul_ln40_18_fu_546_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_18_fu_546_p0) * unsigned(mul_ln40_18_fu_546_p1), 7));
    mul_ln40_fu_442_p0 <= zext_ln48_2_fu_416_p1(4 - 1 downto 0);
    mul_ln40_fu_442_p1 <= zext_ln40_reg_1109(6 - 1 downto 0);
    mul_ln40_fu_442_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_fu_442_p0) * unsigned(mul_ln40_fu_442_p1), 7));
    mul_ln48_2_fu_551_p0 <= zext_ln48_4_fu_517_p1(4 - 1 downto 0);
    mul_ln48_2_fu_551_p1 <= zext_ln48_reg_1122(5 - 1 downto 0);
    mul_ln48_2_fu_551_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_2_fu_551_p0) * unsigned(mul_ln48_2_fu_551_p1), 7));
    mul_ln48_fu_447_p0 <= zext_ln48_2_fu_416_p1(4 - 1 downto 0);
    mul_ln48_fu_447_p1 <= zext_ln48_reg_1122(5 - 1 downto 0);
    mul_ln48_fu_447_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_fu_447_p0) * unsigned(mul_ln48_fu_447_p1), 7));
    mul_ln4_fu_396_p0 <= mul_ln4_fu_396_p00(4 - 1 downto 0);
    mul_ln4_fu_396_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_59_fu_384_p1),8));
    mul_ln4_fu_396_p1 <= mul_ln4_fu_396_p10(4 - 1 downto 0);
    mul_ln4_fu_396_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_380_p1),8));
    mul_ln4_fu_396_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln4_fu_396_p0) * unsigned(mul_ln4_fu_396_p1), 8));
    out_d_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4));
    out_h_fu_624_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln24_reg_1214));
    out_w_0_mid2_fu_572_p3 <= 
        ap_const_lv4_0 when (empty_61_fu_567_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_349_p4;
    out_w_fu_780_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(out_w_0_mid2_reg_1264));
    output_r_address0 <= zext_ln48_3_fu_1045_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln48_17_reg_1674;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter2, icmp_ln23_reg_1170_pp0_iter2_reg)
    begin
        if (((icmp_ln23_reg_1170_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_10_fu_604_p3 <= 
        mul_ln40_18_reg_1245 when (icmp_ln32_reg_1180(0) = '1') else 
        mul_ln40_reg_1158;
    select_ln24_11_fu_609_p3 <= 
        mul_ln48_2_reg_1251 when (icmp_ln32_reg_1180(0) = '1') else 
        mul_ln48_reg_1164;
    select_ln24_12_fu_614_p3 <= 
        mul_ln40_18_reg_1245 when (icmp_ln32_reg_1180(0) = '1') else 
        tmp_0_0_reg_1199;
    select_ln24_13_fu_619_p3 <= 
        mul_ln48_2_reg_1251 when (icmp_ln32_reg_1180(0) = '1') else 
        tmp11_reg_1204;
    select_ln24_14_fu_561_p3 <= 
        icmp_ln33_reg_1148 when (icmp_ln32_reg_1180(0) = '1') else 
        icmp_ln33_2_fu_556_p2;
    select_ln24_8_fu_520_p3 <= 
        add_ln27_2_reg_1194 when (icmp_ln32_reg_1180(0) = '1') else 
        add_ln27_reg_1153;
    select_ln24_9_fu_713_p3 <= 
        out_d_reg_1174 when (icmp_ln32_reg_1180(0) = '1') else 
        out_d_0_reg_310;
    select_ln24_fu_510_p3 <= 
        ap_const_lv4_0 when (icmp_ln32_reg_1180(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_338_p4;
    select_ln32_14_fu_757_p3 <= 
        ap_const_lv8_1 when (icmp_ln32_reg_1180(0) = '1') else 
        add_ln32_2_reg_1271;
    select_ln32_fu_771_p3 <= 
        out_h_reg_1301 when (select_ln24_14_reg_1257(0) = '1') else 
        select_ln24_reg_1214;
    shl_ln27_mid1_fu_476_p3 <= (trunc_ln27_2_fu_472_p1 & ap_const_lv3_0);
    shl_ln_fu_428_p3 <= (trunc_ln27_fu_424_p1 & ap_const_lv3_0);
    tmp10_0_0_mid2_fu_680_p0 <= zext_ln40_1_cast14_reg_1115(6 - 1 downto 0);
    tmp10_0_0_mid2_fu_680_p1 <= tmp10_0_0_mid2_fu_680_p10(7 - 1 downto 0);
    tmp10_0_0_mid2_fu_680_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_reg_1306),11));
    tmp10_0_0_mid2_fu_680_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_fu_680_p0) * unsigned(tmp10_0_0_mid2_fu_680_p1), 11));
    tmp10_0_0_mid2_v_v_fu_639_p3 <= 
        tmp_0_0_mid1_fu_633_p2 when (select_ln24_14_reg_1257(0) = '1') else 
        select_ln24_12_fu_614_p3;
    tmp10_1_0_mid2_fu_722_p0 <= zext_ln40_1_cast14_reg_1115(6 - 1 downto 0);
    tmp10_1_0_mid2_fu_722_p1 <= tmp10_1_0_mid2_fu_722_p10(7 - 1 downto 0);
    tmp10_1_0_mid2_fu_722_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_v_v_reg_1355),11));
    tmp10_1_0_mid2_fu_722_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_fu_722_p0) * unsigned(tmp10_1_0_mid2_fu_722_p1), 11));
    tmp10_1_0_mid2_v_v_fu_685_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp10_0_0_mid2_v_v_reg_1306));
    tmp10_2_0_mid2_fu_730_p0 <= zext_ln40_1_cast14_reg_1115(6 - 1 downto 0);
    tmp10_2_0_mid2_fu_730_p1 <= tmp10_2_0_mid2_fu_730_p10(7 - 1 downto 0);
    tmp10_2_0_mid2_fu_730_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_v_v_reg_1360),11));
    tmp10_2_0_mid2_fu_730_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_fu_730_p0) * unsigned(tmp10_2_0_mid2_fu_730_p1), 11));
    tmp10_2_0_mid2_v_v_fu_690_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(tmp10_0_0_mid2_v_v_reg_1306));
    tmp11_fu_499_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_fu_490_p1) + unsigned(mul_ln48_reg_1164));
    tmp11_mid1_fu_646_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_fu_629_p1) + unsigned(select_ln24_11_fu_609_p3));
    tmp12_mid2_v_v_fu_652_p3 <= 
        tmp11_mid1_fu_646_p2 when (select_ln24_14_reg_1257(0) = '1') else 
        select_ln24_13_fu_619_p3;
    tmp_0_0_fu_494_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_fu_490_p1) + unsigned(mul_ln40_reg_1158));
    tmp_0_0_mid1_fu_633_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_fu_629_p1) + unsigned(select_ln24_10_fu_604_p3));
    tmp_2_fu_402_p3 <= (mul_ln4_fu_396_p2 & ap_const_lv3_0);
    trunc_ln27_2_fu_472_p1 <= out_d_fu_457_p2(3 - 1 downto 0);
    trunc_ln27_fu_424_p1 <= ap_phi_mux_out_d_0_phi_fu_314_p4(3 - 1 downto 0);
    trunc_ln48_1_fu_951_p4 <= mul_ln40_13_reg_1614(29 downto 14);
    trunc_ln48_2_fu_960_p4 <= mul_ln40_14_reg_1619(29 downto 14);
    trunc_ln48_5_fu_1017_p4 <= mul_ln40_17_reg_1664(29 downto 14);
    trunc_ln48_8_fu_919_p4 <= mul_ln40_12_reg_1589(29 downto 14);
    trunc_ln_fu_865_p4 <= mul_ln40_9_reg_1559(29 downto 14);
    zext_ln24_10_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_reg_1281),64));
    zext_ln24_11_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_8_reg_1235),64));
    zext_ln24_12_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_9_reg_1240),64));
    zext_ln24_13_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_10_reg_1296),64));
    zext_ln24_14_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_11_reg_1338),64));
    zext_ln24_15_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_12_reg_1343),64));
    zext_ln24_16_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_13_reg_1385),64));
    zext_ln24_17_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_14_reg_1390),64));
    zext_ln24_18_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_9_reg_1395),64));
    zext_ln24_19_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_8_fu_520_p3),7));
    zext_ln24_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_8_fu_520_p3),64));
    zext_ln27_4_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_457_p2),6));
    zext_ln27_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),6));
    zext_ln40_13_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1264),11));
    zext_ln40_14_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_reg_1422),64));
    zext_ln40_15_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_780_p2),11));
    zext_ln40_16_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_12_reg_1484),64));
    zext_ln40_17_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_13_fu_743_p2),11));
    zext_ln40_18_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_14_reg_1433),64));
    zext_ln40_19_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_15_reg_1494),64));
    zext_ln40_1_cast14_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln40_20_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_16_reg_1524),64));
    zext_ln40_21_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_17_reg_1529),64));
    zext_ln40_22_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_18_reg_1534),64));
    zext_ln40_23_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_19_reg_1539),64));
    zext_ln40_24_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_20_reg_1544),64));
    zext_ln40_2_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_338_p4),7));
    zext_ln40_2_cast_mid_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_624_p2),7));
    zext_ln40_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln48_1_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln48_2_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),7));
    zext_ln48_3_fu_1045_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1549_pp0_iter2_reg),64));
    zext_ln48_4_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_1174),7));
    zext_ln48_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
end behav;
