-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_0_ce1 : OUT STD_LOGIC;
    kernel_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_390 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_395 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal output_width_cast_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast_reg_1272 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_fu_403_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_reg_1278 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln36_fu_407_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln36_reg_1283 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln36_3_fu_411_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln36_3_reg_1290 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_cast_fu_415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_cast_reg_1295 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_419_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1300 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_fu_423_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_reg_1305 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln19_100_fu_428_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_100_reg_1310 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_d_fu_439_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1318 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_addr_reg_1323 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln19_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_addr_reg_1328 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_1_reg_1333 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_2_reg_1338 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_3_reg_1343 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_4_reg_1348 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_5_reg_1353 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_6_reg_1358 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_7_reg_1363 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_8_reg_1368 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_fu_574_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_1376 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_0_0_0_fu_584_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_0_reg_1381 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln20_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_0_1_0_fu_590_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_1_0_reg_1386 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_2_0_fu_596_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_2_0_reg_1391 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_0_fu_602_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_0_reg_1396 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_0_cast_fu_616_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_0_0_cast_reg_1401 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp5_0_1_0_cast_fu_628_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_1_0_cast_reg_1410 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_0_cast_fu_640_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_0_cast_reg_1419 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_0_cast_fu_652_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_0_cast_reg_1428 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln21_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1434 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln28_31_fu_661_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_31_reg_1438 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_45_fu_665_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_45_reg_1445 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_47_fu_670_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_47_reg_1450 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln28_33_fu_686_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_33_reg_1462 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_46_fu_690_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_46_reg_1471 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_48_fu_695_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_48_reg_1476 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln21_1_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_1481 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_load_reg_1485 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_49_fu_712_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_49_reg_1500 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_50_fu_716_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_50_reg_1505 : STD_LOGIC_VECTOR (16 downto 0);
    signal kernel_0_load_1_reg_1510 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_209_reg_1515 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_2_reg_1520 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_51_fu_728_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_51_reg_1535 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_52_fu_732_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_52_reg_1540 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_load_210_reg_1545 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal kernel_0_load_3_reg_1550 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_211_reg_1555 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_4_reg_1560 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_53_fu_744_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_53_reg_1575 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_54_fu_748_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_54_reg_1580 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_load_212_reg_1585 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal kernel_0_load_5_reg_1590 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_213_reg_1595 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_6_reg_1600 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_214_reg_1615 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal kernel_0_load_7_reg_1620 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_215_reg_1625 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_8_reg_1630 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sext_ln28_36_fu_763_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_36_reg_1640 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_37_fu_766_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_37_reg_1646 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_38_fu_769_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_38_reg_1652 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_40_fu_775_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_40_reg_1663 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln28_24_fu_782_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_24_reg_1674 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_25_fu_785_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_25_reg_1680 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_26_fu_789_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_26_reg_1686 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_28_fu_795_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_28_reg_1697 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_30_fu_801_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_30_reg_1708 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_31_fu_804_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_31_reg_1714 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_32_fu_807_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_32_reg_1720 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_34_fu_813_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_34_reg_1731 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1176_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_23_reg_1737 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_1182_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_24_reg_1742 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1188_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_25_reg_1747 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_load_reg_1752 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_1194_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_reg_1758 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1200_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_18_reg_1763 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1206_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_19_reg_1768 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1212_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_20_reg_1773 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1218_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_21_reg_1778 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1224_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_22_reg_1783 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_61_fu_849_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_61_reg_1788 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_55_fu_909_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_55_reg_1793 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln28_57_fu_920_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_57_reg_1798 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_62_fu_932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_62_reg_1803 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_63_fu_941_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_63_reg_1808 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln36_fu_946_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_reg_1813 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_64_fu_954_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_64_reg_1818 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln28_66_fu_959_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_66_reg_1825 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_1_fu_964_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_1_reg_1832 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln21_fu_968_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_reg_1837 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_65_fu_974_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_65_reg_1842 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln28_67_fu_978_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_67_reg_1847 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1230_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_26_reg_1852 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_29_reg_1867 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_68_fu_990_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_68_reg_1872 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_69_fu_994_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_69_reg_1877 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1238_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_32_reg_1882 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_70_fu_998_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_70_reg_1887 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_71_fu_1002_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_71_reg_1892 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_27_reg_1897 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_30_reg_1912 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_72_fu_1041_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_72_reg_1917 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1242_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_27_reg_1952 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_1247_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_28_reg_1957 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1252_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_30_reg_1972 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_1257_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_31_reg_1977 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_74_fu_1101_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_74_reg_1982 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_28_reg_1987 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal trunc_ln28_29_reg_1992 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1262_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_33_reg_1997 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1267_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_34_reg_2002 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_78_fu_1149_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_78_reg_2007 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal add_ln28_79_fu_1158_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_79_reg_2012 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln28_80_fu_1167_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_80_reg_2017 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal out_d_0_reg_332 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_343 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul2_reg_355 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_0_reg_367 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_0_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln23_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_14_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_15_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_16_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_17_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_18_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_19_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_20_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_21_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_22_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_32_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_34_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_35_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_36_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_37_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_38_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_39_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_40_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_41_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_4_fu_950_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_42_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_43_fu_986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_44_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_45_fu_1028_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_46_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_47_fu_1058_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_5_fu_1172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln28_fu_454_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_29_fu_450_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_458_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_466_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_30_fu_472_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_37_fu_481_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_38_fu_492_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_39_fu_503_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_40_fu_514_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_41_fu_525_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_42_fu_536_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_43_fu_547_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_44_fu_558_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_3_cast_fu_580_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_0_fu_611_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_0_0_fu_611_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_0_fu_611_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_1_0_fu_623_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_1_0_fu_623_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_1_0_fu_623_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_2_0_fu_635_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_2_0_fu_635_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_2_0_fu_635_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp7_0_fu_647_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp7_0_fu_647_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_0_fu_647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln28_fu_680_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_22_fu_825_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_23_fu_834_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_60_fu_843_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_21_fu_816_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_855_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_17_fu_873_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_18_fu_882_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_56_fu_914_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_s_fu_864_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_19_fu_891_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_20_fu_900_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_59_fu_926_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_58_fu_937_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_24_fu_1006_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_26_fu_1087_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_73_fu_1096_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_25_fu_1078_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_31_fu_1125_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_32_fu_1134_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_77_fu_1143_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_76_fu_1154_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_75_fu_1163_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1230_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1234_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1238_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1242_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1247_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1252_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1257_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1262_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1267_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp5_0_0_0_fu_611_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_1_0_fu_623_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_2_0_fu_635_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp7_0_fu_647_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component network_mul_mul_16s_16s_30_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_3_1_U107 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_6_reg_1600,
        din1 => input_load_213_reg_1595,
        ce => ap_const_logic_1,
        dout => grp_fu_1176_p2);

    network_mul_mul_16s_16s_30_3_1_U108 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_7_reg_1620,
        din1 => input_load_214_reg_1615,
        ce => ap_const_logic_1,
        dout => grp_fu_1182_p2);

    network_mul_mul_16s_16s_30_3_1_U109 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_8_reg_1630,
        din1 => input_load_215_reg_1625,
        ce => ap_const_logic_1,
        dout => grp_fu_1188_p2);

    network_mul_mul_16s_16s_30_3_1_U110 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_reg_1485,
        din1 => reg_390,
        ce => ap_const_logic_1,
        dout => grp_fu_1194_p2);

    network_mul_mul_16s_16s_30_3_1_U111 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_1_reg_1510,
        din1 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_1200_p2);

    network_mul_mul_16s_16s_30_3_1_U112 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_2_reg_1520,
        din1 => input_load_209_reg_1515,
        ce => ap_const_logic_1,
        dout => grp_fu_1206_p2);

    network_mul_mul_16s_16s_30_3_1_U113 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_3_reg_1550,
        din1 => input_load_210_reg_1545,
        ce => ap_const_logic_1,
        dout => grp_fu_1212_p2);

    network_mul_mul_16s_16s_30_3_1_U114 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_4_reg_1560,
        din1 => input_load_211_reg_1555,
        ce => ap_const_logic_1,
        dout => grp_fu_1218_p2);

    network_mul_mul_16s_16s_30_3_1_U115 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_5_reg_1590,
        din1 => input_load_212_reg_1585,
        ce => ap_const_logic_1,
        dout => grp_fu_1224_p2);

    network_mul_mul_16s_16s_30_3_1_U116 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1230_p0,
        din1 => grp_fu_1230_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1230_p2);

    network_mul_mul_16s_16s_30_3_1_U117 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1234_p0,
        din1 => grp_fu_1234_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1234_p2);

    network_mul_mul_16s_16s_30_3_1_U118 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1238_p0,
        din1 => grp_fu_1238_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1238_p2);

    network_mul_mul_16s_16s_30_3_1_U119 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1242_p0,
        din1 => reg_390,
        ce => ap_const_logic_1,
        dout => grp_fu_1242_p2);

    network_mul_mul_16s_16s_30_3_1_U120 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1247_p0,
        din1 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_1247_p2);

    network_mul_mul_16s_16s_30_3_1_U121 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1252_p0,
        din1 => reg_390,
        ce => ap_const_logic_1,
        dout => grp_fu_1252_p2);

    network_mul_mul_16s_16s_30_3_1_U122 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1257_p0,
        din1 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_1257_p2);

    network_mul_mul_16s_16s_30_3_1_U123 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1262_p0,
        din1 => reg_390,
        ce => ap_const_logic_1,
        dout => grp_fu_1262_p2);

    network_mul_mul_16s_16s_30_3_1_U124 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1267_p0,
        din1 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_1267_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_0_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_569_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_332 <= out_d_reg_1318;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_0_reg_332 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_433_p2 = ap_const_lv1_0))) then 
                out_h_0_reg_367 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and ((icmp_ln21_1_reg_1481 = ap_const_lv1_1) or (icmp_ln21_reg_1434 = ap_const_lv1_1)))) then 
                out_h_0_reg_367 <= out_h_reg_1376;
            end if; 
        end if;
    end process;

    out_w_0_0_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_0_0_reg_378 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                out_w_0_0_reg_378 <= add_ln21_reg_1837;
            end if; 
        end if;
    end process;

    phi_mul2_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_569_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_355 <= add_ln19_reg_1305;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_355 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_569_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_343 <= add_ln19_100_reg_1310;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_343 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                reg_390 <= input_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_390 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln19_100_reg_1310 <= add_ln19_100_fu_428_p2;
                add_ln19_reg_1305 <= add_ln19_fu_423_p2;
                out_d_reg_1318 <= out_d_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln21_1_reg_1481 = ap_const_lv1_0) and (icmp_ln21_reg_1434 = ap_const_lv1_0))) then
                add_ln21_reg_1837 <= add_ln21_fu_968_p2;
                    add_ln28_64_reg_1818(16 downto 1) <= add_ln28_64_fu_954_p2(16 downto 1);
                    add_ln28_66_reg_1825(16 downto 1) <= add_ln28_66_fu_959_p2(16 downto 1);
                add_ln36_1_reg_1832 <= add_ln36_1_fu_964_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_656_p2 = ap_const_lv1_0))) then
                add_ln28_45_reg_1445 <= add_ln28_45_fu_665_p2;
                add_ln28_47_reg_1450 <= add_ln28_47_fu_670_p2;
                    zext_ln28_31_reg_1438(15 downto 0) <= zext_ln28_31_fu_661_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln28_46_reg_1471 <= add_ln28_46_fu_690_p2;
                add_ln28_48_reg_1476 <= add_ln28_48_fu_695_p2;
                icmp_ln21_1_reg_1481 <= icmp_ln21_1_fu_699_p2;
                    zext_ln28_33_reg_1462(15 downto 1) <= zext_ln28_33_fu_686_p1(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln28_49_reg_1500 <= add_ln28_49_fu_712_p2;
                add_ln28_50_reg_1505 <= add_ln28_50_fu_716_p2;
                kernel_0_load_reg_1485 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln28_51_reg_1535 <= add_ln28_51_fu_728_p2;
                add_ln28_52_reg_1540 <= add_ln28_52_fu_732_p2;
                input_load_209_reg_1515 <= input_r_q1;
                kernel_0_load_1_reg_1510 <= kernel_0_q0;
                kernel_0_load_2_reg_1520 <= kernel_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln28_53_reg_1575 <= add_ln28_53_fu_744_p2;
                add_ln28_54_reg_1580 <= add_ln28_54_fu_748_p2;
                input_load_210_reg_1545 <= input_r_q1;
                input_load_211_reg_1555 <= input_r_q0;
                kernel_0_load_3_reg_1550 <= kernel_0_q1;
                kernel_0_load_4_reg_1560 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln28_55_reg_1793 <= add_ln28_55_fu_909_p2;
                add_ln28_57_reg_1798 <= add_ln28_57_fu_920_p2;
                add_ln28_62_reg_1803 <= add_ln28_62_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln28_61_reg_1788 <= add_ln28_61_fu_849_p2;
                bias_load_reg_1752 <= bias_q0;
                mul_ln28_18_reg_1763 <= grp_fu_1200_p2;
                mul_ln28_19_reg_1768 <= grp_fu_1206_p2;
                mul_ln28_20_reg_1773 <= grp_fu_1212_p2;
                mul_ln28_21_reg_1778 <= grp_fu_1218_p2;
                mul_ln28_22_reg_1783 <= grp_fu_1224_p2;
                mul_ln28_reg_1758 <= grp_fu_1194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln28_63_reg_1808 <= add_ln28_63_fu_941_p2;
                add_ln36_reg_1813 <= add_ln36_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln28_65_reg_1842 <= add_ln28_65_fu_974_p2;
                add_ln28_67_reg_1847 <= add_ln28_67_fu_978_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln28_68_reg_1872 <= add_ln28_68_fu_990_p2;
                add_ln28_69_reg_1877 <= add_ln28_69_fu_994_p2;
                add_ln28_70_reg_1887 <= add_ln28_70_fu_998_p2;
                add_ln28_71_reg_1892 <= add_ln28_71_fu_1002_p2;
                mul_ln28_26_reg_1852 <= grp_fu_1230_p2;
                mul_ln28_29_reg_1867 <= grp_fu_1234_p2;
                mul_ln28_32_reg_1882 <= grp_fu_1238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln28_72_reg_1917 <= add_ln28_72_fu_1041_p2;
                trunc_ln28_27_reg_1897 <= mul_ln28_29_reg_1867(29 downto 14);
                trunc_ln28_30_reg_1912 <= mul_ln28_32_reg_1882(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln28_74_reg_1982 <= add_ln28_74_fu_1101_p2;
                mul_ln28_30_reg_1972 <= grp_fu_1252_p2;
                mul_ln28_31_reg_1977 <= grp_fu_1257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                add_ln28_78_reg_2007 <= add_ln28_78_fu_1149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln28_79_reg_2012 <= add_ln28_79_fu_1158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln28_80_reg_2017 <= add_ln28_80_fu_1167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_433_p2 = ap_const_lv1_0))) then
                bias_addr_reg_1323 <= zext_ln23_fu_445_p1(3 - 1 downto 0);
                kernel_0_addr_1_reg_1333 <= zext_ln28_15_fu_487_p1(7 - 1 downto 0);
                kernel_0_addr_2_reg_1338 <= zext_ln28_16_fu_498_p1(7 - 1 downto 0);
                kernel_0_addr_3_reg_1343 <= zext_ln28_17_fu_509_p1(7 - 1 downto 0);
                kernel_0_addr_4_reg_1348 <= zext_ln28_18_fu_520_p1(7 - 1 downto 0);
                kernel_0_addr_5_reg_1353 <= zext_ln28_19_fu_531_p1(7 - 1 downto 0);
                kernel_0_addr_6_reg_1358 <= zext_ln28_20_fu_542_p1(7 - 1 downto 0);
                kernel_0_addr_7_reg_1363 <= zext_ln28_21_fu_553_p1(7 - 1 downto 0);
                kernel_0_addr_8_reg_1368 <= zext_ln28_22_fu_564_p1(7 - 1 downto 0);
                    kernel_0_addr_reg_1328(5 downto 0) <= zext_ln28_14_fu_476_p1(7 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_1300 <= empty_fu_419_p1;
                    output_width_cast_reg_1272(4 downto 0) <= output_width_cast_fu_399_p1(4 downto 0);
                    zext_ln19_cast_reg_1295(4 downto 0) <= zext_ln19_cast_fu_415_p1(4 downto 0);
                    zext_ln28_reg_1278(5 downto 0) <= zext_ln28_fu_403_p1(5 downto 0);
                    zext_ln36_3_reg_1290(4 downto 0) <= zext_ln36_3_fu_411_p1(4 downto 0);
                    zext_ln36_reg_1283(5 downto 0) <= zext_ln36_fu_407_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln21_reg_1434 <= icmp_ln21_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_212_reg_1585 <= input_r_q1;
                input_load_213_reg_1595 <= input_r_q0;
                kernel_0_load_5_reg_1590 <= kernel_0_q1;
                kernel_0_load_6_reg_1600 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_214_reg_1615 <= input_r_q1;
                input_load_215_reg_1625 <= input_r_q0;
                kernel_0_load_7_reg_1620 <= kernel_0_q1;
                kernel_0_load_8_reg_1630 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                mul_ln28_23_reg_1737 <= grp_fu_1176_p2;
                mul_ln28_24_reg_1742 <= grp_fu_1182_p2;
                mul_ln28_25_reg_1747 <= grp_fu_1188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                mul_ln28_27_reg_1952 <= grp_fu_1242_p2;
                mul_ln28_28_reg_1957 <= grp_fu_1247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                mul_ln28_33_reg_1997 <= grp_fu_1262_p2;
                mul_ln28_34_reg_2002 <= grp_fu_1267_p2;
                trunc_ln28_28_reg_1987 <= mul_ln28_30_reg_1972(29 downto 14);
                trunc_ln28_29_reg_1992 <= mul_ln28_31_reg_1977(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_reg_1376 <= out_h_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_395 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sext_ln28_24_reg_1674 <= sext_ln28_24_fu_782_p1;
                sext_ln28_25_reg_1680 <= sext_ln28_25_fu_785_p1;
                sext_ln28_26_reg_1686 <= sext_ln28_26_fu_789_p1;
                sext_ln28_28_reg_1697 <= sext_ln28_28_fu_795_p1;
                sext_ln28_30_reg_1708 <= sext_ln28_30_fu_801_p1;
                sext_ln28_31_reg_1714 <= sext_ln28_31_fu_804_p1;
                sext_ln28_32_reg_1720 <= sext_ln28_32_fu_807_p1;
                sext_ln28_34_reg_1731 <= sext_ln28_34_fu_813_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                sext_ln28_36_reg_1640 <= sext_ln28_36_fu_763_p1;
                sext_ln28_37_reg_1646 <= sext_ln28_37_fu_766_p1;
                sext_ln28_38_reg_1652 <= sext_ln28_38_fu_769_p1;
                sext_ln28_40_reg_1663 <= sext_ln28_40_fu_775_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp5_0_0_0_cast_reg_1401(12 downto 0) <= tmp5_0_0_0_cast_fu_616_p1(12 downto 0);
                    tmp5_0_1_0_cast_reg_1410(12 downto 0) <= tmp5_0_1_0_cast_fu_628_p1(12 downto 0);
                    tmp5_0_2_0_cast_reg_1419(12 downto 0) <= tmp5_0_2_0_cast_fu_640_p1(12 downto 0);
                    tmp7_0_cast_reg_1428(11 downto 0) <= tmp7_0_cast_fu_652_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_569_p2 = ap_const_lv1_0))) then
                tmp6_0_reg_1396 <= tmp6_0_fu_602_p2;
                tmp_0_0_0_reg_1381 <= tmp_0_0_0_fu_584_p2;
                tmp_0_1_0_reg_1386 <= tmp_0_1_0_fu_590_p2;
                tmp_0_2_0_reg_1391 <= tmp_0_2_0_fu_596_p2;
            end if;
        end if;
    end process;
    output_width_cast_reg_1272(15 downto 5) <= "00000000000";
    zext_ln28_reg_1278(6) <= '0';
    zext_ln36_reg_1283(12 downto 6) <= "0000000";
    zext_ln36_3_reg_1290(6 downto 5) <= "00";
    zext_ln19_cast_reg_1295(11 downto 5) <= "0000000";
    kernel_0_addr_reg_1328(6) <= '0';
    tmp5_0_0_0_cast_reg_1401(16 downto 13) <= "0000";
    tmp5_0_1_0_cast_reg_1410(16 downto 13) <= "0000";
    tmp5_0_2_0_cast_reg_1419(16 downto 13) <= "0000";
    tmp7_0_cast_reg_1428(16 downto 12) <= "00000";
    zext_ln28_31_reg_1438(16) <= '0';
    zext_ln28_33_reg_1462(0) <= '1';
    zext_ln28_33_reg_1462(16) <= '0';
    add_ln28_64_reg_1818(0) <= '0';
    add_ln28_66_reg_1825(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_433_p2, ap_CS_fsm_state3, icmp_ln20_fu_569_p2, icmp_ln21_fu_656_p2, icmp_ln21_reg_1434, ap_CS_fsm_state5, icmp_ln21_1_reg_1481, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_433_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_569_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_656_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and ((icmp_ln21_1_reg_1481 = ap_const_lv1_1) or (icmp_ln21_reg_1434 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_100_fu_428_p2 <= std_logic_vector(unsigned(phi_mul_reg_343) + unsigned(zext_ln28_reg_1278));
    add_ln19_fu_423_p2 <= std_logic_vector(unsigned(phi_mul2_reg_355) + unsigned(zext_ln36_3_reg_1290));
    add_ln21_fu_968_p2 <= std_logic_vector(unsigned(out_w_0_0_reg_378) + unsigned(ap_const_lv16_2));
    add_ln28_37_fu_481_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(zext_ln28_30_fu_472_p1));
    add_ln28_38_fu_492_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(zext_ln28_30_fu_472_p1));
    add_ln28_39_fu_503_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(zext_ln28_30_fu_472_p1));
    add_ln28_40_fu_514_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(zext_ln28_30_fu_472_p1));
    add_ln28_41_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(zext_ln28_30_fu_472_p1));
    add_ln28_42_fu_536_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) + unsigned(zext_ln28_30_fu_472_p1));
    add_ln28_43_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv7_7) + unsigned(zext_ln28_30_fu_472_p1));
    add_ln28_44_fu_558_p2 <= std_logic_vector(unsigned(ap_const_lv7_8) + unsigned(zext_ln28_30_fu_472_p1));
    add_ln28_45_fu_665_p2 <= std_logic_vector(unsigned(tmp5_0_0_0_cast_reg_1401) + unsigned(zext_ln28_31_fu_661_p1));
    add_ln28_46_fu_690_p2 <= std_logic_vector(unsigned(zext_ln28_33_fu_686_p1) + unsigned(tmp5_0_0_0_cast_reg_1401));
    add_ln28_47_fu_670_p2 <= std_logic_vector(unsigned(zext_ln28_31_fu_661_p1) + unsigned(ap_const_lv17_2));
    add_ln28_48_fu_695_p2 <= std_logic_vector(unsigned(add_ln28_47_reg_1450) + unsigned(tmp5_0_0_0_cast_reg_1401));
    add_ln28_49_fu_712_p2 <= std_logic_vector(unsigned(tmp5_0_1_0_cast_reg_1410) + unsigned(zext_ln28_31_reg_1438));
    add_ln28_50_fu_716_p2 <= std_logic_vector(unsigned(zext_ln28_33_reg_1462) + unsigned(tmp5_0_1_0_cast_reg_1410));
    add_ln28_51_fu_728_p2 <= std_logic_vector(unsigned(add_ln28_47_reg_1450) + unsigned(tmp5_0_1_0_cast_reg_1410));
    add_ln28_52_fu_732_p2 <= std_logic_vector(unsigned(tmp5_0_2_0_cast_reg_1419) + unsigned(zext_ln28_31_reg_1438));
    add_ln28_53_fu_744_p2 <= std_logic_vector(unsigned(zext_ln28_33_reg_1462) + unsigned(tmp5_0_2_0_cast_reg_1419));
    add_ln28_54_fu_748_p2 <= std_logic_vector(unsigned(add_ln28_47_reg_1450) + unsigned(tmp5_0_2_0_cast_reg_1419));
    add_ln28_55_fu_909_p2 <= std_logic_vector(unsigned(bias_load_reg_1752) + unsigned(trunc_ln_fu_855_p4));
    add_ln28_56_fu_914_p2 <= std_logic_vector(unsigned(trunc_ln28_17_fu_873_p4) + unsigned(trunc_ln28_18_fu_882_p4));
    add_ln28_57_fu_920_p2 <= std_logic_vector(unsigned(add_ln28_56_fu_914_p2) + unsigned(trunc_ln28_s_fu_864_p4));
    add_ln28_58_fu_937_p2 <= std_logic_vector(unsigned(add_ln28_57_reg_1798) + unsigned(add_ln28_55_reg_1793));
    add_ln28_59_fu_926_p2 <= std_logic_vector(unsigned(trunc_ln28_19_fu_891_p4) + unsigned(trunc_ln28_20_fu_900_p4));
    add_ln28_60_fu_843_p2 <= std_logic_vector(unsigned(trunc_ln28_22_fu_825_p4) + unsigned(trunc_ln28_23_fu_834_p4));
    add_ln28_61_fu_849_p2 <= std_logic_vector(unsigned(add_ln28_60_fu_843_p2) + unsigned(trunc_ln28_21_fu_816_p4));
    add_ln28_62_fu_932_p2 <= std_logic_vector(unsigned(add_ln28_61_reg_1788) + unsigned(add_ln28_59_fu_926_p2));
    add_ln28_63_fu_941_p2 <= std_logic_vector(unsigned(add_ln28_62_reg_1803) + unsigned(add_ln28_58_fu_937_p2));
    add_ln28_64_fu_954_p2 <= std_logic_vector(unsigned(zext_ln28_33_reg_1462) + unsigned(ap_const_lv17_1));
    add_ln28_65_fu_974_p2 <= std_logic_vector(unsigned(add_ln28_64_reg_1818) + unsigned(tmp5_0_0_0_cast_reg_1401));
    add_ln28_66_fu_959_p2 <= std_logic_vector(unsigned(zext_ln28_33_reg_1462) + unsigned(ap_const_lv17_2));
    add_ln28_67_fu_978_p2 <= std_logic_vector(unsigned(add_ln28_66_reg_1825) + unsigned(tmp5_0_0_0_cast_reg_1401));
    add_ln28_68_fu_990_p2 <= std_logic_vector(unsigned(add_ln28_64_reg_1818) + unsigned(tmp5_0_1_0_cast_reg_1410));
    add_ln28_69_fu_994_p2 <= std_logic_vector(unsigned(add_ln28_66_reg_1825) + unsigned(tmp5_0_1_0_cast_reg_1410));
    add_ln28_70_fu_998_p2 <= std_logic_vector(unsigned(add_ln28_64_reg_1818) + unsigned(tmp5_0_2_0_cast_reg_1419));
    add_ln28_71_fu_1002_p2 <= std_logic_vector(unsigned(add_ln28_66_reg_1825) + unsigned(tmp5_0_2_0_cast_reg_1419));
    add_ln28_72_fu_1041_p2 <= std_logic_vector(unsigned(bias_load_reg_1752) + unsigned(trunc_ln28_24_fu_1006_p4));
    add_ln28_73_fu_1096_p2 <= std_logic_vector(unsigned(trunc_ln28_26_fu_1087_p4) + unsigned(trunc_ln28_27_reg_1897));
    add_ln28_74_fu_1101_p2 <= std_logic_vector(unsigned(add_ln28_73_fu_1096_p2) + unsigned(trunc_ln28_25_fu_1078_p4));
    add_ln28_75_fu_1163_p2 <= std_logic_vector(unsigned(add_ln28_74_reg_1982) + unsigned(add_ln28_72_reg_1917));
    add_ln28_76_fu_1154_p2 <= std_logic_vector(unsigned(trunc_ln28_28_reg_1987) + unsigned(trunc_ln28_29_reg_1992));
    add_ln28_77_fu_1143_p2 <= std_logic_vector(unsigned(trunc_ln28_31_fu_1125_p4) + unsigned(trunc_ln28_32_fu_1134_p4));
    add_ln28_78_fu_1149_p2 <= std_logic_vector(unsigned(add_ln28_77_fu_1143_p2) + unsigned(trunc_ln28_30_reg_1912));
    add_ln28_79_fu_1158_p2 <= std_logic_vector(unsigned(add_ln28_78_reg_2007) + unsigned(add_ln28_76_fu_1154_p2));
    add_ln28_80_fu_1167_p2 <= std_logic_vector(unsigned(add_ln28_79_reg_2012) + unsigned(add_ln28_75_fu_1163_p2));
    add_ln28_fu_466_p2 <= std_logic_vector(unsigned(zext_ln28_29_fu_450_p1) + unsigned(shl_ln_fu_458_p3));
    add_ln36_1_fu_964_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_1428) + unsigned(zext_ln28_33_reg_1462));
    add_ln36_fu_946_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_1428) + unsigned(zext_ln28_31_reg_1438));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_433_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_433_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_433_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_433_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_1323;

    bias_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_419_p1 <= output_height(4 - 1 downto 0);
    grp_fu_1230_p0 <= sext_ln28_24_reg_1674(16 - 1 downto 0);
    grp_fu_1230_p1 <= sext_ln28_25_reg_1680(16 - 1 downto 0);
    grp_fu_1234_p0 <= sext_ln28_30_reg_1708(16 - 1 downto 0);
    grp_fu_1234_p1 <= sext_ln28_31_reg_1714(16 - 1 downto 0);
    grp_fu_1238_p0 <= sext_ln28_36_reg_1640(16 - 1 downto 0);
    grp_fu_1238_p1 <= sext_ln28_37_reg_1646(16 - 1 downto 0);
    grp_fu_1242_p0 <= sext_ln28_26_reg_1686(16 - 1 downto 0);
    grp_fu_1247_p0 <= sext_ln28_28_reg_1697(16 - 1 downto 0);
    grp_fu_1252_p0 <= sext_ln28_32_reg_1720(16 - 1 downto 0);
    grp_fu_1257_p0 <= sext_ln28_34_reg_1731(16 - 1 downto 0);
    grp_fu_1262_p0 <= sext_ln28_38_reg_1652(16 - 1 downto 0);
    grp_fu_1267_p0 <= sext_ln28_40_reg_1663(16 - 1 downto 0);
    icmp_ln19_fu_433_p2 <= "1" when (out_d_0_reg_332 = ap_const_lv4_8) else "0";
    icmp_ln20_fu_569_p2 <= "1" when (out_h_0_reg_367 = empty_reg_1300) else "0";
    icmp_ln21_1_fu_699_p2 <= "1" when (or_ln28_fu_680_p2 = output_width_cast_reg_1272) else "0";
    icmp_ln21_fu_656_p2 <= "1" when (out_w_0_0_reg_378 = output_width_cast_reg_1272) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state20, zext_ln28_32_fu_676_p1, zext_ln28_34_fu_704_p1, zext_ln28_37_fu_724_p1, zext_ln28_39_fu_740_p1, zext_ln28_41_fu_756_p1, zext_ln28_43_fu_986_p1, zext_ln28_45_fu_1028_p1, zext_ln28_47_fu_1058_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address0 <= zext_ln28_47_fu_1058_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_r_address0 <= zext_ln28_45_fu_1028_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_r_address0 <= zext_ln28_43_fu_986_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln28_41_fu_756_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= zext_ln28_39_fu_740_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln28_37_fu_724_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln28_34_fu_704_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln28_32_fu_676_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state20, zext_ln28_35_fu_708_p1, zext_ln28_36_fu_720_p1, zext_ln28_38_fu_736_p1, zext_ln28_40_fu_752_p1, zext_ln28_42_fu_982_p1, zext_ln28_44_fu_1024_p1, zext_ln28_46_fu_1054_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address1 <= zext_ln28_46_fu_1054_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_r_address1 <= zext_ln28_44_fu_1024_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_r_address1 <= zext_ln28_42_fu_982_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= zext_ln28_40_fu_752_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= zext_ln28_38_fu_736_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= zext_ln28_36_fu_720_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address1 <= zext_ln28_35_fu_708_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, kernel_0_addr_reg_1328, kernel_0_addr_1_reg_1333, kernel_0_addr_4_reg_1348, kernel_0_addr_6_reg_1358, kernel_0_addr_8_reg_1368, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_0_address0 <= kernel_0_addr_8_reg_1368;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_address0 <= kernel_0_addr_6_reg_1358;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address0 <= kernel_0_addr_4_reg_1348;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_0_address0 <= kernel_0_addr_1_reg_1333;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_0_address0 <= kernel_0_addr_reg_1328;
        else 
            kernel_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    kernel_0_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, kernel_0_addr_2_reg_1338, kernel_0_addr_3_reg_1343, kernel_0_addr_5_reg_1353, kernel_0_addr_7_reg_1363, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_0_address1 <= kernel_0_addr_7_reg_1363;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_address1 <= kernel_0_addr_5_reg_1353;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address1 <= kernel_0_addr_3_reg_1343;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_0_address1 <= kernel_0_addr_2_reg_1338;
        else 
            kernel_0_address1 <= "XXXXXXX";
        end if; 
    end process;


    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            kernel_0_ce1 <= ap_const_logic_1;
        else 
            kernel_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_fu_680_p2 <= (out_w_0_0_reg_378 or ap_const_lv16_1);
    out_d_fu_439_p2 <= std_logic_vector(unsigned(out_d_0_reg_332) + unsigned(ap_const_lv4_1));
    out_h_fu_574_p2 <= std_logic_vector(unsigned(out_h_0_reg_367) + unsigned(ap_const_lv4_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state30, zext_ln36_4_fu_950_p1, zext_ln36_5_fu_1172_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            output_r_address0 <= zext_ln36_5_fu_1172_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_r_address0 <= zext_ln36_4_fu_950_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(add_ln28_63_reg_1808, ap_CS_fsm_state18, add_ln28_80_reg_2017, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            output_r_d0 <= add_ln28_80_reg_2017;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_r_d0 <= add_ln28_63_reg_1808;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(icmp_ln21_reg_1434, ap_CS_fsm_state18, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (icmp_ln21_reg_1434 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),16));
        sext_ln28_24_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_reg_1485),30));

        sext_ln28_25_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_395),30));

        sext_ln28_26_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_1_reg_1510),30));

        sext_ln28_28_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_2_reg_1520),30));

        sext_ln28_30_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_3_reg_1550),30));

        sext_ln28_31_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_211_reg_1555),30));

        sext_ln28_32_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_4_reg_1560),30));

        sext_ln28_34_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_5_reg_1590),30));

        sext_ln28_36_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_6_reg_1600),30));

        sext_ln28_37_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_214_reg_1615),30));

        sext_ln28_38_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_7_reg_1620),30));

        sext_ln28_40_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_8_reg_1630),30));

    shl_ln_fu_458_p3 <= (trunc_ln28_fu_454_p1 & ap_const_lv3_0);
    tmp5_0_0_0_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_0_fu_611_p2),17));
    tmp5_0_0_0_fu_611_p0 <= zext_ln36_reg_1283(6 - 1 downto 0);
    tmp5_0_0_0_fu_611_p1 <= tmp5_0_0_0_fu_611_p10(7 - 1 downto 0);
    tmp5_0_0_0_fu_611_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_0_0_reg_1381),13));
    tmp5_0_0_0_fu_611_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_0_fu_611_p0) * unsigned(tmp5_0_0_0_fu_611_p1), 13));
    tmp5_0_1_0_cast_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_0_fu_623_p2),17));
    tmp5_0_1_0_fu_623_p0 <= zext_ln36_reg_1283(6 - 1 downto 0);
    tmp5_0_1_0_fu_623_p1 <= tmp5_0_1_0_fu_623_p10(7 - 1 downto 0);
    tmp5_0_1_0_fu_623_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_1_0_reg_1386),13));
    tmp5_0_1_0_fu_623_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_0_fu_623_p0) * unsigned(tmp5_0_1_0_fu_623_p1), 13));
    tmp5_0_2_0_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_0_fu_635_p2),17));
    tmp5_0_2_0_fu_635_p0 <= zext_ln36_reg_1283(6 - 1 downto 0);
    tmp5_0_2_0_fu_635_p1 <= tmp5_0_2_0_fu_635_p10(7 - 1 downto 0);
    tmp5_0_2_0_fu_635_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_2_0_reg_1391),13));
    tmp5_0_2_0_fu_635_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_0_fu_635_p0) * unsigned(tmp5_0_2_0_fu_635_p1), 13));
    tmp6_0_fu_602_p2 <= std_logic_vector(unsigned(zext_ln28_3_cast_fu_580_p1) + unsigned(phi_mul2_reg_355));
    tmp7_0_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_0_fu_647_p2),17));
    tmp7_0_fu_647_p0 <= zext_ln19_cast_reg_1295(5 - 1 downto 0);
    tmp7_0_fu_647_p1 <= tmp7_0_fu_647_p10(7 - 1 downto 0);
    tmp7_0_fu_647_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_0_reg_1396),12));
    tmp7_0_fu_647_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_0_fu_647_p0) * unsigned(tmp7_0_fu_647_p1), 12));
    tmp_0_0_0_fu_584_p2 <= std_logic_vector(unsigned(zext_ln28_3_cast_fu_580_p1) + unsigned(phi_mul_reg_343));
    tmp_0_1_0_fu_590_p2 <= std_logic_vector(unsigned(tmp_0_0_0_fu_584_p2) + unsigned(ap_const_lv7_1));
    tmp_0_2_0_fu_596_p2 <= std_logic_vector(unsigned(tmp_0_0_0_fu_584_p2) + unsigned(ap_const_lv7_2));
    trunc_ln28_17_fu_873_p4 <= mul_ln28_19_reg_1768(29 downto 14);
    trunc_ln28_18_fu_882_p4 <= mul_ln28_20_reg_1773(29 downto 14);
    trunc_ln28_19_fu_891_p4 <= mul_ln28_21_reg_1778(29 downto 14);
    trunc_ln28_20_fu_900_p4 <= mul_ln28_22_reg_1783(29 downto 14);
    trunc_ln28_21_fu_816_p4 <= mul_ln28_23_reg_1737(29 downto 14);
    trunc_ln28_22_fu_825_p4 <= mul_ln28_24_reg_1742(29 downto 14);
    trunc_ln28_23_fu_834_p4 <= mul_ln28_25_reg_1747(29 downto 14);
    trunc_ln28_24_fu_1006_p4 <= mul_ln28_26_reg_1852(29 downto 14);
    trunc_ln28_25_fu_1078_p4 <= mul_ln28_27_reg_1952(29 downto 14);
    trunc_ln28_26_fu_1087_p4 <= mul_ln28_28_reg_1957(29 downto 14);
    trunc_ln28_31_fu_1125_p4 <= mul_ln28_33_reg_1997(29 downto 14);
    trunc_ln28_32_fu_1134_p4 <= mul_ln28_34_reg_2002(29 downto 14);
    trunc_ln28_fu_454_p1 <= out_d_0_reg_332(3 - 1 downto 0);
    trunc_ln28_s_fu_864_p4 <= mul_ln28_18_reg_1763(29 downto 14);
    trunc_ln_fu_855_p4 <= mul_ln28_reg_1758(29 downto 14);
    zext_ln19_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),12));
    zext_ln23_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_332),64));
    zext_ln28_14_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_466_p2),64));
    zext_ln28_15_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_37_fu_481_p2),64));
    zext_ln28_16_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_38_fu_492_p2),64));
    zext_ln28_17_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_39_fu_503_p2),64));
    zext_ln28_18_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_40_fu_514_p2),64));
    zext_ln28_19_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_41_fu_525_p2),64));
    zext_ln28_20_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_42_fu_536_p2),64));
    zext_ln28_21_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_43_fu_547_p2),64));
    zext_ln28_22_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_44_fu_558_p2),64));
    zext_ln28_29_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_332),6));
    zext_ln28_30_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_466_p2),7));
    zext_ln28_31_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_0_reg_378),17));
    zext_ln28_32_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_45_reg_1445),64));
    zext_ln28_33_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_fu_680_p2),17));
    zext_ln28_34_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_46_reg_1471),64));
    zext_ln28_35_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_48_reg_1476),64));
    zext_ln28_36_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_49_reg_1500),64));
    zext_ln28_37_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_50_reg_1505),64));
    zext_ln28_38_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_51_reg_1535),64));
    zext_ln28_39_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_52_reg_1540),64));
    zext_ln28_3_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_367),7));
    zext_ln28_40_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_53_reg_1575),64));
    zext_ln28_41_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_54_reg_1580),64));
    zext_ln28_42_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_65_reg_1842),64));
    zext_ln28_43_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_67_reg_1847),64));
    zext_ln28_44_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_68_reg_1872),64));
    zext_ln28_45_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_69_reg_1877),64));
    zext_ln28_46_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_70_reg_1887),64));
    zext_ln28_47_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_71_reg_1892),64));
    zext_ln28_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln36_3_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
    zext_ln36_4_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_reg_1813),64));
    zext_ln36_5_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_reg_1832),64));
    zext_ln36_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),13));
end behav;
