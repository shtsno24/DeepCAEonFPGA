-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_7FD60D : STD_LOGIC_VECTOR (22 downto 0) := "11111111101011000001101";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv10_1C0 : STD_LOGIC_VECTOR (9 downto 0) := "0111000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_E69A : STD_LOGIC_VECTOR (15 downto 0) := "1110011010011010";
    constant ap_const_lv16_C003 : STD_LOGIC_VECTOR (15 downto 0) := "1100000000000011";
    constant ap_const_lv16_1C17 : STD_LOGIC_VECTOR (15 downto 0) := "0001110000010111";
    constant ap_const_lv16_F91C : STD_LOGIC_VECTOR (15 downto 0) := "1111100100011100";
    constant ap_const_lv16_D6A : STD_LOGIC_VECTOR (15 downto 0) := "0000110101101010";
    constant ap_const_lv16_F46C : STD_LOGIC_VECTOR (15 downto 0) := "1111010001101100";
    constant ap_const_lv16_FFDC : STD_LOGIC_VECTOR (15 downto 0) := "1111111111011100";
    constant ap_const_lv16_FE22 : STD_LOGIC_VECTOR (15 downto 0) := "1111111000100010";
    constant ap_const_lv16_2EC : STD_LOGIC_VECTOR (15 downto 0) := "0000001011101100";
    constant ap_const_lv16_1B7E : STD_LOGIC_VECTOR (15 downto 0) := "0001101101111110";
    constant ap_const_lv16_1ECE : STD_LOGIC_VECTOR (15 downto 0) := "0001111011001110";
    constant ap_const_lv16_ED6 : STD_LOGIC_VECTOR (15 downto 0) := "0000111011010110";
    constant ap_const_lv16_D2BE : STD_LOGIC_VECTOR (15 downto 0) := "1101001010111110";
    constant ap_const_lv16_15C7 : STD_LOGIC_VECTOR (15 downto 0) := "0001010111000111";
    constant ap_const_lv16_E34D : STD_LOGIC_VECTOR (15 downto 0) := "1110001101001101";
    constant ap_const_lv16_DA7B : STD_LOGIC_VECTOR (15 downto 0) := "1101101001111011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_310 : STD_LOGIC_VECTOR (14 downto 0) := "000001100010000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten59_reg_134 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten18_reg_145 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_0_reg_156 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_0_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_179 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_w_0_reg_190 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_reg_201 : STD_LOGIC_VECTOR (22 downto 0);
    signal in_d_0_reg_213 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln34_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln34_reg_701_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_701_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_701_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_701_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_2_fu_230_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln20_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_710 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_710_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_710_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_710_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_1_fu_248_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln29_fu_290_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln29_reg_728 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln34_2_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_2_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln29_1_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln29_1_reg_738 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_1_fu_388_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_1_reg_743 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_1_reg_743_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_1_reg_743_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln29_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_413_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal out_w_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_759 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln24_1_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_reg_764 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_reg_764_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_reg_764_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_reg_764_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_1_fu_438_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_1_reg_769 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_fu_446_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_774 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_774_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_774_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_458_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_780 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_780_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_780_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_fu_496_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_reg_785 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_9_fu_508_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln24_1_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_reg_801_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_reg_801_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_805 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_0_mid2_fu_592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_0_mid2_reg_810 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal mul_ln29_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_reg_815 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_1_fu_614_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_1_reg_820 : STD_LOGIC_VECTOR (10 downto 0);
    signal buffer_fu_639_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_out_d_0_phi_fu_160_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_194_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_in_d_0_phi_fu_217_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_5_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln20_1_fu_242_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln_fu_256_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln29_7_fu_268_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln29_fu_264_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln29_1_fu_276_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln29_fu_280_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln24_fu_286_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_296_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln29_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_339_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln29_mid1_fu_358_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln29_7_mid1_fu_370_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln29_2_fu_366_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln29_3_fu_378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln34_4_fu_303_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln29_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_1_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_350_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln24_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_458_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_fu_502_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln34_5_fu_516_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln24_1_fu_528_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln29_2_fu_531_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_2_fu_522_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_2_fu_536_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_686_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln29_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln34_1_fu_569_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_2_fu_577_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_3_fu_585_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_fu_605_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_1_fu_610_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln29_2_fu_626_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln24_fu_619_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln29_3_fu_635_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_645_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_663_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_fu_653_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_686_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_686_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_686_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component network_mux_164_16_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mac_muladd_11ns_5ns_11s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component network_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    network_mux_164_16_1_1_x_U129 : component network_mux_164_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_E69A,
        din1 => ap_const_lv16_C003,
        din2 => ap_const_lv16_1C17,
        din3 => ap_const_lv16_F91C,
        din4 => ap_const_lv16_D6A,
        din5 => ap_const_lv16_F46C,
        din6 => ap_const_lv16_FFDC,
        din7 => ap_const_lv16_FE22,
        din8 => ap_const_lv16_2EC,
        din9 => ap_const_lv16_1B7E,
        din10 => ap_const_lv16_1ECE,
        din11 => ap_const_lv16_ED6,
        din12 => ap_const_lv16_D2BE,
        din13 => ap_const_lv16_15C7,
        din14 => ap_const_lv16_E34D,
        din15 => ap_const_lv16_DA7B,
        din16 => tmp_4_fu_458_p17,
        dout => tmp_4_fu_458_p18);

    network_mac_muladd_11ns_5ns_11s_15_1_1_U130 : component network_mac_muladd_11ns_5ns_11s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 5,
        din2_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_686_p0,
        din1 => grp_fu_686_p1,
        din2 => select_ln24_2_fu_536_p3,
        dout => grp_fu_686_p3);

    network_mul_mul_16s_16s_32_1_1_U131 : component network_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => input_load_reg_805,
        din1 => tmp_4_reg_780_pp0_iter3_reg,
        dout => mul_ln29_fu_695_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln34_fu_224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state3)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_701_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                buffer_0_reg_201 <= buffer_fu_639_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                buffer_0_reg_201 <= ap_const_lv23_7FD60D;
            end if; 
        end if;
    end process;

    in_d_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_701_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                in_d_0_reg_213 <= in_d_reg_785;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                in_d_0_reg_213 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten18_reg_145 <= select_ln20_1_fu_248_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten18_reg_145 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_fu_224_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten59_reg_134 <= add_ln34_2_fu_230_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten59_reg_134 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_701 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_179 <= select_ln21_9_fu_508_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_179 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_701_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                out_d_0_reg_156 <= out_d_0_mid2_reg_810;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_0_reg_156 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_701 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                out_h_0_reg_168 <= select_ln20_fu_413_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_h_0_reg_168 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_701_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                out_w_0_reg_190 <= select_ln21_reg_774;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_w_0_reg_190 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_710 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln29_reg_728 <= add_ln29_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln24_1_reg_801_pp0_iter3_reg = ap_const_lv1_1))) then
                add_ln34_1_reg_820 <= add_ln34_1_fu_614_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_701 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln29_reg_749 <= and_ln29_fu_407_p2;
                and_ln34_2_reg_733 <= and_ln34_2_fu_333_p2;
                or_ln24_1_reg_764 <= or_ln24_1_fu_433_p2;
                out_w_reg_759 <= out_w_fu_421_p2;
                select_ln24_1_reg_769 <= select_ln24_1_fu_438_p3;
                    select_ln29_1_reg_743(10 downto 2) <= select_ln29_1_fu_388_p3(10 downto 2);
                    sub_ln29_1_reg_738(10 downto 2) <= sub_ln29_1_fu_382_p2(10 downto 2);
                tmp_4_reg_780 <= tmp_4_fu_458_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_710 <= icmp_ln20_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_710_pp0_iter1_reg <= icmp_ln20_reg_710;
                icmp_ln34_reg_701 <= icmp_ln34_fu_224_p2;
                icmp_ln34_reg_701_pp0_iter1_reg <= icmp_ln34_reg_701;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln20_reg_710_pp0_iter2_reg <= icmp_ln20_reg_710_pp0_iter1_reg;
                icmp_ln20_reg_710_pp0_iter3_reg <= icmp_ln20_reg_710_pp0_iter2_reg;
                icmp_ln24_1_reg_801_pp0_iter3_reg <= icmp_ln24_1_reg_801;
                icmp_ln24_1_reg_801_pp0_iter4_reg <= icmp_ln24_1_reg_801_pp0_iter3_reg;
                icmp_ln34_reg_701_pp0_iter2_reg <= icmp_ln34_reg_701_pp0_iter1_reg;
                icmp_ln34_reg_701_pp0_iter3_reg <= icmp_ln34_reg_701_pp0_iter2_reg;
                icmp_ln34_reg_701_pp0_iter4_reg <= icmp_ln34_reg_701_pp0_iter3_reg;
                or_ln24_1_reg_764_pp0_iter2_reg <= or_ln24_1_reg_764;
                or_ln24_1_reg_764_pp0_iter3_reg <= or_ln24_1_reg_764_pp0_iter2_reg;
                or_ln24_1_reg_764_pp0_iter4_reg <= or_ln24_1_reg_764_pp0_iter3_reg;
                select_ln21_reg_774_pp0_iter2_reg <= select_ln21_reg_774;
                select_ln21_reg_774_pp0_iter3_reg <= select_ln21_reg_774_pp0_iter2_reg;
                    select_ln29_1_reg_743_pp0_iter2_reg(10 downto 2) <= select_ln29_1_reg_743(10 downto 2);
                    select_ln29_1_reg_743_pp0_iter3_reg(10 downto 2) <= select_ln29_1_reg_743_pp0_iter2_reg(10 downto 2);
                tmp_4_reg_780_pp0_iter2_reg <= tmp_4_reg_780;
                tmp_4_reg_780_pp0_iter3_reg <= tmp_4_reg_780_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_701_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln24_1_reg_801 <= icmp_ln24_1_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_701 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                in_d_reg_785 <= in_d_fu_496_p2;
                select_ln21_reg_774 <= select_ln21_fu_446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_701_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                input_load_reg_805 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_701_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln29_reg_815 <= mul_ln29_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_701_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                out_d_0_mid2_reg_810 <= out_d_0_mid2_fu_592_p3;
            end if;
        end if;
    end process;
    sub_ln29_1_reg_738(1 downto 0) <= "00";
    select_ln29_1_reg_743(1 downto 0) <= "00";
    select_ln29_1_reg_743_pp0_iter2_reg(1 downto 0) <= "00";
    select_ln29_1_reg_743_pp0_iter3_reg(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln20_1_fu_242_p2 <= std_logic_vector(unsigned(indvar_flatten18_reg_145) + unsigned(ap_const_lv14_1));
    add_ln21_fu_502_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_179) + unsigned(ap_const_lv10_1));
    add_ln29_2_fu_531_p2 <= std_logic_vector(unsigned(zext_ln24_1_fu_528_p1) + unsigned(select_ln29_1_reg_743));
    add_ln29_fu_290_p2 <= std_logic_vector(unsigned(sub_ln29_fu_280_p2) + unsigned(zext_ln24_fu_286_p1));
    add_ln34_1_fu_614_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_610_p1) + unsigned(select_ln29_1_reg_743_pp0_iter3_reg));
    add_ln34_2_fu_230_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_134) + unsigned(ap_const_lv14_1));
    add_ln34_fu_605_p2 <= std_logic_vector(unsigned(select_ln34_3_fu_585_p3) + unsigned(select_ln21_reg_774_pp0_iter3_reg));
    and_ln29_fu_407_p2 <= (or_ln29_1_fu_402_p2 and and_ln34_1_fu_321_p2);
    and_ln34_1_fu_321_p2 <= (xor_ln34_fu_310_p2 and icmp_ln24_fu_315_p2);
    and_ln34_2_fu_333_p2 <= (xor_ln34_fu_310_p2 and icmp_ln21_fu_327_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_in_d_0_phi_fu_217_p4_assign_proc : process(in_d_0_reg_213, icmp_ln34_reg_701_pp0_iter1_reg, in_d_reg_785, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_701_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_in_d_0_phi_fu_217_p4 <= in_d_reg_785;
        else 
            ap_phi_mux_in_d_0_phi_fu_217_p4 <= in_d_0_reg_213;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_160_p4_assign_proc : process(out_d_0_reg_156, icmp_ln34_reg_701_pp0_iter4_reg, out_d_0_mid2_reg_810, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_701_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_160_p4 <= out_d_0_mid2_reg_810;
        else 
            ap_phi_mux_out_d_0_phi_fu_160_p4 <= out_d_0_reg_156;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_194_p4_assign_proc : process(out_w_0_reg_190, icmp_ln34_reg_701_pp0_iter1_reg, select_ln21_reg_774, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_701_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_194_p4 <= select_ln21_reg_774;
        else 
            ap_phi_mux_out_w_0_phi_fu_194_p4 <= out_w_0_reg_190;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_639_p2 <= std_logic_vector(unsigned(select_ln24_fu_619_p3) + unsigned(sext_ln29_3_fu_635_p1));
    grp_fu_686_p0 <= ap_const_lv15_310(11 - 1 downto 0);
    grp_fu_686_p1 <= grp_fu_686_p10(5 - 1 downto 0);
    grp_fu_686_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_reg_769),15));
    icmp_ln20_fu_236_p2 <= "1" when (indvar_flatten18_reg_145 = ap_const_lv14_3100) else "0";
    icmp_ln21_fu_327_p2 <= "1" when (indvar_flatten_reg_179 = ap_const_lv10_1C0) else "0";
    icmp_ln24_1_fu_558_p2 <= "1" when (in_d_reg_785 = ap_const_lv5_10) else "0";
    icmp_ln24_fu_315_p2 <= "1" when (ap_phi_mux_in_d_0_phi_fu_217_p4 = ap_const_lv5_10) else "0";
    icmp_ln34_fu_224_p2 <= "1" when (indvar_flatten59_reg_134 = ap_const_lv14_3100) else "0";
    in_d_fu_496_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln24_1_fu_438_p3));
    input_r_address0 <= zext_ln29_5_fu_553_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln24_1_fu_433_p2 <= (or_ln24_fu_427_p2 or icmp_ln20_reg_710);
    or_ln24_fu_427_p2 <= (and_ln34_2_fu_333_p2 or and_ln29_fu_407_p2);
    or_ln29_1_fu_402_p2 <= (xor_ln29_fu_396_p2 or icmp_ln20_reg_710);
    or_ln29_fu_345_p2 <= (icmp_ln20_reg_710 or and_ln34_2_fu_333_p2);
    out_d_0_mid2_fu_592_p3 <= 
        out_d_fu_563_p2 when (icmp_ln20_reg_710_pp0_iter3_reg(0) = '1') else 
        ap_phi_mux_out_d_0_phi_fu_160_p4;
    out_d_fu_563_p2 <= (ap_phi_mux_out_d_0_phi_fu_160_p4 xor ap_const_lv1_1);
    out_h_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln34_fu_296_p3));
    out_w_fu_421_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln29_fu_350_p3));
    output_r_address0 <= zext_ln34_fu_681_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln33_fu_653_p1 and select_ln33_fu_663_p3);

    output_r_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln24_1_reg_801_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln24_1_reg_801_pp0_iter4_reg = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln20_1_fu_248_p3 <= 
        ap_const_lv14_1 when (icmp_ln20_fu_236_p2(0) = '1') else 
        add_ln20_1_fu_242_p2;
    select_ln20_fu_413_p3 <= 
        out_h_fu_339_p2 when (and_ln34_2_fu_333_p2(0) = '1') else 
        select_ln34_fu_296_p3;
    select_ln21_9_fu_508_p3 <= 
        ap_const_lv10_1 when (or_ln29_fu_345_p2(0) = '1') else 
        add_ln21_fu_502_p2;
    select_ln21_fu_446_p3 <= 
        out_w_fu_421_p2 when (and_ln29_fu_407_p2(0) = '1') else 
        select_ln29_fu_350_p3;
    select_ln24_1_fu_438_p3 <= 
        ap_const_lv5_0 when (or_ln24_1_fu_433_p2(0) = '1') else 
        ap_phi_mux_in_d_0_phi_fu_217_p4;
    select_ln24_2_fu_536_p3 <= 
        add_ln29_2_fu_531_p2 when (and_ln29_reg_749(0) = '1') else 
        select_ln29_2_fu_522_p3;
    select_ln24_fu_619_p3 <= 
        ap_const_lv23_7FD60D when (or_ln24_1_reg_764_pp0_iter4_reg(0) = '1') else 
        buffer_0_reg_201;
    select_ln29_1_fu_388_p3 <= 
        sub_ln29_1_fu_382_p2 when (and_ln34_2_fu_333_p2(0) = '1') else 
        select_ln34_4_fu_303_p3;
    select_ln29_2_fu_522_p3 <= 
        sub_ln29_1_reg_738 when (and_ln34_2_reg_733(0) = '1') else 
        select_ln34_5_fu_516_p3;
    select_ln29_fu_350_p3 <= 
        ap_const_lv5_0 when (or_ln29_fu_345_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_194_p4;
    select_ln33_fu_663_p3 <= 
        ap_const_lv16_FFFF when (xor_ln33_fu_657_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln34_1_fu_569_p3 <= 
        ap_const_lv5_0 when (ap_phi_mux_out_d_0_phi_fu_160_p4(0) = '1') else 
        ap_const_lv5_10;
    select_ln34_2_fu_577_p3 <= 
        ap_const_lv5_10 when (ap_phi_mux_out_d_0_phi_fu_160_p4(0) = '1') else 
        ap_const_lv5_0;
    select_ln34_3_fu_585_p3 <= 
        select_ln34_1_fu_569_p3 when (icmp_ln20_reg_710_pp0_iter3_reg(0) = '1') else 
        select_ln34_2_fu_577_p3;
    select_ln34_4_fu_303_p3 <= 
        ap_const_lv11_0 when (icmp_ln20_reg_710(0) = '1') else 
        sub_ln29_fu_280_p2;
    select_ln34_5_fu_516_p3 <= 
        ap_const_lv11_0 when (icmp_ln20_reg_710_pp0_iter1_reg(0) = '1') else 
        add_ln29_reg_728;
    select_ln34_fu_296_p3 <= 
        ap_const_lv5_0 when (icmp_ln20_reg_710(0) = '1') else 
        out_h_0_reg_168;
        sext_ln29_3_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln29_2_fu_626_p4),23));

        sext_ln29_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_686_p3),32));

        sext_ln34_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_1_reg_820),32));

    shl_ln29_7_fu_268_p3 <= (out_h_0_reg_168 & ap_const_lv2_0);
    shl_ln29_7_mid1_fu_370_p3 <= (out_h_fu_339_p2 & ap_const_lv2_0);
    shl_ln29_mid1_fu_358_p3 <= (out_h_fu_339_p2 & ap_const_lv5_0);
    shl_ln_fu_256_p3 <= (out_h_0_reg_168 & ap_const_lv5_0);
    sub_ln29_1_fu_382_p2 <= std_logic_vector(unsigned(zext_ln29_2_fu_366_p1) - unsigned(zext_ln29_3_fu_378_p1));
    sub_ln29_fu_280_p2 <= std_logic_vector(unsigned(zext_ln29_fu_264_p1) - unsigned(zext_ln29_1_fu_276_p1));
    tmp_1_fu_645_p3 <= buffer_fu_639_p2(15 downto 15);
    tmp_4_fu_458_p17 <= select_ln24_1_fu_438_p3(4 - 1 downto 0);
    trunc_ln29_2_fu_626_p4 <= mul_ln29_reg_815(31 downto 14);
    trunc_ln33_fu_653_p1 <= buffer_fu_639_p2(16 - 1 downto 0);
    xor_ln29_fu_396_p2 <= (icmp_ln21_fu_327_p2 xor ap_const_lv1_1);
    xor_ln33_fu_657_p2 <= (tmp_1_fu_645_p3 xor ap_const_lv1_1);
    xor_ln34_fu_310_p2 <= (icmp_ln20_reg_710 xor ap_const_lv1_1);
    zext_ln24_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_759),11));
    zext_ln24_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_w_0_phi_fu_194_p4),11));
    zext_ln29_1_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln29_7_fu_268_p3),11));
    zext_ln29_2_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln29_mid1_fu_358_p3),11));
    zext_ln29_3_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln29_7_mid1_fu_370_p3),11));
    zext_ln29_5_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln29_fu_550_p1),64));
    zext_ln29_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_256_p3),11));
    zext_ln34_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_fu_605_p2),11));
    zext_ln34_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln34_fu_678_p1),64));
end behav;
