-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_55C : STD_LOGIC_VECTOR (10 downto 0) := "10101011100";
    constant ap_const_lv12_AB8 : STD_LOGIC_VECTOR (11 downto 0) := "101010111000";
    constant ap_const_lv12_930 : STD_LOGIC_VECTOR (11 downto 0) := "100100110000";
    constant ap_const_lv10_C4 : STD_LOGIC_VECTOR (9 downto 0) := "0011000100";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_620 : STD_LOGIC_VECTOR (10 downto 0) := "11000100000";
    constant ap_const_lv11_6E4 : STD_LOGIC_VECTOR (10 downto 0) := "11011100100";
    constant ap_const_lv11_3D4 : STD_LOGIC_VECTOR (10 downto 0) := "01111010100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_86C : STD_LOGIC_VECTOR (11 downto 0) := "100001101100";
    constant ap_const_lv10_24C : STD_LOGIC_VECTOR (9 downto 0) := "1001001100";
    constant ap_const_lv12_B7C : STD_LOGIC_VECTOR (11 downto 0) := "101101111100";
    constant ap_const_lv12_7A8 : STD_LOGIC_VECTOR (11 downto 0) := "011110101000";
    constant ap_const_lv12_9F4 : STD_LOGIC_VECTOR (11 downto 0) := "100111110100";
    constant ap_const_lv10_188 : STD_LOGIC_VECTOR (9 downto 0) := "0110001000";
    constant ap_const_lv11_310 : STD_LOGIC_VECTOR (10 downto 0) := "01100010000";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv13_C4 : STD_LOGIC_VECTOR (12 downto 0) := "0000011000100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv7_A : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv7_E : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_1_b_s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SeparableConv2D_1_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_b_s_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal SeparableConv2D_1_w_s_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce1 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address2 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce2 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q2 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address3 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce3 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q3 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address4 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce4 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q4 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address5 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce5 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q5 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address6 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce6 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q6 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address7 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce7 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q7 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address8 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce8 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q8 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address9 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce9 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q9 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address10 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce10 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q10 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address11 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce11 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q11 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address12 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce12 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q12 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address13 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce13 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q13 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address14 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce14 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q14 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln23_64_fu_545_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal reg_478 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln23_65_fu_562_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln23_71_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal reg_489 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln18_fu_5482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_54_fu_571_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln23_56_fu_549_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln23_58_fu_550_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln23_59_fu_551_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln23_61_fu_557_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln20_fu_5817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_548_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_500 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln23_78_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln23_79_fu_570_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_552_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_511 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln23_50_fu_559_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln23_52_fu_569_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal reg_522 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_53_fu_560_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_55_fu_555_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_57_fu_544_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_60_fu_563_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln23_62_fu_546_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln23_63_fu_564_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln23_69_fu_553_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_75_fu_565_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_fu_543_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal reg_532 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln16_fu_574_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln16_reg_905 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_d_fu_572_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_910 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_fu_556_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_1073 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_w_fu_566_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_1583 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal mul_ln23_fu_3763_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln23_reg_4827 : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_5181 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal reg_5186 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_fu_5190_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln16_reg_5905 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln16_fu_5194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_5209_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_5918 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln19_fu_5382_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln19_reg_5998 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln23_54_fu_5386_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_54_reg_6003 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_56_fu_5390_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_56_reg_6008 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_58_fu_5394_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_58_reg_6013 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_60_fu_5398_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_60_reg_6018 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_62_fu_5402_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_62_reg_6023 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_64_fu_5406_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_64_reg_6028 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_66_fu_5410_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_66_reg_6033 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_68_fu_5414_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_68_reg_6038 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_70_fu_5418_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_70_reg_6043 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_72_fu_5422_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_72_reg_6048 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_74_fu_5426_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_74_reg_6053 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_76_fu_5430_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_76_reg_6058 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_78_fu_5434_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_78_reg_6063 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_80_fu_5438_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_80_reg_6068 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_82_fu_5442_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_82_reg_6073 : STD_LOGIC_VECTOR (29 downto 0);
    signal sub_ln23_fu_5476_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln23_reg_6081 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln17_fu_5446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln23_118_fu_5493_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln23_118_reg_6089 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln23_117_fu_5499_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln23_117_reg_6094 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln23_116_fu_5548_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln23_116_reg_6143 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln23_1_reg_6153 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_2_reg_6158 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_3_reg_6183 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_4_reg_6188 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_5_reg_6213 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_6_reg_6218 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_7_reg_6243 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_8_reg_6248 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_9_reg_6273 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_10_reg_6278 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_11_reg_6298 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_12_reg_6303 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_13_reg_6318 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_14_reg_6323 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_s_reg_6333 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln23_fu_5813_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln23_reg_6338 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln20_fu_5833_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln20_reg_6346 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln27_fu_5851_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln27_reg_6351 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal SeparableConv2D_1_w_33_reg_6366 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal trunc_ln4_reg_6381 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal zext_ln19_fu_5200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_54_fu_5223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_56_fu_5234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_58_fu_5245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_60_fu_5256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_62_fu_5267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_64_fu_5278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_66_fu_5289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_68_fu_5300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_70_fu_5311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_72_fu_5322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_74_fu_5333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_76_fu_5344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_78_fu_5355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_80_fu_5366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_82_fu_5377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_53_fu_5508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_55_fu_5513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_57_fu_5518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_59_fu_5523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_61_fu_5538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_63_fu_5543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_65_fu_5583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_67_fu_5588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_69_fu_5623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_71_fu_5628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_73_fu_5663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_75_fu_5668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_77_fu_5703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_79_fu_5708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_81_fu_5743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_51_fu_5863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_52_fu_5868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_5900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_87_fu_5488_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_547_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_547_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_548_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_548_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_552_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_552_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_554_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_554_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_fu_556_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_558_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_88_fu_5823_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_561_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_561_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_fu_566_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_567_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_567_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_fu_572_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln16_fu_574_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_3754_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3755_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3757_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3758_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3760_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3761_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln23_fu_3763_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_3764_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3766_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3767_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3771_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3774_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3777_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3782_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3783_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3785_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln16_fu_5190_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln16_fu_5194_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_fu_5200_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln23_fu_5205_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln23_fu_5205_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln23_fu_5217_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_1_fu_5228_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_2_fu_5239_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_3_fu_5250_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_4_fu_5261_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_5_fu_5272_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_6_fu_5283_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_7_fu_5294_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_8_fu_5305_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_9_fu_5316_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_10_fu_5327_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_11_fu_5338_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_12_fu_5349_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_13_fu_5360_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln23_14_fu_5371_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln17_fu_5446_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln23_2_fu_5452_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln23_2_fu_5452_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln23_3_fu_5464_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln23_3_fu_5464_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_85_fu_5460_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln23_86_fu_5472_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln18_fu_5482_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln23_87_fu_5488_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln23_117_fu_5499_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln23_52_fu_5504_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln23_52_fu_5504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_55_fu_5513_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_57_fu_5518_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_59_fu_5523_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_61_fu_5538_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_63_fu_5543_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln23_116_fu_5548_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_3785_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3783_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln23_65_fu_5583_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_67_fu_5588_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_3771_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3782_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln23_69_fu_5623_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_71_fu_5628_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_3758_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3760_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln23_73_fu_5663_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln23_75_fu_5668_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_3766_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3761_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln23_77_fu_5703_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln23_79_fu_5708_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_3755_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3774_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln23_81_fu_5743_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_3754_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3757_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3767_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3764_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_3777_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_fu_5813_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln20_fu_5817_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_88_fu_5823_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_89_fu_5828_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln20_fu_5833_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_5843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln20_fu_5839_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln23_49_fu_5859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_52_fu_5868_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_3759_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln30_2_fu_5896_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln30_2_fu_5896_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln23_fu_3763_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component network_mul_15s_16s_30_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component network_mul_16s_15s_30_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component pointwise_conv2d_fix_1_SeparableConv2D_1_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component pointwise_conv2d_fix_1_SeparableConv2D_1_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address3 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address4 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address5 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address6 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address7 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address8 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address9 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address10 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address11 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address12 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address13 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address14 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_1_b_s_U : component pointwise_conv2d_fix_1_SeparableConv2D_1_b_s
    generic map (
        DataWidth => 13,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_1_b_s_address0,
        ce0 => SeparableConv2D_1_b_s_ce0,
        q0 => SeparableConv2D_1_b_s_q0);

    SeparableConv2D_1_w_s_U : component pointwise_conv2d_fix_1_SeparableConv2D_1_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_1_w_s_address0,
        ce0 => SeparableConv2D_1_w_s_ce0,
        q0 => SeparableConv2D_1_w_s_q0,
        address1 => SeparableConv2D_1_w_s_address1,
        ce1 => SeparableConv2D_1_w_s_ce1,
        q1 => SeparableConv2D_1_w_s_q1,
        address2 => SeparableConv2D_1_w_s_address2,
        ce2 => SeparableConv2D_1_w_s_ce2,
        q2 => SeparableConv2D_1_w_s_q2,
        address3 => SeparableConv2D_1_w_s_address3,
        ce3 => SeparableConv2D_1_w_s_ce3,
        q3 => SeparableConv2D_1_w_s_q3,
        address4 => SeparableConv2D_1_w_s_address4,
        ce4 => SeparableConv2D_1_w_s_ce4,
        q4 => SeparableConv2D_1_w_s_q4,
        address5 => SeparableConv2D_1_w_s_address5,
        ce5 => SeparableConv2D_1_w_s_ce5,
        q5 => SeparableConv2D_1_w_s_q5,
        address6 => SeparableConv2D_1_w_s_address6,
        ce6 => SeparableConv2D_1_w_s_ce6,
        q6 => SeparableConv2D_1_w_s_q6,
        address7 => SeparableConv2D_1_w_s_address7,
        ce7 => SeparableConv2D_1_w_s_ce7,
        q7 => SeparableConv2D_1_w_s_q7,
        address8 => SeparableConv2D_1_w_s_address8,
        ce8 => SeparableConv2D_1_w_s_ce8,
        q8 => SeparableConv2D_1_w_s_q8,
        address9 => SeparableConv2D_1_w_s_address9,
        ce9 => SeparableConv2D_1_w_s_ce9,
        q9 => SeparableConv2D_1_w_s_q9,
        address10 => SeparableConv2D_1_w_s_address10,
        ce10 => SeparableConv2D_1_w_s_ce10,
        q10 => SeparableConv2D_1_w_s_q10,
        address11 => SeparableConv2D_1_w_s_address11,
        ce11 => SeparableConv2D_1_w_s_ce11,
        q11 => SeparableConv2D_1_w_s_q11,
        address12 => SeparableConv2D_1_w_s_address12,
        ce12 => SeparableConv2D_1_w_s_ce12,
        q12 => SeparableConv2D_1_w_s_q12,
        address13 => SeparableConv2D_1_w_s_address13,
        ce13 => SeparableConv2D_1_w_s_ce13,
        q13 => SeparableConv2D_1_w_s_q13,
        address14 => SeparableConv2D_1_w_s_address14,
        ce14 => SeparableConv2D_1_w_s_ce14,
        q14 => SeparableConv2D_1_w_s_q14);

    network_mul_15s_16s_30_2_1_U86 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3754_p0,
        din1 => reg_5181,
        ce => ap_const_logic_1,
        dout => grp_fu_3754_p2);

    network_mul_15s_16s_30_2_1_U87 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3755_p0,
        din1 => reg_5181,
        ce => ap_const_logic_1,
        dout => grp_fu_3755_p2);

    network_mul_15s_16s_30_2_1_U88 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3757_p0,
        din1 => reg_5186,
        ce => ap_const_logic_1,
        dout => grp_fu_3757_p2);

    network_mul_15s_16s_30_2_1_U89 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3758_p0,
        din1 => reg_5181,
        ce => ap_const_logic_1,
        dout => grp_fu_3758_p2);

    network_mul_16s_15s_30_2_1_U90 : component network_mul_16s_15s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_5181,
        din1 => SeparableConv2D_1_w_33_reg_6366,
        ce => ap_const_logic_1,
        dout => grp_fu_3759_p2);

    network_mul_15s_16s_30_2_1_U91 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3760_p0,
        din1 => reg_5186,
        ce => ap_const_logic_1,
        dout => grp_fu_3760_p2);

    network_mul_15s_16s_30_2_1_U92 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3761_p0,
        din1 => reg_5186,
        ce => ap_const_logic_1,
        dout => grp_fu_3761_p2);

    network_mul_15s_16s_30_2_1_U93 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3764_p0,
        din1 => reg_5186,
        ce => ap_const_logic_1,
        dout => grp_fu_3764_p2);

    network_mul_15s_16s_30_2_1_U94 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3766_p0,
        din1 => reg_5181,
        ce => ap_const_logic_1,
        dout => grp_fu_3766_p2);

    network_mul_15s_16s_30_2_1_U95 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3767_p0,
        din1 => reg_5181,
        ce => ap_const_logic_1,
        dout => grp_fu_3767_p2);

    network_mul_15s_16s_30_2_1_U96 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3771_p0,
        din1 => reg_5181,
        ce => ap_const_logic_1,
        dout => grp_fu_3771_p2);

    network_mul_15s_16s_30_2_1_U97 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3774_p0,
        din1 => reg_5186,
        ce => ap_const_logic_1,
        dout => grp_fu_3774_p2);

    network_mul_15s_16s_30_2_1_U98 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3777_p0,
        din1 => reg_5181,
        ce => ap_const_logic_1,
        dout => grp_fu_3777_p2);

    network_mul_15s_16s_30_2_1_U99 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3782_p0,
        din1 => reg_5186,
        ce => ap_const_logic_1,
        dout => grp_fu_3782_p2);

    network_mul_15s_16s_30_2_1_U100 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3783_p0,
        din1 => reg_5186,
        ce => ap_const_logic_1,
        dout => grp_fu_3783_p2);

    network_mul_15s_16s_30_2_1_U101 : component network_mul_15s_16s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_3785_p0,
        din1 => reg_5181,
        ce => ap_const_logic_1,
        dout => grp_fu_3785_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_5446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_478 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_910),16));
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                reg_478 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_0),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_478 <= add_ln23_71_fu_568_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                reg_478 <= grp_fu_554_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_478 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_65_fu_562_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_478 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_64_fu_545_p2),16));
            end if; 
        end if;
    end process;

    reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_5446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                reg_489 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln16_reg_905),16));
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                reg_489 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv11_0),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_489 <= grp_fu_558_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_489 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_61_fu_557_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_489 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_59_fu_551_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_489 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_58_fu_550_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_489 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_56_fu_549_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_489 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_54_fu_571_p2),16));
            elsif ((((icmp_ln20_fu_5817_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_5482_p2 = ap_const_lv1_0)))) then 
                reg_489 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_547_p2),16));
            end if; 
        end if;
    end process;

    reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_5482_p2 = ap_const_lv1_1))) then 
                reg_500 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_1073),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_500 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_0),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_500 <= add_ln23_79_fu_570_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                reg_500 <= add_ln23_78_fu_573_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                reg_500 <= grp_fu_561_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                reg_500 <= grp_fu_548_p2;
            end if; 
        end if;
    end process;

    reg_511_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln17_fu_5446_p2 = ap_const_lv1_0))) then 
                reg_511 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv4_0),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                reg_511 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_1583),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                reg_511 <= grp_fu_561_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                reg_511 <= grp_fu_567_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                reg_511 <= grp_fu_548_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln20_fu_5817_p2 = ap_const_lv1_0))) then 
                reg_511 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_50_fu_559_p2),16));
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                reg_511 <= grp_fu_552_p2;
            end if; 
        end if;
    end process;

    reg_5181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                reg_5181 <= input_r_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_5181 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                reg_522 <= grp_fu_558_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_522 <= sext_ln19_reg_5998;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                reg_522 <= add_ln23_75_fu_565_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_522 <= grp_fu_567_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_522 <= add_ln23_69_fu_553_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                reg_522 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_63_fu_564_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_522 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_62_fu_546_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_522 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_60_fu_563_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_522 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_57_fu_544_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_522 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_55_fu_555_p2),16));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_522 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_53_fu_560_p2),16));
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_5482_p2 = ap_const_lv1_0))) then 
                reg_522 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_52_fu_569_p2),16));
            end if; 
        end if;
    end process;

    reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                reg_532 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln20_reg_6346),13));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_532 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv5_0),13));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                reg_532 <= grp_fu_554_p2(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_5482_p2 = ap_const_lv1_0))) then 
                reg_532 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_543_p2),13));
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                SeparableConv2D_1_w_33_reg_6366 <= SeparableConv2D_1_w_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln16_reg_905 <= add_ln16_fu_574_p2;
                out_d_reg_910 <= out_d_fu_572_p2;
                    zext_ln16_reg_5905(10 downto 0) <= zext_ln16_fu_5190_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln20_fu_5817_p2 = ap_const_lv1_0))) then
                    mul_ln23_reg_4827(12 downto 2) <= mul_ln23_fu_3763_p2(12 downto 2);
                xor_ln20_reg_6346 <= xor_ln20_fu_5833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_reg_1073 <= out_h_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_reg_1583 <= out_w_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_5186 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_5817_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                select_ln27_reg_6351 <= select_ln27_fu_5851_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln19_reg_5998 <= sext_ln19_fu_5382_p1;
                sext_ln23_54_reg_6003 <= sext_ln23_54_fu_5386_p1;
                sext_ln23_56_reg_6008 <= sext_ln23_56_fu_5390_p1;
                sext_ln23_58_reg_6013 <= sext_ln23_58_fu_5394_p1;
                sext_ln23_60_reg_6018 <= sext_ln23_60_fu_5398_p1;
                sext_ln23_62_reg_6023 <= sext_ln23_62_fu_5402_p1;
                sext_ln23_64_reg_6028 <= sext_ln23_64_fu_5406_p1;
                sext_ln23_66_reg_6033 <= sext_ln23_66_fu_5410_p1;
                sext_ln23_68_reg_6038 <= sext_ln23_68_fu_5414_p1;
                sext_ln23_70_reg_6043 <= sext_ln23_70_fu_5418_p1;
                sext_ln23_72_reg_6048 <= sext_ln23_72_fu_5422_p1;
                sext_ln23_74_reg_6053 <= sext_ln23_74_fu_5426_p1;
                sext_ln23_76_reg_6058 <= sext_ln23_76_fu_5430_p1;
                sext_ln23_78_reg_6063 <= sext_ln23_78_fu_5434_p1;
                sext_ln23_80_reg_6068 <= sext_ln23_80_fu_5438_p1;
                sext_ln23_82_reg_6073 <= sext_ln23_82_fu_5442_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sext_ln23_116_reg_6143 <= sext_ln23_116_fu_5548_p1;
                trunc_ln23_1_reg_6153 <= grp_fu_3785_p2(29 downto 14);
                trunc_ln23_2_reg_6158 <= grp_fu_3783_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sext_ln23_117_reg_6094 <= sext_ln23_117_fu_5499_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_5482_p2 = ap_const_lv1_0))) then
                sext_ln23_118_reg_6089 <= sext_ln23_118_fu_5493_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                sext_ln23_reg_6338 <= sext_ln23_fu_5813_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln16_fu_5194_p2 = ap_const_lv1_0))) then
                    shl_ln_reg_5918(6 downto 4) <= shl_ln_fu_5209_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln17_fu_5446_p2 = ap_const_lv1_0))) then
                    sub_ln23_reg_6081(8 downto 1) <= sub_ln23_fu_5476_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                trunc_ln23_10_reg_6278 <= grp_fu_3774_p2(29 downto 14);
                trunc_ln23_9_reg_6273 <= grp_fu_3755_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                trunc_ln23_11_reg_6298 <= grp_fu_3754_p2(29 downto 14);
                trunc_ln23_12_reg_6303 <= grp_fu_3757_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                trunc_ln23_13_reg_6318 <= grp_fu_3767_p2(29 downto 14);
                trunc_ln23_14_reg_6323 <= grp_fu_3764_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                trunc_ln23_3_reg_6183 <= grp_fu_3771_p2(29 downto 14);
                trunc_ln23_4_reg_6188 <= grp_fu_3782_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln23_5_reg_6213 <= grp_fu_3758_p2(29 downto 14);
                trunc_ln23_6_reg_6218 <= grp_fu_3760_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln23_7_reg_6243 <= grp_fu_3766_p2(29 downto 14);
                trunc_ln23_8_reg_6248 <= grp_fu_3761_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                trunc_ln23_s_reg_6333 <= grp_fu_3777_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                trunc_ln4_reg_6381 <= grp_fu_3759_p2(29 downto 14);
            end if;
        end if;
    end process;
    mul_ln23_reg_4827(1 downto 0) <= "00";
    zext_ln16_reg_5905(11) <= '0';
    shl_ln_reg_5918(3 downto 0) <= "0000";
    sub_ln23_reg_6081(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, icmp_ln18_fu_5482_p2, ap_CS_fsm_state20, icmp_ln20_fu_5817_p2, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln16_fu_5194_p2, icmp_ln17_fu_5446_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln16_fu_5194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln17_fu_5446_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_5482_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln20_fu_5817_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    SeparableConv2D_1_b_s_address0 <= zext_ln19_fu_5200_p1(3 - 1 downto 0);

    SeparableConv2D_1_b_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state22, zext_ln23_54_fu_5223_p1, zext_ln23_52_fu_5868_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SeparableConv2D_1_w_s_address0 <= zext_ln23_52_fu_5868_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_address0 <= zext_ln23_54_fu_5223_p1(7 - 1 downto 0);
        else 
            SeparableConv2D_1_w_s_address0 <= "XXXXXXX";
        end if; 
    end process;

    SeparableConv2D_1_w_s_address1 <= zext_ln23_56_fu_5234_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address10 <= zext_ln23_74_fu_5333_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address11 <= zext_ln23_76_fu_5344_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address12 <= zext_ln23_78_fu_5355_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address13 <= zext_ln23_80_fu_5366_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address14 <= zext_ln23_82_fu_5377_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address2 <= zext_ln23_58_fu_5245_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address3 <= zext_ln23_60_fu_5256_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address4 <= zext_ln23_62_fu_5267_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address5 <= zext_ln23_64_fu_5278_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address6 <= zext_ln23_66_fu_5289_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address7 <= zext_ln23_68_fu_5300_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address8 <= zext_ln23_70_fu_5311_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address9 <= zext_ln23_72_fu_5322_p1(7 - 1 downto 0);

    SeparableConv2D_1_w_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            SeparableConv2D_1_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce1 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce10_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce10 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce11_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce11 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce12_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce12 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce13_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce13 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce14_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce14 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce2 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce3_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce3 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce4_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce4 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce5_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce5 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce6_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce6 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce7_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce7 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce8_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce8 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce9_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce9 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln16_fu_574_p0 <= reg_489(11 - 1 downto 0);
    add_ln16_fu_574_p2 <= std_logic_vector(unsigned(add_ln16_fu_574_p0) + unsigned(ap_const_lv11_C4));
    add_ln23_50_fu_559_p2 <= std_logic_vector(unsigned(shl_ln_reg_5918) + unsigned(zext_ln23_88_fu_5823_p1));
    add_ln23_52_fu_569_p2 <= std_logic_vector(signed(sext_ln23_118_fu_5493_p1) + signed(ap_const_lv10_188));
    add_ln23_53_fu_560_p2 <= std_logic_vector(signed(sext_ln23_118_reg_6089) + signed(ap_const_lv10_24C));
    add_ln23_54_fu_571_p2 <= std_logic_vector(signed(sext_ln23_117_fu_5499_p1) + signed(ap_const_lv11_310));
    add_ln23_55_fu_555_p2 <= std_logic_vector(signed(sext_ln23_117_reg_6094) + signed(ap_const_lv11_3D4));
    add_ln23_56_fu_549_p2 <= std_logic_vector(signed(sext_ln23_117_reg_6094) + signed(ap_const_lv11_498));
    add_ln23_57_fu_544_p2 <= std_logic_vector(signed(sext_ln23_117_reg_6094) + signed(ap_const_lv11_55C));
    add_ln23_58_fu_550_p2 <= std_logic_vector(signed(sext_ln23_117_reg_6094) + signed(ap_const_lv11_620));
    add_ln23_59_fu_551_p2 <= std_logic_vector(signed(sext_ln23_117_reg_6094) + signed(ap_const_lv11_6E4));
    add_ln23_60_fu_563_p2 <= std_logic_vector(signed(sext_ln23_116_fu_5548_p1) + signed(ap_const_lv12_7A8));
    add_ln23_61_fu_557_p2 <= std_logic_vector(signed(sext_ln23_116_reg_6143) + signed(ap_const_lv12_86C));
    add_ln23_62_fu_546_p2 <= std_logic_vector(signed(sext_ln23_116_reg_6143) + signed(ap_const_lv12_930));
    add_ln23_63_fu_564_p2 <= std_logic_vector(signed(sext_ln23_116_reg_6143) + signed(ap_const_lv12_9F4));
    add_ln23_64_fu_545_p2 <= std_logic_vector(signed(sext_ln23_116_reg_6143) + signed(ap_const_lv12_AB8));
    add_ln23_65_fu_562_p2 <= std_logic_vector(signed(sext_ln23_116_reg_6143) + signed(ap_const_lv12_B7C));
    add_ln23_69_fu_553_p2 <= std_logic_vector(unsigned(trunc_ln23_5_reg_6213) + unsigned(trunc_ln23_4_reg_6188));
    add_ln23_71_fu_568_p2 <= std_logic_vector(unsigned(reg_522) + unsigned(reg_478));
    add_ln23_75_fu_565_p2 <= std_logic_vector(unsigned(reg_522) + unsigned(reg_500));
    add_ln23_78_fu_573_p2 <= std_logic_vector(unsigned(reg_500) + unsigned(reg_511));
    add_ln23_79_fu_570_p2 <= std_logic_vector(unsigned(reg_522) + unsigned(reg_500));
    add_ln23_fu_543_p2 <= std_logic_vector(unsigned(zext_ln23_87_fu_5488_p1) + unsigned(sub_ln23_reg_6081));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln16_fu_5194_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln16_fu_5194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln16_fu_5194_p2)
    begin
        if (((icmp_ln16_fu_5194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_3754_p0 <= sext_ln23_74_reg_6053(15 - 1 downto 0);
    grp_fu_3755_p0 <= sext_ln23_70_reg_6043(15 - 1 downto 0);
    grp_fu_3757_p0 <= sext_ln23_76_reg_6058(15 - 1 downto 0);
    grp_fu_3758_p0 <= sext_ln23_62_reg_6023(15 - 1 downto 0);
    grp_fu_3760_p0 <= sext_ln23_64_reg_6028(15 - 1 downto 0);
    grp_fu_3761_p0 <= sext_ln23_68_reg_6038(15 - 1 downto 0);
    grp_fu_3764_p0 <= sext_ln23_80_reg_6068(15 - 1 downto 0);
    grp_fu_3766_p0 <= sext_ln23_66_reg_6033(15 - 1 downto 0);
    grp_fu_3767_p0 <= sext_ln23_78_reg_6063(15 - 1 downto 0);
    grp_fu_3771_p0 <= sext_ln23_58_reg_6013(15 - 1 downto 0);
    grp_fu_3774_p0 <= sext_ln23_72_reg_6048(15 - 1 downto 0);
    grp_fu_3777_p0 <= sext_ln23_82_reg_6073(15 - 1 downto 0);
    grp_fu_3782_p0 <= sext_ln23_60_reg_6018(15 - 1 downto 0);
    grp_fu_3783_p0 <= sext_ln23_56_reg_6008(15 - 1 downto 0);
    grp_fu_3785_p0 <= sext_ln23_54_reg_6003(15 - 1 downto 0);

    grp_fu_547_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state20, sext_ln23_118_fu_5493_p1, sext_ln23_116_reg_6143)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_547_p0 <= sext_ln23_116_reg_6143;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_547_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_118_fu_5493_p1),12));
        else 
            grp_fu_547_p0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_547_p1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state20, zext_ln16_reg_5905)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_547_p1 <= zext_ln16_reg_5905;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_C4),12));
        else 
            grp_fu_547_p1 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_547_p2 <= std_logic_vector(signed(grp_fu_547_p0) + signed(grp_fu_547_p1));

    grp_fu_548_p0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state26, trunc_ln23_11_reg_6298, trunc_ln4_reg_6381)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_548_p0 <= trunc_ln4_reg_6381;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_548_p0 <= trunc_ln23_11_reg_6298;
        else 
            grp_fu_548_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_548_p1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state26, trunc_ln23_1_reg_6153, trunc_ln23_10_reg_6278)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_548_p1 <= trunc_ln23_1_reg_6153;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_548_p1 <= trunc_ln23_10_reg_6278;
        else 
            grp_fu_548_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_548_p2 <= std_logic_vector(unsigned(grp_fu_548_p0) + unsigned(grp_fu_548_p1));

    grp_fu_552_p0_assign_proc : process(reg_500, ap_CS_fsm_state17, ap_CS_fsm_state29, trunc_ln23_s_reg_6333)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_552_p0 <= reg_500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_552_p0 <= trunc_ln23_s_reg_6333;
        else 
            grp_fu_552_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_552_p1_assign_proc : process(reg_511, ap_CS_fsm_state17, ap_CS_fsm_state29, trunc_ln23_14_reg_6323)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_552_p1 <= reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_552_p1 <= trunc_ln23_14_reg_6323;
        else 
            grp_fu_552_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_552_p2 <= std_logic_vector(unsigned(grp_fu_552_p0) + unsigned(grp_fu_552_p1));

    grp_fu_554_p0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state21, mul_ln23_reg_4827, trunc_ln23_7_reg_6243)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_554_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln23_reg_4827),16));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_554_p0 <= trunc_ln23_7_reg_6243;
        else 
            grp_fu_554_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_554_p1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state21, trunc_ln23_6_reg_6218, sext_ln23_reg_6338)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln23_reg_6338),16));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_554_p1 <= trunc_ln23_6_reg_6218;
        else 
            grp_fu_554_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_554_p2 <= std_logic_vector(unsigned(grp_fu_554_p0) + unsigned(grp_fu_554_p1));

    grp_fu_558_p0_assign_proc : process(ap_CS_fsm_state11, reg_522, ap_CS_fsm_state30, trunc_ln23_3_reg_6183)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_558_p0 <= reg_522;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_558_p0 <= trunc_ln23_3_reg_6183;
        else 
            grp_fu_558_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_558_p1_assign_proc : process(ap_CS_fsm_state11, reg_511, ap_CS_fsm_state30, trunc_ln23_2_reg_6158)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_558_p1 <= reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_558_p1 <= trunc_ln23_2_reg_6158;
        else 
            grp_fu_558_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_558_p2 <= std_logic_vector(unsigned(grp_fu_558_p0) + unsigned(grp_fu_558_p1));

    grp_fu_561_p0_assign_proc : process(reg_478, ap_CS_fsm_state16, ap_CS_fsm_state28, trunc_ln23_13_reg_6318)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_561_p0 <= reg_478;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_561_p0 <= trunc_ln23_13_reg_6318;
        else 
            grp_fu_561_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_561_p1_assign_proc : process(ap_CS_fsm_state16, reg_511, ap_CS_fsm_state28, trunc_ln23_12_reg_6303)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_561_p1 <= reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_561_p1 <= trunc_ln23_12_reg_6303;
        else 
            grp_fu_561_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_561_p2 <= std_logic_vector(unsigned(grp_fu_561_p0) + unsigned(grp_fu_561_p1));

    grp_fu_567_p0_assign_proc : process(ap_CS_fsm_state14, reg_489, ap_CS_fsm_state27, trunc_ln23_9_reg_6273)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_567_p0 <= reg_489;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_567_p0 <= trunc_ln23_9_reg_6273;
        else 
            grp_fu_567_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_567_p1_assign_proc : process(ap_CS_fsm_state14, reg_511, ap_CS_fsm_state27, trunc_ln23_8_reg_6248)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_567_p1 <= reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_567_p1 <= trunc_ln23_8_reg_6248;
        else 
            grp_fu_567_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_567_p2 <= std_logic_vector(unsigned(grp_fu_567_p0) + unsigned(grp_fu_567_p1));
    icmp_ln16_fu_5194_p0 <= reg_478(4 - 1 downto 0);
    icmp_ln16_fu_5194_p2 <= "1" when (icmp_ln16_fu_5194_p0 = ap_const_lv4_8) else "0";
    icmp_ln17_fu_5446_p0 <= reg_500(4 - 1 downto 0);
    icmp_ln17_fu_5446_p2 <= "1" when (icmp_ln17_fu_5446_p0 = ap_const_lv4_E) else "0";
    icmp_ln18_fu_5482_p0 <= reg_511(4 - 1 downto 0);
    icmp_ln18_fu_5482_p2 <= "1" when (icmp_ln18_fu_5482_p0 = ap_const_lv4_E) else "0";
    icmp_ln20_fu_5817_p0 <= reg_532(5 - 1 downto 0);
    icmp_ln20_fu_5817_p2 <= "1" when (icmp_ln20_fu_5817_p0 = ap_const_lv5_10) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln23_53_fu_5508_p1, zext_ln23_57_fu_5518_p1, zext_ln23_61_fu_5538_p1, zext_ln23_65_fu_5583_p1, zext_ln23_69_fu_5623_p1, zext_ln23_73_fu_5663_p1, zext_ln23_77_fu_5703_p1, zext_ln23_81_fu_5743_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_address0 <= zext_ln23_81_fu_5743_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= zext_ln23_77_fu_5703_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= zext_ln23_73_fu_5663_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln23_69_fu_5623_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= zext_ln23_65_fu_5583_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln23_61_fu_5538_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln23_57_fu_5518_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln23_53_fu_5508_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state22, zext_ln23_55_fu_5513_p1, zext_ln23_59_fu_5523_p1, zext_ln23_63_fu_5543_p1, zext_ln23_67_fu_5588_p1, zext_ln23_71_fu_5628_p1, zext_ln23_75_fu_5668_p1, zext_ln23_79_fu_5708_p1, zext_ln23_51_fu_5863_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address1 <= zext_ln23_51_fu_5863_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address1 <= zext_ln23_79_fu_5708_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= zext_ln23_75_fu_5668_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= zext_ln23_71_fu_5628_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= zext_ln23_67_fu_5588_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= zext_ln23_63_fu_5543_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address1 <= zext_ln23_59_fu_5523_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address1 <= zext_ln23_55_fu_5513_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln23_fu_3763_p0 <= mul_ln23_fu_3763_p00(5 - 1 downto 0);
    mul_ln23_fu_3763_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_89_fu_5828_p0),13));
    mul_ln23_fu_3763_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln23_fu_3763_p0) * unsigned(ap_const_lv13_C4), 13));
    or_ln23_10_fu_5327_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_B);
    or_ln23_11_fu_5338_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_C);
    or_ln23_12_fu_5349_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_D);
    or_ln23_13_fu_5360_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_E);
    or_ln23_14_fu_5371_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_F);
    or_ln23_1_fu_5228_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_2);
    or_ln23_2_fu_5239_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_3);
    or_ln23_3_fu_5250_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_4);
    or_ln23_4_fu_5261_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_5);
    or_ln23_5_fu_5272_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_6);
    or_ln23_6_fu_5283_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_7);
    or_ln23_7_fu_5294_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_8);
    or_ln23_8_fu_5305_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_9);
    or_ln23_9_fu_5316_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_A);
    or_ln23_fu_5217_p2 <= (shl_ln_fu_5209_p3 or ap_const_lv7_1);
    out_d_fu_572_p0 <= reg_478(4 - 1 downto 0);
    out_d_fu_572_p2 <= std_logic_vector(unsigned(out_d_fu_572_p0) + unsigned(ap_const_lv4_1));
    out_h_fu_556_p0 <= reg_500(4 - 1 downto 0);
    out_h_fu_556_p2 <= std_logic_vector(unsigned(out_h_fu_556_p0) + unsigned(ap_const_lv4_1));
    out_w_fu_566_p0 <= reg_511(4 - 1 downto 0);
    out_w_fu_566_p2 <= std_logic_vector(unsigned(out_w_fu_566_p0) + unsigned(ap_const_lv4_1));
    output_r_address0 <= zext_ln30_fu_5900_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln27_reg_6351),16));

    output_r_we0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln27_fu_5851_p3 <= 
        ap_const_lv15_0 when (tmp_fu_5843_p3(0) = '1') else 
        trunc_ln20_fu_5839_p1;
        sext_ln19_fu_5382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_b_s_q0),16));

    sext_ln23_116_fu_5548_p0 <= reg_532(9 - 1 downto 0);
        sext_ln23_116_fu_5548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_116_fu_5548_p0),12));

    sext_ln23_117_fu_5499_p0 <= reg_532(9 - 1 downto 0);
        sext_ln23_117_fu_5499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_117_fu_5499_p0),11));

        sext_ln23_118_fu_5493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_fu_543_p2),10));

        sext_ln23_49_fu_5859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_532),32));

    sext_ln23_52_fu_5504_p0 <= reg_489(10 - 1 downto 0);
        sext_ln23_52_fu_5504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_52_fu_5504_p0),32));

        sext_ln23_54_fu_5386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q0),30));

        sext_ln23_56_fu_5390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q1),30));

        sext_ln23_58_fu_5394_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q2),30));

        sext_ln23_60_fu_5398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q3),30));

        sext_ln23_62_fu_5402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q4),30));

        sext_ln23_64_fu_5406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q5),30));

        sext_ln23_66_fu_5410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q6),30));

        sext_ln23_68_fu_5414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q7),30));

        sext_ln23_70_fu_5418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q8),30));

        sext_ln23_72_fu_5422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q9),30));

        sext_ln23_74_fu_5426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q10),30));

        sext_ln23_76_fu_5430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q11),30));

        sext_ln23_78_fu_5434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q12),30));

        sext_ln23_80_fu_5438_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q13),30));

        sext_ln23_82_fu_5442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q14),30));

    sext_ln23_fu_5813_p0 <= reg_532(9 - 1 downto 0);
        sext_ln23_fu_5813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_fu_5813_p0),13));

    sext_ln30_2_fu_5896_p0 <= reg_489(12 - 1 downto 0);
        sext_ln30_2_fu_5896_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_2_fu_5896_p0),32));

    shl_ln23_2_fu_5452_p1 <= reg_500(4 - 1 downto 0);
    shl_ln23_2_fu_5452_p3 <= (shl_ln23_2_fu_5452_p1 & ap_const_lv4_0);
    shl_ln23_3_fu_5464_p1 <= reg_500(4 - 1 downto 0);
    shl_ln23_3_fu_5464_p3 <= (shl_ln23_3_fu_5464_p1 & ap_const_lv1_0);
    shl_ln_fu_5209_p3 <= (trunc_ln23_fu_5205_p1 & ap_const_lv4_0);
    sub_ln23_fu_5476_p2 <= std_logic_vector(unsigned(zext_ln23_85_fu_5460_p1) - unsigned(zext_ln23_86_fu_5472_p1));
    tmp_fu_5843_p3 <= reg_522(15 downto 15);
    trunc_ln20_fu_5839_p1 <= reg_522(15 - 1 downto 0);
    trunc_ln23_fu_5205_p0 <= reg_478(4 - 1 downto 0);
    trunc_ln23_fu_5205_p1 <= trunc_ln23_fu_5205_p0(3 - 1 downto 0);
    xor_ln20_fu_5833_p0 <= reg_532(5 - 1 downto 0);
    xor_ln20_fu_5833_p2 <= (xor_ln20_fu_5833_p0 xor ap_const_lv5_10);
    zext_ln16_fu_5190_p0 <= reg_489(11 - 1 downto 0);
    zext_ln16_fu_5190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln16_fu_5190_p0),12));
    zext_ln19_fu_5200_p0 <= reg_478(4 - 1 downto 0);
    zext_ln19_fu_5200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_fu_5200_p0),64));
    zext_ln23_51_fu_5863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln23_49_fu_5859_p1),64));
    zext_ln23_52_fu_5868_p0 <= reg_511(7 - 1 downto 0);
    zext_ln23_52_fu_5868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_52_fu_5868_p0),64));
    zext_ln23_53_fu_5508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln23_52_fu_5504_p1),64));
    zext_ln23_54_fu_5223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_fu_5217_p2),64));
    zext_ln23_55_fu_5513_p0 <= reg_522(10 - 1 downto 0);
    zext_ln23_55_fu_5513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_55_fu_5513_p0),64));
    zext_ln23_56_fu_5234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_1_fu_5228_p2),64));
    zext_ln23_57_fu_5518_p0 <= reg_522(10 - 1 downto 0);
    zext_ln23_57_fu_5518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_57_fu_5518_p0),64));
    zext_ln23_58_fu_5245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_2_fu_5239_p2),64));
    zext_ln23_59_fu_5523_p0 <= reg_489(11 - 1 downto 0);
    zext_ln23_59_fu_5523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_59_fu_5523_p0),64));
    zext_ln23_60_fu_5256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_3_fu_5250_p2),64));
    zext_ln23_61_fu_5538_p0 <= reg_522(11 - 1 downto 0);
    zext_ln23_61_fu_5538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_61_fu_5538_p0),64));
    zext_ln23_62_fu_5267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_4_fu_5261_p2),64));
    zext_ln23_63_fu_5543_p0 <= reg_489(11 - 1 downto 0);
    zext_ln23_63_fu_5543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_63_fu_5543_p0),64));
    zext_ln23_64_fu_5278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_5_fu_5272_p2),64));
    zext_ln23_65_fu_5583_p0 <= reg_522(11 - 1 downto 0);
    zext_ln23_65_fu_5583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_65_fu_5583_p0),64));
    zext_ln23_66_fu_5289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_6_fu_5283_p2),64));
    zext_ln23_67_fu_5588_p0 <= reg_489(11 - 1 downto 0);
    zext_ln23_67_fu_5588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_67_fu_5588_p0),64));
    zext_ln23_68_fu_5300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_7_fu_5294_p2),64));
    zext_ln23_69_fu_5623_p0 <= reg_489(11 - 1 downto 0);
    zext_ln23_69_fu_5623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_69_fu_5623_p0),64));
    zext_ln23_70_fu_5311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_8_fu_5305_p2),64));
    zext_ln23_71_fu_5628_p0 <= reg_522(12 - 1 downto 0);
    zext_ln23_71_fu_5628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_71_fu_5628_p0),64));
    zext_ln23_72_fu_5322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_9_fu_5316_p2),64));
    zext_ln23_73_fu_5663_p0 <= reg_489(12 - 1 downto 0);
    zext_ln23_73_fu_5663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_73_fu_5663_p0),64));
    zext_ln23_74_fu_5333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_10_fu_5327_p2),64));
    zext_ln23_75_fu_5668_p0 <= reg_522(12 - 1 downto 0);
    zext_ln23_75_fu_5668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_75_fu_5668_p0),64));
    zext_ln23_76_fu_5344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_11_fu_5338_p2),64));
    zext_ln23_77_fu_5703_p0 <= reg_522(12 - 1 downto 0);
    zext_ln23_77_fu_5703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_77_fu_5703_p0),64));
    zext_ln23_78_fu_5355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_12_fu_5349_p2),64));
    zext_ln23_79_fu_5708_p0 <= reg_478(12 - 1 downto 0);
    zext_ln23_79_fu_5708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_79_fu_5708_p0),64));
    zext_ln23_80_fu_5366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_13_fu_5360_p2),64));
    zext_ln23_81_fu_5743_p0 <= reg_478(12 - 1 downto 0);
    zext_ln23_81_fu_5743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_81_fu_5743_p0),64));
    zext_ln23_82_fu_5377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln23_14_fu_5371_p2),64));
    zext_ln23_85_fu_5460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_2_fu_5452_p3),9));
    zext_ln23_86_fu_5472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_3_fu_5464_p3),9));
    zext_ln23_87_fu_5488_p0 <= reg_511(4 - 1 downto 0);
    zext_ln23_87_fu_5488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_87_fu_5488_p0),9));
    zext_ln23_88_fu_5823_p0 <= reg_532(5 - 1 downto 0);
    zext_ln23_88_fu_5823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln23_88_fu_5823_p0),7));
    zext_ln23_89_fu_5828_p0 <= reg_532(5 - 1 downto 0);
    zext_ln30_fu_5900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_2_fu_5896_p1),64));
end behav;
