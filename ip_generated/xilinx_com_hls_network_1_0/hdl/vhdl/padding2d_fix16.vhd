-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (6 downto 0);
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_28_fu_327_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_reg_685 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_331_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_692 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal input_height_cast3_fu_337_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_height_cast3_reg_703 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_fu_348_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_reg_708 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_354_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_reg_713 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_358_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_reg_719 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_reg_728 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_376_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_reg_734 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_width_cast2_fu_379_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_width_cast2_reg_741 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_386_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_746 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_cast1_fu_392_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_cast1_reg_751 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_cast9_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_cast9_reg_756 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_cast_fu_404_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_41_cast6_fu_412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_cast6_reg_766 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_cast_fu_431_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_cast_reg_771 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_cast_fu_440_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_49_cast_fu_459_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_467_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_792 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_38_fu_478_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_reg_798 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast_fu_493_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast_reg_803 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_1_fu_506_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth_1_reg_811 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_41_fu_527_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_3_fu_533_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_3_reg_824 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_543_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_reg_829 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_1_fu_557_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_1_reg_838 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_43_fu_563_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_reg_843 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond7_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_reg_848 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_583_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_48_reg_861 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_fu_589_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_reg_866 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_load_reg_871 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal o_count_8_fu_599_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal o_count_9_fu_616_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond5_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next5_fu_622_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next4_fu_627_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_7_fu_647_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal exitcond8_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next_fu_653_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next1_fu_658_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next2_fu_663_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next6_fu_668_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next3_fu_673_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv9_reg_137 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv4_reg_147 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv1_reg_157 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_reg_167 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv2_reg_177 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_reg_187 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_count_reg_199 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_reg_211 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_1_reg_222 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv3_reg_232 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_6_reg_243 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_2_reg_254 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_1_reg_265 : STD_LOGIC_VECTOR (13 downto 0);
    signal height_reg_276 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_3_reg_287 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_2_reg_298 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_4_reg_308 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_5_reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_327_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_height_cast3_fu_337_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_fu_348_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_30_fu_348_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_fu_363_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_width_cast_fu_373_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_width_cast_fu_373_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_386_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_386_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_407_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_cast7_fu_401_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_cast_fu_416_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_33_fu_425_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_40_cast8_fu_398_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_435_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_435_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_444_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_fu_453_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_cast_fu_449_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_482_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_487_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal depth_cast_fu_497_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_fu_512_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_538_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_cast_fu_548_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond7_fu_552_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_fu_632_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_fu_348_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_fu_348_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_386_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_386_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    depth_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                depth_reg_211 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then 
                depth_reg_211 <= depth_1_reg_811;
            end if; 
        end if;
    end process;

    height_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_1))) then 
                height_reg_276 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond5_fu_605_p2 = ap_const_lv1_1))) then 
                height_reg_276 <= height_1_reg_838;
            end if; 
        end if;
    end process;

    i_count_1_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_1))) then 
                i_count_1_reg_265 <= i_count_reg_199;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond5_fu_605_p2 = ap_const_lv1_1))) then 
                i_count_1_reg_265 <= tmp_43_reg_843;
            end if; 
        end if;
    end process;

    i_count_2_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_count_2_reg_298 <= tmp_48_reg_861;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_552_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_298 <= i_count_1_reg_265;
            end if; 
        end if;
    end process;

    i_count_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_count_reg_199 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then 
                i_count_reg_199 <= i_count_3_reg_824;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvars_iv1_reg_157 <= tmp_49_cast_fu_459_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then 
                indvars_iv1_reg_157 <= indvars_iv_next2_fu_663_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvars_iv2_reg_177 <= tmp_40_cast_fu_404_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then 
                indvars_iv2_reg_177 <= indvars_iv_next_fu_653_p2;
            end if; 
        end if;
    end process;

    indvars_iv3_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_1))) then 
                indvars_iv3_reg_232 <= indvars_iv1_reg_157;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond5_fu_605_p2 = ap_const_lv1_1))) then 
                indvars_iv3_reg_232 <= indvars_iv_next4_fu_627_p2;
            end if; 
        end if;
    end process;

    indvars_iv4_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvars_iv4_reg_147 <= tmp_8_fu_467_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then 
                indvars_iv4_reg_147 <= indvars_iv_next6_fu_668_p2;
            end if; 
        end if;
    end process;

    indvars_iv9_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvars_iv9_reg_137 <= tmp_31_reg_719;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then 
                indvars_iv9_reg_137 <= indvars_iv_next3_fu_673_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvars_iv_reg_167 <= tmp_44_cast_fu_440_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_167 <= indvars_iv_next1_fu_658_p2;
            end if; 
        end if;
    end process;

    o_count_1_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_501_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_222 <= o_count_reg_187;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_222 <= tmp_41_fu_527_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_1))) then 
                o_count_2_reg_254 <= indvars_iv2_reg_177;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond5_fu_605_p2 = ap_const_lv1_1))) then 
                o_count_2_reg_254 <= tmp_45_reg_866;
            end if; 
        end if;
    end process;

    o_count_3_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                o_count_3_reg_287 <= o_count_8_fu_599_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_552_p2 = ap_const_lv1_0))) then 
                o_count_3_reg_287 <= o_count_2_reg_254;
            end if; 
        end if;
    end process;

    o_count_4_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond5_fu_605_p2 = ap_const_lv1_0))) then 
                o_count_4_reg_308 <= o_count_9_fu_616_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_572_p2 = ap_const_lv1_1))) then 
                o_count_4_reg_308 <= o_count_6_reg_243;
            end if; 
        end if;
    end process;

    o_count_5_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_0))) then 
                o_count_5_reg_318 <= o_count_7_fu_647_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_552_p2 = ap_const_lv1_1))) then 
                o_count_5_reg_318 <= tmp_39_reg_829;
            end if; 
        end if;
    end process;

    o_count_6_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_1))) then 
                o_count_6_reg_243 <= indvars_iv_reg_167;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond5_fu_605_p2 = ap_const_lv1_1))) then 
                o_count_6_reg_243 <= indvars_iv_next5_fu_622_p2;
            end if; 
        end if;
    end process;

    o_count_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                o_count_reg_187 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then 
                o_count_reg_187 <= tmp_42_reg_848;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                depth_1_reg_811 <= depth_1_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                height_1_reg_838 <= height_1_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_1))) then
                i_count_3_reg_824 <= i_count_3_fu_533_p2;
                tmp_39_reg_829 <= tmp_39_fu_543_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                input_height_cast3_reg_703 <= input_height_cast3_fu_337_p1;
                tmp_29_reg_713 <= tmp_29_fu_354_p1;
                tmp_30_reg_708 <= tmp_30_fu_348_p2;
                tmp_31_reg_719 <= tmp_31_fu_358_p2;
                tmp_6_reg_728 <= tmp_6_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_load_reg_871 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    input_width_cast2_reg_741(6 downto 0) <= input_width_cast2_fu_379_p1(6 downto 0);
                    p_cast_reg_803(9 downto 0) <= p_cast_fu_493_p1(9 downto 0);
                tmp_38_reg_798 <= tmp_38_fu_478_p1;
                    tmp_39_cast1_reg_751(11 downto 0) <= tmp_39_cast1_fu_392_p1(11 downto 0);
                    tmp_40_cast9_reg_756(4 downto 0) <= tmp_40_cast9_fu_395_p1(4 downto 0);
                    tmp_41_cast6_reg_766(4 downto 0) <= tmp_41_cast6_fu_412_p1(4 downto 0);
                    tmp_43_cast_reg_771(9 downto 0) <= tmp_43_cast_fu_431_p1(9 downto 0);
                tmp_9_reg_792 <= tmp_9_fu_473_p2;
                    tmp_cast_reg_734(4 downto 0) <= tmp_cast_fu_376_p1(4 downto 0);
                tmp_s_reg_746 <= tmp_s_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_28_reg_685 <= tmp_28_fu_327_p1;
                tmp_reg_692 <= tmp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_552_p2 = ap_const_lv1_1))) then
                tmp_42_reg_848 <= tmp_42_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_552_p2 = ap_const_lv1_0))) then
                tmp_43_reg_843 <= tmp_43_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_572_p2 = ap_const_lv1_1))) then
                tmp_45_reg_866 <= tmp_45_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_572_p2 = ap_const_lv1_0))) then
                tmp_48_reg_861 <= tmp_48_fu_583_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_734(13 downto 5) <= "000000000";
    input_width_cast2_reg_741(13 downto 7) <= "0000000";
    tmp_39_cast1_reg_751(15 downto 12) <= "0000";
    tmp_40_cast9_reg_756(15 downto 5) <= "00000000000";
    tmp_41_cast6_reg_766(15 downto 5) <= "00000000000";
    tmp_43_cast_reg_771(13 downto 10) <= "0000";
    p_cast_reg_803(13 downto 10) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond2_fu_516_p2, ap_CS_fsm_state6, exitcond7_fu_552_p2, ap_CS_fsm_state7, exitcond_fu_572_p2, ap_CS_fsm_state10, exitcond5_fu_605_p2, ap_CS_fsm_state11, exitcond8_fu_636_p2, exitcond1_fu_501_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_501_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_552_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_572_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond5_fu_605_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond1_fu_501_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_501_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond1_fu_501_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_501_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_1_fu_506_p2 <= std_logic_vector(unsigned(depth_reg_211) + unsigned(ap_const_lv5_1));
    depth_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(depth_reg_211),6));
    exitcond1_fu_501_p2 <= "1" when (depth_cast_fu_497_p1 = tmp_38_reg_798) else "0";
    exitcond2_fu_516_p2 <= "1" when (tmp_50_fu_512_p1 = indvars_iv9_reg_137) else "0";
    exitcond5_fu_605_p2 <= "1" when (o_count_4_reg_308 = indvars_iv3_reg_232) else "0";
    exitcond7_fu_552_p1 <= input_height;
    exitcond7_fu_552_p2 <= "1" when (height_cast_fu_548_p1 = exitcond7_fu_552_p1) else "0";
    exitcond8_fu_636_p2 <= "1" when (tmp_51_fu_632_p1 = indvars_iv4_reg_147) else "0";
    exitcond_fu_572_p2 <= "1" when (o_count_3_reg_287 = o_count_6_reg_243) else "0";
    height_1_fu_557_p2 <= std_logic_vector(unsigned(height_reg_276) + unsigned(ap_const_lv5_1));
    height_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_reg_276),6));
    i_count_3_fu_533_p2 <= std_logic_vector(unsigned(tmp_s_reg_746) + unsigned(i_count_reg_199));
    indvars_iv_next1_fu_658_p2 <= std_logic_vector(unsigned(tmp_43_cast_reg_771) + unsigned(indvars_iv_reg_167));
    indvars_iv_next2_fu_663_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_157) + unsigned(p_cast_reg_803));
    indvars_iv_next3_fu_673_p2 <= std_logic_vector(unsigned(tmp_9_reg_792) + unsigned(indvars_iv9_reg_137));
    indvars_iv_next4_fu_627_p2 <= std_logic_vector(unsigned(tmp_cast_reg_734) + unsigned(indvars_iv3_reg_232));
    indvars_iv_next5_fu_622_p2 <= std_logic_vector(unsigned(tmp_cast_reg_734) + unsigned(o_count_6_reg_243));
    indvars_iv_next6_fu_668_p2 <= std_logic_vector(unsigned(tmp_9_reg_792) + unsigned(indvars_iv4_reg_147));
    indvars_iv_next_fu_653_p2 <= std_logic_vector(unsigned(tmp_43_cast_reg_771) + unsigned(indvars_iv2_reg_177));
    input_height_cast3_fu_337_p0 <= input_height;
        input_height_cast3_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_height_cast3_fu_337_p0),7));

    input_r_address0 <= tmp_46_fu_578_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_width_cast2_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_373_p1),14));
    input_width_cast_fu_373_p0 <= input_width;
        input_width_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width_cast_fu_373_p0),7));

    o_count_7_fu_647_p2 <= std_logic_vector(unsigned(o_count_5_reg_318) + unsigned(ap_const_lv16_1));
    o_count_8_fu_599_p2 <= std_logic_vector(unsigned(o_count_3_reg_287) + unsigned(ap_const_lv14_1));
    o_count_9_fu_616_p2 <= std_logic_vector(unsigned(o_count_4_reg_308) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_40_fu_522_p1, tmp_47_fu_594_p1, tmp_49_fu_611_p1, tmp_44_fu_642_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address0 <= tmp_44_fu_642_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address0 <= tmp_49_fu_611_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_47_fu_594_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_40_fu_522_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state5, input_load_reg_871, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d0 <= input_load_reg_871;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, exitcond2_fu_516_p2, ap_CS_fsm_state9, ap_CS_fsm_state10, exitcond5_fu_605_p2, ap_CS_fsm_state11, exitcond8_fu_636_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond8_fu_636_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond5_fu_605_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_516_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_487_p2),14));
    tmp1_fu_420_p2 <= std_logic_vector(unsigned(tmp_40_cast7_fu_401_p1) + unsigned(tmp_29_reg_713));
    tmp2_fu_538_p2 <= std_logic_vector(unsigned(tmp_40_cast9_reg_756) + unsigned(o_count_reg_187));
    tmp3_fu_482_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(tmp_29_reg_713));
    tmp_28_fu_327_p0 <= input_width;
    tmp_28_fu_327_p1 <= tmp_28_fu_327_p0(5 - 1 downto 0);
    tmp_29_fu_354_p1 <= tmp_30_fu_348_p2(10 - 1 downto 0);
    tmp_30_fu_348_p0 <= tmp_30_fu_348_p00(5 - 1 downto 0);
    tmp_30_fu_348_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_692),12));
    tmp_30_fu_348_p1 <= tmp_30_fu_348_p10(7 - 1 downto 0);
    tmp_30_fu_348_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height_cast3_fu_337_p1),12));
    tmp_30_fu_348_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_348_p0) * unsigned(tmp_30_fu_348_p1), 12));
    tmp_31_fu_358_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(tmp_28_reg_685));
    tmp_32_fu_407_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(tmp_28_reg_685));
    tmp_33_fu_425_p2 <= std_logic_vector(unsigned(tmp1_fu_420_p2) + unsigned(tmp_41_cast_fu_416_p1));
    tmp_34_fu_435_p1 <= input_width;
    tmp_34_fu_435_p2 <= std_logic_vector(unsigned(tmp_40_cast8_fu_398_p1) + unsigned(tmp_34_fu_435_p1));
    tmp_35_fu_444_p0 <= input_width;
    tmp_35_fu_444_p2 <= std_logic_vector(shift_left(unsigned(tmp_35_fu_444_p0),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    tmp_36_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv6_5) + unsigned(tmp_35_fu_444_p2));
    tmp_37_fu_363_p1 <= tmp_30_fu_348_p2(5 - 1 downto 0);
    tmp_38_fu_478_p1 <= input_depth(6 - 1 downto 0);
    tmp_39_cast1_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_708),16));
    tmp_39_fu_543_p2 <= std_logic_vector(unsigned(tmp2_fu_538_p2) + unsigned(tmp_39_cast1_reg_751));
    tmp_3_fu_487_p2 <= std_logic_vector(unsigned(tmp_48_cast_fu_449_p1) + unsigned(tmp3_fu_482_p2));
    tmp_40_cast7_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_719),10));
    tmp_40_cast8_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_719),6));
    tmp_40_cast9_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_719),16));
    tmp_40_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_719),14));
    tmp_40_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_222),64));
    tmp_41_cast6_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_407_p2),16));
    tmp_41_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_407_p2),10));
    tmp_41_fu_527_p2 <= std_logic_vector(unsigned(o_count_1_reg_222) + unsigned(ap_const_lv16_1));
    tmp_42_fu_568_p2 <= std_logic_vector(unsigned(tmp_39_reg_829) + unsigned(tmp_41_cast6_reg_766));
    tmp_43_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_425_p2),14));
    tmp_43_fu_563_p2 <= std_logic_vector(unsigned(input_width_cast2_reg_741) + unsigned(i_count_1_reg_265));
    tmp_44_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_435_p2),14));
    tmp_44_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_318),64));
    tmp_45_fu_589_p2 <= std_logic_vector(unsigned(tmp_cast_reg_734) + unsigned(o_count_2_reg_254));
    tmp_46_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_298),64));
    tmp_47_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_287),64));
    tmp_48_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_444_p2),10));
    tmp_48_fu_583_p2 <= std_logic_vector(unsigned(i_count_2_reg_298) + unsigned(ap_const_lv14_1));
    tmp_49_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_453_p2),14));
    tmp_49_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_4_reg_308),64));
    tmp_50_fu_512_p1 <= o_count_1_reg_222(5 - 1 downto 0);
    tmp_51_fu_632_p1 <= o_count_5_reg_318(5 - 1 downto 0);
    tmp_6_fu_367_p2 <= std_logic_vector(unsigned(tmp_37_fu_363_p1) + unsigned(tmp_31_fu_358_p2));
    tmp_7_fu_463_p2 <= std_logic_vector(unsigned(tmp_28_reg_685) + unsigned(tmp_6_reg_728));
    tmp_8_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(tmp_7_fu_463_p2));
    tmp_9_fu_473_p2 <= std_logic_vector(unsigned(tmp_6_reg_728) + unsigned(tmp_32_fu_407_p2));
    tmp_cast_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_692),14));
    tmp_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(tmp_28_fu_327_p1));
    tmp_s_fu_386_p0 <= tmp_s_fu_386_p00(7 - 1 downto 0);
    tmp_s_fu_386_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_373_p1),14));
    tmp_s_fu_386_p1 <= tmp_s_fu_386_p10(7 - 1 downto 0);
    tmp_s_fu_386_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height_cast3_reg_703),14));
    tmp_s_fu_386_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_386_p0) * unsigned(tmp_s_fu_386_p1), 14));
end behav;
