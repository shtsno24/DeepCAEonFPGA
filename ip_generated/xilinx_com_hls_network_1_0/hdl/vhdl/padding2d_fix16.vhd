-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (6 downto 0);
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_height_cast3_fu_328_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_height_cast3_reg_693 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_332_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_28_reg_698 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_704 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_30_fu_350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_reg_709 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_356_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_reg_714 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_fu_360_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_31_reg_720 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_37_fu_366_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_37_reg_730 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_373_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_reg_735 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal input_width_cast2_fu_376_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_width_cast2_reg_742 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_383_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_747 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_cast1_fu_389_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_cast1_reg_752 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_cast9_fu_392_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_cast9_reg_757 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_cast_fu_401_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_41_cast6_fu_409_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_cast6_reg_767 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_cast_fu_428_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_cast_reg_772 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_cast_fu_437_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_49_cast_fu_456_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_469_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_475_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_reg_793 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_38_fu_481_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_reg_799 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast_fu_496_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast_reg_804 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_1_fu_509_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth_1_reg_812 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_41_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_3_fu_536_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_3_reg_825 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_reg_830 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_1_fu_560_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_1_reg_839 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_43_fu_566_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_reg_844 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond7_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_reg_849 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_586_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_48_reg_862 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_fu_592_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_45_reg_867 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_8_fu_602_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal o_count_9_fu_619_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond5_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next5_fu_625_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next4_fu_630_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_7_fu_650_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond8_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next_fu_656_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next1_fu_661_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next2_fu_666_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_next6_fu_671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_next3_fu_676_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv9_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv4_reg_148 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv1_reg_158 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv_reg_168 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv2_reg_178 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_reg_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_count_reg_200 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_reg_212 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_1_reg_223 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv3_reg_233 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_6_reg_244 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_2_reg_255 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_1_reg_266 : STD_LOGIC_VECTOR (13 downto 0);
    signal height_reg_277 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_3_reg_288 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_2_reg_299 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_4_reg_309 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_5_reg_319 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_height_cast3_fu_328_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_28_fu_332_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_fu_350_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_30_fu_350_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_width_cast_fu_370_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_width_cast_fu_370_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_383_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_383_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_32_fu_404_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_cast7_fu_398_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_417_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_41_cast_fu_413_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_33_fu_422_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_40_cast8_fu_395_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_432_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_fu_432_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_441_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_fu_441_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_36_fu_450_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_460_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_48_cast_fu_446_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_485_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal depth_cast_fu_500_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_fu_515_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_541_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_cast_fu_551_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond7_fu_555_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_fu_635_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_fu_350_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_fu_350_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_383_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_383_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    depth_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                depth_reg_212 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then 
                depth_reg_212 <= depth_1_reg_812;
            end if; 
        end if;
    end process;

    height_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_1))) then 
                height_reg_277 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_608_p2 = ap_const_lv1_1))) then 
                height_reg_277 <= height_1_reg_839;
            end if; 
        end if;
    end process;

    i_count_1_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_1))) then 
                i_count_1_reg_266 <= i_count_reg_200;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_608_p2 = ap_const_lv1_1))) then 
                i_count_1_reg_266 <= tmp_43_reg_844;
            end if; 
        end if;
    end process;

    i_count_2_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_count_2_reg_299 <= tmp_48_reg_862;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond7_fu_555_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_299 <= i_count_1_reg_266;
            end if; 
        end if;
    end process;

    i_count_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_count_reg_200 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then 
                i_count_reg_200 <= i_count_3_reg_825;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv1_reg_158 <= tmp_49_cast_fu_456_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then 
                indvars_iv1_reg_158 <= indvars_iv_next2_fu_666_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv2_reg_178 <= tmp_40_cast_fu_401_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then 
                indvars_iv2_reg_178 <= indvars_iv_next_fu_656_p2;
            end if; 
        end if;
    end process;

    indvars_iv3_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_1))) then 
                indvars_iv3_reg_233 <= indvars_iv1_reg_158;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_608_p2 = ap_const_lv1_1))) then 
                indvars_iv3_reg_233 <= indvars_iv_next4_fu_630_p2;
            end if; 
        end if;
    end process;

    indvars_iv4_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv4_reg_148 <= tmp_8_fu_469_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then 
                indvars_iv4_reg_148 <= indvars_iv_next6_fu_671_p2;
            end if; 
        end if;
    end process;

    indvars_iv9_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv9_reg_138 <= tmp_31_reg_720;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then 
                indvars_iv9_reg_138 <= indvars_iv_next3_fu_676_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv_reg_168 <= tmp_44_cast_fu_437_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_168 <= indvars_iv_next1_fu_661_p2;
            end if; 
        end if;
    end process;

    o_count_1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_504_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_223 <= o_count_reg_188;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_223 <= tmp_41_fu_530_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_1))) then 
                o_count_2_reg_255 <= indvars_iv2_reg_178;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_608_p2 = ap_const_lv1_1))) then 
                o_count_2_reg_255 <= tmp_45_reg_867;
            end if; 
        end if;
    end process;

    o_count_3_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                o_count_3_reg_288 <= o_count_8_fu_602_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond7_fu_555_p2 = ap_const_lv1_0))) then 
                o_count_3_reg_288 <= o_count_2_reg_255;
            end if; 
        end if;
    end process;

    o_count_4_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_608_p2 = ap_const_lv1_0))) then 
                o_count_4_reg_309 <= o_count_9_fu_619_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_575_p2 = ap_const_lv1_1))) then 
                o_count_4_reg_309 <= o_count_6_reg_244;
            end if; 
        end if;
    end process;

    o_count_5_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_0))) then 
                o_count_5_reg_319 <= o_count_7_fu_650_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond7_fu_555_p2 = ap_const_lv1_1))) then 
                o_count_5_reg_319 <= tmp_39_reg_830;
            end if; 
        end if;
    end process;

    o_count_6_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_1))) then 
                o_count_6_reg_244 <= indvars_iv_reg_168;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_608_p2 = ap_const_lv1_1))) then 
                o_count_6_reg_244 <= indvars_iv_next5_fu_625_p2;
            end if; 
        end if;
    end process;

    o_count_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                o_count_reg_188 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then 
                o_count_reg_188 <= tmp_42_reg_849;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                depth_1_reg_812 <= depth_1_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                height_1_reg_839 <= height_1_fu_560_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_1))) then
                i_count_3_reg_825 <= i_count_3_fu_536_p2;
                tmp_39_reg_830 <= tmp_39_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                input_height_cast3_reg_693 <= input_height_cast3_fu_328_p1;
                tmp_28_reg_698 <= tmp_28_fu_332_p1;
                tmp_29_reg_714 <= tmp_29_fu_356_p1;
                tmp_30_reg_709 <= tmp_30_fu_350_p2;
                tmp_31_reg_720 <= tmp_31_fu_360_p2;
                tmp_37_reg_730 <= tmp_37_fu_366_p1;
                tmp_reg_704 <= tmp_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    input_width_cast2_reg_742(6 downto 0) <= input_width_cast2_fu_376_p1(6 downto 0);
                    p_cast_reg_804(9 downto 0) <= p_cast_fu_496_p1(9 downto 0);
                tmp_38_reg_799 <= tmp_38_fu_481_p1;
                    tmp_39_cast1_reg_752(11 downto 0) <= tmp_39_cast1_fu_389_p1(11 downto 0);
                    tmp_40_cast9_reg_757(4 downto 0) <= tmp_40_cast9_fu_392_p1(4 downto 0);
                    tmp_41_cast6_reg_767(4 downto 0) <= tmp_41_cast6_fu_409_p1(4 downto 0);
                    tmp_43_cast_reg_772(9 downto 0) <= tmp_43_cast_fu_428_p1(9 downto 0);
                tmp_9_reg_793 <= tmp_9_fu_475_p2;
                    tmp_cast_reg_735(4 downto 0) <= tmp_cast_fu_373_p1(4 downto 0);
                tmp_s_reg_747 <= tmp_s_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond7_fu_555_p2 = ap_const_lv1_1))) then
                tmp_42_reg_849 <= tmp_42_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond7_fu_555_p2 = ap_const_lv1_0))) then
                tmp_43_reg_844 <= tmp_43_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_575_p2 = ap_const_lv1_1))) then
                tmp_45_reg_867 <= tmp_45_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_575_p2 = ap_const_lv1_0))) then
                tmp_48_reg_862 <= tmp_48_fu_586_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_735(13 downto 5) <= "000000000";
    input_width_cast2_reg_742(13 downto 7) <= "0000000";
    tmp_39_cast1_reg_752(15 downto 12) <= "0000";
    tmp_40_cast9_reg_757(15 downto 5) <= "00000000000";
    tmp_41_cast6_reg_767(15 downto 5) <= "00000000000";
    tmp_43_cast_reg_772(13 downto 10) <= "0000";
    p_cast_reg_804(13 downto 10) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_519_p2, ap_CS_fsm_state5, exitcond7_fu_555_p2, ap_CS_fsm_state6, exitcond_fu_575_p2, ap_CS_fsm_state8, exitcond5_fu_608_p2, ap_CS_fsm_state9, exitcond8_fu_639_p2, exitcond1_fu_504_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_504_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond7_fu_555_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_575_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_608_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond1_fu_504_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_504_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, exitcond1_fu_504_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond1_fu_504_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_1_fu_509_p2 <= std_logic_vector(unsigned(depth_reg_212) + unsigned(ap_const_lv5_1));
    depth_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(depth_reg_212),6));
    exitcond1_fu_504_p2 <= "1" when (depth_cast_fu_500_p1 = tmp_38_reg_799) else "0";
    exitcond2_fu_519_p2 <= "1" when (tmp_50_fu_515_p1 = indvars_iv9_reg_138) else "0";
    exitcond5_fu_608_p2 <= "1" when (o_count_4_reg_309 = indvars_iv3_reg_233) else "0";
    exitcond7_fu_555_p1 <= input_height;
    exitcond7_fu_555_p2 <= "1" when (height_cast_fu_551_p1 = exitcond7_fu_555_p1) else "0";
    exitcond8_fu_639_p2 <= "1" when (tmp_51_fu_635_p1 = indvars_iv4_reg_148) else "0";
    exitcond_fu_575_p2 <= "1" when (o_count_3_reg_288 = o_count_6_reg_244) else "0";
    height_1_fu_560_p2 <= std_logic_vector(unsigned(height_reg_277) + unsigned(ap_const_lv5_1));
    height_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_reg_277),6));
    i_count_3_fu_536_p2 <= std_logic_vector(unsigned(tmp_s_reg_747) + unsigned(i_count_reg_200));
    indvars_iv_next1_fu_661_p2 <= std_logic_vector(unsigned(tmp_43_cast_reg_772) + unsigned(indvars_iv_reg_168));
    indvars_iv_next2_fu_666_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_158) + unsigned(p_cast_reg_804));
    indvars_iv_next3_fu_676_p2 <= std_logic_vector(unsigned(tmp_9_reg_793) + unsigned(indvars_iv9_reg_138));
    indvars_iv_next4_fu_630_p2 <= std_logic_vector(unsigned(tmp_cast_reg_735) + unsigned(indvars_iv3_reg_233));
    indvars_iv_next5_fu_625_p2 <= std_logic_vector(unsigned(tmp_cast_reg_735) + unsigned(o_count_6_reg_244));
    indvars_iv_next6_fu_671_p2 <= std_logic_vector(unsigned(tmp_9_reg_793) + unsigned(indvars_iv4_reg_148));
    indvars_iv_next_fu_656_p2 <= std_logic_vector(unsigned(tmp_43_cast_reg_772) + unsigned(indvars_iv2_reg_178));
    input_height_cast3_fu_328_p0 <= input_height;
        input_height_cast3_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_height_cast3_fu_328_p0),7));

    input_r_address0 <= tmp_46_fu_581_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_width_cast2_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_370_p1),14));
    input_width_cast_fu_370_p0 <= input_width;
        input_width_cast_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width_cast_fu_370_p0),7));

    o_count_7_fu_650_p2 <= std_logic_vector(unsigned(o_count_5_reg_319) + unsigned(ap_const_lv16_1));
    o_count_8_fu_602_p2 <= std_logic_vector(unsigned(o_count_3_reg_288) + unsigned(ap_const_lv14_1));
    o_count_9_fu_619_p2 <= std_logic_vector(unsigned(o_count_4_reg_309) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_40_fu_525_p1, tmp_47_fu_597_p1, tmp_49_fu_614_p1, tmp_44_fu_645_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_44_fu_645_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= tmp_49_fu_614_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= tmp_47_fu_597_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= tmp_40_fu_525_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_d0 <= input_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state4, exitcond2_fu_519_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, exitcond5_fu_608_p2, ap_CS_fsm_state9, exitcond8_fu_639_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond8_fu_639_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond5_fu_608_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_519_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_490_p2),14));
    tmp1_fu_417_p2 <= std_logic_vector(unsigned(tmp_40_cast7_fu_398_p1) + unsigned(tmp_29_reg_714));
    tmp2_fu_541_p2 <= std_logic_vector(unsigned(tmp_40_cast9_reg_757) + unsigned(o_count_reg_188));
    tmp3_fu_485_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(tmp_29_reg_714));
    tmp_28_fu_332_p0 <= input_width;
    tmp_28_fu_332_p1 <= tmp_28_fu_332_p0(5 - 1 downto 0);
    tmp_29_fu_356_p1 <= tmp_30_fu_350_p2(10 - 1 downto 0);
    tmp_30_fu_350_p0 <= tmp_30_fu_350_p00(5 - 1 downto 0);
    tmp_30_fu_350_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_336_p2),12));
    tmp_30_fu_350_p1 <= tmp_30_fu_350_p10(7 - 1 downto 0);
    tmp_30_fu_350_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height_cast3_fu_328_p1),12));
    tmp_30_fu_350_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_350_p0) * unsigned(tmp_30_fu_350_p1), 12));
    tmp_31_fu_360_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(tmp_28_fu_332_p1));
    tmp_32_fu_404_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(tmp_28_reg_698));
    tmp_33_fu_422_p2 <= std_logic_vector(unsigned(tmp1_fu_417_p2) + unsigned(tmp_41_cast_fu_413_p1));
    tmp_34_fu_432_p1 <= input_width;
    tmp_34_fu_432_p2 <= std_logic_vector(unsigned(tmp_40_cast8_fu_395_p1) + unsigned(tmp_34_fu_432_p1));
    tmp_35_fu_441_p0 <= input_width;
    tmp_35_fu_441_p2 <= std_logic_vector(shift_left(unsigned(tmp_35_fu_441_p0),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    tmp_36_fu_450_p2 <= std_logic_vector(unsigned(ap_const_lv6_5) + unsigned(tmp_35_fu_441_p2));
    tmp_37_fu_366_p1 <= tmp_30_fu_350_p2(5 - 1 downto 0);
    tmp_38_fu_481_p1 <= input_depth(6 - 1 downto 0);
    tmp_39_cast1_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_reg_709),16));
    tmp_39_fu_546_p2 <= std_logic_vector(unsigned(tmp2_fu_541_p2) + unsigned(tmp_39_cast1_reg_752));
    tmp_3_fu_490_p2 <= std_logic_vector(unsigned(tmp_48_cast_fu_446_p1) + unsigned(tmp3_fu_485_p2));
    tmp_40_cast7_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_720),10));
    tmp_40_cast8_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_720),6));
    tmp_40_cast9_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_720),16));
    tmp_40_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_reg_720),14));
    tmp_40_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_223),64));
    tmp_41_cast6_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_404_p2),16));
    tmp_41_cast_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_404_p2),10));
    tmp_41_fu_530_p2 <= std_logic_vector(unsigned(o_count_1_reg_223) + unsigned(ap_const_lv16_1));
    tmp_42_fu_571_p2 <= std_logic_vector(unsigned(tmp_39_reg_830) + unsigned(tmp_41_cast6_reg_767));
    tmp_43_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_422_p2),14));
    tmp_43_fu_566_p2 <= std_logic_vector(unsigned(input_width_cast2_reg_742) + unsigned(i_count_1_reg_266));
    tmp_44_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_432_p2),14));
    tmp_44_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_319),64));
    tmp_45_fu_592_p2 <= std_logic_vector(unsigned(tmp_cast_reg_735) + unsigned(o_count_2_reg_255));
    tmp_46_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_299),64));
    tmp_47_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_288),64));
    tmp_48_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_441_p2),10));
    tmp_48_fu_586_p2 <= std_logic_vector(unsigned(i_count_2_reg_299) + unsigned(ap_const_lv14_1));
    tmp_49_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_450_p2),14));
    tmp_49_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_4_reg_309),64));
    tmp_50_fu_515_p1 <= o_count_1_reg_223(5 - 1 downto 0);
    tmp_51_fu_635_p1 <= o_count_5_reg_319(5 - 1 downto 0);
    tmp_6_fu_460_p2 <= std_logic_vector(unsigned(tmp_37_reg_730) + unsigned(tmp_31_reg_720));
    tmp_7_fu_464_p2 <= std_logic_vector(unsigned(tmp_28_reg_698) + unsigned(tmp_6_fu_460_p2));
    tmp_8_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(tmp_7_fu_464_p2));
    tmp_9_fu_475_p2 <= std_logic_vector(unsigned(tmp_6_fu_460_p2) + unsigned(tmp_32_fu_404_p2));
    tmp_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_704),14));
    tmp_fu_336_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(tmp_28_fu_332_p1));
    tmp_s_fu_383_p0 <= tmp_s_fu_383_p00(7 - 1 downto 0);
    tmp_s_fu_383_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_370_p1),14));
    tmp_s_fu_383_p1 <= tmp_s_fu_383_p10(7 - 1 downto 0);
    tmp_s_fu_383_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height_cast3_reg_693),14));
    tmp_s_fu_383_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_383_p0) * unsigned(tmp_s_fu_383_p1), 14));
end behav;
