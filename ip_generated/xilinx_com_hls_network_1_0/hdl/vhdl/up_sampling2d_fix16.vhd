-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity up_sampling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (4 downto 0);
    input_width : IN STD_LOGIC_VECTOR (4 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of up_sampling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln17_fu_158_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln17_reg_314 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln17_1_fu_162_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln17_1_reg_319 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln17_3_cast_fu_166_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln17_3_cast_reg_324 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_170_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_329 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_11_fu_174_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_11_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_12_fu_178_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_12_reg_339 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_13_fu_182_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_13_reg_344 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul5_fu_186_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul5_reg_349 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_191_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_354 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_d_fu_201_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_362 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_fu_212_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_370 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp1_cast_fu_246_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_cast_reg_375 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln14_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_261_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_reg_380 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_fu_271_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_388 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln15_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln17_1_fu_305_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln17_1_reg_398 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_0_reg_101 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_112 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul4_reg_124 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_0_reg_136 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_0_reg_147 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln17_4_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln17_6_fu_310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln_fu_218_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln17_2_fu_228_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_246_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_246_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln17_6_cast_fu_232_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_251_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_261_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_261_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln17_1_fu_277_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln17_3_fu_287_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln17_fu_291_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln17_5_fu_301_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_cast_fu_246_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_261_p00 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_0_reg_101 <= out_d_reg_362;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_101 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_0_reg_136 <= ap_const_lv5_0;
            elsif (((icmp_ln15_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_h_0_reg_136 <= out_h_reg_370;
            end if; 
        end if;
    end process;

    out_w_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_207_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_0_reg_147 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_w_0_reg_147 <= out_w_reg_388;
            end if; 
        end if;
    end process;

    phi_mul4_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul4_reg_124 <= next_mul5_reg_349;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul4_reg_124 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_112 <= next_mul_reg_354;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_112 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln17_1_reg_398 <= add_ln17_1_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_11_reg_334 <= empty_11_fu_174_p1;
                empty_12_reg_339 <= empty_12_fu_178_p1;
                    empty_13_reg_344(4 downto 0) <= empty_13_fu_182_p1(4 downto 0);
                empty_reg_329 <= empty_fu_170_p1;
                    zext_ln17_1_reg_319(5 downto 0) <= zext_ln17_1_fu_162_p1(5 downto 0);
                    zext_ln17_3_cast_reg_324(5 downto 0) <= zext_ln17_3_cast_fu_166_p1(5 downto 0);
                    zext_ln17_reg_314(4 downto 0) <= zext_ln17_fu_158_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul5_reg_349 <= next_mul5_fu_186_p2;
                next_mul_reg_354 <= next_mul_fu_191_p2;
                out_d_reg_362 <= out_d_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_reg_370 <= out_h_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_reg_388 <= out_w_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_207_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp1_cast_reg_375 <= tmp1_cast_fu_246_p2;
                tmp3_reg_380 <= tmp3_fu_261_p2;
            end if;
        end if;
    end process;
    zext_ln17_reg_314(7 downto 5) <= "000";
    zext_ln17_1_reg_319(8 downto 6) <= "000";
    zext_ln17_3_cast_reg_324(13 downto 6) <= "00000000";
    empty_13_reg_344(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln14_fu_207_p2, ap_CS_fsm_state4, icmp_ln15_fu_266_p2, icmp_ln13_fu_196_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_196_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln14_fu_207_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln15_fu_266_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln17_1_fu_305_p2 <= std_logic_vector(unsigned(zext_ln17_5_fu_301_p1) + unsigned(tmp3_reg_380));
    add_ln17_fu_291_p2 <= std_logic_vector(unsigned(zext_ln17_3_fu_287_p1) + unsigned(tmp1_cast_reg_375));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln13_fu_196_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_196_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln13_fu_196_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln13_fu_196_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_11_fu_174_p1 <= output_height(5 - 1 downto 0);
    empty_12_fu_178_p1 <= output_depth(5 - 1 downto 0);
    empty_13_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),12));
    empty_fu_170_p1 <= output_width(5 - 1 downto 0);
    icmp_ln13_fu_196_p2 <= "1" when (out_d_0_reg_101 = empty_12_reg_339) else "0";
    icmp_ln14_fu_207_p2 <= "1" when (out_h_0_reg_136 = empty_11_reg_334) else "0";
    icmp_ln15_fu_266_p2 <= "1" when (out_w_0_reg_147 = empty_reg_329) else "0";
    input_r_address0 <= zext_ln17_4_fu_296_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln17_1_fu_277_p4 <= out_w_0_reg_147(4 downto 1);
    lshr_ln_fu_218_p4 <= out_h_0_reg_136(4 downto 1);
    next_mul5_fu_186_p2 <= std_logic_vector(unsigned(phi_mul4_reg_124) + unsigned(zext_ln17_1_reg_319));
    next_mul_fu_191_p2 <= std_logic_vector(unsigned(phi_mul_reg_112) + unsigned(zext_ln17_reg_314));
    out_d_fu_201_p2 <= std_logic_vector(unsigned(out_d_0_reg_101) + unsigned(ap_const_lv5_1));
    out_h_fu_212_p2 <= std_logic_vector(unsigned(out_h_0_reg_136) + unsigned(ap_const_lv5_1));
    out_w_fu_271_p2 <= std_logic_vector(unsigned(out_w_0_reg_147) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln17_6_fu_310_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= input_r_q0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_246_p0 <= tmp1_cast_fu_246_p00(8 - 1 downto 0);
    tmp1_cast_fu_246_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_236_p2),12));
    tmp1_cast_fu_246_p1 <= empty_13_reg_344(5 - 1 downto 0);
    tmp1_cast_fu_246_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_cast_fu_246_p0) * unsigned(tmp1_cast_fu_246_p1), 12));
    tmp2_fu_251_p2 <= std_logic_vector(unsigned(phi_mul4_reg_124) + unsigned(zext_ln17_6_cast_fu_232_p1));
    tmp3_fu_261_p0 <= tmp3_fu_261_p00(9 - 1 downto 0);
    tmp3_fu_261_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_251_p2),14));
    tmp3_fu_261_p1 <= zext_ln17_3_cast_reg_324(6 - 1 downto 0);
    tmp3_fu_261_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_261_p0) * unsigned(tmp3_fu_261_p1), 14));
    tmp_fu_236_p2 <= std_logic_vector(unsigned(phi_mul_reg_112) + unsigned(zext_ln17_2_fu_228_p1));
    zext_ln17_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
    zext_ln17_2_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_218_p4),8));
    zext_ln17_3_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln17_3_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln17_1_fu_277_p4),12));
    zext_ln17_4_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_fu_291_p2),64));
    zext_ln17_5_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_147),14));
    zext_ln17_6_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_136),9));
    zext_ln17_6_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln17_1_reg_398),64));
    zext_ln17_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),8));
end behav;
