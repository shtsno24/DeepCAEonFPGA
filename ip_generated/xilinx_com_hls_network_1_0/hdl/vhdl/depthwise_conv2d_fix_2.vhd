-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce1 : OUT STD_LOGIC;
    kernel_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_394 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal reg_399 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal output_width_cast_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast_reg_1271 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_fu_411_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln28_reg_1277 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_1_fu_415_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln36_1_reg_1282 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln36_fu_419_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_reg_1289 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_1_cast_cas_fu_423_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln36_1_cast_cas_reg_1294 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_fu_427_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1299 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln19_fu_431_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_reg_1304 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln19_98_fu_436_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_98_reg_1309 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_447_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1317 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_addr_reg_1322 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_478_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_reg_1327 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_reg_1340 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_0_addr_1_reg_1345 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_2_reg_1350 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_3_reg_1355 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_4_reg_1360 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_5_reg_1365 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_6_reg_1370 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_7_reg_1375 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_8_reg_1380 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_fu_573_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1388 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_0_0_0_fu_583_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_0_reg_1393 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln20_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_0_1_0_fu_589_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_1_0_reg_1398 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_2_0_fu_595_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_2_0_reg_1403 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_0_fu_601_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_0_reg_1408 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_0_cast_fu_615_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_0_0_cast_reg_1413 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp5_0_1_0_cast_fu_627_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_1_0_cast_reg_1422 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_0_cast_fu_639_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_0_cast_reg_1431 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_0_cast_fu_651_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_0_cast_reg_1440 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln21_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln28_12_fu_660_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_12_reg_1450 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_9_fu_664_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_9_reg_1457 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_11_fu_669_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_11_reg_1462 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln28_14_fu_685_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_14_reg_1474 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_10_fu_689_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_10_reg_1483 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_12_fu_694_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_12_reg_1488 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln21_1_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_1493 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_load_reg_1497 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_13_fu_711_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_13_reg_1512 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_14_fu_715_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_14_reg_1517 : STD_LOGIC_VECTOR (16 downto 0);
    signal kernel_0_load_1_reg_1522 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_195_reg_1527 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_2_reg_1532 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_15_fu_727_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_15_reg_1547 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_16_fu_731_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_16_reg_1552 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_load_196_reg_1557 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal kernel_0_load_3_reg_1562 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_197_reg_1567 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_4_reg_1572 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_17_fu_743_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_17_reg_1587 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_18_fu_747_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_18_reg_1592 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_load_198_reg_1597 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal kernel_0_load_5_reg_1602 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_199_reg_1607 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_6_reg_1612 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_200_reg_1627 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal kernel_0_load_7_reg_1632 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_201_reg_1637 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_8_reg_1642 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln28_13_fu_762_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_13_reg_1652 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_14_fu_765_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_14_reg_1658 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_15_fu_768_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_15_reg_1664 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_17_fu_774_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_17_reg_1675 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sext_ln28_1_fu_781_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_1_reg_1686 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_2_fu_784_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_2_reg_1692 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_3_fu_788_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_3_reg_1698 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_5_fu_794_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_5_reg_1709 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_7_fu_800_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_7_reg_1720 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_8_fu_803_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_8_reg_1726 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_9_fu_806_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_9_reg_1732 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_11_fu_812_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_11_reg_1743 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1175_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_6_reg_1749 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_1181_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_7_reg_1754 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1187_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_8_reg_1759 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_load_reg_1764 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_1193_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_reg_1770 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1199_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_1_reg_1775 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1205_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_2_reg_1780 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1211_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_3_reg_1785 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1217_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_4_reg_1790 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1223_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_5_reg_1795 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_25_fu_848_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_25_reg_1800 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_19_fu_908_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_19_reg_1805 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln28_21_fu_919_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_21_reg_1810 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_26_fu_931_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_26_reg_1815 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_27_fu_940_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_27_reg_1820 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln36_fu_945_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_reg_1825 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_28_fu_953_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_28_reg_1830 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln28_30_fu_958_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_30_reg_1837 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_1_fu_963_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_1_reg_1844 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln21_fu_967_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_reg_1849 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_29_fu_973_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_29_reg_1854 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln28_31_fu_977_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_31_reg_1859 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1229_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_9_reg_1864 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_1233_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_12_reg_1879 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_32_fu_989_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_32_reg_1884 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_33_fu_993_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_33_reg_1889 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1237_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_15_reg_1894 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_34_fu_997_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_34_reg_1899 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_35_fu_1001_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_35_reg_1904 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_11_reg_1909 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_14_reg_1924 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_36_fu_1040_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_36_reg_1929 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1241_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_10_reg_1964 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_1246_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_11_reg_1969 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1251_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_13_reg_1984 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_1256_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_14_reg_1989 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_38_fu_1100_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_38_reg_1994 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_12_reg_1999 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal trunc_ln28_13_reg_2004 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1261_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_16_reg_2009 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1266_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_17_reg_2014 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_42_fu_1148_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_42_reg_2019 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal add_ln28_43_fu_1157_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_43_reg_2024 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln28_44_fu_1166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_44_reg_2029 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal out_d_0_reg_336 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_347 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_359 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_0_reg_371 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_0_reg_382 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal zext_ln23_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_4_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_5_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_6_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_7_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_8_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_9_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_10_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_11_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_13_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_15_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_16_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_17_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_18_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_19_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_20_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_21_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_22_fu_755_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_23_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_24_fu_985_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_25_fu_1023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_26_fu_1027_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_27_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_28_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_3_fu_1171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_width_cast_fu_403_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln28_fu_462_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_466_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_1_fu_458_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_2_fu_474_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_1_fu_488_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_2_fu_498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_3_fu_508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_4_fu_518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_5_fu_528_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_6_fu_538_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_7_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_8_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_3_cast_fu_579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_0_fu_610_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_0_fu_610_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_0_fu_610_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_1_0_fu_622_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_1_0_fu_622_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_1_0_fu_622_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_2_0_fu_634_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_2_0_fu_634_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_2_0_fu_634_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_0_fu_646_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp7_0_fu_646_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_0_fu_646_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln28_fu_679_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_6_fu_824_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_7_fu_833_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_24_fu_842_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_5_fu_815_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_854_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_1_fu_872_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_2_fu_881_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_20_fu_913_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_s_fu_863_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_3_fu_890_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_4_fu_899_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_23_fu_925_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_22_fu_936_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_8_fu_1005_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_10_fu_1086_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_37_fu_1095_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_9_fu_1077_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_15_fu_1124_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_16_fu_1133_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_41_fu_1142_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_40_fu_1153_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_39_fu_1162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1229_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1229_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1233_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1233_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1237_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1237_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1241_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1246_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1251_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1256_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1261_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1266_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp5_0_0_0_fu_610_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_1_0_fu_622_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_2_0_fu_634_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_0_fu_646_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component network_mul_mul_16s_16s_30_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_3_1_U59 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_6_reg_1612,
        din1 => input_load_199_reg_1607,
        ce => ap_const_logic_1,
        dout => grp_fu_1175_p2);

    network_mul_mul_16s_16s_30_3_1_U60 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_7_reg_1632,
        din1 => input_load_200_reg_1627,
        ce => ap_const_logic_1,
        dout => grp_fu_1181_p2);

    network_mul_mul_16s_16s_30_3_1_U61 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_8_reg_1642,
        din1 => input_load_201_reg_1637,
        ce => ap_const_logic_1,
        dout => grp_fu_1187_p2);

    network_mul_mul_16s_16s_30_3_1_U62 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_reg_1497,
        din1 => reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_1193_p2);

    network_mul_mul_16s_16s_30_3_1_U63 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_1_reg_1522,
        din1 => reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_1199_p2);

    network_mul_mul_16s_16s_30_3_1_U64 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_2_reg_1532,
        din1 => input_load_195_reg_1527,
        ce => ap_const_logic_1,
        dout => grp_fu_1205_p2);

    network_mul_mul_16s_16s_30_3_1_U65 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_3_reg_1562,
        din1 => input_load_196_reg_1557,
        ce => ap_const_logic_1,
        dout => grp_fu_1211_p2);

    network_mul_mul_16s_16s_30_3_1_U66 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_4_reg_1572,
        din1 => input_load_197_reg_1567,
        ce => ap_const_logic_1,
        dout => grp_fu_1217_p2);

    network_mul_mul_16s_16s_30_3_1_U67 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_5_reg_1602,
        din1 => input_load_198_reg_1597,
        ce => ap_const_logic_1,
        dout => grp_fu_1223_p2);

    network_mul_mul_16s_16s_30_3_1_U68 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1229_p0,
        din1 => grp_fu_1229_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1229_p2);

    network_mul_mul_16s_16s_30_3_1_U69 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1233_p0,
        din1 => grp_fu_1233_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1233_p2);

    network_mul_mul_16s_16s_30_3_1_U70 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1237_p0,
        din1 => grp_fu_1237_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1237_p2);

    network_mul_mul_16s_16s_30_3_1_U71 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1241_p0,
        din1 => reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_1241_p2);

    network_mul_mul_16s_16s_30_3_1_U72 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1246_p0,
        din1 => reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_1246_p2);

    network_mul_mul_16s_16s_30_3_1_U73 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1251_p0,
        din1 => reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_1251_p2);

    network_mul_mul_16s_16s_30_3_1_U74 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1256_p0,
        din1 => reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_1256_p2);

    network_mul_mul_16s_16s_30_3_1_U75 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1261_p0,
        din1 => reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_1261_p2);

    network_mul_mul_16s_16s_30_3_1_U76 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1266_p0,
        din1 => reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_1266_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_0_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln20_fu_568_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_336 <= out_d_reg_1317;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_0_reg_336 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_0_reg_371 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln21_1_reg_1493 = ap_const_lv1_1) or (icmp_ln21_reg_1446 = ap_const_lv1_1)))) then 
                out_h_0_reg_371 <= out_h_reg_1388;
            end if; 
        end if;
    end process;

    out_w_0_0_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_w_0_0_reg_382 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                out_w_0_0_reg_382 <= add_ln21_reg_1849;
            end if; 
        end if;
    end process;

    phi_mul2_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln20_fu_568_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_359 <= add_ln19_reg_1304;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_359 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln20_fu_568_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_347 <= add_ln19_98_reg_1309;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_347 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                reg_394 <= input_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_394 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln19_98_reg_1309 <= add_ln19_98_fu_436_p2;
                add_ln19_reg_1304 <= add_ln19_fu_431_p2;
                out_d_reg_1317 <= out_d_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln21_1_reg_1493 = ap_const_lv1_0) and (icmp_ln21_reg_1446 = ap_const_lv1_0))) then
                add_ln21_reg_1849 <= add_ln21_fu_967_p2;
                    add_ln28_28_reg_1830(16 downto 1) <= add_ln28_28_fu_953_p2(16 downto 1);
                    add_ln28_30_reg_1837(16 downto 1) <= add_ln28_30_fu_958_p2(16 downto 1);
                add_ln36_1_reg_1844 <= add_ln36_1_fu_963_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln28_10_reg_1483 <= add_ln28_10_fu_689_p2;
                add_ln28_12_reg_1488 <= add_ln28_12_fu_694_p2;
                icmp_ln21_1_reg_1493 <= icmp_ln21_1_fu_698_p2;
                    zext_ln28_14_reg_1474(15 downto 1) <= zext_ln28_14_fu_685_p1(15 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_655_p2 = ap_const_lv1_0))) then
                add_ln28_11_reg_1462 <= add_ln28_11_fu_669_p2;
                add_ln28_9_reg_1457 <= add_ln28_9_fu_664_p2;
                    zext_ln28_12_reg_1450(15 downto 0) <= zext_ln28_12_fu_660_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln28_13_reg_1512 <= add_ln28_13_fu_711_p2;
                add_ln28_14_reg_1517 <= add_ln28_14_fu_715_p2;
                kernel_0_load_reg_1497 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln28_15_reg_1547 <= add_ln28_15_fu_727_p2;
                add_ln28_16_reg_1552 <= add_ln28_16_fu_731_p2;
                input_load_195_reg_1527 <= input_r_q1;
                kernel_0_load_1_reg_1522 <= kernel_0_q0;
                kernel_0_load_2_reg_1532 <= kernel_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln28_17_reg_1587 <= add_ln28_17_fu_743_p2;
                add_ln28_18_reg_1592 <= add_ln28_18_fu_747_p2;
                input_load_196_reg_1557 <= input_r_q1;
                input_load_197_reg_1567 <= input_r_q0;
                kernel_0_load_3_reg_1562 <= kernel_0_q1;
                kernel_0_load_4_reg_1572 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln28_19_reg_1805 <= add_ln28_19_fu_908_p2;
                add_ln28_21_reg_1810 <= add_ln28_21_fu_919_p2;
                add_ln28_26_reg_1815 <= add_ln28_26_fu_931_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln28_25_reg_1800 <= add_ln28_25_fu_848_p2;
                bias_load_reg_1764 <= bias_q0;
                mul_ln28_1_reg_1775 <= grp_fu_1199_p2;
                mul_ln28_2_reg_1780 <= grp_fu_1205_p2;
                mul_ln28_3_reg_1785 <= grp_fu_1211_p2;
                mul_ln28_4_reg_1790 <= grp_fu_1217_p2;
                mul_ln28_5_reg_1795 <= grp_fu_1223_p2;
                mul_ln28_reg_1770 <= grp_fu_1193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln28_27_reg_1820 <= add_ln28_27_fu_940_p2;
                add_ln36_reg_1825 <= add_ln36_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln28_29_reg_1854 <= add_ln28_29_fu_973_p2;
                add_ln28_31_reg_1859 <= add_ln28_31_fu_977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln28_32_reg_1884 <= add_ln28_32_fu_989_p2;
                add_ln28_33_reg_1889 <= add_ln28_33_fu_993_p2;
                add_ln28_34_reg_1899 <= add_ln28_34_fu_997_p2;
                add_ln28_35_reg_1904 <= add_ln28_35_fu_1001_p2;
                mul_ln28_12_reg_1879 <= grp_fu_1233_p2;
                mul_ln28_15_reg_1894 <= grp_fu_1237_p2;
                mul_ln28_9_reg_1864 <= grp_fu_1229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln28_36_reg_1929 <= add_ln28_36_fu_1040_p2;
                trunc_ln28_11_reg_1909 <= mul_ln28_12_reg_1879(29 downto 14);
                trunc_ln28_14_reg_1924 <= mul_ln28_15_reg_1894(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln28_38_reg_1994 <= add_ln28_38_fu_1100_p2;
                mul_ln28_13_reg_1984 <= grp_fu_1251_p2;
                mul_ln28_14_reg_1989 <= grp_fu_1256_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln28_42_reg_2019 <= add_ln28_42_fu_1148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln28_43_reg_2024 <= add_ln28_43_fu_1157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln28_44_reg_2029 <= add_ln28_44_fu_1166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_441_p2 = ap_const_lv1_0))) then
                add_ln28_reg_1327 <= add_ln28_fu_478_p2;
                bias_addr_reg_1322 <= zext_ln23_fu_453_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_1299 <= empty_fu_427_p1;
                    output_width_cast_reg_1271(5 downto 0) <= output_width_cast_fu_407_p1(5 downto 0);
                    zext_ln28_reg_1277(6 downto 0) <= zext_ln28_fu_411_p1(6 downto 0);
                    zext_ln36_1_cast_cas_reg_1294(5 downto 0) <= zext_ln36_1_cast_cas_fu_423_p1(5 downto 0);
                    zext_ln36_1_reg_1282(6 downto 0) <= zext_ln36_1_fu_415_p1(6 downto 0);
                    zext_ln36_reg_1289(5 downto 0) <= zext_ln36_fu_419_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln21_reg_1446 <= icmp_ln21_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_198_reg_1597 <= input_r_q1;
                input_load_199_reg_1607 <= input_r_q0;
                kernel_0_load_5_reg_1602 <= kernel_0_q1;
                kernel_0_load_6_reg_1612 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                input_load_200_reg_1627 <= input_r_q1;
                input_load_201_reg_1637 <= input_r_q0;
                kernel_0_load_7_reg_1632 <= kernel_0_q1;
                kernel_0_load_8_reg_1642 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_0_addr_1_reg_1345 <= zext_ln28_4_fu_493_p1(8 - 1 downto 0);
                kernel_0_addr_2_reg_1350 <= zext_ln28_5_fu_503_p1(8 - 1 downto 0);
                kernel_0_addr_3_reg_1355 <= zext_ln28_6_fu_513_p1(8 - 1 downto 0);
                kernel_0_addr_4_reg_1360 <= zext_ln28_7_fu_523_p1(8 - 1 downto 0);
                kernel_0_addr_5_reg_1365 <= zext_ln28_8_fu_533_p1(8 - 1 downto 0);
                kernel_0_addr_6_reg_1370 <= zext_ln28_9_fu_543_p1(8 - 1 downto 0);
                kernel_0_addr_7_reg_1375 <= zext_ln28_10_fu_553_p1(8 - 1 downto 0);
                kernel_0_addr_8_reg_1380 <= zext_ln28_11_fu_563_p1(8 - 1 downto 0);
                kernel_0_addr_reg_1340 <= zext_ln28_3_fu_484_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                mul_ln28_10_reg_1964 <= grp_fu_1241_p2;
                mul_ln28_11_reg_1969 <= grp_fu_1246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                mul_ln28_16_reg_2009 <= grp_fu_1261_p2;
                mul_ln28_17_reg_2014 <= grp_fu_1266_p2;
                trunc_ln28_12_reg_1999 <= mul_ln28_13_reg_1984(29 downto 14);
                trunc_ln28_13_reg_2004 <= mul_ln28_14_reg_1989(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                mul_ln28_6_reg_1749 <= grp_fu_1175_p2;
                mul_ln28_7_reg_1754 <= grp_fu_1181_p2;
                mul_ln28_8_reg_1759 <= grp_fu_1187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_reg_1388 <= out_h_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then
                reg_399 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                sext_ln28_11_reg_1743 <= sext_ln28_11_fu_812_p1;
                sext_ln28_1_reg_1686 <= sext_ln28_1_fu_781_p1;
                sext_ln28_2_reg_1692 <= sext_ln28_2_fu_784_p1;
                sext_ln28_3_reg_1698 <= sext_ln28_3_fu_788_p1;
                sext_ln28_5_reg_1709 <= sext_ln28_5_fu_794_p1;
                sext_ln28_7_reg_1720 <= sext_ln28_7_fu_800_p1;
                sext_ln28_8_reg_1726 <= sext_ln28_8_fu_803_p1;
                sext_ln28_9_reg_1732 <= sext_ln28_9_fu_806_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                sext_ln28_13_reg_1652 <= sext_ln28_13_fu_762_p1;
                sext_ln28_14_reg_1658 <= sext_ln28_14_fu_765_p1;
                sext_ln28_15_reg_1664 <= sext_ln28_15_fu_768_p1;
                sext_ln28_17_reg_1675 <= sext_ln28_17_fu_774_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    tmp5_0_0_0_cast_reg_1413(15 downto 0) <= tmp5_0_0_0_cast_fu_615_p1(15 downto 0);
                    tmp5_0_1_0_cast_reg_1422(15 downto 0) <= tmp5_0_1_0_cast_fu_627_p1(15 downto 0);
                    tmp5_0_2_0_cast_reg_1431(15 downto 0) <= tmp5_0_2_0_cast_fu_639_p1(15 downto 0);
                    tmp7_0_cast_reg_1440(14 downto 0) <= tmp7_0_cast_fu_651_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln20_fu_568_p2 = ap_const_lv1_0))) then
                tmp6_0_reg_1408 <= tmp6_0_fu_601_p2;
                tmp_0_0_0_reg_1393 <= tmp_0_0_0_fu_583_p2;
                tmp_0_1_0_reg_1398 <= tmp_0_1_0_fu_589_p2;
                tmp_0_2_0_reg_1403 <= tmp_0_2_0_fu_595_p2;
            end if;
        end if;
    end process;
    output_width_cast_reg_1271(15 downto 6) <= "0000000000";
    zext_ln28_reg_1277(8 downto 7) <= "00";
    zext_ln36_1_reg_1282(15 downto 7) <= "000000000";
    zext_ln36_reg_1289(8 downto 6) <= "000";
    zext_ln36_1_cast_cas_reg_1294(14 downto 6) <= "000000000";
    tmp5_0_0_0_cast_reg_1413(16) <= '0';
    tmp5_0_1_0_cast_reg_1422(16) <= '0';
    tmp5_0_2_0_cast_reg_1431(16) <= '0';
    tmp7_0_cast_reg_1440(16 downto 15) <= "00";
    zext_ln28_12_reg_1450(16) <= '0';
    zext_ln28_14_reg_1474(0) <= '1';
    zext_ln28_14_reg_1474(16) <= '0';
    add_ln28_28_reg_1830(0) <= '0';
    add_ln28_30_reg_1837(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_441_p2, ap_CS_fsm_state4, icmp_ln20_fu_568_p2, icmp_ln21_fu_655_p2, icmp_ln21_reg_1446, ap_CS_fsm_state6, icmp_ln21_1_reg_1493, ap_CS_fsm_state19)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln20_fu_568_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln21_fu_655_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and ((icmp_ln21_1_reg_1493 = ap_const_lv1_1) or (icmp_ln21_reg_1446 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_98_fu_436_p2 <= std_logic_vector(unsigned(phi_mul_reg_347) + unsigned(zext_ln28_reg_1277));
    add_ln19_fu_431_p2 <= std_logic_vector(unsigned(phi_mul2_reg_359) + unsigned(zext_ln36_reg_1289));
    add_ln21_fu_967_p2 <= std_logic_vector(unsigned(out_w_0_0_reg_382) + unsigned(ap_const_lv16_2));
    add_ln28_10_fu_689_p2 <= std_logic_vector(unsigned(zext_ln28_14_fu_685_p1) + unsigned(tmp5_0_0_0_cast_reg_1413));
    add_ln28_11_fu_669_p2 <= std_logic_vector(unsigned(zext_ln28_12_fu_660_p1) + unsigned(ap_const_lv17_2));
    add_ln28_12_fu_694_p2 <= std_logic_vector(unsigned(add_ln28_11_reg_1462) + unsigned(tmp5_0_0_0_cast_reg_1413));
    add_ln28_13_fu_711_p2 <= std_logic_vector(unsigned(tmp5_0_1_0_cast_reg_1422) + unsigned(zext_ln28_12_reg_1450));
    add_ln28_14_fu_715_p2 <= std_logic_vector(unsigned(zext_ln28_14_reg_1474) + unsigned(tmp5_0_1_0_cast_reg_1422));
    add_ln28_15_fu_727_p2 <= std_logic_vector(unsigned(add_ln28_11_reg_1462) + unsigned(tmp5_0_1_0_cast_reg_1422));
    add_ln28_16_fu_731_p2 <= std_logic_vector(unsigned(tmp5_0_2_0_cast_reg_1431) + unsigned(zext_ln28_12_reg_1450));
    add_ln28_17_fu_743_p2 <= std_logic_vector(unsigned(zext_ln28_14_reg_1474) + unsigned(tmp5_0_2_0_cast_reg_1431));
    add_ln28_18_fu_747_p2 <= std_logic_vector(unsigned(add_ln28_11_reg_1462) + unsigned(tmp5_0_2_0_cast_reg_1431));
    add_ln28_19_fu_908_p2 <= std_logic_vector(unsigned(bias_load_reg_1764) + unsigned(trunc_ln_fu_854_p4));
    add_ln28_1_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(add_ln28_reg_1327));
    add_ln28_20_fu_913_p2 <= std_logic_vector(unsigned(trunc_ln28_1_fu_872_p4) + unsigned(trunc_ln28_2_fu_881_p4));
    add_ln28_21_fu_919_p2 <= std_logic_vector(unsigned(add_ln28_20_fu_913_p2) + unsigned(trunc_ln28_s_fu_863_p4));
    add_ln28_22_fu_936_p2 <= std_logic_vector(unsigned(add_ln28_21_reg_1810) + unsigned(add_ln28_19_reg_1805));
    add_ln28_23_fu_925_p2 <= std_logic_vector(unsigned(trunc_ln28_3_fu_890_p4) + unsigned(trunc_ln28_4_fu_899_p4));
    add_ln28_24_fu_842_p2 <= std_logic_vector(unsigned(trunc_ln28_6_fu_824_p4) + unsigned(trunc_ln28_7_fu_833_p4));
    add_ln28_25_fu_848_p2 <= std_logic_vector(unsigned(add_ln28_24_fu_842_p2) + unsigned(trunc_ln28_5_fu_815_p4));
    add_ln28_26_fu_931_p2 <= std_logic_vector(unsigned(add_ln28_25_reg_1800) + unsigned(add_ln28_23_fu_925_p2));
    add_ln28_27_fu_940_p2 <= std_logic_vector(unsigned(add_ln28_26_reg_1815) + unsigned(add_ln28_22_fu_936_p2));
    add_ln28_28_fu_953_p2 <= std_logic_vector(unsigned(zext_ln28_14_reg_1474) + unsigned(ap_const_lv17_1));
    add_ln28_29_fu_973_p2 <= std_logic_vector(unsigned(add_ln28_28_reg_1830) + unsigned(tmp5_0_0_0_cast_reg_1413));
    add_ln28_2_fu_498_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(add_ln28_reg_1327));
    add_ln28_30_fu_958_p2 <= std_logic_vector(unsigned(zext_ln28_14_reg_1474) + unsigned(ap_const_lv17_2));
    add_ln28_31_fu_977_p2 <= std_logic_vector(unsigned(add_ln28_30_reg_1837) + unsigned(tmp5_0_0_0_cast_reg_1413));
    add_ln28_32_fu_989_p2 <= std_logic_vector(unsigned(add_ln28_28_reg_1830) + unsigned(tmp5_0_1_0_cast_reg_1422));
    add_ln28_33_fu_993_p2 <= std_logic_vector(unsigned(add_ln28_30_reg_1837) + unsigned(tmp5_0_1_0_cast_reg_1422));
    add_ln28_34_fu_997_p2 <= std_logic_vector(unsigned(add_ln28_28_reg_1830) + unsigned(tmp5_0_2_0_cast_reg_1431));
    add_ln28_35_fu_1001_p2 <= std_logic_vector(unsigned(add_ln28_30_reg_1837) + unsigned(tmp5_0_2_0_cast_reg_1431));
    add_ln28_36_fu_1040_p2 <= std_logic_vector(unsigned(bias_load_reg_1764) + unsigned(trunc_ln28_8_fu_1005_p4));
    add_ln28_37_fu_1095_p2 <= std_logic_vector(unsigned(trunc_ln28_10_fu_1086_p4) + unsigned(trunc_ln28_11_reg_1909));
    add_ln28_38_fu_1100_p2 <= std_logic_vector(unsigned(add_ln28_37_fu_1095_p2) + unsigned(trunc_ln28_9_fu_1077_p4));
    add_ln28_39_fu_1162_p2 <= std_logic_vector(unsigned(add_ln28_38_reg_1994) + unsigned(add_ln28_36_reg_1929));
    add_ln28_3_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(add_ln28_reg_1327));
    add_ln28_40_fu_1153_p2 <= std_logic_vector(unsigned(trunc_ln28_12_reg_1999) + unsigned(trunc_ln28_13_reg_2004));
    add_ln28_41_fu_1142_p2 <= std_logic_vector(unsigned(trunc_ln28_15_fu_1124_p4) + unsigned(trunc_ln28_16_fu_1133_p4));
    add_ln28_42_fu_1148_p2 <= std_logic_vector(unsigned(add_ln28_41_fu_1142_p2) + unsigned(trunc_ln28_14_reg_1924));
    add_ln28_43_fu_1157_p2 <= std_logic_vector(unsigned(add_ln28_42_reg_2019) + unsigned(add_ln28_40_fu_1153_p2));
    add_ln28_44_fu_1166_p2 <= std_logic_vector(unsigned(add_ln28_43_reg_2024) + unsigned(add_ln28_39_fu_1162_p2));
    add_ln28_4_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(add_ln28_reg_1327));
    add_ln28_5_fu_528_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(add_ln28_reg_1327));
    add_ln28_6_fu_538_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(add_ln28_reg_1327));
    add_ln28_7_fu_548_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(add_ln28_reg_1327));
    add_ln28_8_fu_558_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(add_ln28_reg_1327));
    add_ln28_9_fu_664_p2 <= std_logic_vector(unsigned(tmp5_0_0_0_cast_reg_1413) + unsigned(zext_ln28_12_fu_660_p1));
    add_ln28_fu_478_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_458_p1) + unsigned(zext_ln28_2_fu_474_p1));
    add_ln36_1_fu_963_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_1440) + unsigned(zext_ln28_14_reg_1474));
    add_ln36_fu_945_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_1440) + unsigned(zext_ln28_12_reg_1450));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_441_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_441_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_441_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_441_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_1322;

    bias_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_427_p1 <= output_height(5 - 1 downto 0);
    grp_fu_1229_p0 <= sext_ln28_1_reg_1686(16 - 1 downto 0);
    grp_fu_1229_p1 <= sext_ln28_2_reg_1692(16 - 1 downto 0);
    grp_fu_1233_p0 <= sext_ln28_7_reg_1720(16 - 1 downto 0);
    grp_fu_1233_p1 <= sext_ln28_8_reg_1726(16 - 1 downto 0);
    grp_fu_1237_p0 <= sext_ln28_13_reg_1652(16 - 1 downto 0);
    grp_fu_1237_p1 <= sext_ln28_14_reg_1658(16 - 1 downto 0);
    grp_fu_1241_p0 <= sext_ln28_3_reg_1698(16 - 1 downto 0);
    grp_fu_1246_p0 <= sext_ln28_5_reg_1709(16 - 1 downto 0);
    grp_fu_1251_p0 <= sext_ln28_9_reg_1732(16 - 1 downto 0);
    grp_fu_1256_p0 <= sext_ln28_11_reg_1743(16 - 1 downto 0);
    grp_fu_1261_p0 <= sext_ln28_15_reg_1664(16 - 1 downto 0);
    grp_fu_1266_p0 <= sext_ln28_17_reg_1675(16 - 1 downto 0);
    icmp_ln19_fu_441_p2 <= "1" when (out_d_0_reg_336 = ap_const_lv5_10) else "0";
    icmp_ln20_fu_568_p2 <= "1" when (out_h_0_reg_371 = empty_reg_1299) else "0";
    icmp_ln21_1_fu_698_p2 <= "1" when (or_ln28_fu_679_p2 = output_width_cast_reg_1271) else "0";
    icmp_ln21_fu_655_p2 <= "1" when (out_w_0_0_reg_382 = output_width_cast_reg_1271) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state21, zext_ln28_13_fu_675_p1, zext_ln28_15_fu_703_p1, zext_ln28_18_fu_723_p1, zext_ln28_20_fu_739_p1, zext_ln28_22_fu_755_p1, zext_ln28_24_fu_985_p1, zext_ln28_26_fu_1027_p1, zext_ln28_28_fu_1057_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_r_address0 <= zext_ln28_28_fu_1057_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address0 <= zext_ln28_26_fu_1027_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_r_address0 <= zext_ln28_24_fu_985_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= zext_ln28_22_fu_755_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln28_20_fu_739_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= zext_ln28_18_fu_723_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln28_15_fu_703_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln28_13_fu_675_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state21, zext_ln28_16_fu_707_p1, zext_ln28_17_fu_719_p1, zext_ln28_19_fu_735_p1, zext_ln28_21_fu_751_p1, zext_ln28_23_fu_981_p1, zext_ln28_25_fu_1023_p1, zext_ln28_27_fu_1053_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_r_address1 <= zext_ln28_27_fu_1053_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address1 <= zext_ln28_25_fu_1023_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_r_address1 <= zext_ln28_23_fu_981_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= zext_ln28_21_fu_751_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= zext_ln28_19_fu_735_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= zext_ln28_17_fu_719_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= zext_ln28_16_fu_707_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        input_width_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));


    kernel_0_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, kernel_0_addr_reg_1340, kernel_0_addr_1_reg_1345, kernel_0_addr_4_reg_1360, kernel_0_addr_6_reg_1370, kernel_0_addr_8_reg_1380, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            kernel_0_address0 <= kernel_0_addr_8_reg_1380;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_0_address0 <= kernel_0_addr_6_reg_1370;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_address0 <= kernel_0_addr_4_reg_1360;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address0 <= kernel_0_addr_1_reg_1345;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_0_address0 <= kernel_0_addr_reg_1340;
        else 
            kernel_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_0_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, kernel_0_addr_2_reg_1350, kernel_0_addr_3_reg_1355, kernel_0_addr_5_reg_1365, kernel_0_addr_7_reg_1375, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            kernel_0_address1 <= kernel_0_addr_7_reg_1375;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_0_address1 <= kernel_0_addr_5_reg_1365;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_address1 <= kernel_0_addr_3_reg_1355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address1 <= kernel_0_addr_2_reg_1350;
        else 
            kernel_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            kernel_0_ce1 <= ap_const_logic_1;
        else 
            kernel_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln28_fu_679_p2 <= (out_w_0_0_reg_382 or ap_const_lv16_1);
    out_d_fu_447_p2 <= std_logic_vector(unsigned(out_d_0_reg_336) + unsigned(ap_const_lv5_1));
    out_h_fu_573_p2 <= std_logic_vector(unsigned(out_h_0_reg_371) + unsigned(ap_const_lv5_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31, zext_ln36_2_fu_949_p1, zext_ln36_3_fu_1171_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_r_address0 <= zext_ln36_3_fu_1171_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_address0 <= zext_ln36_2_fu_949_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(add_ln28_27_reg_1820, ap_CS_fsm_state19, add_ln28_44_reg_2029, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            output_r_d0 <= add_ln28_44_reg_2029;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_d0 <= add_ln28_27_reg_1820;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(icmp_ln21_reg_1446, ap_CS_fsm_state19, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln21_reg_1446 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),16));
        sext_ln28_11_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_5_reg_1602),30));

        sext_ln28_13_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_6_reg_1612),30));

        sext_ln28_14_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_200_reg_1627),30));

        sext_ln28_15_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_7_reg_1632),30));

        sext_ln28_17_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_8_reg_1642),30));

        sext_ln28_1_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_reg_1497),30));

        sext_ln28_2_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_399),30));

        sext_ln28_3_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_1_reg_1522),30));

        sext_ln28_5_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_2_reg_1532),30));

        sext_ln28_7_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_3_reg_1562),30));

        sext_ln28_8_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_197_reg_1567),30));

        sext_ln28_9_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_4_reg_1572),30));

    shl_ln_fu_466_p3 <= (trunc_ln28_fu_462_p1 & ap_const_lv3_0);
    tmp5_0_0_0_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_0_fu_610_p2),17));
    tmp5_0_0_0_fu_610_p0 <= zext_ln36_1_reg_1282(7 - 1 downto 0);
    tmp5_0_0_0_fu_610_p1 <= tmp5_0_0_0_fu_610_p10(9 - 1 downto 0);
    tmp5_0_0_0_fu_610_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_0_0_reg_1393),16));
    tmp5_0_0_0_fu_610_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_0_fu_610_p0) * unsigned(tmp5_0_0_0_fu_610_p1), 16));
    tmp5_0_1_0_cast_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_0_fu_622_p2),17));
    tmp5_0_1_0_fu_622_p0 <= zext_ln36_1_reg_1282(7 - 1 downto 0);
    tmp5_0_1_0_fu_622_p1 <= tmp5_0_1_0_fu_622_p10(9 - 1 downto 0);
    tmp5_0_1_0_fu_622_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_1_0_reg_1398),16));
    tmp5_0_1_0_fu_622_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_0_fu_622_p0) * unsigned(tmp5_0_1_0_fu_622_p1), 16));
    tmp5_0_2_0_cast_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_0_fu_634_p2),17));
    tmp5_0_2_0_fu_634_p0 <= zext_ln36_1_reg_1282(7 - 1 downto 0);
    tmp5_0_2_0_fu_634_p1 <= tmp5_0_2_0_fu_634_p10(9 - 1 downto 0);
    tmp5_0_2_0_fu_634_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_2_0_reg_1403),16));
    tmp5_0_2_0_fu_634_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_0_fu_634_p0) * unsigned(tmp5_0_2_0_fu_634_p1), 16));
    tmp6_0_fu_601_p2 <= std_logic_vector(unsigned(zext_ln28_3_cast_fu_579_p1) + unsigned(phi_mul2_reg_359));
    tmp7_0_cast_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_0_fu_646_p2),17));
    tmp7_0_fu_646_p0 <= zext_ln36_1_cast_cas_reg_1294(6 - 1 downto 0);
    tmp7_0_fu_646_p1 <= tmp7_0_fu_646_p10(9 - 1 downto 0);
    tmp7_0_fu_646_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_0_reg_1408),15));
    tmp7_0_fu_646_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_0_fu_646_p0) * unsigned(tmp7_0_fu_646_p1), 15));
    tmp_0_0_0_fu_583_p2 <= std_logic_vector(unsigned(zext_ln28_3_cast_fu_579_p1) + unsigned(phi_mul_reg_347));
    tmp_0_1_0_fu_589_p2 <= std_logic_vector(unsigned(tmp_0_0_0_fu_583_p2) + unsigned(ap_const_lv9_1));
    tmp_0_2_0_fu_595_p2 <= std_logic_vector(unsigned(tmp_0_0_0_fu_583_p2) + unsigned(ap_const_lv9_2));
    trunc_ln28_10_fu_1086_p4 <= mul_ln28_11_reg_1969(29 downto 14);
    trunc_ln28_15_fu_1124_p4 <= mul_ln28_16_reg_2009(29 downto 14);
    trunc_ln28_16_fu_1133_p4 <= mul_ln28_17_reg_2014(29 downto 14);
    trunc_ln28_1_fu_872_p4 <= mul_ln28_2_reg_1780(29 downto 14);
    trunc_ln28_2_fu_881_p4 <= mul_ln28_3_reg_1785(29 downto 14);
    trunc_ln28_3_fu_890_p4 <= mul_ln28_4_reg_1790(29 downto 14);
    trunc_ln28_4_fu_899_p4 <= mul_ln28_5_reg_1795(29 downto 14);
    trunc_ln28_5_fu_815_p4 <= mul_ln28_6_reg_1749(29 downto 14);
    trunc_ln28_6_fu_824_p4 <= mul_ln28_7_reg_1754(29 downto 14);
    trunc_ln28_7_fu_833_p4 <= mul_ln28_8_reg_1759(29 downto 14);
    trunc_ln28_8_fu_1005_p4 <= mul_ln28_9_reg_1864(29 downto 14);
    trunc_ln28_9_fu_1077_p4 <= mul_ln28_10_reg_1964(29 downto 14);
    trunc_ln28_fu_462_p1 <= out_d_0_reg_336(4 - 1 downto 0);
    trunc_ln28_s_fu_863_p4 <= mul_ln28_1_reg_1775(29 downto 14);
    trunc_ln_fu_854_p4 <= mul_ln28_reg_1770(29 downto 14);
    zext_ln23_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_336),64));
    zext_ln28_10_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_7_fu_548_p2),64));
    zext_ln28_11_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_8_fu_558_p2),64));
    zext_ln28_12_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_0_reg_382),17));
    zext_ln28_13_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_9_reg_1457),64));
    zext_ln28_14_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_fu_679_p2),17));
    zext_ln28_15_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_10_reg_1483),64));
    zext_ln28_16_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_12_reg_1488),64));
    zext_ln28_17_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_13_reg_1512),64));
    zext_ln28_18_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_14_reg_1517),64));
    zext_ln28_19_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_15_reg_1547),64));
    zext_ln28_1_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_336),8));
    zext_ln28_20_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_16_reg_1552),64));
    zext_ln28_21_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_17_reg_1587),64));
    zext_ln28_22_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_18_reg_1592),64));
    zext_ln28_23_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_29_reg_1854),64));
    zext_ln28_24_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_31_reg_1859),64));
    zext_ln28_25_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_32_reg_1884),64));
    zext_ln28_26_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_33_reg_1889),64));
    zext_ln28_27_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_34_reg_1899),64));
    zext_ln28_28_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_35_reg_1904),64));
    zext_ln28_2_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_466_p3),8));
    zext_ln28_3_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_371),9));
    zext_ln28_3_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_reg_1327),64));
    zext_ln28_4_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_488_p2),64));
    zext_ln28_5_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_498_p2),64));
    zext_ln28_6_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_508_p2),64));
    zext_ln28_7_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_4_fu_518_p2),64));
    zext_ln28_8_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_528_p2),64));
    zext_ln28_9_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_6_fu_538_p2),64));
    zext_ln28_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln36_1_cast_cas_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),15));
    zext_ln36_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_403_p1),16));
    zext_ln36_2_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_reg_1825),64));
    zext_ln36_3_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_reg_1844),64));
    zext_ln36_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
