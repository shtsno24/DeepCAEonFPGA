-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel1_ce0 : OUT STD_LOGIC;
    kernel1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel2_ce0 : OUT STD_LOGIC;
    kernel2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten39_reg_254 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_0_reg_266 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_278 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_289 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_300 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln22_reg_1073 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln22_reg_1073_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_fu_325_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_reg_1019 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_1_cast14_fu_329_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_1_cast14_reg_1025 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln41_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_reg_1032 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_1_cast_fu_337_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln41_1_cast_reg_1038 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_341_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1043 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln5_fu_357_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln5_reg_1048 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_363_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_reg_1053 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln24_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln41_1_fu_377_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_1_reg_1063 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_1_reg_1063_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_3_cast_fu_386_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_3_cast_reg_1068 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_3_cast_reg_1068_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln22_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1077 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln23_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1082 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1082_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_412_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_reg_1090 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln41_2_fu_420_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_2_reg_1095 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln29_18_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_18_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_18_reg_1100_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1106 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_fu_469_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1111 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_3_cast_mid_fu_477_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_3_cast_mid_reg_1118 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_3_cast_mid_reg_1118_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_mid2_v_v_fu_487_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_mid2_v_v_reg_1123 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_5_fu_495_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_5_reg_1130 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_0_0_mid2_fu_504_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_0_0_mid2_reg_1135 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_1_0_mid2_fu_518_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_1_0_mid2_reg_1142 : STD_LOGIC_VECTOR (13 downto 0);
    signal kernel_load_reg_1149 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel1_load_reg_1157 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel2_load_reg_1165 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_2_0_mid2_fu_532_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_2_0_mid2_reg_1173 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_1_fu_537_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_1_reg_1180 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_1_reg_1180_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_fu_550_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1192 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_3_fu_555_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_3_reg_1197 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_13_fu_569_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_13_reg_1208 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln29_fu_575_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln29_reg_1214 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln41_1_fu_579_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln41_1_reg_1221 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln29_fu_583_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln29_reg_1227 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_5_fu_594_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_5_reg_1232 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln22_fu_617_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln22_reg_1248 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln23_fu_633_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_reg_1253 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln35_1_fu_650_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln35_1_reg_1258 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_reg_1264 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_3_fu_675_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln35_3_reg_1269 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln41_s_reg_1274 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_688_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_1279 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_697_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1284 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln23_1_fu_724_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln23_1_reg_1299 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln35_5_fu_738_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln35_5_reg_1309 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln41_1_reg_1314 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_7_fu_754_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln35_7_reg_1319 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln41_2_reg_1324 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_10_fu_784_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_10_reg_1339 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln41_3_reg_1344 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_4_reg_1349 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_1_fu_818_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_1_reg_1359 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_3_fu_827_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_3_reg_1364 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_mid2_v_v_fu_858_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_mid2_v_v_reg_1369 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln41_5_reg_1374 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_6_reg_1379 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_7_reg_1384 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_992_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_reg_1389 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_8_fu_920_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_8_reg_1394 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten39_phi_fu_258_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_270_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_282_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_293_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_304_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_2_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln35_4_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_6_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln35_7_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_8_fu_710_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln35_9_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_10_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_11_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_12_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln41_3_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_13_fu_321_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_46_fu_345_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln5_fu_357_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln5_fu_357_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln35_fu_381_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln35_fu_381_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln35_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln35_1_fu_424_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln35_1_fu_424_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln35_1_fu_424_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_fu_390_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln24_4_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_48_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_14_fu_429_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_mid1_fu_481_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln29_16_fu_437_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_mid2_fu_504_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_mid2_fu_504_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_1_0_mid2_v_v_fu_509_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_1_0_mid2_fu_518_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_1_0_mid2_fu_518_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_2_0_mid2_v_v_fu_523_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_2_0_mid2_fu_532_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_2_0_mid2_fu_532_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_fu_540_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_2_fu_559_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln41_1_fu_579_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln41_1_fu_579_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_3_fu_589_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_4_fu_598_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_5_fu_608_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_642_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_2_fu_940_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_1_fu_667_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_3_fu_947_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_688_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_697_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln35_6_fu_706_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_7_fu_715_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln35_4_fu_954_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln35_5_fu_961_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln35_8_fu_766_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_9_fu_775_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln35_6_fu_968_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln35_7_fu_974_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln41_2_fu_823_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln41_fu_832_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln41_fu_832_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln41_fu_832_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_fu_836_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln29_15_fu_841_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_mid1_fu_853_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln29_17_fu_847_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln35_8_fu_980_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln35_9_fu_986_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln35_10_fu_998_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln41_6_fu_911_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_7_fu_915_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_5_fu_907_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_4_fu_926_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_6_fu_968_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_7_fu_974_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_8_fu_980_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_9_fu_986_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_992_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_992_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_992_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln35_10_fu_998_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_992_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln35_1_fu_424_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln35_fu_381_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln5_fu_357_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln5_fu_357_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_0_0_mid2_fu_504_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_1_0_mid2_fu_518_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_2_0_mid2_fu_532_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component network_mux_32_16_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component network_mac_muladd_6ns_9ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    network_mux_32_16_1_1_x_U41 : component network_mux_32_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1149,
        din1 => kernel1_load_reg_1157,
        din2 => kernel2_load_reg_1165,
        din3 => trunc_ln29_reg_1214,
        dout => tmp_s_fu_642_p5);

    network_mux_32_16_1_1_x_U42 : component network_mux_32_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1149,
        din1 => kernel1_load_reg_1157,
        din2 => kernel2_load_reg_1165,
        din3 => add_ln29_reg_1227,
        dout => tmp_1_fu_667_p5);

    network_mux_32_16_1_1_x_U43 : component network_mux_32_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1149,
        din1 => kernel1_load_reg_1157,
        din2 => kernel2_load_reg_1165,
        din3 => tmp_2_fu_688_p4,
        dout => tmp_2_fu_688_p5);

    network_mux_32_16_1_1_x_U44 : component network_mux_32_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1149,
        din1 => kernel1_load_reg_1157,
        din2 => kernel2_load_reg_1165,
        din3 => tmp_3_fu_697_p4,
        dout => tmp_3_fu_697_p5);

    network_mul_mul_16s_16s_30_1_1_U45 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => tmp_s_fu_642_p5,
        dout => mul_ln35_2_fu_940_p2);

    network_mul_mul_16s_16s_30_1_1_U46 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_316,
        din1 => tmp_1_fu_667_p5,
        dout => mul_ln35_3_fu_947_p2);

    network_mul_mul_16s_16s_30_1_1_U47 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => tmp_2_reg_1279,
        dout => mul_ln35_4_fu_954_p2);

    network_mul_mul_16s_16s_30_1_1_U48 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_316,
        din1 => tmp_3_reg_1284,
        dout => mul_ln35_5_fu_961_p2);

    network_mul_mul_16s_16s_30_1_1_U49 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => mul_ln35_6_fu_968_p1,
        dout => mul_ln35_6_fu_968_p2);

    network_mul_mul_16s_16s_30_1_1_U50 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_316,
        din1 => mul_ln35_7_fu_974_p1,
        dout => mul_ln35_7_fu_974_p2);

    network_mul_mul_16s_16s_30_1_1_U51 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => mul_ln35_8_fu_980_p1,
        dout => mul_ln35_8_fu_980_p2);

    network_mul_mul_16s_16s_30_1_1_U52 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_316,
        din1 => mul_ln35_9_fu_986_p1,
        dout => mul_ln35_9_fu_986_p2);

    network_mac_muladd_6ns_9ns_5ns_14_1_1_U53 : component network_mac_muladd_6ns_9ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_992_p0,
        din1 => grp_fu_992_p1,
        din2 => grp_fu_992_p2,
        dout => grp_fu_992_p3);

    network_mul_mul_16s_16s_30_1_1_U54 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => mul_ln35_10_fu_998_p1,
        dout => mul_ln35_10_fu_998_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln22_reg_1073 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state9) and (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten39_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten39_reg_254 <= add_ln22_reg_1248;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten39_reg_254 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_278 <= select_ln23_1_reg_1299;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_278 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_266 <= select_ln29_13_reg_1208;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_266 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_289 <= select_ln23_reg_1253;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_289 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_300 <= out_w_reg_1192;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_300 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
                reg_311 <= input_r_q0;
            elsif ((((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_311 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                reg_316 <= input_r_q1;
            elsif ((((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_316 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln22_reg_1248 <= add_ln22_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_396_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln23_5_reg_1130 <= add_ln23_5_fu_495_p2;
                icmp_ln23_reg_1082 <= icmp_ln23_fu_407_p2;
                out_d_reg_1077 <= out_d_fu_401_p2;
                out_h_reg_1106 <= out_h_fu_457_p2;
                out_w_0_mid2_reg_1111 <= out_w_0_mid2_fu_469_p3;
                select_ln29_18_reg_1100 <= select_ln29_18_fu_450_p3;
                select_ln29_reg_1090 <= select_ln29_fu_412_p3;
                tmp5_0_0_mid2_v_v_reg_1123 <= tmp5_0_0_mid2_v_v_fu_487_p3;
                    zext_ln35_3_cast_mid_reg_1118(4 downto 0) <= zext_ln35_3_cast_mid_fu_477_p1(4 downto 0);
                    zext_ln41_2_reg_1095(4 downto 0) <= zext_ln41_2_fu_420_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln29_reg_1227 <= add_ln29_fu_583_p2;
                mul_ln41_1_reg_1221 <= mul_ln41_1_fu_579_p2;
                trunc_ln29_reg_1214 <= trunc_ln29_fu_575_p1;
                    zext_ln35_5_reg_1232(4 downto 0) <= zext_ln35_5_fu_594_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln35_10_reg_1339 <= add_ln35_10_fu_784_p2;
                sext_ln35_5_reg_1309 <= sext_ln35_5_fu_738_p1;
                sext_ln35_7_reg_1319 <= sext_ln35_7_fu_754_p1;
                trunc_ln41_1_reg_1314 <= mul_ln35_4_fu_954_p2(29 downto 14);
                trunc_ln41_2_reg_1324 <= mul_ln35_5_fu_961_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln41_1_reg_1359 <= add_ln41_1_fu_818_p2;
                add_ln41_3_reg_1364 <= add_ln41_3_fu_827_p2;
                trunc_ln41_3_reg_1344 <= mul_ln35_6_fu_968_p2(29 downto 14);
                trunc_ln41_4_reg_1349 <= mul_ln35_7_fu_974_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln41_8_reg_1394 <= add_ln41_8_fu_920_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln41_reg_1389 <= grp_fu_992_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1043 <= empty_fu_341_p1;
                icmp_ln24_reg_1058 <= icmp_ln24_fu_371_p2;
                mul_ln5_reg_1048 <= mul_ln5_fu_357_p2;
                    tmp_4_reg_1053(13 downto 4) <= tmp_4_fu_363_p3(13 downto 4);
                    zext_ln35_1_cast14_reg_1025(6 downto 0) <= zext_ln35_1_cast14_fu_329_p1(6 downto 0);
                    zext_ln35_reg_1019(6 downto 0) <= zext_ln35_fu_325_p1(6 downto 0);
                    zext_ln41_1_cast_reg_1038(5 downto 0) <= zext_ln41_1_cast_fu_337_p1(5 downto 0);
                    zext_ln41_reg_1032(5 downto 0) <= zext_ln41_fu_333_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln22_reg_1073 <= icmp_ln22_fu_396_p2;
                icmp_ln22_reg_1073_pp0_iter1_reg <= icmp_ln22_reg_1073;
                icmp_ln23_reg_1082_pp0_iter1_reg <= icmp_ln23_reg_1082;
                select_ln29_18_reg_1100_pp0_iter1_reg <= select_ln29_18_reg_1100;
                    zext_ln35_3_cast_mid_reg_1118_pp0_iter1_reg(4 downto 0) <= zext_ln35_3_cast_mid_reg_1118(4 downto 0);
                    zext_ln35_3_cast_reg_1068(4 downto 0) <= zext_ln35_3_cast_fu_386_p1(4 downto 0);
                    zext_ln35_3_cast_reg_1068_pp0_iter1_reg(4 downto 0) <= zext_ln35_3_cast_reg_1068(4 downto 0);
                    zext_ln41_1_reg_1063(4 downto 0) <= zext_ln41_1_fu_377_p1(4 downto 0);
                    zext_ln41_1_reg_1063_pp0_iter1_reg(4 downto 0) <= zext_ln41_1_reg_1063(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                kernel1_load_reg_1157 <= kernel1_q0;
                kernel2_load_reg_1165 <= kernel2_q0;
                kernel_load_reg_1149 <= kernel_q0;
                tmp5_0_0_mid2_reg_1135 <= tmp5_0_0_mid2_fu_504_p2;
                tmp5_1_0_mid2_reg_1142 <= tmp5_1_0_mid2_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_w_reg_1192 <= out_w_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln23_1_reg_1299 <= select_ln23_1_fu_724_p3;
                select_ln23_reg_1253 <= select_ln23_fu_633_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                select_ln29_13_reg_1208 <= select_ln29_13_fu_569_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                sext_ln35_1_reg_1258 <= sext_ln35_1_fu_650_p1;
                sext_ln35_3_reg_1269 <= sext_ln35_3_fu_675_p1;
                tmp_2_reg_1279 <= tmp_2_fu_688_p5;
                tmp_3_reg_1284 <= tmp_3_fu_697_p5;
                trunc_ln41_s_reg_1274 <= mul_ln35_3_fu_947_p2(29 downto 14);
                trunc_ln_reg_1264 <= mul_ln35_2_fu_940_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp5_2_0_mid2_reg_1173 <= tmp5_2_0_mid2_fu_532_p2;
                    zext_ln35_1_reg_1180(4 downto 0) <= zext_ln35_1_fu_537_p1(4 downto 0);
                    zext_ln35_3_reg_1197(4 downto 0) <= zext_ln35_3_fu_555_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp7_mid2_v_v_reg_1369 <= tmp7_mid2_v_v_fu_858_p3;
                trunc_ln41_5_reg_1374 <= mul_ln35_8_fu_980_p2(29 downto 14);
                trunc_ln41_6_reg_1379 <= mul_ln35_9_fu_986_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                trunc_ln41_7_reg_1384 <= mul_ln35_10_fu_998_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                    zext_ln35_1_reg_1180_pp0_iter1_reg(4 downto 0) <= zext_ln35_1_reg_1180(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln35_reg_1019(8 downto 7) <= "00";
    zext_ln35_1_cast14_reg_1025(13 downto 7) <= "0000000";
    zext_ln41_reg_1032(8 downto 6) <= "000";
    zext_ln41_1_cast_reg_1038(13 downto 6) <= "00000000";
    tmp_4_reg_1053(3 downto 0) <= "0000";
    zext_ln41_1_reg_1063(8 downto 5) <= "0000";
    zext_ln41_1_reg_1063_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln35_3_cast_reg_1068(8 downto 5) <= "0000";
    zext_ln35_3_cast_reg_1068_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln41_2_reg_1095(8 downto 5) <= "0000";
    zext_ln35_3_cast_mid_reg_1118(8 downto 5) <= "0000";
    zext_ln35_3_cast_mid_reg_1118_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln35_1_reg_1180(13 downto 5) <= "000000000";
    zext_ln35_1_reg_1180_pp0_iter1_reg(13 downto 5) <= "000000000";
    zext_ln35_3_reg_1197(13 downto 5) <= "000000000";
    zext_ln35_5_reg_1232(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln22_fu_617_p2 <= std_logic_vector(unsigned(indvar_flatten39_reg_254) + unsigned(ap_const_lv14_1));
    add_ln23_5_fu_495_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_282_p4));
    add_ln29_fu_583_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln29_fu_575_p1));
    add_ln35_10_fu_784_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1173) + unsigned(zext_ln35_5_reg_1232));
    add_ln35_2_fu_559_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1135) + unsigned(zext_ln35_3_fu_555_p1));
    add_ln35_3_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(out_w_0_mid2_reg_1111));
    add_ln35_4_fu_598_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1135) + unsigned(zext_ln35_5_fu_594_p1));
    add_ln35_5_fu_608_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1142) + unsigned(zext_ln35_1_reg_1180));
    add_ln35_6_fu_706_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1142) + unsigned(zext_ln35_3_reg_1197));
    add_ln35_7_fu_715_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1142) + unsigned(zext_ln35_5_reg_1232));
    add_ln35_8_fu_766_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1173) + unsigned(zext_ln35_1_reg_1180));
    add_ln35_9_fu_775_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1173) + unsigned(zext_ln35_3_reg_1197));
    add_ln35_fu_540_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1135) + unsigned(zext_ln35_1_fu_537_p1));
    add_ln41_1_fu_818_p2 <= std_logic_vector(unsigned(bias_q0) + unsigned(trunc_ln_reg_1264));
    add_ln41_2_fu_823_p2 <= std_logic_vector(unsigned(trunc_ln41_1_reg_1314) + unsigned(trunc_ln41_2_reg_1324));
    add_ln41_3_fu_827_p2 <= std_logic_vector(unsigned(add_ln41_2_fu_823_p2) + unsigned(trunc_ln41_s_reg_1274));
    add_ln41_4_fu_926_p2 <= std_logic_vector(unsigned(add_ln41_3_reg_1364) + unsigned(add_ln41_1_reg_1359));
    add_ln41_5_fu_907_p2 <= std_logic_vector(unsigned(trunc_ln41_3_reg_1344) + unsigned(trunc_ln41_4_reg_1349));
    add_ln41_6_fu_911_p2 <= std_logic_vector(unsigned(trunc_ln41_6_reg_1379) + unsigned(trunc_ln41_7_reg_1384));
    add_ln41_7_fu_915_p2 <= std_logic_vector(unsigned(add_ln41_6_fu_911_p2) + unsigned(trunc_ln41_5_reg_1374));
    add_ln41_8_fu_920_p2 <= std_logic_vector(unsigned(add_ln41_7_fu_915_p2) + unsigned(add_ln41_5_fu_907_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten39_phi_fu_258_p4_assign_proc : process(indvar_flatten39_reg_254, icmp_ln22_reg_1073, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln22_reg_1248, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten39_phi_fu_258_p4 <= add_ln22_reg_1248;
        else 
            ap_phi_mux_indvar_flatten39_phi_fu_258_p4 <= indvar_flatten39_reg_254;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_282_p4_assign_proc : process(indvar_flatten_reg_278, icmp_ln22_reg_1073, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln23_1_reg_1299, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_282_p4 <= select_ln23_1_reg_1299;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_282_p4 <= indvar_flatten_reg_278;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_270_p4_assign_proc : process(out_d_0_reg_266, icmp_ln22_reg_1073, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln29_13_reg_1208, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_270_p4 <= select_ln29_13_reg_1208;
        else 
            ap_phi_mux_out_d_0_phi_fu_270_p4 <= out_d_0_reg_266;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_293_p4_assign_proc : process(out_h_0_reg_289, icmp_ln22_reg_1073, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln23_reg_1253, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_293_p4 <= select_ln23_reg_1253;
        else 
            ap_phi_mux_out_h_0_phi_fu_293_p4 <= out_h_0_reg_289;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_304_p4_assign_proc : process(out_w_0_reg_300, icmp_ln22_reg_1073, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1192, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1073 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_304_p4 <= out_w_reg_1192;
        else 
            ap_phi_mux_out_w_0_phi_fu_304_p4 <= out_w_0_reg_300;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln29_fu_730_p1(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_46_fu_345_p1 <= output_height(5 - 1 downto 0);
    empty_48_fu_463_p2 <= (select_ln29_18_fu_450_p3 or icmp_ln23_fu_407_p2);
    empty_fu_341_p1 <= output_width(5 - 1 downto 0);
    grp_fu_992_p0 <= zext_ln41_1_cast_reg_1038(6 - 1 downto 0);
    grp_fu_992_p1 <= grp_fu_992_p10(9 - 1 downto 0);
    grp_fu_992_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_mid2_v_v_reg_1369),14));
    grp_fu_992_p2 <= zext_ln35_1_reg_1180_pp0_iter1_reg(5 - 1 downto 0);
    icmp_ln22_fu_396_p2 <= "1" when (ap_phi_mux_indvar_flatten39_phi_fu_258_p4 = tmp_4_reg_1053) else "0";
    icmp_ln23_fu_407_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_282_p4 = mul_ln5_reg_1048) else "0";
    icmp_ln24_4_fu_445_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_304_p4 = empty_reg_1043) else "0";
    icmp_ln24_fu_371_p2 <= "1" when (empty_fu_341_p1 = ap_const_lv5_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln35_4_fu_564_p1, ap_block_pp0_stage3, zext_ln35_7_fu_612_p1, ap_block_pp0_stage4, zext_ln35_9_fu_719_p1, zext_ln35_10_fu_770_p1, zext_ln35_12_fu_814_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln35_12_fu_814_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln35_10_fu_770_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln35_9_fu_719_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln35_7_fu_612_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln35_4_fu_564_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln35_2_fu_545_p1, ap_block_pp0_stage2, zext_ln35_6_fu_603_p1, ap_block_pp0_stage3, zext_ln35_8_fu_710_p1, ap_block_pp0_stage4, zext_ln35_11_fu_779_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln35_11_fu_779_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address1 <= zext_ln35_8_fu_710_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln35_6_fu_603_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln35_2_fu_545_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    kernel1_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel1_ce0 <= ap_const_logic_1;
        else 
            kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel2_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel2_ce0 <= ap_const_logic_1;
        else 
            kernel2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln35_10_fu_998_p1 <= sext_ln35_1_reg_1258(16 - 1 downto 0);
    mul_ln35_1_fu_424_p0 <= zext_ln35_reg_1019(7 - 1 downto 0);
    mul_ln35_1_fu_424_p1 <= mul_ln35_1_fu_424_p10(5 - 1 downto 0);
    mul_ln35_1_fu_424_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_401_p2),9));
    mul_ln35_1_fu_424_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln35_1_fu_424_p0) * unsigned(mul_ln35_1_fu_424_p1), 9));
    mul_ln35_6_fu_968_p1 <= sext_ln35_1_reg_1258(16 - 1 downto 0);
    mul_ln35_7_fu_974_p1 <= sext_ln35_3_reg_1269(16 - 1 downto 0);
    mul_ln35_8_fu_980_p1 <= sext_ln35_5_reg_1309(16 - 1 downto 0);
    mul_ln35_9_fu_986_p1 <= sext_ln35_7_reg_1319(16 - 1 downto 0);
    mul_ln35_fu_381_p0 <= mul_ln35_fu_381_p00(5 - 1 downto 0);
    mul_ln35_fu_381_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4),9));
    mul_ln35_fu_381_p1 <= zext_ln35_reg_1019(7 - 1 downto 0);
    mul_ln35_fu_381_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln35_fu_381_p0) * unsigned(mul_ln35_fu_381_p1), 9));
    mul_ln41_1_fu_579_p0 <= zext_ln41_reg_1032(6 - 1 downto 0);
    mul_ln41_1_fu_579_p1 <= zext_ln41_2_reg_1095(5 - 1 downto 0);
    mul_ln41_1_fu_579_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln41_1_fu_579_p0) * unsigned(mul_ln41_1_fu_579_p1), 9));
    mul_ln41_fu_832_p0 <= zext_ln41_1_reg_1063_pp0_iter1_reg(5 - 1 downto 0);
    mul_ln41_fu_832_p1 <= zext_ln41_reg_1032(6 - 1 downto 0);
    mul_ln41_fu_832_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln41_fu_832_p0) * unsigned(mul_ln41_fu_832_p1), 9));
    mul_ln5_fu_357_p0 <= mul_ln5_fu_357_p00(5 - 1 downto 0);
    mul_ln5_fu_357_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_46_fu_345_p1),10));
    mul_ln5_fu_357_p1 <= mul_ln5_fu_357_p10(5 - 1 downto 0);
    mul_ln5_fu_357_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_341_p1),10));
    mul_ln5_fu_357_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln5_fu_357_p0) * unsigned(mul_ln5_fu_357_p1), 10));
    out_d_fu_401_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4));
    out_h_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln29_fu_412_p3));
    out_w_0_mid2_fu_469_p3 <= 
        ap_const_lv5_0 when (empty_48_fu_463_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_304_p4;
    out_w_fu_550_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(out_w_0_mid2_reg_1111));
    output_r_address0 <= zext_ln41_3_fu_936_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(unsigned(add_ln41_8_reg_1394) + unsigned(add_ln41_4_fu_926_p2));

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln22_reg_1073_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln22_reg_1073_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln23_1_fu_724_p3 <= 
        ap_const_lv10_1 when (icmp_ln23_reg_1082(0) = '1') else 
        add_ln23_5_reg_1130;
    select_ln23_fu_633_p3 <= 
        out_h_reg_1106 when (select_ln29_18_reg_1100(0) = '1') else 
        select_ln29_reg_1090;
    select_ln29_13_fu_569_p3 <= 
        out_d_reg_1077 when (icmp_ln23_reg_1082(0) = '1') else 
        out_d_0_reg_266;
    select_ln29_14_fu_429_p3 <= 
        mul_ln35_1_fu_424_p2 when (icmp_ln23_fu_407_p2(0) = '1') else 
        mul_ln35_fu_381_p2;
    select_ln29_15_fu_841_p3 <= 
        mul_ln41_1_reg_1221 when (icmp_ln23_reg_1082_pp0_iter1_reg(0) = '1') else 
        mul_ln41_fu_832_p2;
    select_ln29_16_fu_437_p3 <= 
        mul_ln35_1_fu_424_p2 when (icmp_ln23_fu_407_p2(0) = '1') else 
        tmp_0_0_fu_390_p2;
    select_ln29_17_fu_847_p3 <= 
        mul_ln41_1_reg_1221 when (icmp_ln23_reg_1082_pp0_iter1_reg(0) = '1') else 
        tmp6_fu_836_p2;
    select_ln29_18_fu_450_p3 <= 
        icmp_ln24_reg_1058 when (icmp_ln23_fu_407_p2(0) = '1') else 
        icmp_ln24_4_fu_445_p2;
    select_ln29_fu_412_p3 <= 
        ap_const_lv5_0 when (icmp_ln23_fu_407_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_293_p4;
        sext_ln35_13_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

        sext_ln35_1_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_642_p5),30));

        sext_ln35_3_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_667_p5),30));

        sext_ln35_5_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1279),30));

        sext_ln35_7_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_1284),30));

    tmp5_0_0_mid2_fu_504_p0 <= zext_ln35_1_cast14_reg_1025(7 - 1 downto 0);
    tmp5_0_0_mid2_fu_504_p1 <= tmp5_0_0_mid2_fu_504_p10(9 - 1 downto 0);
    tmp5_0_0_mid2_fu_504_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_mid2_v_v_reg_1123),14));
    tmp5_0_0_mid2_fu_504_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_mid2_fu_504_p0) * unsigned(tmp5_0_0_mid2_fu_504_p1), 14));
    tmp5_0_0_mid2_v_v_fu_487_p3 <= 
        tmp_0_0_mid1_fu_481_p2 when (select_ln29_18_fu_450_p3(0) = '1') else 
        select_ln29_16_fu_437_p3;
    tmp5_1_0_mid2_fu_518_p0 <= zext_ln35_1_cast14_reg_1025(7 - 1 downto 0);
    tmp5_1_0_mid2_fu_518_p1 <= tmp5_1_0_mid2_fu_518_p10(9 - 1 downto 0);
    tmp5_1_0_mid2_fu_518_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_1_0_mid2_v_v_fu_509_p2),14));
    tmp5_1_0_mid2_fu_518_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_1_0_mid2_fu_518_p0) * unsigned(tmp5_1_0_mid2_fu_518_p1), 14));
    tmp5_1_0_mid2_v_v_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp5_0_0_mid2_v_v_reg_1123));
    tmp5_2_0_mid2_fu_532_p0 <= zext_ln35_1_cast14_reg_1025(7 - 1 downto 0);
    tmp5_2_0_mid2_fu_532_p1 <= tmp5_2_0_mid2_fu_532_p10(9 - 1 downto 0);
    tmp5_2_0_mid2_fu_532_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_2_0_mid2_v_v_fu_523_p2),14));
    tmp5_2_0_mid2_fu_532_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_2_0_mid2_fu_532_p0) * unsigned(tmp5_2_0_mid2_fu_532_p1), 14));
    tmp5_2_0_mid2_v_v_fu_523_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(tmp5_0_0_mid2_v_v_reg_1123));
    tmp6_fu_836_p2 <= std_logic_vector(unsigned(mul_ln41_fu_832_p2) + unsigned(zext_ln35_3_cast_reg_1068_pp0_iter1_reg));
    tmp6_mid1_fu_853_p2 <= std_logic_vector(unsigned(zext_ln35_3_cast_mid_reg_1118_pp0_iter1_reg) + unsigned(select_ln29_15_fu_841_p3));
    tmp7_mid2_v_v_fu_858_p3 <= 
        tmp6_mid1_fu_853_p2 when (select_ln29_18_reg_1100_pp0_iter1_reg(0) = '1') else 
        select_ln29_17_fu_847_p3;
    tmp_0_0_fu_390_p2 <= std_logic_vector(unsigned(mul_ln35_fu_381_p2) + unsigned(zext_ln35_3_cast_fu_386_p1));
    tmp_0_0_mid1_fu_481_p2 <= std_logic_vector(unsigned(zext_ln35_3_cast_mid_fu_477_p1) + unsigned(select_ln29_14_fu_429_p3));
    tmp_2_fu_688_p4 <= (trunc_ln29_reg_1214 xor ap_const_lv2_2);
    tmp_3_fu_697_p4 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln29_reg_1214));
    tmp_4_fu_363_p3 <= (mul_ln5_fu_357_p2 & ap_const_lv4_0);
    trunc_ln29_fu_575_p1 <= select_ln29_13_fu_569_p3(2 - 1 downto 0);
    zext_ln29_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_13_reg_1208),64));
    zext_ln35_10_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_8_fu_766_p2),64));
    zext_ln35_11_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_9_fu_775_p2),64));
    zext_ln35_12_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_10_reg_1339),64));
    zext_ln35_1_cast14_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln35_13_fu_321_p1),14));
    zext_ln35_1_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1111),14));
    zext_ln35_2_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_540_p2),64));
    zext_ln35_3_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_293_p4),9));
    zext_ln35_3_cast_mid_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_457_p2),9));
    zext_ln35_3_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_550_p2),14));
    zext_ln35_4_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_2_fu_559_p2),64));
    zext_ln35_5_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_3_fu_589_p2),14));
    zext_ln35_6_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_4_fu_598_p2),64));
    zext_ln35_7_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_5_fu_608_p2),64));
    zext_ln35_8_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_6_fu_706_p2),64));
    zext_ln35_9_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_7_fu_715_p2),64));
    zext_ln35_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln41_1_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln41_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4),9));
    zext_ln41_2_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_401_p2),9));
    zext_ln41_3_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_reg_1389),64));
    zext_ln41_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
