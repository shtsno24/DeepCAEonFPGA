-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln37_fu_288_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_reg_599 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_6_cast_fu_292_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln37_6_cast_reg_604 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln45_fu_296_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln45_reg_609 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln45_1_cast_fu_300_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln45_1_cast_reg_614 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_56_fu_304_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_56_reg_619 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_57_fu_308_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_57_reg_624 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln22_fu_312_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln22_reg_629 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln22_1_fu_317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln22_1_reg_634 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_328_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_642 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_346_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln22_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_356_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_655 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln24_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_4_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_4_reg_670 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_h_fu_405_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_678 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp8_fu_425_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_reg_683 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln31_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_435_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_691 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln35_fu_441_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_reg_696 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln32_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_h_fu_451_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_h_reg_704 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln37_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln37_reg_709 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln35_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_499_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp6_reg_714 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_w_fu_524_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_reg_722 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln36_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_5_fu_554_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_5_reg_732 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_load_reg_737 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln9_reg_747 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buffer_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal empty_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_ce0 : STD_LOGIC;
    signal empty_we0 : STD_LOGIC;
    signal empty_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_0_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_180 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_192 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_h_0_reg_216 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_228 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_h_0_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_1_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_w_0_reg_273 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln26_5_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_14_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_12_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4_fu_284_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln26_fu_334_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_338_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_2_fu_362_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_366_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_4_fu_372_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_fu_376_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln37_7_cast_fu_411_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_fu_415_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_fu_425_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_fu_425_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln4_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln37_10_fu_469_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln37_9_fu_457_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_fu_479_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp2_cast_fu_485_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_489_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_fu_499_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_fu_499_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln45_fu_509_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln37_11_fu_530_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln37_13_fu_540_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln37_4_fu_544_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln37_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln37_4_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp6_fu_499_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp8_fu_425_p00 : STD_LOGIC_VECTOR (13 downto 0);

    component network_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component depthwise_conv2d_fix_2_empty IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    empty_U : component depthwise_conv2d_fix_2_empty
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_address0,
        ce0 => empty_ce0,
        we0 => empty_we0,
        d0 => kernel_0_q0,
        q0 => empty_q0);

    network_mul_mul_16s_16s_32_1_1_U24 : component network_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => empty_q0,
        din1 => input_load_reg_737,
        dout => mul_ln37_fu_592_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln36_fu_518_p2 = ap_const_lv1_1))) then 
                buffer_0_reg_240 <= buffer_1_reg_261;
            elsif (((icmp_ln32_fu_430_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                buffer_0_reg_240 <= buffer_4_reg_670;
            end if; 
        end if;
    end process;

    buffer_1_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                buffer_1_reg_261 <= buffer_0_reg_240;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                buffer_1_reg_261 <= buffer_fu_586_p2;
            end if; 
        end if;
    end process;

    i_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_204 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_204 <= i_reg_655;
            end if; 
        end if;
    end process;

    k_h_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln36_fu_518_p2 = ap_const_lv1_1))) then 
                k_h_0_reg_250 <= k_h_reg_704;
            elsif (((icmp_ln32_fu_430_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k_h_0_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_w_0_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                k_w_0_reg_273 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_w_0_reg_273 <= k_w_reg_722;
            end if; 
        end if;
    end process;

    out_d_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_400_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_168 <= out_d_reg_642;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_168 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln32_fu_430_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_216 <= out_h_reg_678;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_h_0_reg_216 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                out_w_0_reg_228 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_445_p2 = ap_const_lv1_1))) then 
                out_w_0_reg_228 <= out_w_reg_691;
            end if; 
        end if;
    end process;

    phi_mul2_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_400_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_192 <= add_ln22_reg_629;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_192 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_400_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_180 <= add_ln22_1_reg_634;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_180 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln22_1_reg_634 <= add_ln22_1_fu_317_p2;
                add_ln22_reg_629 <= add_ln22_fu_312_p2;
                out_d_reg_642 <= out_d_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_518_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln37_5_reg_732 <= add_ln37_5_fu_554_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                buffer_4_reg_670 <= buffer_4_fu_396_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_56_reg_619 <= empty_56_fu_304_p1;
                empty_57_reg_624 <= empty_57_fu_308_p1;
                    zext_ln37_6_cast_reg_604(6 downto 0) <= zext_ln37_6_cast_fu_292_p1(6 downto 0);
                    zext_ln37_reg_599(6 downto 0) <= zext_ln37_fu_288_p1(6 downto 0);
                    zext_ln45_1_cast_reg_614(5 downto 0) <= zext_ln45_1_cast_fu_300_p1(5 downto 0);
                    zext_ln45_reg_609(5 downto 0) <= zext_ln45_fu_296_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_655 <= i_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_reg_737 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                k_h_reg_704 <= k_h_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                k_w_reg_722 <= k_w_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_h_reg_678 <= out_h_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                out_w_reg_691 <= out_w_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                sub_ln37_reg_709 <= sub_ln37_fu_473_p2;
                tmp6_reg_714 <= tmp6_fu_499_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp8_reg_683 <= tmp8_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln9_reg_747 <= mul_ln37_fu_592_p2(31 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_322_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln26_reg_647(6 downto 3) <= zext_ln26_fu_346_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_430_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln35_reg_696(4 downto 0) <= zext_ln35_fu_441_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln37_reg_599(8 downto 7) <= "00";
    zext_ln37_6_cast_reg_604(13 downto 7) <= "0000000";
    zext_ln45_reg_609(8 downto 6) <= "000";
    zext_ln45_1_cast_reg_614(13 downto 6) <= "00000000";
    zext_ln26_reg_647(2 downto 0) <= "000";
    zext_ln26_reg_647(7) <= '0';
    zext_ln35_reg_696(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_322_p2, ap_CS_fsm_state3, icmp_ln24_fu_350_p2, ap_CS_fsm_state6, icmp_ln31_fu_400_p2, ap_CS_fsm_state7, icmp_ln32_fu_430_p2, ap_CS_fsm_state8, icmp_ln35_fu_445_p2, ap_CS_fsm_state9, icmp_ln36_fu_518_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln24_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_400_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln32_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_445_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln36_fu_518_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_1_fu_317_p2 <= std_logic_vector(unsigned(phi_mul_reg_180) + unsigned(zext_ln37_reg_599));
    add_ln22_fu_312_p2 <= std_logic_vector(unsigned(phi_mul2_reg_192) + unsigned(zext_ln45_reg_609));
    add_ln26_1_fu_366_p2 <= std_logic_vector(unsigned(out_d_0_reg_168) + unsigned(zext_ln26_2_fu_362_p1));
    add_ln26_fu_376_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_372_p1) + unsigned(zext_ln26_reg_647));
    add_ln37_4_fu_544_p2 <= std_logic_vector(unsigned(zext_ln37_13_fu_540_p1) + unsigned(tmp6_reg_714));
    add_ln37_5_fu_554_p2 <= std_logic_vector(unsigned(sub_ln37_reg_709) + unsigned(zext_ln37_11_fu_530_p1));
    add_ln37_fu_534_p2 <= std_logic_vector(unsigned(zext_ln37_11_fu_530_p1) + unsigned(out_w_0_reg_228));
    add_ln45_fu_509_p2 <= std_logic_vector(unsigned(tmp8_reg_683) + unsigned(zext_ln35_reg_696));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_322_p2)
    begin
        if ((((icmp_ln22_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_322_p2)
    begin
        if (((icmp_ln22_fu_322_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln29_fu_386_p1(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        buffer_4_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_q0),32));

    buffer_fu_586_p2 <= std_logic_vector(signed(sext_ln37_4_fu_583_p1) + signed(buffer_1_reg_261));
    empty_56_fu_304_p1 <= output_width(5 - 1 downto 0);
    empty_57_fu_308_p1 <= output_height(5 - 1 downto 0);

    empty_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4, zext_ln26_3_fu_391_p1, zext_ln37_12_fu_562_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            empty_address0 <= zext_ln37_12_fu_562_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            empty_address0 <= zext_ln26_3_fu_391_p1(4 - 1 downto 0);
        else 
            empty_address0 <= "XXXX";
        end if; 
    end process;


    empty_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            empty_ce0 <= ap_const_logic_1;
        else 
            empty_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            empty_we0 <= ap_const_logic_1;
        else 
            empty_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_356_p2 <= std_logic_vector(unsigned(i_0_reg_204) + unsigned(ap_const_lv4_1));
    icmp_ln22_fu_322_p2 <= "1" when (out_d_0_reg_168 = ap_const_lv5_10) else "0";
    icmp_ln24_fu_350_p2 <= "1" when (i_0_reg_204 = ap_const_lv4_9) else "0";
    icmp_ln31_fu_400_p2 <= "1" when (out_h_0_reg_216 = empty_57_reg_624) else "0";
    icmp_ln32_fu_430_p2 <= "1" when (out_w_0_reg_228 = empty_56_reg_619) else "0";
    icmp_ln35_fu_445_p2 <= "1" when (k_h_0_reg_250 = ap_const_lv2_3) else "0";
    icmp_ln36_fu_518_p2 <= "1" when (k_w_0_reg_273 = ap_const_lv2_3) else "0";
    input_r_address0 <= zext_ln37_14_fu_549_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_h_fu_451_p2 <= std_logic_vector(unsigned(k_h_0_reg_250) + unsigned(ap_const_lv2_1));
    k_w_fu_524_p2 <= std_logic_vector(unsigned(k_w_0_reg_273) + unsigned(ap_const_lv2_1));
    kernel_0_address0 <= zext_ln26_5_fu_381_p1(8 - 1 downto 0);

    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_d_fu_328_p2 <= std_logic_vector(unsigned(out_d_0_reg_168) + unsigned(ap_const_lv5_1));
    out_h_fu_405_p2 <= std_logic_vector(unsigned(out_h_0_reg_216) + unsigned(ap_const_lv5_1));
    out_w_fu_435_p2 <= std_logic_vector(unsigned(out_w_0_reg_228) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln45_1_fu_513_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer_0_reg_240(16 - 1 downto 0);

    output_r_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln35_fu_445_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_445_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln37_4_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_reg_747),32));

        sext_ln37_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_5_reg_732),32));

        sext_ln4_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    shl_ln4_fu_461_p3 <= (k_h_0_reg_250 & ap_const_lv2_0);
    shl_ln_fu_338_p3 <= (trunc_ln26_fu_334_p1 & ap_const_lv3_0);
    sub_ln37_fu_473_p2 <= std_logic_vector(unsigned(zext_ln37_10_fu_469_p1) - unsigned(zext_ln37_9_fu_457_p1));
    tmp2_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_479_p2),9));
    tmp2_fu_479_p2 <= std_logic_vector(unsigned(zext_ln37_9_fu_457_p1) + unsigned(out_h_0_reg_216));
    tmp6_fu_499_p0 <= zext_ln37_6_cast_reg_604(7 - 1 downto 0);
    tmp6_fu_499_p1 <= tmp6_fu_499_p10(9 - 1 downto 0);
    tmp6_fu_499_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_489_p2),14));
    tmp6_fu_499_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_499_p0) * unsigned(tmp6_fu_499_p1), 14));
    tmp7_fu_415_p2 <= std_logic_vector(unsigned(phi_mul2_reg_192) + unsigned(zext_ln37_7_cast_fu_411_p1));
    tmp8_fu_425_p0 <= tmp8_fu_425_p00(9 - 1 downto 0);
    tmp8_fu_425_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_415_p2),14));
    tmp8_fu_425_p1 <= zext_ln45_1_cast_reg_614(6 - 1 downto 0);
    tmp8_fu_425_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_fu_425_p0) * unsigned(tmp8_fu_425_p1), 14));
    tmp_fu_489_p2 <= std_logic_vector(unsigned(phi_mul_reg_180) + unsigned(tmp2_cast_fu_485_p1));
    trunc_ln26_fu_334_p1 <= out_d_0_reg_168(4 - 1 downto 0);
    zext_ln26_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_204),5));
    zext_ln26_3_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_204),64));
    zext_ln26_4_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_366_p2),8));
    zext_ln26_5_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_376_p2),64));
    zext_ln26_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_338_p3),8));
    zext_ln29_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_168),64));
    zext_ln35_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_228),14));
    zext_ln37_10_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln4_fu_461_p3),5));
    zext_ln37_11_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_0_reg_273),5));
    zext_ln37_12_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_fu_559_p1),64));
    zext_ln37_13_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_534_p2),14));
    zext_ln37_14_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_4_fu_544_p2),64));
    zext_ln37_6_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln4_fu_284_p1),14));
    zext_ln37_7_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_216),9));
    zext_ln37_9_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_0_reg_250),5));
    zext_ln37_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln45_1_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln45_1_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_509_p2),64));
    zext_ln45_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
