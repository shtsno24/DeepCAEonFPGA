// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_pp1_stage0 = 12'd64;
parameter    ap_ST_fsm_state9 = 12'd128;
parameter    ap_ST_fsm_state10 = 12'd256;
parameter    ap_ST_fsm_state11 = 12'd512;
parameter    ap_ST_fsm_state12 = 12'd1024;
parameter    ap_ST_fsm_state13 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] o_count_3_reg_300;
reg   [13:0] i_count_2_reg_311;
wire  signed [6:0] sext_ln5_1_fu_340_p1;
reg  signed [6:0] sext_ln5_1_reg_700;
wire   [4:0] trunc_ln13_fu_344_p1;
reg   [4:0] trunc_ln13_reg_705;
wire   [4:0] add_ln13_fu_348_p2;
reg   [4:0] add_ln13_reg_712;
wire   [11:0] mul_ln13_1_fu_362_p2;
reg   [11:0] mul_ln13_1_reg_717;
wire   [9:0] empty_fu_368_p1;
reg   [9:0] empty_reg_722;
wire   [4:0] trunc_ln13_1_fu_372_p1;
reg   [4:0] trunc_ln13_1_reg_728;
wire   [4:0] empty_25_fu_376_p1;
reg   [4:0] empty_25_reg_733;
wire   [13:0] zext_ln13_fu_383_p1;
reg   [13:0] zext_ln13_reg_738;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln13_2_fu_386_p1;
reg   [13:0] zext_ln13_2_reg_745;
wire   [13:0] mul_ln13_fu_393_p2;
reg   [13:0] mul_ln13_reg_750;
wire   [15:0] zext_ln13_5_fu_399_p1;
reg   [15:0] zext_ln13_5_reg_755;
wire   [4:0] empty_23_fu_402_p2;
wire   [15:0] p_cast9_fu_407_p1;
reg   [15:0] p_cast9_reg_765;
wire   [13:0] p_cast6_fu_419_p1;
wire   [15:0] p_cast5_fu_428_p1;
reg   [15:0] p_cast5_reg_775;
wire   [13:0] zext_ln13_6_fu_447_p1;
reg   [13:0] zext_ln13_6_reg_780;
wire   [13:0] zext_ln13_7_fu_456_p1;
wire   [13:0] zext_ln13_9_fu_475_p1;
wire   [4:0] add_ln13_12_fu_489_p2;
wire   [4:0] add_ln13_13_fu_495_p2;
reg   [4:0] add_ln13_13_reg_801;
wire   [4:0] empty_26_fu_501_p1;
reg   [4:0] empty_26_reg_807;
wire   [13:0] zext_ln13_10_fu_516_p1;
reg   [13:0] zext_ln13_10_reg_812;
wire   [0:0] icmp_ln13_fu_520_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] depth_fu_525_p2;
reg   [4:0] depth_reg_821;
wire   [15:0] add_ln20_fu_546_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln15_fu_535_p2;
wire   [13:0] i_count_fu_552_p2;
reg   [13:0] i_count_reg_834;
wire    ap_CS_fsm_state5;
wire   [15:0] add_ln23_1_fu_562_p2;
reg   [15:0] add_ln23_1_reg_839;
wire   [0:0] icmp_ln23_fu_567_p2;
wire    ap_CS_fsm_state6;
wire   [4:0] height_fu_572_p2;
reg   [4:0] height_reg_849;
wire   [13:0] add_ln30_fu_578_p2;
reg   [13:0] add_ln30_reg_854;
wire   [15:0] add_ln20_1_fu_583_p2;
reg   [15:0] add_ln20_1_reg_859;
wire   [0:0] icmp_ln25_fu_587_p2;
reg   [0:0] icmp_ln25_reg_864;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [13:0] add_ln30_1_fu_598_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [13:0] o_count_7_fu_604_p2;
reg   [13:0] o_count_7_reg_878;
wire   [13:0] add_ln20_2_fu_615_p2;
reg   [13:0] add_ln20_2_reg_883;
wire    ap_CS_fsm_state9;
wire   [13:0] o_count_8_fu_631_p2;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln34_fu_620_p2;
wire   [13:0] add_ln23_3_fu_637_p2;
wire    ap_CS_fsm_state11;
wire   [13:0] add_ln23_4_fu_642_p2;
wire   [15:0] o_count_6_fu_662_p2;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln43_fu_651_p2;
wire   [13:0] add_ln13_6_fu_668_p2;
wire    ap_CS_fsm_state13;
wire   [13:0] add_ln13_7_fu_673_p2;
wire   [13:0] add_ln13_10_fu_678_p2;
wire   [4:0] add_ln13_15_fu_683_p2;
wire   [4:0] add_ln13_16_fu_688_p2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg   [4:0] indvars_iv2_reg_150;
reg   [4:0] indvars_iv_reg_160;
reg   [13:0] indvars_iv1_reg_170;
reg   [13:0] phi_ln13_reg_180;
reg   [13:0] indvars_iv10_reg_190;
reg   [15:0] o_count_0_reg_200;
reg   [13:0] i_count_0_reg_212;
reg   [4:0] depth_0_reg_224;
reg   [15:0] o_count_1_reg_235;
reg   [13:0] phi_ln13_1_reg_245;
reg   [13:0] o_count_reg_256;
reg   [13:0] o_count_2_reg_267;
reg   [13:0] i_count_1_reg_278;
reg   [4:0] height_0_reg_289;
reg   [13:0] ap_phi_mux_o_count_3_phi_fu_303_p4;
wire    ap_block_pp1_stage0;
reg   [13:0] o_count_4_reg_321;
reg   [15:0] o_count_5_reg_331;
wire   [63:0] zext_ln19_fu_541_p1;
wire   [63:0] zext_ln29_fu_593_p1;
wire   [63:0] zext_ln29_6_fu_610_p1;
wire   [63:0] zext_ln38_fu_626_p1;
wire   [63:0] zext_ln47_fu_657_p1;
wire  signed [5:0] sext_ln5_1_fu_340_p0;
wire  signed [5:0] trunc_ln13_fu_344_p0;
wire   [4:0] mul_ln13_1_fu_362_p0;
wire   [6:0] mul_ln13_1_fu_362_p1;
wire  signed [5:0] empty_25_fu_376_p0;
wire  signed [5:0] sext_ln5_fu_380_p0;
wire  signed [6:0] sext_ln5_fu_380_p1;
wire   [6:0] mul_ln13_fu_393_p0;
wire   [6:0] mul_ln13_fu_393_p1;
wire   [4:0] empty_24_fu_423_p2;
wire   [9:0] p_cast7_fu_415_p1;
wire   [9:0] add_ln13_1_fu_436_p2;
wire   [9:0] p_cast4_fu_432_p1;
wire   [9:0] add_ln13_2_fu_441_p2;
wire   [5:0] p_cast8_fu_411_p1;
wire  signed [5:0] add_ln13_3_fu_451_p1;
wire   [5:0] add_ln13_3_fu_451_p2;
wire  signed [5:0] shl_ln13_fu_460_p0;
wire   [5:0] shl_ln13_fu_460_p2;
wire   [5:0] add_ln13_4_fu_469_p2;
wire   [4:0] add_ln13_5_fu_479_p2;
wire   [4:0] add_ln13_11_fu_484_p2;
wire   [9:0] zext_ln13_8_fu_465_p1;
wire   [9:0] add_ln13_8_fu_505_p2;
wire   [9:0] add_ln13_9_fu_510_p2;
wire   [4:0] trunc_ln15_fu_531_p1;
wire   [15:0] add_ln23_fu_557_p2;
wire   [4:0] trunc_ln43_fu_647_p1;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [11:0] mul_ln13_1_fu_362_p00;
wire   [11:0] mul_ln13_1_fu_362_p10;
wire   [13:0] mul_ln13_fu_393_p00;
wire   [13:0] mul_ln13_fu_393_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_567_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_567_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_0_reg_224 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        depth_0_reg_224 <= depth_reg_821;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        height_0_reg_289 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        height_0_reg_289 <= height_reg_849;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_0_reg_212 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_count_0_reg_212 <= i_count_reg_834;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_count_1_reg_278 <= i_count_0_reg_212;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_count_1_reg_278 <= add_ln30_reg_854;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_fu_587_p2 == 1'd0))) begin
        i_count_2_reg_311 <= add_ln30_1_fu_598_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_567_p2 == 1'd0))) begin
        i_count_2_reg_311 <= i_count_1_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv10_reg_190 <= p_cast6_fu_419_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv10_reg_190 <= add_ln13_6_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv1_reg_170 <= zext_ln13_9_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv1_reg_170 <= add_ln13_10_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv2_reg_150 <= empty_23_fu_402_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv2_reg_150 <= add_ln13_16_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_160 <= add_ln13_12_fu_489_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        indvars_iv_reg_160 <= add_ln13_15_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_count_0_reg_200 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        o_count_0_reg_200 <= add_ln20_1_reg_859;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_520_p2 == 1'd0))) begin
        o_count_1_reg_235 <= o_count_0_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_535_p2 == 1'd0))) begin
        o_count_1_reg_235 <= add_ln20_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o_count_2_reg_267 <= indvars_iv10_reg_190;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        o_count_2_reg_267 <= add_ln20_2_reg_883;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_reg_864 == 1'd0))) begin
        o_count_3_reg_300 <= o_count_7_reg_878;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_567_p2 == 1'd0))) begin
        o_count_3_reg_300 <= o_count_2_reg_267;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln34_fu_620_p2 == 1'd0))) begin
        o_count_4_reg_321 <= o_count_8_fu_631_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        o_count_4_reg_321 <= o_count_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_fu_651_p2 == 1'd0))) begin
        o_count_5_reg_331 <= o_count_6_fu_662_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_567_p2 == 1'd1))) begin
        o_count_5_reg_331 <= add_ln23_1_reg_839;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o_count_reg_256 <= phi_ln13_reg_180;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        o_count_reg_256 <= add_ln23_3_fu_637_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_ln13_1_reg_245 <= indvars_iv1_reg_170;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_ln13_1_reg_245 <= add_ln23_4_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln13_reg_180 <= zext_ln13_7_fu_456_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        phi_ln13_reg_180 <= add_ln13_7_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln13_13_reg_801 <= add_ln13_13_fu_495_p2;
        empty_26_reg_807 <= empty_26_fu_501_p1;
        mul_ln13_reg_750 <= mul_ln13_fu_393_p2;
        p_cast5_reg_775[4 : 0] <= p_cast5_fu_428_p1[4 : 0];
        p_cast9_reg_765[4 : 0] <= p_cast9_fu_407_p1[4 : 0];
        zext_ln13_10_reg_812[9 : 0] <= zext_ln13_10_fu_516_p1[9 : 0];
        zext_ln13_2_reg_745[6 : 0] <= zext_ln13_2_fu_386_p1[6 : 0];
        zext_ln13_5_reg_755[11 : 0] <= zext_ln13_5_fu_399_p1[11 : 0];
        zext_ln13_6_reg_780[9 : 0] <= zext_ln13_6_fu_447_p1[9 : 0];
        zext_ln13_reg_738[4 : 0] <= zext_ln13_fu_383_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln13_reg_712 <= add_ln13_fu_348_p2;
        empty_25_reg_733 <= empty_25_fu_376_p1;
        empty_reg_722 <= empty_fu_368_p1;
        mul_ln13_1_reg_717 <= mul_ln13_1_fu_362_p2;
        sext_ln5_1_reg_700 <= sext_ln5_1_fu_340_p1;
        trunc_ln13_1_reg_728 <= trunc_ln13_1_fu_372_p1;
        trunc_ln13_reg_705 <= trunc_ln13_fu_344_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_567_p2 == 1'd1))) begin
        add_ln20_1_reg_859 <= add_ln20_1_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln20_2_reg_883 <= add_ln20_2_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln23_1_reg_839 <= add_ln23_1_fu_562_p2;
        i_count_reg_834 <= i_count_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_567_p2 == 1'd0))) begin
        add_ln30_reg_854 <= add_ln30_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_reg_821 <= depth_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        height_reg_849 <= height_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln25_reg_864 <= icmp_ln25_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_fu_587_p2 == 1'd0))) begin
        o_count_7_reg_878 <= o_count_7_fu_604_p2;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_587_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_520_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln25_reg_864 == 1'd0))) begin
        ap_phi_mux_o_count_3_phi_fu_303_p4 = o_count_7_reg_878;
    end else begin
        ap_phi_mux_o_count_3_phi_fu_303_p4 = o_count_3_reg_300;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_520_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_address0 = zext_ln47_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_address0 = zext_ln38_fu_626_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_r_address0 = zext_ln29_6_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = zext_ln19_fu_541_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_fu_651_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln34_fu_620_p2 == 1'd0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_reg_864 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_535_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_520_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_535_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_567_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_587_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_587_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln34_fu_620_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln43_fu_651_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_10_fu_678_p2 = (indvars_iv1_reg_170 + zext_ln13_10_reg_812);

assign add_ln13_11_fu_484_p2 = (trunc_ln13_reg_705 + add_ln13_5_fu_479_p2);

assign add_ln13_12_fu_489_p2 = (5'd1 + add_ln13_11_fu_484_p2);

assign add_ln13_13_fu_495_p2 = (add_ln13_5_fu_479_p2 + empty_24_fu_423_p2);

assign add_ln13_15_fu_683_p2 = (add_ln13_13_reg_801 + indvars_iv_reg_160);

assign add_ln13_16_fu_688_p2 = (add_ln13_13_reg_801 + indvars_iv2_reg_150);

assign add_ln13_1_fu_436_p2 = (p_cast7_fu_415_p1 + empty_reg_722);

assign add_ln13_2_fu_441_p2 = (add_ln13_1_fu_436_p2 + p_cast4_fu_432_p1);

assign add_ln13_3_fu_451_p1 = input_width;

assign add_ln13_3_fu_451_p2 = ($signed(p_cast8_fu_411_p1) + $signed(add_ln13_3_fu_451_p1));

assign add_ln13_4_fu_469_p2 = (6'd5 + shl_ln13_fu_460_p2);

assign add_ln13_5_fu_479_p2 = (trunc_ln13_1_reg_728 + empty_23_fu_402_p2);

assign add_ln13_6_fu_668_p2 = (zext_ln13_6_reg_780 + indvars_iv10_reg_190);

assign add_ln13_7_fu_673_p2 = (zext_ln13_6_reg_780 + phi_ln13_reg_180);

assign add_ln13_8_fu_505_p2 = (10'd4 + empty_reg_722);

assign add_ln13_9_fu_510_p2 = (zext_ln13_8_fu_465_p1 + add_ln13_8_fu_505_p2);

assign add_ln13_fu_348_p2 = (5'd2 + trunc_ln13_fu_344_p1);

assign add_ln20_1_fu_583_p2 = (add_ln23_1_reg_839 + p_cast5_reg_775);

assign add_ln20_2_fu_615_p2 = (zext_ln13_reg_738 + o_count_2_reg_267);

assign add_ln20_fu_546_p2 = (o_count_1_reg_235 + 16'd1);

assign add_ln23_1_fu_562_p2 = (add_ln23_fu_557_p2 + zext_ln13_5_reg_755);

assign add_ln23_3_fu_637_p2 = (zext_ln13_reg_738 + o_count_reg_256);

assign add_ln23_4_fu_642_p2 = (zext_ln13_reg_738 + phi_ln13_1_reg_245);

assign add_ln23_fu_557_p2 = (p_cast9_reg_765 + o_count_0_reg_200);

assign add_ln30_1_fu_598_p2 = (i_count_2_reg_311 + 14'd1);

assign add_ln30_fu_578_p2 = (zext_ln13_2_reg_745 + i_count_1_reg_278);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign depth_fu_525_p2 = (depth_0_reg_224 + 5'd1);

assign empty_23_fu_402_p2 = (5'd3 + trunc_ln13_reg_705);

assign empty_24_fu_423_p2 = (5'd1 + trunc_ln13_reg_705);

assign empty_25_fu_376_p0 = input_height;

assign empty_25_fu_376_p1 = empty_25_fu_376_p0[4:0];

assign empty_26_fu_501_p1 = input_depth[4:0];

assign empty_fu_368_p1 = mul_ln13_1_fu_362_p2[9:0];

assign height_fu_572_p2 = (height_0_reg_289 + 5'd1);

assign i_count_fu_552_p2 = (mul_ln13_reg_750 + i_count_0_reg_212);

assign icmp_ln13_fu_520_p2 = ((depth_0_reg_224 == empty_26_reg_807) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_535_p2 = ((trunc_ln15_fu_531_p1 == indvars_iv2_reg_150) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_567_p2 = ((height_0_reg_289 == empty_25_reg_733) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_587_p2 = ((ap_phi_mux_o_count_3_phi_fu_303_p4 == o_count_reg_256) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_620_p2 = ((o_count_4_reg_321 == phi_ln13_1_reg_245) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_651_p2 = ((trunc_ln43_fu_647_p1 == indvars_iv_reg_160) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln29_fu_593_p1;

assign mul_ln13_1_fu_362_p0 = mul_ln13_1_fu_362_p00;

assign mul_ln13_1_fu_362_p00 = add_ln13_fu_348_p2;

assign mul_ln13_1_fu_362_p1 = mul_ln13_1_fu_362_p10;

assign mul_ln13_1_fu_362_p10 = $unsigned(sext_ln5_1_fu_340_p1);

assign mul_ln13_1_fu_362_p2 = (mul_ln13_1_fu_362_p0 * mul_ln13_1_fu_362_p1);

assign mul_ln13_fu_393_p0 = mul_ln13_fu_393_p00;

assign mul_ln13_fu_393_p00 = $unsigned(sext_ln5_fu_380_p1);

assign mul_ln13_fu_393_p1 = mul_ln13_fu_393_p10;

assign mul_ln13_fu_393_p10 = $unsigned(sext_ln5_1_reg_700);

assign mul_ln13_fu_393_p2 = (mul_ln13_fu_393_p0 * mul_ln13_fu_393_p1);

assign o_count_6_fu_662_p2 = (o_count_5_reg_331 + 16'd1);

assign o_count_7_fu_604_p2 = (ap_phi_mux_o_count_3_phi_fu_303_p4 + 14'd1);

assign o_count_8_fu_631_p2 = (o_count_4_reg_321 + 14'd1);

assign p_cast4_fu_432_p1 = empty_24_fu_423_p2;

assign p_cast5_fu_428_p1 = empty_24_fu_423_p2;

assign p_cast6_fu_419_p1 = empty_23_fu_402_p2;

assign p_cast7_fu_415_p1 = empty_23_fu_402_p2;

assign p_cast8_fu_411_p1 = empty_23_fu_402_p2;

assign p_cast9_fu_407_p1 = empty_23_fu_402_p2;

assign sext_ln5_1_fu_340_p0 = input_height;

assign sext_ln5_1_fu_340_p1 = sext_ln5_1_fu_340_p0;

assign sext_ln5_fu_380_p0 = input_width;

assign sext_ln5_fu_380_p1 = sext_ln5_fu_380_p0;

assign shl_ln13_fu_460_p0 = input_width;

assign shl_ln13_fu_460_p2 = shl_ln13_fu_460_p0 << 6'd1;

assign trunc_ln13_1_fu_372_p1 = mul_ln13_1_fu_362_p2[4:0];

assign trunc_ln13_fu_344_p0 = input_width;

assign trunc_ln13_fu_344_p1 = trunc_ln13_fu_344_p0[4:0];

assign trunc_ln15_fu_531_p1 = o_count_1_reg_235[4:0];

assign trunc_ln43_fu_647_p1 = o_count_5_reg_331[4:0];

assign zext_ln13_10_fu_516_p1 = add_ln13_9_fu_510_p2;

assign zext_ln13_2_fu_386_p1 = $unsigned(sext_ln5_fu_380_p1);

assign zext_ln13_5_fu_399_p1 = mul_ln13_1_reg_717;

assign zext_ln13_6_fu_447_p1 = add_ln13_2_fu_441_p2;

assign zext_ln13_7_fu_456_p1 = add_ln13_3_fu_451_p2;

assign zext_ln13_8_fu_465_p1 = shl_ln13_fu_460_p2;

assign zext_ln13_9_fu_475_p1 = add_ln13_4_fu_469_p2;

assign zext_ln13_fu_383_p1 = add_ln13_reg_712;

assign zext_ln19_fu_541_p1 = o_count_1_reg_235;

assign zext_ln29_6_fu_610_p1 = o_count_3_reg_300;

assign zext_ln29_fu_593_p1 = i_count_2_reg_311;

assign zext_ln38_fu_626_p1 = o_count_4_reg_321;

assign zext_ln47_fu_657_p1 = o_count_5_reg_331;

always @ (posedge ap_clk) begin
    zext_ln13_reg_738[13:5] <= 9'b000000000;
    zext_ln13_2_reg_745[13:7] <= 7'b0000000;
    zext_ln13_5_reg_755[15:12] <= 4'b0000;
    p_cast9_reg_765[15:5] <= 11'b00000000000;
    p_cast5_reg_775[15:5] <= 11'b00000000000;
    zext_ln13_6_reg_780[13:10] <= 4'b0000;
    zext_ln13_10_reg_812[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
