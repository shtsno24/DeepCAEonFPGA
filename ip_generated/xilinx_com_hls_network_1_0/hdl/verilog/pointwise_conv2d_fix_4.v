// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_4_w_s_address0;
reg    SeparableConv2D_4_w_s_ce0;
wire   [14:0] SeparableConv2D_4_w_s_q0;
wire   [4:0] out_h_fu_149_p2;
reg   [4:0] out_h_reg_327;
wire    ap_CS_fsm_state2;
wire  signed [10:0] sub_ln23_fu_179_p2;
reg  signed [10:0] sub_ln23_reg_332;
wire   [0:0] icmp_ln17_fu_143_p2;
wire  signed [14:0] sext_ln23_fu_185_p1;
reg  signed [14:0] sext_ln23_reg_337;
wire   [4:0] out_w_fu_195_p2;
reg   [4:0] out_w_reg_345;
wire    ap_CS_fsm_state3;
wire   [10:0] zext_ln20_fu_201_p1;
reg   [10:0] zext_ln20_reg_350;
wire   [0:0] icmp_ln18_fu_189_p2;
wire   [13:0] zext_ln20_1_fu_205_p1;
reg   [13:0] zext_ln20_1_reg_355;
wire   [4:0] in_d_fu_215_p2;
reg   [4:0] in_d_reg_363;
wire    ap_CS_fsm_state4;
wire   [13:0] add_ln23_2_fu_225_p2;
reg   [13:0] add_ln23_2_reg_368;
wire   [0:0] icmp_ln20_fu_209_p2;
reg  signed [15:0] input_load_reg_383;
wire    ap_CS_fsm_state5;
reg  signed [14:0] SeparableConv2D_4_w_3_reg_388;
reg   [15:0] trunc_ln1_reg_393;
wire    ap_CS_fsm_state6;
wire   [15:0] buffer_fu_312_p2;
wire    ap_CS_fsm_state7;
reg   [4:0] out_h_0_reg_87;
reg   [4:0] out_w_0_reg_98;
reg   [15:0] buffer_0_reg_109;
reg   [4:0] in_d_0_reg_121;
reg   [13:0] phi_mul_reg_132;
wire   [63:0] zext_ln23_3_fu_249_p1;
wire   [63:0] zext_ln23_4_fu_254_p1;
wire   [63:0] zext_ln30_fu_292_p1;
wire   [9:0] shl_ln_fu_155_p3;
wire   [6:0] shl_ln23_7_fu_167_p3;
wire   [10:0] zext_ln23_fu_163_p1;
wire   [10:0] zext_ln23_1_fu_175_p1;
wire   [13:0] add_ln23_fu_231_p2;
wire   [14:0] zext_ln23_2_fu_236_p1;
wire   [14:0] add_ln23_1_fu_240_p2;
wire  signed [31:0] sext_ln23_1_fu_245_p1;
wire   [3:0] trunc_ln23_fu_221_p1;
wire   [0:0] tmp_fu_263_p3;
wire   [14:0] trunc_ln20_fu_259_p1;
wire   [14:0] select_ln27_fu_271_p3;
wire   [10:0] add_ln30_fu_284_p2;
wire  signed [31:0] sext_ln30_fu_288_p1;
wire  signed [29:0] mul_ln23_fu_317_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

pointwise_conv2d_fix_4_SeparableConv2D_4_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_4_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_4_w_s_address0),
    .ce0(SeparableConv2D_4_w_s_ce0),
    .q0(SeparableConv2D_4_w_s_q0)
);

network_mul_mul_15s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_15s_16s_30_1_1_U65(
    .din0(SeparableConv2D_4_w_3_reg_388),
    .din1(input_load_reg_383),
    .dout(mul_ln23_fu_317_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_0_reg_109 <= buffer_fu_312_p2;
    end else if (((icmp_ln18_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        buffer_0_reg_109 <= 16'd54797;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_d_0_reg_121 <= in_d_reg_363;
    end else if (((icmp_ln18_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_d_0_reg_121 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_h_0_reg_87 <= out_h_reg_327;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_87 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_w_0_reg_98 <= 5'd0;
    end else if (((icmp_ln20_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_0_reg_98 <= out_w_reg_345;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        phi_mul_reg_132 <= add_ln23_2_reg_368;
    end else if (((icmp_ln18_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_132 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SeparableConv2D_4_w_3_reg_388 <= SeparableConv2D_4_w_s_q0;
        input_load_reg_383 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln23_2_reg_368 <= add_ln23_2_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_d_reg_363 <= in_d_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_reg_327 <= out_h_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_w_reg_345 <= out_w_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln23_reg_337[14 : 2] <= sext_ln23_fu_185_p1[14 : 2];
        sub_ln23_reg_332[10 : 2] <= sub_ln23_fu_179_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln1_reg_393 <= {{mul_ln23_fu_317_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln20_1_reg_355[4 : 0] <= zext_ln20_1_fu_205_p1[4 : 0];
        zext_ln20_reg_350[4 : 0] <= zext_ln20_fu_201_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SeparableConv2D_4_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_4_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln17_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln18_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln20_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_4_w_s_address0 = zext_ln23_4_fu_254_p1;

assign add_ln23_1_fu_240_p2 = ($signed(sext_ln23_reg_337) + $signed(zext_ln23_2_fu_236_p1));

assign add_ln23_2_fu_225_p2 = (14'd784 + phi_mul_reg_132);

assign add_ln23_fu_231_p2 = (zext_ln20_1_reg_355 + phi_mul_reg_132);

assign add_ln30_fu_284_p2 = ($signed(sub_ln23_reg_332) + $signed(zext_ln20_reg_350));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign buffer_fu_312_p2 = (buffer_0_reg_109 + trunc_ln1_reg_393);

assign icmp_ln17_fu_143_p2 = ((out_h_0_reg_87 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_189_p2 = ((out_w_0_reg_98 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_209_p2 = ((in_d_0_reg_121 == 5'd16) ? 1'b1 : 1'b0);

assign in_d_fu_215_p2 = (in_d_0_reg_121 + 5'd1);

assign input_r_address0 = zext_ln23_3_fu_249_p1;

assign out_h_fu_149_p2 = (out_h_0_reg_87 + 5'd1);

assign out_w_fu_195_p2 = (out_w_0_reg_98 + 5'd1);

assign output_r_address0 = zext_ln30_fu_292_p1;

assign output_r_d0 = select_ln27_fu_271_p3;

assign select_ln27_fu_271_p3 = ((tmp_fu_263_p3[0:0] === 1'b1) ? 15'd0 : trunc_ln20_fu_259_p1);

assign sext_ln23_1_fu_245_p1 = $signed(add_ln23_1_fu_240_p2);

assign sext_ln23_fu_185_p1 = sub_ln23_fu_179_p2;

assign sext_ln30_fu_288_p1 = $signed(add_ln30_fu_284_p2);

assign shl_ln23_7_fu_167_p3 = {{out_h_0_reg_87}, {2'd0}};

assign shl_ln_fu_155_p3 = {{out_h_0_reg_87}, {5'd0}};

assign sub_ln23_fu_179_p2 = (zext_ln23_fu_163_p1 - zext_ln23_1_fu_175_p1);

assign tmp_fu_263_p3 = buffer_0_reg_109[32'd15];

assign trunc_ln20_fu_259_p1 = buffer_0_reg_109[14:0];

assign trunc_ln23_fu_221_p1 = in_d_0_reg_121[3:0];

assign zext_ln20_1_fu_205_p1 = out_w_0_reg_98;

assign zext_ln20_fu_201_p1 = out_w_0_reg_98;

assign zext_ln23_1_fu_175_p1 = shl_ln23_7_fu_167_p3;

assign zext_ln23_2_fu_236_p1 = add_ln23_fu_231_p2;

assign zext_ln23_3_fu_249_p1 = $unsigned(sext_ln23_1_fu_245_p1);

assign zext_ln23_4_fu_254_p1 = trunc_ln23_fu_221_p1;

assign zext_ln23_fu_163_p1 = shl_ln_fu_155_p3;

assign zext_ln30_fu_292_p1 = $unsigned(sext_ln30_fu_288_p1);

always @ (posedge ap_clk) begin
    sub_ln23_reg_332[1:0] <= 2'b00;
    sext_ln23_reg_337[1:0] <= 2'b00;
    zext_ln20_reg_350[10:5] <= 6'b000000;
    zext_ln20_1_reg_355[13:5] <= 9'b000000000;
end

endmodule //pointwise_conv2d_fix_4
