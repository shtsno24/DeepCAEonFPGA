-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pointwise_conv2d_fix_3_SeparableConv2D_3_w_s_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pointwise_conv2d_fix_3_SeparableConv2D_3_w_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "0010000110010100", 1 => "0000110001110010", 2 => "0000100011011001", 
    3 => "1111000100101001", 4 => "1101011101101010", 5 => "0001001110001100", 
    6 => "1110100111000011", 7 => "1110101010111111", 8 => "1111011011011010", 
    9 => "0100010111111000", 10 => "0000001001001100", 11 => "0000011000111111", 
    12 => "1101110101001110", 13 => "1101010111100001", 14 => "0000110110011010", 
    15 => "0010000001111101", 16 => "0001001110011011", 17 => "0000000101100001", 
    18 => "0000100111011011", 19 => "1110101101111010", 20 => "1111101101010101", 
    21 => "1111100110100111", 22 => "0000011111100110", 23 => "1110011111001000", 
    24 => "0000101111001011", 25 => "1110100010011101", 26 => "0011011010100101", 
    27 => "1111011100111010", 28 => "1110101101010110", 29 => "0000101101001111", 
    30 => "1101000101010010", 31 => "0000101100101101", 32 => "1111011011111100", 
    33 => "0000100010001000", 34 => "0000001001100110", 35 => "0010000011010110", 
    36 => "1111111010001001", 37 => "1110000101010011", 38 => "1111110110110011", 
    39 => "1111011001110110", 40 => "0000000000100110", 41 => "1110011101101010", 
    42 => "0000011000111110", 43 => "0000100010110001", 44 => "0001100101010110", 
    45 => "1110110000101100", 46 => "0000110101110011", 47 => "1111111011111000", 
    48 => "1111010100110001", 49 => "0000010000001110", 50 => "0001010111110010", 
    51 => "1111110101010100", 52 => "0001010100000000", 53 => "1111010111110110", 
    54 => "0001111111001110", 55 => "0010001111110110", 56 => "0001100101111110", 
    57 => "0000110101000010", 58 => "1111010110001010", 59 => "1111100110111000", 
    60 => "1110001110000011", 61 => "0000110011100111", 62 => "1110101001001001", 
    63 => "0000000000100011", 64 => "1111100110100010", 65 => "0000001010100000", 
    66 => "1110101000110111", 67 => "1111000000111111", 68 => "0000001000000101", 
    69 => "0000010001011111", 70 => "0000011101000010", 71 => "0000010000000011", 
    72 => "1111110111100001", 73 => "0000010110000010", 74 => "0000101101101110", 
    75 => "1111100101111010", 76 => "1110100100110100", 77 => "1101101111000110", 
    78 => "1111010101011111", 79 => "0001101101101010", 80 => "1111100000111100", 
    81 => "1111100100001100", 82 => "0001000010001110", 83 => "1110111101011101", 
    84 => "1110110010001001", 85 => "0010000000110111", 86 => "1110010111000000", 
    87 => "1111111000101011", 88 => "0001001110101000", 89 => "0000100010001110", 
    90 => "1110111001100101", 91 => "0000001111101000", 92 => "0000101001101010", 
    93 => "1111001111011110", 94 => "0001000111110001", 95 => "0001000001000111", 
    96 => "0000111000010110", 97 => "0000000000011101", 98 => "0000010111100011", 
    99 => "1110010000011011", 100 => "1101110110000000", 101 => "0010001001010100", 
    102 => "1111000000110010", 103 => "1111001111010001", 104 => "0001001000111000", 
    105 => "0000000000001011", 106 => "0010001011101000", 107 => "1110011100011000", 
    108 => "1100110000001000", 109 => "0010110100000010", 110 => "1110000001010111", 
    111 => "1101011010000001", 112 => "1100110001100001", 113 => "0000011100100110", 
    114 => "1111001000100010", 115 => "0000011001011000", 116 => "0000110010111010", 
    117 => "1111011101111101", 118 => "0001001000100011", 119 => "0001000001100001", 
    120 => "0001000001001001", 121 => "1111100100110011", 122 => "0001110111111100", 
    123 => "1111110000001011", 124 => "1111000111001101", 125 => "0000010100111011", 
    126 => "0000001110001011", 127 => "1101000100010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pointwise_conv2d_fix_3_SeparableConv2D_3_w_s is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pointwise_conv2d_fix_3_SeparableConv2D_3_w_s is
    component pointwise_conv2d_fix_3_SeparableConv2D_3_w_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pointwise_conv2d_fix_3_SeparableConv2D_3_w_s_rom_U :  component pointwise_conv2d_fix_3_SeparableConv2D_3_w_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


