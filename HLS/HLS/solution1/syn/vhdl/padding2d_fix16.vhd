-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (6 downto 0);
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal o_count_3_reg_278 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_3_reg_278_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_count_2_reg_289 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln13_fu_308_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_reg_611 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_reg_618 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln5_1_fu_318_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln5_1_reg_624 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln13_1_fu_329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_reg_629 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_335_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_634 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln13_1_fu_339_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_1_reg_639 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln23_fu_343_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln23_reg_644 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_35_fu_347_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_35_reg_649 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln13_4_fu_352_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_4_reg_658 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_36_fu_357_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_36_reg_664 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln13_8_fu_366_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_8_reg_671 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_fu_375_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_reg_676 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln13_2_fu_378_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_2_reg_682 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_385_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_reg_687 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_5_fu_391_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_5_reg_692 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast9_fu_394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast9_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast6_fu_403_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast5_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast5_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_6_fu_423_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_6_reg_712 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_7_fu_432_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_9_fu_436_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_9_reg_723 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_2_fu_440_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_2_reg_729 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal depth_fu_449_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth_reg_738 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_fu_470_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln15_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_fu_476_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_reg_751 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln23_1_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_1_reg_756 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal height_fu_496_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_reg_766 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_fu_502_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln31_reg_771 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_1_fu_507_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_1_reg_776 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln26_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_781 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_781_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_1_fu_522_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal o_count_6_fu_528_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_6_reg_795 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_load_reg_800 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_2_fu_539_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_2_reg_805 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln40_fu_549_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_reg_810 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_3_fu_555_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_3_reg_815 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_4_fu_579_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln44_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_6_fu_585_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln13_7_fu_590_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_11_fu_595_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_12_fu_600_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal indvars_iv2_reg_149 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_ln13_reg_169 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv10_reg_179 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_0_reg_189 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_count_0_reg_201 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_0_reg_213 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_1_reg_224 : STD_LOGIC_VECTOR (15 downto 0);
    signal o_count_reg_234 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal o_count_2_reg_245 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_1_reg_256 : STD_LOGIC_VECTOR (13 downto 0);
    signal height_0_reg_267 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_o_count_3_phi_fu_281_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal o_count_5_reg_299 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_1_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_1_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln13_fu_308_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_1_fu_318_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln13_1_fu_329_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_1_fu_329_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln23_fu_343_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_5_fu_362_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln5_fu_372_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_372_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_385_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_385_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast7_fu_400_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast4_fu_409_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_1_fu_412_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_2_fu_417_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_3_fu_427_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast8_fu_397_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_fu_427_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln15_fu_455_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_481_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln44_fu_564_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln13_1_fu_329_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_fu_329_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_fu_385_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_385_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_491_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_491_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    depth_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                depth_0_reg_213 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                depth_0_reg_213 <= depth_reg_738;
            end if; 
        end if;
    end process;

    height_0_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                height_0_reg_267 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                height_0_reg_267 <= height_reg_766;
            end if; 
        end if;
    end process;

    i_count_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_count_0_reg_201 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_count_0_reg_201 <= i_count_reg_751;
            end if; 
        end if;
    end process;

    i_count_1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_count_1_reg_256 <= i_count_0_reg_201;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_count_1_reg_256 <= add_ln31_reg_771;
            end if; 
        end if;
    end process;

    i_count_2_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln26_fu_511_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_289 <= add_ln31_1_fu_522_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_491_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_289 <= i_count_1_reg_256;
            end if; 
        end if;
    end process;

    indvars_iv10_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvars_iv10_reg_179 <= p_cast6_fu_403_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvars_iv10_reg_179 <= add_ln13_6_fu_585_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvars_iv2_reg_149 <= empty_35_reg_649;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvars_iv2_reg_149 <= add_ln13_12_fu_600_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvars_iv_reg_159 <= add_ln13_8_reg_671;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvars_iv_reg_159 <= add_ln13_11_fu_595_p2;
            end if; 
        end if;
    end process;

    o_count_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                o_count_0_reg_189 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                o_count_0_reg_189 <= add_ln20_1_reg_776;
            end if; 
        end if;
    end process;

    o_count_1_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_444_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_224 <= o_count_0_reg_189;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln15_fu_459_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_224 <= add_ln20_fu_470_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                o_count_2_reg_245 <= indvars_iv10_reg_179;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                o_count_2_reg_245 <= add_ln20_2_reg_805;
            end if; 
        end if;
    end process;

    o_count_3_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln26_reg_781 = ap_const_lv1_0))) then 
                o_count_3_reg_278 <= o_count_6_reg_795;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_491_p2 = ap_const_lv1_0))) then 
                o_count_3_reg_278 <= o_count_2_reg_245;
            end if; 
        end if;
    end process;

    o_count_5_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln44_fu_568_p2 = ap_const_lv1_0))) then 
                o_count_5_reg_299 <= o_count_4_fu_579_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_491_p2 = ap_const_lv1_1))) then 
                o_count_5_reg_299 <= add_ln23_1_reg_756;
            end if; 
        end if;
    end process;

    o_count_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                o_count_reg_234 <= phi_ln13_reg_169;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                o_count_reg_234 <= add_ln23_3_reg_815;
            end if; 
        end if;
    end process;

    phi_ln13_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_ln13_reg_169 <= zext_ln13_7_fu_432_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                phi_ln13_reg_169 <= add_ln13_7_fu_590_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_4_reg_658 <= add_ln13_4_fu_352_p2;
                empty_35_reg_649 <= empty_35_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln13_8_reg_671 <= add_ln13_8_fu_366_p2;
                empty_36_reg_664 <= empty_36_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln13_9_reg_723 <= add_ln13_9_fu_436_p2;
                mul_ln13_reg_687 <= mul_ln13_fu_385_p2;
                    p_cast5_reg_707(4 downto 0) <= p_cast5_fu_406_p1(4 downto 0);
                    p_cast9_reg_697(4 downto 0) <= p_cast9_fu_394_p1(4 downto 0);
                trunc_ln13_2_reg_729 <= trunc_ln13_2_fu_440_p1;
                    zext_ln13_2_reg_682(6 downto 0) <= zext_ln13_2_fu_378_p1(6 downto 0);
                    zext_ln13_5_reg_692(11 downto 0) <= zext_ln13_5_fu_391_p1(11 downto 0);
                    zext_ln13_6_reg_712(9 downto 0) <= zext_ln13_6_fu_423_p1(9 downto 0);
                    zext_ln13_reg_676(4 downto 0) <= zext_ln13_fu_375_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln13_reg_618 <= add_ln13_fu_312_p2;
                trunc_ln13_reg_611 <= trunc_ln13_fu_308_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_491_p2 = ap_const_lv1_1))) then
                add_ln20_1_reg_776 <= add_ln20_1_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln20_2_reg_805 <= add_ln20_2_fu_539_p2;
                add_ln23_3_reg_815 <= add_ln23_3_fu_555_p2;
                add_ln40_reg_810 <= add_ln40_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln23_1_reg_756 <= add_ln23_1_fu_486_p2;
                i_count_reg_751 <= i_count_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_491_p2 = ap_const_lv1_0))) then
                add_ln31_reg_771 <= add_ln31_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                depth_reg_738 <= depth_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_reg_634 <= empty_fu_335_p1;
                mul_ln13_1_reg_629 <= mul_ln13_1_fu_329_p2;
                sext_ln5_1_reg_624 <= sext_ln5_1_fu_318_p1;
                trunc_ln13_1_reg_639 <= trunc_ln13_1_fu_339_p1;
                trunc_ln23_reg_644 <= trunc_ln23_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                height_reg_766 <= height_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln26_reg_781 <= icmp_ln26_fu_511_p2;
                icmp_ln26_reg_781_pp1_iter1_reg <= icmp_ln26_reg_781;
                o_count_3_reg_278_pp1_iter1_reg <= o_count_3_reg_278;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln26_reg_781 = ap_const_lv1_0))) then
                input_load_reg_800 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln26_fu_511_p2 = ap_const_lv1_0))) then
                o_count_6_reg_795 <= o_count_6_fu_528_p2;
            end if;
        end if;
    end process;
    zext_ln13_reg_676(13 downto 5) <= "000000000";
    zext_ln13_2_reg_682(13 downto 7) <= "0000000";
    zext_ln13_5_reg_692(15 downto 12) <= "0000";
    p_cast9_reg_697(15 downto 5) <= "00000000000";
    p_cast5_reg_707(15 downto 5) <= "00000000000";
    zext_ln13_6_reg_712(13 downto 10) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln13_fu_444_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln15_fu_459_p2, icmp_ln23_fu_491_p2, ap_CS_fsm_state9, icmp_ln26_fu_511_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state15, icmp_ln44_fu_568_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_444_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln15_fu_459_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_491_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln26_fu_511_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln26_fu_511_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln44_fu_568_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln13_11_fu_595_p2 <= std_logic_vector(unsigned(add_ln13_9_reg_723) + unsigned(indvars_iv_reg_159));
    add_ln13_12_fu_600_p2 <= std_logic_vector(unsigned(add_ln13_9_reg_723) + unsigned(indvars_iv2_reg_149));
    add_ln13_1_fu_412_p2 <= std_logic_vector(unsigned(empty_reg_634) + unsigned(p_cast7_fu_400_p1));
    add_ln13_2_fu_417_p2 <= std_logic_vector(unsigned(p_cast4_fu_409_p1) + unsigned(add_ln13_1_fu_412_p2));
    add_ln13_3_fu_427_p0 <= input_width;
    add_ln13_3_fu_427_p2 <= std_logic_vector(signed(add_ln13_3_fu_427_p0) + signed(p_cast8_fu_397_p1));
    add_ln13_4_fu_352_p2 <= std_logic_vector(unsigned(empty_35_fu_347_p2) + unsigned(trunc_ln13_1_reg_639));
    add_ln13_5_fu_362_p2 <= std_logic_vector(unsigned(add_ln13_4_reg_658) + unsigned(trunc_ln13_reg_611));
    add_ln13_6_fu_585_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_712) + unsigned(indvars_iv10_reg_179));
    add_ln13_7_fu_590_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_712) + unsigned(phi_ln13_reg_169));
    add_ln13_8_fu_366_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(add_ln13_5_fu_362_p2));
    add_ln13_9_fu_436_p2 <= std_logic_vector(unsigned(empty_36_reg_664) + unsigned(add_ln13_4_reg_658));
    add_ln13_fu_312_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln13_fu_308_p1));
    add_ln20_1_fu_507_p2 <= std_logic_vector(unsigned(add_ln23_1_reg_756) + unsigned(p_cast5_reg_707));
    add_ln20_2_fu_539_p2 <= std_logic_vector(unsigned(zext_ln13_reg_676) + unsigned(o_count_2_reg_245));
    add_ln20_fu_470_p2 <= std_logic_vector(unsigned(o_count_1_reg_224) + unsigned(ap_const_lv16_1));
    add_ln23_1_fu_486_p2 <= std_logic_vector(unsigned(add_ln23_fu_481_p2) + unsigned(zext_ln13_5_reg_692));
    add_ln23_3_fu_555_p2 <= std_logic_vector(unsigned(zext_ln13_reg_676) + unsigned(o_count_reg_234));
    add_ln23_fu_481_p2 <= std_logic_vector(unsigned(p_cast9_reg_697) + unsigned(o_count_0_reg_189));
    add_ln31_1_fu_522_p2 <= std_logic_vector(unsigned(i_count_2_reg_289) + unsigned(ap_const_lv14_1));
    add_ln31_fu_502_p2 <= std_logic_vector(unsigned(zext_ln13_2_reg_682) + unsigned(i_count_1_reg_256));
    add_ln40_fu_549_p2 <= std_logic_vector(unsigned(o_count_reg_234) + unsigned(ap_const_lv14_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln26_fu_511_p2)
    begin
        if ((icmp_ln26_fu_511_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln13_fu_444_p2, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_444_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_o_count_3_phi_fu_281_p4_assign_proc : process(o_count_3_reg_278, ap_CS_fsm_pp1_stage0, icmp_ln26_reg_781, o_count_6_reg_795, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln26_reg_781 = ap_const_lv1_0))) then 
            ap_phi_mux_o_count_3_phi_fu_281_p4 <= o_count_6_reg_795;
        else 
            ap_phi_mux_o_count_3_phi_fu_281_p4 <= o_count_3_reg_278;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln13_fu_444_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_444_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_fu_449_p2 <= std_logic_vector(unsigned(depth_0_reg_213) + unsigned(ap_const_lv5_1));
    empty_35_fu_347_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(trunc_ln13_reg_611));
    empty_36_fu_357_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(trunc_ln13_reg_611));
    empty_fu_335_p1 <= mul_ln13_1_fu_329_p2(10 - 1 downto 0);
    height_fu_496_p2 <= std_logic_vector(unsigned(height_0_reg_267) + unsigned(ap_const_lv5_1));
    i_count_fu_476_p2 <= std_logic_vector(unsigned(mul_ln13_reg_687) + unsigned(i_count_0_reg_201));
    icmp_ln13_fu_444_p2 <= "1" when (depth_0_reg_213 = trunc_ln13_2_reg_729) else "0";
    icmp_ln15_fu_459_p2 <= "1" when (trunc_ln15_fu_455_p1 = indvars_iv2_reg_149) else "0";
    icmp_ln23_fu_491_p2 <= "1" when (height_0_reg_267 = trunc_ln23_reg_644) else "0";
    icmp_ln26_fu_511_p2 <= "1" when (ap_phi_mux_o_count_3_phi_fu_281_p4 = o_count_reg_234) else "0";
    icmp_ln44_fu_568_p2 <= "1" when (trunc_ln44_fu_564_p1 = indvars_iv_reg_159) else "0";
    input_r_address0 <= zext_ln30_fu_517_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln13_1_fu_329_p0 <= mul_ln13_1_fu_329_p00(7 - 1 downto 0);
    mul_ln13_1_fu_329_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_fu_318_p1),12));
    mul_ln13_1_fu_329_p1 <= mul_ln13_1_fu_329_p10(5 - 1 downto 0);
    mul_ln13_1_fu_329_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_618),12));
    mul_ln13_1_fu_329_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_fu_329_p0) * unsigned(mul_ln13_1_fu_329_p1), 12));
    mul_ln13_fu_385_p0 <= mul_ln13_fu_385_p00(7 - 1 downto 0);
    mul_ln13_fu_385_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_reg_624),14));
    mul_ln13_fu_385_p1 <= mul_ln13_fu_385_p10(7 - 1 downto 0);
    mul_ln13_fu_385_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_372_p1),14));
    mul_ln13_fu_385_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_fu_385_p0) * unsigned(mul_ln13_fu_385_p1), 14));
    o_count_4_fu_579_p2 <= std_logic_vector(unsigned(o_count_5_reg_299) + unsigned(ap_const_lv16_1));
    o_count_6_fu_528_p2 <= std_logic_vector(unsigned(ap_phi_mux_o_count_3_phi_fu_281_p4) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_enable_reg_pp1_iter2, ap_CS_fsm_state14, ap_block_pp1_stage0, zext_ln19_fu_465_p1, zext_ln30_1_fu_534_p1, zext_ln39_fu_544_p1, zext_ln39_1_fu_560_p1, zext_ln48_fu_574_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_r_address0 <= zext_ln48_fu_574_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_address0 <= zext_ln39_1_fu_560_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_r_address0 <= zext_ln39_fu_544_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            output_r_address0 <= zext_ln30_1_fu_534_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= zext_ln19_fu_465_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state7, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_enable_reg_pp1_iter2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state7, input_load_reg_800, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_enable_reg_pp1_iter2, ap_CS_fsm_state14, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            output_r_d0 <= input_load_reg_800;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state7, icmp_ln15_fu_459_p2, icmp_ln26_reg_781_pp1_iter1_reg, ap_CS_fsm_state13, ap_CS_fsm_state15, icmp_ln44_fu_568_p2, ap_enable_reg_pp1_iter2, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln26_reg_781_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (icmp_ln44_fu_568_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln15_fu_459_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast4_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_reg_664),10));
    p_cast5_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_reg_664),16));
    p_cast6_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_reg_649),14));
    p_cast7_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_reg_649),10));
    p_cast8_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_reg_649),6));
    p_cast9_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_reg_649),16));
    sext_ln5_1_fu_318_p0 <= input_height;
        sext_ln5_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_1_fu_318_p0),7));

    sext_ln5_fu_372_p0 <= input_width;
        sext_ln5_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_fu_372_p0),7));

    trunc_ln13_1_fu_339_p1 <= mul_ln13_1_fu_329_p2(5 - 1 downto 0);
    trunc_ln13_2_fu_440_p1 <= input_depth(5 - 1 downto 0);
    trunc_ln13_fu_308_p0 <= input_width;
    trunc_ln13_fu_308_p1 <= trunc_ln13_fu_308_p0(5 - 1 downto 0);
    trunc_ln15_fu_455_p1 <= o_count_1_reg_224(5 - 1 downto 0);
    trunc_ln23_fu_343_p0 <= input_height;
    trunc_ln23_fu_343_p1 <= trunc_ln23_fu_343_p0(5 - 1 downto 0);
    trunc_ln44_fu_564_p1 <= o_count_5_reg_299(5 - 1 downto 0);
    zext_ln13_2_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_372_p1),14));
    zext_ln13_5_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_reg_629),16));
    zext_ln13_6_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_2_fu_417_p2),14));
    zext_ln13_7_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_3_fu_427_p2),14));
    zext_ln13_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_618),14));
    zext_ln19_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_224),64));
    zext_ln30_1_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_278_pp1_iter1_reg),64));
    zext_ln30_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_289),64));
    zext_ln39_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_reg_810),64));
    zext_ln39_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_reg_234),64));
    zext_ln48_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_299),64));
end behav;
