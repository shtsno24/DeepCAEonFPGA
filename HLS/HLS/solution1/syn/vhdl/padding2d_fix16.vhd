-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (6 downto 0);
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal o_count_3_reg_286 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_2_reg_297 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln5_1_fu_316_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln5_1_reg_630 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln13_fu_320_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_reg_635 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_reg_642 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln13_1_fu_338_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_reg_647 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_344_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_652 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln13_1_fu_348_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_1_reg_657 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_fu_352_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_reg_662 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_fu_359_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_reg_667 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_2_fu_362_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_2_reg_673 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_369_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_reg_678 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_5_fu_375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_5_reg_683 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_35_fu_378_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast9_fu_383_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast9_reg_693 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast6_fu_395_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast5_fu_404_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast5_reg_703 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_6_fu_423_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_6_reg_708 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_7_fu_432_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_8_fu_446_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_9_fu_452_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_9_reg_724 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_2_fu_458_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_2_reg_730 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal depth_fu_467_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth_reg_739 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_fu_488_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln16_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_fu_494_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_reg_752 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln27_1_fu_504_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln27_1_reg_757 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln27_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal height_fu_514_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_reg_767 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln36_fu_520_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln36_reg_772 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_1_fu_525_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_1_reg_777 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln31_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln36_1_fu_540_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal o_count_6_fu_546_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_6_reg_796 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_2_fu_557_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln27_3_fu_578_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_4_fu_598_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln49_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_6_fu_604_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln13_7_fu_609_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_11_fu_614_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_12_fu_619_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal indvars_iv2_reg_157 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_reg_167 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_ln13_reg_177 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv10_reg_187 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_0_reg_197 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_count_0_reg_209 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_0_reg_221 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_1_reg_232 : STD_LOGIC_VECTOR (15 downto 0);
    signal o_count_reg_242 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_2_reg_253 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_1_reg_264 : STD_LOGIC_VECTOR (13 downto 0);
    signal height_0_reg_275 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_o_count_3_phi_fu_289_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal o_count_5_reg_307 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_1_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln5_1_fu_316_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln13_fu_320_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln13_1_fu_338_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_1_fu_338_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_fu_352_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_356_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_356_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_369_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_369_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_36_fu_399_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast7_fu_391_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast4_fu_408_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_1_fu_412_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_2_fu_417_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_3_fu_427_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast8_fu_387_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_fu_427_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_4_fu_436_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_5_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln16_fu_473_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln27_fu_499_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_fu_567_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln49_fu_583_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln13_1_fu_338_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_fu_338_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_fu_369_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_369_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_509_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_509_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    depth_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                depth_0_reg_221 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                depth_0_reg_221 <= depth_reg_739;
            end if; 
        end if;
    end process;

    height_0_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                height_0_reg_275 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                height_0_reg_275 <= height_reg_767;
            end if; 
        end if;
    end process;

    i_count_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_count_0_reg_209 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_count_0_reg_209 <= i_count_reg_752;
            end if; 
        end if;
    end process;

    i_count_1_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_count_1_reg_264 <= i_count_0_reg_209;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_count_1_reg_264 <= add_ln36_reg_772;
            end if; 
        end if;
    end process;

    i_count_2_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_529_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_297 <= add_ln36_1_fu_540_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_509_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_297 <= i_count_1_reg_264;
            end if; 
        end if;
    end process;

    indvars_iv10_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv10_reg_187 <= p_cast6_fu_395_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvars_iv10_reg_187 <= add_ln13_6_fu_604_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv2_reg_157 <= empty_35_fu_378_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvars_iv2_reg_157 <= add_ln13_12_fu_619_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv_reg_167 <= add_ln13_8_fu_446_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                indvars_iv_reg_167 <= add_ln13_11_fu_614_p2;
            end if; 
        end if;
    end process;

    o_count_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                o_count_0_reg_197 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                o_count_0_reg_197 <= add_ln24_1_reg_777;
            end if; 
        end if;
    end process;

    o_count_1_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_477_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_232 <= add_ln24_fu_488_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_462_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_232 <= o_count_0_reg_197;
            end if; 
        end if;
    end process;

    o_count_2_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                o_count_2_reg_253 <= indvars_iv10_reg_187;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                o_count_2_reg_253 <= add_ln24_2_fu_557_p2;
            end if; 
        end if;
    end process;

    o_count_3_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_782 = ap_const_lv1_0))) then 
                o_count_3_reg_286 <= o_count_6_reg_796;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_509_p2 = ap_const_lv1_0))) then 
                o_count_3_reg_286 <= o_count_2_reg_253;
            end if; 
        end if;
    end process;

    o_count_5_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln49_fu_587_p2 = ap_const_lv1_0))) then 
                o_count_5_reg_307 <= o_count_4_fu_598_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_509_p2 = ap_const_lv1_1))) then 
                o_count_5_reg_307 <= add_ln27_1_reg_757;
            end if; 
        end if;
    end process;

    o_count_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                o_count_reg_242 <= phi_ln13_reg_177;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                o_count_reg_242 <= add_ln27_3_fu_578_p2;
            end if; 
        end if;
    end process;

    phi_ln13_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                phi_ln13_reg_177 <= zext_ln13_7_fu_432_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_ln13_reg_177 <= add_ln13_7_fu_609_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln13_9_reg_724 <= add_ln13_9_fu_452_p2;
                mul_ln13_reg_678 <= mul_ln13_fu_369_p2;
                    p_cast5_reg_703(4 downto 0) <= p_cast5_fu_404_p1(4 downto 0);
                    p_cast9_reg_693(4 downto 0) <= p_cast9_fu_383_p1(4 downto 0);
                trunc_ln13_2_reg_730 <= trunc_ln13_2_fu_458_p1;
                    zext_ln13_2_reg_673(6 downto 0) <= zext_ln13_2_fu_362_p1(6 downto 0);
                    zext_ln13_5_reg_683(11 downto 0) <= zext_ln13_5_fu_375_p1(11 downto 0);
                    zext_ln13_6_reg_708(9 downto 0) <= zext_ln13_6_fu_423_p1(9 downto 0);
                    zext_ln13_reg_667(4 downto 0) <= zext_ln13_fu_359_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln13_reg_642 <= add_ln13_fu_324_p2;
                empty_reg_652 <= empty_fu_344_p1;
                mul_ln13_1_reg_647 <= mul_ln13_1_fu_338_p2;
                sext_ln5_1_reg_630 <= sext_ln5_1_fu_316_p1;
                trunc_ln13_1_reg_657 <= trunc_ln13_1_fu_348_p1;
                trunc_ln13_reg_635 <= trunc_ln13_fu_320_p1;
                trunc_ln27_reg_662 <= trunc_ln27_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_509_p2 = ap_const_lv1_1))) then
                add_ln24_1_reg_777 <= add_ln24_1_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln27_1_reg_757 <= add_ln27_1_fu_504_p2;
                i_count_reg_752 <= i_count_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_509_p2 = ap_const_lv1_0))) then
                add_ln36_reg_772 <= add_ln36_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                depth_reg_739 <= depth_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                height_reg_767 <= height_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln31_reg_782 <= icmp_ln31_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_529_p2 = ap_const_lv1_0))) then
                o_count_6_reg_796 <= o_count_6_fu_546_p2;
            end if;
        end if;
    end process;
    zext_ln13_reg_667(13 downto 5) <= "000000000";
    zext_ln13_2_reg_673(13 downto 7) <= "0000000";
    zext_ln13_5_reg_683(15 downto 12) <= "0000";
    p_cast9_reg_693(15 downto 5) <= "00000000000";
    p_cast5_reg_703(15 downto 5) <= "00000000000";
    zext_ln13_6_reg_708(13 downto 10) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln13_fu_462_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln16_fu_477_p2, icmp_ln27_fu_509_p2, ap_CS_fsm_state6, icmp_ln31_fu_529_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, icmp_ln49_fu_587_p2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_462_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_477_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln27_fu_509_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln31_fu_529_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln31_fu_529_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln49_fu_587_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln13_11_fu_614_p2 <= std_logic_vector(unsigned(add_ln13_9_reg_724) + unsigned(indvars_iv_reg_167));
    add_ln13_12_fu_619_p2 <= std_logic_vector(unsigned(add_ln13_9_reg_724) + unsigned(indvars_iv2_reg_157));
    add_ln13_1_fu_412_p2 <= std_logic_vector(unsigned(empty_reg_652) + unsigned(p_cast7_fu_391_p1));
    add_ln13_2_fu_417_p2 <= std_logic_vector(unsigned(p_cast4_fu_408_p1) + unsigned(add_ln13_1_fu_412_p2));
    add_ln13_3_fu_427_p0 <= input_width;
    add_ln13_3_fu_427_p2 <= std_logic_vector(signed(add_ln13_3_fu_427_p0) + signed(p_cast8_fu_387_p1));
    add_ln13_4_fu_436_p2 <= std_logic_vector(unsigned(empty_35_fu_378_p2) + unsigned(trunc_ln13_1_reg_657));
    add_ln13_5_fu_441_p2 <= std_logic_vector(unsigned(add_ln13_4_fu_436_p2) + unsigned(trunc_ln13_reg_635));
    add_ln13_6_fu_604_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_708) + unsigned(indvars_iv10_reg_187));
    add_ln13_7_fu_609_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_708) + unsigned(phi_ln13_reg_177));
    add_ln13_8_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(add_ln13_5_fu_441_p2));
    add_ln13_9_fu_452_p2 <= std_logic_vector(unsigned(empty_36_fu_399_p2) + unsigned(add_ln13_4_fu_436_p2));
    add_ln13_fu_324_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln13_fu_320_p1));
    add_ln24_1_fu_525_p2 <= std_logic_vector(unsigned(add_ln27_1_reg_757) + unsigned(p_cast5_reg_703));
    add_ln24_2_fu_557_p2 <= std_logic_vector(unsigned(zext_ln13_reg_667) + unsigned(o_count_2_reg_253));
    add_ln24_fu_488_p2 <= std_logic_vector(unsigned(o_count_1_reg_232) + unsigned(ap_const_lv16_1));
    add_ln27_1_fu_504_p2 <= std_logic_vector(unsigned(add_ln27_fu_499_p2) + unsigned(zext_ln13_5_reg_683));
    add_ln27_3_fu_578_p2 <= std_logic_vector(unsigned(zext_ln13_reg_667) + unsigned(o_count_reg_242));
    add_ln27_fu_499_p2 <= std_logic_vector(unsigned(p_cast9_reg_693) + unsigned(o_count_0_reg_197));
    add_ln36_1_fu_540_p2 <= std_logic_vector(unsigned(i_count_2_reg_297) + unsigned(ap_const_lv14_1));
    add_ln36_fu_520_p2 <= std_logic_vector(unsigned(zext_ln13_2_reg_673) + unsigned(i_count_1_reg_264));
    add_ln45_fu_567_p2 <= std_logic_vector(unsigned(o_count_reg_242) + unsigned(ap_const_lv14_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln31_fu_529_p2)
    begin
        if ((icmp_ln31_fu_529_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln13_fu_462_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_462_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_o_count_3_phi_fu_289_p4_assign_proc : process(o_count_3_reg_286, icmp_ln31_reg_782, ap_CS_fsm_pp1_stage0, o_count_6_reg_796, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln31_reg_782 = ap_const_lv1_0))) then 
            ap_phi_mux_o_count_3_phi_fu_289_p4 <= o_count_6_reg_796;
        else 
            ap_phi_mux_o_count_3_phi_fu_289_p4 <= o_count_3_reg_286;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln13_fu_462_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_462_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_fu_467_p2 <= std_logic_vector(unsigned(depth_0_reg_221) + unsigned(ap_const_lv5_1));
    empty_35_fu_378_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(trunc_ln13_reg_635));
    empty_36_fu_399_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(trunc_ln13_reg_635));
    empty_fu_344_p1 <= mul_ln13_1_fu_338_p2(10 - 1 downto 0);
    height_fu_514_p2 <= std_logic_vector(unsigned(height_0_reg_275) + unsigned(ap_const_lv5_1));
    i_count_fu_494_p2 <= std_logic_vector(unsigned(mul_ln13_reg_678) + unsigned(i_count_0_reg_209));
    icmp_ln13_fu_462_p2 <= "1" when (depth_0_reg_221 = trunc_ln13_2_reg_730) else "0";
    icmp_ln16_fu_477_p2 <= "1" when (trunc_ln16_fu_473_p1 = indvars_iv2_reg_157) else "0";
    icmp_ln27_fu_509_p2 <= "1" when (height_0_reg_275 = trunc_ln27_reg_662) else "0";
    icmp_ln31_fu_529_p2 <= "1" when (ap_phi_mux_o_count_3_phi_fu_289_p4 = o_count_reg_242) else "0";
    icmp_ln49_fu_587_p2 <= "1" when (trunc_ln49_fu_583_p1 = indvars_iv_reg_167) else "0";
    input_r_address0 <= zext_ln35_fu_535_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln13_1_fu_338_p0 <= mul_ln13_1_fu_338_p00(7 - 1 downto 0);
    mul_ln13_1_fu_338_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_fu_316_p1),12));
    mul_ln13_1_fu_338_p1 <= mul_ln13_1_fu_338_p10(5 - 1 downto 0);
    mul_ln13_1_fu_338_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_324_p2),12));
    mul_ln13_1_fu_338_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_fu_338_p0) * unsigned(mul_ln13_1_fu_338_p1), 12));
    mul_ln13_fu_369_p0 <= mul_ln13_fu_369_p00(7 - 1 downto 0);
    mul_ln13_fu_369_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_reg_630),14));
    mul_ln13_fu_369_p1 <= mul_ln13_fu_369_p10(7 - 1 downto 0);
    mul_ln13_fu_369_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_356_p1),14));
    mul_ln13_fu_369_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_fu_369_p0) * unsigned(mul_ln13_fu_369_p1), 14));
    o_count_4_fu_598_p2 <= std_logic_vector(unsigned(o_count_5_reg_307) + unsigned(ap_const_lv16_1));
    o_count_6_fu_546_p2 <= std_logic_vector(unsigned(ap_phi_mux_o_count_3_phi_fu_289_p4) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state9, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln23_fu_483_p1, zext_ln35_1_fu_552_p1, zext_ln44_fu_562_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= zext_ln44_fu_562_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_r_address0 <= zext_ln35_1_fu_552_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= zext_ln23_fu_483_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln44_1_fu_573_p1, zext_ln56_fu_593_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address1 <= zext_ln56_fu_593_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address1 <= zext_ln44_1_fu_573_p1(14 - 1 downto 0);
        else 
            output_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state9, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state9, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_r_d0 <= input_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    output_r_d1 <= ap_const_lv16_0;

    output_r_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln16_fu_477_p2, icmp_ln31_reg_782, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state9, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_782 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_477_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, icmp_ln49_fu_587_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln49_fu_587_p2 = ap_const_lv1_0)))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast4_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_399_p2),10));
    p_cast5_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_399_p2),16));
    p_cast6_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_378_p2),14));
    p_cast7_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_378_p2),10));
    p_cast8_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_378_p2),6));
    p_cast9_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_378_p2),16));
    sext_ln5_1_fu_316_p0 <= input_height;
        sext_ln5_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_1_fu_316_p0),7));

    sext_ln5_fu_356_p0 <= input_width;
        sext_ln5_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_fu_356_p0),7));

    trunc_ln13_1_fu_348_p1 <= mul_ln13_1_fu_338_p2(5 - 1 downto 0);
    trunc_ln13_2_fu_458_p1 <= input_depth(5 - 1 downto 0);
    trunc_ln13_fu_320_p0 <= input_width;
    trunc_ln13_fu_320_p1 <= trunc_ln13_fu_320_p0(5 - 1 downto 0);
    trunc_ln16_fu_473_p1 <= o_count_1_reg_232(5 - 1 downto 0);
    trunc_ln27_fu_352_p0 <= input_height;
    trunc_ln27_fu_352_p1 <= trunc_ln27_fu_352_p0(5 - 1 downto 0);
    trunc_ln49_fu_583_p1 <= o_count_5_reg_307(5 - 1 downto 0);
    zext_ln13_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_356_p1),14));
    zext_ln13_5_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_reg_647),16));
    zext_ln13_6_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_2_fu_417_p2),14));
    zext_ln13_7_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_3_fu_427_p2),14));
    zext_ln13_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_642),14));
    zext_ln23_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_232),64));
    zext_ln35_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_286),64));
    zext_ln35_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_297),64));
    zext_ln44_1_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_567_p2),64));
    zext_ln44_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_reg_242),64));
    zext_ln56_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_307),64));
end behav;
