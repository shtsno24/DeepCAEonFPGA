-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (6 downto 0);
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal o_count_3_reg_299 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_3_reg_299_pp1_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state10_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_count_2_reg_310 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln13_fu_339_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_reg_685 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_fu_343_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_reg_692 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln5_1_fu_349_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln5_1_reg_698 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln13_1_fu_360_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_reg_703 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_366_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_708 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_34_fu_370_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_34_reg_714 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_1_fu_375_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_1_reg_724 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_36_fu_379_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_36_reg_729 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_5_fu_383_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_5_reg_734 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_35_fu_390_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_35_reg_740 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln13_3_fu_395_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_reg_747 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln13_fu_400_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln13_reg_752 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_4_fu_405_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_4_reg_757 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_12_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_12_reg_762 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_fu_424_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_reg_767 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln13_2_fu_427_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_2_reg_774 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_434_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_reg_779 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_5_fu_440_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_5_reg_784 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast9_fu_443_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast9_reg_789 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast6_fu_449_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast5_fu_452_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast5_reg_799 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_6_fu_469_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_6_reg_804 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_7_fu_473_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_9_fu_479_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_13_fu_482_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_13_reg_820 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_37_fu_486_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_37_reg_826 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_10_fu_501_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_10_reg_831 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln13_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal depth_fu_510_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth_reg_840 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_fu_531_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln15_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_fu_537_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_reg_853 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln23_1_fu_547_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_1_reg_858 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal height_fu_557_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_reg_868 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln30_fu_563_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln30_reg_873 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_1_fu_568_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_1_reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln25_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_883 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_883_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_1_fu_583_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal o_count_7_fu_589_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_7_reg_897 : STD_LOGIC_VECTOR (13 downto 0);
    signal input_load_reg_902 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_2_fu_600_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_2_reg_907 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal o_count_8_fu_616_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln34_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_3_fu_622_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln23_4_fu_627_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_6_fu_647_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln43_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_6_fu_653_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln13_7_fu_658_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_10_fu_663_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_15_fu_668_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_16_fu_673_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal indvars_iv2_reg_149 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv1_reg_169 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_ln13_reg_179 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv10_reg_189 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_0_reg_199 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_count_0_reg_211 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_0_reg_223 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_1_reg_234 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln13_1_reg_244 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_reg_255 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_2_reg_266 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_1_reg_277 : STD_LOGIC_VECTOR (13 downto 0);
    signal height_0_reg_288 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_o_count_3_phi_fu_302_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal o_count_4_reg_320 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_5_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln13_fu_339_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_1_fu_349_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln13_1_fu_360_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln13_1_fu_360_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_36_fu_379_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_cast8_fu_387_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_fu_395_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln13_fu_400_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_11_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln5_fu_421_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_421_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_434_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_434_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast7_fu_446_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_1_fu_458_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast4_fu_455_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_2_fu_463_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln13_8_fu_476_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_8_fu_490_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_9_fu_495_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln15_fu_516_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_542_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln43_fu_632_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln13_1_fu_360_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_fu_360_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_fu_434_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_434_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_552_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state10)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_552_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    depth_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                depth_0_reg_223 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                depth_0_reg_223 <= depth_reg_840;
            end if; 
        end if;
    end process;

    height_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                height_0_reg_288 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                height_0_reg_288 <= height_reg_868;
            end if; 
        end if;
    end process;

    i_count_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_count_0_reg_211 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_count_0_reg_211 <= i_count_reg_853;
            end if; 
        end if;
    end process;

    i_count_1_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_count_1_reg_277 <= i_count_0_reg_211;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_count_1_reg_277 <= add_ln30_reg_873;
            end if; 
        end if;
    end process;

    i_count_2_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_fu_572_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_310 <= add_ln30_1_fu_583_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_552_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_310 <= i_count_1_reg_277;
            end if; 
        end if;
    end process;

    indvars_iv10_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvars_iv10_reg_189 <= p_cast6_fu_449_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvars_iv10_reg_189 <= add_ln13_6_fu_653_p2;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvars_iv1_reg_169 <= zext_ln13_9_fu_479_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvars_iv1_reg_169 <= add_ln13_10_fu_663_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvars_iv2_reg_149 <= empty_34_reg_714;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvars_iv2_reg_149 <= add_ln13_16_fu_673_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvars_iv_reg_159 <= add_ln13_12_reg_762;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                indvars_iv_reg_159 <= add_ln13_15_fu_668_p2;
            end if; 
        end if;
    end process;

    o_count_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                o_count_0_reg_199 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                o_count_0_reg_199 <= add_ln20_1_reg_878;
            end if; 
        end if;
    end process;

    o_count_1_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_505_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_234 <= o_count_0_reg_199;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln15_fu_520_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_234 <= add_ln20_fu_531_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                o_count_2_reg_266 <= indvars_iv10_reg_189;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                o_count_2_reg_266 <= add_ln20_2_reg_907;
            end if; 
        end if;
    end process;

    o_count_3_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln25_reg_883 = ap_const_lv1_0))) then 
                o_count_3_reg_299 <= o_count_7_reg_897;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_552_p2 = ap_const_lv1_0))) then 
                o_count_3_reg_299 <= o_count_2_reg_266;
            end if; 
        end if;
    end process;

    o_count_4_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln34_fu_605_p2 = ap_const_lv1_0))) then 
                o_count_4_reg_320 <= o_count_8_fu_616_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                o_count_4_reg_320 <= o_count_reg_255;
            end if; 
        end if;
    end process;

    o_count_5_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln43_fu_636_p2 = ap_const_lv1_0))) then 
                o_count_5_reg_330 <= o_count_6_fu_647_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_552_p2 = ap_const_lv1_1))) then 
                o_count_5_reg_330 <= add_ln23_1_reg_858;
            end if; 
        end if;
    end process;

    o_count_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                o_count_reg_255 <= phi_ln13_reg_179;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                o_count_reg_255 <= add_ln23_3_fu_622_p2;
            end if; 
        end if;
    end process;

    phi_ln13_1_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln13_1_reg_244 <= indvars_iv1_reg_169;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                phi_ln13_1_reg_244 <= add_ln23_4_fu_627_p2;
            end if; 
        end if;
    end process;

    phi_ln13_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_ln13_reg_179 <= zext_ln13_7_fu_473_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                phi_ln13_reg_179 <= add_ln13_7_fu_658_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln13_12_reg_762 <= add_ln13_12_fu_415_p2;
                add_ln13_3_reg_747 <= add_ln13_3_fu_395_p2;
                    add_ln13_4_reg_757(5 downto 1) <= add_ln13_4_fu_405_p2(5 downto 1);
                empty_35_reg_740 <= empty_35_fu_390_p2;
                    shl_ln13_reg_752(5 downto 1) <= shl_ln13_fu_400_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln13_13_reg_820 <= add_ln13_13_fu_482_p2;
                empty_37_reg_826 <= empty_37_fu_486_p1;
                mul_ln13_reg_779 <= mul_ln13_fu_434_p2;
                    p_cast5_reg_799(4 downto 0) <= p_cast5_fu_452_p1(4 downto 0);
                    p_cast9_reg_789(4 downto 0) <= p_cast9_fu_443_p1(4 downto 0);
                    zext_ln13_10_reg_831(9 downto 0) <= zext_ln13_10_fu_501_p1(9 downto 0);
                    zext_ln13_2_reg_774(6 downto 0) <= zext_ln13_2_fu_427_p1(6 downto 0);
                    zext_ln13_5_reg_784(11 downto 0) <= zext_ln13_5_fu_440_p1(11 downto 0);
                    zext_ln13_6_reg_804(9 downto 0) <= zext_ln13_6_fu_469_p1(9 downto 0);
                    zext_ln13_reg_767(4 downto 0) <= zext_ln13_fu_424_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_5_reg_734 <= add_ln13_5_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln13_reg_692 <= add_ln13_fu_343_p2;
                trunc_ln13_reg_685 <= trunc_ln13_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_552_p2 = ap_const_lv1_1))) then
                add_ln20_1_reg_878 <= add_ln20_1_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln20_2_reg_907 <= add_ln20_2_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln23_1_reg_858 <= add_ln23_1_fu_547_p2;
                i_count_reg_853 <= i_count_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_552_p2 = ap_const_lv1_0))) then
                add_ln30_reg_873 <= add_ln30_fu_563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                depth_reg_840 <= depth_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_34_reg_714 <= empty_34_fu_370_p2;
                empty_36_reg_729 <= empty_36_fu_379_p1;
                empty_reg_708 <= empty_fu_366_p1;
                mul_ln13_1_reg_703 <= mul_ln13_1_fu_360_p2;
                sext_ln5_1_reg_698 <= sext_ln5_1_fu_349_p1;
                trunc_ln13_1_reg_724 <= trunc_ln13_1_fu_375_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                height_reg_868 <= height_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln25_reg_883 <= icmp_ln25_fu_572_p2;
                icmp_ln25_reg_883_pp1_iter1_reg <= icmp_ln25_reg_883;
                o_count_3_reg_299_pp1_iter1_reg <= o_count_3_reg_299;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_reg_883 = ap_const_lv1_0))) then
                input_load_reg_902 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_fu_572_p2 = ap_const_lv1_0))) then
                o_count_7_reg_897 <= o_count_7_fu_589_p2;
            end if;
        end if;
    end process;
    shl_ln13_reg_752(0) <= '0';
    add_ln13_4_reg_757(0) <= '1';
    zext_ln13_reg_767(13 downto 5) <= "000000000";
    zext_ln13_2_reg_774(13 downto 7) <= "0000000";
    zext_ln13_5_reg_784(15 downto 12) <= "0000";
    p_cast9_reg_789(15 downto 5) <= "00000000000";
    p_cast5_reg_799(15 downto 5) <= "00000000000";
    zext_ln13_6_reg_804(13 downto 10) <= "0000";
    zext_ln13_10_reg_831(13 downto 10) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln13_fu_505_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln15_fu_520_p2, icmp_ln23_fu_552_p2, ap_CS_fsm_state9, icmp_ln25_fu_572_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state14, icmp_ln34_fu_605_p2, ap_CS_fsm_state16, icmp_ln43_fu_636_p2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_505_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln15_fu_520_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln23_fu_552_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_fu_572_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_fu_572_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln34_fu_605_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln43_fu_636_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln13_10_fu_663_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_169) + unsigned(zext_ln13_10_reg_831));
    add_ln13_11_fu_411_p2 <= std_logic_vector(unsigned(trunc_ln13_reg_685) + unsigned(add_ln13_5_reg_734));
    add_ln13_12_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(add_ln13_11_fu_411_p2));
    add_ln13_13_fu_482_p2 <= std_logic_vector(unsigned(add_ln13_5_reg_734) + unsigned(empty_35_reg_740));
    add_ln13_15_fu_668_p2 <= std_logic_vector(unsigned(add_ln13_13_reg_820) + unsigned(indvars_iv_reg_159));
    add_ln13_16_fu_673_p2 <= std_logic_vector(unsigned(add_ln13_13_reg_820) + unsigned(indvars_iv2_reg_149));
    add_ln13_1_fu_458_p2 <= std_logic_vector(unsigned(p_cast7_fu_446_p1) + unsigned(empty_reg_708));
    add_ln13_2_fu_463_p2 <= std_logic_vector(unsigned(add_ln13_1_fu_458_p2) + unsigned(p_cast4_fu_455_p1));
    add_ln13_3_fu_395_p1 <= input_width;
    add_ln13_3_fu_395_p2 <= std_logic_vector(unsigned(p_cast8_fu_387_p1) + unsigned(add_ln13_3_fu_395_p1));
    add_ln13_4_fu_405_p2 <= std_logic_vector(unsigned(ap_const_lv6_5) + unsigned(shl_ln13_fu_400_p2));
    add_ln13_5_fu_383_p2 <= std_logic_vector(unsigned(trunc_ln13_1_reg_724) + unsigned(empty_34_reg_714));
    add_ln13_6_fu_653_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_804) + unsigned(indvars_iv10_reg_189));
    add_ln13_7_fu_658_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_804) + unsigned(phi_ln13_reg_179));
    add_ln13_8_fu_490_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(empty_reg_708));
    add_ln13_9_fu_495_p2 <= std_logic_vector(unsigned(zext_ln13_8_fu_476_p1) + unsigned(add_ln13_8_fu_490_p2));
    add_ln13_fu_343_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln13_fu_339_p1));
    add_ln20_1_fu_568_p2 <= std_logic_vector(unsigned(add_ln23_1_reg_858) + unsigned(p_cast5_reg_799));
    add_ln20_2_fu_600_p2 <= std_logic_vector(unsigned(zext_ln13_reg_767) + unsigned(o_count_2_reg_266));
    add_ln20_fu_531_p2 <= std_logic_vector(unsigned(o_count_1_reg_234) + unsigned(ap_const_lv16_1));
    add_ln23_1_fu_547_p2 <= std_logic_vector(unsigned(add_ln23_fu_542_p2) + unsigned(zext_ln13_5_reg_784));
    add_ln23_3_fu_622_p2 <= std_logic_vector(unsigned(zext_ln13_reg_767) + unsigned(o_count_reg_255));
    add_ln23_4_fu_627_p2 <= std_logic_vector(unsigned(zext_ln13_reg_767) + unsigned(phi_ln13_1_reg_244));
    add_ln23_fu_542_p2 <= std_logic_vector(unsigned(p_cast9_reg_789) + unsigned(o_count_0_reg_199));
    add_ln30_1_fu_583_p2 <= std_logic_vector(unsigned(i_count_2_reg_310) + unsigned(ap_const_lv14_1));
    add_ln30_fu_563_p2 <= std_logic_vector(unsigned(zext_ln13_2_reg_774) + unsigned(i_count_1_reg_277));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state10_assign_proc : process(icmp_ln25_fu_572_p2)
    begin
        if ((icmp_ln25_fu_572_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln13_fu_505_p2, ap_CS_fsm_state6)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_505_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_o_count_3_phi_fu_302_p4_assign_proc : process(o_count_3_reg_299, ap_CS_fsm_pp1_stage0, icmp_ln25_reg_883, o_count_7_reg_897, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln25_reg_883 = ap_const_lv1_0))) then 
            ap_phi_mux_o_count_3_phi_fu_302_p4 <= o_count_7_reg_897;
        else 
            ap_phi_mux_o_count_3_phi_fu_302_p4 <= o_count_3_reg_299;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln13_fu_505_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln13_fu_505_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_fu_510_p2 <= std_logic_vector(unsigned(depth_0_reg_223) + unsigned(ap_const_lv5_1));
    empty_34_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(trunc_ln13_reg_685));
    empty_35_fu_390_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(trunc_ln13_reg_685));
    empty_36_fu_379_p0 <= input_height;
    empty_36_fu_379_p1 <= empty_36_fu_379_p0(5 - 1 downto 0);
    empty_37_fu_486_p1 <= input_depth(5 - 1 downto 0);
    empty_fu_366_p1 <= mul_ln13_1_fu_360_p2(10 - 1 downto 0);
    height_fu_557_p2 <= std_logic_vector(unsigned(height_0_reg_288) + unsigned(ap_const_lv5_1));
    i_count_fu_537_p2 <= std_logic_vector(unsigned(mul_ln13_reg_779) + unsigned(i_count_0_reg_211));
    icmp_ln13_fu_505_p2 <= "1" when (depth_0_reg_223 = empty_37_reg_826) else "0";
    icmp_ln15_fu_520_p2 <= "1" when (trunc_ln15_fu_516_p1 = indvars_iv2_reg_149) else "0";
    icmp_ln23_fu_552_p2 <= "1" when (height_0_reg_288 = empty_36_reg_729) else "0";
    icmp_ln25_fu_572_p2 <= "1" when (ap_phi_mux_o_count_3_phi_fu_302_p4 = o_count_reg_255) else "0";
    icmp_ln34_fu_605_p2 <= "1" when (o_count_4_reg_320 = phi_ln13_1_reg_244) else "0";
    icmp_ln43_fu_636_p2 <= "1" when (trunc_ln43_fu_632_p1 = indvars_iv_reg_159) else "0";
    input_r_address0 <= zext_ln29_fu_578_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln13_1_fu_360_p0 <= mul_ln13_1_fu_360_p00(5 - 1 downto 0);
    mul_ln13_1_fu_360_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_692),12));
    mul_ln13_1_fu_360_p1 <= mul_ln13_1_fu_360_p10(7 - 1 downto 0);
    mul_ln13_1_fu_360_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_fu_349_p1),12));
    mul_ln13_1_fu_360_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_fu_360_p0) * unsigned(mul_ln13_1_fu_360_p1), 12));
    mul_ln13_fu_434_p0 <= mul_ln13_fu_434_p00(7 - 1 downto 0);
    mul_ln13_fu_434_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_421_p1),14));
    mul_ln13_fu_434_p1 <= mul_ln13_fu_434_p10(7 - 1 downto 0);
    mul_ln13_fu_434_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_reg_698),14));
    mul_ln13_fu_434_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_fu_434_p0) * unsigned(mul_ln13_fu_434_p1), 14));
    o_count_6_fu_647_p2 <= std_logic_vector(unsigned(o_count_5_reg_330) + unsigned(ap_const_lv16_1));
    o_count_7_fu_589_p2 <= std_logic_vector(unsigned(ap_phi_mux_o_count_3_phi_fu_302_p4) + unsigned(ap_const_lv14_1));
    o_count_8_fu_616_p2 <= std_logic_vector(unsigned(o_count_4_reg_320) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, zext_ln19_fu_526_p1, zext_ln29_1_fu_595_p1, zext_ln38_fu_611_p1, zext_ln47_fu_642_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_r_address0 <= zext_ln47_fu_642_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_address0 <= zext_ln38_fu_611_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            output_r_address0 <= zext_ln29_1_fu_595_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= zext_ln19_fu_526_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state7, input_load_reg_902, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            output_r_d0 <= input_load_reg_902;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state7, icmp_ln15_fu_520_p2, icmp_ln25_reg_883_pp1_iter1_reg, ap_CS_fsm_state14, icmp_ln34_fu_605_p2, ap_CS_fsm_state16, icmp_ln43_fu_636_p2, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln25_reg_883_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln43_fu_636_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln34_fu_605_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln15_fu_520_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast4_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_reg_740),10));
    p_cast5_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_reg_740),16));
    p_cast6_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_34_reg_714),14));
    p_cast7_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_34_reg_714),10));
    p_cast8_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_34_reg_714),6));
    p_cast9_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_34_reg_714),16));
    sext_ln5_1_fu_349_p0 <= input_height;
        sext_ln5_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_1_fu_349_p0),7));

    sext_ln5_fu_421_p0 <= input_width;
        sext_ln5_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_fu_421_p0),7));

    shl_ln13_fu_400_p0 <= input_width;
    shl_ln13_fu_400_p2 <= std_logic_vector(shift_left(unsigned(shl_ln13_fu_400_p0),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    trunc_ln13_1_fu_375_p1 <= mul_ln13_1_fu_360_p2(5 - 1 downto 0);
    trunc_ln13_fu_339_p0 <= input_width;
    trunc_ln13_fu_339_p1 <= trunc_ln13_fu_339_p0(5 - 1 downto 0);
    trunc_ln15_fu_516_p1 <= o_count_1_reg_234(5 - 1 downto 0);
    trunc_ln43_fu_632_p1 <= o_count_5_reg_330(5 - 1 downto 0);
    zext_ln13_10_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_9_fu_495_p2),14));
    zext_ln13_2_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_421_p1),14));
    zext_ln13_5_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_reg_703),16));
    zext_ln13_6_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_2_fu_463_p2),14));
    zext_ln13_7_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_3_reg_747),14));
    zext_ln13_8_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln13_reg_752),10));
    zext_ln13_9_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_4_reg_757),14));
    zext_ln13_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_692),14));
    zext_ln19_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_234),64));
    zext_ln29_1_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_299_pp1_iter1_reg),64));
    zext_ln29_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_310),64));
    zext_ln38_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_4_reg_320),64));
    zext_ln47_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_330),64));
end behav;
