-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv12_C4 : STD_LOGIC_VECTOR (11 downto 0) := "000011000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_1_b_s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SeparableConv2D_1_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_b_s_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_1_w_s_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln24_fu_231_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln24_reg_494 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln24_fu_235_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_reg_499 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_d_fu_247_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln24_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_fu_258_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_reg_517 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln34_fu_262_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln34_reg_522 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_266_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_527 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_279_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_535 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln26_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_310_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_548 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln37_fu_340_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln37_reg_553 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln31_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_352_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_561 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln37_fu_362_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln37_reg_566 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln33_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln37_fu_367_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln37_reg_571 : STD_LOGIC_VECTOR (12 downto 0);
    signal in_d_fu_381_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_reg_579 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln37_8_fu_387_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln37_8_reg_584 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln35_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_594 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_3_reg_604 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal buffer_fu_481_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal kernel_buffer_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_buffer_1_ce0 : STD_LOGIC;
    signal kernel_buffer_1_we0 : STD_LOGIC;
    signal kernel_buffer_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_d_0_reg_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul1_reg_153 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_164 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_h_0_reg_176 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_0_reg_198 : STD_LOGIC_VECTOR (23 downto 0);
    signal in_d_0_reg_208 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_220 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln25_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_4_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_5_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_4_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_5_fu_285_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_fu_289_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln3_fu_316_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln37_2_fu_328_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln37_7_fu_324_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_8_fu_336_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_fu_358_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_4_fu_371_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln37_1_fu_393_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln37_4_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_407_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln42_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_425_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_fu_415_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_fu_440_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln43_fu_443_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln43_2_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_487_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln37_6_fu_478_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component network_mul_mul_16s_15s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component pointwise_conv2d_fix_1_SeparableConv2D_1_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component pointwise_conv2d_fix_1_SeparableConv2D_1_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component pointwise_conv2d_fix_1_kernel_buffer_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_1_b_s_U : component pointwise_conv2d_fix_1_SeparableConv2D_1_b_s
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_1_b_s_address0,
        ce0 => SeparableConv2D_1_b_s_ce0,
        q0 => SeparableConv2D_1_b_s_q0);

    SeparableConv2D_1_w_s_U : component pointwise_conv2d_fix_1_SeparableConv2D_1_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_1_w_s_address0,
        ce0 => SeparableConv2D_1_w_s_ce0,
        q0 => SeparableConv2D_1_w_s_q0);

    kernel_buffer_1_U : component pointwise_conv2d_fix_1_kernel_buffer_1
    generic map (
        DataWidth => 15,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_buffer_1_address0,
        ce0 => kernel_buffer_1_ce0,
        we0 => kernel_buffer_1_we0,
        d0 => SeparableConv2D_1_w_s_q0,
        q0 => kernel_buffer_1_q0);

    network_mul_mul_16s_15s_31_1_1_U35 : component network_mul_mul_16s_15s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => input_load_reg_594,
        din1 => kernel_buffer_1_q0,
        dout => mul_ln37_fu_487_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                buffer_0_reg_198 <= sext_ln34_reg_522;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                buffer_0_reg_198 <= buffer_fu_481_p2;
            end if; 
        end if;
    end process;

    i_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_164 <= i_reg_535;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_164 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    in_d_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                in_d_0_reg_208 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                in_d_0_reg_208 <= in_d_reg_579;
            end if; 
        end if;
    end process;

    out_d_0_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_304_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_142 <= out_d_reg_507;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_142 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_h_0_reg_176 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln33_fu_346_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_176 <= out_h_reg_548;
            end if; 
        end if;
    end process;

    out_w_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                out_w_0_reg_187 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_375_p2 = ap_const_lv1_1))) then 
                out_w_0_reg_187 <= out_w_reg_561;
            end if; 
        end if;
    end process;

    phi_mul1_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_304_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_153 <= add_ln24_reg_499;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_153 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul_reg_220 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul_reg_220 <= add_ln37_8_reg_584;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln24_reg_499 <= add_ln24_fu_235_p2;
                out_d_reg_507 <= out_d_fu_247_p2;
                    zext_ln24_reg_494(10 downto 0) <= zext_ln24_fu_231_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln37_8_reg_584 <= add_ln37_8_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                add_ln37_reg_566 <= add_ln37_fu_362_p2;
                sext_ln37_reg_571 <= sext_ln37_fu_367_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_535 <= i_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                in_d_reg_579 <= in_d_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_load_reg_594 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_h_reg_548 <= out_h_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                out_w_reg_561 <= out_w_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln34_reg_522 <= sext_ln34_fu_262_p1;
                    shl_ln_reg_527(6 downto 4) <= shl_ln_fu_266_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln37_reg_553(8 downto 1) <= sub_ln37_fu_340_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_3_reg_604 <= mul_ln37_fu_487_p2(30 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln28_reg_517 <= trunc_ln28_fu_258_p1;
            end if;
        end if;
    end process;
    zext_ln24_reg_494(11) <= '0';
    shl_ln_reg_527(3 downto 0) <= "0000";
    sub_ln37_reg_553(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_241_p2, ap_CS_fsm_state4, icmp_ln26_fu_273_p2, ap_CS_fsm_state6, icmp_ln31_fu_304_p2, ap_CS_fsm_state7, icmp_ln33_fu_346_p2, ap_CS_fsm_state8, icmp_ln35_fu_375_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln24_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln26_fu_273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_304_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln33_fu_346_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_375_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    SeparableConv2D_1_b_s_address0 <= zext_ln25_fu_253_p1(3 - 1 downto 0);

    SeparableConv2D_1_b_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SeparableConv2D_1_w_s_address0 <= zext_ln28_4_fu_294_p1(7 - 1 downto 0);

    SeparableConv2D_1_w_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SeparableConv2D_1_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_fu_235_p2 <= std_logic_vector(unsigned(phi_mul1_reg_153) + unsigned(ap_const_lv11_C4));
    add_ln28_fu_289_p2 <= std_logic_vector(unsigned(zext_ln28_5_fu_285_p1) + unsigned(shl_ln_reg_527));
    add_ln37_1_fu_393_p2 <= std_logic_vector(unsigned(zext_ln35_4_fu_371_p1) + unsigned(sext_ln37_reg_571));
    add_ln37_8_fu_387_p2 <= std_logic_vector(unsigned(phi_mul_reg_220) + unsigned(ap_const_lv12_C4));
    add_ln37_fu_362_p2 <= std_logic_vector(unsigned(sub_ln37_reg_553) + unsigned(zext_ln35_fu_358_p1));
    add_ln43_fu_443_p2 <= std_logic_vector(unsigned(zext_ln24_reg_494) + unsigned(sext_ln43_fu_440_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_241_p2)
    begin
        if ((((icmp_ln24_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_241_p2)
    begin
        if (((icmp_ln24_fu_241_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_481_p2 <= std_logic_vector(unsigned(buffer_0_reg_198) + unsigned(sext_ln37_6_fu_478_p1));
    i_fu_279_p2 <= std_logic_vector(unsigned(i_0_reg_164) + unsigned(ap_const_lv5_1));
    icmp_ln24_fu_241_p2 <= "1" when (out_d_0_reg_142 = ap_const_lv4_8) else "0";
    icmp_ln26_fu_273_p2 <= "1" when (i_0_reg_164 = ap_const_lv5_10) else "0";
    icmp_ln31_fu_304_p2 <= "1" when (out_h_0_reg_176 = ap_const_lv4_E) else "0";
    icmp_ln33_fu_346_p2 <= "1" when (out_w_0_reg_187 = ap_const_lv4_E) else "0";
    icmp_ln35_fu_375_p2 <= "1" when (in_d_0_reg_208 = ap_const_lv5_10) else "0";
    in_d_fu_381_p2 <= std_logic_vector(unsigned(in_d_0_reg_208) + unsigned(ap_const_lv5_1));
    input_r_address0 <= zext_ln37_5_fu_402_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_buffer_1_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5, zext_ln28_fu_299_p1, zext_ln37_4_fu_457_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_buffer_1_address0 <= zext_ln37_4_fu_457_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_buffer_1_address0 <= zext_ln28_fu_299_p1(4 - 1 downto 0);
        else 
            kernel_buffer_1_address0 <= "XXXX";
        end if; 
    end process;


    kernel_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            kernel_buffer_1_ce0 <= ap_const_logic_1;
        else 
            kernel_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_buffer_1_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_buffer_1_we0 <= ap_const_logic_1;
        else 
            kernel_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_d_fu_247_p2 <= std_logic_vector(unsigned(out_d_0_reg_142) + unsigned(ap_const_lv4_1));
    out_h_fu_310_p2 <= std_logic_vector(unsigned(out_h_0_reg_176) + unsigned(ap_const_lv4_1));
    out_w_fu_352_p2 <= std_logic_vector(unsigned(out_w_0_reg_187) + unsigned(ap_const_lv4_1));
    output_r_address0 <= zext_ln43_fu_452_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln42_fu_415_p1 and select_ln42_fu_425_p3);

    output_r_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln35_fu_375_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_375_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln42_fu_425_p3 <= 
        ap_const_lv16_FFFF when (xor_ln42_fu_419_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln34_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_b_s_q0),24));

        sext_ln37_4_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_1_fu_393_p2),32));

        sext_ln37_6_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_604),24));

        sext_ln37_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_fu_362_p2),13));

        sext_ln43_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln43_fu_443_p2),32));

        sext_ln43_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_reg_566),12));

    shl_ln37_2_fu_328_p3 <= (out_h_0_reg_176 & ap_const_lv1_0);
    shl_ln3_fu_316_p3 <= (out_h_0_reg_176 & ap_const_lv4_0);
    shl_ln_fu_266_p3 <= (trunc_ln28_reg_517 & ap_const_lv4_0);
    sub_ln37_fu_340_p2 <= std_logic_vector(unsigned(zext_ln37_7_fu_324_p1) - unsigned(zext_ln37_8_fu_336_p1));
    tmp_fu_407_p3 <= buffer_0_reg_198(23 downto 23);
    trunc_ln28_fu_258_p1 <= out_d_0_reg_142(3 - 1 downto 0);
    trunc_ln42_fu_415_p1 <= buffer_0_reg_198(16 - 1 downto 0);
    xor_ln42_fu_419_p2 <= (tmp_fu_407_p3 xor ap_const_lv1_1);
    zext_ln24_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_153),12));
    zext_ln25_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_142),64));
    zext_ln28_4_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_289_p2),64));
    zext_ln28_5_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_164),7));
    zext_ln28_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_164),64));
    zext_ln35_4_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_220),13));
    zext_ln35_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_187),9));
    zext_ln37_4_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_0_reg_208),64));
    zext_ln37_5_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_4_fu_398_p1),64));
    zext_ln37_7_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_316_p3),9));
    zext_ln37_8_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln37_2_fu_328_p3),9));
    zext_ln43_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln43_2_fu_448_p1),64));
end behav;
