-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity up_sampling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (4 downto 0);
    input_width : IN STD_LOGIC_VECTOR (4 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of up_sampling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten31_reg_114 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_d_0_reg_126 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_138 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_149 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_161 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_173_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_490 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln6_fu_189_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln6_reg_496 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_fu_195_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln21_1_fu_199_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_1_reg_508 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_3_cast_fu_202_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln21_3_cast_reg_514 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_11_fu_209_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_11_reg_519 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln6_1_fu_460_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln6_1_reg_524 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln17_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln21_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_reg_534 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln14_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_540 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_540_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_540_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_239_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_544 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln15_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_551_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_1_fu_250_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln15_1_reg_564 : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_reg_569 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln21_fu_266_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_574 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_2_fu_279_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_2_reg_580 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_3_fu_284_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln21_3_reg_586 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln21_3_reg_586_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln17_1_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_1_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_294_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln14_reg_597 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln21_5_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_5_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_fu_305_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln14_reg_610 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_615 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln15_1_fu_316_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln15_1_reg_622 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln21_1_fu_326_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln21_1_reg_627 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_334_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_633 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_6_fu_348_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_6_reg_638 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_mid1_fu_369_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid1_reg_644 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln15_fu_375_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln15_reg_649 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal lshr_ln21_1_reg_654 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_fu_394_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_reg_659 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln21_7_fu_412_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_7_reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_mid1_fu_418_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_mid1_reg_669 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_w_fu_424_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_8_fu_437_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln21_8_reg_679 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_466_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln21_reg_684 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_473_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_1_reg_694 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal input_load_reg_699 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten31_phi_fu_118_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_130_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_142_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_153_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_165_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln21_6_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_8_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_9_fu_177_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln6_fu_189_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln6_fu_189_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_10_fu_205_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_fu_229_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_fu_229_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_2_fu_279_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_2_fu_279_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_3_fu_284_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_3_fu_284_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal mul_ln21_1_fu_326_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_1_fu_326_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_4_fu_331_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln21_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln21_mid1_fu_356_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_1_fu_339_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_11_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_6_cast_fu_390_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln21_3_fu_404_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_2_fu_399_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_6_cast_mid_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln21_4_fu_429_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln6_1_fu_460_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln6_1_fu_460_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_466_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_466_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_466_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_473_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_473_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_466_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_466_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_473_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_473_p20 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln21_1_fu_326_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln21_2_fu_279_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_3_fu_284_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln21_fu_229_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln6_1_fu_460_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln6_1_fu_460_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln6_fu_189_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln6_fu_189_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component network_mul_mul_10ns_5ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component network_mac_muladd_8ns_5ns_4ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component network_mac_muladd_9ns_6ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    network_mul_mul_10ns_5ns_15_1_1_U112 : component network_mul_mul_10ns_5ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln6_1_fu_460_p0,
        din1 => mul_ln6_1_fu_460_p1,
        dout => mul_ln6_1_fu_460_p2);

    network_mac_muladd_8ns_5ns_4ns_12_1_1_U113 : component network_mac_muladd_8ns_5ns_4ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_466_p0,
        din1 => grp_fu_466_p1,
        din2 => grp_fu_466_p2,
        dout => grp_fu_466_p3);

    network_mac_muladd_9ns_6ns_5ns_14_1_1_U114 : component network_mac_muladd_9ns_6ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_473_p0,
        din1 => grp_fu_473_p1,
        din2 => grp_fu_473_p2,
        dout => grp_fu_473_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln14_reg_540 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state7)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten31_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten31_reg_114 <= add_ln14_reg_597;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten31_reg_114 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_138 <= select_ln15_1_reg_622;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_138 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                out_d_0_reg_126 <= select_ln14_reg_610;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_d_0_reg_126 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then 
                out_h_0_reg_149 <= select_ln15_reg_649;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_h_0_reg_149 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then 
                out_w_0_reg_161 <= out_w_fu_424_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_w_0_reg_161 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln14_reg_597 <= add_ln14_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_234_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln15_1_reg_564 <= add_ln15_1_fu_250_p2;
                icmp_ln15_reg_551 <= icmp_ln15_fu_245_p2;
                out_d_reg_544 <= out_d_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln21_1_reg_694 <= grp_fu_473_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln21_reg_684 <= grp_fu_466_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    empty_11_reg_519(4 downto 0) <= empty_11_fu_209_p1(4 downto 0);
                icmp_ln17_reg_529 <= icmp_ln17_fu_220_p2;
                mul_ln6_1_reg_524 <= mul_ln6_1_fu_460_p2;
                    zext_ln21_1_reg_508(5 downto 0) <= zext_ln21_1_fu_199_p1(5 downto 0);
                    zext_ln21_3_cast_reg_514(5 downto 0) <= zext_ln21_3_cast_fu_202_p1(5 downto 0);
                    zext_ln21_reg_502(4 downto 0) <= zext_ln21_fu_195_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_490 <= empty_fu_173_p1;
                mul_ln6_reg_496 <= mul_ln6_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln14_reg_540 <= icmp_ln14_fu_234_p2;
                icmp_ln14_reg_540_pp0_iter1_reg <= icmp_ln14_reg_540;
                icmp_ln14_reg_540_pp0_iter2_reg <= icmp_ln14_reg_540_pp0_iter1_reg;
                icmp_ln15_reg_551_pp0_iter1_reg <= icmp_ln15_reg_551;
                mul_ln21_1_reg_627 <= mul_ln21_1_fu_326_p2;
                mul_ln21_reg_534 <= mul_ln21_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln15_reg_551 = ap_const_lv1_0))) then
                icmp_ln17_1_reg_592 <= icmp_ln17_1_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln14_reg_540_pp0_iter2_reg = ap_const_lv1_0))) then
                input_load_reg_699 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln21_1_reg_654 <= select_ln21_6_fu_348_p3(4 downto 1);
                select_ln21_6_reg_638 <= select_ln21_6_fu_348_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln15_reg_551 = ap_const_lv1_0))) then
                lshr_ln_reg_569 <= ap_phi_mux_out_h_0_phi_fu_153_p4(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln21_2_reg_580 <= mul_ln21_2_fu_279_p2;
                mul_ln21_3_reg_586 <= mul_ln21_3_fu_284_p2;
                select_ln21_reg_574 <= select_ln21_fu_266_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln21_3_reg_586_pp0_iter1_reg <= mul_ln21_3_reg_586;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_h_reg_615 <= out_h_fu_311_p2;
                select_ln21_5_reg_602 <= select_ln21_5_fu_300_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                select_ln14_reg_610 <= select_ln14_fu_305_p3;
                select_ln15_1_reg_622 <= select_ln15_1_fu_316_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln15_reg_649 <= select_ln15_fu_375_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then
                select_ln21_7_reg_664 <= select_ln21_7_fu_412_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then
                select_ln21_8_reg_679 <= select_ln21_8_fu_437_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln21_5_reg_602 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp2_mid1_reg_669 <= tmp2_mid1_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln21_5_reg_602 = ap_const_lv1_0) and (icmp_ln15_reg_551_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp2_reg_659 <= tmp2_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (select_ln21_5_reg_602 = ap_const_lv1_1))) then
                tmp_mid1_reg_644 <= tmp_mid1_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (select_ln21_5_reg_602 = ap_const_lv1_0) and (icmp_ln15_reg_551 = ap_const_lv1_0))) then
                tmp_reg_633 <= tmp_fu_334_p2;
            end if;
        end if;
    end process;
    zext_ln21_reg_502(7 downto 5) <= "000";
    zext_ln21_1_reg_508(8 downto 6) <= "000";
    zext_ln21_3_cast_reg_514(13 downto 6) <= "00000000";
    empty_11_reg_519(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln14_fu_294_p2 <= std_logic_vector(unsigned(indvar_flatten31_reg_114) + unsigned(ap_const_lv15_1));
    add_ln15_1_fu_250_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_142_p4) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state7_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten31_phi_fu_118_p4_assign_proc : process(indvar_flatten31_reg_114, ap_CS_fsm_pp0_stage0, icmp_ln14_reg_540, add_ln14_reg_597, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten31_phi_fu_118_p4 <= add_ln14_reg_597;
        else 
            ap_phi_mux_indvar_flatten31_phi_fu_118_p4 <= indvar_flatten31_reg_114;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_142_p4_assign_proc : process(indvar_flatten_reg_138, ap_CS_fsm_pp0_stage0, icmp_ln14_reg_540, select_ln15_1_reg_622, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_142_p4 <= select_ln15_1_reg_622;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_142_p4 <= indvar_flatten_reg_138;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_130_p4_assign_proc : process(out_d_0_reg_126, ap_CS_fsm_pp0_stage0, icmp_ln14_reg_540, select_ln14_reg_610, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln14_reg_540 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_out_d_0_phi_fu_130_p4 <= select_ln14_reg_610;
        else 
            ap_phi_mux_out_d_0_phi_fu_130_p4 <= out_d_0_reg_126;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_153_p4_assign_proc : process(out_h_0_reg_149, icmp_ln14_reg_540_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln15_reg_649, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_out_h_0_phi_fu_153_p4 <= select_ln15_reg_649;
        else 
            ap_phi_mux_out_h_0_phi_fu_153_p4 <= out_h_0_reg_149;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_165_p4_assign_proc : process(out_w_0_reg_161, icmp_ln14_reg_540_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, out_w_fu_424_p2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln14_reg_540_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_out_w_0_phi_fu_165_p4 <= out_w_fu_424_p2;
        else 
            ap_phi_mux_out_w_0_phi_fu_165_p4 <= out_w_0_reg_161;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_205_p1 <= output_depth(5 - 1 downto 0);
    empty_11_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),12));
    empty_9_fu_177_p1 <= output_height(5 - 1 downto 0);
    empty_fu_173_p1 <= output_width(5 - 1 downto 0);
    grp_fu_466_p0 <= grp_fu_466_p00(8 - 1 downto 0);
    grp_fu_466_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_7_reg_664),12));
    grp_fu_466_p1 <= empty_11_reg_519(5 - 1 downto 0);
    grp_fu_466_p2 <= grp_fu_466_p20(4 - 1 downto 0);
    grp_fu_466_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln21_1_reg_654),12));
    grp_fu_473_p0 <= grp_fu_473_p00(9 - 1 downto 0);
    grp_fu_473_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_8_reg_679),14));
    grp_fu_473_p1 <= zext_ln21_3_cast_reg_514(6 - 1 downto 0);
    grp_fu_473_p2 <= grp_fu_473_p20(5 - 1 downto 0);
    grp_fu_473_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_6_reg_638),14));
    icmp_ln14_fu_234_p2 <= "1" when (ap_phi_mux_indvar_flatten31_phi_fu_118_p4 = mul_ln6_1_reg_524) else "0";
    icmp_ln15_fu_245_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_142_p4 = mul_ln6_reg_496) else "0";
    icmp_ln17_1_fu_289_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_165_p4 = empty_reg_490) else "0";
    icmp_ln17_fu_220_p2 <= "1" when (empty_reg_490 = ap_const_lv5_0) else "0";
    input_r_address0 <= zext_ln21_6_fu_449_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln21_mid1_fu_356_p4 <= out_h_reg_615(4 downto 1);
    mul_ln21_1_fu_326_p0 <= mul_ln21_1_fu_326_p00(5 - 1 downto 0);
    mul_ln21_1_fu_326_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_126),9));
    mul_ln21_1_fu_326_p1 <= zext_ln21_1_reg_508(6 - 1 downto 0);
    mul_ln21_1_fu_326_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln21_1_fu_326_p0) * unsigned(mul_ln21_1_fu_326_p1), 9));
    mul_ln21_2_fu_279_p0 <= mul_ln21_2_fu_279_p00(5 - 1 downto 0);
    mul_ln21_2_fu_279_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_544),8));
    mul_ln21_2_fu_279_p1 <= zext_ln21_reg_502(5 - 1 downto 0);
    mul_ln21_2_fu_279_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln21_2_fu_279_p0) * unsigned(mul_ln21_2_fu_279_p1), 8));
    mul_ln21_3_fu_284_p0 <= mul_ln21_3_fu_284_p00(5 - 1 downto 0);
    mul_ln21_3_fu_284_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_544),9));
    mul_ln21_3_fu_284_p1 <= zext_ln21_1_reg_508(6 - 1 downto 0);
    mul_ln21_3_fu_284_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln21_3_fu_284_p0) * unsigned(mul_ln21_3_fu_284_p1), 9));
    mul_ln21_fu_229_p0 <= mul_ln21_fu_229_p00(5 - 1 downto 0);
    mul_ln21_fu_229_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_130_p4),8));
    mul_ln21_fu_229_p1 <= zext_ln21_reg_502(5 - 1 downto 0);
    mul_ln21_fu_229_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln21_fu_229_p0) * unsigned(mul_ln21_fu_229_p1), 8));
    mul_ln6_1_fu_460_p0 <= mul_ln6_1_fu_460_p00(10 - 1 downto 0);
    mul_ln6_1_fu_460_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln6_reg_496),15));
    mul_ln6_1_fu_460_p1 <= mul_ln6_1_fu_460_p10(5 - 1 downto 0);
    mul_ln6_1_fu_460_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_10_fu_205_p1),15));
    mul_ln6_fu_189_p0 <= mul_ln6_fu_189_p00(5 - 1 downto 0);
    mul_ln6_fu_189_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_173_p1),10));
    mul_ln6_fu_189_p1 <= mul_ln6_fu_189_p10(5 - 1 downto 0);
    mul_ln6_fu_189_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_9_fu_177_p1),10));
    mul_ln6_fu_189_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln6_fu_189_p0) * unsigned(mul_ln6_fu_189_p1), 10));
    or_ln21_fu_344_p2 <= (select_ln21_5_reg_602 or icmp_ln15_reg_551);
    out_d_fu_239_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_d_0_phi_fu_130_p4) + unsigned(ap_const_lv5_1));
    out_h_fu_311_p2 <= std_logic_vector(unsigned(select_ln21_reg_574) + unsigned(ap_const_lv5_1));
    out_w_fu_424_p2 <= std_logic_vector(unsigned(select_ln21_6_reg_638) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln21_8_fu_456_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= input_load_reg_699;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln14_reg_540_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln14_reg_540_pp0_iter2_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_fu_305_p3 <= 
        out_d_reg_544 when (icmp_ln15_reg_551(0) = '1') else 
        out_d_0_reg_126;
    select_ln15_1_fu_316_p3 <= 
        ap_const_lv10_1 when (icmp_ln15_reg_551(0) = '1') else 
        add_ln15_1_reg_564;
    select_ln15_fu_375_p3 <= 
        out_h_reg_615 when (select_ln21_5_reg_602(0) = '1') else 
        select_ln21_reg_574;
    select_ln21_1_fu_339_p3 <= 
        mul_ln21_2_reg_580 when (icmp_ln15_reg_551(0) = '1') else 
        mul_ln21_reg_534;
    select_ln21_2_fu_399_p3 <= 
        mul_ln21_3_reg_586 when (icmp_ln15_reg_551_pp0_iter1_reg(0) = '1') else 
        mul_ln21_1_reg_627;
    select_ln21_3_fu_404_p3 <= 
        mul_ln21_2_reg_580 when (icmp_ln15_reg_551_pp0_iter1_reg(0) = '1') else 
        tmp_reg_633;
    select_ln21_4_fu_429_p3 <= 
        mul_ln21_3_reg_586_pp0_iter1_reg when (icmp_ln15_reg_551_pp0_iter1_reg(0) = '1') else 
        tmp2_reg_659;
    select_ln21_5_fu_300_p3 <= 
        icmp_ln17_reg_529 when (icmp_ln15_reg_551(0) = '1') else 
        icmp_ln17_1_reg_592;
    select_ln21_6_fu_348_p3 <= 
        ap_const_lv5_0 when (or_ln21_fu_344_p2(0) = '1') else 
        out_w_0_reg_161;
    select_ln21_7_fu_412_p3 <= 
        tmp_mid1_reg_644 when (select_ln21_5_reg_602(0) = '1') else 
        select_ln21_3_fu_404_p3;
    select_ln21_8_fu_437_p3 <= 
        tmp2_mid1_reg_669 when (select_ln21_5_reg_602(0) = '1') else 
        select_ln21_4_fu_429_p3;
    select_ln21_fu_266_p3 <= 
        ap_const_lv5_0 when (icmp_ln15_reg_551(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_153_p4;
    tmp2_fu_394_p2 <= std_logic_vector(unsigned(mul_ln21_1_reg_627) + unsigned(zext_ln21_6_cast_fu_390_p1));
    tmp2_mid1_fu_418_p2 <= std_logic_vector(unsigned(select_ln21_2_fu_399_p3) + unsigned(zext_ln21_6_cast_mid_fu_409_p1));
    tmp_fu_334_p2 <= std_logic_vector(unsigned(mul_ln21_reg_534) + unsigned(zext_ln21_4_fu_331_p1));
    tmp_mid1_fu_369_p2 <= std_logic_vector(unsigned(select_ln21_1_fu_339_p3) + unsigned(zext_ln21_11_fu_365_p1));
    zext_ln21_11_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln21_mid1_fu_356_p4),8));
    zext_ln21_1_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
    zext_ln21_3_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln21_4_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_569),8));
    zext_ln21_6_cast_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_149),9));
    zext_ln21_6_cast_mid_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_615),9));
    zext_ln21_6_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_reg_684),64));
    zext_ln21_8_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_1_reg_694),64));
    zext_ln21_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),8));
end behav;
