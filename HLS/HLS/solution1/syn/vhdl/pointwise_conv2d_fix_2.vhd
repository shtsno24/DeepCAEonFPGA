-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_31 : STD_LOGIC_VECTOR (8 downto 0) := "000110001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_2_b_s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SeparableConv2D_2_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_2_b_s_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_2_w_s_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal SeparableConv2D_2_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_2_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln24_fu_217_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln24_reg_468 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln24_fu_221_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln24_reg_473 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_233_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_481 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln24_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_fu_244_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_reg_491 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln34_fu_248_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln34_reg_496 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_252_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_501 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_265_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_509 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln26_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_296_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_h_reg_522 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln37_fu_318_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln37_reg_527 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln31_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_330_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_w_reg_535 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln37_fu_345_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln37_reg_540 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln33_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_d_fu_359_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_d_reg_549 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln37_6_fu_365_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln37_6_reg_554 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln35_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_564 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_2_reg_574 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal buffer_fu_455_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal kernel_buffer_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_buffer_1_ce0 : STD_LOGIC;
    signal kernel_buffer_1_we0 : STD_LOGIC;
    signal kernel_buffer_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_d_0_reg_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul1_reg_139 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_h_0_reg_162 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_w_0_reg_173 : STD_LOGIC_VECTOR (2 downto 0);
    signal buffer_0_reg_184 : STD_LOGIC_VECTOR (22 downto 0);
    signal in_d_0_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_206 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln25_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_4_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_285_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_6_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_271_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_275_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln2_fu_306_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln37_8_fu_314_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln37_7_fu_302_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln35_fu_336_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_fu_340_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln35_3_fu_349_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln37_1_fu_371_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln37_7_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_385_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln42_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_403_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_fu_393_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln43_fu_418_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln43_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_461_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln37_9_fu_452_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component network_mul_mul_16s_15s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component pointwise_conv2d_fix_2_SeparableConv2D_2_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component pointwise_conv2d_fix_2_SeparableConv2D_2_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component pointwise_conv2d_fix_1_kernel_buffer_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_2_b_s_U : component pointwise_conv2d_fix_2_SeparableConv2D_2_b_s
    generic map (
        DataWidth => 14,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_2_b_s_address0,
        ce0 => SeparableConv2D_2_b_s_ce0,
        q0 => SeparableConv2D_2_b_s_q0);

    SeparableConv2D_2_w_s_U : component pointwise_conv2d_fix_2_SeparableConv2D_2_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_2_w_s_address0,
        ce0 => SeparableConv2D_2_w_s_ce0,
        q0 => SeparableConv2D_2_w_s_q0);

    kernel_buffer_1_U : component pointwise_conv2d_fix_1_kernel_buffer_1
    generic map (
        DataWidth => 15,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_buffer_1_address0,
        ce0 => kernel_buffer_1_ce0,
        we0 => kernel_buffer_1_we0,
        d0 => SeparableConv2D_2_w_s_q0,
        q0 => kernel_buffer_1_q0);

    network_mul_mul_16s_15s_31_1_1_U51 : component network_mul_mul_16s_15s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => input_load_reg_564,
        din1 => kernel_buffer_1_q0,
        dout => mul_ln37_fu_461_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                buffer_0_reg_184 <= zext_ln34_reg_496;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                buffer_0_reg_184 <= buffer_fu_455_p2;
            end if; 
        end if;
    end process;

    i_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_150 <= i_reg_509;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_150 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    in_d_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                in_d_0_reg_194 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                in_d_0_reg_194 <= in_d_reg_549;
            end if; 
        end if;
    end process;

    out_d_0_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_290_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_128 <= out_d_reg_481;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_128 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_h_0_reg_162 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln33_fu_324_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_162 <= out_h_reg_522;
            end if; 
        end if;
    end process;

    out_w_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                out_w_0_reg_173 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_353_p2 = ap_const_lv1_1))) then 
                out_w_0_reg_173 <= out_w_reg_535;
            end if; 
        end if;
    end process;

    phi_mul1_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_290_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_139 <= add_ln24_reg_473;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_139 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_mul_reg_206 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul_reg_206 <= add_ln37_6_reg_554;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln24_reg_473 <= add_ln24_fu_221_p2;
                out_d_reg_481 <= out_d_fu_233_p2;
                    zext_ln24_reg_468(8 downto 0) <= zext_ln24_fu_217_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_353_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                add_ln37_6_reg_554 <= add_ln37_6_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_509 <= i_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                in_d_reg_549 <= in_d_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_load_reg_564 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_h_reg_522 <= out_h_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                out_w_reg_535 <= out_w_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                sext_ln37_reg_540 <= sext_ln37_fu_345_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    shl_ln_reg_501(5 downto 3) <= shl_ln_fu_252_p3(5 downto 3);
                    zext_ln34_reg_496(13 downto 0) <= zext_ln34_fu_248_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_290_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sub_ln37_reg_527 <= sub_ln37_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_2_reg_574 <= mul_ln37_fu_461_p2(30 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln28_reg_491 <= trunc_ln28_fu_244_p1;
            end if;
        end if;
    end process;
    zext_ln24_reg_468(9) <= '0';
    zext_ln34_reg_496(22 downto 14) <= "000000000";
    shl_ln_reg_501(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_227_p2, ap_CS_fsm_state4, icmp_ln26_fu_259_p2, ap_CS_fsm_state6, icmp_ln31_fu_290_p2, ap_CS_fsm_state7, icmp_ln33_fu_324_p2, ap_CS_fsm_state8, icmp_ln35_fu_353_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln24_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln26_fu_259_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_290_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln33_fu_324_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_353_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    SeparableConv2D_2_b_s_address0 <= zext_ln25_fu_239_p1(3 - 1 downto 0);

    SeparableConv2D_2_b_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_2_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_2_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SeparableConv2D_2_w_s_address0 <= zext_ln28_4_fu_280_p1(6 - 1 downto 0);

    SeparableConv2D_2_w_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SeparableConv2D_2_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_2_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_fu_221_p2 <= std_logic_vector(unsigned(phi_mul1_reg_139) + unsigned(ap_const_lv9_31));
    add_ln28_fu_275_p2 <= std_logic_vector(unsigned(zext_ln28_3_fu_271_p1) + unsigned(shl_ln_reg_501));
    add_ln37_1_fu_371_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_349_p1) + unsigned(sext_ln37_reg_540));
    add_ln37_6_fu_365_p2 <= std_logic_vector(unsigned(phi_mul_reg_206) + unsigned(ap_const_lv9_31));
    add_ln37_fu_340_p2 <= std_logic_vector(unsigned(sub_ln37_reg_527) + unsigned(zext_ln35_fu_336_p1));
    add_ln43_fu_418_p2 <= std_logic_vector(unsigned(zext_ln24_reg_468) + unsigned(sext_ln37_reg_540));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_227_p2)
    begin
        if ((((icmp_ln24_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_227_p2)
    begin
        if (((icmp_ln24_fu_227_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_455_p2 <= std_logic_vector(unsigned(buffer_0_reg_184) + unsigned(sext_ln37_9_fu_452_p1));
    i_fu_265_p2 <= std_logic_vector(unsigned(i_0_reg_150) + unsigned(ap_const_lv4_1));
    icmp_ln24_fu_227_p2 <= "1" when (out_d_0_reg_128 = ap_const_lv4_8) else "0";
    icmp_ln26_fu_259_p2 <= "1" when (i_0_reg_150 = ap_const_lv4_8) else "0";
    icmp_ln31_fu_290_p2 <= "1" when (out_h_0_reg_162 = ap_const_lv3_7) else "0";
    icmp_ln33_fu_324_p2 <= "1" when (out_w_0_reg_173 = ap_const_lv3_7) else "0";
    icmp_ln35_fu_353_p2 <= "1" when (in_d_0_reg_194 = ap_const_lv4_8) else "0";
    in_d_fu_359_p2 <= std_logic_vector(unsigned(in_d_0_reg_194) + unsigned(ap_const_lv4_1));
    input_r_address0 <= zext_ln37_6_fu_380_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_buffer_1_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5, zext_ln28_fu_285_p1, zext_ln37_fu_431_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_buffer_1_address0 <= zext_ln37_fu_431_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_buffer_1_address0 <= zext_ln28_fu_285_p1(4 - 1 downto 0);
        else 
            kernel_buffer_1_address0 <= "XXXX";
        end if; 
    end process;


    kernel_buffer_1_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            kernel_buffer_1_ce0 <= ap_const_logic_1;
        else 
            kernel_buffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_buffer_1_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_buffer_1_we0 <= ap_const_logic_1;
        else 
            kernel_buffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_d_fu_233_p2 <= std_logic_vector(unsigned(out_d_0_reg_128) + unsigned(ap_const_lv4_1));
    out_h_fu_296_p2 <= std_logic_vector(unsigned(out_h_0_reg_162) + unsigned(ap_const_lv3_1));
    out_w_fu_330_p2 <= std_logic_vector(unsigned(out_w_0_reg_173) + unsigned(ap_const_lv3_1));
    output_r_address0 <= zext_ln43_fu_426_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln42_fu_393_p1 and select_ln42_fu_403_p3);

    output_r_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln35_fu_353_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_353_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln42_fu_403_p3 <= 
        ap_const_lv16_FFFF when (xor_ln42_fu_397_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln37_7_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_1_fu_371_p2),32));

        sext_ln37_9_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_574),23));

        sext_ln37_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_fu_340_p2),10));

        sext_ln43_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln43_fu_418_p2),32));

    shl_ln2_fu_306_p3 <= (out_h_0_reg_162 & ap_const_lv3_0);
    shl_ln_fu_252_p3 <= (trunc_ln28_reg_491 & ap_const_lv3_0);
    sub_ln37_fu_318_p2 <= std_logic_vector(unsigned(zext_ln37_8_fu_314_p1) - unsigned(zext_ln37_7_fu_302_p1));
    tmp_fu_385_p3 <= buffer_0_reg_184(22 downto 22);
    trunc_ln28_fu_244_p1 <= out_d_0_reg_128(3 - 1 downto 0);
    trunc_ln42_fu_393_p1 <= buffer_0_reg_184(16 - 1 downto 0);
    xor_ln42_fu_397_p2 <= (tmp_fu_385_p3 xor ap_const_lv1_1);
    zext_ln24_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_139),10));
    zext_ln25_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_128),64));
    zext_ln28_3_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_150),6));
    zext_ln28_4_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_275_p2),64));
    zext_ln28_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_150),64));
    zext_ln34_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_2_b_s_q0),23));
    zext_ln35_3_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_206),10));
    zext_ln35_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_173),7));
    zext_ln37_6_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_7_fu_376_p1),64));
    zext_ln37_7_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_162),7));
    zext_ln37_8_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_306_p3),7));
    zext_ln37_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_0_reg_194),64));
    zext_ln43_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln43_fu_422_p1),64));
end behav;
