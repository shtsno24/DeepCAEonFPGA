-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_328 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_339 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_362 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state11_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln32_reg_1227 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state12_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state9_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln32_reg_1227_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state10_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_367 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln40_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_reg_1030 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_1_cast29_fu_380_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_cast29_reg_1035 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln48_fu_384_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_reg_1042 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_cast_fu_388_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln48_1_cast_reg_1047 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_392_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1052 : STD_LOGIC_VECTOR (4 downto 0);
    signal bound_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bound_reg_1057 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_reg_1062 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln23_1_fu_419_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_1_reg_1067 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_430_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1075 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_fu_440_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln27_reg_1080 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln23_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_reg_1085 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_load_reg_1102 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_load_1_reg_1117 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kernel_load_2_reg_1122 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_3_reg_1137 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal kernel_load_4_reg_1142 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_5_reg_1157 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kernel_load_6_reg_1162 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln27_fu_547_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_reg_1177 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln27_1_fu_550_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_1_reg_1182 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_2_fu_553_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_2_reg_1187 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_3_fu_556_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_3_reg_1192 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_4_fu_559_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_4_reg_1197 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_5_fu_562_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_5_reg_1202 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_6_fu_565_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_6_reg_1207 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_7_fu_568_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_7_reg_1212 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln30_fu_572_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln30_reg_1217 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_576_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1222 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln32_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_618_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_reg_1231 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_fu_624_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1236 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_0_mid2_fu_635_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1246 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp10_0_0_mid2_v_v_v_1_fu_643_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp10_0_0_mid2_v_v_v_1_reg_1253 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp10_0_0_mid2_v_v_fu_653_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_v_v_reg_1258 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_fu_663_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_0_0_mid2_reg_1264 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_mid2_v_v_fu_668_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_mid2_v_v_reg_1271 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_fu_683_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_reg_1276 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_fu_688_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_reg_1283 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_fu_701_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1295 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_3_fu_706_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_3_reg_1300 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_fu_729_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_reg_1311 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_5_fu_742_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_5_reg_1318 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_970_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln48_reg_1334 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln48_reg_1334_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_reg_1339 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_s_reg_1344 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_8_fu_809_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_8_reg_1359 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_9_fu_813_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_9_reg_1364 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_10_fu_817_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_10_reg_1369 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln48_1_reg_1374 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_2_reg_1379 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_1_fu_855_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_1_reg_1394 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_3_reg_1399 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_4_reg_1404 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_3_fu_893_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_3_reg_1414 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_5_reg_1419 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_6_reg_1424 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_7_reg_1429 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_8_fu_950_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_8_reg_1434 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal out_d_0_reg_293 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal phi_mul_reg_304 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul5_reg_316 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_332_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_h_0_phi_fu_343_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_355_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln27_2_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_3_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_4_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_5_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_6_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_7_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_8_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_9_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_10_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_2_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln40_4_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_6_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln40_7_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_8_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln40_9_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_10_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_11_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_12_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln48_1_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4_fu_372_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_56_fu_396_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bound_fu_408_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal bound_fu_408_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_444_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_436_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_1_fu_452_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_1_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_2_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_3_fu_487_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_4_fu_497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_5_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_6_fu_517_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_7_fu_527_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_8_fu_537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_0_0_mid2_v_v_v_fu_649_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_fu_663_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_fu_663_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_v_v_fu_674_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_fu_683_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_fu_683_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_fu_691_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_2_fu_710_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_v_v_fu_720_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_2_0_mid2_fu_729_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_2_0_mid2_fu_729_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_3_fu_737_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_4_fu_746_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_5_fu_756_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln40_fu_976_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_1_fu_982_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln40_6_fu_791_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_7_fu_800_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln40_2_fu_988_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_3_fu_994_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_4_fu_1000_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_5_fu_1006_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_2_fu_889_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_6_fu_1012_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_7_fu_1018_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_8_fu_1024_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_6_fu_941_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_7_fu_945_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_5_fu_937_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_4_fu_956_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_970_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_970_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_970_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_fu_976_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_1_fu_982_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_2_fu_988_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_3_fu_994_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_4_fu_1000_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_5_fu_1006_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_6_fu_1012_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_7_fu_1018_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_8_fu_1024_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_408_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal bound_fu_408_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_970_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_0_0_mid2_fu_663_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_fu_683_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_fu_729_p00 : STD_LOGIC_VECTOR (13 downto 0);

    component network_mux_164_16_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mac_muladd_9ns_6ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mux_164_16_1_1_x_U34 : component network_mux_164_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => ap_const_lv16_0,
        din9 => ap_const_lv16_0,
        din10 => ap_const_lv16_0,
        din11 => ap_const_lv16_0,
        din12 => ap_const_lv16_0,
        din13 => ap_const_lv16_0,
        din14 => ap_const_lv16_0,
        din15 => ap_const_lv16_0,
        din16 => trunc_ln27_reg_1080,
        dout => tmp_4_fu_576_p18);

    network_mac_muladd_9ns_6ns_5ns_14_1_1_U35 : component network_mac_muladd_9ns_6ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_970_p0,
        din1 => grp_fu_970_p1,
        din2 => grp_fu_970_p2,
        dout => grp_fu_970_p3);

    network_mul_mul_16s_16s_30_1_1_U36 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_fu_976_p0,
        din1 => reg_362,
        dout => mul_ln40_fu_976_p2);

    network_mul_mul_16s_16s_30_1_1_U37 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_1_fu_982_p0,
        din1 => reg_367,
        dout => mul_ln40_1_fu_982_p2);

    network_mul_mul_16s_16s_30_1_1_U38 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_2_fu_988_p0,
        din1 => reg_362,
        dout => mul_ln40_2_fu_988_p2);

    network_mul_mul_16s_16s_30_1_1_U39 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_3_fu_994_p0,
        din1 => reg_367,
        dout => mul_ln40_3_fu_994_p2);

    network_mul_mul_16s_16s_30_1_1_U40 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_4_fu_1000_p0,
        din1 => reg_362,
        dout => mul_ln40_4_fu_1000_p2);

    network_mul_mul_16s_16s_30_1_1_U41 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_5_fu_1006_p0,
        din1 => reg_367,
        dout => mul_ln40_5_fu_1006_p2);

    network_mul_mul_16s_16s_30_1_1_U42 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_6_fu_1012_p0,
        din1 => reg_362,
        dout => mul_ln40_6_fu_1012_p2);

    network_mul_mul_16s_16s_30_1_1_U43 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_7_fu_1018_p0,
        din1 => reg_367,
        dout => mul_ln40_7_fu_1018_p2);

    network_mul_mul_16s_16s_30_1_1_U44 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_8_fu_1024_p0,
        din1 => reg_362,
        dout => mul_ln40_8_fu_1024_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_328 <= add_ln32_reg_1231;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_328 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                out_d_0_reg_293 <= out_d_reg_1075;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_293 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_339 <= tmp10_0_0_mid2_v_v_v_1_reg_1253;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                out_h_0_reg_339 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_351 <= out_w_reg_1295;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                out_w_0_reg_351 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_mul5_reg_316 <= add_ln23_reg_1062;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul5_reg_316 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_mul_reg_304 <= add_ln23_1_reg_1067;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_304 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln32_reg_1227_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln32_reg_1227_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
                reg_362 <= input_r_q0;
            elsif ((((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_362 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                reg_367 <= input_r_q1;
            elsif ((((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_367 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln23_1_reg_1067 <= add_ln23_1_fu_419_p2;
                add_ln23_reg_1062 <= add_ln23_fu_414_p2;
                out_d_reg_1075 <= out_d_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_424_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln27_reg_1085 <= add_ln27_fu_456_p2;
                trunc_ln27_reg_1080 <= trunc_ln27_fu_440_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln32_reg_1231 <= add_ln32_fu_618_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln40_10_reg_1369 <= add_ln40_10_fu_817_p2;
                add_ln40_8_reg_1359 <= add_ln40_8_fu_809_p2;
                add_ln40_9_reg_1364 <= add_ln40_9_fu_813_p2;
                trunc_ln48_s_reg_1344 <= mul_ln40_1_fu_982_p2(29 downto 14);
                trunc_ln_reg_1339 <= mul_ln40_fu_976_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln48_1_reg_1394 <= add_ln48_1_fu_855_p2;
                trunc_ln48_1_reg_1374 <= mul_ln40_2_fu_988_p2(29 downto 14);
                trunc_ln48_2_reg_1379 <= mul_ln40_3_fu_994_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln48_3_reg_1414 <= add_ln48_3_fu_893_p2;
                trunc_ln48_3_reg_1399 <= mul_ln40_4_fu_1000_p2(29 downto 14);
                trunc_ln48_4_reg_1404 <= mul_ln40_5_fu_1006_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln32_reg_1227_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln48_8_reg_1434 <= add_ln48_8_fu_950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln48_reg_1334 <= grp_fu_970_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln48_reg_1334_pp0_iter1_reg <= add_ln48_reg_1334;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bound_reg_1057 <= bound_fu_408_p2;
                empty_reg_1052 <= empty_fu_392_p1;
                    zext_ln40_1_cast29_reg_1035(6 downto 0) <= zext_ln40_1_cast29_fu_380_p1(6 downto 0);
                    zext_ln40_reg_1030(6 downto 0) <= zext_ln40_fu_376_p1(6 downto 0);
                    zext_ln48_1_cast_reg_1047(5 downto 0) <= zext_ln48_1_cast_fu_388_p1(5 downto 0);
                    zext_ln48_reg_1042(5 downto 0) <= zext_ln48_fu_384_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln32_reg_1227 <= icmp_ln32_fu_613_p2;
                icmp_ln32_reg_1227_pp0_iter1_reg <= icmp_ln32_reg_1227;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_613_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln33_reg_1241 <= icmp_ln33_fu_630_p2;
                out_h_reg_1236 <= out_h_fu_624_p2;
                out_w_0_mid2_reg_1246 <= out_w_0_mid2_fu_635_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kernel_load_1_reg_1117 <= kernel_q0;
                kernel_load_2_reg_1122 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kernel_load_3_reg_1137 <= kernel_q1;
                kernel_load_4_reg_1142 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                kernel_load_5_reg_1157 <= kernel_q1;
                kernel_load_6_reg_1162 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_load_reg_1102 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_w_reg_1295 <= out_w_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sext_ln27_1_reg_1182 <= sext_ln27_1_fu_550_p1;
                sext_ln27_2_reg_1187 <= sext_ln27_2_fu_553_p1;
                sext_ln27_3_reg_1192 <= sext_ln27_3_fu_556_p1;
                sext_ln27_4_reg_1197 <= sext_ln27_4_fu_559_p1;
                sext_ln27_5_reg_1202 <= sext_ln27_5_fu_562_p1;
                sext_ln27_6_reg_1207 <= sext_ln27_6_fu_565_p1;
                sext_ln27_7_reg_1212 <= sext_ln27_7_fu_568_p1;
                sext_ln27_reg_1177 <= sext_ln27_fu_547_p1;
                sext_ln30_reg_1217 <= sext_ln30_fu_572_p1;
                tmp_4_reg_1222 <= tmp_4_fu_576_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp10_0_0_mid2_reg_1264 <= tmp10_0_0_mid2_fu_663_p2;
                tmp10_0_0_mid2_v_v_reg_1258 <= tmp10_0_0_mid2_v_v_fu_653_p2;
                tmp12_mid2_v_v_reg_1271 <= tmp12_mid2_v_v_fu_668_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp10_0_0_mid2_v_v_v_1_reg_1253 <= tmp10_0_0_mid2_v_v_v_1_fu_643_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp10_1_0_mid2_reg_1276 <= tmp10_1_0_mid2_fu_683_p2;
                    zext_ln40_1_reg_1283(4 downto 0) <= zext_ln40_1_fu_688_p1(4 downto 0);
                    zext_ln40_3_reg_1300(4 downto 0) <= zext_ln40_3_fu_706_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp10_2_0_mid2_reg_1311 <= tmp10_2_0_mid2_fu_729_p2;
                    zext_ln40_5_reg_1318(4 downto 0) <= zext_ln40_5_fu_742_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                trunc_ln48_5_reg_1419 <= mul_ln40_6_fu_1012_p2(29 downto 14);
                trunc_ln48_6_reg_1424 <= mul_ln40_7_fu_1018_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1227_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                trunc_ln48_7_reg_1429 <= mul_ln40_8_fu_1024_p2(29 downto 14);
            end if;
        end if;
    end process;
    zext_ln40_reg_1030(8 downto 7) <= "00";
    zext_ln40_1_cast29_reg_1035(13 downto 7) <= "0000000";
    zext_ln48_reg_1042(8 downto 6) <= "000";
    zext_ln48_1_cast_reg_1047(13 downto 6) <= "00000000";
    zext_ln40_1_reg_1283(13 downto 5) <= "000000000";
    zext_ln40_3_reg_1300(13 downto 5) <= "000000000";
    zext_ln40_5_reg_1318(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, icmp_ln23_fu_424_p2, icmp_ln32_fu_613_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_424_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln32_fu_613_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln32_fu_613_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_1_fu_419_p2 <= std_logic_vector(unsigned(phi_mul_reg_304) + unsigned(zext_ln40_reg_1030));
    add_ln23_fu_414_p2 <= std_logic_vector(unsigned(phi_mul5_reg_316) + unsigned(zext_ln48_reg_1042));
    add_ln27_1_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(add_ln27_reg_1085));
    add_ln27_2_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(add_ln27_reg_1085));
    add_ln27_3_fu_487_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(add_ln27_reg_1085));
    add_ln27_4_fu_497_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(add_ln27_reg_1085));
    add_ln27_5_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(add_ln27_reg_1085));
    add_ln27_6_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(add_ln27_reg_1085));
    add_ln27_7_fu_527_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(add_ln27_reg_1085));
    add_ln27_8_fu_537_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(add_ln27_reg_1085));
    add_ln27_fu_456_p2 <= std_logic_vector(unsigned(zext_ln27_fu_436_p1) + unsigned(zext_ln27_1_fu_452_p1));
    add_ln32_fu_618_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_332_p4) + unsigned(ap_const_lv10_1));
    add_ln40_10_fu_817_p2 <= std_logic_vector(unsigned(zext_ln40_5_reg_1318) + unsigned(tmp10_2_0_mid2_reg_1311));
    add_ln40_2_fu_710_p2 <= std_logic_vector(unsigned(zext_ln40_3_fu_706_p1) + unsigned(tmp10_0_0_mid2_reg_1264));
    add_ln40_3_fu_737_p2 <= std_logic_vector(unsigned(out_w_0_mid2_reg_1246) + unsigned(ap_const_lv5_2));
    add_ln40_4_fu_746_p2 <= std_logic_vector(unsigned(zext_ln40_5_fu_742_p1) + unsigned(tmp10_0_0_mid2_reg_1264));
    add_ln40_5_fu_756_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1276) + unsigned(zext_ln40_1_reg_1283));
    add_ln40_6_fu_791_p2 <= std_logic_vector(unsigned(zext_ln40_3_reg_1300) + unsigned(tmp10_1_0_mid2_reg_1276));
    add_ln40_7_fu_800_p2 <= std_logic_vector(unsigned(zext_ln40_5_reg_1318) + unsigned(tmp10_1_0_mid2_reg_1276));
    add_ln40_8_fu_809_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1311) + unsigned(zext_ln40_1_reg_1283));
    add_ln40_9_fu_813_p2 <= std_logic_vector(unsigned(zext_ln40_3_reg_1300) + unsigned(tmp10_2_0_mid2_reg_1311));
    add_ln40_fu_691_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1264) + unsigned(zext_ln40_1_fu_688_p1));
    add_ln48_1_fu_855_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1339) + unsigned(tmp_4_reg_1222));
    add_ln48_2_fu_889_p2 <= std_logic_vector(unsigned(trunc_ln48_1_reg_1374) + unsigned(trunc_ln48_2_reg_1379));
    add_ln48_3_fu_893_p2 <= std_logic_vector(unsigned(add_ln48_2_fu_889_p2) + unsigned(trunc_ln48_s_reg_1344));
    add_ln48_4_fu_956_p2 <= std_logic_vector(unsigned(add_ln48_3_reg_1414) + unsigned(add_ln48_1_reg_1394));
    add_ln48_5_fu_937_p2 <= std_logic_vector(unsigned(trunc_ln48_3_reg_1399) + unsigned(trunc_ln48_4_reg_1404));
    add_ln48_6_fu_941_p2 <= std_logic_vector(unsigned(trunc_ln48_6_reg_1424) + unsigned(trunc_ln48_7_reg_1429));
    add_ln48_7_fu_945_p2 <= std_logic_vector(unsigned(add_ln48_6_fu_941_p2) + unsigned(trunc_ln48_5_reg_1419));
    add_ln48_8_fu_950_p2 <= std_logic_vector(unsigned(add_ln48_7_fu_945_p2) + unsigned(add_ln48_5_fu_937_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln32_fu_613_p2)
    begin
        if ((icmp_ln32_fu_613_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_424_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_424_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_332_p4_assign_proc : process(indvar_flatten_reg_328, icmp_ln32_reg_1227, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln32_reg_1231, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= add_ln32_reg_1231;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= indvar_flatten_reg_328;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_343_p4_assign_proc : process(out_h_0_reg_339, icmp_ln32_reg_1227, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp10_0_0_mid2_v_v_v_1_reg_1253, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_343_p4 <= tmp10_0_0_mid2_v_v_v_1_reg_1253;
        else 
            ap_phi_mux_out_h_0_phi_fu_343_p4 <= out_h_0_reg_339;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_355_p4_assign_proc : process(out_w_0_reg_351, icmp_ln32_reg_1227, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1295, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1227 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_355_p4 <= out_w_reg_1295;
        else 
            ap_phi_mux_out_w_0_phi_fu_355_p4 <= out_w_0_reg_351;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_424_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_424_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_408_p0 <= bound_fu_408_p00(5 - 1 downto 0);
    bound_fu_408_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_392_p1),10));
    bound_fu_408_p1 <= bound_fu_408_p10(5 - 1 downto 0);
    bound_fu_408_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_56_fu_396_p1),10));
    bound_fu_408_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_408_p0) * unsigned(bound_fu_408_p1), 10));
    empty_56_fu_396_p1 <= output_height(5 - 1 downto 0);
    empty_fu_392_p1 <= output_width(5 - 1 downto 0);
    grp_fu_970_p0 <= grp_fu_970_p00(9 - 1 downto 0);
    grp_fu_970_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_mid2_v_v_reg_1271),14));
    grp_fu_970_p1 <= zext_ln48_1_cast_reg_1047(6 - 1 downto 0);
    grp_fu_970_p2 <= zext_ln40_1_reg_1283(5 - 1 downto 0);
    icmp_ln23_fu_424_p2 <= "1" when (out_d_0_reg_293 = ap_const_lv5_10) else "0";
    icmp_ln32_fu_613_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_332_p4 = bound_reg_1057) else "0";
    icmp_ln33_fu_630_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_355_p4 = empty_reg_1052) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln40_4_fu_715_p1, ap_block_pp0_stage3, zext_ln40_7_fu_760_p1, ap_block_pp0_stage4, zext_ln40_9_fu_804_p1, zext_ln40_10_fu_847_p1, zext_ln40_12_fu_885_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_12_fu_885_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln40_10_fu_847_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_9_fu_804_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln40_7_fu_760_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln40_4_fu_715_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln40_2_fu_696_p1, ap_block_pp0_stage2, zext_ln40_6_fu_751_p1, ap_block_pp0_stage3, zext_ln40_8_fu_795_p1, ap_block_pp0_stage4, zext_ln40_11_fu_851_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln40_11_fu_851_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln40_8_fu_795_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln40_6_fu_751_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln40_2_fu_696_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln27_2_fu_462_p1, zext_ln27_3_fu_472_p1, zext_ln27_6_fu_502_p1, zext_ln27_8_fu_522_p1, zext_ln27_10_fu_542_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_address0 <= zext_ln27_10_fu_542_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address0 <= zext_ln27_8_fu_522_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address0 <= zext_ln27_6_fu_502_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address0 <= zext_ln27_3_fu_472_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_address0 <= zext_ln27_2_fu_462_p1(8 - 1 downto 0);
        else 
            kernel_address0 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln27_4_fu_482_p1, zext_ln27_5_fu_492_p1, zext_ln27_7_fu_512_p1, zext_ln27_9_fu_532_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_address1 <= zext_ln27_9_fu_532_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address1 <= zext_ln27_7_fu_512_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address1 <= zext_ln27_5_fu_492_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address1 <= zext_ln27_4_fu_482_p1(8 - 1 downto 0);
        else 
            kernel_address1 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln40_1_fu_982_p0 <= sext_ln27_1_reg_1182(16 - 1 downto 0);
    mul_ln40_2_fu_988_p0 <= sext_ln27_2_reg_1187(16 - 1 downto 0);
    mul_ln40_3_fu_994_p0 <= sext_ln27_3_reg_1192(16 - 1 downto 0);
    mul_ln40_4_fu_1000_p0 <= sext_ln27_4_reg_1197(16 - 1 downto 0);
    mul_ln40_5_fu_1006_p0 <= sext_ln27_5_reg_1202(16 - 1 downto 0);
    mul_ln40_6_fu_1012_p0 <= sext_ln27_6_reg_1207(16 - 1 downto 0);
    mul_ln40_7_fu_1018_p0 <= sext_ln27_7_reg_1212(16 - 1 downto 0);
    mul_ln40_8_fu_1024_p0 <= sext_ln30_reg_1217(16 - 1 downto 0);
    mul_ln40_fu_976_p0 <= sext_ln27_reg_1177(16 - 1 downto 0);
    out_d_fu_430_p2 <= std_logic_vector(unsigned(out_d_0_reg_293) + unsigned(ap_const_lv5_1));
    out_h_fu_624_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_h_0_phi_fu_343_p4) + unsigned(ap_const_lv5_1));
    out_w_0_mid2_fu_635_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_fu_630_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_355_p4;
    out_w_fu_701_p2 <= std_logic_vector(unsigned(out_w_0_mid2_reg_1246) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln48_1_fu_966_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(unsigned(add_ln48_8_reg_1434) + unsigned(add_ln48_4_fu_956_p2));

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln32_reg_1227_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln32_reg_1227_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln27_1_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_1_reg_1117),30));

        sext_ln27_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_2_reg_1122),30));

        sext_ln27_3_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_3_reg_1137),30));

        sext_ln27_4_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_4_reg_1142),30));

        sext_ln27_5_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_5_reg_1157),30));

        sext_ln27_6_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_6_reg_1162),30));

        sext_ln27_7_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_q1),30));

        sext_ln27_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_reg_1102),30));

        sext_ln30_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_q0),30));

        sext_ln4_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    shl_ln_fu_444_p3 <= (trunc_ln27_fu_440_p1 & ap_const_lv3_0);
    tmp10_0_0_mid2_fu_663_p0 <= tmp10_0_0_mid2_fu_663_p00(9 - 1 downto 0);
    tmp10_0_0_mid2_fu_663_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_fu_653_p2),14));
    tmp10_0_0_mid2_fu_663_p1 <= zext_ln40_1_cast29_reg_1035(7 - 1 downto 0);
    tmp10_0_0_mid2_fu_663_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_fu_663_p0) * unsigned(tmp10_0_0_mid2_fu_663_p1), 14));
    tmp10_0_0_mid2_v_v_fu_653_p2 <= std_logic_vector(unsigned(phi_mul_reg_304) + unsigned(tmp10_0_0_mid2_v_v_v_fu_649_p1));
    tmp10_0_0_mid2_v_v_v_1_fu_643_p3 <= 
        out_h_reg_1236 when (icmp_ln33_reg_1241(0) = '1') else 
        out_h_0_reg_339;
    tmp10_0_0_mid2_v_v_v_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_v_1_fu_643_p3),9));
    tmp10_1_0_mid2_fu_683_p0 <= tmp10_1_0_mid2_fu_683_p00(9 - 1 downto 0);
    tmp10_1_0_mid2_fu_683_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_v_v_fu_674_p2),14));
    tmp10_1_0_mid2_fu_683_p1 <= zext_ln40_1_cast29_reg_1035(7 - 1 downto 0);
    tmp10_1_0_mid2_fu_683_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_fu_683_p0) * unsigned(tmp10_1_0_mid2_fu_683_p1), 14));
    tmp10_1_0_mid2_v_v_fu_674_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_v_v_reg_1258) + unsigned(ap_const_lv9_1));
    tmp10_2_0_mid2_fu_729_p0 <= tmp10_2_0_mid2_fu_729_p00(9 - 1 downto 0);
    tmp10_2_0_mid2_fu_729_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_v_v_fu_720_p2),14));
    tmp10_2_0_mid2_fu_729_p1 <= zext_ln40_1_cast29_reg_1035(7 - 1 downto 0);
    tmp10_2_0_mid2_fu_729_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_fu_729_p0) * unsigned(tmp10_2_0_mid2_fu_729_p1), 14));
    tmp10_2_0_mid2_v_v_fu_720_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_v_v_reg_1258) + unsigned(ap_const_lv9_2));
    tmp12_mid2_v_v_fu_668_p2 <= std_logic_vector(unsigned(phi_mul5_reg_316) + unsigned(tmp10_0_0_mid2_v_v_v_fu_649_p1));
    trunc_ln27_fu_440_p1 <= out_d_0_reg_293(4 - 1 downto 0);
    zext_ln27_10_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_8_fu_537_p2),64));
    zext_ln27_1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_444_p3),8));
    zext_ln27_2_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_456_p2),64));
    zext_ln27_3_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_467_p2),64));
    zext_ln27_4_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_2_fu_477_p2),64));
    zext_ln27_5_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_3_fu_487_p2),64));
    zext_ln27_6_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_4_fu_497_p2),64));
    zext_ln27_7_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_5_fu_507_p2),64));
    zext_ln27_8_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_6_fu_517_p2),64));
    zext_ln27_9_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_7_fu_527_p2),64));
    zext_ln27_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_293),8));
    zext_ln40_10_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_8_reg_1359),64));
    zext_ln40_11_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_9_reg_1364),64));
    zext_ln40_12_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_10_reg_1369),64));
    zext_ln40_1_cast29_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln4_fu_372_p1),14));
    zext_ln40_1_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1246),14));
    zext_ln40_2_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_691_p2),64));
    zext_ln40_3_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_701_p2),14));
    zext_ln40_4_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_fu_710_p2),64));
    zext_ln40_5_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_3_fu_737_p2),14));
    zext_ln40_6_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_4_fu_746_p2),64));
    zext_ln40_7_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_5_fu_756_p2),64));
    zext_ln40_8_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_6_fu_791_p2),64));
    zext_ln40_9_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_7_fu_800_p2),64));
    zext_ln40_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln48_1_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln48_1_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1334_pp0_iter1_reg),64));
    zext_ln48_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
