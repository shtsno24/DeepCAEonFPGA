-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel1_ce0 : OUT STD_LOGIC;
    kernel1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel2_ce0 : OUT STD_LOGIC;
    kernel2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_287 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_291 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln103_1_fu_299_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_1_reg_837 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_fu_303_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln103_reg_842 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln103_2_fu_307_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln103_2_reg_847 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln103_4_fu_311_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_4_reg_853 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_3_fu_315_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_3_reg_858 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln103_1_cast_fu_319_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln103_1_cast_reg_863 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_323_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_868 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_60_fu_327_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_60_reg_873 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_fu_331_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln20_reg_878 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln20_3_fu_336_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln20_3_reg_883 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_347_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_891 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln41_fu_357_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln41_reg_896 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln20_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln41_fu_362_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln41_reg_903 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln47_fu_366_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln47_reg_911 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln47_1_fu_371_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln47_1_reg_916 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln53_fu_376_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln53_reg_921 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln53_fu_381_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln53_reg_926 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln60_fu_386_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln60_reg_931 : STD_LOGIC_VECTOR (1 downto 0);
    signal next_mul_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_936 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_h_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_944 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln79_1_fu_411_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln79_1_reg_950 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_955 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_2_fu_423_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln41_2_reg_960 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln60_1_fu_435_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln60_1_reg_967 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln79_2_fu_447_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln79_2_reg_974 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_fu_454_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_reg_981 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_989 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln41_fu_474_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_reg_994 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln22_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_2_fu_479_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln47_2_reg_1001 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln53_1_fu_484_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln53_1_reg_1008 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln103_fu_489_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln103_reg_1015 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_1_fu_494_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_1_reg_1020 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln47_3_fu_498_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln47_3_reg_1025 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln53_2_fu_510_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln53_2_reg_1040 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln60_2_fu_514_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln60_2_reg_1045 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln66_fu_526_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln66_reg_1060 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln72_fu_530_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln72_reg_1065 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln79_fu_534_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln79_reg_1070 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln85_fu_538_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln85_reg_1075 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln91_fu_542_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln91_reg_1080 : STD_LOGIC_VECTOR (13 downto 0);
    signal kernel_load_reg_1085 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal kernel1_load_reg_1093 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel2_load_reg_1101 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_2_reg_1109 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_3_reg_1114 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_554_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1129 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_1_fu_562_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1134 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_570_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_1139 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_578_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1144 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_4_reg_1149 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_5_reg_1154 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_1_fu_598_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln41_1_reg_1169 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln41_1_fu_769_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln41_1_reg_1174 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln47_fu_775_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln47_reg_1179 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln66_fu_781_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln66_reg_1184 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln72_fu_787_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln72_reg_1189 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_fu_793_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_reg_1199 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln60_1_fu_799_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln60_1_reg_1204 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln79_1_fu_805_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln79_1_reg_1209 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln85_fu_811_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln85_reg_1214 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln103_1_fu_674_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_1_reg_1219 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_5_fu_680_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_5_reg_1224 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln91_fu_817_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln91_reg_1229 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal trunc_ln2_reg_1234 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln3_reg_1239 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_4_fu_732_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_4_reg_1244 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_7_fu_751_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_7_reg_1249 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln103_3_fu_760_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_3_reg_1254 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal out_d_0_reg_219 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul2_reg_230 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul5_reg_241 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_0_reg_253 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_264 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_w_0_reg_276 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln41_4_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_2_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_1_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_5_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln41_2_fu_295_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln41_fu_357_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln41_fu_357_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_1_fu_407_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln60_fu_430_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln60_fu_430_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln60_fu_430_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln79_fu_442_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln79_fu_442_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln79_fu_442_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp10_fu_454_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_3_fu_470_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln92_3_fu_647_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln7_fu_638_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_fu_665_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_656_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln9_fu_699_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln8_fu_690_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_2_fu_726_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln101_3_fu_737_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_6_fu_746_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_8_fu_756_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln41_1_fu_769_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln47_fu_775_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_1_fu_605_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln66_fu_781_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln72_fu_787_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln53_fu_793_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln53_1_fu_621_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln60_1_fu_799_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_1_fu_627_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln79_1_fu_805_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln85_fu_811_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln91_fu_817_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln41_fu_357_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln60_fu_430_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln79_fu_442_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp10_fu_454_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component network_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mux_32_16_1_1_U31 : component network_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1085,
        din1 => kernel1_load_reg_1093,
        din2 => kernel2_load_reg_1101,
        din3 => trunc_ln41_reg_903,
        dout => tmp_s_fu_554_p5);

    network_mux_32_16_1_1_U32 : component network_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1085,
        din1 => kernel1_load_reg_1093,
        din2 => kernel2_load_reg_1101,
        din3 => add_ln47_1_reg_916,
        dout => tmp_1_fu_562_p5);

    network_mux_32_16_1_1_U33 : component network_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1085,
        din1 => kernel1_load_reg_1093,
        din2 => kernel2_load_reg_1101,
        din3 => xor_ln53_reg_926,
        dout => tmp_2_fu_570_p5);

    network_mux_32_16_1_1_U34 : component network_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1085,
        din1 => kernel1_load_reg_1093,
        din2 => kernel2_load_reg_1101,
        din3 => add_ln60_reg_931,
        dout => tmp_3_fu_578_p5);

    network_mul_mul_16s_16s_30_1_1_U35 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln41_1_fu_769_p0,
        din1 => reg_287,
        dout => mul_ln41_1_fu_769_p2);

    network_mul_mul_16s_16s_30_1_1_U36 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln47_fu_775_p0,
        din1 => reg_291,
        dout => mul_ln47_fu_775_p2);

    network_mul_mul_16s_16s_30_1_1_U37 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln66_fu_781_p0,
        din1 => input_load_4_reg_1149,
        dout => mul_ln66_fu_781_p2);

    network_mul_mul_16s_16s_30_1_1_U38 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln72_fu_787_p0,
        din1 => input_load_5_reg_1154,
        dout => mul_ln72_fu_787_p2);

    network_mul_mul_16s_16s_30_1_1_U39 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln53_fu_793_p0,
        din1 => input_load_2_reg_1109,
        dout => mul_ln53_fu_793_p2);

    network_mul_mul_16s_16s_30_1_1_U40 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln60_1_fu_799_p0,
        din1 => input_load_3_reg_1114,
        dout => mul_ln60_1_fu_799_p2);

    network_mul_mul_16s_16s_30_1_1_U41 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln79_1_fu_805_p0,
        din1 => reg_287,
        dout => mul_ln79_1_fu_805_p2);

    network_mul_mul_16s_16s_30_1_1_U42 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln85_fu_811_p0,
        din1 => reg_291,
        dout => mul_ln85_fu_811_p2);

    network_mul_mul_16s_16s_30_1_1_U43 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln91_fu_817_p0,
        din1 => reg_287,
        dout => mul_ln91_fu_817_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_396_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_219 <= out_d_reg_891;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_0_reg_219 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_459_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_253 <= out_h_reg_944;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_0_reg_253 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_w_0_reg_276 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                out_w_0_reg_276 <= out_w_reg_989;
            end if; 
        end if;
    end process;

    phi_mul2_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_396_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_230 <= add_ln20_3_reg_883;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_230 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_396_p2 = ap_const_lv1_1))) then 
                phi_mul5_reg_241 <= add_ln20_reg_878;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul5_reg_241 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_459_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_264 <= next_mul_reg_936;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_mul_reg_264 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln103_1_reg_1219 <= add_ln103_1_fu_674_p2;
                add_ln103_5_reg_1224 <= add_ln103_5_fu_680_p2;
                mul_ln53_reg_1199 <= mul_ln53_fu_793_p2;
                mul_ln60_1_reg_1204 <= mul_ln60_1_fu_799_p2;
                mul_ln79_1_reg_1209 <= mul_ln79_1_fu_805_p2;
                mul_ln85_reg_1214 <= mul_ln85_fu_811_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln103_3_reg_1254 <= add_ln103_3_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln103_4_reg_1244 <= add_ln103_4_fu_732_p2;
                mul_ln91_reg_1229 <= mul_ln91_fu_817_p2;
                trunc_ln2_reg_1234 <= mul_ln79_1_reg_1209(29 downto 14);
                trunc_ln3_reg_1239 <= mul_ln85_reg_1214(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln103_7_reg_1249 <= add_ln103_7_fu_751_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_459_p2 = ap_const_lv1_0))) then
                add_ln103_reg_1015 <= add_ln103_fu_489_p2;
                add_ln41_reg_994 <= add_ln41_fu_474_p2;
                add_ln47_2_reg_1001 <= add_ln47_2_fu_479_p2;
                add_ln53_1_reg_1008 <= add_ln53_1_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln20_3_reg_883 <= add_ln20_3_fu_336_p2;
                add_ln20_reg_878 <= add_ln20_fu_331_p2;
                out_d_reg_891 <= out_d_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln41_1_reg_1020 <= add_ln41_1_fu_494_p2;
                add_ln47_3_reg_1025 <= add_ln47_3_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln47_1_reg_916 <= add_ln47_1_fu_371_p2;
                add_ln47_reg_911 <= add_ln47_fu_366_p2;
                add_ln53_reg_921 <= add_ln53_fu_376_p2;
                add_ln60_reg_931 <= add_ln60_fu_386_p2;
                xor_ln53_reg_926 <= xor_ln53_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln53_2_reg_1040 <= add_ln53_2_fu_510_p2;
                add_ln60_2_reg_1045 <= add_ln60_2_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln66_reg_1060 <= add_ln66_fu_526_p2;
                add_ln72_reg_1065 <= add_ln72_fu_530_p2;
                add_ln79_reg_1070 <= add_ln79_fu_534_p2;
                add_ln85_reg_1075 <= add_ln85_fu_538_p2;
                add_ln91_reg_1080 <= add_ln91_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_396_p2 = ap_const_lv1_0))) then
                add_ln79_1_reg_950 <= add_ln79_1_fu_411_p2;
                tmp_reg_955 <= tmp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_60_reg_873 <= empty_60_fu_327_p1;
                empty_reg_868 <= empty_fu_323_p1;
                    zext_ln103_1_cast_reg_863(5 downto 0) <= zext_ln103_1_cast_fu_319_p1(5 downto 0);
                    zext_ln103_1_reg_837(6 downto 0) <= zext_ln103_1_fu_299_p1(6 downto 0);
                    zext_ln103_2_reg_847(6 downto 0) <= zext_ln103_2_fu_307_p1(6 downto 0);
                    zext_ln103_3_reg_858(5 downto 0) <= zext_ln103_3_fu_315_p1(5 downto 0);
                    zext_ln103_4_reg_853(6 downto 0) <= zext_ln103_4_fu_311_p1(6 downto 0);
                    zext_ln103_reg_842(6 downto 0) <= zext_ln103_fu_303_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_2_reg_1109 <= input_r_q0;
                input_load_3_reg_1114 <= input_r_q1;
                kernel1_load_reg_1093 <= kernel1_q0;
                kernel2_load_reg_1101 <= kernel2_q0;
                kernel_load_reg_1085 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_4_reg_1149 <= input_r_q0;
                input_load_5_reg_1154 <= input_r_q1;
                tmp_1_reg_1134 <= tmp_1_fu_562_p5;
                tmp_2_reg_1139 <= tmp_2_fu_570_p5;
                tmp_3_reg_1144 <= tmp_3_fu_578_p5;
                tmp_s_reg_1129 <= tmp_s_fu_554_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln41_1_reg_1174 <= mul_ln41_1_fu_769_p2;
                mul_ln47_reg_1179 <= mul_ln47_fu_775_p2;
                mul_ln66_reg_1184 <= mul_ln66_fu_781_p2;
                mul_ln72_reg_1189 <= mul_ln72_fu_787_p2;
                sext_ln41_1_reg_1169 <= sext_ln41_1_fu_598_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_341_p2 = ap_const_lv1_0))) then
                mul_ln41_reg_896 <= mul_ln41_fu_357_p2;
                trunc_ln41_reg_903 <= trunc_ln41_fu_362_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                next_mul_reg_936 <= next_mul_fu_391_p2;
                out_h_reg_944 <= out_h_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_w_reg_989 <= out_w_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_287 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_291 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp10_reg_981 <= tmp10_fu_454_p2;
                    zext_ln41_2_reg_960(9 downto 0) <= zext_ln41_2_fu_423_p1(9 downto 0);
                    zext_ln60_1_reg_967(11 downto 0) <= zext_ln60_1_fu_435_p1(11 downto 0);
                    zext_ln79_2_reg_974(11 downto 0) <= zext_ln79_2_fu_447_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln103_1_reg_837(8 downto 7) <= "00";
    zext_ln103_reg_842(13 downto 7) <= "0000000";
    zext_ln103_2_reg_847(11 downto 7) <= "00000";
    zext_ln103_4_reg_853(9 downto 7) <= "000";
    zext_ln103_3_reg_858(8 downto 6) <= "000";
    zext_ln103_1_cast_reg_863(13 downto 6) <= "00000000";
    zext_ln41_2_reg_960(13 downto 10) <= "0000";
    zext_ln60_1_reg_967(13 downto 12) <= "00";
    zext_ln79_2_reg_974(13 downto 12) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln20_fu_341_p2, ap_CS_fsm_state4, icmp_ln21_fu_396_p2, ap_CS_fsm_state6, icmp_ln22_fu_459_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_341_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_396_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_459_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln103_1_fu_674_p2 <= std_logic_vector(unsigned(trunc_ln92_3_fu_647_p4) + unsigned(trunc_ln7_fu_638_p4));
    add_ln103_2_fu_726_p2 <= std_logic_vector(unsigned(trunc_ln9_fu_699_p4) + unsigned(trunc_ln8_fu_690_p4));
    add_ln103_3_fu_760_p2 <= std_logic_vector(unsigned(add_ln103_4_reg_1244) + unsigned(add_ln103_8_fu_756_p2));
    add_ln103_4_fu_732_p2 <= std_logic_vector(unsigned(add_ln103_1_reg_1219) + unsigned(add_ln103_2_fu_726_p2));
    add_ln103_5_fu_680_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_665_p4) + unsigned(trunc_ln_fu_656_p4));
    add_ln103_6_fu_746_p2 <= std_logic_vector(unsigned(trunc_ln101_3_fu_737_p4) + unsigned(trunc_ln3_reg_1239));
    add_ln103_7_fu_751_p2 <= std_logic_vector(unsigned(trunc_ln2_reg_1234) + unsigned(add_ln103_6_fu_746_p2));
    add_ln103_8_fu_756_p2 <= std_logic_vector(unsigned(add_ln103_5_reg_1224) + unsigned(add_ln103_7_reg_1249));
    add_ln103_fu_489_p2 <= std_logic_vector(unsigned(zext_ln41_3_fu_470_p1) + unsigned(tmp10_reg_981));
    add_ln20_3_fu_336_p2 <= std_logic_vector(unsigned(phi_mul2_reg_230) + unsigned(zext_ln103_1_reg_837));
    add_ln20_fu_331_p2 <= std_logic_vector(unsigned(phi_mul5_reg_241) + unsigned(zext_ln103_3_reg_858));
    add_ln41_1_fu_494_p2 <= std_logic_vector(unsigned(zext_ln41_2_reg_960) + unsigned(add_ln41_reg_994));
    add_ln41_fu_474_p2 <= std_logic_vector(unsigned(zext_ln41_3_fu_470_p1) + unsigned(mul_ln41_reg_896));
    add_ln47_1_fu_371_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln41_reg_903));
    add_ln47_2_fu_479_p2 <= std_logic_vector(unsigned(zext_ln41_3_fu_470_p1) + unsigned(add_ln47_reg_911));
    add_ln47_3_fu_498_p2 <= std_logic_vector(unsigned(zext_ln41_2_reg_960) + unsigned(add_ln47_2_reg_1001));
    add_ln47_fu_366_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(mul_ln41_reg_896));
    add_ln53_1_fu_484_p2 <= std_logic_vector(unsigned(zext_ln41_3_fu_470_p1) + unsigned(add_ln53_reg_921));
    add_ln53_2_fu_510_p2 <= std_logic_vector(unsigned(zext_ln41_2_reg_960) + unsigned(add_ln53_1_reg_1008));
    add_ln53_fu_376_p2 <= std_logic_vector(unsigned(ap_const_lv14_2) + unsigned(mul_ln41_reg_896));
    add_ln60_2_fu_514_p2 <= std_logic_vector(unsigned(zext_ln60_1_reg_967) + unsigned(add_ln41_reg_994));
    add_ln60_fu_386_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln41_reg_903));
    add_ln66_fu_526_p2 <= std_logic_vector(unsigned(zext_ln60_1_reg_967) + unsigned(add_ln47_2_reg_1001));
    add_ln72_fu_530_p2 <= std_logic_vector(unsigned(zext_ln60_1_reg_967) + unsigned(add_ln53_1_reg_1008));
    add_ln79_1_fu_411_p2 <= std_logic_vector(unsigned(out_h_0_reg_253) + unsigned(ap_const_lv5_2));
    add_ln79_fu_534_p2 <= std_logic_vector(unsigned(zext_ln79_2_reg_974) + unsigned(add_ln41_reg_994));
    add_ln85_fu_538_p2 <= std_logic_vector(unsigned(zext_ln79_2_reg_974) + unsigned(add_ln47_2_reg_1001));
    add_ln91_fu_542_p2 <= std_logic_vector(unsigned(zext_ln79_2_reg_974) + unsigned(add_ln53_1_reg_1008));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln20_fu_341_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_341_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln20_fu_341_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_341_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_60_fu_327_p1 <= output_height(5 - 1 downto 0);
    empty_fu_323_p1 <= output_width(5 - 1 downto 0);
    icmp_ln20_fu_341_p2 <= "1" when (out_d_0_reg_219 = ap_const_lv5_10) else "0";
    icmp_ln21_fu_396_p2 <= "1" when (out_h_0_reg_253 = empty_60_reg_873) else "0";
    icmp_ln22_fu_459_p2 <= "1" when (out_w_0_reg_276 = empty_reg_868) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln41_4_fu_502_p1, zext_ln53_fu_518_p1, zext_ln66_fu_546_p1, zext_ln79_1_fu_586_p1, zext_ln91_fu_614_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= zext_ln91_fu_614_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= zext_ln79_1_fu_586_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln66_fu_546_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= zext_ln53_fu_518_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln41_4_fu_502_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln47_fu_506_p1, zext_ln60_2_fu_522_p1, zext_ln72_fu_550_p1, zext_ln85_fu_590_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= zext_ln85_fu_590_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= zext_ln72_fu_550_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= zext_ln60_2_fu_522_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= zext_ln47_fu_506_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    kernel1_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel1_ce0 <= ap_const_logic_1;
        else 
            kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel2_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel2_ce0 <= ap_const_logic_1;
        else 
            kernel2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln41_1_fu_769_p0 <= sext_ln41_1_fu_598_p1(16 - 1 downto 0);
    mul_ln41_fu_357_p0 <= zext_ln103_reg_842(7 - 1 downto 0);
    mul_ln41_fu_357_p1 <= mul_ln41_fu_357_p10(9 - 1 downto 0);
    mul_ln41_fu_357_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul2_reg_230),14));
    mul_ln41_fu_357_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln41_fu_357_p0) * unsigned(mul_ln41_fu_357_p1), 14));
    mul_ln47_fu_775_p0 <= sext_ln47_1_fu_605_p1(16 - 1 downto 0);
    mul_ln53_fu_793_p0 <= sext_ln53_1_fu_621_p1(16 - 1 downto 0);
    mul_ln60_1_fu_799_p0 <= sext_ln60_1_fu_627_p1(16 - 1 downto 0);
    mul_ln60_fu_430_p0 <= zext_ln103_2_reg_847(7 - 1 downto 0);
    mul_ln60_fu_430_p1 <= mul_ln60_fu_430_p10(5 - 1 downto 0);
    mul_ln60_fu_430_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_944),12));
    mul_ln60_fu_430_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln60_fu_430_p0) * unsigned(mul_ln60_fu_430_p1), 12));
    mul_ln66_fu_781_p0 <= sext_ln41_1_fu_598_p1(16 - 1 downto 0);
    mul_ln72_fu_787_p0 <= sext_ln47_1_fu_605_p1(16 - 1 downto 0);
    mul_ln79_1_fu_805_p0 <= sext_ln53_1_fu_621_p1(16 - 1 downto 0);
    mul_ln79_fu_442_p0 <= zext_ln103_2_reg_847(7 - 1 downto 0);
    mul_ln79_fu_442_p1 <= mul_ln79_fu_442_p10(5 - 1 downto 0);
    mul_ln79_fu_442_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_reg_950),12));
    mul_ln79_fu_442_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln79_fu_442_p0) * unsigned(mul_ln79_fu_442_p1), 12));
    mul_ln85_fu_811_p0 <= sext_ln60_1_fu_627_p1(16 - 1 downto 0);
    mul_ln91_fu_817_p0 <= sext_ln41_1_reg_1169(16 - 1 downto 0);
    next_mul_fu_391_p2 <= std_logic_vector(unsigned(phi_mul_reg_264) + unsigned(zext_ln103_4_reg_853));
    out_d_fu_347_p2 <= std_logic_vector(unsigned(out_d_0_reg_219) + unsigned(ap_const_lv5_1));
    out_h_fu_401_p2 <= std_logic_vector(unsigned(out_h_0_reg_253) + unsigned(ap_const_lv5_1));
    out_w_fu_464_p2 <= std_logic_vector(unsigned(out_w_0_reg_276) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln103_5_fu_765_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln103_3_reg_1254;

    output_r_we0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln41_1_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_1129),30));

        sext_ln41_2_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

        sext_ln47_1_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1134),30));

        sext_ln53_1_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1139),30));

        sext_ln60_1_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_1144),30));

    tmp10_fu_454_p0 <= zext_ln103_1_cast_reg_863(6 - 1 downto 0);
    tmp10_fu_454_p1 <= tmp10_fu_454_p10(9 - 1 downto 0);
    tmp10_fu_454_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_955),14));
    tmp10_fu_454_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_fu_454_p0) * unsigned(tmp10_fu_454_p1), 14));
    tmp_fu_417_p2 <= std_logic_vector(unsigned(zext_ln41_1_fu_407_p1) + unsigned(phi_mul5_reg_241));
    trunc_ln101_3_fu_737_p4 <= mul_ln91_reg_1229(29 downto 14);
    trunc_ln1_fu_665_p4 <= mul_ln72_reg_1189(29 downto 14);
    trunc_ln41_fu_362_p1 <= out_d_0_reg_219(2 - 1 downto 0);
    trunc_ln7_fu_638_p4 <= mul_ln47_reg_1179(29 downto 14);
    trunc_ln8_fu_690_p4 <= mul_ln53_reg_1199(29 downto 14);
    trunc_ln92_3_fu_647_p4 <= mul_ln41_1_reg_1174(29 downto 14);
    trunc_ln9_fu_699_p4 <= mul_ln60_1_reg_1204(29 downto 14);
    trunc_ln_fu_656_p4 <= mul_ln66_reg_1184(29 downto 14);
    xor_ln53_fu_381_p2 <= (trunc_ln41_reg_903 xor ap_const_lv2_2);
    zext_ln103_1_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln103_1_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln103_2_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln41_2_fu_295_p1),12));
    zext_ln103_3_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
    zext_ln103_4_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln41_2_fu_295_p1),10));
    zext_ln103_5_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_reg_1015),64));
    zext_ln103_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln41_2_fu_295_p1),14));
    zext_ln41_1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_253),9));
    zext_ln41_2_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_264),14));
    zext_ln41_3_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_276),14));
    zext_ln41_4_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_1_reg_1020),64));
    zext_ln47_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_3_reg_1025),64));
    zext_ln53_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_2_reg_1040),64));
    zext_ln60_1_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln60_fu_430_p2),14));
    zext_ln60_2_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_2_reg_1045),64));
    zext_ln66_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_reg_1060),64));
    zext_ln72_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_reg_1065),64));
    zext_ln79_1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_reg_1070),64));
    zext_ln79_2_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln79_fu_442_p2),14));
    zext_ln85_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_reg_1075),64));
    zext_ln91_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_reg_1080),64));
end behav;
