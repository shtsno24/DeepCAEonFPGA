-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv23_7FD60D : STD_LOGIC_VECTOR (22 downto 0) := "11111111101011000001101";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv14_310 : STD_LOGIC_VECTOR (13 downto 0) := "00001100010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_E69A : STD_LOGIC_VECTOR (15 downto 0) := "1110011010011010";
    constant ap_const_lv16_C003 : STD_LOGIC_VECTOR (15 downto 0) := "1100000000000011";
    constant ap_const_lv16_1C17 : STD_LOGIC_VECTOR (15 downto 0) := "0001110000010111";
    constant ap_const_lv16_F91C : STD_LOGIC_VECTOR (15 downto 0) := "1111100100011100";
    constant ap_const_lv16_D6A : STD_LOGIC_VECTOR (15 downto 0) := "0000110101101010";
    constant ap_const_lv16_F46C : STD_LOGIC_VECTOR (15 downto 0) := "1111010001101100";
    constant ap_const_lv16_FFDC : STD_LOGIC_VECTOR (15 downto 0) := "1111111111011100";
    constant ap_const_lv16_FE22 : STD_LOGIC_VECTOR (15 downto 0) := "1111111000100010";
    constant ap_const_lv16_2EC : STD_LOGIC_VECTOR (15 downto 0) := "0000001011101100";
    constant ap_const_lv16_1B7E : STD_LOGIC_VECTOR (15 downto 0) := "0001101101111110";
    constant ap_const_lv16_1ECE : STD_LOGIC_VECTOR (15 downto 0) := "0001111011001110";
    constant ap_const_lv16_ED6 : STD_LOGIC_VECTOR (15 downto 0) := "0000111011010110";
    constant ap_const_lv16_D2BE : STD_LOGIC_VECTOR (15 downto 0) := "1101001010111110";
    constant ap_const_lv16_15C7 : STD_LOGIC_VECTOR (15 downto 0) := "0001010111000111";
    constant ap_const_lv16_E34D : STD_LOGIC_VECTOR (15 downto 0) := "1110001101001101";
    constant ap_const_lv16_DA7B : STD_LOGIC_VECTOR (15 downto 0) := "1101101001111011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_h_fu_172_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_383 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub_ln27_fu_202_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln27_reg_388 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln19_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_214_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_396 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln27_fu_224_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln27_reg_401 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln20_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln27_fu_229_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln27_reg_406 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_d_fu_243_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_reg_414 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln27_2_fu_249_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln27_2_reg_419 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln22_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_1_fu_255_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln27_1_reg_424 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln27_fu_260_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln27_reg_429 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln32_fu_290_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln32_reg_434 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_load_reg_444 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_fu_304_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_449 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln27_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal buffer_fu_360_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal out_h_0_reg_110 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_121 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal buffer_0_reg_132 : STD_LOGIC_VECTOR (22 downto 0);
    signal in_d_0_reg_144 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_155 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln27_2_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_178_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln27_7_fu_190_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_186_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln27_1_fu_198_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln22_fu_220_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln22_1_fu_233_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_282_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln31_fu_272_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln27_2_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln27_2_fu_347_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln27_4_fu_356_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln32_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component network_mux_164_16_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    network_mux_164_16_1_1_x_U108 : component network_mux_164_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_E69A,
        din1 => ap_const_lv16_C003,
        din2 => ap_const_lv16_1C17,
        din3 => ap_const_lv16_F91C,
        din4 => ap_const_lv16_D6A,
        din5 => ap_const_lv16_F46C,
        din6 => ap_const_lv16_FFDC,
        din7 => ap_const_lv16_FE22,
        din8 => ap_const_lv16_2EC,
        din9 => ap_const_lv16_1B7E,
        din10 => ap_const_lv16_1ECE,
        din11 => ap_const_lv16_ED6,
        din12 => ap_const_lv16_D2BE,
        din13 => ap_const_lv16_15C7,
        din14 => ap_const_lv16_E34D,
        din15 => ap_const_lv16_DA7B,
        din16 => trunc_ln27_reg_429,
        dout => tmp_fu_304_p18);

    network_mul_mul_16s_16s_32_1_1_U109 : component network_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => input_load_reg_444,
        din1 => tmp_reg_449,
        dout => mul_ln27_fu_374_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buffer_0_reg_132 <= buffer_fu_360_p2;
            elsif (((icmp_ln20_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                buffer_0_reg_132 <= ap_const_lv23_7FD60D;
            end if; 
        end if;
    end process;

    in_d_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                in_d_0_reg_144 <= in_d_reg_414;
            elsif (((icmp_ln20_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                in_d_0_reg_144 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_h_0_reg_110 <= out_h_reg_383;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_110 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_w_0_reg_121 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                out_w_0_reg_121 <= out_w_reg_396;
            end if; 
        end if;
    end process;

    phi_mul_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul_reg_155 <= add_ln27_2_reg_419;
            elsif (((icmp_ln20_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_155 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_237_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln27_1_reg_424 <= add_ln27_1_fu_255_p2;
                add_ln27_2_reg_419 <= add_ln27_2_fu_249_p2;
                trunc_ln27_reg_429 <= trunc_ln27_fu_260_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln27_reg_401 <= add_ln27_fu_224_p2;
                sext_ln27_reg_406 <= sext_ln27_fu_229_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                and_ln32_reg_434 <= and_ln32_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                in_d_reg_414 <= in_d_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_load_reg_444 <= input_r_q0;
                tmp_reg_449 <= tmp_fu_304_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln27_reg_454 <= mul_ln27_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                out_h_reg_383 <= out_h_fu_172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_w_reg_396 <= out_w_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_166_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln27_reg_388(10 downto 2) <= sub_ln27_fu_202_p2(10 downto 2);
            end if;
        end if;
    end process;
    sub_ln27_reg_388(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_166_p2, ap_CS_fsm_state3, icmp_ln20_fu_208_p2, ap_CS_fsm_state4, icmp_ln22_fu_237_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln19_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln20_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln22_fu_237_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln27_1_fu_255_p2 <= std_logic_vector(unsigned(zext_ln22_1_fu_233_p1) + unsigned(sext_ln27_reg_406));
    add_ln27_2_fu_249_p2 <= std_logic_vector(unsigned(ap_const_lv14_310) + unsigned(phi_mul_reg_155));
    add_ln27_fu_224_p2 <= std_logic_vector(unsigned(sub_ln27_reg_388) + unsigned(zext_ln22_fu_220_p1));
    and_ln32_fu_290_p2 <= (trunc_ln31_fu_272_p1 and select_ln31_fu_282_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_166_p2)
    begin
        if ((((icmp_ln19_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_166_p2)
    begin
        if (((icmp_ln19_fu_166_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_360_p2 <= std_logic_vector(unsigned(buffer_0_reg_132) + unsigned(sext_ln27_4_fu_356_p1));
    icmp_ln19_fu_166_p2 <= "1" when (out_h_0_reg_110 = ap_const_lv5_1C) else "0";
    icmp_ln20_fu_208_p2 <= "1" when (out_w_0_reg_121 = ap_const_lv5_1C) else "0";
    icmp_ln22_fu_237_p2 <= "1" when (in_d_0_reg_144 = ap_const_lv5_10) else "0";
    in_d_fu_243_p2 <= std_logic_vector(unsigned(in_d_0_reg_144) + unsigned(ap_const_lv5_1));
    input_r_address0 <= zext_ln27_2_fu_299_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_h_fu_172_p2 <= std_logic_vector(unsigned(out_h_0_reg_110) + unsigned(ap_const_lv5_1));
    out_w_fu_214_p2 <= std_logic_vector(unsigned(out_w_0_reg_121) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln32_fu_369_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= and_ln32_reg_434;

    output_r_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln31_fu_282_p3 <= 
        ap_const_lv16_FFFF when (xor_ln31_fu_276_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln27_2_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln27_1_reg_424),32));

        sext_ln27_4_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln27_2_fu_347_p4),23));

        sext_ln27_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln27_fu_224_p2),15));

        sext_ln32_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln27_reg_401),32));

    shl_ln27_7_fu_190_p3 <= (out_h_0_reg_110 & ap_const_lv2_0);
    shl_ln_fu_178_p3 <= (out_h_0_reg_110 & ap_const_lv5_0);
    sub_ln27_fu_202_p2 <= std_logic_vector(unsigned(zext_ln27_fu_186_p1) - unsigned(zext_ln27_1_fu_198_p1));
    tmp_1_fu_264_p3 <= buffer_0_reg_132(22 downto 22);
    trunc_ln27_2_fu_347_p4 <= mul_ln27_reg_454(31 downto 14);
    trunc_ln27_fu_260_p1 <= in_d_0_reg_144(4 - 1 downto 0);
    trunc_ln31_fu_272_p1 <= buffer_0_reg_132(16 - 1 downto 0);
    xor_ln31_fu_276_p2 <= (tmp_1_fu_264_p3 xor ap_const_lv1_1);
    zext_ln22_1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_155),15));
    zext_ln22_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_121),11));
    zext_ln27_1_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln27_7_fu_190_p3),11));
    zext_ln27_2_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln27_2_fu_296_p1),64));
    zext_ln27_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_178_p3),11));
    zext_ln32_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln32_fu_366_p1),64));
end behav;
