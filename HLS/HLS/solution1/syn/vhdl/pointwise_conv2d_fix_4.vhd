-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_7FD60D : STD_LOGIC_VECTOR (22 downto 0) := "11111111101011000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv10_1C0 : STD_LOGIC_VECTOR (9 downto 0) := "0111000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_310 : STD_LOGIC_VECTOR (14 downto 0) := "000001100010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_4_w_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_4_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_4_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_reg_213 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten18_reg_224 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_h_0_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_246 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_w_0_reg_257 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_reg_268 : STD_LOGIC_VECTOR (22 downto 0);
    signal in_d_0_reg_280 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln26_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln28_fu_303_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln28_reg_911 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln31_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_920_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_920_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_920_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_442_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln32_1_fu_498_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_1_reg_929 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln31_fu_532_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln36_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_939 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_939_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_939_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_939_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_1_fu_552_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_1_reg_944 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_2_fu_564_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_2_reg_949 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_3_fu_578_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln36_3_reg_955 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln39_fu_586_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_reg_960 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_reg_960_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal in_d_fu_590_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_reg_965 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_fu_602_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln36_1_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_981_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_981_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_fu_632_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_985 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_985_pp1_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_985_pp1_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal input_load_reg_990 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_685_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_reg_1000 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_fu_750_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_out_w_0_phi_fu_261_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_in_d_0_phi_fu_284_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln39_5_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_buffer_15_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_0_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_2_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_3_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_4_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_5_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_6_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_7_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_8_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_9_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_10_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_11_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_12_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_13_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_14_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_15_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_396_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln39_4_fu_408_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_fu_404_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln39_1_fu_416_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln39_fu_420_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_fu_426_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln39_mid1_fu_468_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln39_4_mid1_fu_480_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_2_fu_476_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln39_3_fu_488_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln39_1_fu_492_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_fu_430_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln36_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_460_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln32_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_540_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_1_fu_560_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_2_fu_572_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_2_fu_506_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln33_fu_596_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_797_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln39_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_2_fu_610_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln39_fu_725_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln39_2_fu_737_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln36_fu_730_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln39_2_fu_746_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_756_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_fu_774_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_fu_764_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_797_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_797_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_797_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component network_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_mac_muladd_11ns_5ns_11s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component pointwise_conv2d_fix_4_SeparableConv2D_4_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_4_w_s_U : component pointwise_conv2d_fix_4_SeparableConv2D_4_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_4_w_s_address0,
        ce0 => SeparableConv2D_4_w_s_ce0,
        q0 => SeparableConv2D_4_w_s_q0);

    network_mux_164_32_1_1_U106 : component network_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => kernel_buffer_15_fu_110,
        din1 => kernel_buffer_15_1_fu_114,
        din2 => kernel_buffer_15_2_fu_118,
        din3 => kernel_buffer_15_3_fu_122,
        din4 => kernel_buffer_15_4_fu_126,
        din5 => kernel_buffer_15_5_fu_130,
        din6 => kernel_buffer_15_6_fu_134,
        din7 => kernel_buffer_15_7_fu_138,
        din8 => kernel_buffer_15_8_fu_142,
        din9 => kernel_buffer_15_9_fu_146,
        din10 => kernel_buffer_15_10_fu_150,
        din11 => kernel_buffer_15_11_fu_154,
        din12 => kernel_buffer_15_12_fu_158,
        din13 => kernel_buffer_15_13_fu_162,
        din14 => kernel_buffer_15_14_fu_166,
        din15 => kernel_buffer_15_15_fu_170,
        din16 => trunc_ln39_reg_960_pp1_iter1_reg,
        dout => tmp_5_fu_685_p18);

    network_mac_muladd_11ns_5ns_11s_15_1_1_U107 : component network_mac_muladd_11ns_5ns_11s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 5,
        din2_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_797_p0,
        din1 => grp_fu_797_p1,
        din2 => select_ln36_3_reg_955,
        dout => grp_fu_797_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                buffer_0_reg_268 <= ap_const_lv23_7FD60D;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_920_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
                buffer_0_reg_268 <= buffer_fu_750_p2;
            end if; 
        end if;
    end process;

    i_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_213 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_fu_291_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_213 <= i_fu_297_p2;
            end if; 
        end if;
    end process;

    in_d_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                in_d_0_reg_280 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_920 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                in_d_0_reg_280 <= in_d_reg_965;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten18_reg_224 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten18_reg_224 <= add_ln31_fu_442_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_246 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_246 <= select_ln33_fu_602_p3;
            end if; 
        end if;
    end process;

    out_h_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_h_0_reg_235 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                out_h_0_reg_235 <= select_ln31_fu_532_p3;
            end if; 
        end if;
    end process;

    out_w_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_0_reg_257 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_920 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                out_w_0_reg_257 <= select_ln36_2_reg_949;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln36_1_fu_627_p2 = ap_const_lv1_1))) then
                add_ln47_reg_985 <= add_ln47_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln47_reg_985_pp1_iter2_reg <= add_ln47_reg_985;
                add_ln47_reg_985_pp1_iter3_reg <= add_ln47_reg_985_pp1_iter2_reg;
                icmp_ln31_reg_920_pp1_iter2_reg <= icmp_ln31_reg_920_pp1_iter1_reg;
                icmp_ln31_reg_920_pp1_iter3_reg <= icmp_ln31_reg_920_pp1_iter2_reg;
                icmp_ln36_1_reg_981_pp1_iter2_reg <= icmp_ln36_1_reg_981;
                icmp_ln36_1_reg_981_pp1_iter3_reg <= icmp_ln36_1_reg_981_pp1_iter2_reg;
                or_ln36_reg_939_pp1_iter2_reg <= or_ln36_reg_939_pp1_iter1_reg;
                or_ln36_reg_939_pp1_iter3_reg <= or_ln36_reg_939_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln31_reg_920 <= icmp_ln31_fu_436_p2;
                icmp_ln31_reg_920_pp1_iter1_reg <= icmp_ln31_reg_920;
                or_ln36_reg_939_pp1_iter1_reg <= or_ln36_reg_939;
                trunc_ln39_reg_960_pp1_iter1_reg <= trunc_ln39_reg_960;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_920 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln36_1_reg_981 <= icmp_ln36_1_fu_627_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                in_d_reg_965 <= in_d_fu_590_p2;
                select_ln36_2_reg_949 <= select_ln36_2_fu_564_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_920_pp1_iter1_reg = ap_const_lv1_0))) then
                input_load_reg_990 <= input_r_q0;
                tmp_5_reg_995 <= tmp_5_fu_685_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_10_fu_150 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_11_fu_154 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_12_fu_158 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_13_fu_162 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_14_fu_166 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_15_fu_170 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_1_fu_114 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_2_fu_118 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_3_fu_122 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_4_fu_126 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_5_fu_130 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_6_fu_134 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_7_fu_138 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_8_fu_142 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_9_fu_146 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_reg_911 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                kernel_buffer_15_fu_110 <= kernel_buffer_0_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_920_pp1_iter2_reg = ap_const_lv1_0))) then
                mul_ln39_reg_1000 <= mul_ln39_fu_725_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_436_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                or_ln36_reg_939 <= or_ln36_fu_546_p2;
                    select_ln32_1_reg_929(10 downto 2) <= select_ln32_1_fu_498_p3(10 downto 2);
                select_ln36_1_reg_944 <= select_ln36_1_fu_552_p3;
                select_ln36_3_reg_955 <= select_ln36_3_fu_578_p3;
                trunc_ln39_reg_960 <= trunc_ln39_fu_586_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_fu_291_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln28_reg_911 <= trunc_ln28_fu_303_p1;
            end if;
        end if;
    end process;
    select_ln32_1_reg_929(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln26_fu_291_p2, ap_enable_reg_pp0_iter0, icmp_ln31_fu_436_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln26_fu_291_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln26_fu_291_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln31_fu_436_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((icmp_ln31_fu_436_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    SeparableConv2D_4_w_s_address0 <= zext_ln28_fu_307_p1(4 - 1 downto 0);

    SeparableConv2D_4_w_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SeparableConv2D_4_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_4_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln31_fu_442_p2 <= std_logic_vector(unsigned(indvar_flatten18_reg_224) + unsigned(ap_const_lv14_1));
    add_ln33_fu_596_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_246) + unsigned(ap_const_lv10_1));
    add_ln39_2_fu_572_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_560_p1) + unsigned(select_ln32_1_fu_498_p3));
    add_ln39_fu_430_p2 <= std_logic_vector(unsigned(sub_ln39_fu_420_p2) + unsigned(zext_ln36_fu_426_p1));
    add_ln47_fu_632_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_610_p1) + unsigned(select_ln32_1_reg_929));
    and_ln32_fu_526_p2 <= (xor_ln32_fu_514_p2 and icmp_ln36_fu_520_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln26_fu_291_p2)
    begin
        if ((icmp_ln26_fu_291_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln31_fu_436_p2)
    begin
        if ((icmp_ln31_fu_436_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_in_d_0_phi_fu_284_p4_assign_proc : process(in_d_0_reg_280, icmp_ln31_reg_920, ap_CS_fsm_pp1_stage0, in_d_reg_965, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_in_d_0_phi_fu_284_p4 <= in_d_reg_965;
        else 
            ap_phi_mux_in_d_0_phi_fu_284_p4 <= in_d_0_reg_280;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_261_p4_assign_proc : process(out_w_0_reg_257, icmp_ln31_reg_920, ap_CS_fsm_pp1_stage0, select_ln36_2_reg_949, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_920 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_out_w_0_phi_fu_261_p4 <= select_ln36_2_reg_949;
        else 
            ap_phi_mux_out_w_0_phi_fu_261_p4 <= out_w_0_reg_257;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_750_p2 <= std_logic_vector(unsigned(select_ln36_fu_730_p3) + unsigned(sext_ln39_2_fu_746_p1));
    grp_fu_797_p0 <= ap_const_lv15_310(11 - 1 downto 0);
    grp_fu_797_p1 <= grp_fu_797_p10(5 - 1 downto 0);
    grp_fu_797_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_reg_944),15));
    i_fu_297_p2 <= std_logic_vector(unsigned(i_0_reg_213) + unsigned(ap_const_lv5_1));
    icmp_ln26_fu_291_p2 <= "1" when (i_0_reg_213 = ap_const_lv5_10) else "0";
    icmp_ln31_fu_436_p2 <= "1" when (indvar_flatten18_reg_224 = ap_const_lv14_3100) else "0";
    icmp_ln33_fu_454_p2 <= "1" when (indvar_flatten_reg_246 = ap_const_lv10_1C0) else "0";
    icmp_ln36_1_fu_627_p2 <= "1" when (in_d_reg_965 = ap_const_lv5_10) else "0";
    icmp_ln36_fu_520_p2 <= "1" when (ap_phi_mux_in_d_0_phi_fu_284_p4 = ap_const_lv5_10) else "0";
    in_d_fu_590_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln36_1_fu_552_p3));
    input_r_address0 <= zext_ln39_5_fu_622_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        kernel_buffer_0_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_4_w_s_q0),32));

    mul_ln39_fu_725_p0 <= input_load_reg_990;
    mul_ln39_fu_725_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln39_fu_725_p0) * signed(tmp_5_reg_995))), 32));
    or_ln36_fu_546_p2 <= (icmp_ln33_fu_454_p2 or and_ln32_fu_526_p2);
    out_h_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(out_h_0_reg_235));
    out_w_fu_540_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln32_fu_460_p3));
    output_r_address0 <= zext_ln47_fu_792_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln46_fu_764_p1 and select_ln46_fu_774_p3);

    output_r_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln36_1_reg_981_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln36_1_reg_981_pp1_iter3_reg = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln31_fu_532_p3 <= 
        out_h_fu_448_p2 when (icmp_ln33_fu_454_p2(0) = '1') else 
        out_h_0_reg_235;
    select_ln32_1_fu_498_p3 <= 
        sub_ln39_1_fu_492_p2 when (icmp_ln33_fu_454_p2(0) = '1') else 
        sub_ln39_fu_420_p2;
    select_ln32_2_fu_506_p3 <= 
        sub_ln39_1_fu_492_p2 when (icmp_ln33_fu_454_p2(0) = '1') else 
        add_ln39_fu_430_p2;
    select_ln32_fu_460_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_fu_454_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_261_p4;
    select_ln33_fu_602_p3 <= 
        ap_const_lv10_1 when (icmp_ln33_fu_454_p2(0) = '1') else 
        add_ln33_fu_596_p2;
    select_ln36_1_fu_552_p3 <= 
        ap_const_lv5_0 when (or_ln36_fu_546_p2(0) = '1') else 
        ap_phi_mux_in_d_0_phi_fu_284_p4;
    select_ln36_2_fu_564_p3 <= 
        out_w_fu_540_p2 when (and_ln32_fu_526_p2(0) = '1') else 
        select_ln32_fu_460_p3;
    select_ln36_3_fu_578_p3 <= 
        add_ln39_2_fu_572_p2 when (and_ln32_fu_526_p2(0) = '1') else 
        select_ln32_2_fu_506_p3;
    select_ln36_fu_730_p3 <= 
        ap_const_lv23_7FD60D when (or_ln36_reg_939_pp1_iter3_reg(0) = '1') else 
        buffer_0_reg_268;
    select_ln46_fu_774_p3 <= 
        ap_const_lv16_FFFF when (xor_ln46_fu_768_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln39_2_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln39_2_fu_737_p4),23));

        sext_ln39_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_797_p3),32));

        sext_ln47_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_reg_985_pp1_iter3_reg),32));

    shl_ln39_4_fu_408_p3 <= (out_h_0_reg_235 & ap_const_lv2_0);
    shl_ln39_4_mid1_fu_480_p3 <= (out_h_fu_448_p2 & ap_const_lv2_0);
    shl_ln39_mid1_fu_468_p3 <= (out_h_fu_448_p2 & ap_const_lv5_0);
    shl_ln_fu_396_p3 <= (out_h_0_reg_235 & ap_const_lv5_0);
    sub_ln39_1_fu_492_p2 <= std_logic_vector(unsigned(zext_ln39_2_fu_476_p1) - unsigned(zext_ln39_3_fu_488_p1));
    sub_ln39_fu_420_p2 <= std_logic_vector(unsigned(zext_ln39_fu_404_p1) - unsigned(zext_ln39_1_fu_416_p1));
    tmp_1_fu_756_p3 <= buffer_fu_750_p2(22 downto 22);
    trunc_ln28_fu_303_p1 <= i_0_reg_213(4 - 1 downto 0);
    trunc_ln39_2_fu_737_p4 <= mul_ln39_reg_1000(31 downto 14);
    trunc_ln39_fu_586_p1 <= select_ln36_1_fu_552_p3(4 - 1 downto 0);
    trunc_ln46_fu_764_p1 <= buffer_fu_750_p2(16 - 1 downto 0);
    xor_ln32_fu_514_p2 <= (icmp_ln33_fu_454_p2 xor ap_const_lv1_1);
    xor_ln46_fu_768_p2 <= (tmp_1_fu_756_p3 xor ap_const_lv1_1);
    zext_ln28_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln28_fu_303_p1),64));
    zext_ln36_1_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_540_p2),11));
    zext_ln36_2_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_2_reg_949),11));
    zext_ln36_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_w_0_phi_fu_261_p4),11));
    zext_ln39_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_4_fu_408_p3),11));
    zext_ln39_2_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_mid1_fu_468_p3),11));
    zext_ln39_3_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_4_mid1_fu_480_p3),11));
    zext_ln39_5_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln39_fu_619_p1),64));
    zext_ln39_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_396_p3),11));
    zext_ln47_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_fu_789_p1),64));
end behav;
