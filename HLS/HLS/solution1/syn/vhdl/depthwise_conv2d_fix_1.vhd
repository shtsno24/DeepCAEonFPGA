-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_0_ce1 : OUT STD_LOGIC;
    kernel_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_482 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_487 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal output_width_cast_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast_reg_1935 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_fu_495_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_reg_1943 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln36_fu_499_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln36_reg_1948 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln36_5_fu_503_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln36_5_reg_1955 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_cast_fu_507_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln19_cast_reg_1960 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_511_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1965 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_fu_515_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_reg_1970 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln19_100_fu_520_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_100_reg_1975 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_d_fu_531_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1983 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_addr_reg_1988 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln19_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_addr_reg_1993 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_1_reg_1998 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_2_reg_2003 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_3_reg_2008 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_4_reg_2013 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_5_reg_2018 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_6_reg_2023 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_7_reg_2028 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_8_reg_2033 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_fu_666_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_2041 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp5_0_0_0_cast_fu_691_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_0_0_cast_reg_2046 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln20_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_0_1_0_cast_fu_710_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_1_0_cast_reg_2058 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_0_cast_fu_729_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_0_cast_reg_2070 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_0_cast_fu_748_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_0_cast_reg_2082 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln21_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_2090 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln28_42_fu_757_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_42_reg_2094 : STD_LOGIC_VECTOR (16 downto 0);
    signal kernel_0_load_reg_2106 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_44_fu_777_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_44_reg_2111 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln28_3_fu_791_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln28_3_reg_2124 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_46_fu_797_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_46_reg_2129 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln21_1_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_2142 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_load_1_reg_2146 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_218_reg_2151 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_2_reg_2156 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_219_reg_2171 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal kernel_0_load_3_reg_2176 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_220_reg_2181 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_4_reg_2186 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_221_reg_2201 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal kernel_0_load_5_reg_2206 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_222_reg_2211 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_6_reg_2216 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_33_fu_874_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_33_reg_2231 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln_reg_2238 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_34_fu_886_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_34_reg_2243 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_35_fu_890_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_35_reg_2248 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_36_fu_902_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_36_reg_2255 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_37_fu_905_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_37_reg_2260 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_39_fu_920_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_39_reg_2267 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_40_fu_932_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_40_reg_2274 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_41_fu_935_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_41_reg_2279 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_37_reg_2286 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_42_fu_947_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_42_reg_2291 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_43_fu_950_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_43_reg_2296 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_38_reg_2303 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_45_fu_965_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_45_reg_2308 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_46_fu_977_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_46_reg_2315 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_47_fu_981_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_47_reg_2320 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_48_fu_994_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_48_reg_2327 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_49_fu_998_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_49_reg_2332 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_91_fu_1017_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_91_reg_2339 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_95_fu_1029_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_95_reg_2344 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_load_reg_2349 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln28_42_reg_2356 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_98_fu_1079_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_98_reg_2361 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln28_4_fu_1094_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln28_4_reg_2372 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_55_fu_1100_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_55_reg_2377 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_45_reg_2391 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_48_reg_2396 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln21_2_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_reg_2401 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln28_51_fu_1149_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_51_reg_2405 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln28_107_fu_1185_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_107_reg_2421 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_46_reg_2436 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln28_53_fu_1222_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_53_reg_2441 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_47_reg_2447 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_55_fu_1248_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_55_reg_2452 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_111_fu_1267_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_111_reg_2458 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_51_reg_2463 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln28_114_fu_1315_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_114_reg_2468 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_54_reg_2479 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_57_reg_2484 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln21_3_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_3_reg_2489 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln28_120_fu_1397_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_120_reg_2503 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_55_reg_2508 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln28_56_reg_2513 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_124_fu_1453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_124_reg_2518 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_127_fu_1501_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_127_reg_2523 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln28_129_fu_1516_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_129_reg_2534 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_63_reg_2545 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_66_reg_2550 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_135_fu_1549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_135_reg_2555 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_3_fu_1554_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_3_reg_2560 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln21_fu_1558_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_reg_2565 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln28_133_fu_1608_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_133_reg_2580 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_134_fu_1612_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_134_reg_2585 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_137_fu_1621_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_137_reg_2590 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_64_reg_2595 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln28_65_reg_2600 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_141_fu_1693_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_141_reg_2615 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal out_d_0_reg_424 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_435 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul2_reg_447 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_0_reg_459 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_0_reg_470 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln23_fu_537_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_16_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_17_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_18_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_19_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_20_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_21_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_22_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_23_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_24_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_43_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_45_fu_786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_47_fu_806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_48_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_49_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_50_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_51_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_52_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_53_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_6_fu_1065_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_54_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_56_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_57_fu_1166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_58_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_59_fu_1195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_60_fu_1204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_7_fu_1301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_61_fu_1325_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_62_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_63_fu_1387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_8_fu_1487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_64_fu_1511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_65_fu_1526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_66_fu_1594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_67_fu_1603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_68_fu_1653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_69_fu_1657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_9_fu_1718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln28_97_fu_1054_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_113_fu_1290_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_126_fu_1476_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_143_fu_1711_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_fu_546_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_40_fu_542_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_550_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_fu_558_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_41_fu_564_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_72_fu_573_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_73_fu_584_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_74_fu_595_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_75_fu_606_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_76_fu_617_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_77_fu_628_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_78_fu_639_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_79_fu_650_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_3_cast_fu_672_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_0_fu_676_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_0_fu_686_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_0_0_fu_686_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_0_fu_686_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_0_1_0_fu_695_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_1_0_fu_705_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_1_0_fu_705_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_1_0_fu_705_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_0_2_0_fu_714_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_2_0_fu_724_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_2_0_fu_724_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_2_0_fu_724_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp6_0_fu_733_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_0_fu_743_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp7_0_fu_743_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_0_fu_743_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln28_80_fu_761_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln28_fu_771_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_81_fu_781_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_82_fu_801_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_83_fu_816_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_84_fu_825_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_85_fu_834_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_86_fu_843_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_87_fu_852_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_88_fu_861_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_fu_1722_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_36_fu_1729_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_37_fu_1736_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_38_fu_1743_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_39_fu_1750_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_40_fu_1757_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_41_fu_1764_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_42_fu_1771_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_43_fu_1778_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_35_fu_908_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_36_fu_923_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_90_fu_1011_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_s_fu_893_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_40_fu_985_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_41_fu_1002_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_94_fu_1023_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_39_fu_968_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_89_fu_1035_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_93_fu_1045_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_96_fu_1049_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_92_fu_1040_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_fu_1061_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_44_fu_1785_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_99_fu_1084_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_100_fu_1104_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_47_fu_1790_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_50_fu_1795_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_45_fu_1800_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_46_fu_1806_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_101_fu_1162_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_102_fu_1171_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_44_fu_1153_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_106_fu_1180_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_43_fu_1140_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_103_fu_1191_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_104_fu_1200_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_48_fu_1812_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_49_fu_1818_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_51_fu_1824_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_52_fu_1830_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_49_fu_1239_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_50_fu_1252_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_110_fu_1261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_105_fu_1272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_109_fu_1281_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_112_fu_1285_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_108_fu_1276_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_1_fu_1297_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_53_fu_1836_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_115_fu_1320_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_56_fu_1841_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_59_fu_1846_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_54_fu_1851_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_55_fu_1856_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_116_fu_1374_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_117_fu_1383_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_53_fu_1365_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_119_fu_1392_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_52_fu_1352_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_57_fu_1862_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_58_fu_1867_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_60_fu_1873_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_61_fu_1878_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_58_fu_1425_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_59_fu_1438_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_123_fu_1447_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_118_fu_1458_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_122_fu_1467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_125_fu_1471_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_121_fu_1462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_2_fu_1483_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_62_fu_1884_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_128_fu_1506_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_130_fu_1521_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_65_fu_1889_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_68_fu_1894_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_60_fu_1492_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_63_fu_1899_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_64_fu_1905_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_131_fu_1590_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_132_fu_1599_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_62_fu_1581_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_136_fu_1616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_61_fu_1568_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_66_fu_1911_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_67_fu_1917_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_69_fu_1923_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_70_fu_1929_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_67_fu_1665_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_68_fu_1678_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_140_fu_1687_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_139_fu_1702_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_142_fu_1706_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_138_fu_1698_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_44_fu_1785_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_44_fu_1785_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_47_fu_1790_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_47_fu_1790_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_50_fu_1795_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_50_fu_1795_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_45_fu_1800_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_46_fu_1806_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_48_fu_1812_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_49_fu_1818_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_51_fu_1824_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_52_fu_1830_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_53_fu_1836_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_53_fu_1836_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_56_fu_1841_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_56_fu_1841_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_59_fu_1846_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_59_fu_1846_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_54_fu_1851_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_54_fu_1851_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_55_fu_1856_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_57_fu_1862_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_57_fu_1862_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_58_fu_1867_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_60_fu_1873_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_60_fu_1873_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_61_fu_1878_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_62_fu_1884_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_62_fu_1884_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_65_fu_1889_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_65_fu_1889_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_68_fu_1894_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_68_fu_1894_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_63_fu_1899_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_64_fu_1905_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_66_fu_1911_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_67_fu_1917_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_69_fu_1923_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_70_fu_1929_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp5_0_0_0_fu_686_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_1_0_fu_705_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_2_0_fu_724_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp7_0_fu_743_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_1_1_U111 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_reg_2106,
        din1 => reg_482,
        dout => mul_ln28_fu_1722_p2);

    network_mul_mul_16s_16s_30_1_1_U112 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_1_reg_2146,
        din1 => reg_487,
        dout => mul_ln28_36_fu_1729_p2);

    network_mul_mul_16s_16s_30_1_1_U113 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_2_reg_2156,
        din1 => input_load_218_reg_2151,
        dout => mul_ln28_37_fu_1736_p2);

    network_mul_mul_16s_16s_30_1_1_U114 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_3_reg_2176,
        din1 => input_load_219_reg_2171,
        dout => mul_ln28_38_fu_1743_p2);

    network_mul_mul_16s_16s_30_1_1_U115 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_4_reg_2186,
        din1 => input_load_220_reg_2181,
        dout => mul_ln28_39_fu_1750_p2);

    network_mul_mul_16s_16s_30_1_1_U116 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_5_reg_2206,
        din1 => input_load_221_reg_2201,
        dout => mul_ln28_40_fu_1757_p2);

    network_mul_mul_16s_16s_30_1_1_U117 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_6_reg_2216,
        din1 => input_load_222_reg_2211,
        dout => mul_ln28_41_fu_1764_p2);

    network_mul_mul_16s_16s_30_1_1_U118 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_q1,
        din1 => input_r_q1,
        dout => mul_ln28_42_fu_1771_p2);

    network_mul_mul_16s_16s_30_1_1_U119 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_q0,
        din1 => input_r_q0,
        dout => mul_ln28_43_fu_1778_p2);

    network_mul_mul_16s_16s_30_1_1_U120 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_44_fu_1785_p0,
        din1 => mul_ln28_44_fu_1785_p1,
        dout => mul_ln28_44_fu_1785_p2);

    network_mul_mul_16s_16s_30_1_1_U121 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_47_fu_1790_p0,
        din1 => mul_ln28_47_fu_1790_p1,
        dout => mul_ln28_47_fu_1790_p2);

    network_mul_mul_16s_16s_30_1_1_U122 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_50_fu_1795_p0,
        din1 => mul_ln28_50_fu_1795_p1,
        dout => mul_ln28_50_fu_1795_p2);

    network_mul_mul_16s_16s_30_1_1_U123 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_45_fu_1800_p0,
        din1 => input_r_q1,
        dout => mul_ln28_45_fu_1800_p2);

    network_mul_mul_16s_16s_30_1_1_U124 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_46_fu_1806_p0,
        din1 => input_r_q0,
        dout => mul_ln28_46_fu_1806_p2);

    network_mul_mul_16s_16s_30_1_1_U125 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_48_fu_1812_p0,
        din1 => reg_482,
        dout => mul_ln28_48_fu_1812_p2);

    network_mul_mul_16s_16s_30_1_1_U126 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_49_fu_1818_p0,
        din1 => reg_487,
        dout => mul_ln28_49_fu_1818_p2);

    network_mul_mul_16s_16s_30_1_1_U127 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_51_fu_1824_p0,
        din1 => input_r_q1,
        dout => mul_ln28_51_fu_1824_p2);

    network_mul_mul_16s_16s_30_1_1_U128 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_52_fu_1830_p0,
        din1 => input_r_q0,
        dout => mul_ln28_52_fu_1830_p2);

    network_mul_mul_16s_16s_30_1_1_U129 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_53_fu_1836_p0,
        din1 => mul_ln28_53_fu_1836_p1,
        dout => mul_ln28_53_fu_1836_p2);

    network_mul_mul_16s_16s_30_1_1_U130 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_56_fu_1841_p0,
        din1 => mul_ln28_56_fu_1841_p1,
        dout => mul_ln28_56_fu_1841_p2);

    network_mul_mul_16s_16s_30_1_1_U131 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_59_fu_1846_p0,
        din1 => mul_ln28_59_fu_1846_p1,
        dout => mul_ln28_59_fu_1846_p2);

    network_mul_mul_16s_16s_30_1_1_U132 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_54_fu_1851_p0,
        din1 => mul_ln28_54_fu_1851_p1,
        dout => mul_ln28_54_fu_1851_p2);

    network_mul_mul_16s_16s_30_1_1_U133 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_55_fu_1856_p0,
        din1 => input_r_q1,
        dout => mul_ln28_55_fu_1856_p2);

    network_mul_mul_16s_16s_30_1_1_U134 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_57_fu_1862_p0,
        din1 => mul_ln28_57_fu_1862_p1,
        dout => mul_ln28_57_fu_1862_p2);

    network_mul_mul_16s_16s_30_1_1_U135 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_58_fu_1867_p0,
        din1 => input_r_q0,
        dout => mul_ln28_58_fu_1867_p2);

    network_mul_mul_16s_16s_30_1_1_U136 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_60_fu_1873_p0,
        din1 => mul_ln28_60_fu_1873_p1,
        dout => mul_ln28_60_fu_1873_p2);

    network_mul_mul_16s_16s_30_1_1_U137 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_61_fu_1878_p0,
        din1 => input_r_q1,
        dout => mul_ln28_61_fu_1878_p2);

    network_mul_mul_16s_16s_30_1_1_U138 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_62_fu_1884_p0,
        din1 => mul_ln28_62_fu_1884_p1,
        dout => mul_ln28_62_fu_1884_p2);

    network_mul_mul_16s_16s_30_1_1_U139 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_65_fu_1889_p0,
        din1 => mul_ln28_65_fu_1889_p1,
        dout => mul_ln28_65_fu_1889_p2);

    network_mul_mul_16s_16s_30_1_1_U140 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_68_fu_1894_p0,
        din1 => mul_ln28_68_fu_1894_p1,
        dout => mul_ln28_68_fu_1894_p2);

    network_mul_mul_16s_16s_30_1_1_U141 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_63_fu_1899_p0,
        din1 => input_r_q0,
        dout => mul_ln28_63_fu_1899_p2);

    network_mul_mul_16s_16s_30_1_1_U142 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_64_fu_1905_p0,
        din1 => input_r_q1,
        dout => mul_ln28_64_fu_1905_p2);

    network_mul_mul_16s_16s_30_1_1_U143 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_66_fu_1911_p0,
        din1 => input_r_q0,
        dout => mul_ln28_66_fu_1911_p2);

    network_mul_mul_16s_16s_30_1_1_U144 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_67_fu_1917_p0,
        din1 => input_r_q1,
        dout => mul_ln28_67_fu_1917_p2);

    network_mul_mul_16s_16s_30_1_1_U145 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_69_fu_1923_p0,
        din1 => input_r_q0,
        dout => mul_ln28_69_fu_1923_p2);

    network_mul_mul_16s_16s_30_1_1_U146 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_70_fu_1929_p0,
        din1 => input_r_q1,
        dout => mul_ln28_70_fu_1929_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_0_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_661_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_424 <= out_d_reg_1983;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_0_reg_424 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_525_p2 = ap_const_lv1_0))) then 
                out_h_0_reg_459 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and ((icmp_ln21_reg_2090 = ap_const_lv1_1) or ((icmp_ln21_1_reg_2142 = ap_const_lv1_1) or ((icmp_ln21_3_reg_2489 = ap_const_lv1_1) or (icmp_ln21_2_reg_2401 = ap_const_lv1_1)))))) then 
                out_h_0_reg_459 <= out_h_reg_2041;
            end if; 
        end if;
    end process;

    out_w_0_0_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_661_p2 = ap_const_lv1_0))) then 
                out_w_0_0_reg_470 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                out_w_0_0_reg_470 <= add_ln21_reg_2565;
            end if; 
        end if;
    end process;

    phi_mul2_reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_661_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_447 <= add_ln19_reg_1970;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_447 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_661_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_435 <= add_ln19_100_reg_1975;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_435 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_482 <= input_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_482 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln19_100_reg_1975 <= add_ln19_100_fu_520_p2;
                add_ln19_reg_1970 <= add_ln19_fu_515_p2;
                out_d_reg_1983 <= out_d_fu_531_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln21_3_reg_2489 = ap_const_lv1_0) and (icmp_ln21_2_reg_2401 = ap_const_lv1_0) and (icmp_ln21_1_reg_2142 = ap_const_lv1_0) and (icmp_ln21_reg_2090 = ap_const_lv1_0))) then
                add_ln21_reg_2565 <= add_ln21_fu_1558_p2;
                    add_ln28_127_reg_2523(16 downto 2) <= add_ln28_127_fu_1501_p2(16 downto 2);
                    add_ln28_129_reg_2534(16 downto 2) <= add_ln28_129_fu_1516_p2(16 downto 2);
                add_ln28_135_reg_2555 <= add_ln28_135_fu_1549_p2;
                add_ln36_3_reg_2560 <= add_ln36_3_fu_1554_p2;
                trunc_ln28_63_reg_2545 <= mul_ln28_65_fu_1889_p2(29 downto 14);
                trunc_ln28_66_reg_2550 <= mul_ln28_68_fu_1894_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln28_107_reg_2421 <= add_ln28_107_fu_1185_p2;
                sext_ln28_51_reg_2405 <= sext_ln28_51_fu_1149_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln28_111_reg_2458 <= add_ln28_111_fu_1267_p2;
                sext_ln28_53_reg_2441 <= sext_ln28_53_fu_1222_p1;
                sext_ln28_55_reg_2452 <= sext_ln28_55_fu_1248_p1;
                trunc_ln28_46_reg_2436 <= mul_ln28_48_fu_1812_p2(29 downto 14);
                trunc_ln28_47_reg_2447 <= mul_ln28_49_fu_1818_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln21_2_reg_2401 = ap_const_lv1_0))) then
                add_ln28_114_reg_2468 <= add_ln28_114_fu_1315_p2;
                icmp_ln21_3_reg_2489 <= icmp_ln21_3_fu_1348_p2;
                trunc_ln28_51_reg_2463 <= mul_ln28_53_fu_1836_p2(29 downto 14);
                trunc_ln28_54_reg_2479 <= mul_ln28_56_fu_1841_p2(29 downto 14);
                trunc_ln28_57_reg_2484 <= mul_ln28_59_fu_1846_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln28_120_reg_2503 <= add_ln28_120_fu_1397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln28_124_reg_2518 <= add_ln28_124_fu_1453_p2;
                trunc_ln28_55_reg_2508 <= mul_ln28_57_fu_1862_p2(29 downto 14);
                trunc_ln28_56_reg_2513 <= mul_ln28_58_fu_1867_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln28_133_reg_2580 <= add_ln28_133_fu_1608_p2;
                add_ln28_134_reg_2585 <= add_ln28_134_fu_1612_p2;
                add_ln28_137_reg_2590 <= add_ln28_137_fu_1621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln28_141_reg_2615 <= add_ln28_141_fu_1693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln28_91_reg_2339 <= add_ln28_91_fu_1017_p2;
                add_ln28_95_reg_2344 <= add_ln28_95_fu_1029_p2;
                sext_ln28_33_reg_2231 <= sext_ln28_33_fu_874_p1;
                sext_ln28_34_reg_2243 <= sext_ln28_34_fu_886_p1;
                sext_ln28_35_reg_2248 <= sext_ln28_35_fu_890_p1;
                sext_ln28_36_reg_2255 <= sext_ln28_36_fu_902_p1;
                sext_ln28_37_reg_2260 <= sext_ln28_37_fu_905_p1;
                sext_ln28_39_reg_2267 <= sext_ln28_39_fu_920_p1;
                sext_ln28_40_reg_2274 <= sext_ln28_40_fu_932_p1;
                sext_ln28_41_reg_2279 <= sext_ln28_41_fu_935_p1;
                sext_ln28_42_reg_2291 <= sext_ln28_42_fu_947_p1;
                sext_ln28_43_reg_2296 <= sext_ln28_43_fu_950_p1;
                sext_ln28_45_reg_2308 <= sext_ln28_45_fu_965_p1;
                sext_ln28_46_reg_2315 <= sext_ln28_46_fu_977_p1;
                sext_ln28_47_reg_2320 <= sext_ln28_47_fu_981_p1;
                sext_ln28_48_reg_2327 <= sext_ln28_48_fu_994_p1;
                sext_ln28_49_reg_2332 <= sext_ln28_49_fu_998_p1;
                trunc_ln28_37_reg_2286 <= mul_ln28_39_fu_1750_p2(29 downto 14);
                trunc_ln28_38_reg_2303 <= mul_ln28_40_fu_1757_p2(29 downto 14);
                trunc_ln_reg_2238 <= mul_ln28_fu_1722_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_reg_2142 = ap_const_lv1_0))) then
                    add_ln28_98_reg_2361(16 downto 1) <= add_ln28_98_fu_1079_p2(16 downto 1);
                icmp_ln21_2_reg_2401 <= icmp_ln21_2_fu_1132_p2;
                    or_ln28_4_reg_2372(15 downto 2) <= or_ln28_4_fu_1094_p2(15 downto 2);
                trunc_ln28_42_reg_2356 <= mul_ln28_44_fu_1785_p2(29 downto 14);
                trunc_ln28_45_reg_2391 <= mul_ln28_47_fu_1790_p2(29 downto 14);
                trunc_ln28_48_reg_2396 <= mul_ln28_50_fu_1795_p2(29 downto 14);
                    zext_ln28_55_reg_2377(15 downto 2) <= zext_ln28_55_fu_1100_p1(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_525_p2 = ap_const_lv1_0))) then
                bias_addr_reg_1988 <= zext_ln23_fu_537_p1(3 - 1 downto 0);
                kernel_0_addr_1_reg_1998 <= zext_ln28_17_fu_579_p1(7 - 1 downto 0);
                kernel_0_addr_2_reg_2003 <= zext_ln28_18_fu_590_p1(7 - 1 downto 0);
                kernel_0_addr_3_reg_2008 <= zext_ln28_19_fu_601_p1(7 - 1 downto 0);
                kernel_0_addr_4_reg_2013 <= zext_ln28_20_fu_612_p1(7 - 1 downto 0);
                kernel_0_addr_5_reg_2018 <= zext_ln28_21_fu_623_p1(7 - 1 downto 0);
                kernel_0_addr_6_reg_2023 <= zext_ln28_22_fu_634_p1(7 - 1 downto 0);
                kernel_0_addr_7_reg_2028 <= zext_ln28_23_fu_645_p1(7 - 1 downto 0);
                kernel_0_addr_8_reg_2033 <= zext_ln28_24_fu_656_p1(7 - 1 downto 0);
                    kernel_0_addr_reg_1993(5 downto 0) <= zext_ln28_16_fu_568_p1(7 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                bias_load_reg_2349 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_1965 <= empty_fu_511_p1;
                    output_width_cast_reg_1935(4 downto 0) <= output_width_cast_fu_491_p1(4 downto 0);
                    zext_ln19_cast_reg_1960(4 downto 0) <= zext_ln19_cast_fu_507_p1(4 downto 0);
                    zext_ln28_reg_1943(5 downto 0) <= zext_ln28_fu_495_p1(5 downto 0);
                    zext_ln36_5_reg_1955(4 downto 0) <= zext_ln36_5_fu_503_p1(4 downto 0);
                    zext_ln36_reg_1948(5 downto 0) <= zext_ln36_fu_499_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln21_1_reg_2142 <= icmp_ln21_1_fu_811_p2;
                kernel_0_load_reg_2106 <= kernel_0_q0;
                    or_ln28_3_reg_2124(0) <= or_ln28_3_fu_791_p2(0);    or_ln28_3_reg_2124(15 downto 2) <= or_ln28_3_fu_791_p2(15 downto 2);
                    zext_ln28_44_reg_2111(15 downto 1) <= zext_ln28_44_fu_777_p1(15 downto 1);
                    zext_ln28_46_reg_2129(0) <= zext_ln28_46_fu_797_p1(0);    zext_ln28_46_reg_2129(15 downto 2) <= zext_ln28_46_fu_797_p1(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln21_reg_2090 <= icmp_ln21_fu_752_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_load_218_reg_2151 <= input_r_q1;
                kernel_0_load_1_reg_2146 <= kernel_0_q0;
                kernel_0_load_2_reg_2156 <= kernel_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_219_reg_2171 <= input_r_q1;
                input_load_220_reg_2181 <= input_r_q0;
                kernel_0_load_3_reg_2176 <= kernel_0_q1;
                kernel_0_load_4_reg_2186 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_load_221_reg_2201 <= input_r_q1;
                input_load_222_reg_2211 <= input_r_q0;
                kernel_0_load_5_reg_2206 <= kernel_0_q1;
                kernel_0_load_6_reg_2216 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_reg_2041 <= out_h_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_487 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_661_p2 = ap_const_lv1_0))) then
                    tmp5_0_0_0_cast_reg_2046(12 downto 0) <= tmp5_0_0_0_cast_fu_691_p1(12 downto 0);
                    tmp5_0_1_0_cast_reg_2058(12 downto 0) <= tmp5_0_1_0_cast_fu_710_p1(12 downto 0);
                    tmp5_0_2_0_cast_reg_2070(12 downto 0) <= tmp5_0_2_0_cast_fu_729_p1(12 downto 0);
                    tmp7_0_cast_reg_2082(11 downto 0) <= tmp7_0_cast_fu_748_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                trunc_ln28_64_reg_2595 <= mul_ln28_66_fu_1911_p2(29 downto 14);
                trunc_ln28_65_reg_2600 <= mul_ln28_67_fu_1917_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_752_p2 = ap_const_lv1_0))) then
                    zext_ln28_42_reg_2094(15 downto 0) <= zext_ln28_42_fu_757_p1(15 downto 0);
            end if;
        end if;
    end process;
    output_width_cast_reg_1935(15 downto 5) <= "00000000000";
    zext_ln28_reg_1943(6) <= '0';
    zext_ln36_reg_1948(12 downto 6) <= "0000000";
    zext_ln36_5_reg_1955(6 downto 5) <= "00";
    zext_ln19_cast_reg_1960(11 downto 5) <= "0000000";
    kernel_0_addr_reg_1993(6) <= '0';
    tmp5_0_0_0_cast_reg_2046(16 downto 13) <= "0000";
    tmp5_0_1_0_cast_reg_2058(16 downto 13) <= "0000";
    tmp5_0_2_0_cast_reg_2070(16 downto 13) <= "0000";
    tmp7_0_cast_reg_2082(16 downto 12) <= "00000";
    zext_ln28_42_reg_2094(16) <= '0';
    zext_ln28_44_reg_2111(0) <= '1';
    zext_ln28_44_reg_2111(16) <= '0';
    or_ln28_3_reg_2124(1) <= '1';
    zext_ln28_46_reg_2129(1) <= '1';
    zext_ln28_46_reg_2129(16) <= '0';
    add_ln28_98_reg_2361(0) <= '0';
    or_ln28_4_reg_2372(1 downto 0) <= "11";
    zext_ln28_55_reg_2377(1 downto 0) <= "11";
    zext_ln28_55_reg_2377(16) <= '0';
    add_ln28_127_reg_2523(1 downto 0) <= "00";
    add_ln28_129_reg_2534(1 downto 0) <= "01";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_525_p2, ap_CS_fsm_state3, icmp_ln20_fu_661_p2, icmp_ln21_fu_752_p2, icmp_ln21_reg_2090, ap_CS_fsm_state4, icmp_ln21_1_reg_2142, ap_CS_fsm_state10, icmp_ln21_2_reg_2401, ap_CS_fsm_state14, icmp_ln21_3_reg_2489, ap_CS_fsm_state17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_525_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_661_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_752_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_reg_2142 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln21_2_reg_2401 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and ((icmp_ln21_reg_2090 = ap_const_lv1_1) or ((icmp_ln21_1_reg_2142 = ap_const_lv1_1) or ((icmp_ln21_3_reg_2489 = ap_const_lv1_1) or (icmp_ln21_2_reg_2401 = ap_const_lv1_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_100_fu_520_p2 <= std_logic_vector(unsigned(phi_mul_reg_435) + unsigned(zext_ln28_reg_1943));
    add_ln19_fu_515_p2 <= std_logic_vector(unsigned(phi_mul2_reg_447) + unsigned(zext_ln36_5_reg_1955));
    add_ln21_fu_1558_p2 <= std_logic_vector(unsigned(out_w_0_0_reg_470) + unsigned(ap_const_lv16_4));
    add_ln28_100_fu_1104_p2 <= std_logic_vector(unsigned(zext_ln28_55_fu_1100_p1) + unsigned(tmp5_0_0_0_cast_reg_2046));
    add_ln28_101_fu_1162_p2 <= std_logic_vector(unsigned(add_ln28_98_reg_2361) + unsigned(tmp5_0_1_0_cast_reg_2058));
    add_ln28_102_fu_1171_p2 <= std_logic_vector(unsigned(zext_ln28_55_reg_2377) + unsigned(tmp5_0_1_0_cast_reg_2058));
    add_ln28_103_fu_1191_p2 <= std_logic_vector(unsigned(add_ln28_98_reg_2361) + unsigned(tmp5_0_2_0_cast_reg_2070));
    add_ln28_104_fu_1200_p2 <= std_logic_vector(unsigned(zext_ln28_55_reg_2377) + unsigned(tmp5_0_2_0_cast_reg_2070));
    add_ln28_105_fu_1272_p2 <= std_logic_vector(unsigned(bias_load_reg_2349) + unsigned(trunc_ln28_42_reg_2356));
    add_ln28_106_fu_1180_p2 <= std_logic_vector(unsigned(trunc_ln28_44_fu_1153_p4) + unsigned(trunc_ln28_45_reg_2391));
    add_ln28_107_fu_1185_p2 <= std_logic_vector(unsigned(add_ln28_106_fu_1180_p2) + unsigned(trunc_ln28_43_fu_1140_p4));
    add_ln28_108_fu_1276_p2 <= std_logic_vector(unsigned(add_ln28_107_reg_2421) + unsigned(add_ln28_105_fu_1272_p2));
    add_ln28_109_fu_1281_p2 <= std_logic_vector(unsigned(trunc_ln28_46_reg_2436) + unsigned(trunc_ln28_47_reg_2447));
    add_ln28_110_fu_1261_p2 <= std_logic_vector(unsigned(trunc_ln28_49_fu_1239_p4) + unsigned(trunc_ln28_50_fu_1252_p4));
    add_ln28_111_fu_1267_p2 <= std_logic_vector(unsigned(add_ln28_110_fu_1261_p2) + unsigned(trunc_ln28_48_reg_2396));
    add_ln28_112_fu_1285_p2 <= std_logic_vector(unsigned(add_ln28_111_reg_2458) + unsigned(add_ln28_109_fu_1281_p2));
    add_ln28_113_fu_1290_p2 <= std_logic_vector(unsigned(add_ln28_112_fu_1285_p2) + unsigned(add_ln28_108_fu_1276_p2));
    add_ln28_114_fu_1315_p2 <= std_logic_vector(unsigned(zext_ln28_46_reg_2129) + unsigned(ap_const_lv17_2));
    add_ln28_115_fu_1320_p2 <= std_logic_vector(unsigned(add_ln28_114_fu_1315_p2) + unsigned(tmp5_0_0_0_cast_reg_2046));
    add_ln28_116_fu_1374_p2 <= std_logic_vector(unsigned(add_ln28_114_reg_2468) + unsigned(tmp5_0_1_0_cast_reg_2058));
    add_ln28_117_fu_1383_p2 <= std_logic_vector(unsigned(add_ln28_114_reg_2468) + unsigned(tmp5_0_2_0_cast_reg_2070));
    add_ln28_118_fu_1458_p2 <= std_logic_vector(unsigned(bias_load_reg_2349) + unsigned(trunc_ln28_51_reg_2463));
    add_ln28_119_fu_1392_p2 <= std_logic_vector(unsigned(trunc_ln28_53_fu_1365_p4) + unsigned(trunc_ln28_54_reg_2479));
    add_ln28_120_fu_1397_p2 <= std_logic_vector(unsigned(add_ln28_119_fu_1392_p2) + unsigned(trunc_ln28_52_fu_1352_p4));
    add_ln28_121_fu_1462_p2 <= std_logic_vector(unsigned(add_ln28_120_reg_2503) + unsigned(add_ln28_118_fu_1458_p2));
    add_ln28_122_fu_1467_p2 <= std_logic_vector(unsigned(trunc_ln28_55_reg_2508) + unsigned(trunc_ln28_56_reg_2513));
    add_ln28_123_fu_1447_p2 <= std_logic_vector(unsigned(trunc_ln28_58_fu_1425_p4) + unsigned(trunc_ln28_59_fu_1438_p4));
    add_ln28_124_fu_1453_p2 <= std_logic_vector(unsigned(add_ln28_123_fu_1447_p2) + unsigned(trunc_ln28_57_reg_2484));
    add_ln28_125_fu_1471_p2 <= std_logic_vector(unsigned(add_ln28_124_reg_2518) + unsigned(add_ln28_122_fu_1467_p2));
    add_ln28_126_fu_1476_p2 <= std_logic_vector(unsigned(add_ln28_125_fu_1471_p2) + unsigned(add_ln28_121_fu_1462_p2));
    add_ln28_127_fu_1501_p2 <= std_logic_vector(unsigned(zext_ln28_55_reg_2377) + unsigned(ap_const_lv17_1));
    add_ln28_128_fu_1506_p2 <= std_logic_vector(unsigned(add_ln28_127_fu_1501_p2) + unsigned(tmp5_0_0_0_cast_reg_2046));
    add_ln28_129_fu_1516_p2 <= std_logic_vector(unsigned(zext_ln28_55_reg_2377) + unsigned(ap_const_lv17_2));
    add_ln28_130_fu_1521_p2 <= std_logic_vector(unsigned(add_ln28_129_fu_1516_p2) + unsigned(tmp5_0_0_0_cast_reg_2046));
    add_ln28_131_fu_1590_p2 <= std_logic_vector(unsigned(add_ln28_127_reg_2523) + unsigned(tmp5_0_1_0_cast_reg_2058));
    add_ln28_132_fu_1599_p2 <= std_logic_vector(unsigned(add_ln28_129_reg_2534) + unsigned(tmp5_0_1_0_cast_reg_2058));
    add_ln28_133_fu_1608_p2 <= std_logic_vector(unsigned(add_ln28_127_reg_2523) + unsigned(tmp5_0_2_0_cast_reg_2070));
    add_ln28_134_fu_1612_p2 <= std_logic_vector(unsigned(add_ln28_129_reg_2534) + unsigned(tmp5_0_2_0_cast_reg_2070));
    add_ln28_135_fu_1549_p2 <= std_logic_vector(unsigned(bias_load_reg_2349) + unsigned(trunc_ln28_60_fu_1492_p4));
    add_ln28_136_fu_1616_p2 <= std_logic_vector(unsigned(trunc_ln28_62_fu_1581_p4) + unsigned(trunc_ln28_63_reg_2545));
    add_ln28_137_fu_1621_p2 <= std_logic_vector(unsigned(add_ln28_136_fu_1616_p2) + unsigned(trunc_ln28_61_fu_1568_p4));
    add_ln28_138_fu_1698_p2 <= std_logic_vector(unsigned(add_ln28_137_reg_2590) + unsigned(add_ln28_135_reg_2555));
    add_ln28_139_fu_1702_p2 <= std_logic_vector(unsigned(trunc_ln28_64_reg_2595) + unsigned(trunc_ln28_65_reg_2600));
    add_ln28_140_fu_1687_p2 <= std_logic_vector(unsigned(trunc_ln28_67_fu_1665_p4) + unsigned(trunc_ln28_68_fu_1678_p4));
    add_ln28_141_fu_1693_p2 <= std_logic_vector(unsigned(add_ln28_140_fu_1687_p2) + unsigned(trunc_ln28_66_reg_2550));
    add_ln28_142_fu_1706_p2 <= std_logic_vector(unsigned(add_ln28_141_reg_2615) + unsigned(add_ln28_139_fu_1702_p2));
    add_ln28_143_fu_1711_p2 <= std_logic_vector(unsigned(add_ln28_142_fu_1706_p2) + unsigned(add_ln28_138_fu_1698_p2));
    add_ln28_72_fu_573_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(zext_ln28_41_fu_564_p1));
    add_ln28_73_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(zext_ln28_41_fu_564_p1));
    add_ln28_74_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(zext_ln28_41_fu_564_p1));
    add_ln28_75_fu_606_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(zext_ln28_41_fu_564_p1));
    add_ln28_76_fu_617_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(zext_ln28_41_fu_564_p1));
    add_ln28_77_fu_628_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) + unsigned(zext_ln28_41_fu_564_p1));
    add_ln28_78_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv7_7) + unsigned(zext_ln28_41_fu_564_p1));
    add_ln28_79_fu_650_p2 <= std_logic_vector(unsigned(ap_const_lv7_8) + unsigned(zext_ln28_41_fu_564_p1));
    add_ln28_80_fu_761_p2 <= std_logic_vector(unsigned(tmp5_0_0_0_cast_reg_2046) + unsigned(zext_ln28_42_fu_757_p1));
    add_ln28_81_fu_781_p2 <= std_logic_vector(unsigned(zext_ln28_44_fu_777_p1) + unsigned(tmp5_0_0_0_cast_reg_2046));
    add_ln28_82_fu_801_p2 <= std_logic_vector(unsigned(zext_ln28_46_fu_797_p1) + unsigned(tmp5_0_0_0_cast_reg_2046));
    add_ln28_83_fu_816_p2 <= std_logic_vector(unsigned(tmp5_0_1_0_cast_reg_2058) + unsigned(zext_ln28_42_reg_2094));
    add_ln28_84_fu_825_p2 <= std_logic_vector(unsigned(zext_ln28_44_reg_2111) + unsigned(tmp5_0_1_0_cast_reg_2058));
    add_ln28_85_fu_834_p2 <= std_logic_vector(unsigned(zext_ln28_46_reg_2129) + unsigned(tmp5_0_1_0_cast_reg_2058));
    add_ln28_86_fu_843_p2 <= std_logic_vector(unsigned(tmp5_0_2_0_cast_reg_2070) + unsigned(zext_ln28_42_reg_2094));
    add_ln28_87_fu_852_p2 <= std_logic_vector(unsigned(zext_ln28_44_reg_2111) + unsigned(tmp5_0_2_0_cast_reg_2070));
    add_ln28_88_fu_861_p2 <= std_logic_vector(unsigned(zext_ln28_46_reg_2129) + unsigned(tmp5_0_2_0_cast_reg_2070));
    add_ln28_89_fu_1035_p2 <= std_logic_vector(unsigned(bias_q0) + unsigned(trunc_ln_reg_2238));
    add_ln28_90_fu_1011_p2 <= std_logic_vector(unsigned(trunc_ln28_35_fu_908_p4) + unsigned(trunc_ln28_36_fu_923_p4));
    add_ln28_91_fu_1017_p2 <= std_logic_vector(unsigned(add_ln28_90_fu_1011_p2) + unsigned(trunc_ln28_s_fu_893_p4));
    add_ln28_92_fu_1040_p2 <= std_logic_vector(unsigned(add_ln28_91_reg_2339) + unsigned(add_ln28_89_fu_1035_p2));
    add_ln28_93_fu_1045_p2 <= std_logic_vector(unsigned(trunc_ln28_37_reg_2286) + unsigned(trunc_ln28_38_reg_2303));
    add_ln28_94_fu_1023_p2 <= std_logic_vector(unsigned(trunc_ln28_40_fu_985_p4) + unsigned(trunc_ln28_41_fu_1002_p4));
    add_ln28_95_fu_1029_p2 <= std_logic_vector(unsigned(add_ln28_94_fu_1023_p2) + unsigned(trunc_ln28_39_fu_968_p4));
    add_ln28_96_fu_1049_p2 <= std_logic_vector(unsigned(add_ln28_95_reg_2344) + unsigned(add_ln28_93_fu_1045_p2));
    add_ln28_97_fu_1054_p2 <= std_logic_vector(unsigned(add_ln28_96_fu_1049_p2) + unsigned(add_ln28_92_fu_1040_p2));
    add_ln28_98_fu_1079_p2 <= std_logic_vector(unsigned(zext_ln28_44_reg_2111) + unsigned(ap_const_lv17_1));
    add_ln28_99_fu_1084_p2 <= std_logic_vector(unsigned(add_ln28_98_fu_1079_p2) + unsigned(tmp5_0_0_0_cast_reg_2046));
    add_ln28_fu_558_p2 <= std_logic_vector(unsigned(zext_ln28_40_fu_542_p1) + unsigned(shl_ln_fu_550_p3));
    add_ln36_1_fu_1297_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_2082) + unsigned(zext_ln28_44_reg_2111));
    add_ln36_2_fu_1483_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_2082) + unsigned(zext_ln28_46_reg_2129));
    add_ln36_3_fu_1554_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_2082) + unsigned(zext_ln28_55_reg_2377));
    add_ln36_fu_1061_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_2082) + unsigned(zext_ln28_42_reg_2094));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_525_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_525_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_525_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_525_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_1988;

    bias_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_511_p1 <= output_height(4 - 1 downto 0);
    icmp_ln19_fu_525_p2 <= "1" when (out_d_0_reg_424 = ap_const_lv4_8) else "0";
    icmp_ln20_fu_661_p2 <= "1" when (out_h_0_reg_459 = empty_reg_1965) else "0";
    icmp_ln21_1_fu_811_p2 <= "1" when (or_ln28_fu_771_p2 = output_width_cast_reg_1935) else "0";
    icmp_ln21_2_fu_1132_p2 <= "1" when (or_ln28_3_reg_2124 = output_width_cast_reg_1935) else "0";
    icmp_ln21_3_fu_1348_p2 <= "1" when (or_ln28_4_reg_2372 = output_width_cast_reg_1935) else "0";
    icmp_ln21_fu_752_p2 <= "1" when (out_w_0_0_reg_470 = output_width_cast_reg_1935) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln28_43_fu_766_p1, zext_ln28_45_fu_786_p1, zext_ln28_49_fu_829_p1, zext_ln28_51_fu_847_p1, zext_ln28_53_fu_865_p1, zext_ln28_56_fu_1109_p1, zext_ln28_58_fu_1175_p1, zext_ln28_60_fu_1204_p1, zext_ln28_62_fu_1378_p1, zext_ln28_64_fu_1511_p1, zext_ln28_66_fu_1594_p1, zext_ln28_68_fu_1653_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_address0 <= zext_ln28_68_fu_1653_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_address0 <= zext_ln28_66_fu_1594_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_r_address0 <= zext_ln28_64_fu_1511_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address0 <= zext_ln28_62_fu_1378_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= zext_ln28_60_fu_1204_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= zext_ln28_58_fu_1175_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln28_56_fu_1109_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln28_53_fu_865_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln28_51_fu_847_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln28_49_fu_829_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= zext_ln28_45_fu_786_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= zext_ln28_43_fu_766_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln28_47_fu_806_p1, zext_ln28_48_fu_820_p1, zext_ln28_50_fu_838_p1, zext_ln28_52_fu_856_p1, zext_ln28_54_fu_1089_p1, zext_ln28_57_fu_1166_p1, zext_ln28_59_fu_1195_p1, zext_ln28_61_fu_1325_p1, zext_ln28_63_fu_1387_p1, zext_ln28_65_fu_1526_p1, zext_ln28_67_fu_1603_p1, zext_ln28_69_fu_1657_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_address1 <= zext_ln28_69_fu_1657_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_address1 <= zext_ln28_67_fu_1603_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_r_address1 <= zext_ln28_65_fu_1526_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address1 <= zext_ln28_63_fu_1387_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_r_address1 <= zext_ln28_61_fu_1325_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address1 <= zext_ln28_59_fu_1195_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= zext_ln28_57_fu_1166_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= zext_ln28_54_fu_1089_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= zext_ln28_52_fu_856_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address1 <= zext_ln28_50_fu_838_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address1 <= zext_ln28_48_fu_820_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address1 <= zext_ln28_47_fu_806_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, kernel_0_addr_reg_1993, kernel_0_addr_1_reg_1998, kernel_0_addr_4_reg_2013, kernel_0_addr_6_reg_2023, kernel_0_addr_8_reg_2033, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address0 <= kernel_0_addr_8_reg_2033;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_0_address0 <= kernel_0_addr_6_reg_2023;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_0_address0 <= kernel_0_addr_4_reg_2013;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_0_address0 <= kernel_0_addr_1_reg_1998;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_0_address0 <= kernel_0_addr_reg_1993;
        else 
            kernel_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    kernel_0_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, kernel_0_addr_2_reg_2003, kernel_0_addr_3_reg_2008, kernel_0_addr_5_reg_2018, kernel_0_addr_7_reg_2028, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address1 <= kernel_0_addr_7_reg_2028;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_0_address1 <= kernel_0_addr_5_reg_2018;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_0_address1 <= kernel_0_addr_3_reg_2008;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_0_address1 <= kernel_0_addr_2_reg_2003;
        else 
            kernel_0_address1 <= "XXXXXXX";
        end if; 
    end process;


    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            kernel_0_ce1 <= ap_const_logic_1;
        else 
            kernel_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_44_fu_1785_p0 <= sext_ln28_33_reg_2231(16 - 1 downto 0);
    mul_ln28_44_fu_1785_p1 <= sext_ln28_34_reg_2243(16 - 1 downto 0);
    mul_ln28_45_fu_1800_p0 <= sext_ln28_35_reg_2248(16 - 1 downto 0);
    mul_ln28_46_fu_1806_p0 <= sext_ln28_37_reg_2260(16 - 1 downto 0);
    mul_ln28_47_fu_1790_p0 <= sext_ln28_39_reg_2267(16 - 1 downto 0);
    mul_ln28_47_fu_1790_p1 <= sext_ln28_40_reg_2274(16 - 1 downto 0);
    mul_ln28_48_fu_1812_p0 <= sext_ln28_41_reg_2279(16 - 1 downto 0);
    mul_ln28_49_fu_1818_p0 <= sext_ln28_43_reg_2296(16 - 1 downto 0);
    mul_ln28_50_fu_1795_p0 <= sext_ln28_45_reg_2308(16 - 1 downto 0);
    mul_ln28_50_fu_1795_p1 <= sext_ln28_46_reg_2315(16 - 1 downto 0);
    mul_ln28_51_fu_1824_p0 <= sext_ln28_47_reg_2320(16 - 1 downto 0);
    mul_ln28_52_fu_1830_p0 <= sext_ln28_49_reg_2332(16 - 1 downto 0);
    mul_ln28_53_fu_1836_p0 <= sext_ln28_33_reg_2231(16 - 1 downto 0);
    mul_ln28_53_fu_1836_p1 <= sext_ln28_36_reg_2255(16 - 1 downto 0);
    mul_ln28_54_fu_1851_p0 <= sext_ln28_35_reg_2248(16 - 1 downto 0);
    mul_ln28_54_fu_1851_p1 <= sext_ln28_51_reg_2405(16 - 1 downto 0);
    mul_ln28_55_fu_1856_p0 <= sext_ln28_37_reg_2260(16 - 1 downto 0);
    mul_ln28_56_fu_1841_p0 <= sext_ln28_39_reg_2267(16 - 1 downto 0);
    mul_ln28_56_fu_1841_p1 <= sext_ln28_42_reg_2291(16 - 1 downto 0);
    mul_ln28_57_fu_1862_p0 <= sext_ln28_41_reg_2279(16 - 1 downto 0);
    mul_ln28_57_fu_1862_p1 <= sext_ln28_53_reg_2441(16 - 1 downto 0);
    mul_ln28_58_fu_1867_p0 <= sext_ln28_43_reg_2296(16 - 1 downto 0);
    mul_ln28_59_fu_1846_p0 <= sext_ln28_45_reg_2308(16 - 1 downto 0);
    mul_ln28_59_fu_1846_p1 <= sext_ln28_48_reg_2327(16 - 1 downto 0);
    mul_ln28_60_fu_1873_p0 <= sext_ln28_47_reg_2320(16 - 1 downto 0);
    mul_ln28_60_fu_1873_p1 <= sext_ln28_55_reg_2452(16 - 1 downto 0);
    mul_ln28_61_fu_1878_p0 <= sext_ln28_49_reg_2332(16 - 1 downto 0);
    mul_ln28_62_fu_1884_p0 <= sext_ln28_33_reg_2231(16 - 1 downto 0);
    mul_ln28_62_fu_1884_p1 <= sext_ln28_51_reg_2405(16 - 1 downto 0);
    mul_ln28_63_fu_1899_p0 <= sext_ln28_35_reg_2248(16 - 1 downto 0);
    mul_ln28_64_fu_1905_p0 <= sext_ln28_37_reg_2260(16 - 1 downto 0);
    mul_ln28_65_fu_1889_p0 <= sext_ln28_39_reg_2267(16 - 1 downto 0);
    mul_ln28_65_fu_1889_p1 <= sext_ln28_53_reg_2441(16 - 1 downto 0);
    mul_ln28_66_fu_1911_p0 <= sext_ln28_41_reg_2279(16 - 1 downto 0);
    mul_ln28_67_fu_1917_p0 <= sext_ln28_43_reg_2296(16 - 1 downto 0);
    mul_ln28_68_fu_1894_p0 <= sext_ln28_45_reg_2308(16 - 1 downto 0);
    mul_ln28_68_fu_1894_p1 <= sext_ln28_55_reg_2452(16 - 1 downto 0);
    mul_ln28_69_fu_1923_p0 <= sext_ln28_47_reg_2320(16 - 1 downto 0);
    mul_ln28_70_fu_1929_p0 <= sext_ln28_49_reg_2332(16 - 1 downto 0);
    or_ln28_3_fu_791_p2 <= (out_w_0_0_reg_470 or ap_const_lv16_2);
    or_ln28_4_fu_1094_p2 <= (out_w_0_0_reg_470 or ap_const_lv16_3);
    or_ln28_fu_771_p2 <= (out_w_0_0_reg_470 or ap_const_lv16_1);
    out_d_fu_531_p2 <= std_logic_vector(unsigned(out_d_0_reg_424) + unsigned(ap_const_lv4_1));
    out_h_fu_666_p2 <= std_logic_vector(unsigned(out_h_0_reg_459) + unsigned(ap_const_lv4_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state21, zext_ln36_6_fu_1065_p1, zext_ln36_7_fu_1301_p1, zext_ln36_8_fu_1487_p1, zext_ln36_9_fu_1718_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_address0 <= zext_ln36_9_fu_1718_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_address0 <= zext_ln36_8_fu_1487_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_address0 <= zext_ln36_7_fu_1301_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address0 <= zext_ln36_6_fu_1065_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state21, add_ln28_97_fu_1054_p2, add_ln28_113_fu_1290_p2, add_ln28_126_fu_1476_p2, add_ln28_143_fu_1711_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_d0 <= add_ln28_143_fu_1711_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_d0 <= add_ln28_126_fu_1476_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_d0 <= add_ln28_113_fu_1290_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d0 <= add_ln28_97_fu_1054_p2;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(icmp_ln21_reg_2090, icmp_ln21_1_reg_2142, ap_CS_fsm_state10, icmp_ln21_2_reg_2401, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln21_2_reg_2401 = ap_const_lv1_0) and (icmp_ln21_1_reg_2142 = ap_const_lv1_0) and (icmp_ln21_reg_2090 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),16));
        sext_ln28_33_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_reg_2106),30));

        sext_ln28_34_fu_886_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_487),30));

        sext_ln28_35_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_1_reg_2146),30));

        sext_ln28_36_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_218_reg_2151),30));

        sext_ln28_37_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_2_reg_2156),30));

        sext_ln28_39_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_3_reg_2176),30));

        sext_ln28_40_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_220_reg_2181),30));

        sext_ln28_41_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_4_reg_2186),30));

        sext_ln28_42_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_221_reg_2201),30));

        sext_ln28_43_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_5_reg_2206),30));

        sext_ln28_45_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_6_reg_2216),30));

        sext_ln28_46_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_r_q1),30));

        sext_ln28_47_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_q1),30));

        sext_ln28_48_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_r_q0),30));

        sext_ln28_49_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_q0),30));

        sext_ln28_51_fu_1149_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_r_q0),30));

        sext_ln28_53_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_487),30));

        sext_ln28_55_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_r_q0),30));

    shl_ln_fu_550_p3 <= (trunc_ln28_fu_546_p1 & ap_const_lv3_0);
    tmp5_0_0_0_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_0_fu_686_p2),17));
    tmp5_0_0_0_fu_686_p0 <= zext_ln36_reg_1948(6 - 1 downto 0);
    tmp5_0_0_0_fu_686_p1 <= tmp5_0_0_0_fu_686_p10(7 - 1 downto 0);
    tmp5_0_0_0_fu_686_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_0_0_fu_676_p2),13));
    tmp5_0_0_0_fu_686_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_0_fu_686_p0) * unsigned(tmp5_0_0_0_fu_686_p1), 13));
    tmp5_0_1_0_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_0_fu_705_p2),17));
    tmp5_0_1_0_fu_705_p0 <= zext_ln36_reg_1948(6 - 1 downto 0);
    tmp5_0_1_0_fu_705_p1 <= tmp5_0_1_0_fu_705_p10(7 - 1 downto 0);
    tmp5_0_1_0_fu_705_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_1_0_fu_695_p2),13));
    tmp5_0_1_0_fu_705_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_0_fu_705_p0) * unsigned(tmp5_0_1_0_fu_705_p1), 13));
    tmp5_0_2_0_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_0_fu_724_p2),17));
    tmp5_0_2_0_fu_724_p0 <= zext_ln36_reg_1948(6 - 1 downto 0);
    tmp5_0_2_0_fu_724_p1 <= tmp5_0_2_0_fu_724_p10(7 - 1 downto 0);
    tmp5_0_2_0_fu_724_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_2_0_fu_714_p2),13));
    tmp5_0_2_0_fu_724_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_0_fu_724_p0) * unsigned(tmp5_0_2_0_fu_724_p1), 13));
    tmp6_0_fu_733_p2 <= std_logic_vector(unsigned(zext_ln28_3_cast_fu_672_p1) + unsigned(phi_mul2_reg_447));
    tmp7_0_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_0_fu_743_p2),17));
    tmp7_0_fu_743_p0 <= zext_ln19_cast_reg_1960(5 - 1 downto 0);
    tmp7_0_fu_743_p1 <= tmp7_0_fu_743_p10(7 - 1 downto 0);
    tmp7_0_fu_743_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_0_fu_733_p2),12));
    tmp7_0_fu_743_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_0_fu_743_p0) * unsigned(tmp7_0_fu_743_p1), 12));
    tmp_0_0_0_fu_676_p2 <= std_logic_vector(unsigned(zext_ln28_3_cast_fu_672_p1) + unsigned(phi_mul_reg_435));
    tmp_0_1_0_fu_695_p2 <= std_logic_vector(unsigned(tmp_0_0_0_fu_676_p2) + unsigned(ap_const_lv7_1));
    tmp_0_2_0_fu_714_p2 <= std_logic_vector(unsigned(tmp_0_0_0_fu_676_p2) + unsigned(ap_const_lv7_2));
    trunc_ln28_35_fu_908_p4 <= mul_ln28_37_fu_1736_p2(29 downto 14);
    trunc_ln28_36_fu_923_p4 <= mul_ln28_38_fu_1743_p2(29 downto 14);
    trunc_ln28_39_fu_968_p4 <= mul_ln28_41_fu_1764_p2(29 downto 14);
    trunc_ln28_40_fu_985_p4 <= mul_ln28_42_fu_1771_p2(29 downto 14);
    trunc_ln28_41_fu_1002_p4 <= mul_ln28_43_fu_1778_p2(29 downto 14);
    trunc_ln28_43_fu_1140_p4 <= mul_ln28_45_fu_1800_p2(29 downto 14);
    trunc_ln28_44_fu_1153_p4 <= mul_ln28_46_fu_1806_p2(29 downto 14);
    trunc_ln28_49_fu_1239_p4 <= mul_ln28_51_fu_1824_p2(29 downto 14);
    trunc_ln28_50_fu_1252_p4 <= mul_ln28_52_fu_1830_p2(29 downto 14);
    trunc_ln28_52_fu_1352_p4 <= mul_ln28_54_fu_1851_p2(29 downto 14);
    trunc_ln28_53_fu_1365_p4 <= mul_ln28_55_fu_1856_p2(29 downto 14);
    trunc_ln28_58_fu_1425_p4 <= mul_ln28_60_fu_1873_p2(29 downto 14);
    trunc_ln28_59_fu_1438_p4 <= mul_ln28_61_fu_1878_p2(29 downto 14);
    trunc_ln28_60_fu_1492_p4 <= mul_ln28_62_fu_1884_p2(29 downto 14);
    trunc_ln28_61_fu_1568_p4 <= mul_ln28_63_fu_1899_p2(29 downto 14);
    trunc_ln28_62_fu_1581_p4 <= mul_ln28_64_fu_1905_p2(29 downto 14);
    trunc_ln28_67_fu_1665_p4 <= mul_ln28_69_fu_1923_p2(29 downto 14);
    trunc_ln28_68_fu_1678_p4 <= mul_ln28_70_fu_1929_p2(29 downto 14);
    trunc_ln28_fu_546_p1 <= out_d_0_reg_424(3 - 1 downto 0);
    trunc_ln28_s_fu_893_p4 <= mul_ln28_36_fu_1729_p2(29 downto 14);
    zext_ln19_cast_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),12));
    zext_ln23_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_424),64));
    zext_ln28_16_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_558_p2),64));
    zext_ln28_17_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_72_fu_573_p2),64));
    zext_ln28_18_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_73_fu_584_p2),64));
    zext_ln28_19_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_74_fu_595_p2),64));
    zext_ln28_20_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_75_fu_606_p2),64));
    zext_ln28_21_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_76_fu_617_p2),64));
    zext_ln28_22_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_77_fu_628_p2),64));
    zext_ln28_23_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_78_fu_639_p2),64));
    zext_ln28_24_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_79_fu_650_p2),64));
    zext_ln28_3_cast_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_459),7));
    zext_ln28_40_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_424),6));
    zext_ln28_41_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_558_p2),7));
    zext_ln28_42_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_0_reg_470),17));
    zext_ln28_43_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_80_fu_761_p2),64));
    zext_ln28_44_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_fu_771_p2),17));
    zext_ln28_45_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_81_fu_781_p2),64));
    zext_ln28_46_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_3_fu_791_p2),17));
    zext_ln28_47_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_82_fu_801_p2),64));
    zext_ln28_48_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_83_fu_816_p2),64));
    zext_ln28_49_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_84_fu_825_p2),64));
    zext_ln28_50_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_85_fu_834_p2),64));
    zext_ln28_51_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_86_fu_843_p2),64));
    zext_ln28_52_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_87_fu_852_p2),64));
    zext_ln28_53_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_88_fu_861_p2),64));
    zext_ln28_54_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_99_fu_1084_p2),64));
    zext_ln28_55_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_4_fu_1094_p2),17));
    zext_ln28_56_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_100_fu_1104_p2),64));
    zext_ln28_57_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_101_fu_1162_p2),64));
    zext_ln28_58_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_102_fu_1171_p2),64));
    zext_ln28_59_fu_1195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_103_fu_1191_p2),64));
    zext_ln28_60_fu_1204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_104_fu_1200_p2),64));
    zext_ln28_61_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_115_fu_1320_p2),64));
    zext_ln28_62_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_116_fu_1374_p2),64));
    zext_ln28_63_fu_1387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_117_fu_1383_p2),64));
    zext_ln28_64_fu_1511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_128_fu_1506_p2),64));
    zext_ln28_65_fu_1526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_130_fu_1521_p2),64));
    zext_ln28_66_fu_1594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_131_fu_1590_p2),64));
    zext_ln28_67_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_132_fu_1599_p2),64));
    zext_ln28_68_fu_1653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_133_reg_2580),64));
    zext_ln28_69_fu_1657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_134_reg_2585),64));
    zext_ln28_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln36_5_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
    zext_ln36_6_fu_1065_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_1061_p2),64));
    zext_ln36_7_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_1297_p2),64));
    zext_ln36_8_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_2_fu_1483_p2),64));
    zext_ln36_9_fu_1718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_3_reg_2560),64));
    zext_ln36_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),13));
end behav;
