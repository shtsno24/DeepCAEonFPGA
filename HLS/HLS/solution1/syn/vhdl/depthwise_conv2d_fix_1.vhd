-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten48_reg_298 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_d_0_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_345 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_356 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln23_reg_1174 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_1174_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_361 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln40_fu_366_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_reg_1118 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_1_cast14_fu_370_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_cast14_reg_1124 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_fu_374_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_reg_1131 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_1_cast_fu_378_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_1_cast_reg_1137 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_382_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1142 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_398_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln4_reg_1147 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_404_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_1152 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1157 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln40_fu_444_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_reg_1162 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_fu_449_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_reg_1168 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln23_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1174_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_459_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1178 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln32_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1184 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_8_fu_492_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln24_8_reg_1197 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_0_0_fu_504_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_reg_1203 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_fu_509_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_reg_1208 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_fu_514_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_reg_1213 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln24_fu_520_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_reg_1218 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_19_fu_534_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln24_19_reg_1228 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_8_fu_537_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_8_reg_1238 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_9_fu_543_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_9_reg_1243 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_18_fu_549_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_18_reg_1248 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_2_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_2_reg_1254 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_14_fu_564_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_14_reg_1260 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_570_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_1267 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_fu_581_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_reg_1273 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln32_2_fu_589_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_2_reg_1280 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_load_reg_1285 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_fu_595_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_reg_1290 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_10_fu_608_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_10_reg_1305 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_v_v_fu_642_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_v_v_reg_1310 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_v_v_fu_649_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_v_v_reg_1316 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid2_v_v_fu_661_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid2_v_v_reg_1321 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_load_10_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_11_reg_1336 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_11_fu_676_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_11_reg_1346 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_12_fu_681_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_12_reg_1351 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_689_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid2_reg_1356 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_fu_697_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_reg_1363 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_v_v_fu_702_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_v_v_reg_1370 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_13_fu_707_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln40_13_reg_1375 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_load_9_reg_1380 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_12_reg_1385 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_13_fu_720_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_13_reg_1400 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_14_fu_725_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_14_reg_1405 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_9_fu_730_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_9_reg_1410 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp10_2_0_mid2_fu_739_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_reg_1416 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_fu_744_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_reg_1423 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_757_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_1435 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_17_fu_762_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_17_reg_1441 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_14_fu_775_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_14_reg_1452 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_load_13_reg_1457 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_14_reg_1462 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_fu_792_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_reg_1477 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_15_fu_797_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_15_reg_1482 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1058_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1498 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1498_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_load_15_reg_1503 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_16_reg_1508 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_9_fu_1064_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_9_reg_1518 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_11_fu_1070_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_11_reg_1523 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln40_18_fu_855_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_18_reg_1538 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_19_fu_859_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_19_reg_1543 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_20_fu_863_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_20_reg_1548 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln40_10_fu_1076_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_10_reg_1553 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln48_s_reg_1558 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_12_fu_1082_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_12_reg_1563 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_9_fu_907_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_9_reg_1578 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_9_reg_1583 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_13_fu_1088_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_13_reg_1588 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_14_fu_1094_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_14_reg_1593 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_10_fu_949_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_10_reg_1603 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_15_fu_1100_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_15_reg_1608 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_16_fu_1106_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_16_reg_1613 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_12_fu_990_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_12_reg_1618 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_13_fu_995_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_13_reg_1623 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_3_reg_1628 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_4_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_17_fu_1112_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_17_reg_1638 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_15_fu_1040_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_15_reg_1643 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_17_fu_1049_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_17_reg_1648 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten48_phi_fu_302_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_314_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_326_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_338_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_349_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_11_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_12_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_10_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_13_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_14_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_15_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_14_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_18_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_16_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_17_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_16_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_19_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_18_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_20_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_21_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_22_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_23_fu_903_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_24_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_59_fu_386_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_398_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_398_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln27_fu_426_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_fu_422_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_430_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_fu_444_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_2_fu_418_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_fu_444_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln48_fu_449_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln48_fu_449_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_2_fu_474_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_4_fu_470_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln27_mid1_fu_478_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_2_fu_486_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln40_2_cast_fu_500_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_18_fu_549_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_4_fu_527_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_18_fu_549_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln48_2_fu_554_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln48_2_fu_554_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_2_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_61_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln40_2_cast_mid_fu_633_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_10_fu_613_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_mid1_fu_636_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_12_fu_623_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_11_fu_618_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_mid1_fu_655_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_13_fu_628_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_689_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_0_0_mid2_fu_689_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_697_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_1_0_mid2_fu_697_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_fu_739_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_2_0_mid2_fu_739_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_fu_747_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_14_fu_765_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_12_fu_800_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_15_fu_810_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_16_fu_837_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_17_fu_846_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln_fu_873_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_8_fu_928_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_11_fu_986_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_2_fu_969_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_1_fu_960_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_5_fu_1026_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_14_fu_1035_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_16_fu_1045_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1058_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1058_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1058_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1058_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln4_fu_398_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln4_fu_398_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_0_0_mid2_fu_689_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_fu_697_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_739_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mac_muladd_5ns_7ns_4ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mac_muladd_5ns_7ns_4ns_11_1_1_U68 : component network_mac_muladd_5ns_7ns_4ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1058_p0,
        din1 => grp_fu_1058_p1,
        din2 => grp_fu_1058_p2,
        dout => grp_fu_1058_p3);

    network_mul_mul_16s_16s_30_1_1_U69 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_reg_1285,
        dout => mul_ln40_9_fu_1064_p2);

    network_mul_mul_16s_16s_30_1_1_U70 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_361,
        din1 => kernel_load_10_reg_1331,
        dout => mul_ln40_11_fu_1070_p2);

    network_mul_mul_16s_16s_30_1_1_U71 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_9_reg_1380,
        dout => mul_ln40_10_fu_1076_p2);

    network_mul_mul_16s_16s_30_1_1_U72 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_361,
        din1 => kernel_load_11_reg_1336,
        dout => mul_ln40_12_fu_1082_p2);

    network_mul_mul_16s_16s_30_1_1_U73 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_12_reg_1385,
        dout => mul_ln40_13_fu_1088_p2);

    network_mul_mul_16s_16s_30_1_1_U74 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_361,
        din1 => kernel_load_13_reg_1457,
        dout => mul_ln40_14_fu_1094_p2);

    network_mul_mul_16s_16s_30_1_1_U75 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_14_reg_1462,
        dout => mul_ln40_15_fu_1100_p2);

    network_mul_mul_16s_16s_30_1_1_U76 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_361,
        din1 => kernel_load_15_reg_1503,
        dout => mul_ln40_16_fu_1106_p2);

    network_mul_mul_16s_16s_30_1_1_U77 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_356,
        din1 => kernel_load_16_reg_1508,
        dout => mul_ln40_17_fu_1112_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten48_reg_298 <= add_ln23_reg_1213;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten48_reg_298 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_322 <= select_ln32_14_reg_1452;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_322 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_d_0_reg_310 <= select_ln24_9_reg_1410;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_310 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                out_h_0_reg_334 <= select_ln32_reg_1477;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_334 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                out_w_0_reg_345 <= out_w_reg_1435;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_345 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
                reg_356 <= input_r_q0;
            elsif (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_356 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
                reg_361 <= input_r_q1;
            elsif (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                reg_361 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln23_reg_1213 <= add_ln23_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln24_10_reg_1305 <= add_ln24_10_fu_608_p2;
                add_ln24_reg_1290 <= add_ln24_fu_595_p2;
                tmp10_0_0_mid2_v_v_reg_1310 <= tmp10_0_0_mid2_v_v_fu_642_p3;
                tmp10_1_0_mid2_v_v_reg_1316 <= tmp10_1_0_mid2_v_v_fu_649_p2;
                tmp12_mid2_v_v_reg_1321 <= tmp12_mid2_v_v_fu_661_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln24_11_reg_1346 <= add_ln24_11_fu_676_p2;
                add_ln24_12_reg_1351 <= add_ln24_12_fu_681_p2;
                add_ln40_13_reg_1375 <= add_ln40_13_fu_707_p2;
                tmp10_0_0_mid2_reg_1356 <= tmp10_0_0_mid2_fu_689_p2;
                tmp10_1_0_mid2_reg_1363 <= tmp10_1_0_mid2_fu_697_p2;
                tmp10_2_0_mid2_v_v_reg_1370 <= tmp10_2_0_mid2_v_v_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln24_13_reg_1400 <= add_ln24_13_fu_720_p2;
                add_ln24_14_reg_1405 <= add_ln24_14_fu_725_p2;
                tmp10_2_0_mid2_reg_1416 <= tmp10_2_0_mid2_fu_739_p2;
                    zext_ln40_13_reg_1423(3 downto 0) <= zext_ln40_13_fu_744_p1(3 downto 0);
                    zext_ln40_17_reg_1441(3 downto 0) <= zext_ln40_17_fu_762_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln24_8_reg_1238 <= add_ln24_8_fu_537_p2;
                add_ln24_9_reg_1243 <= add_ln24_9_fu_543_p2;
                mul_ln40_18_reg_1248 <= mul_ln40_18_fu_549_p2;
                mul_ln48_2_reg_1254 <= mul_ln48_2_fu_554_p2;
                out_h_reg_1267 <= out_h_fu_570_p2;
                out_w_0_mid2_reg_1273 <= out_w_0_mid2_fu_581_p3;
                select_ln24_14_reg_1260 <= select_ln24_14_fu_564_p3;
                select_ln24_reg_1218 <= select_ln24_fu_520_p3;
                    zext_ln24_19_reg_1228(5 downto 0) <= zext_ln24_19_fu_534_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1184 = ap_const_lv1_0) and (icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln32_2_reg_1280 <= add_ln32_2_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln40_18_reg_1538 <= add_ln40_18_fu_855_p2;
                add_ln40_19_reg_1543 <= add_ln40_19_fu_859_p2;
                add_ln40_20_reg_1548 <= add_ln40_20_fu_863_p2;
                mul_ln40_11_reg_1523 <= mul_ln40_11_fu_1070_p2;
                mul_ln40_9_reg_1518 <= mul_ln40_9_fu_1064_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln48_10_reg_1603 <= add_ln48_10_fu_949_p2;
                mul_ln40_13_reg_1588 <= mul_ln40_13_fu_1088_p2;
                mul_ln40_14_reg_1593 <= mul_ln40_14_fu_1094_p2;
                trunc_ln48_9_reg_1583 <= mul_ln40_10_reg_1553(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln48_12_reg_1618 <= add_ln48_12_fu_990_p2;
                add_ln48_13_reg_1623 <= add_ln48_13_fu_995_p2;
                mul_ln40_15_reg_1608 <= mul_ln40_15_fu_1100_p2;
                mul_ln40_16_reg_1613 <= mul_ln40_16_fu_1106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln48_15_reg_1643 <= add_ln48_15_fu_1040_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln48_17_reg_1648 <= add_ln48_17_fu_1049_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln48_9_reg_1578 <= add_ln48_9_fu_907_p2;
                mul_ln40_10_reg_1553 <= mul_ln40_10_fu_1076_p2;
                mul_ln40_12_reg_1563 <= mul_ln40_12_fu_1082_p2;
                trunc_ln48_s_reg_1558 <= mul_ln40_11_reg_1523(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln48_reg_1498 <= grp_fu_1058_p3;
                kernel_load_13_reg_1457 <= kernel_q1;
                kernel_load_14_reg_1462 <= kernel_q0;
                select_ln32_reg_1477 <= select_ln32_fu_792_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln48_reg_1498_pp0_iter2_reg <= add_ln48_reg_1498;
                icmp_ln23_reg_1174 <= icmp_ln23_fu_454_p2;
                icmp_ln23_reg_1174_pp0_iter1_reg <= icmp_ln23_reg_1174;
                icmp_ln23_reg_1174_pp0_iter2_reg <= icmp_ln23_reg_1174_pp0_iter1_reg;
                mul_ln40_reg_1162 <= mul_ln40_fu_444_p2;
                mul_ln48_reg_1168 <= mul_ln48_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1142 <= empty_fu_382_p1;
                icmp_ln33_reg_1157 <= icmp_ln33_fu_412_p2;
                mul_ln4_reg_1147 <= mul_ln4_fu_398_p2;
                    tmp_2_reg_1152(10 downto 3) <= tmp_2_fu_404_p3(10 downto 3);
                    zext_ln40_1_cast14_reg_1124(5 downto 0) <= zext_ln40_1_cast14_fu_370_p1(5 downto 0);
                    zext_ln40_reg_1118(5 downto 0) <= zext_ln40_fu_366_p1(5 downto 0);
                    zext_ln48_1_cast_reg_1137(4 downto 0) <= zext_ln48_1_cast_fu_378_p1(4 downto 0);
                    zext_ln48_reg_1131(4 downto 0) <= zext_ln48_fu_374_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_454_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln32_reg_1184 <= icmp_ln32_fu_465_p2;
                out_d_reg_1178 <= out_d_fu_459_p2;
                select_ln24_8_reg_1197 <= select_ln24_8_fu_492_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                kernel_load_10_reg_1331 <= kernel_q1;
                kernel_load_11_reg_1336 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                kernel_load_12_reg_1385 <= kernel_q0;
                kernel_load_9_reg_1380 <= kernel_q1;
                out_w_reg_1435 <= out_w_fu_757_p2;
                select_ln24_9_reg_1410 <= select_ln24_9_fu_730_p3;
                select_ln32_14_reg_1452 <= select_ln32_14_fu_775_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                kernel_load_15_reg_1503 <= kernel_q0;
                kernel_load_16_reg_1508 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                kernel_load_reg_1285 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln40_17_reg_1638 <= mul_ln40_17_fu_1112_p2;
                trunc_ln48_3_reg_1628 <= mul_ln40_15_reg_1608(29 downto 14);
                trunc_ln48_4_reg_1633 <= mul_ln40_16_reg_1613(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1184 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp11_reg_1208 <= tmp11_fu_509_p2;
                tmp_0_0_reg_1203 <= tmp_0_0_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln40_15_reg_1482(3 downto 0) <= zext_ln40_15_fu_797_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln40_reg_1118(6) <= '0';
    zext_ln40_1_cast14_reg_1124(10 downto 6) <= "00000";
    zext_ln48_reg_1131(6 downto 5) <= "00";
    zext_ln48_1_cast_reg_1137(10 downto 5) <= "000000";
    tmp_2_reg_1152(2 downto 0) <= "000";
    zext_ln24_19_reg_1228(6) <= '0';
    zext_ln40_13_reg_1423(10 downto 4) <= "0000000";
    zext_ln40_17_reg_1441(10 downto 4) <= "0000000";
    zext_ln40_15_reg_1482(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1174, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((icmp_ln23_reg_1174 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((icmp_ln23_reg_1174 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln23_fu_514_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten48_reg_298));
    add_ln24_10_fu_608_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(zext_ln24_19_reg_1228));
    add_ln24_11_fu_676_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(zext_ln24_19_reg_1228));
    add_ln24_12_fu_681_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) + unsigned(zext_ln24_19_reg_1228));
    add_ln24_13_fu_720_p2 <= std_logic_vector(unsigned(ap_const_lv7_7) + unsigned(zext_ln24_19_reg_1228));
    add_ln24_14_fu_725_p2 <= std_logic_vector(unsigned(ap_const_lv7_8) + unsigned(zext_ln24_19_reg_1228));
    add_ln24_8_fu_537_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(zext_ln24_19_fu_534_p1));
    add_ln24_9_fu_543_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(zext_ln24_19_fu_534_p1));
    add_ln24_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(zext_ln24_19_reg_1228));
    add_ln27_2_fu_486_p2 <= std_logic_vector(unsigned(zext_ln27_4_fu_470_p1) + unsigned(shl_ln27_mid1_fu_478_p3));
    add_ln27_fu_438_p2 <= std_logic_vector(unsigned(zext_ln27_fu_422_p1) + unsigned(shl_ln_fu_430_p3));
    add_ln32_2_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_322));
    add_ln40_12_fu_800_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1356) + unsigned(zext_ln40_15_fu_797_p1));
    add_ln40_13_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(out_w_0_mid2_reg_1273));
    add_ln40_14_fu_765_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1356) + unsigned(zext_ln40_17_fu_762_p1));
    add_ln40_15_fu_810_p2 <= std_logic_vector(unsigned(zext_ln40_13_reg_1423) + unsigned(tmp10_1_0_mid2_reg_1363));
    add_ln40_16_fu_837_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1363) + unsigned(zext_ln40_15_reg_1482));
    add_ln40_17_fu_846_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1363) + unsigned(zext_ln40_17_reg_1441));
    add_ln40_18_fu_855_p2 <= std_logic_vector(unsigned(zext_ln40_13_reg_1423) + unsigned(tmp10_2_0_mid2_reg_1416));
    add_ln40_19_fu_859_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1416) + unsigned(zext_ln40_15_reg_1482));
    add_ln40_20_fu_863_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1416) + unsigned(zext_ln40_17_reg_1441));
    add_ln40_fu_747_p2 <= std_logic_vector(unsigned(zext_ln40_13_fu_744_p1) + unsigned(tmp10_0_0_mid2_reg_1356));
    add_ln48_10_fu_949_p2 <= std_logic_vector(unsigned(trunc_ln48_8_fu_928_p4) + unsigned(trunc_ln48_s_reg_1558));
    add_ln48_11_fu_986_p2 <= std_logic_vector(unsigned(trunc_ln48_9_reg_1583) + unsigned(add_ln48_10_reg_1603));
    add_ln48_12_fu_990_p2 <= std_logic_vector(unsigned(add_ln48_9_reg_1578) + unsigned(add_ln48_11_fu_986_p2));
    add_ln48_13_fu_995_p2 <= std_logic_vector(unsigned(trunc_ln48_2_fu_969_p4) + unsigned(trunc_ln48_1_fu_960_p4));
    add_ln48_14_fu_1035_p2 <= std_logic_vector(unsigned(trunc_ln48_5_fu_1026_p4) + unsigned(trunc_ln48_4_reg_1633));
    add_ln48_15_fu_1040_p2 <= std_logic_vector(unsigned(trunc_ln48_3_reg_1628) + unsigned(add_ln48_14_fu_1035_p2));
    add_ln48_16_fu_1045_p2 <= std_logic_vector(unsigned(add_ln48_13_reg_1623) + unsigned(add_ln48_15_reg_1643));
    add_ln48_17_fu_1049_p2 <= std_logic_vector(unsigned(add_ln48_12_reg_1618) + unsigned(add_ln48_16_fu_1045_p2));
    add_ln48_9_fu_907_p2 <= std_logic_vector(unsigned(trunc_ln_fu_873_p4) + unsigned(bias_q0));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln23_reg_1174)
    begin
        if ((icmp_ln23_reg_1174 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten48_phi_fu_302_p4_assign_proc : process(indvar_flatten48_reg_298, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1174, add_ln23_reg_1213, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten48_phi_fu_302_p4 <= add_ln23_reg_1213;
        else 
            ap_phi_mux_indvar_flatten48_phi_fu_302_p4 <= indvar_flatten48_reg_298;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_326_p4_assign_proc : process(indvar_flatten_reg_322, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1174, select_ln32_14_reg_1452, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_326_p4 <= select_ln32_14_reg_1452;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_326_p4 <= indvar_flatten_reg_322;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_314_p4_assign_proc : process(out_d_0_reg_310, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1174, select_ln24_9_reg_1410, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1174 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_314_p4 <= select_ln24_9_reg_1410;
        else 
            ap_phi_mux_out_d_0_phi_fu_314_p4 <= out_d_0_reg_310;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_338_p4_assign_proc : process(out_h_0_reg_334, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln23_reg_1174_pp0_iter1_reg, select_ln32_reg_1477, ap_block_pp0_stage1)
    begin
        if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_out_h_0_phi_fu_338_p4 <= select_ln32_reg_1477;
        else 
            ap_phi_mux_out_h_0_phi_fu_338_p4 <= out_h_0_reg_334;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_349_p4_assign_proc : process(out_w_0_reg_345, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln23_reg_1174_pp0_iter1_reg, out_w_reg_1435, ap_block_pp0_stage1)
    begin
        if (((icmp_ln23_reg_1174_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_out_w_0_phi_fu_349_p4 <= out_w_reg_1435;
        else 
            ap_phi_mux_out_w_0_phi_fu_349_p4 <= out_w_0_reg_345;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln24_18_fu_825_p1(3 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_59_fu_386_p1 <= output_height(4 - 1 downto 0);
    empty_61_fu_576_p2 <= (select_ln24_14_fu_564_p3 or icmp_ln32_reg_1184);
    empty_fu_382_p1 <= output_width(4 - 1 downto 0);
    grp_fu_1058_p0 <= zext_ln48_1_cast_reg_1137(5 - 1 downto 0);
    grp_fu_1058_p1 <= grp_fu_1058_p10(7 - 1 downto 0);
    grp_fu_1058_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_mid2_v_v_reg_1321),11));
    grp_fu_1058_p2 <= zext_ln40_13_reg_1423(4 - 1 downto 0);
    icmp_ln23_fu_454_p2 <= "1" when (ap_phi_mux_indvar_flatten48_phi_fu_302_p4 = tmp_2_reg_1152) else "0";
    icmp_ln32_fu_465_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_326_p4 = mul_ln4_reg_1147) else "0";
    icmp_ln33_2_fu_559_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_349_p4 = empty_reg_1142) else "0";
    icmp_ln33_fu_412_p2 <= "1" when (empty_fu_382_p1 = ap_const_lv4_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, zext_ln40_18_fu_770_p1, zext_ln40_16_fu_805_p1, zext_ln40_20_fu_841_p1, zext_ln40_22_fu_899_p1, zext_ln40_24_fu_945_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln40_24_fu_945_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln40_22_fu_899_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_20_fu_841_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln40_16_fu_805_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln40_18_fu_770_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, zext_ln40_14_fu_752_p1, zext_ln40_19_fu_814_p1, zext_ln40_21_fu_850_p1, zext_ln40_23_fu_903_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln40_23_fu_903_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln40_21_fu_850_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln40_19_fu_814_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address1 <= zext_ln40_14_fu_752_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln24_fu_530_p1, ap_block_pp0_stage2, zext_ln24_12_fu_604_p1, ap_block_pp0_stage3, zext_ln24_13_fu_672_p1, ap_block_pp0_stage4, zext_ln24_15_fu_716_p1, zext_ln24_16_fu_781_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_address0 <= zext_ln24_16_fu_781_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            kernel_address0 <= zext_ln24_15_fu_716_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            kernel_address0 <= zext_ln24_13_fu_672_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            kernel_address0 <= zext_ln24_12_fu_604_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_address0 <= zext_ln24_fu_530_p1(7 - 1 downto 0);
        else 
            kernel_address0 <= "XXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln24_11_fu_600_p1, ap_block_pp0_stage2, zext_ln24_10_fu_668_p1, ap_block_pp0_stage3, zext_ln24_14_fu_712_p1, ap_block_pp0_stage4, zext_ln24_17_fu_785_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_address1 <= zext_ln24_17_fu_785_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            kernel_address1 <= zext_ln24_14_fu_712_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            kernel_address1 <= zext_ln24_10_fu_668_p1(7 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            kernel_address1 <= zext_ln24_11_fu_600_p1(7 - 1 downto 0);
        else 
            kernel_address1 <= "XXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln40_18_fu_549_p0 <= zext_ln48_4_fu_527_p1(4 - 1 downto 0);
    mul_ln40_18_fu_549_p1 <= zext_ln40_reg_1118(6 - 1 downto 0);
    mul_ln40_18_fu_549_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_18_fu_549_p0) * unsigned(mul_ln40_18_fu_549_p1), 7));
    mul_ln40_fu_444_p0 <= zext_ln48_2_fu_418_p1(4 - 1 downto 0);
    mul_ln40_fu_444_p1 <= zext_ln40_reg_1118(6 - 1 downto 0);
    mul_ln40_fu_444_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_fu_444_p0) * unsigned(mul_ln40_fu_444_p1), 7));
    mul_ln48_2_fu_554_p0 <= zext_ln48_4_fu_527_p1(4 - 1 downto 0);
    mul_ln48_2_fu_554_p1 <= zext_ln48_reg_1131(5 - 1 downto 0);
    mul_ln48_2_fu_554_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_2_fu_554_p0) * unsigned(mul_ln48_2_fu_554_p1), 7));
    mul_ln48_fu_449_p0 <= zext_ln48_2_fu_418_p1(4 - 1 downto 0);
    mul_ln48_fu_449_p1 <= zext_ln48_reg_1131(5 - 1 downto 0);
    mul_ln48_fu_449_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_fu_449_p0) * unsigned(mul_ln48_fu_449_p1), 7));
    mul_ln4_fu_398_p0 <= mul_ln4_fu_398_p00(4 - 1 downto 0);
    mul_ln4_fu_398_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_59_fu_386_p1),8));
    mul_ln4_fu_398_p1 <= mul_ln4_fu_398_p10(4 - 1 downto 0);
    mul_ln4_fu_398_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_382_p1),8));
    mul_ln4_fu_398_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln4_fu_398_p0) * unsigned(mul_ln4_fu_398_p1), 8));
    out_d_fu_459_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4));
    out_h_fu_570_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln24_fu_520_p3));
    out_w_0_mid2_fu_581_p3 <= 
        ap_const_lv4_0 when (empty_61_fu_576_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_349_p4;
    out_w_fu_757_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(out_w_0_mid2_reg_1273));
    output_r_address0 <= zext_ln48_3_fu_1054_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln48_17_reg_1648;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, icmp_ln23_reg_1174_pp0_iter2_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln23_reg_1174_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_10_fu_613_p3 <= 
        mul_ln40_18_reg_1248 when (icmp_ln32_reg_1184(0) = '1') else 
        mul_ln40_reg_1162;
    select_ln24_11_fu_618_p3 <= 
        mul_ln48_2_reg_1254 when (icmp_ln32_reg_1184(0) = '1') else 
        mul_ln48_reg_1168;
    select_ln24_12_fu_623_p3 <= 
        mul_ln40_18_reg_1248 when (icmp_ln32_reg_1184(0) = '1') else 
        tmp_0_0_reg_1203;
    select_ln24_13_fu_628_p3 <= 
        mul_ln48_2_reg_1254 when (icmp_ln32_reg_1184(0) = '1') else 
        tmp11_reg_1208;
    select_ln24_14_fu_564_p3 <= 
        icmp_ln33_reg_1157 when (icmp_ln32_reg_1184(0) = '1') else 
        icmp_ln33_2_fu_559_p2;
    select_ln24_8_fu_492_p3 <= 
        add_ln27_2_fu_486_p2 when (icmp_ln32_fu_465_p2(0) = '1') else 
        add_ln27_fu_438_p2;
    select_ln24_9_fu_730_p3 <= 
        out_d_reg_1178 when (icmp_ln32_reg_1184(0) = '1') else 
        out_d_0_reg_310;
    select_ln24_fu_520_p3 <= 
        ap_const_lv4_0 when (icmp_ln32_reg_1184(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_338_p4;
    select_ln32_14_fu_775_p3 <= 
        ap_const_lv8_1 when (icmp_ln32_reg_1184(0) = '1') else 
        add_ln32_2_reg_1280;
    select_ln32_fu_792_p3 <= 
        out_h_reg_1267 when (select_ln24_14_reg_1260(0) = '1') else 
        select_ln24_reg_1218;
    shl_ln27_mid1_fu_478_p3 <= (trunc_ln27_2_fu_474_p1 & ap_const_lv3_0);
    shl_ln_fu_430_p3 <= (trunc_ln27_fu_426_p1 & ap_const_lv3_0);
    tmp10_0_0_mid2_fu_689_p0 <= zext_ln40_1_cast14_reg_1124(6 - 1 downto 0);
    tmp10_0_0_mid2_fu_689_p1 <= tmp10_0_0_mid2_fu_689_p10(7 - 1 downto 0);
    tmp10_0_0_mid2_fu_689_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_reg_1310),11));
    tmp10_0_0_mid2_fu_689_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_fu_689_p0) * unsigned(tmp10_0_0_mid2_fu_689_p1), 11));
    tmp10_0_0_mid2_v_v_fu_642_p3 <= 
        tmp_0_0_mid1_fu_636_p2 when (select_ln24_14_reg_1260(0) = '1') else 
        select_ln24_12_fu_623_p3;
    tmp10_1_0_mid2_fu_697_p0 <= zext_ln40_1_cast14_reg_1124(6 - 1 downto 0);
    tmp10_1_0_mid2_fu_697_p1 <= tmp10_1_0_mid2_fu_697_p10(7 - 1 downto 0);
    tmp10_1_0_mid2_fu_697_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_v_v_reg_1316),11));
    tmp10_1_0_mid2_fu_697_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_fu_697_p0) * unsigned(tmp10_1_0_mid2_fu_697_p1), 11));
    tmp10_1_0_mid2_v_v_fu_649_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp10_0_0_mid2_v_v_fu_642_p3));
    tmp10_2_0_mid2_fu_739_p0 <= zext_ln40_1_cast14_reg_1124(6 - 1 downto 0);
    tmp10_2_0_mid2_fu_739_p1 <= tmp10_2_0_mid2_fu_739_p10(7 - 1 downto 0);
    tmp10_2_0_mid2_fu_739_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_v_v_reg_1370),11));
    tmp10_2_0_mid2_fu_739_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_fu_739_p0) * unsigned(tmp10_2_0_mid2_fu_739_p1), 11));
    tmp10_2_0_mid2_v_v_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(tmp10_0_0_mid2_v_v_reg_1310));
    tmp11_fu_509_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_fu_500_p1) + unsigned(mul_ln48_reg_1168));
    tmp11_mid1_fu_655_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_fu_633_p1) + unsigned(select_ln24_11_fu_618_p3));
    tmp12_mid2_v_v_fu_661_p3 <= 
        tmp11_mid1_fu_655_p2 when (select_ln24_14_reg_1260(0) = '1') else 
        select_ln24_13_fu_628_p3;
    tmp_0_0_fu_504_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_fu_500_p1) + unsigned(mul_ln40_reg_1162));
    tmp_0_0_mid1_fu_636_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_fu_633_p1) + unsigned(select_ln24_10_fu_613_p3));
    tmp_2_fu_404_p3 <= (mul_ln4_fu_398_p2 & ap_const_lv3_0);
    trunc_ln27_2_fu_474_p1 <= out_d_fu_459_p2(3 - 1 downto 0);
    trunc_ln27_fu_426_p1 <= ap_phi_mux_out_d_0_phi_fu_314_p4(3 - 1 downto 0);
    trunc_ln48_1_fu_960_p4 <= mul_ln40_13_reg_1588(29 downto 14);
    trunc_ln48_2_fu_969_p4 <= mul_ln40_14_reg_1593(29 downto 14);
    trunc_ln48_5_fu_1026_p4 <= mul_ln40_17_reg_1638(29 downto 14);
    trunc_ln48_8_fu_928_p4 <= mul_ln40_12_reg_1563(29 downto 14);
    trunc_ln_fu_873_p4 <= mul_ln40_9_reg_1518(29 downto 14);
    zext_ln24_10_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_reg_1290),64));
    zext_ln24_11_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_8_reg_1238),64));
    zext_ln24_12_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_9_reg_1243),64));
    zext_ln24_13_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_10_reg_1305),64));
    zext_ln24_14_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_11_reg_1346),64));
    zext_ln24_15_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_12_reg_1351),64));
    zext_ln24_16_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_13_reg_1400),64));
    zext_ln24_17_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_14_reg_1405),64));
    zext_ln24_18_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_9_reg_1410),64));
    zext_ln24_19_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_8_reg_1197),7));
    zext_ln24_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_8_reg_1197),64));
    zext_ln27_4_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_459_p2),6));
    zext_ln27_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),6));
    zext_ln40_13_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1273),11));
    zext_ln40_14_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_747_p2),64));
    zext_ln40_15_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_1435),11));
    zext_ln40_16_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_12_fu_800_p2),64));
    zext_ln40_17_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_13_reg_1375),11));
    zext_ln40_18_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_14_fu_765_p2),64));
    zext_ln40_19_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_15_fu_810_p2),64));
    zext_ln40_1_cast14_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln40_20_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_16_fu_837_p2),64));
    zext_ln40_21_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_17_fu_846_p2),64));
    zext_ln40_22_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_18_reg_1538),64));
    zext_ln40_23_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_19_reg_1543),64));
    zext_ln40_24_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_20_reg_1548),64));
    zext_ln40_2_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_338_p4),7));
    zext_ln40_2_cast_mid_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_1267),7));
    zext_ln40_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln48_1_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln48_2_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),7));
    zext_ln48_3_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1498_pp0_iter2_reg),64));
    zext_ln48_4_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_1178),7));
    zext_ln48_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
end behav;
