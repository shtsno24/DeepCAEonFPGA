-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln37_fu_280_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln37_reg_595 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln37_6_cast_fu_284_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln37_6_cast_reg_600 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln45_fu_288_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln45_reg_605 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln45_1_cast_fu_292_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln45_1_cast_reg_610 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_65_fu_296_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_65_reg_615 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_66_fu_300_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_66_reg_620 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_fu_304_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_reg_625 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln22_3_fu_309_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_3_reg_630 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_d_fu_320_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_638 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_338_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_4_reg_643 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln22_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_348_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_651 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln24_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_6_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_6_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_h_fu_393_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_674 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp8_fu_413_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp8_reg_679 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln31_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_423_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_687 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln35_fu_429_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_reg_692 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln32_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_h_fu_439_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_h_reg_700 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln37_fu_465_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln37_reg_705 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln35_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_491_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_reg_710 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_w_fu_516_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_reg_718 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln36_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_5_fu_550_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_5_reg_728 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_load_reg_733 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln_reg_743 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buffer_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal empty_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_ce0 : STD_LOGIC;
    signal empty_we0 : STD_LOGIC;
    signal empty_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_0_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_176 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul2_reg_188 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_h_0_reg_212 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_224 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_0_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_h_0_reg_246 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_1_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_w_0_reg_269 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln26_5_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_2_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_21_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_11_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_fu_326_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_330_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_1_fu_354_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_360_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_fu_364_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln37_7_cast_fu_399_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_fu_403_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp8_fu_413_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp8_fu_413_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln5_fu_453_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln37_17_fu_461_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln37_15_fu_445_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln37_16_fu_449_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_fu_471_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_cast_fu_477_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_481_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_fu_491_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp6_fu_491_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln45_fu_501_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln37_19_fu_526_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln37_fu_530_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln37_20_fu_536_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln37_4_fu_540_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln37_18_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln37_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln37_3_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp6_fu_491_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp8_fu_413_p00 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component depthwise_conv2d_fix_2_empty IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    empty_U : component depthwise_conv2d_fix_2_empty
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_address0,
        ce0 => empty_ce0,
        we0 => empty_we0,
        d0 => kernel_0_q0,
        q0 => empty_q0);

    network_mul_mul_16s_16s_32_1_1_U42 : component network_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => empty_q0,
        din1 => input_load_reg_733,
        dout => mul_ln37_fu_588_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln36_fu_510_p2 = ap_const_lv1_1))) then 
                buffer_0_reg_236 <= buffer_1_reg_257;
            elsif (((icmp_ln32_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                buffer_0_reg_236 <= buffer_6_reg_666;
            end if; 
        end if;
    end process;

    buffer_1_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                buffer_1_reg_257 <= buffer_0_reg_236;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                buffer_1_reg_257 <= buffer_fu_582_p2;
            end if; 
        end if;
    end process;

    i_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_200 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_200 <= i_reg_651;
            end if; 
        end if;
    end process;

    k_h_0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln36_fu_510_p2 = ap_const_lv1_1))) then 
                k_h_0_reg_246 <= k_h_reg_700;
            elsif (((icmp_ln32_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k_h_0_reg_246 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_w_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                k_w_0_reg_269 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_w_0_reg_269 <= k_w_reg_718;
            end if; 
        end if;
    end process;

    out_d_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_388_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_164 <= out_d_reg_638;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_164 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln32_fu_418_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_212 <= out_h_reg_674;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_h_0_reg_212 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                out_w_0_reg_224 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_433_p2 = ap_const_lv1_1))) then 
                out_w_0_reg_224 <= out_w_reg_687;
            end if; 
        end if;
    end process;

    phi_mul2_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_388_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_188 <= add_ln22_reg_625;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_188 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_388_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_176 <= add_ln22_3_reg_630;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_176 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln22_3_reg_630 <= add_ln22_3_fu_309_p2;
                add_ln22_reg_625 <= add_ln22_fu_304_p2;
                out_d_reg_638 <= out_d_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_510_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                add_ln37_5_reg_728 <= add_ln37_5_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                buffer_6_reg_666 <= buffer_6_fu_384_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_65_reg_615 <= empty_65_fu_296_p1;
                empty_66_reg_620 <= empty_66_fu_300_p1;
                    zext_ln37_6_cast_reg_600(5 downto 0) <= zext_ln37_6_cast_fu_284_p1(5 downto 0);
                    zext_ln37_reg_595(5 downto 0) <= zext_ln37_fu_280_p1(5 downto 0);
                    zext_ln45_1_cast_reg_610(4 downto 0) <= zext_ln45_1_cast_fu_292_p1(4 downto 0);
                    zext_ln45_reg_605(4 downto 0) <= zext_ln45_fu_288_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_651 <= i_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_reg_733 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                k_h_reg_700 <= k_h_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                k_w_reg_718 <= k_w_fu_516_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_h_reg_674 <= out_h_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                out_w_reg_687 <= out_w_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_433_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                sub_ln37_reg_705 <= sub_ln37_fu_465_p2;
                tmp6_reg_710 <= tmp6_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp8_reg_679 <= tmp8_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                trunc_ln_reg_743 <= mul_ln37_fu_588_p2(31 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln26_4_reg_643(5 downto 3) <= zext_ln26_4_fu_338_p1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    zext_ln35_reg_692(3 downto 0) <= zext_ln35_fu_429_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln37_reg_595(6) <= '0';
    zext_ln37_6_cast_reg_600(10 downto 6) <= "00000";
    zext_ln45_reg_605(6 downto 5) <= "00";
    zext_ln45_1_cast_reg_610(10 downto 5) <= "000000";
    zext_ln26_4_reg_643(2 downto 0) <= "000";
    zext_ln26_4_reg_643(6) <= '0';
    zext_ln35_reg_692(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_314_p2, ap_CS_fsm_state3, icmp_ln24_fu_342_p2, ap_CS_fsm_state6, icmp_ln31_fu_388_p2, ap_CS_fsm_state7, icmp_ln32_fu_418_p2, ap_CS_fsm_state8, icmp_ln35_fu_433_p2, ap_CS_fsm_state9, icmp_ln36_fu_510_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln24_fu_342_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln31_fu_388_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln32_fu_418_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_433_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln36_fu_510_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln22_3_fu_309_p2 <= std_logic_vector(unsigned(phi_mul_reg_176) + unsigned(zext_ln37_reg_595));
    add_ln22_fu_304_p2 <= std_logic_vector(unsigned(phi_mul2_reg_188) + unsigned(zext_ln45_reg_605));
    add_ln26_1_fu_354_p2 <= std_logic_vector(unsigned(out_d_0_reg_164) + unsigned(i_0_reg_200));
    add_ln26_fu_364_p2 <= std_logic_vector(unsigned(zext_ln26_fu_360_p1) + unsigned(zext_ln26_4_reg_643));
    add_ln37_4_fu_540_p2 <= std_logic_vector(unsigned(zext_ln37_20_fu_536_p1) + unsigned(tmp6_reg_710));
    add_ln37_5_fu_550_p2 <= std_logic_vector(unsigned(sub_ln37_reg_705) + unsigned(zext_ln37_18_fu_522_p1));
    add_ln37_fu_530_p2 <= std_logic_vector(unsigned(zext_ln37_19_fu_526_p1) + unsigned(out_w_0_reg_224));
    add_ln45_fu_501_p2 <= std_logic_vector(unsigned(tmp8_reg_679) + unsigned(zext_ln35_reg_692));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_314_p2)
    begin
        if ((((icmp_ln22_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_314_p2)
    begin
        if (((icmp_ln22_fu_314_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln29_fu_374_p1(3 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        buffer_6_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_q0),32));

    buffer_fu_582_p2 <= std_logic_vector(signed(sext_ln37_3_fu_579_p1) + signed(buffer_1_reg_257));
    empty_65_fu_296_p1 <= output_width(4 - 1 downto 0);
    empty_66_fu_300_p1 <= output_height(4 - 1 downto 0);

    empty_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4, zext_ln26_3_fu_379_p1, zext_ln37_11_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            empty_address0 <= zext_ln37_11_fu_558_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            empty_address0 <= zext_ln26_3_fu_379_p1(4 - 1 downto 0);
        else 
            empty_address0 <= "XXXX";
        end if; 
    end process;


    empty_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            empty_ce0 <= ap_const_logic_1;
        else 
            empty_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    empty_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            empty_we0 <= ap_const_logic_1;
        else 
            empty_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_348_p2 <= std_logic_vector(unsigned(i_0_reg_200) + unsigned(ap_const_lv4_1));
    icmp_ln22_fu_314_p2 <= "1" when (out_d_0_reg_164 = ap_const_lv4_8) else "0";
    icmp_ln24_fu_342_p2 <= "1" when (i_0_reg_200 = ap_const_lv4_9) else "0";
    icmp_ln31_fu_388_p2 <= "1" when (out_h_0_reg_212 = empty_66_reg_620) else "0";
    icmp_ln32_fu_418_p2 <= "1" when (out_w_0_reg_224 = empty_65_reg_615) else "0";
    icmp_ln35_fu_433_p2 <= "1" when (k_h_0_reg_246 = ap_const_lv2_3) else "0";
    icmp_ln36_fu_510_p2 <= "1" when (k_w_0_reg_269 = ap_const_lv2_3) else "0";
    input_r_address0 <= zext_ln37_21_fu_545_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_h_fu_439_p2 <= std_logic_vector(unsigned(k_h_0_reg_246) + unsigned(ap_const_lv2_1));
    k_w_fu_516_p2 <= std_logic_vector(unsigned(k_w_0_reg_269) + unsigned(ap_const_lv2_1));
    kernel_0_address0 <= zext_ln26_5_fu_369_p1(7 - 1 downto 0);

    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_d_fu_320_p2 <= std_logic_vector(unsigned(out_d_0_reg_164) + unsigned(ap_const_lv4_1));
    out_h_fu_393_p2 <= std_logic_vector(unsigned(out_h_0_reg_212) + unsigned(ap_const_lv4_1));
    out_w_fu_423_p2 <= std_logic_vector(unsigned(out_w_0_reg_224) + unsigned(ap_const_lv4_1));
    output_r_address0 <= zext_ln45_2_fu_505_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer_0_reg_236(16 - 1 downto 0);

    output_r_we0_assign_proc : process(ap_CS_fsm_state8, icmp_ln35_fu_433_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln35_fu_433_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln37_3_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_743),32));

        sext_ln37_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_5_reg_728),32));

    shl_ln5_fu_453_p3 <= (k_h_0_reg_246 & ap_const_lv2_0);
    shl_ln_fu_330_p3 <= (trunc_ln26_fu_326_p1 & ap_const_lv3_0);
    sub_ln37_fu_465_p2 <= std_logic_vector(unsigned(zext_ln37_17_fu_461_p1) - unsigned(zext_ln37_15_fu_445_p1));
    tmp2_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_471_p2),7));
    tmp2_fu_471_p2 <= std_logic_vector(unsigned(zext_ln37_16_fu_449_p1) + unsigned(out_h_0_reg_212));
    tmp6_fu_491_p0 <= zext_ln37_6_cast_reg_600(6 - 1 downto 0);
    tmp6_fu_491_p1 <= tmp6_fu_491_p10(7 - 1 downto 0);
    tmp6_fu_491_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_481_p2),11));
    tmp6_fu_491_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_491_p0) * unsigned(tmp6_fu_491_p1), 11));
    tmp7_fu_403_p2 <= std_logic_vector(unsigned(phi_mul2_reg_188) + unsigned(zext_ln37_7_cast_fu_399_p1));
    tmp8_fu_413_p0 <= tmp8_fu_413_p00(7 - 1 downto 0);
    tmp8_fu_413_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_403_p2),11));
    tmp8_fu_413_p1 <= zext_ln45_1_cast_reg_610(5 - 1 downto 0);
    tmp8_fu_413_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_fu_413_p0) * unsigned(tmp8_fu_413_p1), 11));
    tmp_fu_481_p2 <= std_logic_vector(unsigned(phi_mul_reg_176) + unsigned(tmp2_cast_fu_477_p1));
    trunc_ln26_fu_326_p1 <= out_d_0_reg_164(3 - 1 downto 0);
    zext_ln26_3_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_200),64));
    zext_ln26_4_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_330_p3),7));
    zext_ln26_5_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_364_p2),64));
    zext_ln26_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_354_p2),7));
    zext_ln29_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_164),64));
    zext_ln35_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_224),11));
    zext_ln37_11_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_fu_555_p1),64));
    zext_ln37_15_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_0_reg_246),5));
    zext_ln37_16_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_0_reg_246),4));
    zext_ln37_17_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_453_p3),5));
    zext_ln37_18_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_0_reg_269),5));
    zext_ln37_19_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_0_reg_269),4));
    zext_ln37_20_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_530_p2),11));
    zext_ln37_21_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_4_fu_540_p2),64));
    zext_ln37_6_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln37_7_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_212),7));
    zext_ln37_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln45_1_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln45_2_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_501_p2),64));
    zext_ln45_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
end behav;
