-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv12_C4 : STD_LOGIC_VECTOR (11 downto 0) := "000011000100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_620 : STD_LOGIC_VECTOR (10 downto 0) := "11000100000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_70 : STD_LOGIC_VECTOR (7 downto 0) := "01110000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_3_b_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_3_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_3_b_s_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_3_w_s_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_3_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_3_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_reg_252 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten18_reg_264 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_h_0_reg_275 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_286 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_w_0_reg_297 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_0_reg_308 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_d_0_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_fu_329_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln24_reg_983 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln24_fu_333_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln24_reg_988 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_d_fu_345_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_996 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_fu_356_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln28_reg_1006 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln34_fu_360_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln34_reg_1011 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_364_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_1018 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln26_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_377_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1027 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln31_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1037 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_1037_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1037_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1037_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_522_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln33_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1046 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1046_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1046_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1046_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_4_fu_578_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln32_4_reg_1051 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln32_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1056_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1056_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1056_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_612_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_4_fu_632_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_4_reg_1066 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_4_reg_1066_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_5_fu_644_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_5_reg_1072 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_6_fu_658_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln36_6_reg_1078 : STD_LOGIC_VECTOR (8 downto 0);
    signal in_d_fu_666_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_d_reg_1083 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln33_fu_678_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln36_2_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_2_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_2_reg_1099_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_2_reg_1099_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_fu_708_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln47_reg_1103 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln47_reg_1103_pp1_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln47_reg_1103_pp1_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal input_load_reg_1108 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_758_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_fu_828_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal out_d_0_reg_230 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal phi_mul_reg_241 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_i_0_phi_fu_256_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_301_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_in_d_0_phi_fu_322_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln25_fu_351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_6_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_buffer_15_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_0_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_17_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_18_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_19_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_20_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_21_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_22_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_23_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_24_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_25_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_26_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_27_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_28_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_29_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_016_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_383_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_fu_387_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln1_fu_476_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln39_3_fu_488_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_fu_484_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln39_7_fu_496_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln39_fu_500_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_fu_506_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_fu_528_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln39_mid1_fu_548_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln39_3_mid1_fu_560_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_8_fu_556_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln39_9_fu_568_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln39_2_fu_572_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln39_fu_510_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln36_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_540_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln36_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_620_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_2_fu_640_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln39_4_fu_652_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln32_5_fu_586_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln33_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_884_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln39_fu_695_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_3_fu_686_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln39_fu_798_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_3_fu_803_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln_fu_815_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln39_3_fu_824_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln36_fu_809_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_fu_834_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_fu_852_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_fu_842_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_fu_867_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln47_1_fu_870_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln47_1_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_884_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_884_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_884_p00 : STD_LOGIC_VECTOR (11 downto 0);

    component network_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_mac_muladd_4ns_9ns_9s_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component pointwise_conv2d_fix_3_SeparableConv2D_3_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component pointwise_conv2d_fix_3_SeparableConv2D_3_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_3_b_s_U : component pointwise_conv2d_fix_3_SeparableConv2D_3_b_s
    generic map (
        DataWidth => 14,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_3_b_s_address0,
        ce0 => SeparableConv2D_3_b_s_ce0,
        q0 => SeparableConv2D_3_b_s_q0);

    SeparableConv2D_3_w_s_U : component pointwise_conv2d_fix_3_SeparableConv2D_3_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_3_w_s_address0,
        ce0 => SeparableConv2D_3_w_s_ce0,
        q0 => SeparableConv2D_3_w_s_q0);

    network_mux_164_32_1_1_U99 : component network_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => kernel_buffer_15_fu_118,
        din1 => kernel_buffer_15_17_fu_122,
        din2 => kernel_buffer_15_18_fu_126,
        din3 => kernel_buffer_15_19_fu_130,
        din4 => kernel_buffer_15_20_fu_134,
        din5 => kernel_buffer_15_21_fu_138,
        din6 => kernel_buffer_15_22_fu_142,
        din7 => kernel_buffer_15_23_fu_146,
        din8 => ap_const_lv32_0,
        din9 => kernel_buffer_15_24_fu_150,
        din10 => kernel_buffer_15_25_fu_154,
        din11 => kernel_buffer_15_26_fu_158,
        din12 => kernel_buffer_15_27_fu_162,
        din13 => kernel_buffer_15_28_fu_166,
        din14 => kernel_buffer_15_29_fu_170,
        din15 => kernel_buffer_15_016_fu_174,
        din16 => select_ln36_4_reg_1066_pp1_iter1_reg,
        dout => tmp_4_fu_758_p18);

    network_mac_muladd_4ns_9ns_9s_12_1_1_U100 : component network_mac_muladd_4ns_9ns_9s_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_884_p0,
        din1 => grp_fu_884_p1,
        din2 => select_ln36_6_reg_1078,
        dout => grp_fu_884_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                buffer_0_reg_308 <= sext_ln34_reg_1011;
            elsif (((icmp_ln31_reg_1037_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                buffer_0_reg_308 <= buffer_fu_828_p2;
            end if; 
        end if;
    end process;

    i_0_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_1023 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_252 <= i_reg_1027;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_252 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    in_d_0_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                in_d_0_reg_318 <= ap_const_lv4_0;
            elsif (((icmp_ln31_reg_1037 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                in_d_0_reg_318 <= in_d_reg_1083;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten18_reg_264 <= ap_const_lv11_0;
            elsif (((icmp_ln31_fu_516_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten18_reg_264 <= add_ln31_fu_522_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_286 <= ap_const_lv8_0;
            elsif (((icmp_ln31_fu_516_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_286 <= select_ln33_fu_678_p3;
            end if; 
        end if;
    end process;

    out_d_0_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                out_d_0_reg_230 <= out_d_reg_996;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_230 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                out_h_0_reg_275 <= ap_const_lv4_0;
            elsif (((icmp_ln31_fu_516_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                out_h_0_reg_275 <= select_ln31_fu_612_p3;
            end if; 
        end if;
    end process;

    out_w_0_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                out_w_0_reg_297 <= ap_const_lv4_0;
            elsif (((icmp_ln31_reg_1037 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                out_w_0_reg_297 <= select_ln36_5_reg_1072;
            end if; 
        end if;
    end process;

    phi_mul_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                phi_mul_reg_241 <= add_ln24_reg_988;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_241 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln24_reg_988 <= add_ln24_fu_333_p2;
                out_d_reg_996 <= out_d_fu_345_p2;
                    zext_ln24_reg_983(11 downto 0) <= zext_ln24_fu_329_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln36_2_fu_703_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln47_reg_1103 <= add_ln47_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln47_reg_1103_pp1_iter2_reg <= add_ln47_reg_1103;
                add_ln47_reg_1103_pp1_iter3_reg <= add_ln47_reg_1103_pp1_iter2_reg;
                and_ln32_reg_1056_pp1_iter2_reg <= and_ln32_reg_1056_pp1_iter1_reg;
                and_ln32_reg_1056_pp1_iter3_reg <= and_ln32_reg_1056_pp1_iter2_reg;
                icmp_ln31_reg_1037_pp1_iter2_reg <= icmp_ln31_reg_1037_pp1_iter1_reg;
                icmp_ln31_reg_1037_pp1_iter3_reg <= icmp_ln31_reg_1037_pp1_iter2_reg;
                icmp_ln33_reg_1046_pp1_iter2_reg <= icmp_ln33_reg_1046_pp1_iter1_reg;
                icmp_ln33_reg_1046_pp1_iter3_reg <= icmp_ln33_reg_1046_pp1_iter2_reg;
                icmp_ln36_2_reg_1099_pp1_iter2_reg <= icmp_ln36_2_reg_1099;
                icmp_ln36_2_reg_1099_pp1_iter3_reg <= icmp_ln36_2_reg_1099_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_516_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                and_ln32_reg_1056 <= and_ln32_fu_606_p2;
                icmp_ln33_reg_1046 <= icmp_ln33_fu_534_p2;
                    select_ln32_4_reg_1051(8 downto 1) <= select_ln32_4_fu_578_p3(8 downto 1);
                select_ln36_4_reg_1066 <= select_ln36_4_fu_632_p3;
                select_ln36_6_reg_1078 <= select_ln36_6_fu_658_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                and_ln32_reg_1056_pp1_iter1_reg <= and_ln32_reg_1056;
                icmp_ln31_reg_1037 <= icmp_ln31_fu_516_p2;
                icmp_ln31_reg_1037_pp1_iter1_reg <= icmp_ln31_reg_1037;
                icmp_ln33_reg_1046_pp1_iter1_reg <= icmp_ln33_reg_1046;
                select_ln36_4_reg_1066_pp1_iter1_reg <= select_ln36_4_reg_1066;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_1027 <= i_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln26_reg_1023 <= icmp_ln26_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1037 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln36_2_reg_1099 <= icmp_ln36_2_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_516_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                in_d_reg_1083 <= in_d_fu_666_p2;
                select_ln36_5_reg_1072 <= select_ln36_5_fu_644_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1037_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                input_load_reg_1108 <= input_r_q0;
                tmp_4_reg_1113 <= tmp_4_fu_758_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((i_0_reg_252 = ap_const_lv4_8) or (i_0_reg_252 = ap_const_lv4_F)))) then
                kernel_buffer_15_016_fu_174 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_17_fu_122 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_18_fu_126 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_19_fu_130 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_20_fu_134 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_21_fu_138 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_22_fu_142 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_23_fu_146 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_9) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_24_fu_150 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_A) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_25_fu_154 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_B) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_26_fu_158 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_C) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_27_fu_162 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_D) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_28_fu_166 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_E) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_29_fu_170 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_0_reg_252 = ap_const_lv4_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_buffer_15_fu_118 <= kernel_buffer_0_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_1037_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_ln39_reg_1118 <= mul_ln39_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln34_reg_1011 <= sext_ln34_fu_360_p1;
                    shl_ln_reg_1018(6 downto 3) <= shl_ln_fu_364_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_339_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln28_reg_1006 <= trunc_ln28_fu_356_p1;
            end if;
        end if;
    end process;
    zext_ln24_reg_983(12) <= '0';
    shl_ln_reg_1018(2 downto 0) <= "000";
    select_ln32_4_reg_1051(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_339_p2, icmp_ln26_fu_371_p2, ap_enable_reg_pp0_iter0, icmp_ln31_fu_516_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln24_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln26_fu_371_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln26_fu_371_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln31_fu_516_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln31_fu_516_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    SeparableConv2D_3_b_s_address0 <= zext_ln25_fu_351_p1(4 - 1 downto 0);

    SeparableConv2D_3_b_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_3_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_3_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SeparableConv2D_3_w_s_address0 <= zext_ln28_1_fu_392_p1(7 - 1 downto 0);

    SeparableConv2D_3_w_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            SeparableConv2D_3_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_3_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_fu_333_p2 <= std_logic_vector(unsigned(phi_mul_reg_241) + unsigned(ap_const_lv12_C4));
    add_ln28_fu_387_p2 <= std_logic_vector(unsigned(shl_ln_reg_1018) + unsigned(zext_ln28_fu_383_p1));
    add_ln31_fu_522_p2 <= std_logic_vector(unsigned(indvar_flatten18_reg_264) + unsigned(ap_const_lv11_1));
    add_ln33_fu_672_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_286) + unsigned(ap_const_lv8_1));
    add_ln39_4_fu_652_p2 <= std_logic_vector(unsigned(select_ln32_4_fu_578_p3) + unsigned(zext_ln36_2_fu_640_p1));
    add_ln39_fu_510_p2 <= std_logic_vector(unsigned(sub_ln39_fu_500_p2) + unsigned(zext_ln36_fu_506_p1));
    add_ln47_1_fu_870_p2 <= std_logic_vector(unsigned(zext_ln24_reg_983) + unsigned(sext_ln47_fu_867_p1));
    add_ln47_fu_708_p2 <= std_logic_vector(unsigned(zext_ln36_3_fu_686_p1) + unsigned(select_ln32_4_reg_1051));
    and_ln32_fu_606_p2 <= (xor_ln32_fu_594_p2 and icmp_ln36_fu_600_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln26_fu_371_p2)
    begin
        if ((icmp_ln26_fu_371_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln31_fu_516_p2)
    begin
        if ((icmp_ln31_fu_516_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_339_p2)
    begin
        if ((((icmp_ln24_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_256_p4_assign_proc : process(i_0_reg_252, icmp_ln26_reg_1023, ap_CS_fsm_pp0_stage0, i_reg_1027, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln26_reg_1023 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_256_p4 <= i_reg_1027;
        else 
            ap_phi_mux_i_0_phi_fu_256_p4 <= i_0_reg_252;
        end if; 
    end process;


    ap_phi_mux_in_d_0_phi_fu_322_p4_assign_proc : process(in_d_0_reg_318, icmp_ln31_reg_1037, ap_CS_fsm_pp1_stage0, in_d_reg_1083, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_1037 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_in_d_0_phi_fu_322_p4 <= in_d_reg_1083;
        else 
            ap_phi_mux_in_d_0_phi_fu_322_p4 <= in_d_0_reg_318;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_301_p4_assign_proc : process(out_w_0_reg_297, icmp_ln31_reg_1037, ap_CS_fsm_pp1_stage0, select_ln36_5_reg_1072, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_1037 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_301_p4 <= select_ln36_5_reg_1072;
        else 
            ap_phi_mux_out_w_0_phi_fu_301_p4 <= out_w_0_reg_297;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_339_p2)
    begin
        if (((icmp_ln24_fu_339_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_828_p2 <= std_logic_vector(signed(sext_ln39_3_fu_824_p1) + signed(select_ln36_fu_809_p3));
    grp_fu_884_p0 <= grp_fu_884_p00(4 - 1 downto 0);
    grp_fu_884_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_4_reg_1066),12));
    grp_fu_884_p1 <= ap_const_lv12_C4(9 - 1 downto 0);
    i_fu_377_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_256_p4) + unsigned(ap_const_lv4_1));
    icmp_ln24_fu_339_p2 <= "1" when (out_d_0_reg_230 = ap_const_lv5_10) else "0";
    icmp_ln26_fu_371_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_256_p4 = ap_const_lv4_8) else "0";
    icmp_ln31_fu_516_p2 <= "1" when (indvar_flatten18_reg_264 = ap_const_lv11_620) else "0";
    icmp_ln33_fu_534_p2 <= "1" when (indvar_flatten_reg_286 = ap_const_lv8_70) else "0";
    icmp_ln36_2_fu_703_p2 <= "1" when (in_d_reg_1083 = ap_const_lv4_8) else "0";
    icmp_ln36_fu_600_p2 <= "1" when (ap_phi_mux_in_d_0_phi_fu_322_p4 = ap_const_lv4_8) else "0";
    in_d_fu_666_p2 <= std_logic_vector(unsigned(select_ln36_4_fu_632_p3) + unsigned(ap_const_lv4_1));
    input_r_address0 <= zext_ln39_6_fu_698_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        kernel_buffer_0_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_3_w_s_q0),32));

    mul_ln39_fu_798_p1 <= input_load_reg_1108;
    mul_ln39_fu_798_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_4_reg_1113) * signed(mul_ln39_fu_798_p1))), 32));
    or_ln36_fu_626_p2 <= (icmp_ln33_fu_534_p2 or and_ln32_fu_606_p2);
    out_d_fu_345_p2 <= std_logic_vector(unsigned(out_d_0_reg_230) + unsigned(ap_const_lv5_1));
    out_h_fu_528_p2 <= std_logic_vector(unsigned(out_h_0_reg_275) + unsigned(ap_const_lv4_1));
    out_w_fu_620_p2 <= std_logic_vector(unsigned(select_ln32_fu_540_p3) + unsigned(ap_const_lv4_1));
    output_r_address0 <= zext_ln47_fu_879_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln46_fu_842_p1 and select_ln46_fu_852_p3);

    output_r_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln36_2_reg_1099_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln36_2_reg_1099_pp1_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln31_fu_612_p3 <= 
        out_h_fu_528_p2 when (icmp_ln33_fu_534_p2(0) = '1') else 
        out_h_0_reg_275;
    select_ln32_3_fu_803_p3 <= 
        sext_ln34_reg_1011 when (icmp_ln33_reg_1046_pp1_iter3_reg(0) = '1') else 
        buffer_0_reg_308;
    select_ln32_4_fu_578_p3 <= 
        sub_ln39_2_fu_572_p2 when (icmp_ln33_fu_534_p2(0) = '1') else 
        sub_ln39_fu_500_p2;
    select_ln32_5_fu_586_p3 <= 
        sub_ln39_2_fu_572_p2 when (icmp_ln33_fu_534_p2(0) = '1') else 
        add_ln39_fu_510_p2;
    select_ln32_fu_540_p3 <= 
        ap_const_lv4_0 when (icmp_ln33_fu_534_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_301_p4;
    select_ln33_fu_678_p3 <= 
        ap_const_lv8_1 when (icmp_ln33_fu_534_p2(0) = '1') else 
        add_ln33_fu_672_p2;
    select_ln36_4_fu_632_p3 <= 
        ap_const_lv4_0 when (or_ln36_fu_626_p2(0) = '1') else 
        ap_phi_mux_in_d_0_phi_fu_322_p4;
    select_ln36_5_fu_644_p3 <= 
        out_w_fu_620_p2 when (and_ln32_fu_606_p2(0) = '1') else 
        select_ln32_fu_540_p3;
    select_ln36_6_fu_658_p3 <= 
        add_ln39_4_fu_652_p2 when (and_ln32_fu_606_p2(0) = '1') else 
        select_ln32_5_fu_586_p3;
    select_ln36_fu_809_p3 <= 
        sext_ln34_reg_1011 when (and_ln32_reg_1056_pp1_iter3_reg(0) = '1') else 
        select_ln32_3_fu_803_p3;
    select_ln46_fu_852_p3 <= 
        ap_const_lv16_FFFF when (xor_ln46_fu_846_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln34_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_3_b_s_q0),22));

        sext_ln39_3_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_815_p4),22));

        sext_ln39_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_884_p3),32));

        sext_ln47_1_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_1_fu_870_p2),32));

        sext_ln47_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_reg_1103_pp1_iter3_reg),13));

    shl_ln1_fu_476_p3 <= (out_h_0_reg_275 & ap_const_lv4_0);
    shl_ln39_3_fu_488_p3 <= (out_h_0_reg_275 & ap_const_lv1_0);
    shl_ln39_3_mid1_fu_560_p3 <= (out_h_fu_528_p2 & ap_const_lv1_0);
    shl_ln39_mid1_fu_548_p3 <= (out_h_fu_528_p2 & ap_const_lv4_0);
    shl_ln_fu_364_p3 <= (trunc_ln28_reg_1006 & ap_const_lv3_0);
    sub_ln39_2_fu_572_p2 <= std_logic_vector(unsigned(zext_ln39_8_fu_556_p1) - unsigned(zext_ln39_9_fu_568_p1));
    sub_ln39_fu_500_p2 <= std_logic_vector(unsigned(zext_ln39_fu_484_p1) - unsigned(zext_ln39_7_fu_496_p1));
    tmp_2_fu_834_p3 <= buffer_fu_828_p2(21 downto 21);
    trunc_ln28_fu_356_p1 <= out_d_0_reg_230(4 - 1 downto 0);
    trunc_ln46_fu_842_p1 <= buffer_fu_828_p2(16 - 1 downto 0);
    trunc_ln_fu_815_p4 <= mul_ln39_reg_1118(31 downto 14);
    xor_ln32_fu_594_p2 <= (icmp_ln33_fu_534_p2 xor ap_const_lv1_1);
    xor_ln46_fu_846_p2 <= (tmp_2_fu_834_p3 xor ap_const_lv1_1);
    zext_ln24_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_241),13));
    zext_ln25_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_230),64));
    zext_ln28_1_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_387_p2),64));
    zext_ln28_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_256_p4),7));
    zext_ln36_2_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_620_p2),9));
    zext_ln36_3_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_5_reg_1072),9));
    zext_ln36_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_w_0_phi_fu_301_p4),9));
    zext_ln39_6_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln39_fu_695_p1),64));
    zext_ln39_7_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_3_fu_488_p3),9));
    zext_ln39_8_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_mid1_fu_548_p3),9));
    zext_ln39_9_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_3_mid1_fu_560_p3),9));
    zext_ln39_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_476_p3),9));
    zext_ln47_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_1_fu_875_p1),64));
end behav;
