// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state13 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [7:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [7:0] kernel_address1;
output   kernel_ce1;
input  [15:0] kernel_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg[7:0] kernel_address0;
reg kernel_ce0;
reg[7:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] indvar_flatten48_reg_304;
reg   [4:0] out_d_0_reg_316;
reg   [9:0] indvar_flatten_reg_328;
reg   [4:0] out_h_0_reg_340;
reg   [4:0] out_w_0_reg_352;
reg  signed [15:0] reg_364;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln23_reg_1239;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg  signed [15:0] reg_369;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg  signed [15:0] reg_373;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] reg_377;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg  signed [15:0] reg_382;
reg   [0:0] icmp_ln23_reg_1239_pp0_iter1_reg;
reg  signed [15:0] reg_387;
wire   [8:0] zext_ln38_fu_396_p1;
reg   [8:0] zext_ln38_reg_1184;
wire   [13:0] zext_ln38_1_cast14_fu_400_p1;
reg   [13:0] zext_ln38_1_cast14_reg_1190;
wire   [8:0] zext_ln46_fu_404_p1;
reg   [8:0] zext_ln46_reg_1197;
wire   [13:0] zext_ln46_1_cast_fu_408_p1;
reg   [13:0] zext_ln46_1_cast_reg_1203;
wire   [4:0] empty_fu_412_p1;
reg   [4:0] empty_reg_1208;
wire   [9:0] mul_ln4_fu_428_p2;
reg   [9:0] mul_ln4_reg_1213;
wire   [13:0] tmp_1_fu_434_p3;
reg   [13:0] tmp_1_reg_1218;
wire   [0:0] icmp_ln33_fu_442_p2;
reg   [0:0] icmp_ln33_reg_1223;
wire   [8:0] zext_ln46_1_fu_448_p1;
reg   [8:0] zext_ln46_1_reg_1228;
reg   [8:0] zext_ln46_1_reg_1228_pp0_iter1_reg;
wire   [8:0] mul_ln38_fu_478_p2;
reg   [8:0] mul_ln38_reg_1233;
wire   [0:0] icmp_ln23_fu_483_p2;
wire   [4:0] out_d_fu_488_p2;
reg   [4:0] out_d_reg_1243;
wire   [0:0] icmp_ln32_fu_494_p2;
reg   [0:0] icmp_ln32_reg_1248;
reg   [0:0] icmp_ln32_reg_1248_pp0_iter1_reg;
wire   [4:0] select_ln24_fu_499_p3;
reg   [4:0] select_ln24_reg_1260;
wire   [8:0] zext_ln46_2_fu_507_p1;
reg   [8:0] zext_ln46_2_reg_1265;
wire   [7:0] select_ln24_1_fu_537_p3;
reg   [7:0] select_ln24_1_reg_1270;
wire   [8:0] mul_ln38_1_fu_550_p2;
reg   [8:0] mul_ln38_1_reg_1287;
wire   [0:0] icmp_ln33_1_fu_555_p2;
reg   [0:0] icmp_ln33_1_reg_1293;
wire   [4:0] out_h_fu_560_p2;
reg   [4:0] out_h_reg_1298;
wire   [8:0] zext_ln38_2_cast_fu_566_p1;
reg   [8:0] zext_ln38_2_cast_reg_1304;
reg   [8:0] zext_ln38_2_cast_reg_1304_pp0_iter1_reg;
wire   [0:0] select_ln24_7_fu_606_p3;
reg   [0:0] select_ln24_7_reg_1319;
reg   [0:0] select_ln24_7_reg_1319_pp0_iter1_reg;
wire   [4:0] out_w_0_mid2_fu_616_p3;
reg   [4:0] out_w_0_mid2_reg_1325;
wire   [8:0] zext_ln38_2_cast_mid_fu_624_p1;
reg   [8:0] zext_ln38_2_cast_mid_reg_1332;
reg   [8:0] zext_ln38_2_cast_mid_reg_1332_pp0_iter1_reg;
wire   [8:0] tmp10_0_0_mid2_v_v_fu_633_p3;
reg   [8:0] tmp10_0_0_mid2_v_v_reg_1337;
wire   [13:0] tmp10_0_0_mid2_fu_645_p2;
reg   [13:0] tmp10_0_0_mid2_reg_1342;
wire   [13:0] tmp10_1_0_mid2_fu_660_p2;
reg   [13:0] tmp10_1_0_mid2_reg_1349;
wire   [9:0] add_ln32_1_fu_665_p2;
reg   [9:0] add_ln32_1_reg_1356;
wire   [13:0] tmp10_2_0_mid2_fu_700_p2;
reg   [13:0] tmp10_2_0_mid2_reg_1371;
wire   [13:0] zext_ln38_1_fu_705_p1;
reg   [13:0] zext_ln38_1_reg_1378;
reg   [13:0] zext_ln38_1_reg_1378_pp0_iter1_reg;
wire   [4:0] out_w_fu_718_p2;
reg   [4:0] out_w_reg_1390;
wire   [13:0] zext_ln38_3_fu_723_p1;
reg   [13:0] zext_ln38_3_reg_1395;
reg  signed [15:0] kernel_load_4_reg_1406;
wire   [8:0] mul_ln46_1_fu_757_p2;
reg   [8:0] mul_ln46_1_reg_1421;
wire   [13:0] zext_ln38_5_fu_766_p1;
reg   [13:0] zext_ln38_5_reg_1427;
wire   [13:0] add_ln23_fu_789_p2;
reg   [13:0] add_ln23_reg_1443;
wire   [4:0] select_ln24_2_fu_823_p3;
reg   [4:0] select_ln24_2_reg_1458;
wire   [4:0] select_ln32_fu_829_p3;
reg   [4:0] select_ln32_reg_1464;
reg   [15:0] trunc_ln_reg_1469;
reg   [15:0] trunc_ln46_s_reg_1474;
wire   [9:0] select_ln32_1_fu_878_p3;
reg   [9:0] select_ln32_1_reg_1489;
reg   [15:0] trunc_ln46_1_reg_1499;
reg   [15:0] trunc_ln46_2_reg_1504;
wire   [13:0] add_ln38_10_fu_940_p2;
reg   [13:0] add_ln38_10_reg_1519;
reg   [15:0] trunc_ln46_3_reg_1524;
reg   [15:0] trunc_ln46_4_reg_1529;
wire   [15:0] add_ln46_4_fu_995_p2;
reg   [15:0] add_ln46_4_reg_1539;
wire   [8:0] tmp12_mid2_v_v_fu_1035_p3;
reg   [8:0] tmp12_mid2_v_v_reg_1544;
reg   [15:0] trunc_ln46_5_reg_1549;
reg   [15:0] trunc_ln46_6_reg_1554;
wire   [15:0] add_ln46_5_fu_1068_p2;
reg   [15:0] add_ln46_5_reg_1559;
reg   [15:0] trunc_ln46_7_reg_1564;
wire   [13:0] grp_fu_1171_p3;
reg   [13:0] add_ln46_reg_1569;
wire   [15:0] add_ln46_9_fu_1106_p2;
reg   [15:0] add_ln46_9_reg_1574;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_condition_pp0_exit_iter1_state9;
reg    ap_enable_reg_pp0_iter2;
reg   [13:0] ap_phi_mux_indvar_flatten48_phi_fu_308_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_out_d_0_phi_fu_320_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_332_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_344_p4;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_356_p4;
wire   [63:0] zext_ln24_fu_545_p1;
wire   [63:0] zext_ln24_1_fu_580_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln24_2_fu_590_p1;
wire   [63:0] zext_ln24_3_fu_676_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln24_4_fu_686_p1;
wire   [63:0] zext_ln38_2_fu_713_p1;
wire   [63:0] zext_ln38_4_fu_732_p1;
wire   [63:0] zext_ln24_5_fu_742_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln24_6_fu_752_p1;
wire   [63:0] zext_ln38_6_fu_775_p1;
wire   [63:0] zext_ln38_7_fu_784_p1;
wire   [63:0] zext_ln24_7_fu_808_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln24_8_fu_818_p1;
wire   [63:0] zext_ln38_8_fu_864_p1;
wire   [63:0] zext_ln38_9_fu_873_p1;
wire   [63:0] zext_ln24_9_fu_892_p1;
wire   [63:0] zext_ln38_10_fu_926_p1;
wire   [63:0] zext_ln38_11_fu_935_p1;
wire   [63:0] zext_ln38_12_fu_977_p1;
wire   [63:0] zext_ln46_3_fu_1111_p1;
wire  signed [6:0] sext_ln4_fu_392_p1;
wire   [4:0] empty_58_fu_416_p1;
wire   [4:0] mul_ln4_fu_428_p0;
wire   [4:0] mul_ln4_fu_428_p1;
wire   [3:0] trunc_ln27_fu_456_p1;
wire   [6:0] shl_ln_fu_460_p3;
wire   [7:0] zext_ln27_fu_452_p1;
wire   [7:0] zext_ln27_1_fu_468_p1;
wire   [4:0] mul_ln38_fu_478_p0;
wire   [6:0] mul_ln38_fu_478_p1;
wire   [3:0] trunc_ln27_1_fu_515_p1;
wire   [6:0] shl_ln27_mid1_fu_519_p3;
wire   [7:0] zext_ln27_2_fu_511_p1;
wire   [7:0] zext_ln27_3_fu_527_p1;
wire   [7:0] add_ln27_1_fu_531_p2;
wire   [7:0] add_ln27_fu_472_p2;
wire   [4:0] mul_ln38_1_fu_550_p0;
wire   [6:0] mul_ln38_1_fu_550_p1;
wire   [7:0] add_ln24_fu_575_p2;
wire   [7:0] add_ln24_1_fu_585_p2;
wire   [8:0] tmp_0_0_fu_570_p2;
wire   [0:0] empty_60_fu_611_p2;
wire   [8:0] select_ln24_3_fu_595_p3;
wire   [8:0] tmp_0_0_mid1_fu_627_p2;
wire   [8:0] select_ln24_5_fu_600_p3;
wire   [6:0] tmp10_0_0_mid2_fu_645_p0;
wire   [8:0] tmp10_0_0_mid2_fu_645_p1;
wire   [8:0] tmp10_1_0_mid2_v_v_fu_650_p2;
wire   [6:0] tmp10_1_0_mid2_fu_660_p0;
wire   [8:0] tmp10_1_0_mid2_fu_660_p1;
wire   [7:0] add_ln24_2_fu_671_p2;
wire   [7:0] add_ln24_3_fu_681_p2;
wire   [8:0] tmp10_2_0_mid2_v_v_fu_691_p2;
wire   [6:0] tmp10_2_0_mid2_fu_700_p0;
wire   [8:0] tmp10_2_0_mid2_fu_700_p1;
wire   [13:0] add_ln38_fu_708_p2;
wire   [13:0] add_ln38_2_fu_727_p2;
wire   [7:0] add_ln24_4_fu_737_p2;
wire   [7:0] add_ln24_5_fu_747_p2;
wire   [4:0] mul_ln46_1_fu_757_p0;
wire   [5:0] mul_ln46_1_fu_757_p1;
wire   [4:0] add_ln38_3_fu_761_p2;
wire   [13:0] add_ln38_4_fu_770_p2;
wire   [13:0] add_ln38_5_fu_780_p2;
wire   [7:0] add_ln24_6_fu_803_p2;
wire   [7:0] add_ln24_7_fu_813_p2;
wire  signed [29:0] mul_ln38_2_fu_1115_p2;
wire  signed [29:0] mul_ln38_3_fu_1122_p2;
wire   [13:0] add_ln38_6_fu_860_p2;
wire   [13:0] add_ln38_7_fu_869_p2;
wire  signed [29:0] mul_ln38_4_fu_1129_p2;
wire  signed [29:0] mul_ln38_5_fu_1136_p2;
wire   [13:0] add_ln38_8_fu_922_p2;
wire   [13:0] add_ln38_9_fu_931_p2;
wire  signed [29:0] mul_ln38_6_fu_1143_p2;
wire  signed [29:0] mul_ln38_7_fu_1150_p2;
wire   [15:0] add_ln46_2_fu_986_p2;
wire   [15:0] add_ln46_1_fu_981_p2;
wire   [15:0] add_ln46_3_fu_990_p2;
wire   [4:0] mul_ln46_fu_1001_p0;
wire   [5:0] mul_ln46_fu_1001_p1;
wire   [8:0] mul_ln46_fu_1001_p2;
wire   [8:0] tmp11_fu_1005_p2;
wire   [8:0] select_ln24_4_fu_1018_p3;
wire   [8:0] tmp11_mid1_fu_1030_p2;
wire   [8:0] select_ln24_6_fu_1024_p3;
wire  signed [29:0] mul_ln38_8_fu_1157_p2;
wire  signed [29:0] mul_ln38_9_fu_1164_p2;
wire  signed [29:0] mul_ln38_10_fu_1177_p2;
wire   [15:0] add_ln46_6_fu_1092_p2;
wire   [15:0] add_ln46_7_fu_1096_p2;
wire   [15:0] add_ln46_8_fu_1101_p2;
wire   [5:0] grp_fu_1171_p0;
wire   [8:0] grp_fu_1171_p1;
wire   [4:0] grp_fu_1171_p2;
wire    ap_CS_fsm_state13;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] grp_fu_1171_p10;
wire   [8:0] mul_ln38_1_fu_550_p00;
wire   [8:0] mul_ln38_fu_478_p00;
wire   [9:0] mul_ln4_fu_428_p00;
wire   [9:0] mul_ln4_fu_428_p10;
wire   [13:0] tmp10_0_0_mid2_fu_645_p10;
wire   [13:0] tmp10_1_0_mid2_fu_660_p10;
wire   [13:0] tmp10_2_0_mid2_fu_700_p10;
reg    ap_condition_150;
reg    ap_condition_135;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U34(
    .din0(reg_382),
    .din1(reg_364),
    .dout(mul_ln38_2_fu_1115_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U35(
    .din0(reg_387),
    .din1(reg_369),
    .dout(mul_ln38_3_fu_1122_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U36(
    .din0(reg_382),
    .din1(reg_373),
    .dout(mul_ln38_4_fu_1129_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U37(
    .din0(reg_387),
    .din1(reg_377),
    .dout(mul_ln38_5_fu_1136_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U38(
    .din0(reg_382),
    .din1(kernel_load_4_reg_1406),
    .dout(mul_ln38_6_fu_1143_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U39(
    .din0(reg_387),
    .din1(reg_364),
    .dout(mul_ln38_7_fu_1150_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U40(
    .din0(reg_382),
    .din1(reg_369),
    .dout(mul_ln38_8_fu_1157_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U41(
    .din0(reg_387),
    .din1(reg_373),
    .dout(mul_ln38_9_fu_1164_p2)
);

network_mac_muladd_6ns_9ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_mac_muladd_6ns_9ns_5ns_14_1_1_U42(
    .din0(grp_fu_1171_p0),
    .din1(grp_fu_1171_p1),
    .din2(grp_fu_1171_p2),
    .dout(grp_fu_1171_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U43(
    .din0(reg_382),
    .din1(reg_377),
    .dout(mul_ln38_10_fu_1177_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln23_reg_1239 == 1'd1) & (1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state9) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter1_state9) & (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten48_reg_304 <= add_ln23_reg_1443;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten48_reg_304 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_328 <= select_ln32_1_reg_1489;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_328 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_316 <= select_ln24_2_reg_1458;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_316 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_h_0_reg_340 <= select_ln32_reg_1464;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_340 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_0_reg_352 <= out_w_reg_1390;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_352 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            reg_364 <= kernel_q1;
        end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            reg_364 <= kernel_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((icmp_ln23_reg_1239 == 1'd0)) begin
        if ((1'b1 == ap_condition_135)) begin
            reg_377 <= kernel_q0;
        end else if ((1'b1 == ap_condition_150)) begin
            reg_377 <= kernel_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_382 <= input_r_q0;
    end else if ((((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1239 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_382 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        reg_387 <= input_r_q1;
    end else if ((((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1239 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_387 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln23_reg_1443 <= add_ln23_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1248 == 1'd0) & (icmp_ln23_reg_1239 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln32_1_reg_1356 <= add_ln32_1_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln38_10_reg_1519 <= add_ln38_10_fu_940_p2;
        trunc_ln46_1_reg_1499 <= {{mul_ln38_4_fu_1129_p2[29:14]}};
        trunc_ln46_2_reg_1504 <= {{mul_ln38_5_fu_1136_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln46_4_reg_1539 <= add_ln46_4_fu_995_p2;
        trunc_ln46_3_reg_1524 <= {{mul_ln38_6_fu_1143_p2[29:14]}};
        trunc_ln46_4_reg_1529 <= {{mul_ln38_7_fu_1150_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln46_5_reg_1559 <= add_ln46_5_fu_1068_p2;
        tmp12_mid2_v_v_reg_1544 <= tmp12_mid2_v_v_fu_1035_p3;
        trunc_ln46_5_reg_1549 <= {{mul_ln38_8_fu_1157_p2[29:14]}};
        trunc_ln46_6_reg_1554 <= {{mul_ln38_9_fu_1164_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln46_9_reg_1574 <= add_ln46_9_fu_1106_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln46_reg_1569 <= grp_fu_1171_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_1208 <= empty_fu_412_p1;
        icmp_ln33_reg_1223 <= icmp_ln33_fu_442_p2;
        mul_ln4_reg_1213 <= mul_ln4_fu_428_p2;
        tmp_1_reg_1218[13 : 4] <= tmp_1_fu_434_p3[13 : 4];
        zext_ln38_1_cast14_reg_1190[6 : 0] <= zext_ln38_1_cast14_fu_400_p1[6 : 0];
        zext_ln38_reg_1184[6 : 0] <= zext_ln38_fu_396_p1[6 : 0];
        zext_ln46_1_cast_reg_1203[5 : 0] <= zext_ln46_1_cast_fu_408_p1[5 : 0];
        zext_ln46_reg_1197[5 : 0] <= zext_ln46_fu_404_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln23_reg_1239 <= icmp_ln23_fu_483_p2;
        icmp_ln23_reg_1239_pp0_iter1_reg <= icmp_ln23_reg_1239;
        icmp_ln32_reg_1248_pp0_iter1_reg <= icmp_ln32_reg_1248;
        mul_ln38_reg_1233 <= mul_ln38_fu_478_p2;
        zext_ln46_1_reg_1228[4 : 0] <= zext_ln46_1_fu_448_p1[4 : 0];
        zext_ln46_1_reg_1228_pp0_iter1_reg[4 : 0] <= zext_ln46_1_reg_1228[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_483_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln32_reg_1248 <= icmp_ln32_fu_494_p2;
        icmp_ln33_1_reg_1293 <= icmp_ln33_1_fu_555_p2;
        mul_ln38_1_reg_1287 <= mul_ln38_1_fu_550_p2;
        out_d_reg_1243 <= out_d_fu_488_p2;
        out_h_reg_1298 <= out_h_fu_560_p2;
        select_ln24_1_reg_1270 <= select_ln24_1_fu_537_p3;
        select_ln24_reg_1260 <= select_ln24_fu_499_p3;
        zext_ln46_2_reg_1265[4 : 0] <= zext_ln46_2_fu_507_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        kernel_load_4_reg_1406 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_ln46_1_reg_1421 <= mul_ln46_1_fu_757_p2;
        zext_ln38_5_reg_1427[4 : 0] <= zext_ln38_5_fu_766_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_w_0_mid2_reg_1325 <= out_w_0_mid2_fu_616_p3;
        select_ln24_7_reg_1319 <= select_ln24_7_fu_606_p3;
        tmp10_0_0_mid2_reg_1342 <= tmp10_0_0_mid2_fu_645_p2;
        tmp10_0_0_mid2_v_v_reg_1337 <= tmp10_0_0_mid2_v_v_fu_633_p3;
        tmp10_1_0_mid2_reg_1349 <= tmp10_1_0_mid2_fu_660_p2;
        zext_ln38_2_cast_mid_reg_1332[4 : 0] <= zext_ln38_2_cast_mid_fu_624_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        out_w_reg_1390 <= out_w_fu_718_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1239 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_369 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1239 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_373 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        select_ln24_2_reg_1458 <= select_ln24_2_fu_823_p3;
        select_ln32_1_reg_1489 <= select_ln32_1_fu_878_p3;
        select_ln32_reg_1464 <= select_ln32_fu_829_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln24_7_reg_1319_pp0_iter1_reg <= select_ln24_7_reg_1319;
        zext_ln38_2_cast_mid_reg_1332_pp0_iter1_reg[4 : 0] <= zext_ln38_2_cast_mid_reg_1332[4 : 0];
        zext_ln38_2_cast_reg_1304[4 : 0] <= zext_ln38_2_cast_fu_566_p1[4 : 0];
        zext_ln38_2_cast_reg_1304_pp0_iter1_reg[4 : 0] <= zext_ln38_2_cast_reg_1304[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp10_2_0_mid2_reg_1371 <= tmp10_2_0_mid2_fu_700_p2;
        zext_ln38_1_reg_1378[4 : 0] <= zext_ln38_1_fu_705_p1[4 : 0];
        zext_ln38_3_reg_1395[4 : 0] <= zext_ln38_3_fu_723_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        trunc_ln46_7_reg_1564 <= {{mul_ln38_10_fu_1177_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        trunc_ln46_s_reg_1474 <= {{mul_ln38_3_fu_1122_p2[29:14]}};
        trunc_ln_reg_1469 <= {{mul_ln38_2_fu_1115_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        zext_ln38_1_reg_1378_pp0_iter1_reg[4 : 0] <= zext_ln38_1_reg_1378[4 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten48_phi_fu_308_p4 = add_ln23_reg_1443;
    end else begin
        ap_phi_mux_indvar_flatten48_phi_fu_308_p4 = indvar_flatten48_reg_304;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_332_p4 = select_ln32_1_reg_1489;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_332_p4 = indvar_flatten_reg_328;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_320_p4 = select_ln24_2_reg_1458;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_320_p4 = out_d_0_reg_316;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_h_0_phi_fu_344_p4 = select_ln32_reg_1464;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_344_p4 = out_h_0_reg_340;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1239 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_356_p4 = out_w_reg_1390;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_356_p4 = out_w_0_reg_352;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_address0 = zext_ln38_12_fu_977_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln38_10_fu_926_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln38_9_fu_873_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln38_7_fu_784_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln38_4_fu_732_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln38_11_fu_935_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address1 = zext_ln38_8_fu_864_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address1 = zext_ln38_6_fu_775_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address1 = zext_ln38_2_fu_713_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address0 = zext_ln24_8_fu_818_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address0 = zext_ln24_6_fu_752_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address0 = zext_ln24_4_fu_686_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address0 = zext_ln24_1_fu_580_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address0 = zext_ln24_fu_545_p1;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address1 = zext_ln24_7_fu_808_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address1 = zext_ln24_5_fu_742_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address1 = zext_ln24_3_fu_676_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address1 = zext_ln24_2_fu_590_p1;
        end else begin
            kernel_address1 = 'bx;
        end
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1239_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_789_p2 = (14'd1 + indvar_flatten48_reg_304);

assign add_ln24_1_fu_585_p2 = (8'd2 + select_ln24_1_reg_1270);

assign add_ln24_2_fu_671_p2 = (8'd3 + select_ln24_1_reg_1270);

assign add_ln24_3_fu_681_p2 = (8'd4 + select_ln24_1_reg_1270);

assign add_ln24_4_fu_737_p2 = (8'd5 + select_ln24_1_reg_1270);

assign add_ln24_5_fu_747_p2 = (8'd6 + select_ln24_1_reg_1270);

assign add_ln24_6_fu_803_p2 = (8'd7 + select_ln24_1_reg_1270);

assign add_ln24_7_fu_813_p2 = (8'd8 + select_ln24_1_reg_1270);

assign add_ln24_fu_575_p2 = (8'd1 + select_ln24_1_reg_1270);

assign add_ln27_1_fu_531_p2 = (zext_ln27_2_fu_511_p1 + zext_ln27_3_fu_527_p1);

assign add_ln27_fu_472_p2 = (zext_ln27_fu_452_p1 + zext_ln27_1_fu_468_p1);

assign add_ln32_1_fu_665_p2 = (10'd1 + indvar_flatten_reg_328);

assign add_ln38_10_fu_940_p2 = (tmp10_2_0_mid2_reg_1371 + zext_ln38_5_reg_1427);

assign add_ln38_2_fu_727_p2 = (tmp10_0_0_mid2_reg_1342 + zext_ln38_3_fu_723_p1);

assign add_ln38_3_fu_761_p2 = (5'd2 + out_w_0_mid2_reg_1325);

assign add_ln38_4_fu_770_p2 = (tmp10_0_0_mid2_reg_1342 + zext_ln38_5_fu_766_p1);

assign add_ln38_5_fu_780_p2 = (zext_ln38_1_reg_1378 + tmp10_1_0_mid2_reg_1349);

assign add_ln38_6_fu_860_p2 = (tmp10_1_0_mid2_reg_1349 + zext_ln38_3_reg_1395);

assign add_ln38_7_fu_869_p2 = (tmp10_1_0_mid2_reg_1349 + zext_ln38_5_reg_1427);

assign add_ln38_8_fu_922_p2 = (zext_ln38_1_reg_1378 + tmp10_2_0_mid2_reg_1371);

assign add_ln38_9_fu_931_p2 = (tmp10_2_0_mid2_reg_1371 + zext_ln38_3_reg_1395);

assign add_ln38_fu_708_p2 = (zext_ln38_1_fu_705_p1 + tmp10_0_0_mid2_reg_1342);

assign add_ln46_1_fu_981_p2 = (trunc_ln_reg_1469 + bias_q0);

assign add_ln46_2_fu_986_p2 = (trunc_ln46_2_reg_1504 + trunc_ln46_1_reg_1499);

assign add_ln46_3_fu_990_p2 = (trunc_ln46_s_reg_1474 + add_ln46_2_fu_986_p2);

assign add_ln46_4_fu_995_p2 = (add_ln46_1_fu_981_p2 + add_ln46_3_fu_990_p2);

assign add_ln46_5_fu_1068_p2 = (trunc_ln46_4_reg_1529 + trunc_ln46_3_reg_1524);

assign add_ln46_6_fu_1092_p2 = (trunc_ln46_7_reg_1564 + trunc_ln46_6_reg_1554);

assign add_ln46_7_fu_1096_p2 = (trunc_ln46_5_reg_1549 + add_ln46_6_fu_1092_p2);

assign add_ln46_8_fu_1101_p2 = (add_ln46_5_reg_1559 + add_ln46_7_fu_1096_p2);

assign add_ln46_9_fu_1106_p2 = (add_ln46_4_reg_1539 + add_ln46_8_fu_1101_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_135 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_150 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_address0 = zext_ln24_9_fu_892_p1;

assign empty_58_fu_416_p1 = output_height[4:0];

assign empty_60_fu_611_p2 = (select_ln24_7_fu_606_p3 | icmp_ln32_reg_1248);

assign empty_fu_412_p1 = output_width[4:0];

assign grp_fu_1171_p0 = zext_ln46_1_cast_reg_1203;

assign grp_fu_1171_p1 = grp_fu_1171_p10;

assign grp_fu_1171_p10 = tmp12_mid2_v_v_reg_1544;

assign grp_fu_1171_p2 = zext_ln38_1_reg_1378_pp0_iter1_reg;

assign icmp_ln23_fu_483_p2 = ((ap_phi_mux_indvar_flatten48_phi_fu_308_p4 == tmp_1_reg_1218) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_494_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_332_p4 == mul_ln4_reg_1213) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_555_p2 = ((ap_phi_mux_out_w_0_phi_fu_356_p4 == empty_reg_1208) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_442_p2 = ((empty_fu_412_p1 == 5'd0) ? 1'b1 : 1'b0);

assign mul_ln38_1_fu_550_p0 = mul_ln38_1_fu_550_p00;

assign mul_ln38_1_fu_550_p00 = out_d_fu_488_p2;

assign mul_ln38_1_fu_550_p1 = zext_ln38_reg_1184;

assign mul_ln38_1_fu_550_p2 = (mul_ln38_1_fu_550_p0 * mul_ln38_1_fu_550_p1);

assign mul_ln38_fu_478_p0 = mul_ln38_fu_478_p00;

assign mul_ln38_fu_478_p00 = ap_phi_mux_out_d_0_phi_fu_320_p4;

assign mul_ln38_fu_478_p1 = zext_ln38_reg_1184;

assign mul_ln38_fu_478_p2 = (mul_ln38_fu_478_p0 * mul_ln38_fu_478_p1);

assign mul_ln46_1_fu_757_p0 = zext_ln46_2_reg_1265;

assign mul_ln46_1_fu_757_p1 = zext_ln46_reg_1197;

assign mul_ln46_1_fu_757_p2 = (mul_ln46_1_fu_757_p0 * mul_ln46_1_fu_757_p1);

assign mul_ln46_fu_1001_p0 = zext_ln46_1_reg_1228_pp0_iter1_reg;

assign mul_ln46_fu_1001_p1 = zext_ln46_reg_1197;

assign mul_ln46_fu_1001_p2 = (mul_ln46_fu_1001_p0 * mul_ln46_fu_1001_p1);

assign mul_ln4_fu_428_p0 = mul_ln4_fu_428_p00;

assign mul_ln4_fu_428_p00 = empty_58_fu_416_p1;

assign mul_ln4_fu_428_p1 = mul_ln4_fu_428_p10;

assign mul_ln4_fu_428_p10 = empty_fu_412_p1;

assign mul_ln4_fu_428_p2 = (mul_ln4_fu_428_p0 * mul_ln4_fu_428_p1);

assign out_d_fu_488_p2 = (5'd1 + ap_phi_mux_out_d_0_phi_fu_320_p4);

assign out_h_fu_560_p2 = (5'd1 + select_ln24_fu_499_p3);

assign out_w_0_mid2_fu_616_p3 = ((empty_60_fu_611_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_352);

assign out_w_fu_718_p2 = (5'd1 + out_w_0_mid2_reg_1325);

assign output_r_address0 = zext_ln46_3_fu_1111_p1;

assign output_r_d0 = add_ln46_9_reg_1574;

assign select_ln24_1_fu_537_p3 = ((icmp_ln32_fu_494_p2[0:0] === 1'b1) ? add_ln27_1_fu_531_p2 : add_ln27_fu_472_p2);

assign select_ln24_2_fu_823_p3 = ((icmp_ln32_reg_1248[0:0] === 1'b1) ? out_d_reg_1243 : out_d_0_reg_316);

assign select_ln24_3_fu_595_p3 = ((icmp_ln32_reg_1248[0:0] === 1'b1) ? mul_ln38_1_reg_1287 : mul_ln38_reg_1233);

assign select_ln24_4_fu_1018_p3 = ((icmp_ln32_reg_1248_pp0_iter1_reg[0:0] === 1'b1) ? mul_ln46_1_reg_1421 : mul_ln46_fu_1001_p2);

assign select_ln24_5_fu_600_p3 = ((icmp_ln32_reg_1248[0:0] === 1'b1) ? mul_ln38_1_reg_1287 : tmp_0_0_fu_570_p2);

assign select_ln24_6_fu_1024_p3 = ((icmp_ln32_reg_1248_pp0_iter1_reg[0:0] === 1'b1) ? mul_ln46_1_reg_1421 : tmp11_fu_1005_p2);

assign select_ln24_7_fu_606_p3 = ((icmp_ln32_reg_1248[0:0] === 1'b1) ? icmp_ln33_reg_1223 : icmp_ln33_1_reg_1293);

assign select_ln24_fu_499_p3 = ((icmp_ln32_fu_494_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_h_0_phi_fu_344_p4);

assign select_ln32_1_fu_878_p3 = ((icmp_ln32_reg_1248[0:0] === 1'b1) ? 10'd1 : add_ln32_1_reg_1356);

assign select_ln32_fu_829_p3 = ((select_ln24_7_reg_1319[0:0] === 1'b1) ? out_h_reg_1298 : select_ln24_reg_1260);

assign sext_ln4_fu_392_p1 = $signed(input_width);

assign shl_ln27_mid1_fu_519_p3 = {{trunc_ln27_1_fu_515_p1}, {3'd0}};

assign shl_ln_fu_460_p3 = {{trunc_ln27_fu_456_p1}, {3'd0}};

assign tmp10_0_0_mid2_fu_645_p0 = zext_ln38_1_cast14_reg_1190;

assign tmp10_0_0_mid2_fu_645_p1 = tmp10_0_0_mid2_fu_645_p10;

assign tmp10_0_0_mid2_fu_645_p10 = tmp10_0_0_mid2_v_v_fu_633_p3;

assign tmp10_0_0_mid2_fu_645_p2 = (tmp10_0_0_mid2_fu_645_p0 * tmp10_0_0_mid2_fu_645_p1);

assign tmp10_0_0_mid2_v_v_fu_633_p3 = ((select_ln24_7_fu_606_p3[0:0] === 1'b1) ? tmp_0_0_mid1_fu_627_p2 : select_ln24_5_fu_600_p3);

assign tmp10_1_0_mid2_fu_660_p0 = zext_ln38_1_cast14_reg_1190;

assign tmp10_1_0_mid2_fu_660_p1 = tmp10_1_0_mid2_fu_660_p10;

assign tmp10_1_0_mid2_fu_660_p10 = tmp10_1_0_mid2_v_v_fu_650_p2;

assign tmp10_1_0_mid2_fu_660_p2 = (tmp10_1_0_mid2_fu_660_p0 * tmp10_1_0_mid2_fu_660_p1);

assign tmp10_1_0_mid2_v_v_fu_650_p2 = (9'd1 + tmp10_0_0_mid2_v_v_fu_633_p3);

assign tmp10_2_0_mid2_fu_700_p0 = zext_ln38_1_cast14_reg_1190;

assign tmp10_2_0_mid2_fu_700_p1 = tmp10_2_0_mid2_fu_700_p10;

assign tmp10_2_0_mid2_fu_700_p10 = tmp10_2_0_mid2_v_v_fu_691_p2;

assign tmp10_2_0_mid2_fu_700_p2 = (tmp10_2_0_mid2_fu_700_p0 * tmp10_2_0_mid2_fu_700_p1);

assign tmp10_2_0_mid2_v_v_fu_691_p2 = (9'd2 + tmp10_0_0_mid2_v_v_reg_1337);

assign tmp11_fu_1005_p2 = (zext_ln38_2_cast_reg_1304_pp0_iter1_reg + mul_ln46_fu_1001_p2);

assign tmp11_mid1_fu_1030_p2 = (zext_ln38_2_cast_mid_reg_1332_pp0_iter1_reg + select_ln24_4_fu_1018_p3);

assign tmp12_mid2_v_v_fu_1035_p3 = ((select_ln24_7_reg_1319_pp0_iter1_reg[0:0] === 1'b1) ? tmp11_mid1_fu_1030_p2 : select_ln24_6_fu_1024_p3);

assign tmp_0_0_fu_570_p2 = (zext_ln38_2_cast_fu_566_p1 + mul_ln38_reg_1233);

assign tmp_0_0_mid1_fu_627_p2 = (zext_ln38_2_cast_mid_fu_624_p1 + select_ln24_3_fu_595_p3);

assign tmp_1_fu_434_p3 = {{mul_ln4_fu_428_p2}, {4'd0}};

assign trunc_ln27_1_fu_515_p1 = out_d_fu_488_p2[3:0];

assign trunc_ln27_fu_456_p1 = ap_phi_mux_out_d_0_phi_fu_320_p4[3:0];

assign zext_ln24_1_fu_580_p1 = add_ln24_fu_575_p2;

assign zext_ln24_2_fu_590_p1 = add_ln24_1_fu_585_p2;

assign zext_ln24_3_fu_676_p1 = add_ln24_2_fu_671_p2;

assign zext_ln24_4_fu_686_p1 = add_ln24_3_fu_681_p2;

assign zext_ln24_5_fu_742_p1 = add_ln24_4_fu_737_p2;

assign zext_ln24_6_fu_752_p1 = add_ln24_5_fu_747_p2;

assign zext_ln24_7_fu_808_p1 = add_ln24_6_fu_803_p2;

assign zext_ln24_8_fu_818_p1 = add_ln24_7_fu_813_p2;

assign zext_ln24_9_fu_892_p1 = select_ln24_2_reg_1458;

assign zext_ln24_fu_545_p1 = select_ln24_1_fu_537_p3;

assign zext_ln27_1_fu_468_p1 = shl_ln_fu_460_p3;

assign zext_ln27_2_fu_511_p1 = out_d_fu_488_p2;

assign zext_ln27_3_fu_527_p1 = shl_ln27_mid1_fu_519_p3;

assign zext_ln27_fu_452_p1 = ap_phi_mux_out_d_0_phi_fu_320_p4;

assign zext_ln38_10_fu_926_p1 = add_ln38_8_fu_922_p2;

assign zext_ln38_11_fu_935_p1 = add_ln38_9_fu_931_p2;

assign zext_ln38_12_fu_977_p1 = add_ln38_10_reg_1519;

assign zext_ln38_1_cast14_fu_400_p1 = $unsigned(sext_ln4_fu_392_p1);

assign zext_ln38_1_fu_705_p1 = out_w_0_mid2_reg_1325;

assign zext_ln38_2_cast_fu_566_p1 = out_h_0_reg_340;

assign zext_ln38_2_cast_mid_fu_624_p1 = out_h_reg_1298;

assign zext_ln38_2_fu_713_p1 = add_ln38_fu_708_p2;

assign zext_ln38_3_fu_723_p1 = out_w_fu_718_p2;

assign zext_ln38_4_fu_732_p1 = add_ln38_2_fu_727_p2;

assign zext_ln38_5_fu_766_p1 = add_ln38_3_fu_761_p2;

assign zext_ln38_6_fu_775_p1 = add_ln38_4_fu_770_p2;

assign zext_ln38_7_fu_784_p1 = add_ln38_5_fu_780_p2;

assign zext_ln38_8_fu_864_p1 = add_ln38_6_fu_860_p2;

assign zext_ln38_9_fu_873_p1 = add_ln38_7_fu_869_p2;

assign zext_ln38_fu_396_p1 = input_height;

assign zext_ln46_1_cast_fu_408_p1 = output_width;

assign zext_ln46_1_fu_448_p1 = ap_phi_mux_out_d_0_phi_fu_320_p4;

assign zext_ln46_2_fu_507_p1 = out_d_fu_488_p2;

assign zext_ln46_3_fu_1111_p1 = add_ln46_reg_1569;

assign zext_ln46_fu_404_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln38_reg_1184[8:7] <= 2'b00;
    zext_ln38_1_cast14_reg_1190[13:7] <= 7'b0000000;
    zext_ln46_reg_1197[8:6] <= 3'b000;
    zext_ln46_1_cast_reg_1203[13:6] <= 8'b00000000;
    tmp_1_reg_1218[3:0] <= 4'b0000;
    zext_ln46_1_reg_1228[8:5] <= 4'b0000;
    zext_ln46_1_reg_1228_pp0_iter1_reg[8:5] <= 4'b0000;
    zext_ln46_2_reg_1265[8:5] <= 4'b0000;
    zext_ln38_2_cast_reg_1304[8:5] <= 4'b0000;
    zext_ln38_2_cast_reg_1304_pp0_iter1_reg[8:5] <= 4'b0000;
    zext_ln38_2_cast_mid_reg_1332[8:5] <= 4'b0000;
    zext_ln38_2_cast_mid_reg_1332_pp0_iter1_reg[8:5] <= 4'b0000;
    zext_ln38_1_reg_1378[13:5] <= 9'b000000000;
    zext_ln38_1_reg_1378_pp0_iter1_reg[13:5] <= 9'b000000000;
    zext_ln38_3_reg_1395[13:5] <= 9'b000000000;
    zext_ln38_5_reg_1427[13:5] <= 9'b000000000;
end

endmodule //depthwise_conv2d_fix_2
