// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_pp0_stage0 = 13'd128;
parameter    ap_ST_fsm_pp0_stage1 = 13'd256;
parameter    ap_ST_fsm_pp0_stage2 = 13'd512;
parameter    ap_ST_fsm_pp0_stage3 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage4 = 13'd2048;
parameter    ap_ST_fsm_state19 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [7:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [7:0] kernel_address1;
output   kernel_ce1;
input  [15:0] kernel_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg[7:0] kernel_address0;
reg kernel_ce0;
reg[7:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten_reg_328;
reg   [4:0] out_h_0_reg_339;
reg   [4:0] out_w_0_reg_351;
reg  signed [15:0] reg_362;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state11_pp0_stage3_iter0;
wire    ap_block_state16_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] icmp_ln32_reg_1227;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state12_pp0_stage4_iter0;
wire    ap_block_state17_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state18_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state9_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln32_reg_1227_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state10_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg  signed [15:0] reg_367;
wire   [8:0] zext_ln40_fu_376_p1;
reg   [8:0] zext_ln40_reg_1030;
wire   [13:0] zext_ln40_1_cast29_fu_380_p1;
reg   [13:0] zext_ln40_1_cast29_reg_1035;
wire   [8:0] zext_ln48_fu_384_p1;
reg   [8:0] zext_ln48_reg_1042;
wire   [13:0] zext_ln48_1_cast_fu_388_p1;
reg   [13:0] zext_ln48_1_cast_reg_1047;
wire   [4:0] empty_fu_392_p1;
reg   [4:0] empty_reg_1052;
wire   [9:0] bound_fu_408_p2;
reg   [9:0] bound_reg_1057;
wire   [8:0] add_ln23_fu_414_p2;
reg   [8:0] add_ln23_reg_1062;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln23_1_fu_419_p2;
reg   [8:0] add_ln23_1_reg_1067;
wire   [4:0] out_d_fu_430_p2;
reg   [4:0] out_d_reg_1075;
wire   [3:0] trunc_ln27_fu_440_p1;
reg   [3:0] trunc_ln27_reg_1080;
wire   [0:0] icmp_ln23_fu_424_p2;
wire   [7:0] add_ln27_fu_456_p2;
reg   [7:0] add_ln27_reg_1085;
reg   [15:0] kernel_load_reg_1102;
wire    ap_CS_fsm_state3;
reg   [15:0] kernel_load_1_reg_1117;
wire    ap_CS_fsm_state4;
reg   [15:0] kernel_load_2_reg_1122;
reg   [15:0] kernel_load_3_reg_1137;
wire    ap_CS_fsm_state5;
reg   [15:0] kernel_load_4_reg_1142;
reg   [15:0] kernel_load_5_reg_1157;
wire    ap_CS_fsm_state6;
reg   [15:0] kernel_load_6_reg_1162;
wire  signed [29:0] sext_ln27_fu_547_p1;
reg  signed [29:0] sext_ln27_reg_1177;
wire    ap_CS_fsm_state7;
wire  signed [29:0] sext_ln27_1_fu_550_p1;
reg  signed [29:0] sext_ln27_1_reg_1182;
wire  signed [29:0] sext_ln27_2_fu_553_p1;
reg  signed [29:0] sext_ln27_2_reg_1187;
wire  signed [29:0] sext_ln27_3_fu_556_p1;
reg  signed [29:0] sext_ln27_3_reg_1192;
wire  signed [29:0] sext_ln27_4_fu_559_p1;
reg  signed [29:0] sext_ln27_4_reg_1197;
wire  signed [29:0] sext_ln27_5_fu_562_p1;
reg  signed [29:0] sext_ln27_5_reg_1202;
wire  signed [29:0] sext_ln27_6_fu_565_p1;
reg  signed [29:0] sext_ln27_6_reg_1207;
wire  signed [29:0] sext_ln27_7_fu_568_p1;
reg  signed [29:0] sext_ln27_7_reg_1212;
wire  signed [29:0] sext_ln30_fu_572_p1;
reg  signed [29:0] sext_ln30_reg_1217;
wire   [15:0] tmp_4_fu_576_p18;
reg   [15:0] tmp_4_reg_1222;
wire   [0:0] icmp_ln32_fu_613_p2;
wire   [9:0] add_ln32_fu_618_p2;
reg   [9:0] add_ln32_reg_1231;
wire   [4:0] out_h_fu_624_p2;
reg   [4:0] out_h_reg_1236;
wire   [0:0] icmp_ln33_fu_630_p2;
reg   [0:0] icmp_ln33_reg_1241;
wire   [4:0] out_w_0_mid2_fu_635_p3;
reg   [4:0] out_w_0_mid2_reg_1246;
wire   [4:0] tmp10_0_0_mid2_v_v_v_1_fu_643_p3;
reg   [4:0] tmp10_0_0_mid2_v_v_v_1_reg_1253;
wire   [8:0] tmp10_0_0_mid2_v_v_fu_653_p2;
reg   [8:0] tmp10_0_0_mid2_v_v_reg_1258;
wire   [13:0] tmp10_0_0_mid2_fu_663_p2;
reg   [13:0] tmp10_0_0_mid2_reg_1264;
wire   [8:0] tmp12_mid2_v_v_fu_668_p2;
reg   [8:0] tmp12_mid2_v_v_reg_1271;
wire   [13:0] tmp10_1_0_mid2_fu_683_p2;
reg   [13:0] tmp10_1_0_mid2_reg_1276;
wire   [13:0] zext_ln40_1_fu_688_p1;
reg   [13:0] zext_ln40_1_reg_1283;
wire   [4:0] out_w_fu_701_p2;
reg   [4:0] out_w_reg_1295;
wire   [13:0] zext_ln40_3_fu_706_p1;
reg   [13:0] zext_ln40_3_reg_1300;
wire   [13:0] tmp10_2_0_mid2_fu_729_p2;
reg   [13:0] tmp10_2_0_mid2_reg_1311;
wire   [13:0] zext_ln40_5_fu_742_p1;
reg   [13:0] zext_ln40_5_reg_1318;
wire   [13:0] grp_fu_970_p3;
reg   [13:0] add_ln48_reg_1334;
reg   [13:0] add_ln48_reg_1334_pp0_iter1_reg;
reg   [15:0] trunc_ln_reg_1339;
reg   [15:0] trunc_ln48_s_reg_1344;
wire   [13:0] add_ln40_8_fu_809_p2;
reg   [13:0] add_ln40_8_reg_1359;
wire   [13:0] add_ln40_9_fu_813_p2;
reg   [13:0] add_ln40_9_reg_1364;
wire   [13:0] add_ln40_10_fu_817_p2;
reg   [13:0] add_ln40_10_reg_1369;
reg   [15:0] trunc_ln48_1_reg_1374;
reg   [15:0] trunc_ln48_2_reg_1379;
wire   [15:0] add_ln48_1_fu_855_p2;
reg   [15:0] add_ln48_1_reg_1394;
reg   [15:0] trunc_ln48_3_reg_1399;
reg   [15:0] trunc_ln48_4_reg_1404;
wire   [15:0] add_ln48_3_fu_893_p2;
reg   [15:0] add_ln48_3_reg_1414;
reg   [15:0] trunc_ln48_5_reg_1419;
reg   [15:0] trunc_ln48_6_reg_1424;
reg   [15:0] trunc_ln48_7_reg_1429;
wire   [15:0] add_ln48_8_fu_950_p2;
reg   [15:0] add_ln48_8_reg_1434;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire    ap_block_pp0_stage4_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] out_d_0_reg_293;
wire    ap_CS_fsm_state19;
reg   [8:0] phi_mul_reg_304;
reg   [8:0] phi_mul5_reg_316;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_332_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_343_p4;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_355_p4;
wire   [63:0] zext_ln27_2_fu_462_p1;
wire   [63:0] zext_ln27_3_fu_472_p1;
wire   [63:0] zext_ln27_4_fu_482_p1;
wire   [63:0] zext_ln27_5_fu_492_p1;
wire   [63:0] zext_ln27_6_fu_502_p1;
wire   [63:0] zext_ln27_7_fu_512_p1;
wire   [63:0] zext_ln27_8_fu_522_p1;
wire   [63:0] zext_ln27_9_fu_532_p1;
wire   [63:0] zext_ln27_10_fu_542_p1;
wire   [63:0] zext_ln40_2_fu_696_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln40_4_fu_715_p1;
wire   [63:0] zext_ln40_6_fu_751_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln40_7_fu_760_p1;
wire   [63:0] zext_ln40_8_fu_795_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln40_9_fu_804_p1;
wire   [63:0] zext_ln40_10_fu_847_p1;
wire   [63:0] zext_ln40_11_fu_851_p1;
wire   [63:0] zext_ln40_12_fu_885_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln48_1_fu_966_p1;
wire  signed [6:0] sext_ln4_fu_372_p1;
wire   [4:0] empty_56_fu_396_p1;
wire   [4:0] bound_fu_408_p0;
wire   [4:0] bound_fu_408_p1;
wire   [6:0] shl_ln_fu_444_p3;
wire   [7:0] zext_ln27_fu_436_p1;
wire   [7:0] zext_ln27_1_fu_452_p1;
wire   [7:0] add_ln27_1_fu_467_p2;
wire   [7:0] add_ln27_2_fu_477_p2;
wire   [7:0] add_ln27_3_fu_487_p2;
wire   [7:0] add_ln27_4_fu_497_p2;
wire   [7:0] add_ln27_5_fu_507_p2;
wire   [7:0] add_ln27_6_fu_517_p2;
wire   [7:0] add_ln27_7_fu_527_p2;
wire   [7:0] add_ln27_8_fu_537_p2;
wire   [8:0] tmp10_0_0_mid2_v_v_v_fu_649_p1;
wire   [8:0] tmp10_0_0_mid2_fu_663_p0;
wire   [6:0] tmp10_0_0_mid2_fu_663_p1;
wire   [8:0] tmp10_1_0_mid2_v_v_fu_674_p2;
wire   [8:0] tmp10_1_0_mid2_fu_683_p0;
wire   [6:0] tmp10_1_0_mid2_fu_683_p1;
wire   [13:0] add_ln40_fu_691_p2;
wire   [13:0] add_ln40_2_fu_710_p2;
wire   [8:0] tmp10_2_0_mid2_v_v_fu_720_p2;
wire   [8:0] tmp10_2_0_mid2_fu_729_p0;
wire   [6:0] tmp10_2_0_mid2_fu_729_p1;
wire   [4:0] add_ln40_3_fu_737_p2;
wire   [13:0] add_ln40_4_fu_746_p2;
wire   [13:0] add_ln40_5_fu_756_p2;
wire  signed [29:0] mul_ln40_fu_976_p2;
wire  signed [29:0] mul_ln40_1_fu_982_p2;
wire   [13:0] add_ln40_6_fu_791_p2;
wire   [13:0] add_ln40_7_fu_800_p2;
wire  signed [29:0] mul_ln40_2_fu_988_p2;
wire  signed [29:0] mul_ln40_3_fu_994_p2;
wire  signed [29:0] mul_ln40_4_fu_1000_p2;
wire  signed [29:0] mul_ln40_5_fu_1006_p2;
wire   [15:0] add_ln48_2_fu_889_p2;
wire  signed [29:0] mul_ln40_6_fu_1012_p2;
wire  signed [29:0] mul_ln40_7_fu_1018_p2;
wire  signed [29:0] mul_ln40_8_fu_1024_p2;
wire   [15:0] add_ln48_6_fu_941_p2;
wire   [15:0] add_ln48_7_fu_945_p2;
wire   [15:0] add_ln48_5_fu_937_p2;
wire   [15:0] add_ln48_4_fu_956_p2;
wire   [8:0] grp_fu_970_p0;
wire   [5:0] grp_fu_970_p1;
wire   [4:0] grp_fu_970_p2;
wire  signed [15:0] mul_ln40_fu_976_p0;
wire  signed [15:0] mul_ln40_1_fu_982_p0;
wire  signed [15:0] mul_ln40_2_fu_988_p0;
wire  signed [15:0] mul_ln40_3_fu_994_p0;
wire  signed [15:0] mul_ln40_4_fu_1000_p0;
wire  signed [15:0] mul_ln40_5_fu_1006_p0;
wire  signed [15:0] mul_ln40_6_fu_1012_p0;
wire  signed [15:0] mul_ln40_7_fu_1018_p0;
wire  signed [15:0] mul_ln40_8_fu_1024_p0;
reg   [12:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] bound_fu_408_p00;
wire   [9:0] bound_fu_408_p10;
wire   [13:0] grp_fu_970_p00;
wire   [13:0] tmp10_0_0_mid2_fu_663_p00;
wire   [13:0] tmp10_1_0_mid2_fu_683_p00;
wire   [13:0] tmp10_2_0_mid2_fu_729_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

network_mux_164_16_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
network_mux_164_16_1_1_x_U34(
    .din0(16'd0),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(16'd0),
    .din9(16'd0),
    .din10(16'd0),
    .din11(16'd0),
    .din12(16'd0),
    .din13(16'd0),
    .din14(16'd0),
    .din15(16'd0),
    .din16(trunc_ln27_reg_1080),
    .dout(tmp_4_fu_576_p18)
);

network_mac_muladd_9ns_6ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_mac_muladd_9ns_6ns_5ns_14_1_1_U35(
    .din0(grp_fu_970_p0),
    .din1(grp_fu_970_p1),
    .din2(grp_fu_970_p2),
    .dout(grp_fu_970_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U36(
    .din0(mul_ln40_fu_976_p0),
    .din1(reg_362),
    .dout(mul_ln40_fu_976_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U37(
    .din0(mul_ln40_1_fu_982_p0),
    .din1(reg_367),
    .dout(mul_ln40_1_fu_982_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U38(
    .din0(mul_ln40_2_fu_988_p0),
    .din1(reg_362),
    .dout(mul_ln40_2_fu_988_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U39(
    .din0(mul_ln40_3_fu_994_p0),
    .din1(reg_367),
    .dout(mul_ln40_3_fu_994_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U40(
    .din0(mul_ln40_4_fu_1000_p0),
    .din1(reg_362),
    .dout(mul_ln40_4_fu_1000_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U41(
    .din0(mul_ln40_5_fu_1006_p0),
    .din1(reg_367),
    .dout(mul_ln40_5_fu_1006_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U42(
    .din0(mul_ln40_6_fu_1012_p0),
    .din1(reg_362),
    .dout(mul_ln40_6_fu_1012_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U43(
    .din0(mul_ln40_7_fu_1018_p0),
    .din1(reg_367),
    .dout(mul_ln40_7_fu_1018_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U44(
    .din0(mul_ln40_8_fu_1024_p0),
    .din1(reg_362),
    .dout(mul_ln40_8_fu_1024_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_328 <= add_ln32_reg_1231;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_328 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        out_d_0_reg_293 <= out_d_reg_1075;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_293 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_h_0_reg_339 <= tmp10_0_0_mid2_v_v_v_1_reg_1253;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        out_h_0_reg_339 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_0_reg_351 <= out_w_reg_1295;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        out_w_0_reg_351 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        phi_mul5_reg_316 <= add_ln23_reg_1062;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul5_reg_316 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        phi_mul_reg_304 <= add_ln23_1_reg_1067;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_304 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln32_reg_1227_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln32_reg_1227_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_362 <= input_r_q0;
    end else if ((((icmp_ln32_reg_1227 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln32_reg_1227 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln32_reg_1227 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_362 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        reg_367 <= input_r_q1;
    end else if ((((icmp_ln32_reg_1227 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln32_reg_1227 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln32_reg_1227 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        reg_367 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln23_1_reg_1067 <= add_ln23_1_fu_419_p2;
        add_ln23_reg_1062 <= add_ln23_fu_414_p2;
        out_d_reg_1075 <= out_d_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_424_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln27_reg_1085 <= add_ln27_fu_456_p2;
        trunc_ln27_reg_1080 <= trunc_ln27_fu_440_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln32_reg_1231 <= add_ln32_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln32_reg_1227 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln40_10_reg_1369 <= add_ln40_10_fu_817_p2;
        add_ln40_8_reg_1359 <= add_ln40_8_fu_809_p2;
        add_ln40_9_reg_1364 <= add_ln40_9_fu_813_p2;
        trunc_ln48_s_reg_1344 <= {{mul_ln40_1_fu_982_p2[29:14]}};
        trunc_ln_reg_1339 <= {{mul_ln40_fu_976_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln48_1_reg_1394 <= add_ln48_1_fu_855_p2;
        trunc_ln48_1_reg_1374 <= {{mul_ln40_2_fu_988_p2[29:14]}};
        trunc_ln48_2_reg_1379 <= {{mul_ln40_3_fu_994_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln48_3_reg_1414 <= add_ln48_3_fu_893_p2;
        trunc_ln48_3_reg_1399 <= {{mul_ln40_4_fu_1000_p2[29:14]}};
        trunc_ln48_4_reg_1404 <= {{mul_ln40_5_fu_1006_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln32_reg_1227_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln48_8_reg_1434 <= add_ln48_8_fu_950_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln48_reg_1334 <= grp_fu_970_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln48_reg_1334_pp0_iter1_reg <= add_ln48_reg_1334;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_1057 <= bound_fu_408_p2;
        empty_reg_1052 <= empty_fu_392_p1;
        zext_ln40_1_cast29_reg_1035[6 : 0] <= zext_ln40_1_cast29_fu_380_p1[6 : 0];
        zext_ln40_reg_1030[6 : 0] <= zext_ln40_fu_376_p1[6 : 0];
        zext_ln48_1_cast_reg_1047[5 : 0] <= zext_ln48_1_cast_fu_388_p1[5 : 0];
        zext_ln48_reg_1042[5 : 0] <= zext_ln48_fu_384_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln32_reg_1227 <= icmp_ln32_fu_613_p2;
        icmp_ln32_reg_1227_pp0_iter1_reg <= icmp_ln32_reg_1227;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln33_reg_1241 <= icmp_ln33_fu_630_p2;
        out_h_reg_1236 <= out_h_fu_624_p2;
        out_w_0_mid2_reg_1246 <= out_w_0_mid2_fu_635_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_load_1_reg_1117 <= kernel_q0;
        kernel_load_2_reg_1122 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_load_3_reg_1137 <= kernel_q1;
        kernel_load_4_reg_1142 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_load_5_reg_1157 <= kernel_q1;
        kernel_load_6_reg_1162 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_load_reg_1102 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        out_w_reg_1295 <= out_w_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sext_ln27_1_reg_1182 <= sext_ln27_1_fu_550_p1;
        sext_ln27_2_reg_1187 <= sext_ln27_2_fu_553_p1;
        sext_ln27_3_reg_1192 <= sext_ln27_3_fu_556_p1;
        sext_ln27_4_reg_1197 <= sext_ln27_4_fu_559_p1;
        sext_ln27_5_reg_1202 <= sext_ln27_5_fu_562_p1;
        sext_ln27_6_reg_1207 <= sext_ln27_6_fu_565_p1;
        sext_ln27_7_reg_1212 <= sext_ln27_7_fu_568_p1;
        sext_ln27_reg_1177 <= sext_ln27_fu_547_p1;
        sext_ln30_reg_1217 <= sext_ln30_fu_572_p1;
        tmp_4_reg_1222 <= tmp_4_fu_576_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp10_0_0_mid2_reg_1264 <= tmp10_0_0_mid2_fu_663_p2;
        tmp10_0_0_mid2_v_v_reg_1258 <= tmp10_0_0_mid2_v_v_fu_653_p2;
        tmp12_mid2_v_v_reg_1271 <= tmp12_mid2_v_v_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp10_0_0_mid2_v_v_v_1_reg_1253 <= tmp10_0_0_mid2_v_v_v_1_fu_643_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp10_1_0_mid2_reg_1276 <= tmp10_1_0_mid2_fu_683_p2;
        zext_ln40_1_reg_1283[4 : 0] <= zext_ln40_1_fu_688_p1[4 : 0];
        zext_ln40_3_reg_1300[4 : 0] <= zext_ln40_3_fu_706_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp10_2_0_mid2_reg_1311 <= tmp10_2_0_mid2_fu_729_p2;
        zext_ln40_5_reg_1318[4 : 0] <= zext_ln40_5_fu_742_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        trunc_ln48_5_reg_1419 <= {{mul_ln40_6_fu_1012_p2[29:14]}};
        trunc_ln48_6_reg_1424 <= {{mul_ln40_7_fu_1018_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1227_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        trunc_ln48_7_reg_1429 <= {{mul_ln40_8_fu_1024_p2[29:14]}};
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_613_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_424_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_332_p4 = add_ln32_reg_1231;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_332_p4 = indvar_flatten_reg_328;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_h_0_phi_fu_343_p4 = tmp10_0_0_mid2_v_v_v_1_reg_1253;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_343_p4 = out_h_0_reg_339;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1227 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_355_p4 = out_w_reg_1295;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_355_p4 = out_w_0_reg_351;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_424_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_address0 = zext_ln40_12_fu_885_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln40_10_fu_847_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln40_9_fu_804_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln40_7_fu_760_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln40_4_fu_715_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln40_11_fu_851_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address1 = zext_ln40_8_fu_795_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address1 = zext_ln40_6_fu_751_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address1 = zext_ln40_2_fu_696_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_address0 = zext_ln27_10_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_address0 = zext_ln27_8_fu_522_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_address0 = zext_ln27_6_fu_502_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_address0 = zext_ln27_3_fu_472_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_address0 = zext_ln27_2_fu_462_p1;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_address1 = zext_ln27_9_fu_532_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_address1 = zext_ln27_7_fu_512_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_address1 = zext_ln27_5_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_address1 = zext_ln27_4_fu_482_p1;
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1227_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_424_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln32_fu_613_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln32_fu_613_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_1_fu_419_p2 = (phi_mul_reg_304 + zext_ln40_reg_1030);

assign add_ln23_fu_414_p2 = (phi_mul5_reg_316 + zext_ln48_reg_1042);

assign add_ln27_1_fu_467_p2 = (8'd1 + add_ln27_reg_1085);

assign add_ln27_2_fu_477_p2 = (8'd2 + add_ln27_reg_1085);

assign add_ln27_3_fu_487_p2 = (8'd3 + add_ln27_reg_1085);

assign add_ln27_4_fu_497_p2 = (8'd4 + add_ln27_reg_1085);

assign add_ln27_5_fu_507_p2 = (8'd5 + add_ln27_reg_1085);

assign add_ln27_6_fu_517_p2 = (8'd6 + add_ln27_reg_1085);

assign add_ln27_7_fu_527_p2 = (8'd7 + add_ln27_reg_1085);

assign add_ln27_8_fu_537_p2 = (8'd8 + add_ln27_reg_1085);

assign add_ln27_fu_456_p2 = (zext_ln27_fu_436_p1 + zext_ln27_1_fu_452_p1);

assign add_ln32_fu_618_p2 = (ap_phi_mux_indvar_flatten_phi_fu_332_p4 + 10'd1);

assign add_ln40_10_fu_817_p2 = (zext_ln40_5_reg_1318 + tmp10_2_0_mid2_reg_1311);

assign add_ln40_2_fu_710_p2 = (zext_ln40_3_fu_706_p1 + tmp10_0_0_mid2_reg_1264);

assign add_ln40_3_fu_737_p2 = (out_w_0_mid2_reg_1246 + 5'd2);

assign add_ln40_4_fu_746_p2 = (zext_ln40_5_fu_742_p1 + tmp10_0_0_mid2_reg_1264);

assign add_ln40_5_fu_756_p2 = (tmp10_1_0_mid2_reg_1276 + zext_ln40_1_reg_1283);

assign add_ln40_6_fu_791_p2 = (zext_ln40_3_reg_1300 + tmp10_1_0_mid2_reg_1276);

assign add_ln40_7_fu_800_p2 = (zext_ln40_5_reg_1318 + tmp10_1_0_mid2_reg_1276);

assign add_ln40_8_fu_809_p2 = (tmp10_2_0_mid2_reg_1311 + zext_ln40_1_reg_1283);

assign add_ln40_9_fu_813_p2 = (zext_ln40_3_reg_1300 + tmp10_2_0_mid2_reg_1311);

assign add_ln40_fu_691_p2 = (tmp10_0_0_mid2_reg_1264 + zext_ln40_1_fu_688_p1);

assign add_ln48_1_fu_855_p2 = (trunc_ln_reg_1339 + tmp_4_reg_1222);

assign add_ln48_2_fu_889_p2 = (trunc_ln48_1_reg_1374 + trunc_ln48_2_reg_1379);

assign add_ln48_3_fu_893_p2 = (add_ln48_2_fu_889_p2 + trunc_ln48_s_reg_1344);

assign add_ln48_4_fu_956_p2 = (add_ln48_3_reg_1414 + add_ln48_1_reg_1394);

assign add_ln48_5_fu_937_p2 = (trunc_ln48_3_reg_1399 + trunc_ln48_4_reg_1404);

assign add_ln48_6_fu_941_p2 = (trunc_ln48_6_reg_1424 + trunc_ln48_7_reg_1429);

assign add_ln48_7_fu_945_p2 = (add_ln48_6_fu_941_p2 + trunc_ln48_5_reg_1419);

assign add_ln48_8_fu_950_p2 = (add_ln48_7_fu_945_p2 + add_ln48_5_fu_937_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_408_p0 = bound_fu_408_p00;

assign bound_fu_408_p00 = empty_fu_392_p1;

assign bound_fu_408_p1 = bound_fu_408_p10;

assign bound_fu_408_p10 = empty_56_fu_396_p1;

assign bound_fu_408_p2 = (bound_fu_408_p0 * bound_fu_408_p1);

assign empty_56_fu_396_p1 = output_height[4:0];

assign empty_fu_392_p1 = output_width[4:0];

assign grp_fu_970_p0 = grp_fu_970_p00;

assign grp_fu_970_p00 = tmp12_mid2_v_v_reg_1271;

assign grp_fu_970_p1 = zext_ln48_1_cast_reg_1047;

assign grp_fu_970_p2 = zext_ln40_1_reg_1283;

assign icmp_ln23_fu_424_p2 = ((out_d_0_reg_293 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_613_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_332_p4 == bound_reg_1057) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_630_p2 = ((ap_phi_mux_out_w_0_phi_fu_355_p4 == empty_reg_1052) ? 1'b1 : 1'b0);

assign mul_ln40_1_fu_982_p0 = sext_ln27_1_reg_1182;

assign mul_ln40_2_fu_988_p0 = sext_ln27_2_reg_1187;

assign mul_ln40_3_fu_994_p0 = sext_ln27_3_reg_1192;

assign mul_ln40_4_fu_1000_p0 = sext_ln27_4_reg_1197;

assign mul_ln40_5_fu_1006_p0 = sext_ln27_5_reg_1202;

assign mul_ln40_6_fu_1012_p0 = sext_ln27_6_reg_1207;

assign mul_ln40_7_fu_1018_p0 = sext_ln27_7_reg_1212;

assign mul_ln40_8_fu_1024_p0 = sext_ln30_reg_1217;

assign mul_ln40_fu_976_p0 = sext_ln27_reg_1177;

assign out_d_fu_430_p2 = (out_d_0_reg_293 + 5'd1);

assign out_h_fu_624_p2 = (ap_phi_mux_out_h_0_phi_fu_343_p4 + 5'd1);

assign out_w_0_mid2_fu_635_p3 = ((icmp_ln33_fu_630_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_w_0_phi_fu_355_p4);

assign out_w_fu_701_p2 = (out_w_0_mid2_reg_1246 + 5'd1);

assign output_r_address0 = zext_ln48_1_fu_966_p1;

assign output_r_d0 = (add_ln48_8_reg_1434 + add_ln48_4_fu_956_p2);

assign sext_ln27_1_fu_550_p1 = $signed(kernel_load_1_reg_1117);

assign sext_ln27_2_fu_553_p1 = $signed(kernel_load_2_reg_1122);

assign sext_ln27_3_fu_556_p1 = $signed(kernel_load_3_reg_1137);

assign sext_ln27_4_fu_559_p1 = $signed(kernel_load_4_reg_1142);

assign sext_ln27_5_fu_562_p1 = $signed(kernel_load_5_reg_1157);

assign sext_ln27_6_fu_565_p1 = $signed(kernel_load_6_reg_1162);

assign sext_ln27_7_fu_568_p1 = $signed(kernel_q1);

assign sext_ln27_fu_547_p1 = $signed(kernel_load_reg_1102);

assign sext_ln30_fu_572_p1 = $signed(kernel_q0);

assign sext_ln4_fu_372_p1 = $signed(input_width);

assign shl_ln_fu_444_p3 = {{trunc_ln27_fu_440_p1}, {3'd0}};

assign tmp10_0_0_mid2_fu_663_p0 = tmp10_0_0_mid2_fu_663_p00;

assign tmp10_0_0_mid2_fu_663_p00 = tmp10_0_0_mid2_v_v_fu_653_p2;

assign tmp10_0_0_mid2_fu_663_p1 = zext_ln40_1_cast29_reg_1035;

assign tmp10_0_0_mid2_fu_663_p2 = (tmp10_0_0_mid2_fu_663_p0 * tmp10_0_0_mid2_fu_663_p1);

assign tmp10_0_0_mid2_v_v_fu_653_p2 = (phi_mul_reg_304 + tmp10_0_0_mid2_v_v_v_fu_649_p1);

assign tmp10_0_0_mid2_v_v_v_1_fu_643_p3 = ((icmp_ln33_reg_1241[0:0] === 1'b1) ? out_h_reg_1236 : out_h_0_reg_339);

assign tmp10_0_0_mid2_v_v_v_fu_649_p1 = tmp10_0_0_mid2_v_v_v_1_fu_643_p3;

assign tmp10_1_0_mid2_fu_683_p0 = tmp10_1_0_mid2_fu_683_p00;

assign tmp10_1_0_mid2_fu_683_p00 = tmp10_1_0_mid2_v_v_fu_674_p2;

assign tmp10_1_0_mid2_fu_683_p1 = zext_ln40_1_cast29_reg_1035;

assign tmp10_1_0_mid2_fu_683_p2 = (tmp10_1_0_mid2_fu_683_p0 * tmp10_1_0_mid2_fu_683_p1);

assign tmp10_1_0_mid2_v_v_fu_674_p2 = (tmp10_0_0_mid2_v_v_reg_1258 + 9'd1);

assign tmp10_2_0_mid2_fu_729_p0 = tmp10_2_0_mid2_fu_729_p00;

assign tmp10_2_0_mid2_fu_729_p00 = tmp10_2_0_mid2_v_v_fu_720_p2;

assign tmp10_2_0_mid2_fu_729_p1 = zext_ln40_1_cast29_reg_1035;

assign tmp10_2_0_mid2_fu_729_p2 = (tmp10_2_0_mid2_fu_729_p0 * tmp10_2_0_mid2_fu_729_p1);

assign tmp10_2_0_mid2_v_v_fu_720_p2 = (tmp10_0_0_mid2_v_v_reg_1258 + 9'd2);

assign tmp12_mid2_v_v_fu_668_p2 = (phi_mul5_reg_316 + tmp10_0_0_mid2_v_v_v_fu_649_p1);

assign trunc_ln27_fu_440_p1 = out_d_0_reg_293[3:0];

assign zext_ln27_10_fu_542_p1 = add_ln27_8_fu_537_p2;

assign zext_ln27_1_fu_452_p1 = shl_ln_fu_444_p3;

assign zext_ln27_2_fu_462_p1 = add_ln27_fu_456_p2;

assign zext_ln27_3_fu_472_p1 = add_ln27_1_fu_467_p2;

assign zext_ln27_4_fu_482_p1 = add_ln27_2_fu_477_p2;

assign zext_ln27_5_fu_492_p1 = add_ln27_3_fu_487_p2;

assign zext_ln27_6_fu_502_p1 = add_ln27_4_fu_497_p2;

assign zext_ln27_7_fu_512_p1 = add_ln27_5_fu_507_p2;

assign zext_ln27_8_fu_522_p1 = add_ln27_6_fu_517_p2;

assign zext_ln27_9_fu_532_p1 = add_ln27_7_fu_527_p2;

assign zext_ln27_fu_436_p1 = out_d_0_reg_293;

assign zext_ln40_10_fu_847_p1 = add_ln40_8_reg_1359;

assign zext_ln40_11_fu_851_p1 = add_ln40_9_reg_1364;

assign zext_ln40_12_fu_885_p1 = add_ln40_10_reg_1369;

assign zext_ln40_1_cast29_fu_380_p1 = $unsigned(sext_ln4_fu_372_p1);

assign zext_ln40_1_fu_688_p1 = out_w_0_mid2_reg_1246;

assign zext_ln40_2_fu_696_p1 = add_ln40_fu_691_p2;

assign zext_ln40_3_fu_706_p1 = out_w_fu_701_p2;

assign zext_ln40_4_fu_715_p1 = add_ln40_2_fu_710_p2;

assign zext_ln40_5_fu_742_p1 = add_ln40_3_fu_737_p2;

assign zext_ln40_6_fu_751_p1 = add_ln40_4_fu_746_p2;

assign zext_ln40_7_fu_760_p1 = add_ln40_5_fu_756_p2;

assign zext_ln40_8_fu_795_p1 = add_ln40_6_fu_791_p2;

assign zext_ln40_9_fu_804_p1 = add_ln40_7_fu_800_p2;

assign zext_ln40_fu_376_p1 = input_height;

assign zext_ln48_1_cast_fu_388_p1 = output_width;

assign zext_ln48_1_fu_966_p1 = add_ln48_reg_1334_pp0_iter1_reg;

assign zext_ln48_fu_384_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln40_reg_1030[8:7] <= 2'b00;
    zext_ln40_1_cast29_reg_1035[13:7] <= 7'b0000000;
    zext_ln48_reg_1042[8:6] <= 3'b000;
    zext_ln48_1_cast_reg_1047[13:6] <= 8'b00000000;
    zext_ln40_1_reg_1283[13:5] <= 9'b000000000;
    zext_ln40_3_reg_1300[13:5] <= 9'b000000000;
    zext_ln40_5_reg_1318[13:5] <= 9'b000000000;
end

endmodule //depthwise_conv2d_fix_2
