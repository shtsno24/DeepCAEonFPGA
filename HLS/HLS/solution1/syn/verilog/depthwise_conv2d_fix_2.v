// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel1_address0,
        kernel1_ce0,
        kernel1_q0,
        kernel2_address0,
        kernel2_ce0,
        kernel2_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state20 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [5:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [5:0] kernel1_address0;
output   kernel1_ce0;
input  [15:0] kernel1_q0;
output  [5:0] kernel2_address0;
output   kernel2_ce0;
input  [15:0] kernel2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg kernel_ce0;
reg kernel1_ce0;
reg kernel2_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] indvar_flatten39_reg_254;
reg   [4:0] out_d_0_reg_266;
reg   [9:0] indvar_flatten_reg_278;
reg   [4:0] out_h_0_reg_289;
reg   [4:0] out_w_0_reg_300;
reg  signed [15:0] reg_312;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state16_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] icmp_ln21_reg_1028;
reg   [0:0] icmp_ln21_reg_1028_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state17_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_state18_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln21_reg_1028_pp0_iter2_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_state19_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg  signed [15:0] reg_317;
wire   [8:0] zext_ln34_fu_326_p1;
reg   [8:0] zext_ln34_reg_973;
wire   [13:0] zext_ln34_2_cast14_fu_330_p1;
reg   [13:0] zext_ln34_2_cast14_reg_979;
wire   [8:0] zext_ln40_fu_334_p1;
reg   [8:0] zext_ln40_reg_986;
wire   [13:0] zext_ln40_1_cast_fu_338_p1;
reg   [13:0] zext_ln40_1_cast_reg_992;
wire   [4:0] empty_fu_342_p1;
reg   [4:0] empty_reg_997;
wire   [9:0] mul_ln5_fu_358_p2;
reg   [9:0] mul_ln5_reg_1002;
wire   [13:0] tmp_4_fu_364_p3;
reg   [13:0] tmp_4_reg_1007;
wire   [0:0] icmp_ln23_fu_372_p2;
reg   [0:0] icmp_ln23_reg_1012;
wire   [8:0] zext_ln40_1_fu_378_p1;
reg   [8:0] zext_ln40_1_reg_1017;
wire   [8:0] mul_ln34_fu_382_p2;
reg   [8:0] mul_ln34_reg_1022;
wire   [0:0] icmp_ln21_fu_387_p2;
reg   [0:0] icmp_ln21_reg_1028_pp0_iter3_reg;
wire   [4:0] out_d_fu_392_p2;
reg   [4:0] out_d_reg_1032;
wire   [0:0] icmp_ln22_fu_398_p2;
reg   [0:0] icmp_ln22_reg_1038;
wire   [9:0] add_ln22_1_fu_403_p2;
reg   [9:0] add_ln22_1_reg_1051;
wire   [8:0] zext_ln34_4_cast_fu_409_p1;
reg   [8:0] zext_ln34_4_cast_reg_1056;
wire   [4:0] select_ln28_fu_413_p3;
reg   [4:0] select_ln28_reg_1062;
wire   [4:0] select_ln28_3_fu_420_p3;
reg   [4:0] select_ln28_3_reg_1068;
reg    ap_enable_reg_pp0_iter0;
reg   [4:0] select_ln28_3_reg_1068_pp0_iter1_reg;
reg   [4:0] select_ln28_3_reg_1068_pp0_iter2_reg;
wire   [8:0] zext_ln40_2_fu_426_p1;
reg   [8:0] zext_ln40_2_reg_1074;
wire   [8:0] mul_ln34_2_fu_429_p2;
reg   [8:0] mul_ln34_2_reg_1079;
wire   [1:0] trunc_ln28_fu_434_p1;
reg   [1:0] trunc_ln28_reg_1085;
reg   [1:0] trunc_ln28_reg_1085_pp0_iter1_reg;
wire   [0:0] icmp_ln23_1_fu_438_p2;
reg   [0:0] icmp_ln23_1_reg_1093;
wire   [8:0] mul_ln40_fu_443_p2;
reg   [8:0] mul_ln40_reg_1098;
wire   [0:0] select_ln28_8_fu_447_p3;
reg   [0:0] select_ln28_8_reg_1104;
wire   [4:0] out_h_fu_452_p2;
reg   [4:0] out_h_reg_1112;
wire   [8:0] tmp_0_0_fu_457_p2;
reg   [8:0] tmp_0_0_reg_1118;
wire   [8:0] tmp6_fu_461_p2;
reg   [8:0] tmp6_reg_1123;
wire   [13:0] add_ln21_fu_465_p2;
reg   [13:0] add_ln21_reg_1128;
wire   [8:0] mul_ln40_1_fu_476_p2;
reg   [8:0] mul_ln40_1_reg_1133;
wire   [4:0] out_w_0_mid2_fu_484_p3;
reg   [4:0] out_w_0_mid2_reg_1139;
wire   [8:0] zext_ln34_4_cast_mid_fu_492_p1;
reg   [8:0] zext_ln34_4_cast_mid_reg_1146;
wire   [8:0] tmp_0_0_mid1_fu_495_p2;
reg   [8:0] tmp_0_0_mid1_reg_1151;
wire   [4:0] select_ln22_fu_501_p3;
reg   [4:0] select_ln22_reg_1156;
wire   [8:0] tmp5_0_0_mid2_v_v_fu_516_p3;
reg   [8:0] tmp5_0_0_mid2_v_v_reg_1161;
wire   [8:0] tmp6_mid1_fu_522_p2;
reg   [8:0] tmp6_mid1_reg_1168;
wire   [9:0] select_ln22_1_fu_527_p3;
reg   [9:0] select_ln22_1_reg_1173;
wire   [13:0] tmp5_0_0_mid2_fu_541_p2;
reg   [13:0] tmp5_0_0_mid2_reg_1178;
wire   [8:0] tmp5_2_0_mid2_v_v_fu_546_p2;
reg   [8:0] tmp5_2_0_mid2_v_v_reg_1185;
wire   [8:0] tmp7_mid2_v_v_fu_551_p3;
reg   [8:0] tmp7_mid2_v_v_reg_1190;
wire   [4:0] out_w_fu_557_p2;
reg   [4:0] out_w_reg_1195;
wire   [1:0] add_ln28_fu_562_p2;
reg   [1:0] add_ln28_reg_1201;
wire   [1:0] xor_ln28_fu_567_p2;
reg   [1:0] xor_ln28_reg_1206;
wire   [1:0] add_ln28_5_fu_572_p2;
reg   [1:0] add_ln28_5_reg_1211;
wire   [8:0] tmp5_1_0_mid2_v_v_fu_577_p2;
reg   [8:0] tmp5_1_0_mid2_v_v_reg_1216;
wire   [13:0] tmp5_2_0_mid2_fu_585_p2;
reg   [13:0] tmp5_2_0_mid2_reg_1221;
wire   [13:0] zext_ln34_10_fu_590_p1;
reg   [13:0] zext_ln34_10_reg_1228;
wire   [13:0] add_ln34_fu_593_p2;
reg   [13:0] add_ln34_reg_1235;
reg   [15:0] kernel_load_reg_1240;
reg   [15:0] kernel1_load_reg_1248;
reg   [15:0] kernel2_load_reg_1256;
wire   [13:0] zext_ln34_12_fu_598_p1;
reg   [13:0] zext_ln34_12_reg_1264;
wire   [13:0] add_ln34_4_fu_601_p2;
reg   [13:0] add_ln34_4_reg_1270;
wire   [13:0] tmp5_1_0_mid2_fu_609_p2;
reg   [13:0] tmp5_1_0_mid2_reg_1275;
wire   [4:0] add_ln34_5_fu_638_p2;
reg   [4:0] add_ln34_5_reg_1292;
wire   [13:0] add_ln34_10_fu_659_p2;
reg   [13:0] add_ln34_10_reg_1297;
wire   [13:0] add_ln34_11_fu_663_p2;
reg   [13:0] add_ln34_11_reg_1302;
wire   [13:0] zext_ln34_14_fu_667_p1;
reg   [13:0] zext_ln34_14_reg_1307;
wire   [13:0] add_ln34_6_fu_670_p2;
reg   [13:0] add_ln34_6_reg_1312;
wire   [13:0] add_ln34_12_fu_683_p2;
reg   [13:0] add_ln34_12_reg_1327;
wire   [15:0] grp_fu_618_p5;
reg  signed [15:0] tmp_s_reg_1332;
wire   [15:0] grp_fu_630_p5;
reg  signed [15:0] tmp_1_reg_1337;
wire   [15:0] grp_fu_643_p5;
reg  signed [15:0] tmp_2_reg_1347;
wire   [13:0] add_ln34_7_fu_695_p2;
reg   [13:0] add_ln34_7_reg_1352;
wire   [15:0] grp_fu_651_p5;
reg  signed [15:0] tmp_3_reg_1357;
wire   [13:0] add_ln34_8_fu_699_p2;
reg   [13:0] add_ln34_8_reg_1362;
wire   [13:0] add_ln34_9_fu_703_p2;
reg   [13:0] add_ln34_9_reg_1367;
wire   [13:0] grp_fu_903_p3;
reg   [13:0] add_ln40_reg_1377;
reg   [13:0] add_ln40_reg_1377_pp0_iter2_reg;
wire  signed [29:0] sext_ln34_2_fu_715_p1;
reg  signed [29:0] sext_ln34_2_reg_1382;
wire  signed [29:0] mul_ln34_3_fu_909_p2;
reg  signed [29:0] mul_ln34_3_reg_1388;
wire  signed [29:0] sext_ln34_4_fu_722_p1;
reg  signed [29:0] sext_ln34_4_reg_1393;
wire  signed [29:0] mul_ln34_4_fu_915_p2;
reg  signed [29:0] mul_ln34_4_reg_1398;
reg   [15:0] trunc_ln_reg_1413;
reg   [15:0] trunc_ln40_s_reg_1418;
wire  signed [29:0] sext_ln34_6_fu_751_p1;
reg  signed [29:0] sext_ln34_6_reg_1423;
wire  signed [29:0] sext_ln34_8_fu_754_p1;
reg  signed [29:0] sext_ln34_8_reg_1428;
wire  signed [29:0] mul_ln34_9_fu_921_p2;
reg  signed [29:0] mul_ln34_9_reg_1438;
wire  signed [29:0] mul_ln34_10_fu_927_p2;
reg  signed [29:0] mul_ln34_10_reg_1443;
wire  signed [29:0] mul_ln34_5_fu_933_p2;
reg  signed [29:0] mul_ln34_5_reg_1453;
reg   [15:0] trunc_ln40_5_reg_1458;
reg   [15:0] trunc_ln40_6_reg_1463;
wire  signed [29:0] mul_ln34_11_fu_938_p2;
reg  signed [29:0] mul_ln34_11_reg_1468;
reg   [15:0] bias_load_reg_1473;
reg   [15:0] trunc_ln40_1_reg_1478;
wire  signed [29:0] mul_ln34_6_fu_943_p2;
reg  signed [29:0] mul_ln34_6_reg_1483;
wire  signed [29:0] mul_ln34_7_fu_948_p2;
reg  signed [29:0] mul_ln34_7_reg_1488;
wire   [15:0] add_ln40_7_fu_830_p2;
reg   [15:0] add_ln40_7_reg_1493;
reg   [15:0] trunc_ln40_3_reg_1498;
wire  signed [29:0] mul_ln34_8_fu_953_p2;
reg  signed [29:0] mul_ln34_8_reg_1503;
wire   [15:0] add_ln40_1_fu_857_p2;
reg   [15:0] add_ln40_1_reg_1508;
wire   [15:0] add_ln40_3_fu_866_p2;
reg   [15:0] add_ln40_3_reg_1513;
wire   [15:0] add_ln40_8_fu_885_p2;
reg   [15:0] add_ln40_8_reg_1518;
wire   [15:0] add_ln40_9_fu_894_p2;
reg   [15:0] add_ln40_9_reg_1523;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [13:0] ap_phi_mux_indvar_flatten39_phi_fu_258_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_out_d_0_phi_fu_270_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_282_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_293_p4;
wire    ap_block_pp0_stage1;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_304_p4;
wire   [63:0] zext_ln34_11_fu_614_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln34_13_fu_626_p1;
wire   [63:0] zext_ln34_19_fu_675_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln34_20_fu_679_p1;
wire   [63:0] zext_ln34_15_fu_691_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln34_21_fu_707_p1;
wire   [63:0] zext_ln34_16_fu_725_p1;
wire   [63:0] zext_ln34_17_fu_729_p1;
wire   [63:0] zext_ln34_18_fu_757_p1;
wire   [63:0] zext_ln28_fu_769_p1;
wire   [63:0] zext_ln40_3_fu_899_p1;
wire  signed [6:0] sext_ln34_14_fu_322_p1;
wire   [4:0] empty_46_fu_346_p1;
wire   [4:0] mul_ln5_fu_358_p0;
wire   [4:0] mul_ln5_fu_358_p1;
wire   [4:0] mul_ln34_fu_382_p0;
wire   [6:0] mul_ln34_fu_382_p1;
wire   [6:0] mul_ln34_2_fu_429_p0;
wire   [4:0] mul_ln34_2_fu_429_p1;
wire   [4:0] mul_ln40_fu_443_p0;
wire   [5:0] mul_ln40_fu_443_p1;
wire   [5:0] mul_ln40_1_fu_476_p0;
wire   [4:0] mul_ln40_1_fu_476_p1;
wire   [0:0] empty_48_fu_480_p2;
wire   [8:0] select_ln28_4_fu_471_p3;
wire   [8:0] select_ln28_6_fu_511_p3;
wire   [8:0] select_ln28_5_fu_506_p3;
wire   [6:0] tmp5_0_0_mid2_fu_541_p0;
wire   [8:0] tmp5_0_0_mid2_fu_541_p1;
wire   [8:0] select_ln28_7_fu_533_p3;
wire   [6:0] tmp5_2_0_mid2_fu_585_p0;
wire   [8:0] tmp5_2_0_mid2_fu_585_p1;
wire   [6:0] tmp5_1_0_mid2_fu_609_p0;
wire   [8:0] tmp5_1_0_mid2_fu_609_p1;
wire   [15:0] trunc_ln40_7_fu_816_p4;
wire   [15:0] add_ln40_6_fu_825_p2;
wire   [15:0] trunc_ln40_2_fu_835_p4;
wire   [15:0] add_ln40_2_fu_861_p2;
wire   [15:0] trunc_ln40_4_fu_871_p4;
wire   [15:0] add_ln40_5_fu_880_p2;
wire   [15:0] add_ln40_4_fu_890_p2;
wire   [5:0] grp_fu_903_p0;
wire   [8:0] grp_fu_903_p1;
wire   [4:0] grp_fu_903_p2;
wire  signed [15:0] mul_ln34_5_fu_933_p1;
wire  signed [15:0] mul_ln34_11_fu_938_p1;
wire  signed [15:0] mul_ln34_6_fu_943_p1;
wire  signed [15:0] mul_ln34_7_fu_948_p1;
wire  signed [15:0] mul_ln34_8_fu_953_p1;
wire    ap_CS_fsm_state20;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] grp_fu_903_p10;
wire   [8:0] mul_ln34_2_fu_429_p10;
wire   [8:0] mul_ln34_fu_382_p00;
wire   [9:0] mul_ln5_fu_358_p00;
wire   [9:0] mul_ln5_fu_358_p10;
wire   [13:0] tmp5_0_0_mid2_fu_541_p10;
wire   [13:0] tmp5_1_0_mid2_fu_609_p10;
wire   [13:0] tmp5_2_0_mid2_fu_585_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

network_mux_32_16_3_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_3_1_x_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_load_reg_1240),
    .din1(kernel1_load_reg_1248),
    .din2(kernel2_load_reg_1256),
    .din3(trunc_ln28_reg_1085_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_618_p5)
);

network_mux_32_16_3_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_3_1_x_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_load_reg_1240),
    .din1(kernel1_load_reg_1248),
    .din2(kernel2_load_reg_1256),
    .din3(add_ln28_reg_1201),
    .ce(1'b1),
    .dout(grp_fu_630_p5)
);

network_mux_32_16_3_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_3_1_x_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_load_reg_1240),
    .din1(kernel1_load_reg_1248),
    .din2(kernel2_load_reg_1256),
    .din3(xor_ln28_reg_1206),
    .ce(1'b1),
    .dout(grp_fu_643_p5)
);

network_mux_32_16_3_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_3_1_x_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_load_reg_1240),
    .din1(kernel1_load_reg_1248),
    .din2(kernel2_load_reg_1256),
    .din3(add_ln28_5_reg_1211),
    .ce(1'b1),
    .dout(grp_fu_651_p5)
);

network_mac_muladd_6ns_9ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_mac_muladd_6ns_9ns_5ns_14_1_1_U45(
    .din0(grp_fu_903_p0),
    .din1(grp_fu_903_p1),
    .din2(grp_fu_903_p2),
    .dout(grp_fu_903_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U46(
    .din0(reg_312),
    .din1(tmp_s_reg_1332),
    .dout(mul_ln34_3_fu_909_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U47(
    .din0(reg_317),
    .din1(tmp_1_reg_1337),
    .dout(mul_ln34_4_fu_915_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U48(
    .din0(reg_312),
    .din1(tmp_2_reg_1347),
    .dout(mul_ln34_9_fu_921_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U49(
    .din0(reg_317),
    .din1(tmp_3_reg_1357),
    .dout(mul_ln34_10_fu_927_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U50(
    .din0(reg_312),
    .din1(mul_ln34_5_fu_933_p1),
    .dout(mul_ln34_5_fu_933_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U51(
    .din0(reg_317),
    .din1(mul_ln34_11_fu_938_p1),
    .dout(mul_ln34_11_fu_938_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U52(
    .din0(reg_312),
    .din1(mul_ln34_6_fu_943_p1),
    .dout(mul_ln34_6_fu_943_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U53(
    .din0(reg_317),
    .din1(mul_ln34_7_fu_948_p1),
    .dout(mul_ln34_7_fu_948_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U54(
    .din0(reg_312),
    .din1(mul_ln34_8_fu_953_p1),
    .dout(mul_ln34_8_fu_953_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten39_reg_254 <= add_ln21_reg_1128;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten39_reg_254 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_278 <= select_ln22_1_reg_1173;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_278 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_266 <= select_ln28_3_reg_1068;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_266 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_h_0_reg_289 <= select_ln22_reg_1156;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_289 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_w_0_reg_300 <= out_w_reg_1195;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_300 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0)))) begin
        reg_312 <= input_r_q0;
    end else if ((((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0)) | ((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_312 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0))) begin
        reg_317 <= input_r_q1;
    end else if ((((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0)) | ((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_317 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln21_reg_1128 <= add_ln21_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_fu_387_p2 == 1'd0))) begin
        add_ln22_1_reg_1051 <= add_ln22_1_fu_403_p2;
        icmp_ln22_reg_1038 <= icmp_ln22_fu_398_p2;
        out_d_reg_1032 <= out_d_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln28_5_reg_1211 <= add_ln28_5_fu_572_p2;
        add_ln28_reg_1201 <= add_ln28_fu_562_p2;
        add_ln34_4_reg_1270 <= add_ln34_4_fu_601_p2;
        add_ln34_reg_1235 <= add_ln34_fu_593_p2;
        kernel1_load_reg_1248 <= kernel1_q0;
        kernel2_load_reg_1256 <= kernel2_q0;
        kernel_load_reg_1240 <= kernel_q0;
        tmp5_1_0_mid2_v_v_reg_1216 <= tmp5_1_0_mid2_v_v_fu_577_p2;
        tmp5_2_0_mid2_reg_1221 <= tmp5_2_0_mid2_fu_585_p2;
        xor_ln28_reg_1206 <= xor_ln28_fu_567_p2;
        zext_ln34_10_reg_1228[4 : 0] <= zext_ln34_10_fu_590_p1[4 : 0];
        zext_ln34_12_reg_1264[4 : 0] <= zext_ln34_12_fu_598_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln34_10_reg_1297 <= add_ln34_10_fu_659_p2;
        add_ln34_11_reg_1302 <= add_ln34_11_fu_663_p2;
        add_ln34_5_reg_1292 <= add_ln34_5_fu_638_p2;
        tmp5_1_0_mid2_reg_1275 <= tmp5_1_0_mid2_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln34_12_reg_1327 <= add_ln34_12_fu_683_p2;
        add_ln34_6_reg_1312 <= add_ln34_6_fu_670_p2;
        zext_ln34_14_reg_1307[4 : 0] <= zext_ln34_14_fu_667_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln34_7_reg_1352 <= add_ln34_7_fu_695_p2;
        add_ln34_8_reg_1362 <= add_ln34_8_fu_699_p2;
        add_ln34_9_reg_1367 <= add_ln34_9_fu_703_p2;
        tmp_1_reg_1337 <= grp_fu_630_p5;
        tmp_2_reg_1347 <= grp_fu_643_p5;
        tmp_3_reg_1357 <= grp_fu_651_p5;
        tmp_s_reg_1332 <= grp_fu_618_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0))) begin
        add_ln40_1_reg_1508 <= add_ln40_1_fu_857_p2;
        add_ln40_3_reg_1513 <= add_ln40_3_fu_866_p2;
        mul_ln34_8_reg_1503 <= mul_ln34_8_fu_953_p2;
        trunc_ln40_3_reg_1498 <= {{mul_ln34_7_reg_1488[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0))) begin
        add_ln40_7_reg_1493 <= add_ln40_7_fu_830_p2;
        bias_load_reg_1473 <= bias_q0;
        mul_ln34_6_reg_1483 <= mul_ln34_6_fu_943_p2;
        mul_ln34_7_reg_1488 <= mul_ln34_7_fu_948_p2;
        trunc_ln40_1_reg_1478 <= {{mul_ln34_5_reg_1453[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0))) begin
        add_ln40_8_reg_1518 <= add_ln40_8_fu_885_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln21_reg_1028_pp0_iter3_reg == 1'd0))) begin
        add_ln40_9_reg_1523 <= add_ln40_9_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln40_reg_1377 <= grp_fu_903_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln40_reg_1377_pp0_iter2_reg <= add_ln40_reg_1377;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_997 <= empty_fu_342_p1;
        icmp_ln23_reg_1012 <= icmp_ln23_fu_372_p2;
        mul_ln5_reg_1002 <= mul_ln5_fu_358_p2;
        tmp_4_reg_1007[13 : 4] <= tmp_4_fu_364_p3[13 : 4];
        zext_ln34_2_cast14_reg_979[6 : 0] <= zext_ln34_2_cast14_fu_330_p1[6 : 0];
        zext_ln34_reg_973[6 : 0] <= zext_ln34_fu_326_p1[6 : 0];
        zext_ln40_1_cast_reg_992[5 : 0] <= zext_ln40_1_cast_fu_338_p1[5 : 0];
        zext_ln40_reg_986[5 : 0] <= zext_ln40_fu_334_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln21_reg_1028 <= icmp_ln21_fu_387_p2;
        icmp_ln21_reg_1028_pp0_iter1_reg <= icmp_ln21_reg_1028;
        icmp_ln21_reg_1028_pp0_iter2_reg <= icmp_ln21_reg_1028_pp0_iter1_reg;
        icmp_ln21_reg_1028_pp0_iter3_reg <= icmp_ln21_reg_1028_pp0_iter2_reg;
        mul_ln34_reg_1022 <= mul_ln34_fu_382_p2;
        zext_ln40_1_reg_1017[4 : 0] <= zext_ln40_1_fu_378_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln22_reg_1038 == 1'd0))) begin
        icmp_ln23_1_reg_1093 <= icmp_ln23_1_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0))) begin
        mul_ln34_10_reg_1443 <= mul_ln34_10_fu_927_p2;
        mul_ln34_9_reg_1438 <= mul_ln34_9_fu_921_p2;
        sext_ln34_6_reg_1423 <= sext_ln34_6_fu_751_p1;
        sext_ln34_8_reg_1428 <= sext_ln34_8_fu_754_p1;
        trunc_ln40_s_reg_1418 <= {{mul_ln34_4_reg_1398[29:14]}};
        trunc_ln_reg_1413 <= {{mul_ln34_3_reg_1388[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_1028_pp0_iter2_reg == 1'd0))) begin
        mul_ln34_11_reg_1468 <= mul_ln34_11_fu_938_p2;
        mul_ln34_5_reg_1453 <= mul_ln34_5_fu_933_p2;
        trunc_ln40_5_reg_1458 <= {{mul_ln34_9_reg_1438[29:14]}};
        trunc_ln40_6_reg_1463 <= {{mul_ln34_10_reg_1443[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_ln34_2_reg_1079 <= mul_ln34_2_fu_429_p2;
        select_ln28_reg_1062 <= select_ln28_fu_413_p3;
        trunc_ln28_reg_1085 <= trunc_ln28_fu_434_p1;
        zext_ln40_2_reg_1074[4 : 0] <= zext_ln40_2_fu_426_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln34_3_reg_1388 <= mul_ln34_3_fu_909_p2;
        mul_ln34_4_reg_1398 <= mul_ln34_4_fu_915_p2;
        sext_ln34_2_reg_1382 <= sext_ln34_2_fu_715_p1;
        sext_ln34_4_reg_1393 <= sext_ln34_4_fu_722_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_ln40_1_reg_1133 <= mul_ln40_1_fu_476_p2;
        out_w_0_mid2_reg_1139 <= out_w_0_mid2_fu_484_p3;
        zext_ln34_4_cast_mid_reg_1146[4 : 0] <= zext_ln34_4_cast_mid_fu_492_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        mul_ln40_reg_1098 <= mul_ln40_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        out_h_reg_1112 <= out_h_fu_452_p2;
        select_ln28_8_reg_1104 <= select_ln28_8_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_reg_1195 <= out_w_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln22_1_reg_1173 <= select_ln22_1_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        select_ln22_reg_1156 <= select_ln22_fu_501_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_3_reg_1068 <= select_ln28_3_fu_420_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_3_reg_1068_pp0_iter1_reg <= select_ln28_3_reg_1068;
        select_ln28_3_reg_1068_pp0_iter2_reg <= select_ln28_3_reg_1068_pp0_iter1_reg;
        trunc_ln28_reg_1085_pp0_iter1_reg <= trunc_ln28_reg_1085;
        zext_ln34_4_cast_reg_1056[4 : 0] <= zext_ln34_4_cast_fu_409_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp5_0_0_mid2_reg_1178 <= tmp5_0_0_mid2_fu_541_p2;
        tmp5_2_0_mid2_v_v_reg_1185 <= tmp5_2_0_mid2_v_v_fu_546_p2;
        tmp7_mid2_v_v_reg_1190 <= tmp7_mid2_v_v_fu_551_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp5_0_0_mid2_v_v_reg_1161 <= tmp5_0_0_mid2_v_v_fu_516_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (select_ln28_8_reg_1104 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp6_mid1_reg_1168 <= tmp6_mid1_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (select_ln28_8_reg_1104 == 1'd0) & (icmp_ln22_reg_1038 == 1'd0))) begin
        tmp6_reg_1123 <= tmp6_fu_461_p2;
        tmp_0_0_reg_1118 <= tmp_0_0_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (select_ln28_8_reg_1104 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_0_0_mid1_reg_1151 <= tmp_0_0_mid1_fu_495_p2;
    end
end

always @ (*) begin
    if ((icmp_ln21_reg_1028 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten39_phi_fu_258_p4 = add_ln21_reg_1128;
    end else begin
        ap_phi_mux_indvar_flatten39_phi_fu_258_p4 = indvar_flatten39_reg_254;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_282_p4 = select_ln22_1_reg_1173;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_282_p4 = indvar_flatten_reg_278;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1028 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_270_p4 = select_ln28_3_reg_1068;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_270_p4 = out_d_0_reg_266;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_h_0_phi_fu_293_p4 = select_ln22_reg_1156;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_293_p4 = out_h_0_reg_289;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1028_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_w_0_phi_fu_304_p4 = out_w_reg_1195;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_304_p4 = out_w_0_reg_300;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_r_address0 = zext_ln34_18_fu_757_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln34_16_fu_725_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address0 = zext_ln34_21_fu_707_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln34_20_fu_679_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln34_13_fu_626_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln34_17_fu_729_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address1 = zext_ln34_15_fu_691_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address1 = zext_ln34_19_fu_675_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address1 = zext_ln34_11_fu_614_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel1_ce0 = 1'b1;
    end else begin
        kernel1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel2_ce0 = 1'b1;
    end else begin
        kernel2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_1028_pp0_iter3_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((icmp_ln21_reg_1028 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((icmp_ln21_reg_1028 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_465_p2 = (indvar_flatten39_reg_254 + 14'd1);

assign add_ln22_1_fu_403_p2 = (10'd1 + ap_phi_mux_indvar_flatten_phi_fu_282_p4);

assign add_ln28_5_fu_572_p2 = ($signed(2'd3) + $signed(trunc_ln28_reg_1085));

assign add_ln28_fu_562_p2 = (2'd1 + trunc_ln28_reg_1085);

assign add_ln34_10_fu_659_p2 = (tmp5_2_0_mid2_reg_1221 + zext_ln34_10_reg_1228);

assign add_ln34_11_fu_663_p2 = (tmp5_2_0_mid2_reg_1221 + zext_ln34_12_reg_1264);

assign add_ln34_12_fu_683_p2 = (tmp5_2_0_mid2_reg_1221 + zext_ln34_14_fu_667_p1);

assign add_ln34_4_fu_601_p2 = (tmp5_0_0_mid2_reg_1178 + zext_ln34_12_fu_598_p1);

assign add_ln34_5_fu_638_p2 = (5'd2 + out_w_0_mid2_reg_1139);

assign add_ln34_6_fu_670_p2 = (tmp5_0_0_mid2_reg_1178 + zext_ln34_14_fu_667_p1);

assign add_ln34_7_fu_695_p2 = (tmp5_1_0_mid2_reg_1275 + zext_ln34_10_reg_1228);

assign add_ln34_8_fu_699_p2 = (tmp5_1_0_mid2_reg_1275 + zext_ln34_12_reg_1264);

assign add_ln34_9_fu_703_p2 = (tmp5_1_0_mid2_reg_1275 + zext_ln34_14_reg_1307);

assign add_ln34_fu_593_p2 = (tmp5_0_0_mid2_reg_1178 + zext_ln34_10_fu_590_p1);

assign add_ln40_1_fu_857_p2 = (bias_load_reg_1473 + trunc_ln_reg_1413);

assign add_ln40_2_fu_861_p2 = (trunc_ln40_1_reg_1478 + trunc_ln40_2_fu_835_p4);

assign add_ln40_3_fu_866_p2 = (add_ln40_2_fu_861_p2 + trunc_ln40_s_reg_1418);

assign add_ln40_4_fu_890_p2 = (add_ln40_3_reg_1513 + add_ln40_1_reg_1508);

assign add_ln40_5_fu_880_p2 = (trunc_ln40_3_reg_1498 + trunc_ln40_4_fu_871_p4);

assign add_ln40_6_fu_825_p2 = (trunc_ln40_6_reg_1463 + trunc_ln40_7_fu_816_p4);

assign add_ln40_7_fu_830_p2 = (add_ln40_6_fu_825_p2 + trunc_ln40_5_reg_1458);

assign add_ln40_8_fu_885_p2 = (add_ln40_7_reg_1493 + add_ln40_5_fu_880_p2);

assign add_ln40_9_fu_894_p2 = (add_ln40_8_reg_1518 + add_ln40_4_fu_890_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_address0 = zext_ln28_fu_769_p1;

assign empty_46_fu_346_p1 = output_height[4:0];

assign empty_48_fu_480_p2 = (select_ln28_8_reg_1104 | icmp_ln22_reg_1038);

assign empty_fu_342_p1 = output_width[4:0];

assign grp_fu_903_p0 = zext_ln40_1_cast_reg_992;

assign grp_fu_903_p1 = grp_fu_903_p10;

assign grp_fu_903_p10 = tmp7_mid2_v_v_reg_1190;

assign grp_fu_903_p2 = zext_ln34_10_reg_1228;

assign icmp_ln21_fu_387_p2 = ((ap_phi_mux_indvar_flatten39_phi_fu_258_p4 == tmp_4_reg_1007) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_398_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_282_p4 == mul_ln5_reg_1002) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_438_p2 = ((ap_phi_mux_out_w_0_phi_fu_304_p4 == empty_reg_997) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_372_p2 = ((empty_fu_342_p1 == 5'd0) ? 1'b1 : 1'b0);

assign kernel1_address0 = 64'd0;

assign kernel2_address0 = 64'd0;

assign kernel_address0 = 64'd0;

assign mul_ln34_11_fu_938_p1 = sext_ln34_2_reg_1382;

assign mul_ln34_2_fu_429_p0 = zext_ln34_reg_973;

assign mul_ln34_2_fu_429_p1 = mul_ln34_2_fu_429_p10;

assign mul_ln34_2_fu_429_p10 = out_d_reg_1032;

assign mul_ln34_2_fu_429_p2 = (mul_ln34_2_fu_429_p0 * mul_ln34_2_fu_429_p1);

assign mul_ln34_5_fu_933_p1 = sext_ln34_6_reg_1423;

assign mul_ln34_6_fu_943_p1 = sext_ln34_8_reg_1428;

assign mul_ln34_7_fu_948_p1 = sext_ln34_2_reg_1382;

assign mul_ln34_8_fu_953_p1 = sext_ln34_4_reg_1393;

assign mul_ln34_fu_382_p0 = mul_ln34_fu_382_p00;

assign mul_ln34_fu_382_p00 = ap_phi_mux_out_d_0_phi_fu_270_p4;

assign mul_ln34_fu_382_p1 = zext_ln34_reg_973;

assign mul_ln34_fu_382_p2 = (mul_ln34_fu_382_p0 * mul_ln34_fu_382_p1);

assign mul_ln40_1_fu_476_p0 = zext_ln40_reg_986;

assign mul_ln40_1_fu_476_p1 = zext_ln40_2_reg_1074;

assign mul_ln40_1_fu_476_p2 = (mul_ln40_1_fu_476_p0 * mul_ln40_1_fu_476_p1);

assign mul_ln40_fu_443_p0 = zext_ln40_1_reg_1017;

assign mul_ln40_fu_443_p1 = zext_ln40_reg_986;

assign mul_ln40_fu_443_p2 = (mul_ln40_fu_443_p0 * mul_ln40_fu_443_p1);

assign mul_ln5_fu_358_p0 = mul_ln5_fu_358_p00;

assign mul_ln5_fu_358_p00 = empty_46_fu_346_p1;

assign mul_ln5_fu_358_p1 = mul_ln5_fu_358_p10;

assign mul_ln5_fu_358_p10 = empty_fu_342_p1;

assign mul_ln5_fu_358_p2 = (mul_ln5_fu_358_p0 * mul_ln5_fu_358_p1);

assign out_d_fu_392_p2 = (5'd1 + ap_phi_mux_out_d_0_phi_fu_270_p4);

assign out_h_fu_452_p2 = (5'd1 + select_ln28_reg_1062);

assign out_w_0_mid2_fu_484_p3 = ((empty_48_fu_480_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_300);

assign out_w_fu_557_p2 = (5'd1 + out_w_0_mid2_reg_1139);

assign output_r_address0 = zext_ln40_3_fu_899_p1;

assign output_r_d0 = add_ln40_9_reg_1523;

assign select_ln22_1_fu_527_p3 = ((icmp_ln22_reg_1038[0:0] === 1'b1) ? 10'd1 : add_ln22_1_reg_1051);

assign select_ln22_fu_501_p3 = ((select_ln28_8_reg_1104[0:0] === 1'b1) ? out_h_reg_1112 : select_ln28_reg_1062);

assign select_ln28_3_fu_420_p3 = ((icmp_ln22_reg_1038[0:0] === 1'b1) ? out_d_reg_1032 : out_d_0_reg_266);

assign select_ln28_4_fu_471_p3 = ((icmp_ln22_reg_1038[0:0] === 1'b1) ? mul_ln34_2_reg_1079 : mul_ln34_reg_1022);

assign select_ln28_5_fu_506_p3 = ((icmp_ln22_reg_1038[0:0] === 1'b1) ? mul_ln40_1_reg_1133 : mul_ln40_reg_1098);

assign select_ln28_6_fu_511_p3 = ((icmp_ln22_reg_1038[0:0] === 1'b1) ? mul_ln34_2_reg_1079 : tmp_0_0_reg_1118);

assign select_ln28_7_fu_533_p3 = ((icmp_ln22_reg_1038[0:0] === 1'b1) ? mul_ln40_1_reg_1133 : tmp6_reg_1123);

assign select_ln28_8_fu_447_p3 = ((icmp_ln22_reg_1038[0:0] === 1'b1) ? icmp_ln23_reg_1012 : icmp_ln23_1_reg_1093);

assign select_ln28_fu_413_p3 = ((icmp_ln22_reg_1038[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_h_0_phi_fu_293_p4);

assign sext_ln34_14_fu_322_p1 = $signed(input_width);

assign sext_ln34_2_fu_715_p1 = tmp_s_reg_1332;

assign sext_ln34_4_fu_722_p1 = tmp_1_reg_1337;

assign sext_ln34_6_fu_751_p1 = tmp_2_reg_1347;

assign sext_ln34_8_fu_754_p1 = tmp_3_reg_1357;

assign tmp5_0_0_mid2_fu_541_p0 = zext_ln34_2_cast14_reg_979;

assign tmp5_0_0_mid2_fu_541_p1 = tmp5_0_0_mid2_fu_541_p10;

assign tmp5_0_0_mid2_fu_541_p10 = tmp5_0_0_mid2_v_v_reg_1161;

assign tmp5_0_0_mid2_fu_541_p2 = (tmp5_0_0_mid2_fu_541_p0 * tmp5_0_0_mid2_fu_541_p1);

assign tmp5_0_0_mid2_v_v_fu_516_p3 = ((select_ln28_8_reg_1104[0:0] === 1'b1) ? tmp_0_0_mid1_reg_1151 : select_ln28_6_fu_511_p3);

assign tmp5_1_0_mid2_fu_609_p0 = zext_ln34_2_cast14_reg_979;

assign tmp5_1_0_mid2_fu_609_p1 = tmp5_1_0_mid2_fu_609_p10;

assign tmp5_1_0_mid2_fu_609_p10 = tmp5_1_0_mid2_v_v_reg_1216;

assign tmp5_1_0_mid2_fu_609_p2 = (tmp5_1_0_mid2_fu_609_p0 * tmp5_1_0_mid2_fu_609_p1);

assign tmp5_1_0_mid2_v_v_fu_577_p2 = (9'd1 + tmp5_0_0_mid2_v_v_reg_1161);

assign tmp5_2_0_mid2_fu_585_p0 = zext_ln34_2_cast14_reg_979;

assign tmp5_2_0_mid2_fu_585_p1 = tmp5_2_0_mid2_fu_585_p10;

assign tmp5_2_0_mid2_fu_585_p10 = tmp5_2_0_mid2_v_v_reg_1185;

assign tmp5_2_0_mid2_fu_585_p2 = (tmp5_2_0_mid2_fu_585_p0 * tmp5_2_0_mid2_fu_585_p1);

assign tmp5_2_0_mid2_v_v_fu_546_p2 = (9'd2 + tmp5_0_0_mid2_v_v_reg_1161);

assign tmp6_fu_461_p2 = (mul_ln40_reg_1098 + zext_ln34_4_cast_reg_1056);

assign tmp6_mid1_fu_522_p2 = (zext_ln34_4_cast_mid_reg_1146 + select_ln28_5_fu_506_p3);

assign tmp7_mid2_v_v_fu_551_p3 = ((select_ln28_8_reg_1104[0:0] === 1'b1) ? tmp6_mid1_reg_1168 : select_ln28_7_fu_533_p3);

assign tmp_0_0_fu_457_p2 = (mul_ln34_reg_1022 + zext_ln34_4_cast_reg_1056);

assign tmp_0_0_mid1_fu_495_p2 = (zext_ln34_4_cast_mid_fu_492_p1 + select_ln28_4_fu_471_p3);

assign tmp_4_fu_364_p3 = {{mul_ln5_fu_358_p2}, {4'd0}};

assign trunc_ln28_fu_434_p1 = select_ln28_3_fu_420_p3[1:0];

assign trunc_ln40_2_fu_835_p4 = {{mul_ln34_6_reg_1483[29:14]}};

assign trunc_ln40_4_fu_871_p4 = {{mul_ln34_8_reg_1503[29:14]}};

assign trunc_ln40_7_fu_816_p4 = {{mul_ln34_11_reg_1468[29:14]}};

assign xor_ln28_fu_567_p2 = (trunc_ln28_reg_1085 ^ 2'd2);

assign zext_ln28_fu_769_p1 = select_ln28_3_reg_1068_pp0_iter2_reg;

assign zext_ln34_10_fu_590_p1 = out_w_0_mid2_reg_1139;

assign zext_ln34_11_fu_614_p1 = add_ln34_reg_1235;

assign zext_ln34_12_fu_598_p1 = out_w_reg_1195;

assign zext_ln34_13_fu_626_p1 = add_ln34_4_reg_1270;

assign zext_ln34_14_fu_667_p1 = add_ln34_5_reg_1292;

assign zext_ln34_15_fu_691_p1 = add_ln34_6_reg_1312;

assign zext_ln34_16_fu_725_p1 = add_ln34_7_reg_1352;

assign zext_ln34_17_fu_729_p1 = add_ln34_8_reg_1362;

assign zext_ln34_18_fu_757_p1 = add_ln34_9_reg_1367;

assign zext_ln34_19_fu_675_p1 = add_ln34_10_reg_1297;

assign zext_ln34_20_fu_679_p1 = add_ln34_11_reg_1302;

assign zext_ln34_21_fu_707_p1 = add_ln34_12_reg_1327;

assign zext_ln34_2_cast14_fu_330_p1 = $unsigned(sext_ln34_14_fu_322_p1);

assign zext_ln34_4_cast_fu_409_p1 = ap_phi_mux_out_h_0_phi_fu_293_p4;

assign zext_ln34_4_cast_mid_fu_492_p1 = out_h_reg_1112;

assign zext_ln34_fu_326_p1 = input_height;

assign zext_ln40_1_cast_fu_338_p1 = output_width;

assign zext_ln40_1_fu_378_p1 = ap_phi_mux_out_d_0_phi_fu_270_p4;

assign zext_ln40_2_fu_426_p1 = out_d_reg_1032;

assign zext_ln40_3_fu_899_p1 = add_ln40_reg_1377_pp0_iter2_reg;

assign zext_ln40_fu_334_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln34_reg_973[8:7] <= 2'b00;
    zext_ln34_2_cast14_reg_979[13:7] <= 7'b0000000;
    zext_ln40_reg_986[8:6] <= 3'b000;
    zext_ln40_1_cast_reg_992[13:6] <= 8'b00000000;
    tmp_4_reg_1007[3:0] <= 4'b0000;
    zext_ln40_1_reg_1017[8:5] <= 4'b0000;
    zext_ln34_4_cast_reg_1056[8:5] <= 4'b0000;
    zext_ln40_2_reg_1074[8:5] <= 4'b0000;
    zext_ln34_4_cast_mid_reg_1146[8:5] <= 4'b0000;
    zext_ln34_10_reg_1228[13:5] <= 9'b000000000;
    zext_ln34_12_reg_1264[13:5] <= 9'b000000000;
    zext_ln34_14_reg_1307[13:5] <= 9'b000000000;
end

endmodule //depthwise_conv2d_fix_2
