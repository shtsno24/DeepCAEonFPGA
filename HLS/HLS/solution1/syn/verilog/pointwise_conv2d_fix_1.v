// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] SeparableConv2D_1_b_s_address0;
reg    SeparableConv2D_1_b_s_ce0;
wire   [12:0] SeparableConv2D_1_b_s_q0;
wire   [11:0] zext_ln18_fu_435_p1;
reg   [11:0] zext_ln18_reg_928;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln18_fu_439_p2;
reg   [10:0] add_ln18_reg_933;
wire   [3:0] out_d_fu_451_p2;
reg   [3:0] out_d_reg_941;
wire   [0:0] icmp_ln18_fu_445_p2;
wire   [2:0] trunc_ln27_fu_462_p1;
reg   [2:0] trunc_ln27_reg_951;
wire  signed [22:0] sext_ln27_4_fu_466_p1;
reg  signed [22:0] sext_ln27_4_reg_956;
wire    ap_CS_fsm_state3;
wire   [6:0] shl_ln_fu_470_p3;
reg   [6:0] shl_ln_reg_961;
wire   [3:0] out_h_fu_483_p2;
reg   [3:0] out_h_reg_969;
wire    ap_CS_fsm_state4;
wire   [8:0] sub_ln27_fu_513_p2;
reg   [8:0] sub_ln27_reg_974;
wire   [0:0] icmp_ln19_fu_477_p2;
wire   [3:0] out_w_fu_525_p2;
reg   [3:0] out_w_reg_982;
wire    ap_CS_fsm_state5;
wire  signed [8:0] add_ln27_fu_535_p2;
reg  signed [8:0] add_ln27_reg_987;
wire   [0:0] icmp_ln20_fu_519_p2;
wire  signed [12:0] sext_ln27_5_fu_540_p1;
reg  signed [12:0] sext_ln27_5_reg_992;
wire   [4:0] in_d_fu_554_p2;
reg   [4:0] in_d_reg_1000;
wire    ap_CS_fsm_state6;
wire   [11:0] add_ln27_8_fu_560_p2;
reg   [11:0] add_ln27_8_reg_1005;
wire   [0:0] icmp_ln22_fu_548_p2;
wire   [12:0] add_ln27_1_fu_566_p2;
reg   [12:0] add_ln27_1_reg_1010;
wire   [6:0] add_ln27_4_fu_575_p2;
reg   [6:0] add_ln27_4_reg_1015;
wire   [15:0] and_ln32_fu_606_p2;
reg   [15:0] and_ln32_reg_1020;
wire   [11:0] add_ln32_fu_615_p2;
reg   [11:0] add_ln32_reg_1025;
wire    ap_CS_fsm_state7;
reg  signed [15:0] input_load_reg_1035;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_fu_628_p130;
reg  signed [15:0] tmp_reg_1040;
wire  signed [31:0] mul_ln27_fu_922_p2;
reg  signed [31:0] mul_ln27_reg_1045;
wire    ap_CS_fsm_state9;
wire   [22:0] buffer_fu_908_p2;
wire    ap_CS_fsm_state10;
reg   [3:0] out_d_0_reg_359;
reg   [10:0] phi_mul1_reg_370;
reg   [3:0] out_h_0_reg_381;
reg   [3:0] out_w_0_reg_392;
wire    ap_CS_fsm_state11;
reg   [22:0] buffer_0_reg_403;
reg   [4:0] in_d_0_reg_413;
reg   [11:0] phi_mul_reg_424;
wire   [63:0] zext_ln21_fu_457_p1;
wire   [63:0] zext_ln27_6_fu_623_p1;
wire   [63:0] zext_ln32_fu_917_p1;
wire   [7:0] shl_ln27_2_fu_489_p3;
wire   [4:0] shl_ln27_3_fu_501_p3;
wire   [8:0] zext_ln27_fu_497_p1;
wire   [8:0] zext_ln27_9_fu_509_p1;
wire   [8:0] zext_ln22_fu_531_p1;
wire   [12:0] zext_ln22_4_fu_544_p1;
wire   [6:0] zext_ln27_10_fu_571_p1;
wire   [0:0] tmp_3_fu_580_p3;
wire   [0:0] xor_ln31_fu_592_p2;
wire   [15:0] select_ln31_fu_598_p3;
wire   [15:0] trunc_ln31_fu_588_p1;
wire  signed [11:0] sext_ln32_fu_612_p1;
wire  signed [31:0] sext_ln27_6_fu_620_p1;
wire   [17:0] trunc_ln4_fu_895_p4;
wire  signed [22:0] sext_ln27_7_fu_904_p1;
wire  signed [31:0] sext_ln32_2_fu_914_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

pointwise_conv2d_fix_1_SeparableConv2D_1_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_1_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_1_b_s_address0),
    .ce0(SeparableConv2D_1_b_s_ce0),
    .q0(SeparableConv2D_1_b_s_q0)
);

network_mux_1287_16_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 16 ),
    .din73_WIDTH( 16 ),
    .din74_WIDTH( 16 ),
    .din75_WIDTH( 16 ),
    .din76_WIDTH( 16 ),
    .din77_WIDTH( 16 ),
    .din78_WIDTH( 16 ),
    .din79_WIDTH( 16 ),
    .din80_WIDTH( 16 ),
    .din81_WIDTH( 16 ),
    .din82_WIDTH( 16 ),
    .din83_WIDTH( 16 ),
    .din84_WIDTH( 16 ),
    .din85_WIDTH( 16 ),
    .din86_WIDTH( 16 ),
    .din87_WIDTH( 16 ),
    .din88_WIDTH( 16 ),
    .din89_WIDTH( 16 ),
    .din90_WIDTH( 16 ),
    .din91_WIDTH( 16 ),
    .din92_WIDTH( 16 ),
    .din93_WIDTH( 16 ),
    .din94_WIDTH( 16 ),
    .din95_WIDTH( 16 ),
    .din96_WIDTH( 16 ),
    .din97_WIDTH( 16 ),
    .din98_WIDTH( 16 ),
    .din99_WIDTH( 16 ),
    .din100_WIDTH( 16 ),
    .din101_WIDTH( 16 ),
    .din102_WIDTH( 16 ),
    .din103_WIDTH( 16 ),
    .din104_WIDTH( 16 ),
    .din105_WIDTH( 16 ),
    .din106_WIDTH( 16 ),
    .din107_WIDTH( 16 ),
    .din108_WIDTH( 16 ),
    .din109_WIDTH( 16 ),
    .din110_WIDTH( 16 ),
    .din111_WIDTH( 16 ),
    .din112_WIDTH( 16 ),
    .din113_WIDTH( 16 ),
    .din114_WIDTH( 16 ),
    .din115_WIDTH( 16 ),
    .din116_WIDTH( 16 ),
    .din117_WIDTH( 16 ),
    .din118_WIDTH( 16 ),
    .din119_WIDTH( 16 ),
    .din120_WIDTH( 16 ),
    .din121_WIDTH( 16 ),
    .din122_WIDTH( 16 ),
    .din123_WIDTH( 16 ),
    .din124_WIDTH( 16 ),
    .din125_WIDTH( 16 ),
    .din126_WIDTH( 16 ),
    .din127_WIDTH( 16 ),
    .din128_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
network_mux_1287_16_2_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(16'd62947),
    .din1(16'd59235),
    .din2(16'd6298),
    .din3(16'd4670),
    .din4(16'd65098),
    .din5(16'd60386),
    .din6(16'd7446),
    .din7(16'd3324),
    .din8(16'd56320),
    .din9(16'd58414),
    .din10(16'd58112),
    .din11(16'd6893),
    .din12(16'd60710),
    .din13(16'd56591),
    .din14(16'd57870),
    .din15(16'd65113),
    .din16(16'd58353),
    .din17(16'd7322),
    .din18(16'd59592),
    .din19(16'd65213),
    .din20(16'd62748),
    .din21(16'd62934),
    .din22(16'd59356),
    .din23(16'd58539),
    .din24(16'd59907),
    .din25(16'd5275),
    .din26(16'd63752),
    .din27(16'd62955),
    .din28(16'd6718),
    .din29(16'd3388),
    .din30(16'd3773),
    .din31(16'd57529),
    .din32(16'd60685),
    .din33(16'd1400),
    .din34(16'd57634),
    .din35(16'd6190),
    .din36(16'd1521),
    .din37(16'd7966),
    .din38(16'd6153),
    .din39(16'd3500),
    .din40(16'd901),
    .din41(16'd6014),
    .din42(16'd268),
    .din43(16'd64579),
    .din44(16'd62692),
    .din45(16'd63804),
    .din46(16'd57880),
    .din47(16'd4662),
    .din48(16'd1823),
    .din49(16'd154),
    .din50(16'd5429),
    .din51(16'd64059),
    .din52(16'd57755),
    .din53(16'd60789),
    .din54(16'd63659),
    .din55(16'd61930),
    .din56(16'd5181),
    .din57(16'd6372),
    .din58(16'd6575),
    .din59(16'd61008),
    .din60(16'd6695),
    .din61(16'd65384),
    .din62(16'd64022),
    .din63(16'd7019),
    .din64(16'd3484),
    .din65(16'd63098),
    .din66(16'd58208),
    .din67(16'd2123),
    .din68(16'd7666),
    .din69(16'd57094),
    .din70(16'd63039),
    .din71(16'd62481),
    .din72(16'd59750),
    .din73(16'd63343),
    .din74(16'd62624),
    .din75(16'd60878),
    .din76(16'd1673),
    .din77(16'd8363),
    .din78(16'd58632),
    .din79(16'd61876),
    .din80(16'd1036),
    .din81(16'd62703),
    .din82(16'd64350),
    .din83(16'd6000),
    .din84(16'd4801),
    .din85(16'd6144),
    .din86(16'd55398),
    .din87(16'd60768),
    .din88(16'd56137),
    .din89(16'd1749),
    .din90(16'd63158),
    .din91(16'd65049),
    .din92(16'd1326),
    .din93(16'd6412),
    .din94(16'd62129),
    .din95(16'd60384),
    .din96(16'd5377),
    .din97(16'd2585),
    .din98(16'd2156),
    .din99(16'd65183),
    .din100(16'd6548),
    .din101(16'd6080),
    .din102(16'd4697),
    .din103(16'd311),
    .din104(16'd2680),
    .din105(16'd2484),
    .din106(16'd4684),
    .din107(16'd6150),
    .din108(16'd3607),
    .din109(16'd2107),
    .din110(16'd5485),
    .din111(16'd96),
    .din112(16'd58265),
    .din113(16'd58262),
    .din114(16'd60760),
    .din115(16'd60438),
    .din116(16'd4909),
    .din117(16'd57926),
    .din118(16'd23),
    .din119(16'd1973),
    .din120(16'd5696),
    .din121(16'd5529),
    .din122(16'd59080),
    .din123(16'd60185),
    .din124(16'd63920),
    .din125(16'd64105),
    .din126(16'd7230),
    .din127(16'd64520),
    .din128(add_ln27_4_reg_1015),
    .ce(1'b1),
    .dout(grp_fu_628_p130)
);

network_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16s_16s_32_1_1_U56(
    .din0(tmp_reg_1040),
    .din1(input_load_reg_1035),
    .dout(mul_ln27_fu_922_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_0_reg_403 <= buffer_fu_908_p2;
    end else if (((icmp_ln20_fu_519_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buffer_0_reg_403 <= sext_ln27_4_reg_956;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        in_d_0_reg_413 <= in_d_reg_1000;
    end else if (((icmp_ln20_fu_519_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_d_0_reg_413 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_0_reg_359 <= out_d_reg_941;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_359 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_519_p2 == 1'd1))) begin
        out_h_0_reg_381 <= out_h_reg_969;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_381 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_0_reg_392 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_w_0_reg_392 <= out_w_reg_982;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_370 <= add_ln18_reg_933;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_370 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        phi_mul_reg_424 <= add_ln27_8_reg_1005;
    end else if (((icmp_ln20_fu_519_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_424 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln18_reg_933 <= add_ln18_fu_439_p2;
        out_d_reg_941 <= out_d_fu_451_p2;
        zext_ln18_reg_928[10 : 0] <= zext_ln18_fu_435_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_548_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln27_1_reg_1010 <= add_ln27_1_fu_566_p2;
        add_ln27_4_reg_1015 <= add_ln27_4_fu_575_p2;
        add_ln27_8_reg_1005 <= add_ln27_8_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_519_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln27_reg_987 <= add_ln27_fu_535_p2;
        sext_ln27_5_reg_992 <= sext_ln27_5_fu_540_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_548_p2 == 1'd1))) begin
        add_ln32_reg_1025 <= add_ln32_fu_615_p2;
        and_ln32_reg_1020 <= and_ln32_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_d_reg_1000 <= in_d_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_load_reg_1035 <= input_r_q0;
        tmp_reg_1040 <= grp_fu_628_p130;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln27_reg_1045 <= mul_ln27_fu_922_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_reg_969 <= out_h_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_982 <= out_w_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln27_4_reg_956 <= sext_ln27_4_fu_466_p1;
        shl_ln_reg_961[6 : 4] <= shl_ln_fu_470_p3[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln27_reg_974[8 : 1] <= sub_ln27_fu_513_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln27_reg_951 <= trunc_ln27_fu_462_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_1_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_1_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln18_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln19_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_519_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_548_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_1_b_s_address0 = zext_ln21_fu_457_p1;

assign add_ln18_fu_439_p2 = (phi_mul1_reg_370 + 11'd196);

assign add_ln27_1_fu_566_p2 = ($signed(sext_ln27_5_reg_992) + $signed(zext_ln22_4_fu_544_p1));

assign add_ln27_4_fu_575_p2 = (zext_ln27_10_fu_571_p1 + shl_ln_reg_961);

assign add_ln27_8_fu_560_p2 = (phi_mul_reg_424 + 12'd196);

assign add_ln27_fu_535_p2 = (sub_ln27_reg_974 + zext_ln22_fu_531_p1);

assign add_ln32_fu_615_p2 = ($signed(zext_ln18_reg_928) + $signed(sext_ln32_fu_612_p1));

assign and_ln32_fu_606_p2 = (trunc_ln31_fu_588_p1 & select_ln31_fu_598_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_fu_908_p2 = ($signed(sext_ln27_7_fu_904_p1) + $signed(buffer_0_reg_403));

assign icmp_ln18_fu_445_p2 = ((out_d_0_reg_359 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_477_p2 = ((out_h_0_reg_381 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_519_p2 = ((out_w_0_reg_392 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_548_p2 = ((in_d_0_reg_413 == 5'd16) ? 1'b1 : 1'b0);

assign in_d_fu_554_p2 = (in_d_0_reg_413 + 5'd1);

assign input_r_address0 = zext_ln27_6_fu_623_p1;

assign out_d_fu_451_p2 = (out_d_0_reg_359 + 4'd1);

assign out_h_fu_483_p2 = (out_h_0_reg_381 + 4'd1);

assign out_w_fu_525_p2 = (out_w_0_reg_392 + 4'd1);

assign output_r_address0 = zext_ln32_fu_917_p1;

assign output_r_d0 = and_ln32_reg_1020;

assign select_ln31_fu_598_p3 = ((xor_ln31_fu_592_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln27_4_fu_466_p1 = $signed(SeparableConv2D_1_b_s_q0);

assign sext_ln27_5_fu_540_p1 = add_ln27_fu_535_p2;

assign sext_ln27_6_fu_620_p1 = $signed(add_ln27_1_reg_1010);

assign sext_ln27_7_fu_904_p1 = $signed(trunc_ln4_fu_895_p4);

assign sext_ln32_2_fu_914_p1 = $signed(add_ln32_reg_1025);

assign sext_ln32_fu_612_p1 = add_ln27_reg_987;

assign shl_ln27_2_fu_489_p3 = {{out_h_0_reg_381}, {4'd0}};

assign shl_ln27_3_fu_501_p3 = {{out_h_0_reg_381}, {1'd0}};

assign shl_ln_fu_470_p3 = {{trunc_ln27_reg_951}, {4'd0}};

assign sub_ln27_fu_513_p2 = (zext_ln27_fu_497_p1 - zext_ln27_9_fu_509_p1);

assign tmp_3_fu_580_p3 = buffer_0_reg_403[32'd22];

assign trunc_ln27_fu_462_p1 = out_d_0_reg_359[2:0];

assign trunc_ln31_fu_588_p1 = buffer_0_reg_403[15:0];

assign trunc_ln4_fu_895_p4 = {{mul_ln27_reg_1045[31:14]}};

assign xor_ln31_fu_592_p2 = (tmp_3_fu_580_p3 ^ 1'd1);

assign zext_ln18_fu_435_p1 = phi_mul1_reg_370;

assign zext_ln21_fu_457_p1 = out_d_0_reg_359;

assign zext_ln22_4_fu_544_p1 = phi_mul_reg_424;

assign zext_ln22_fu_531_p1 = out_w_0_reg_392;

assign zext_ln27_10_fu_571_p1 = in_d_0_reg_413;

assign zext_ln27_6_fu_623_p1 = $unsigned(sext_ln27_6_fu_620_p1);

assign zext_ln27_9_fu_509_p1 = shl_ln27_3_fu_501_p3;

assign zext_ln27_fu_497_p1 = shl_ln27_2_fu_489_p3;

assign zext_ln32_fu_917_p1 = $unsigned(sext_ln32_2_fu_914_p1);

always @ (posedge ap_clk) begin
    zext_ln18_reg_928[11] <= 1'b0;
    shl_ln_reg_961[3:0] <= 4'b0000;
    sub_ln27_reg_974[0] <= 1'b0;
end

endmodule //pointwise_conv2d_fix_1
