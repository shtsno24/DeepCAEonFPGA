// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_pp0_stage0 = 11'd128;
parameter    ap_ST_fsm_state14 = 11'd256;
parameter    ap_ST_fsm_state15 = 11'd512;
parameter    ap_ST_fsm_state16 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_0_b_s_address0;
reg    SeparableConv2D_0_b_s_ce0;
wire   [12:0] SeparableConv2D_0_b_s_q0;
reg   [18:0] buffer_0_reg_205;
reg   [0:0] in_d_0_reg_215;
reg   [0:0] in_d_0_reg_215_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state12_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] in_d_0_reg_215_pp0_iter2_reg;
reg   [0:0] in_d_0_reg_215_pp0_iter3_reg;
reg   [0:0] in_d_0_reg_215_pp0_iter4_reg;
wire   [10:0] sub_ln29_fu_252_p2;
reg   [10:0] sub_ln29_reg_553;
wire    ap_CS_fsm_state2;
wire   [13:0] add_ln19_fu_264_p2;
reg   [13:0] add_ln19_reg_561;
wire   [0:0] icmp_ln20_fu_270_p2;
reg   [0:0] icmp_ln20_reg_566;
wire   [0:0] icmp_ln19_fu_258_p2;
wire   [4:0] out_d_fu_276_p2;
reg   [4:0] out_d_reg_576;
wire    ap_CS_fsm_state3;
wire   [4:0] select_ln34_fu_282_p3;
reg   [4:0] select_ln34_reg_581;
wire   [0:0] icmp_ln21_fu_289_p2;
reg   [0:0] icmp_ln21_reg_587;
wire   [4:0] select_ln34_6_fu_295_p3;
reg   [4:0] select_ln34_6_reg_592;
wire    ap_CS_fsm_state4;
wire   [3:0] trunc_ln34_fu_301_p1;
reg   [3:0] trunc_ln34_reg_599;
wire   [0:0] and_ln34_3_fu_310_p2;
reg   [0:0] and_ln34_3_reg_604;
wire   [4:0] out_h_fu_315_p2;
reg   [4:0] out_h_reg_611;
wire    ap_CS_fsm_state5;
wire   [10:0] sub_ln29_5_fu_346_p2;
reg   [10:0] sub_ln29_5_reg_623;
wire   [4:0] select_ln20_fu_352_p3;
reg   [4:0] select_ln20_reg_628;
reg   [12:0] SeparableConv2D_0_b_2_reg_633;
wire    ap_CS_fsm_state6;
wire   [4:0] select_ln29_fu_367_p3;
reg   [4:0] select_ln29_reg_638;
wire  signed [10:0] select_ln29_12_fu_375_p3;
reg  signed [10:0] select_ln29_12_reg_645;
wire   [13:0] mul_ln34_fu_541_p2;
reg   [13:0] mul_ln34_reg_651;
wire    ap_CS_fsm_state7;
wire  signed [18:0] sext_ln34_1_fu_384_p1;
wire  signed [14:0] sext_ln29_11_fu_387_p1;
reg  signed [14:0] sext_ln29_11_reg_661;
wire   [13:0] zext_ln24_fu_390_p1;
reg   [13:0] zext_ln24_reg_666;
reg   [13:0] input_addr_reg_671;
reg  signed [15:0] input_load_reg_676;
wire   [15:0] grp_fu_410_p18;
reg  signed [15:0] tmp_1_reg_681;
wire  signed [31:0] mul_ln29_fu_547_p2;
reg  signed [31:0] mul_ln29_reg_686;
wire   [18:0] buffer_fu_466_p2;
reg    ap_enable_reg_pp0_iter5;
(* use_dsp48 = "no" *) wire   [13:0] add_ln34_fu_472_p2;
reg   [13:0] add_ln34_reg_696;
wire    ap_CS_fsm_state14;
wire   [4:0] out_w_fu_476_p2;
reg   [4:0] out_w_reg_701;
wire   [9:0] add_ln20_2_fu_481_p2;
reg   [9:0] add_ln20_2_reg_706;
wire   [15:0] and_ln34_fu_513_p2;
reg   [15:0] and_ln34_reg_711;
wire    ap_CS_fsm_state15;
wire   [14:0] add_ln34_1_fu_522_p2;
reg   [14:0] add_ln34_1_reg_716;
wire   [9:0] select_ln20_2_fu_527_p3;
reg   [9:0] select_ln20_2_reg_721;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_in_d_0_phi_fu_219_p4;
reg    ap_condition_pp0_exit_iter0_state8;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [13:0] indvar_flatten28_reg_146;
wire    ap_CS_fsm_state16;
reg   [4:0] out_d_0_reg_157;
reg   [9:0] indvar_flatten_reg_169;
reg   [4:0] out_h_0_reg_181;
reg   [4:0] out_w_0_reg_193;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln34_6_fu_320_p1;
wire   [63:0] zext_ln29_4_fu_405_p1;
wire   [63:0] zext_ln34_fu_536_p1;
wire   [9:0] shl_ln_fu_228_p3;
wire   [6:0] shl_ln29_1_fu_240_p3;
wire   [10:0] zext_ln29_2_fu_236_p1;
wire   [10:0] zext_ln29_3_fu_248_p1;
wire   [0:0] xor_ln34_fu_305_p2;
wire   [9:0] shl_ln29_mid1_fu_324_p3;
wire   [6:0] shl_ln29_1_mid1_fu_335_p3;
wire   [10:0] zext_ln29_fu_331_p1;
wire   [10:0] zext_ln29_18_fu_342_p1;
wire   [0:0] or_ln29_fu_363_p2;
wire   [10:0] select_ln34_7_fu_357_p3;
wire   [10:0] zext_ln24_1_fu_393_p1;
wire   [10:0] add_ln29_fu_396_p2;
wire  signed [31:0] sext_ln29_3_fu_401_p1;
wire   [17:0] trunc_ln29_1_fu_453_p4;
wire  signed [18:0] sext_ln29_4_fu_462_p1;
wire   [0:0] tmp_5_fu_487_p3;
wire   [0:0] xor_ln33_fu_499_p2;
wire   [15:0] select_ln33_fu_505_p3;
wire   [15:0] trunc_ln33_fu_495_p1;
wire   [14:0] zext_ln34_2_fu_519_p1;
wire  signed [31:0] sext_ln34_fu_533_p1;
wire   [10:0] mul_ln34_fu_541_p0;
wire   [4:0] mul_ln34_fu_541_p1;
reg   [10:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] mul_ln34_fu_541_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

pointwise_conv2d_fix_SeparableConv2D_0_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_b_s_address0),
    .ce0(SeparableConv2D_0_b_s_ce0),
    .q0(SeparableConv2D_0_b_s_q0)
);

network_mux_164_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
network_mux_164_16_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(16'd63766),
    .din1(16'd6639),
    .din2(16'd8093),
    .din3(16'd64908),
    .din4(16'd4920),
    .din5(16'd9618),
    .din6(16'd56283),
    .din7(16'd1545),
    .din8(16'd54680),
    .din9(16'd2733),
    .din10(16'd1194),
    .din11(16'd6035),
    .din12(16'd3956),
    .din13(16'd58601),
    .din14(16'd5414),
    .din15(16'd6639),
    .din16(trunc_ln34_reg_599),
    .ce(1'b1),
    .dout(grp_fu_410_p18)
);

network_mul_mul_11ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_mul_mul_11ns_5ns_14_1_1_U24(
    .din0(mul_ln34_fu_541_p0),
    .din1(mul_ln34_fu_541_p1),
    .dout(mul_ln34_fu_541_p2)
);

network_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16s_16s_32_1_1_U25(
    .din0(tmp_1_reg_681),
    .din1(input_load_reg_676),
    .dout(mul_ln29_fu_547_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((in_d_0_reg_215_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        buffer_0_reg_205 <= buffer_fu_466_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_0_reg_205 <= sext_ln34_1_fu_384_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (in_d_0_reg_215 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        in_d_0_reg_215 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_d_0_reg_215 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        indvar_flatten28_reg_146 <= add_ln19_reg_561;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten28_reg_146 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        indvar_flatten_reg_169 <= select_ln20_2_reg_721;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_169 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_d_0_reg_157 <= select_ln34_6_reg_592;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_157 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_h_0_reg_181 <= select_ln20_reg_628;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_181 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_w_0_reg_193 <= out_w_reg_701;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_193 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_0_b_2_reg_633 <= SeparableConv2D_0_b_s_q0;
        select_ln29_12_reg_645[10 : 2] <= select_ln29_12_fu_375_p3[10 : 2];
        select_ln29_reg_638 <= select_ln29_fu_367_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln19_reg_561 <= add_ln19_fu_264_p2;
        sub_ln29_reg_553[10 : 2] <= sub_ln29_fu_252_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_566 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        add_ln20_2_reg_706 <= add_ln20_2_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln34_1_reg_716 <= add_ln34_1_fu_522_p2;
        and_ln34_reg_711 <= and_ln34_fu_513_p2;
        select_ln20_2_reg_721 <= select_ln20_2_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln34_reg_696 <= add_ln34_fu_472_p2;
        out_w_reg_701 <= out_w_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln34_3_reg_604 <= and_ln34_3_fu_310_p2;
        out_h_reg_611 <= out_h_fu_315_p2;
        select_ln34_6_reg_592 <= select_ln34_6_fu_295_p3;
        trunc_ln34_reg_599 <= trunc_ln34_fu_301_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln20_reg_566 <= icmp_ln20_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln21_reg_587 <= icmp_ln21_fu_289_p2;
        select_ln34_reg_581 <= select_ln34_fu_282_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_d_0_reg_215_pp0_iter1_reg <= in_d_0_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        in_d_0_reg_215_pp0_iter2_reg <= in_d_0_reg_215_pp0_iter1_reg;
        in_d_0_reg_215_pp0_iter3_reg <= in_d_0_reg_215_pp0_iter2_reg;
        in_d_0_reg_215_pp0_iter4_reg <= in_d_0_reg_215_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_addr_reg_671 <= zext_ln29_4_fu_405_p1;
        mul_ln34_reg_651 <= mul_ln34_fu_541_p2;
        sext_ln29_11_reg_661[14 : 2] <= sext_ln29_11_fu_387_p1[14 : 2];
        zext_ln24_reg_666[4 : 0] <= zext_ln24_fu_390_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((in_d_0_reg_215_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_load_reg_676 <= input_r_q0;
        tmp_1_reg_681 <= grp_fu_410_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((in_d_0_reg_215_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln29_reg_686 <= mul_ln29_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_566 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_d_reg_576 <= out_d_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        select_ln20_reg_628 <= select_ln20_fu_352_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln34_3_reg_604) & (1'b1 == ap_CS_fsm_state5))) begin
        sub_ln29_5_reg_623[10 : 2] <= sub_ln29_5_fu_346_p2[10 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SeparableConv2D_0_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_phi_mux_in_d_0_phi_fu_219_p4 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln19_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((in_d_0_reg_215 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_in_d_0_phi_fu_219_p4 = 1'd1;
    end else begin
        ap_phi_mux_in_d_0_phi_fu_219_p4 = in_d_0_reg_215;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_phi_mux_in_d_0_phi_fu_219_p4 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_phi_mux_in_d_0_phi_fu_219_p4 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_0_b_s_address0 = zext_ln34_6_fu_320_p1;

assign add_ln19_fu_264_p2 = (indvar_flatten28_reg_146 + 14'd1);

assign add_ln20_2_fu_481_p2 = (10'd1 + indvar_flatten_reg_169);

assign add_ln29_fu_396_p2 = ($signed(zext_ln24_1_fu_393_p1) + $signed(select_ln29_12_reg_645));

assign add_ln34_1_fu_522_p2 = ($signed(zext_ln34_2_fu_519_p1) + $signed(sext_ln29_11_reg_661));

assign add_ln34_fu_472_p2 = (mul_ln34_reg_651 + zext_ln24_reg_666);

assign and_ln34_3_fu_310_p2 = (xor_ln34_fu_305_p2 & icmp_ln21_reg_587);

assign and_ln34_fu_513_p2 = (trunc_ln33_fu_495_p1 & select_ln33_fu_505_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_fu_466_p2 = ($signed(sext_ln29_4_fu_462_p1) + $signed(buffer_0_reg_205));

assign icmp_ln19_fu_258_p2 = ((indvar_flatten28_reg_146 == 14'd12544) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_270_p2 = ((indvar_flatten_reg_169 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_289_p2 = ((out_w_0_reg_193 == 5'd28) ? 1'b1 : 1'b0);

assign input_r_address0 = input_addr_reg_671;

assign mul_ln34_fu_541_p0 = 14'd784;

assign mul_ln34_fu_541_p1 = mul_ln34_fu_541_p10;

assign mul_ln34_fu_541_p10 = select_ln34_6_reg_592;

assign or_ln29_fu_363_p2 = (icmp_ln20_reg_566 | and_ln34_3_reg_604);

assign out_d_fu_276_p2 = (5'd1 + out_d_0_reg_157);

assign out_h_fu_315_p2 = (5'd1 + select_ln34_reg_581);

assign out_w_fu_476_p2 = (5'd1 + select_ln29_reg_638);

assign output_r_address0 = zext_ln34_fu_536_p1;

assign output_r_d0 = and_ln34_reg_711;

assign select_ln20_2_fu_527_p3 = ((icmp_ln20_reg_566[0:0] === 1'b1) ? 10'd1 : add_ln20_2_reg_706);

assign select_ln20_fu_352_p3 = ((and_ln34_3_reg_604[0:0] === 1'b1) ? out_h_reg_611 : select_ln34_reg_581);

assign select_ln29_12_fu_375_p3 = ((and_ln34_3_reg_604[0:0] === 1'b1) ? sub_ln29_5_reg_623 : select_ln34_7_fu_357_p3);

assign select_ln29_fu_367_p3 = ((or_ln29_fu_363_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_193);

assign select_ln33_fu_505_p3 = ((xor_ln33_fu_499_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln34_6_fu_295_p3 = ((icmp_ln20_reg_566[0:0] === 1'b1) ? out_d_reg_576 : out_d_0_reg_157);

assign select_ln34_7_fu_357_p3 = ((icmp_ln20_reg_566[0:0] === 1'b1) ? 11'd0 : sub_ln29_reg_553);

assign select_ln34_fu_282_p3 = ((icmp_ln20_reg_566[0:0] === 1'b1) ? 5'd0 : out_h_0_reg_181);

assign sext_ln29_11_fu_387_p1 = select_ln29_12_reg_645;

assign sext_ln29_3_fu_401_p1 = $signed(add_ln29_fu_396_p2);

assign sext_ln29_4_fu_462_p1 = $signed(trunc_ln29_1_fu_453_p4);

assign sext_ln34_1_fu_384_p1 = $signed(SeparableConv2D_0_b_2_reg_633);

assign sext_ln34_fu_533_p1 = $signed(add_ln34_1_reg_716);

assign shl_ln29_1_fu_240_p3 = {{out_h_0_reg_181}, {2'd0}};

assign shl_ln29_1_mid1_fu_335_p3 = {{out_h_reg_611}, {2'd0}};

assign shl_ln29_mid1_fu_324_p3 = {{out_h_reg_611}, {5'd0}};

assign shl_ln_fu_228_p3 = {{out_h_0_reg_181}, {5'd0}};

assign sub_ln29_5_fu_346_p2 = (zext_ln29_fu_331_p1 - zext_ln29_18_fu_342_p1);

assign sub_ln29_fu_252_p2 = (zext_ln29_2_fu_236_p1 - zext_ln29_3_fu_248_p1);

assign tmp_5_fu_487_p3 = buffer_0_reg_205[32'd15];

assign trunc_ln29_1_fu_453_p4 = {{mul_ln29_reg_686[31:14]}};

assign trunc_ln33_fu_495_p1 = buffer_0_reg_205[15:0];

assign trunc_ln34_fu_301_p1 = select_ln34_6_fu_295_p3[3:0];

assign xor_ln33_fu_499_p2 = (tmp_5_fu_487_p3 ^ 1'd1);

assign xor_ln34_fu_305_p2 = (icmp_ln20_reg_566 ^ 1'd1);

assign zext_ln24_1_fu_393_p1 = select_ln29_reg_638;

assign zext_ln24_fu_390_p1 = select_ln29_reg_638;

assign zext_ln29_18_fu_342_p1 = shl_ln29_1_mid1_fu_335_p3;

assign zext_ln29_2_fu_236_p1 = shl_ln_fu_228_p3;

assign zext_ln29_3_fu_248_p1 = shl_ln29_1_fu_240_p3;

assign zext_ln29_4_fu_405_p1 = $unsigned(sext_ln29_3_fu_401_p1);

assign zext_ln29_fu_331_p1 = shl_ln29_mid1_fu_324_p3;

assign zext_ln34_2_fu_519_p1 = add_ln34_reg_696;

assign zext_ln34_6_fu_320_p1 = select_ln34_6_reg_592;

assign zext_ln34_fu_536_p1 = $unsigned(sext_ln34_fu_533_p1);

always @ (posedge ap_clk) begin
    sub_ln29_reg_553[1:0] <= 2'b00;
    sub_ln29_5_reg_623[1:0] <= 2'b00;
    select_ln29_12_reg_645[1:0] <= 2'b00;
    sext_ln29_11_reg_661[1:0] <= 2'b00;
    zext_ln24_reg_666[13:5] <= 9'b000000000;
end

endmodule //pointwise_conv2d_fix
