// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state9 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_0_b_s_address0;
reg    SeparableConv2D_0_b_s_ce0;
wire   [12:0] SeparableConv2D_0_b_s_q0;
wire   [3:0] SeparableConv2D_0_w_s_address0;
reg    SeparableConv2D_0_w_s_ce0;
wire   [14:0] SeparableConv2D_0_w_s_q0;
reg   [18:0] buffer_0_reg_188;
reg   [0:0] in_d_0_reg_198;
reg   [0:0] in_d_0_reg_198_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] in_d_0_reg_198_pp0_iter2_reg;
wire   [14:0] zext_ln24_fu_211_p1;
reg   [14:0] zext_ln24_reg_479;
wire    ap_CS_fsm_state2;
wire   [13:0] add_ln24_fu_215_p2;
reg   [13:0] add_ln24_reg_484;
wire   [4:0] out_d_fu_227_p2;
reg   [4:0] out_d_reg_492;
wire   [0:0] icmp_ln24_fu_221_p2;
wire  signed [18:0] sext_ln34_fu_247_p1;
reg  signed [18:0] sext_ln34_reg_507;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln31_fu_290_p2;
wire    ap_CS_fsm_state4;
wire   [9:0] add_ln31_fu_296_p2;
reg   [9:0] add_ln31_reg_516;
wire   [4:0] select_ln32_fu_314_p3;
reg   [4:0] select_ln32_reg_521;
wire   [4:0] select_ln31_fu_360_p3;
reg   [4:0] select_ln31_reg_526;
wire  signed [10:0] add_ln39_fu_372_p2;
reg  signed [10:0] add_ln39_reg_531;
reg   [13:0] input_addr_reg_536;
reg   [15:0] input_load_reg_541;
reg   [17:0] trunc_ln7_reg_546;
wire   [18:0] buffer_fu_412_p2;
reg    ap_enable_reg_pp0_iter3;
wire   [4:0] out_w_fu_468_p2;
wire    ap_CS_fsm_state9;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_in_d_0_phi_fu_202_p4;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] out_d_0_reg_133;
reg   [13:0] phi_mul_reg_144;
reg   [9:0] indvar_flatten_reg_155;
reg   [4:0] out_h_0_reg_166;
reg   [4:0] out_w_0_reg_177;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln25_fu_233_p1;
wire   [63:0] zext_ln28_1_fu_242_p1;
wire   [63:0] zext_ln39_3_fu_382_p1;
wire   [63:0] zext_ln47_fu_463_p1;
reg   [31:0] kernel_buffer_0_1_fu_78;
wire  signed [31:0] kernel_buffer_0_fu_251_p1;
wire   [3:0] trunc_ln26_fu_238_p1;
wire   [9:0] shl_ln_fu_260_p3;
wire   [6:0] shl_ln39_1_fu_272_p3;
wire   [10:0] zext_ln39_2_fu_268_p1;
wire   [10:0] zext_ln39_4_fu_280_p1;
wire   [0:0] icmp_ln33_fu_308_p2;
wire   [4:0] out_h_fu_302_p2;
wire   [9:0] shl_ln39_mid1_fu_322_p3;
wire   [6:0] shl_ln39_1_mid1_fu_334_p3;
wire   [10:0] zext_ln39_fu_330_p1;
wire   [10:0] zext_ln39_16_fu_342_p1;
wire   [10:0] sub_ln39_5_fu_346_p2;
wire   [10:0] sub_ln39_fu_284_p2;
wire   [10:0] zext_ln36_fu_368_p1;
wire   [10:0] select_ln32_12_fu_352_p3;
wire  signed [31:0] sext_ln39_1_fu_378_p1;
wire  signed [31:0] mul_ln39_fu_393_p0;
wire  signed [15:0] mul_ln39_fu_393_p1;
wire   [31:0] mul_ln39_fu_393_p2;
wire  signed [18:0] sext_ln39_2_fu_409_p1;
wire   [0:0] tmp_6_fu_418_p3;
wire   [0:0] xor_ln46_fu_430_p2;
wire   [15:0] select_ln46_fu_436_p3;
wire   [15:0] trunc_ln46_fu_426_p1;
wire  signed [14:0] sext_ln47_fu_451_p1;
wire   [14:0] add_ln47_1_fu_454_p2;
wire  signed [31:0] sext_ln47_1_fu_459_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

pointwise_conv2d_fix_SeparableConv2D_0_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_b_s_address0),
    .ce0(SeparableConv2D_0_b_s_ce0),
    .q0(SeparableConv2D_0_b_s_q0)
);

pointwise_conv2d_fix_SeparableConv2D_0_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_w_s_address0),
    .ce0(SeparableConv2D_0_w_s_ce0),
    .q0(SeparableConv2D_0_w_s_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln31_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((icmp_ln31_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buffer_0_reg_188 <= sext_ln34_reg_507;
    end else if (((in_d_0_reg_198_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        buffer_0_reg_188 <= buffer_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_d_0_reg_198 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (in_d_0_reg_198 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        in_d_0_reg_198 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_155 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten_reg_155 <= add_ln31_reg_516;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_0_reg_133 <= out_d_reg_492;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_133 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_166 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_h_0_reg_166 <= select_ln31_reg_526;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_w_0_reg_177 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_w_0_reg_177 <= out_w_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_144 <= add_ln24_reg_484;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_144 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln24_reg_484 <= add_ln24_fu_215_p2;
        out_d_reg_492 <= out_d_fu_227_p2;
        zext_ln24_reg_479[13 : 0] <= zext_ln24_fu_211_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln31_reg_516 <= add_ln31_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln39_reg_531 <= add_ln39_fu_372_p2;
        input_addr_reg_536 <= zext_ln39_3_fu_382_p1;
        select_ln31_reg_526 <= select_ln31_fu_360_p3;
        select_ln32_reg_521 <= select_ln32_fu_314_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_d_0_reg_198_pp0_iter1_reg <= in_d_0_reg_198;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        in_d_0_reg_198_pp0_iter2_reg <= in_d_0_reg_198_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (in_d_0_reg_198 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_load_reg_541 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_buffer_0_1_fu_78 <= kernel_buffer_0_fu_251_p1;
        sext_ln34_reg_507 <= sext_ln34_fu_247_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (in_d_0_reg_198_pp0_iter1_reg == 1'd0))) begin
        trunc_ln7_reg_546 <= {{mul_ln39_fu_393_p2[31:14]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_0_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_0_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_phi_mux_in_d_0_phi_fu_202_p4 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln24_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((in_d_0_reg_198 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_in_d_0_phi_fu_202_p4 = 1'd1;
    end else begin
        ap_phi_mux_in_d_0_phi_fu_202_p4 = in_d_0_reg_198;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln24_fu_221_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln31_fu_290_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_phi_mux_in_d_0_phi_fu_202_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_phi_mux_in_d_0_phi_fu_202_p4 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_0_b_s_address0 = zext_ln25_fu_233_p1;

assign SeparableConv2D_0_w_s_address0 = zext_ln28_1_fu_242_p1;

assign add_ln24_fu_215_p2 = (phi_mul_reg_144 + 14'd784);

assign add_ln31_fu_296_p2 = (indvar_flatten_reg_155 + 10'd1);

assign add_ln39_fu_372_p2 = (zext_ln36_fu_368_p1 + select_ln32_12_fu_352_p3);

assign add_ln47_1_fu_454_p2 = ($signed(zext_ln24_reg_479) + $signed(sext_ln47_fu_451_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_fu_412_p2 = ($signed(sext_ln39_2_fu_409_p1) + $signed(buffer_0_reg_188));

assign icmp_ln24_fu_221_p2 = ((out_d_0_reg_133 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_290_p2 = ((indvar_flatten_reg_155 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_308_p2 = ((out_w_0_reg_177 == 5'd28) ? 1'b1 : 1'b0);

assign input_r_address0 = input_addr_reg_536;

assign kernel_buffer_0_fu_251_p1 = $signed(SeparableConv2D_0_w_s_q0);

assign mul_ln39_fu_393_p0 = kernel_buffer_0_1_fu_78;

assign mul_ln39_fu_393_p1 = input_load_reg_541;

assign mul_ln39_fu_393_p2 = ($signed(mul_ln39_fu_393_p0) * $signed(mul_ln39_fu_393_p1));

assign out_d_fu_227_p2 = (out_d_0_reg_133 + 5'd1);

assign out_h_fu_302_p2 = (out_h_0_reg_166 + 5'd1);

assign out_w_fu_468_p2 = (5'd1 + select_ln32_reg_521);

assign output_r_address0 = zext_ln47_fu_463_p1;

assign output_r_d0 = (trunc_ln46_fu_426_p1 & select_ln46_fu_436_p3);

assign select_ln31_fu_360_p3 = ((icmp_ln33_fu_308_p2[0:0] === 1'b1) ? out_h_fu_302_p2 : out_h_0_reg_166);

assign select_ln32_12_fu_352_p3 = ((icmp_ln33_fu_308_p2[0:0] === 1'b1) ? sub_ln39_5_fu_346_p2 : sub_ln39_fu_284_p2);

assign select_ln32_fu_314_p3 = ((icmp_ln33_fu_308_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_177);

assign select_ln46_fu_436_p3 = ((xor_ln46_fu_430_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln34_fu_247_p1 = $signed(SeparableConv2D_0_b_s_q0);

assign sext_ln39_1_fu_378_p1 = add_ln39_fu_372_p2;

assign sext_ln39_2_fu_409_p1 = $signed(trunc_ln7_reg_546);

assign sext_ln47_1_fu_459_p1 = $signed(add_ln47_1_fu_454_p2);

assign sext_ln47_fu_451_p1 = add_ln39_reg_531;

assign shl_ln39_1_fu_272_p3 = {{out_h_0_reg_166}, {2'd0}};

assign shl_ln39_1_mid1_fu_334_p3 = {{out_h_fu_302_p2}, {2'd0}};

assign shl_ln39_mid1_fu_322_p3 = {{out_h_fu_302_p2}, {5'd0}};

assign shl_ln_fu_260_p3 = {{out_h_0_reg_166}, {5'd0}};

assign sub_ln39_5_fu_346_p2 = (zext_ln39_fu_330_p1 - zext_ln39_16_fu_342_p1);

assign sub_ln39_fu_284_p2 = (zext_ln39_2_fu_268_p1 - zext_ln39_4_fu_280_p1);

assign tmp_6_fu_418_p3 = buffer_0_reg_188[32'd18];

assign trunc_ln26_fu_238_p1 = out_d_0_reg_133[3:0];

assign trunc_ln46_fu_426_p1 = buffer_0_reg_188[15:0];

assign xor_ln46_fu_430_p2 = (tmp_6_fu_418_p3 ^ 1'd1);

assign zext_ln24_fu_211_p1 = phi_mul_reg_144;

assign zext_ln25_fu_233_p1 = out_d_0_reg_133;

assign zext_ln28_1_fu_242_p1 = trunc_ln26_fu_238_p1;

assign zext_ln36_fu_368_p1 = select_ln32_fu_314_p3;

assign zext_ln39_16_fu_342_p1 = shl_ln39_1_mid1_fu_334_p3;

assign zext_ln39_2_fu_268_p1 = shl_ln_fu_260_p3;

assign zext_ln39_3_fu_382_p1 = $unsigned(sext_ln39_1_fu_378_p1);

assign zext_ln39_4_fu_280_p1 = shl_ln39_1_fu_272_p3;

assign zext_ln39_fu_330_p1 = shl_ln39_mid1_fu_322_p3;

assign zext_ln47_fu_463_p1 = $unsigned(sext_ln47_1_fu_459_p1);

always @ (posedge ap_clk) begin
    zext_ln24_reg_479[14] <= 1'b0;
end

endmodule //pointwise_conv2d_fix
