// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_state6 = 7'd16;
parameter    ap_ST_fsm_pp1_stage0 = 7'd32;
parameter    ap_ST_fsm_state12 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_3_b_s_address0;
reg    SeparableConv2D_3_b_s_ce0;
wire   [13:0] SeparableConv2D_3_b_s_q0;
wire   [6:0] SeparableConv2D_3_w_s_address0;
reg    SeparableConv2D_3_w_s_ce0;
wire   [14:0] SeparableConv2D_3_w_s_q0;
reg   [3:0] i_0_reg_252;
reg   [10:0] indvar_flatten18_reg_264;
reg   [3:0] out_h_0_reg_275;
reg   [7:0] indvar_flatten_reg_286;
reg   [3:0] out_w_0_reg_297;
reg   [21:0] buffer_0_reg_308;
reg   [3:0] in_d_0_reg_318;
wire   [12:0] zext_ln24_fu_329_p1;
reg   [12:0] zext_ln24_reg_983;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln24_fu_333_p2;
reg   [11:0] add_ln24_reg_988;
wire   [4:0] out_d_fu_345_p2;
reg   [4:0] out_d_reg_996;
wire   [0:0] icmp_ln24_fu_339_p2;
wire   [3:0] trunc_ln28_fu_356_p1;
reg   [3:0] trunc_ln28_reg_1006;
wire  signed [21:0] sext_ln34_fu_360_p1;
reg  signed [21:0] sext_ln34_reg_1011;
wire    ap_CS_fsm_state3;
wire   [6:0] shl_ln_fu_364_p3;
reg   [6:0] shl_ln_reg_1018;
wire   [0:0] icmp_ln26_fu_371_p2;
reg   [0:0] icmp_ln26_reg_1023;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] i_fu_377_p2;
reg   [3:0] i_reg_1027;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln31_fu_516_p2;
reg   [0:0] icmp_ln31_reg_1037;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_state9_pp1_stage0_iter2;
wire    ap_block_state10_pp1_stage0_iter3;
wire    ap_block_state11_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln31_reg_1037_pp1_iter1_reg;
reg   [0:0] icmp_ln31_reg_1037_pp1_iter2_reg;
reg   [0:0] icmp_ln31_reg_1037_pp1_iter3_reg;
wire   [10:0] add_ln31_fu_522_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln33_fu_534_p2;
reg   [0:0] icmp_ln33_reg_1046;
reg   [0:0] icmp_ln33_reg_1046_pp1_iter1_reg;
reg   [0:0] icmp_ln33_reg_1046_pp1_iter2_reg;
reg   [0:0] icmp_ln33_reg_1046_pp1_iter3_reg;
wire   [8:0] select_ln32_4_fu_578_p3;
reg   [8:0] select_ln32_4_reg_1051;
wire   [0:0] and_ln32_fu_606_p2;
reg   [0:0] and_ln32_reg_1056;
reg   [0:0] and_ln32_reg_1056_pp1_iter1_reg;
reg   [0:0] and_ln32_reg_1056_pp1_iter2_reg;
reg   [0:0] and_ln32_reg_1056_pp1_iter3_reg;
wire   [3:0] select_ln31_fu_612_p3;
wire   [3:0] select_ln36_4_fu_632_p3;
reg   [3:0] select_ln36_4_reg_1066;
reg   [3:0] select_ln36_4_reg_1066_pp1_iter1_reg;
wire   [3:0] select_ln36_5_fu_644_p3;
reg   [3:0] select_ln36_5_reg_1072;
wire   [8:0] select_ln36_6_fu_658_p3;
reg  signed [8:0] select_ln36_6_reg_1078;
wire   [3:0] in_d_fu_666_p2;
reg   [3:0] in_d_reg_1083;
wire   [7:0] select_ln33_fu_678_p3;
wire   [0:0] icmp_ln36_2_fu_703_p2;
reg   [0:0] icmp_ln36_2_reg_1099;
reg   [0:0] icmp_ln36_2_reg_1099_pp1_iter2_reg;
reg   [0:0] icmp_ln36_2_reg_1099_pp1_iter3_reg;
wire   [8:0] add_ln47_fu_708_p2;
reg   [8:0] add_ln47_reg_1103;
reg   [8:0] add_ln47_reg_1103_pp1_iter2_reg;
reg   [8:0] add_ln47_reg_1103_pp1_iter3_reg;
reg   [15:0] input_load_reg_1108;
wire  signed [31:0] tmp_4_fu_758_p18;
reg  signed [31:0] tmp_4_reg_1113;
wire   [31:0] mul_ln39_fu_798_p2;
reg   [31:0] mul_ln39_reg_1118;
wire   [21:0] buffer_fu_828_p2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state6;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [4:0] out_d_0_reg_230;
wire    ap_CS_fsm_state12;
reg   [11:0] phi_mul_reg_241;
reg   [3:0] ap_phi_mux_i_0_phi_fu_256_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_301_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_in_d_0_phi_fu_322_p4;
wire   [63:0] zext_ln25_fu_351_p1;
wire   [63:0] zext_ln28_1_fu_392_p1;
wire   [63:0] zext_ln39_6_fu_698_p1;
wire   [63:0] zext_ln47_fu_879_p1;
reg   [31:0] kernel_buffer_15_fu_118;
wire  signed [31:0] kernel_buffer_0_fu_397_p1;
reg   [31:0] kernel_buffer_15_17_fu_122;
reg   [31:0] kernel_buffer_15_18_fu_126;
reg   [31:0] kernel_buffer_15_19_fu_130;
reg   [31:0] kernel_buffer_15_20_fu_134;
reg   [31:0] kernel_buffer_15_21_fu_138;
reg   [31:0] kernel_buffer_15_22_fu_142;
reg   [31:0] kernel_buffer_15_23_fu_146;
reg   [31:0] kernel_buffer_15_24_fu_150;
reg   [31:0] kernel_buffer_15_25_fu_154;
reg   [31:0] kernel_buffer_15_26_fu_158;
reg   [31:0] kernel_buffer_15_27_fu_162;
reg   [31:0] kernel_buffer_15_28_fu_166;
reg   [31:0] kernel_buffer_15_29_fu_170;
reg   [31:0] kernel_buffer_15_016_fu_174;
wire   [6:0] zext_ln28_fu_383_p1;
wire   [6:0] add_ln28_fu_387_p2;
wire   [7:0] shl_ln1_fu_476_p3;
wire   [4:0] shl_ln39_3_fu_488_p3;
wire   [8:0] zext_ln39_fu_484_p1;
wire   [8:0] zext_ln39_7_fu_496_p1;
wire   [8:0] sub_ln39_fu_500_p2;
wire   [8:0] zext_ln36_fu_506_p1;
wire   [3:0] out_h_fu_528_p2;
wire   [7:0] shl_ln39_mid1_fu_548_p3;
wire   [4:0] shl_ln39_3_mid1_fu_560_p3;
wire   [8:0] zext_ln39_8_fu_556_p1;
wire   [8:0] zext_ln39_9_fu_568_p1;
wire   [8:0] sub_ln39_2_fu_572_p2;
wire   [8:0] add_ln39_fu_510_p2;
wire   [0:0] icmp_ln36_fu_600_p2;
wire   [0:0] xor_ln32_fu_594_p2;
wire   [3:0] select_ln32_fu_540_p3;
wire   [0:0] or_ln36_fu_626_p2;
wire   [3:0] out_w_fu_620_p2;
wire   [8:0] zext_ln36_2_fu_640_p1;
wire   [8:0] add_ln39_4_fu_652_p2;
wire   [8:0] select_ln32_5_fu_586_p3;
wire   [7:0] add_ln33_fu_672_p2;
wire  signed [11:0] grp_fu_884_p3;
wire  signed [31:0] sext_ln39_fu_695_p1;
wire   [8:0] zext_ln36_3_fu_686_p1;
wire  signed [15:0] mul_ln39_fu_798_p1;
wire   [21:0] select_ln32_3_fu_803_p3;
wire   [17:0] trunc_ln_fu_815_p4;
wire  signed [21:0] sext_ln39_3_fu_824_p1;
wire   [21:0] select_ln36_fu_809_p3;
wire   [0:0] tmp_2_fu_834_p3;
wire   [0:0] xor_ln46_fu_846_p2;
wire   [15:0] select_ln46_fu_852_p3;
wire   [15:0] trunc_ln46_fu_842_p1;
wire  signed [12:0] sext_ln47_fu_867_p1;
wire   [12:0] add_ln47_1_fu_870_p2;
wire  signed [31:0] sext_ln47_1_fu_875_p1;
wire   [3:0] grp_fu_884_p0;
wire   [8:0] grp_fu_884_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [11:0] grp_fu_884_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

pointwise_conv2d_fix_3_SeparableConv2D_3_b_s #(
    .DataWidth( 14 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_3_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_3_b_s_address0),
    .ce0(SeparableConv2D_3_b_s_ce0),
    .q0(SeparableConv2D_3_b_s_q0)
);

pointwise_conv2d_fix_3_SeparableConv2D_3_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
SeparableConv2D_3_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_3_w_s_address0),
    .ce0(SeparableConv2D_3_w_s_ce0),
    .q0(SeparableConv2D_3_w_s_q0)
);

network_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
network_mux_164_32_1_1_U99(
    .din0(kernel_buffer_15_fu_118),
    .din1(kernel_buffer_15_17_fu_122),
    .din2(kernel_buffer_15_18_fu_126),
    .din3(kernel_buffer_15_19_fu_130),
    .din4(kernel_buffer_15_20_fu_134),
    .din5(kernel_buffer_15_21_fu_138),
    .din6(kernel_buffer_15_22_fu_142),
    .din7(kernel_buffer_15_23_fu_146),
    .din8(32'd0),
    .din9(kernel_buffer_15_24_fu_150),
    .din10(kernel_buffer_15_25_fu_154),
    .din11(kernel_buffer_15_26_fu_158),
    .din12(kernel_buffer_15_27_fu_162),
    .din13(kernel_buffer_15_28_fu_166),
    .din14(kernel_buffer_15_29_fu_170),
    .din15(kernel_buffer_15_016_fu_174),
    .din16(select_ln36_4_reg_1066_pp1_iter1_reg),
    .dout(tmp_4_fu_758_p18)
);

network_mac_muladd_4ns_9ns_9s_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
network_mac_muladd_4ns_9ns_9s_12_1_1_U100(
    .din0(grp_fu_884_p0),
    .din1(grp_fu_884_p1),
    .din2(select_ln36_6_reg_1078),
    .dout(grp_fu_884_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_0_reg_308 <= sext_ln34_reg_1011;
    end else if (((icmp_ln31_reg_1037_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        buffer_0_reg_308 <= buffer_fu_828_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_1023 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_252 <= i_reg_1027;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_252 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_d_0_reg_318 <= 4'd0;
    end else if (((icmp_ln31_reg_1037 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        in_d_0_reg_318 <= in_d_reg_1083;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten18_reg_264 <= 11'd0;
    end else if (((icmp_ln31_fu_516_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten18_reg_264 <= add_ln31_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_286 <= 8'd0;
    end else if (((icmp_ln31_fu_516_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_286 <= select_ln33_fu_678_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_d_0_reg_230 <= out_d_reg_996;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_230 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_h_0_reg_275 <= 4'd0;
    end else if (((icmp_ln31_fu_516_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_h_0_reg_275 <= select_ln31_fu_612_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_w_0_reg_297 <= 4'd0;
    end else if (((icmp_ln31_reg_1037 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_w_0_reg_297 <= select_ln36_5_reg_1072;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        phi_mul_reg_241 <= add_ln24_reg_988;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_241 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln24_reg_988 <= add_ln24_fu_333_p2;
        out_d_reg_996 <= out_d_fu_345_p2;
        zext_ln24_reg_983[11 : 0] <= zext_ln24_fu_329_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln36_2_fu_703_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln47_reg_1103 <= add_ln47_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln47_reg_1103_pp1_iter2_reg <= add_ln47_reg_1103;
        add_ln47_reg_1103_pp1_iter3_reg <= add_ln47_reg_1103_pp1_iter2_reg;
        and_ln32_reg_1056_pp1_iter2_reg <= and_ln32_reg_1056_pp1_iter1_reg;
        and_ln32_reg_1056_pp1_iter3_reg <= and_ln32_reg_1056_pp1_iter2_reg;
        icmp_ln31_reg_1037_pp1_iter2_reg <= icmp_ln31_reg_1037_pp1_iter1_reg;
        icmp_ln31_reg_1037_pp1_iter3_reg <= icmp_ln31_reg_1037_pp1_iter2_reg;
        icmp_ln33_reg_1046_pp1_iter2_reg <= icmp_ln33_reg_1046_pp1_iter1_reg;
        icmp_ln33_reg_1046_pp1_iter3_reg <= icmp_ln33_reg_1046_pp1_iter2_reg;
        icmp_ln36_2_reg_1099_pp1_iter2_reg <= icmp_ln36_2_reg_1099;
        icmp_ln36_2_reg_1099_pp1_iter3_reg <= icmp_ln36_2_reg_1099_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_516_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        and_ln32_reg_1056 <= and_ln32_fu_606_p2;
        icmp_ln33_reg_1046 <= icmp_ln33_fu_534_p2;
        select_ln32_4_reg_1051[8 : 1] <= select_ln32_4_fu_578_p3[8 : 1];
        select_ln36_4_reg_1066 <= select_ln36_4_fu_632_p3;
        select_ln36_6_reg_1078 <= select_ln36_6_fu_658_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        and_ln32_reg_1056_pp1_iter1_reg <= and_ln32_reg_1056;
        icmp_ln31_reg_1037 <= icmp_ln31_fu_516_p2;
        icmp_ln31_reg_1037_pp1_iter1_reg <= icmp_ln31_reg_1037;
        icmp_ln33_reg_1046_pp1_iter1_reg <= icmp_ln33_reg_1046;
        select_ln36_4_reg_1066_pp1_iter1_reg <= select_ln36_4_reg_1066;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_1027 <= i_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln26_reg_1023 <= icmp_ln26_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1037 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln36_2_reg_1099 <= icmp_ln36_2_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_516_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        in_d_reg_1083 <= in_d_fu_666_p2;
        select_ln36_5_reg_1072 <= select_ln36_5_fu_644_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1037_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_load_reg_1108 <= input_r_q0;
        tmp_4_reg_1113 <= tmp_4_fu_758_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & ((i_0_reg_252 == 4'd8) | (i_0_reg_252 == 4'd15)))) begin
        kernel_buffer_15_016_fu_174 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_17_fu_122 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_18_fu_126 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_19_fu_130 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_20_fu_134 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_21_fu_138 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd6) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_22_fu_142 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd7) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_23_fu_146 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd9) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_24_fu_150 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd10) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_25_fu_154 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd11) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_26_fu_158 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd12) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_27_fu_162 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd13) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_28_fu_166 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd14) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_29_fu_170 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((i_0_reg_252 == 4'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_buffer_15_fu_118 <= kernel_buffer_0_fu_397_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_reg_1037_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_ln39_reg_1118 <= mul_ln39_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln34_reg_1011 <= sext_ln34_fu_360_p1;
        shl_ln_reg_1018[6 : 3] <= shl_ln_fu_364_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_339_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln28_reg_1006 <= trunc_ln28_fu_356_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_3_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_3_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        SeparableConv2D_3_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_3_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_371_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_516_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln24_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_1023 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_256_p4 = i_reg_1027;
    end else begin
        ap_phi_mux_i_0_phi_fu_256_p4 = i_0_reg_252;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1037 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_in_d_0_phi_fu_322_p4 = in_d_reg_1083;
    end else begin
        ap_phi_mux_in_d_0_phi_fu_322_p4 = in_d_0_reg_318;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1037 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_301_p4 = select_ln36_5_reg_1072;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_301_p4 = out_w_0_reg_297;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln36_2_reg_1099_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln24_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln26_fu_371_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln26_fu_371_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln31_fu_516_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln31_fu_516_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_3_b_s_address0 = zext_ln25_fu_351_p1;

assign SeparableConv2D_3_w_s_address0 = zext_ln28_1_fu_392_p1;

assign add_ln24_fu_333_p2 = (phi_mul_reg_241 + 12'd196);

assign add_ln28_fu_387_p2 = (shl_ln_reg_1018 + zext_ln28_fu_383_p1);

assign add_ln31_fu_522_p2 = (indvar_flatten18_reg_264 + 11'd1);

assign add_ln33_fu_672_p2 = (indvar_flatten_reg_286 + 8'd1);

assign add_ln39_4_fu_652_p2 = (select_ln32_4_fu_578_p3 + zext_ln36_2_fu_640_p1);

assign add_ln39_fu_510_p2 = (sub_ln39_fu_500_p2 + zext_ln36_fu_506_p1);

assign add_ln47_1_fu_870_p2 = ($signed(zext_ln24_reg_983) + $signed(sext_ln47_fu_867_p1));

assign add_ln47_fu_708_p2 = (zext_ln36_3_fu_686_p1 + select_ln32_4_reg_1051);

assign and_ln32_fu_606_p2 = (xor_ln32_fu_594_p2 & icmp_ln36_fu_600_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign buffer_fu_828_p2 = ($signed(sext_ln39_3_fu_824_p1) + $signed(select_ln36_fu_809_p3));

assign grp_fu_884_p0 = grp_fu_884_p00;

assign grp_fu_884_p00 = select_ln36_4_reg_1066;

assign grp_fu_884_p1 = 12'd196;

assign i_fu_377_p2 = (ap_phi_mux_i_0_phi_fu_256_p4 + 4'd1);

assign icmp_ln24_fu_339_p2 = ((out_d_0_reg_230 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_371_p2 = ((ap_phi_mux_i_0_phi_fu_256_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_516_p2 = ((indvar_flatten18_reg_264 == 11'd1568) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_534_p2 = ((indvar_flatten_reg_286 == 8'd112) ? 1'b1 : 1'b0);

assign icmp_ln36_2_fu_703_p2 = ((in_d_reg_1083 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_600_p2 = ((ap_phi_mux_in_d_0_phi_fu_322_p4 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_666_p2 = (select_ln36_4_fu_632_p3 + 4'd1);

assign input_r_address0 = zext_ln39_6_fu_698_p1;

assign kernel_buffer_0_fu_397_p1 = $signed(SeparableConv2D_3_w_s_q0);

assign mul_ln39_fu_798_p1 = input_load_reg_1108;

assign mul_ln39_fu_798_p2 = ($signed(tmp_4_reg_1113) * $signed(mul_ln39_fu_798_p1));

assign or_ln36_fu_626_p2 = (icmp_ln33_fu_534_p2 | and_ln32_fu_606_p2);

assign out_d_fu_345_p2 = (out_d_0_reg_230 + 5'd1);

assign out_h_fu_528_p2 = (out_h_0_reg_275 + 4'd1);

assign out_w_fu_620_p2 = (select_ln32_fu_540_p3 + 4'd1);

assign output_r_address0 = zext_ln47_fu_879_p1;

assign output_r_d0 = (trunc_ln46_fu_842_p1 & select_ln46_fu_852_p3);

assign select_ln31_fu_612_p3 = ((icmp_ln33_fu_534_p2[0:0] === 1'b1) ? out_h_fu_528_p2 : out_h_0_reg_275);

assign select_ln32_3_fu_803_p3 = ((icmp_ln33_reg_1046_pp1_iter3_reg[0:0] === 1'b1) ? sext_ln34_reg_1011 : buffer_0_reg_308);

assign select_ln32_4_fu_578_p3 = ((icmp_ln33_fu_534_p2[0:0] === 1'b1) ? sub_ln39_2_fu_572_p2 : sub_ln39_fu_500_p2);

assign select_ln32_5_fu_586_p3 = ((icmp_ln33_fu_534_p2[0:0] === 1'b1) ? sub_ln39_2_fu_572_p2 : add_ln39_fu_510_p2);

assign select_ln32_fu_540_p3 = ((icmp_ln33_fu_534_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_w_0_phi_fu_301_p4);

assign select_ln33_fu_678_p3 = ((icmp_ln33_fu_534_p2[0:0] === 1'b1) ? 8'd1 : add_ln33_fu_672_p2);

assign select_ln36_4_fu_632_p3 = ((or_ln36_fu_626_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_in_d_0_phi_fu_322_p4);

assign select_ln36_5_fu_644_p3 = ((and_ln32_fu_606_p2[0:0] === 1'b1) ? out_w_fu_620_p2 : select_ln32_fu_540_p3);

assign select_ln36_6_fu_658_p3 = ((and_ln32_fu_606_p2[0:0] === 1'b1) ? add_ln39_4_fu_652_p2 : select_ln32_5_fu_586_p3);

assign select_ln36_fu_809_p3 = ((and_ln32_reg_1056_pp1_iter3_reg[0:0] === 1'b1) ? sext_ln34_reg_1011 : select_ln32_3_fu_803_p3);

assign select_ln46_fu_852_p3 = ((xor_ln46_fu_846_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln34_fu_360_p1 = $signed(SeparableConv2D_3_b_s_q0);

assign sext_ln39_3_fu_824_p1 = $signed(trunc_ln_fu_815_p4);

assign sext_ln39_fu_695_p1 = grp_fu_884_p3;

assign sext_ln47_1_fu_875_p1 = $signed(add_ln47_1_fu_870_p2);

assign sext_ln47_fu_867_p1 = $signed(add_ln47_reg_1103_pp1_iter3_reg);

assign shl_ln1_fu_476_p3 = {{out_h_0_reg_275}, {4'd0}};

assign shl_ln39_3_fu_488_p3 = {{out_h_0_reg_275}, {1'd0}};

assign shl_ln39_3_mid1_fu_560_p3 = {{out_h_fu_528_p2}, {1'd0}};

assign shl_ln39_mid1_fu_548_p3 = {{out_h_fu_528_p2}, {4'd0}};

assign shl_ln_fu_364_p3 = {{trunc_ln28_reg_1006}, {3'd0}};

assign sub_ln39_2_fu_572_p2 = (zext_ln39_8_fu_556_p1 - zext_ln39_9_fu_568_p1);

assign sub_ln39_fu_500_p2 = (zext_ln39_fu_484_p1 - zext_ln39_7_fu_496_p1);

assign tmp_2_fu_834_p3 = buffer_fu_828_p2[32'd21];

assign trunc_ln28_fu_356_p1 = out_d_0_reg_230[3:0];

assign trunc_ln46_fu_842_p1 = buffer_fu_828_p2[15:0];

assign trunc_ln_fu_815_p4 = {{mul_ln39_reg_1118[31:14]}};

assign xor_ln32_fu_594_p2 = (icmp_ln33_fu_534_p2 ^ 1'd1);

assign xor_ln46_fu_846_p2 = (tmp_2_fu_834_p3 ^ 1'd1);

assign zext_ln24_fu_329_p1 = phi_mul_reg_241;

assign zext_ln25_fu_351_p1 = out_d_0_reg_230;

assign zext_ln28_1_fu_392_p1 = add_ln28_fu_387_p2;

assign zext_ln28_fu_383_p1 = ap_phi_mux_i_0_phi_fu_256_p4;

assign zext_ln36_2_fu_640_p1 = out_w_fu_620_p2;

assign zext_ln36_3_fu_686_p1 = select_ln36_5_reg_1072;

assign zext_ln36_fu_506_p1 = ap_phi_mux_out_w_0_phi_fu_301_p4;

assign zext_ln39_6_fu_698_p1 = $unsigned(sext_ln39_fu_695_p1);

assign zext_ln39_7_fu_496_p1 = shl_ln39_3_fu_488_p3;

assign zext_ln39_8_fu_556_p1 = shl_ln39_mid1_fu_548_p3;

assign zext_ln39_9_fu_568_p1 = shl_ln39_3_mid1_fu_560_p3;

assign zext_ln39_fu_484_p1 = shl_ln1_fu_476_p3;

assign zext_ln47_fu_879_p1 = $unsigned(sext_ln47_1_fu_875_p1);

always @ (posedge ap_clk) begin
    zext_ln24_reg_983[12] <= 1'b0;
    shl_ln_reg_1018[2:0] <= 3'b000;
    select_ln32_4_reg_1051[0] <= 1'b0;
end

endmodule //pointwise_conv2d_fix_3
