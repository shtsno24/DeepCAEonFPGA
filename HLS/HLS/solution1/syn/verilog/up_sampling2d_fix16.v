// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module up_sampling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] input_height;
input  [4:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_depth;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] indvar_flatten31_reg_115;
reg   [4:0] out_d_0_reg_126;
reg   [9:0] indvar_flatten_reg_137;
reg   [4:0] out_h_0_reg_148;
reg   [4:0] out_w_0_reg_159;
wire   [4:0] empty_fu_170_p1;
reg   [4:0] empty_reg_525;
wire   [9:0] mul_ln6_fu_186_p2;
reg   [9:0] mul_ln6_reg_531;
wire   [7:0] zext_ln19_fu_192_p1;
reg   [7:0] zext_ln19_reg_537;
wire    ap_CS_fsm_state2;
wire   [8:0] zext_ln19_1_fu_196_p1;
reg   [8:0] zext_ln19_1_reg_543;
wire   [13:0] zext_ln19_3_cast_fu_199_p1;
reg   [13:0] zext_ln19_3_cast_reg_549;
wire   [11:0] empty_11_fu_206_p1;
reg   [11:0] empty_11_reg_554;
wire   [14:0] mul_ln6_1_fu_494_p2;
reg   [14:0] mul_ln6_1_reg_559;
wire   [0:0] icmp_ln16_fu_217_p2;
reg   [0:0] icmp_ln16_reg_564;
wire   [0:0] icmp_ln14_fu_270_p2;
reg   [0:0] icmp_ln14_reg_569;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln14_reg_569_pp0_iter1_reg;
wire   [14:0] add_ln14_fu_275_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln14_fu_362_p3;
wire   [4:0] select_ln19_6_fu_382_p3;
reg   [4:0] select_ln19_6_reg_583;
wire   [7:0] select_ln19_7_fu_414_p3;
reg   [7:0] select_ln19_7_reg_588;
wire   [8:0] select_ln19_8_fu_428_p3;
reg   [8:0] select_ln19_8_reg_593;
wire   [4:0] select_ln15_fu_436_p3;
reg   [3:0] lshr_ln19_1_reg_603;
wire   [4:0] out_w_fu_454_p2;
wire   [9:0] select_ln15_1_fu_466_p3;
wire   [13:0] grp_fu_508_p3;
reg   [13:0] add_ln19_1_reg_623;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln19_6_fu_483_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln19_8_fu_490_p1;
wire   [4:0] empty_9_fu_174_p1;
wire   [4:0] mul_ln6_fu_186_p0;
wire   [4:0] mul_ln6_fu_186_p1;
wire   [4:0] empty_10_fu_202_p1;
wire   [4:0] mul_ln19_fu_230_p0;
wire   [4:0] mul_ln19_fu_230_p1;
wire   [4:0] mul_ln19_1_fu_235_p0;
wire   [5:0] mul_ln19_1_fu_235_p1;
wire   [3:0] lshr_ln_fu_240_p4;
wire   [7:0] mul_ln19_fu_230_p2;
wire   [7:0] zext_ln19_4_fu_250_p1;
wire   [8:0] mul_ln19_1_fu_235_p2;
wire   [8:0] zext_ln19_6_cast_fu_254_p1;
wire   [0:0] icmp_ln15_fu_287_p2;
wire   [4:0] out_d_fu_281_p2;
wire   [4:0] mul_ln19_2_fu_308_p0;
wire   [4:0] mul_ln19_2_fu_308_p1;
wire   [7:0] mul_ln19_2_fu_308_p2;
wire   [4:0] mul_ln19_3_fu_321_p0;
wire   [5:0] mul_ln19_3_fu_321_p1;
wire   [8:0] mul_ln19_3_fu_321_p2;
wire   [7:0] tmp_fu_258_p2;
wire   [8:0] tmp2_fu_264_p2;
wire   [0:0] icmp_ln16_1_fu_350_p2;
wire   [4:0] select_ln19_fu_292_p3;
wire   [0:0] select_ln19_5_fu_355_p3;
wire   [0:0] or_ln19_fu_376_p2;
wire   [4:0] out_h_fu_370_p2;
wire   [3:0] lshr_ln19_mid1_fu_390_p4;
wire   [7:0] select_ln19_1_fu_313_p3;
wire   [7:0] zext_ln19_11_fu_400_p1;
wire   [7:0] tmp_mid1_fu_408_p2;
wire   [7:0] select_ln19_3_fu_334_p3;
wire   [8:0] select_ln19_2_fu_326_p3;
wire   [8:0] zext_ln19_6_cast_mid_fu_404_p1;
wire   [8:0] tmp2_mid1_fu_422_p2;
wire   [8:0] select_ln19_4_fu_342_p3;
wire   [9:0] add_ln15_1_fu_460_p2;
wire   [11:0] grp_fu_500_p3;
wire   [9:0] mul_ln6_1_fu_494_p0;
wire   [4:0] mul_ln6_1_fu_494_p1;
wire   [7:0] grp_fu_500_p0;
wire   [4:0] grp_fu_500_p1;
wire   [3:0] grp_fu_500_p2;
wire   [8:0] grp_fu_508_p0;
wire   [5:0] grp_fu_508_p1;
wire   [4:0] grp_fu_508_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_500_p00;
wire   [11:0] grp_fu_500_p20;
wire   [13:0] grp_fu_508_p00;
wire   [13:0] grp_fu_508_p20;
wire   [8:0] mul_ln19_1_fu_235_p00;
wire   [7:0] mul_ln19_2_fu_308_p00;
wire   [8:0] mul_ln19_3_fu_321_p00;
wire   [7:0] mul_ln19_fu_230_p00;
wire   [14:0] mul_ln6_1_fu_494_p00;
wire   [14:0] mul_ln6_1_fu_494_p10;
wire   [9:0] mul_ln6_fu_186_p00;
wire   [9:0] mul_ln6_fu_186_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

network_mul_mul_10ns_5ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
network_mul_mul_10ns_5ns_15_1_1_U89(
    .din0(mul_ln6_1_fu_494_p0),
    .din1(mul_ln6_1_fu_494_p1),
    .dout(mul_ln6_1_fu_494_p2)
);

network_mac_muladd_8ns_5ns_4ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
network_mac_muladd_8ns_5ns_4ns_12_1_1_U90(
    .din0(grp_fu_500_p0),
    .din1(grp_fu_500_p1),
    .din2(grp_fu_500_p2),
    .dout(grp_fu_500_p3)
);

network_mac_muladd_9ns_6ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_mac_muladd_9ns_6ns_5ns_14_1_1_U91(
    .din0(grp_fu_508_p0),
    .din1(grp_fu_508_p1),
    .din2(grp_fu_508_p2),
    .dout(grp_fu_508_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten31_reg_115 <= add_ln14_fu_275_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten31_reg_115 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_137 <= select_ln15_1_fu_466_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_137 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_d_0_reg_126 <= select_ln14_fu_362_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d_0_reg_126 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_h_0_reg_148 <= select_ln15_fu_436_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_0_reg_148 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_w_0_reg_159 <= out_w_fu_454_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_w_0_reg_159 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_569 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        add_ln19_1_reg_623 <= grp_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_11_reg_554[4 : 0] <= empty_11_fu_206_p1[4 : 0];
        icmp_ln16_reg_564 <= icmp_ln16_fu_217_p2;
        mul_ln6_1_reg_559 <= mul_ln6_1_fu_494_p2;
        zext_ln19_1_reg_543[5 : 0] <= zext_ln19_1_fu_196_p1[5 : 0];
        zext_ln19_3_cast_reg_549[5 : 0] <= zext_ln19_3_cast_fu_199_p1[5 : 0];
        zext_ln19_reg_537[4 : 0] <= zext_ln19_fu_192_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_525 <= empty_fu_170_p1;
        mul_ln6_reg_531 <= mul_ln6_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_569 <= icmp_ln14_fu_270_p2;
        icmp_ln14_reg_569_pp0_iter1_reg <= icmp_ln14_reg_569;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln19_1_reg_603 <= {{select_ln19_6_fu_382_p3[4:1]}};
        select_ln19_6_reg_583 <= select_ln19_6_fu_382_p3;
        select_ln19_7_reg_588 <= select_ln19_7_fu_414_p3;
        select_ln19_8_reg_593 <= select_ln19_8_fu_428_p3;
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_270_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_569_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln14_fu_270_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln14_fu_270_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_275_p2 = (indvar_flatten31_reg_115 + 15'd1);

assign add_ln15_1_fu_460_p2 = (indvar_flatten_reg_137 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_10_fu_202_p1 = output_depth[4:0];

assign empty_11_fu_206_p1 = input_width;

assign empty_9_fu_174_p1 = output_height[4:0];

assign empty_fu_170_p1 = output_width[4:0];

assign grp_fu_500_p0 = grp_fu_500_p00;

assign grp_fu_500_p00 = select_ln19_7_reg_588;

assign grp_fu_500_p1 = empty_11_reg_554;

assign grp_fu_500_p2 = grp_fu_500_p20;

assign grp_fu_500_p20 = lshr_ln19_1_reg_603;

assign grp_fu_508_p0 = grp_fu_508_p00;

assign grp_fu_508_p00 = select_ln19_8_reg_593;

assign grp_fu_508_p1 = zext_ln19_3_cast_reg_549;

assign grp_fu_508_p2 = grp_fu_508_p20;

assign grp_fu_508_p20 = select_ln19_6_reg_583;

assign icmp_ln14_fu_270_p2 = ((indvar_flatten31_reg_115 == mul_ln6_1_reg_559) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_287_p2 = ((indvar_flatten_reg_137 == mul_ln6_reg_531) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_350_p2 = ((out_w_0_reg_159 == empty_reg_525) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_217_p2 = ((empty_reg_525 == 5'd0) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln19_6_fu_483_p1;

assign lshr_ln19_mid1_fu_390_p4 = {{out_h_fu_370_p2[4:1]}};

assign lshr_ln_fu_240_p4 = {{out_h_0_reg_148[4:1]}};

assign mul_ln19_1_fu_235_p0 = mul_ln19_1_fu_235_p00;

assign mul_ln19_1_fu_235_p00 = out_d_0_reg_126;

assign mul_ln19_1_fu_235_p1 = zext_ln19_1_reg_543;

assign mul_ln19_1_fu_235_p2 = (mul_ln19_1_fu_235_p0 * mul_ln19_1_fu_235_p1);

assign mul_ln19_2_fu_308_p0 = mul_ln19_2_fu_308_p00;

assign mul_ln19_2_fu_308_p00 = out_d_fu_281_p2;

assign mul_ln19_2_fu_308_p1 = zext_ln19_reg_537;

assign mul_ln19_2_fu_308_p2 = (mul_ln19_2_fu_308_p0 * mul_ln19_2_fu_308_p1);

assign mul_ln19_3_fu_321_p0 = mul_ln19_3_fu_321_p00;

assign mul_ln19_3_fu_321_p00 = out_d_fu_281_p2;

assign mul_ln19_3_fu_321_p1 = zext_ln19_1_reg_543;

assign mul_ln19_3_fu_321_p2 = (mul_ln19_3_fu_321_p0 * mul_ln19_3_fu_321_p1);

assign mul_ln19_fu_230_p0 = mul_ln19_fu_230_p00;

assign mul_ln19_fu_230_p00 = out_d_0_reg_126;

assign mul_ln19_fu_230_p1 = zext_ln19_reg_537;

assign mul_ln19_fu_230_p2 = (mul_ln19_fu_230_p0 * mul_ln19_fu_230_p1);

assign mul_ln6_1_fu_494_p0 = mul_ln6_1_fu_494_p00;

assign mul_ln6_1_fu_494_p00 = mul_ln6_reg_531;

assign mul_ln6_1_fu_494_p1 = mul_ln6_1_fu_494_p10;

assign mul_ln6_1_fu_494_p10 = empty_10_fu_202_p1;

assign mul_ln6_fu_186_p0 = mul_ln6_fu_186_p00;

assign mul_ln6_fu_186_p00 = empty_fu_170_p1;

assign mul_ln6_fu_186_p1 = mul_ln6_fu_186_p10;

assign mul_ln6_fu_186_p10 = empty_9_fu_174_p1;

assign mul_ln6_fu_186_p2 = (mul_ln6_fu_186_p0 * mul_ln6_fu_186_p1);

assign or_ln19_fu_376_p2 = (select_ln19_5_fu_355_p3 | icmp_ln15_fu_287_p2);

assign out_d_fu_281_p2 = (out_d_0_reg_126 + 5'd1);

assign out_h_fu_370_p2 = (select_ln19_fu_292_p3 + 5'd1);

assign out_w_fu_454_p2 = (select_ln19_6_fu_382_p3 + 5'd1);

assign output_r_address0 = zext_ln19_8_fu_490_p1;

assign output_r_d0 = input_r_q0;

assign select_ln14_fu_362_p3 = ((icmp_ln15_fu_287_p2[0:0] === 1'b1) ? out_d_fu_281_p2 : out_d_0_reg_126);

assign select_ln15_1_fu_466_p3 = ((icmp_ln15_fu_287_p2[0:0] === 1'b1) ? 10'd1 : add_ln15_1_fu_460_p2);

assign select_ln15_fu_436_p3 = ((select_ln19_5_fu_355_p3[0:0] === 1'b1) ? out_h_fu_370_p2 : select_ln19_fu_292_p3);

assign select_ln19_1_fu_313_p3 = ((icmp_ln15_fu_287_p2[0:0] === 1'b1) ? mul_ln19_2_fu_308_p2 : mul_ln19_fu_230_p2);

assign select_ln19_2_fu_326_p3 = ((icmp_ln15_fu_287_p2[0:0] === 1'b1) ? mul_ln19_3_fu_321_p2 : mul_ln19_1_fu_235_p2);

assign select_ln19_3_fu_334_p3 = ((icmp_ln15_fu_287_p2[0:0] === 1'b1) ? mul_ln19_2_fu_308_p2 : tmp_fu_258_p2);

assign select_ln19_4_fu_342_p3 = ((icmp_ln15_fu_287_p2[0:0] === 1'b1) ? mul_ln19_3_fu_321_p2 : tmp2_fu_264_p2);

assign select_ln19_5_fu_355_p3 = ((icmp_ln15_fu_287_p2[0:0] === 1'b1) ? icmp_ln16_reg_564 : icmp_ln16_1_fu_350_p2);

assign select_ln19_6_fu_382_p3 = ((or_ln19_fu_376_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_159);

assign select_ln19_7_fu_414_p3 = ((select_ln19_5_fu_355_p3[0:0] === 1'b1) ? tmp_mid1_fu_408_p2 : select_ln19_3_fu_334_p3);

assign select_ln19_8_fu_428_p3 = ((select_ln19_5_fu_355_p3[0:0] === 1'b1) ? tmp2_mid1_fu_422_p2 : select_ln19_4_fu_342_p3);

assign select_ln19_fu_292_p3 = ((icmp_ln15_fu_287_p2[0:0] === 1'b1) ? 5'd0 : out_h_0_reg_148);

assign tmp2_fu_264_p2 = (mul_ln19_1_fu_235_p2 + zext_ln19_6_cast_fu_254_p1);

assign tmp2_mid1_fu_422_p2 = (select_ln19_2_fu_326_p3 + zext_ln19_6_cast_mid_fu_404_p1);

assign tmp_fu_258_p2 = (mul_ln19_fu_230_p2 + zext_ln19_4_fu_250_p1);

assign tmp_mid1_fu_408_p2 = (select_ln19_1_fu_313_p3 + zext_ln19_11_fu_400_p1);

assign zext_ln19_11_fu_400_p1 = lshr_ln19_mid1_fu_390_p4;

assign zext_ln19_1_fu_196_p1 = output_height;

assign zext_ln19_3_cast_fu_199_p1 = output_width;

assign zext_ln19_4_fu_250_p1 = lshr_ln_fu_240_p4;

assign zext_ln19_6_cast_fu_254_p1 = out_h_0_reg_148;

assign zext_ln19_6_cast_mid_fu_404_p1 = out_h_fu_370_p2;

assign zext_ln19_6_fu_483_p1 = grp_fu_500_p3;

assign zext_ln19_8_fu_490_p1 = add_ln19_1_reg_623;

assign zext_ln19_fu_192_p1 = input_height;

always @ (posedge ap_clk) begin
    zext_ln19_reg_537[7:5] <= 3'b000;
    zext_ln19_1_reg_543[8:6] <= 3'b000;
    zext_ln19_3_cast_reg_549[13:6] <= 8'b00000000;
    empty_11_reg_554[11:5] <= 7'b0000000;
end

endmodule //up_sampling2d_fix16
