// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [6:0] sext_ln5_1_fu_328_p1;
reg  signed [6:0] sext_ln5_1_reg_684;
wire   [4:0] trunc_ln13_fu_332_p1;
reg   [4:0] trunc_ln13_reg_689;
wire   [4:0] add_ln13_fu_336_p2;
reg   [4:0] add_ln13_reg_695;
wire   [11:0] mul_ln13_1_fu_350_p2;
reg   [11:0] mul_ln13_1_reg_700;
wire   [9:0] empty_fu_356_p1;
reg   [9:0] empty_reg_705;
wire   [4:0] empty_30_fu_360_p2;
reg   [4:0] empty_30_reg_711;
wire   [4:0] trunc_ln13_1_fu_366_p1;
reg   [4:0] trunc_ln13_1_reg_721;
wire   [4:0] empty_32_fu_370_p1;
reg   [4:0] empty_32_reg_726;
wire   [13:0] zext_ln13_fu_377_p1;
reg   [13:0] zext_ln13_reg_731;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln13_2_fu_380_p1;
reg   [13:0] zext_ln13_2_reg_738;
wire   [13:0] mul_ln13_fu_387_p2;
reg   [13:0] mul_ln13_reg_743;
wire   [15:0] zext_ln13_5_fu_393_p1;
reg   [15:0] zext_ln13_5_reg_748;
wire   [15:0] p_cast8_fu_396_p1;
reg   [15:0] p_cast8_reg_753;
wire   [13:0] p_cast5_fu_405_p1;
wire   [15:0] p_cast4_fu_413_p1;
reg   [15:0] p_cast4_reg_763;
wire   [13:0] zext_ln13_6_fu_432_p1;
reg   [13:0] zext_ln13_6_reg_768;
wire   [13:0] zext_ln13_7_fu_441_p1;
wire   [13:0] zext_ln13_9_fu_460_p1;
wire   [4:0] add_ln13_12_fu_473_p2;
wire   [4:0] add_ln13_13_fu_479_p2;
reg   [4:0] add_ln13_13_reg_789;
wire   [4:0] empty_33_fu_485_p1;
reg   [4:0] empty_33_reg_795;
wire   [13:0] zext_ln13_10_fu_500_p1;
reg   [13:0] zext_ln13_10_reg_800;
wire   [4:0] depth_fu_509_p2;
reg   [4:0] depth_reg_808;
wire    ap_CS_fsm_state3;
wire   [15:0] add_ln18_fu_530_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln15_fu_519_p2;
wire   [13:0] i_count_fu_536_p2;
reg   [13:0] i_count_reg_821;
wire   [15:0] add_ln21_1_fu_546_p2;
reg   [15:0] add_ln21_1_reg_826;
wire   [4:0] height_fu_556_p2;
reg   [4:0] height_reg_835;
wire    ap_CS_fsm_state5;
wire   [13:0] add_ln26_fu_562_p2;
reg   [13:0] add_ln26_reg_840;
wire   [0:0] icmp_ln21_fu_551_p2;
wire   [15:0] add_ln18_1_fu_567_p2;
reg   [15:0] add_ln18_1_reg_845;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_571_p2;
wire   [13:0] add_ln26_1_fu_582_p2;
reg   [13:0] add_ln26_1_reg_858;
wire   [13:0] add_ln18_2_fu_588_p2;
reg   [13:0] add_ln18_2_reg_863;
wire   [13:0] o_count_7_fu_598_p2;
wire    ap_CS_fsm_state7;
wire   [13:0] o_count_8_fu_615_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln30_fu_604_p2;
wire   [13:0] add_ln21_3_fu_621_p2;
wire   [13:0] add_ln21_4_fu_626_p2;
wire   [15:0] o_count_6_fu_646_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln37_fu_635_p2;
wire   [13:0] add_ln13_6_fu_652_p2;
wire   [13:0] add_ln13_7_fu_657_p2;
wire   [13:0] add_ln13_10_fu_662_p2;
wire   [4:0] add_ln13_15_fu_667_p2;
wire   [4:0] add_ln13_16_fu_672_p2;
reg   [4:0] indvars_iv2_reg_138;
reg   [4:0] indvars_iv_reg_148;
reg   [13:0] indvars_iv1_reg_158;
reg   [13:0] phi_ln13_reg_168;
reg   [13:0] indvars_iv10_reg_178;
reg   [15:0] o_count_0_reg_188;
reg   [13:0] i_count_0_reg_200;
reg   [4:0] depth_0_reg_212;
reg   [15:0] o_count_1_reg_223;
wire   [0:0] icmp_ln13_fu_504_p2;
reg   [13:0] phi_ln13_1_reg_233;
reg   [13:0] o_count_reg_244;
reg   [13:0] o_count_2_reg_255;
reg   [13:0] i_count_1_reg_266;
reg   [4:0] height_0_reg_277;
reg   [13:0] o_count_3_reg_288;
reg   [13:0] i_count_2_reg_299;
reg   [13:0] o_count_4_reg_309;
reg   [15:0] o_count_5_reg_319;
wire   [63:0] zext_ln17_fu_525_p1;
wire   [63:0] zext_ln25_fu_577_p1;
wire   [63:0] zext_ln25_1_fu_593_p1;
wire   [63:0] zext_ln32_fu_610_p1;
wire   [63:0] zext_ln39_fu_641_p1;
wire  signed [5:0] sext_ln5_1_fu_328_p0;
wire  signed [5:0] trunc_ln13_fu_332_p0;
wire   [4:0] mul_ln13_1_fu_350_p0;
wire   [6:0] mul_ln13_1_fu_350_p1;
wire  signed [5:0] empty_32_fu_370_p0;
wire  signed [5:0] sext_ln5_fu_374_p0;
wire  signed [6:0] sext_ln5_fu_374_p1;
wire   [6:0] mul_ln13_fu_387_p0;
wire   [6:0] mul_ln13_fu_387_p1;
wire   [4:0] empty_31_fu_408_p2;
wire   [9:0] p_cast6_fu_402_p1;
wire   [9:0] add_ln13_1_fu_421_p2;
wire   [9:0] p_cast3_fu_417_p1;
wire   [9:0] add_ln13_2_fu_426_p2;
wire   [5:0] p_cast7_fu_399_p1;
wire  signed [5:0] add_ln13_3_fu_436_p1;
wire   [5:0] add_ln13_3_fu_436_p2;
wire  signed [5:0] shl_ln13_fu_445_p0;
wire   [5:0] shl_ln13_fu_445_p2;
wire   [5:0] add_ln13_4_fu_454_p2;
wire   [4:0] add_ln13_5_fu_464_p2;
wire   [4:0] add_ln13_11_fu_468_p2;
wire   [9:0] zext_ln13_8_fu_450_p1;
wire   [9:0] add_ln13_8_fu_489_p2;
wire   [9:0] add_ln13_9_fu_494_p2;
wire   [4:0] trunc_ln15_fu_515_p1;
wire   [15:0] add_ln21_fu_541_p2;
wire   [4:0] trunc_ln37_fu_631_p1;
reg   [8:0] ap_NS_fsm;
wire   [11:0] mul_ln13_1_fu_350_p00;
wire   [11:0] mul_ln13_1_fu_350_p10;
wire   [13:0] mul_ln13_fu_387_p00;
wire   [13:0] mul_ln13_fu_387_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_0_reg_212 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
        depth_0_reg_212 <= depth_reg_808;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd1))) begin
        height_0_reg_277 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln30_fu_604_p2 == 1'd1))) begin
        height_0_reg_277 <= height_reg_835;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_0_reg_200 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
        i_count_0_reg_200 <= i_count_reg_821;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd1))) begin
        i_count_1_reg_266 <= i_count_0_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln30_fu_604_p2 == 1'd1))) begin
        i_count_1_reg_266 <= add_ln26_reg_840;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_count_2_reg_299 <= add_ln26_1_reg_858;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_551_p2 == 1'd0))) begin
        i_count_2_reg_299 <= i_count_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv10_reg_178 <= p_cast5_fu_405_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
        indvars_iv10_reg_178 <= add_ln13_6_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv1_reg_158 <= zext_ln13_9_fu_460_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
        indvars_iv1_reg_158 <= add_ln13_10_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv2_reg_138 <= empty_30_reg_711;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
        indvars_iv2_reg_138 <= add_ln13_16_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_148 <= add_ln13_12_fu_473_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
        indvars_iv_reg_148 <= add_ln13_15_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_count_0_reg_188 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
        o_count_0_reg_188 <= add_ln18_1_reg_845;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_504_p2 == 1'd0))) begin
        o_count_1_reg_223 <= o_count_0_reg_188;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd0))) begin
        o_count_1_reg_223 <= add_ln18_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd1))) begin
        o_count_2_reg_255 <= indvars_iv10_reg_178;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln30_fu_604_p2 == 1'd1))) begin
        o_count_2_reg_255 <= add_ln18_2_reg_863;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o_count_3_reg_288 <= o_count_7_fu_598_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_551_p2 == 1'd0))) begin
        o_count_3_reg_288 <= o_count_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln30_fu_604_p2 == 1'd0))) begin
        o_count_4_reg_309 <= o_count_8_fu_615_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_571_p2 == 1'd1))) begin
        o_count_4_reg_309 <= o_count_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd0))) begin
        o_count_5_reg_319 <= o_count_6_fu_646_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_551_p2 == 1'd1))) begin
        o_count_5_reg_319 <= add_ln21_1_reg_826;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd1))) begin
        o_count_reg_244 <= phi_ln13_reg_168;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln30_fu_604_p2 == 1'd1))) begin
        o_count_reg_244 <= add_ln21_3_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd1))) begin
        phi_ln13_1_reg_233 <= indvars_iv1_reg_158;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln30_fu_604_p2 == 1'd1))) begin
        phi_ln13_1_reg_233 <= add_ln21_4_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln13_reg_168 <= zext_ln13_7_fu_441_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
        phi_ln13_reg_168 <= add_ln13_7_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln13_13_reg_789 <= add_ln13_13_fu_479_p2;
        empty_33_reg_795 <= empty_33_fu_485_p1;
        mul_ln13_reg_743 <= mul_ln13_fu_387_p2;
        p_cast4_reg_763[4 : 0] <= p_cast4_fu_413_p1[4 : 0];
        p_cast8_reg_753[4 : 0] <= p_cast8_fu_396_p1[4 : 0];
        zext_ln13_10_reg_800[9 : 0] <= zext_ln13_10_fu_500_p1[9 : 0];
        zext_ln13_2_reg_738[6 : 0] <= zext_ln13_2_fu_380_p1[6 : 0];
        zext_ln13_5_reg_748[11 : 0] <= zext_ln13_5_fu_393_p1[11 : 0];
        zext_ln13_6_reg_768[9 : 0] <= zext_ln13_6_fu_432_p1[9 : 0];
        zext_ln13_reg_731[4 : 0] <= zext_ln13_fu_377_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln13_reg_695 <= add_ln13_fu_336_p2;
        empty_30_reg_711 <= empty_30_fu_360_p2;
        empty_32_reg_726 <= empty_32_fu_370_p1;
        empty_reg_705 <= empty_fu_356_p1;
        mul_ln13_1_reg_700 <= mul_ln13_1_fu_350_p2;
        sext_ln5_1_reg_684 <= sext_ln5_1_fu_328_p1;
        trunc_ln13_1_reg_721 <= trunc_ln13_1_fu_366_p1;
        trunc_ln13_reg_689 <= trunc_ln13_fu_332_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_551_p2 == 1'd1))) begin
        add_ln18_1_reg_845 <= add_ln18_1_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_571_p2 == 1'd1))) begin
        add_ln18_2_reg_863 <= add_ln18_2_fu_588_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd1))) begin
        add_ln21_1_reg_826 <= add_ln21_1_fu_546_p2;
        i_count_reg_821 <= i_count_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_571_p2 == 1'd0))) begin
        add_ln26_1_reg_858 <= add_ln26_1_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_551_p2 == 1'd0))) begin
        add_ln26_reg_840 <= add_ln26_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_reg_808 <= depth_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        height_reg_835 <= height_fu_556_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_504_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_504_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = zext_ln39_fu_641_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = zext_ln32_fu_610_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = zext_ln25_1_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = zext_ln17_fu_525_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln30_fu_604_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_504_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_519_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_551_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_571_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln30_fu_604_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln37_fu_635_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_10_fu_662_p2 = (indvars_iv1_reg_158 + zext_ln13_10_reg_800);

assign add_ln13_11_fu_468_p2 = (trunc_ln13_reg_689 + add_ln13_5_fu_464_p2);

assign add_ln13_12_fu_473_p2 = (5'd1 + add_ln13_11_fu_468_p2);

assign add_ln13_13_fu_479_p2 = (add_ln13_5_fu_464_p2 + empty_31_fu_408_p2);

assign add_ln13_15_fu_667_p2 = (add_ln13_13_reg_789 + indvars_iv_reg_148);

assign add_ln13_16_fu_672_p2 = (add_ln13_13_reg_789 + indvars_iv2_reg_138);

assign add_ln13_1_fu_421_p2 = (p_cast6_fu_402_p1 + empty_reg_705);

assign add_ln13_2_fu_426_p2 = (add_ln13_1_fu_421_p2 + p_cast3_fu_417_p1);

assign add_ln13_3_fu_436_p1 = input_width;

assign add_ln13_3_fu_436_p2 = ($signed(p_cast7_fu_399_p1) + $signed(add_ln13_3_fu_436_p1));

assign add_ln13_4_fu_454_p2 = (6'd5 + shl_ln13_fu_445_p2);

assign add_ln13_5_fu_464_p2 = (trunc_ln13_1_reg_721 + empty_30_reg_711);

assign add_ln13_6_fu_652_p2 = (zext_ln13_6_reg_768 + indvars_iv10_reg_178);

assign add_ln13_7_fu_657_p2 = (zext_ln13_6_reg_768 + phi_ln13_reg_168);

assign add_ln13_8_fu_489_p2 = (10'd4 + empty_reg_705);

assign add_ln13_9_fu_494_p2 = (zext_ln13_8_fu_450_p1 + add_ln13_8_fu_489_p2);

assign add_ln13_fu_336_p2 = (5'd2 + trunc_ln13_fu_332_p1);

assign add_ln18_1_fu_567_p2 = (add_ln21_1_reg_826 + p_cast4_reg_763);

assign add_ln18_2_fu_588_p2 = (zext_ln13_reg_731 + o_count_2_reg_255);

assign add_ln18_fu_530_p2 = (o_count_1_reg_223 + 16'd1);

assign add_ln21_1_fu_546_p2 = (add_ln21_fu_541_p2 + zext_ln13_5_reg_748);

assign add_ln21_3_fu_621_p2 = (zext_ln13_reg_731 + o_count_reg_244);

assign add_ln21_4_fu_626_p2 = (zext_ln13_reg_731 + phi_ln13_1_reg_233);

assign add_ln21_fu_541_p2 = (p_cast8_reg_753 + o_count_0_reg_188);

assign add_ln26_1_fu_582_p2 = (i_count_2_reg_299 + 14'd1);

assign add_ln26_fu_562_p2 = (zext_ln13_2_reg_738 + i_count_1_reg_266);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_fu_509_p2 = (depth_0_reg_212 + 5'd1);

assign empty_30_fu_360_p2 = (5'd3 + trunc_ln13_fu_332_p1);

assign empty_31_fu_408_p2 = (5'd1 + trunc_ln13_reg_689);

assign empty_32_fu_370_p0 = input_height;

assign empty_32_fu_370_p1 = empty_32_fu_370_p0[4:0];

assign empty_33_fu_485_p1 = input_depth[4:0];

assign empty_fu_356_p1 = mul_ln13_1_fu_350_p2[9:0];

assign height_fu_556_p2 = (height_0_reg_277 + 5'd1);

assign i_count_fu_536_p2 = (mul_ln13_reg_743 + i_count_0_reg_200);

assign icmp_ln13_fu_504_p2 = ((depth_0_reg_212 == empty_33_reg_795) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_519_p2 = ((trunc_ln15_fu_515_p1 == indvars_iv2_reg_138) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_551_p2 = ((height_0_reg_277 == empty_32_reg_726) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_571_p2 = ((o_count_3_reg_288 == o_count_reg_244) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_604_p2 = ((o_count_4_reg_309 == phi_ln13_1_reg_233) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_635_p2 = ((trunc_ln37_fu_631_p1 == indvars_iv_reg_148) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln25_fu_577_p1;

assign mul_ln13_1_fu_350_p0 = mul_ln13_1_fu_350_p00;

assign mul_ln13_1_fu_350_p00 = add_ln13_fu_336_p2;

assign mul_ln13_1_fu_350_p1 = mul_ln13_1_fu_350_p10;

assign mul_ln13_1_fu_350_p10 = $unsigned(sext_ln5_1_fu_328_p1);

assign mul_ln13_1_fu_350_p2 = (mul_ln13_1_fu_350_p0 * mul_ln13_1_fu_350_p1);

assign mul_ln13_fu_387_p0 = mul_ln13_fu_387_p00;

assign mul_ln13_fu_387_p00 = $unsigned(sext_ln5_fu_374_p1);

assign mul_ln13_fu_387_p1 = mul_ln13_fu_387_p10;

assign mul_ln13_fu_387_p10 = $unsigned(sext_ln5_1_reg_684);

assign mul_ln13_fu_387_p2 = (mul_ln13_fu_387_p0 * mul_ln13_fu_387_p1);

assign o_count_6_fu_646_p2 = (o_count_5_reg_319 + 16'd1);

assign o_count_7_fu_598_p2 = (o_count_3_reg_288 + 14'd1);

assign o_count_8_fu_615_p2 = (o_count_4_reg_309 + 14'd1);

assign p_cast3_fu_417_p1 = empty_31_fu_408_p2;

assign p_cast4_fu_413_p1 = empty_31_fu_408_p2;

assign p_cast5_fu_405_p1 = empty_30_reg_711;

assign p_cast6_fu_402_p1 = empty_30_reg_711;

assign p_cast7_fu_399_p1 = empty_30_reg_711;

assign p_cast8_fu_396_p1 = empty_30_reg_711;

assign sext_ln5_1_fu_328_p0 = input_height;

assign sext_ln5_1_fu_328_p1 = sext_ln5_1_fu_328_p0;

assign sext_ln5_fu_374_p0 = input_width;

assign sext_ln5_fu_374_p1 = sext_ln5_fu_374_p0;

assign shl_ln13_fu_445_p0 = input_width;

assign shl_ln13_fu_445_p2 = shl_ln13_fu_445_p0 << 6'd1;

assign trunc_ln13_1_fu_366_p1 = mul_ln13_1_fu_350_p2[4:0];

assign trunc_ln13_fu_332_p0 = input_width;

assign trunc_ln13_fu_332_p1 = trunc_ln13_fu_332_p0[4:0];

assign trunc_ln15_fu_515_p1 = o_count_1_reg_223[4:0];

assign trunc_ln37_fu_631_p1 = o_count_5_reg_319[4:0];

assign zext_ln13_10_fu_500_p1 = add_ln13_9_fu_494_p2;

assign zext_ln13_2_fu_380_p1 = $unsigned(sext_ln5_fu_374_p1);

assign zext_ln13_5_fu_393_p1 = mul_ln13_1_reg_700;

assign zext_ln13_6_fu_432_p1 = add_ln13_2_fu_426_p2;

assign zext_ln13_7_fu_441_p1 = add_ln13_3_fu_436_p2;

assign zext_ln13_8_fu_450_p1 = shl_ln13_fu_445_p2;

assign zext_ln13_9_fu_460_p1 = add_ln13_4_fu_454_p2;

assign zext_ln13_fu_377_p1 = add_ln13_reg_695;

assign zext_ln17_fu_525_p1 = o_count_1_reg_223;

assign zext_ln25_1_fu_593_p1 = o_count_3_reg_288;

assign zext_ln25_fu_577_p1 = i_count_2_reg_299;

assign zext_ln32_fu_610_p1 = o_count_4_reg_309;

assign zext_ln39_fu_641_p1 = o_count_5_reg_319;

always @ (posedge ap_clk) begin
    zext_ln13_reg_731[13:5] <= 9'b000000000;
    zext_ln13_2_reg_738[13:7] <= 7'b0000000;
    zext_ln13_5_reg_748[15:12] <= 4'b0000;
    p_cast8_reg_753[15:5] <= 11'b00000000000;
    p_cast4_reg_763[15:5] <= 11'b00000000000;
    zext_ln13_6_reg_768[13:10] <= 4'b0000;
    zext_ln13_10_reg_800[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
