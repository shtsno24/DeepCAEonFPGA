// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] SeparableConv2D_2_b_s_address0;
reg    SeparableConv2D_2_b_s_ce0;
wire   [12:0] SeparableConv2D_2_b_s_q0;
wire   [5:0] SeparableConv2D_2_w_s_address0;
reg    SeparableConv2D_2_w_s_ce0;
wire   [14:0] SeparableConv2D_2_w_s_q0;
wire   [9:0] zext_ln16_fu_174_p1;
reg   [9:0] zext_ln16_reg_403;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln16_fu_178_p2;
reg   [8:0] add_ln16_reg_408;
wire   [3:0] out_d_fu_190_p2;
reg   [3:0] out_d_reg_416;
wire   [0:0] icmp_ln16_fu_184_p2;
wire   [2:0] trunc_ln23_fu_201_p1;
reg   [2:0] trunc_ln23_reg_426;
wire   [5:0] shl_ln_fu_205_p3;
reg   [5:0] shl_ln_reg_431;
wire    ap_CS_fsm_state3;
wire  signed [15:0] sext_ln19_fu_212_p1;
reg  signed [15:0] sext_ln19_reg_436;
wire   [2:0] out_h_fu_222_p2;
reg   [2:0] out_h_reg_444;
wire    ap_CS_fsm_state4;
wire  signed [6:0] sub_ln23_fu_244_p2;
reg  signed [6:0] sub_ln23_reg_449;
wire   [0:0] icmp_ln17_fu_216_p2;
wire  signed [9:0] sext_ln23_fu_250_p1;
reg  signed [9:0] sext_ln23_reg_454;
wire   [2:0] out_w_fu_260_p2;
reg   [2:0] out_w_reg_462;
wire    ap_CS_fsm_state5;
wire   [6:0] zext_ln20_fu_266_p1;
reg   [6:0] zext_ln20_reg_467;
wire   [0:0] icmp_ln18_fu_254_p2;
wire   [8:0] zext_ln20_2_fu_270_p1;
reg   [8:0] zext_ln20_2_reg_472;
wire   [3:0] in_d_fu_280_p2;
reg   [3:0] in_d_reg_480;
wire    ap_CS_fsm_state6;
wire   [8:0] add_ln23_6_fu_290_p2;
reg   [8:0] add_ln23_6_reg_485;
wire   [0:0] icmp_ln20_fu_274_p2;
reg  signed [15:0] input_load_reg_500;
wire    ap_CS_fsm_state7;
reg  signed [14:0] SeparableConv2D_2_w_3_reg_505;
reg   [15:0] trunc_ln3_reg_510;
wire    ap_CS_fsm_state8;
wire   [15:0] buffer_2_fu_391_p2;
wire    ap_CS_fsm_state9;
reg   [3:0] out_d_0_reg_98;
reg   [8:0] phi_mul1_reg_109;
reg   [2:0] out_h_0_reg_120;
reg   [2:0] out_w_0_reg_131;
reg   [15:0] buffer_0_reg_142;
reg   [3:0] in_d_0_reg_152;
reg   [8:0] phi_mul_reg_163;
wire   [63:0] zext_ln19_fu_196_p1;
wire   [63:0] zext_ln23_8_fu_314_p1;
wire   [63:0] zext_ln23_9_fu_324_p1;
wire   [63:0] zext_ln30_fu_371_p1;
wire   [5:0] shl_ln23_4_fu_232_p3;
wire   [6:0] zext_ln23_10_fu_240_p1;
wire   [6:0] zext_ln23_fu_228_p1;
wire   [8:0] add_ln23_fu_296_p2;
wire   [9:0] zext_ln23_12_fu_301_p1;
wire   [9:0] add_ln23_1_fu_305_p2;
wire  signed [31:0] sext_ln23_6_fu_310_p1;
wire   [5:0] zext_ln23_11_fu_286_p1;
wire   [5:0] add_ln23_2_fu_319_p2;
wire   [0:0] tmp_fu_333_p3;
wire   [14:0] trunc_ln20_fu_329_p1;
wire   [14:0] select_ln27_fu_341_p3;
wire   [6:0] add_ln30_fu_354_p2;
wire  signed [9:0] sext_ln30_fu_358_p1;
wire   [9:0] add_ln30_1_fu_362_p2;
wire  signed [31:0] sext_ln30_2_fu_367_p1;
wire  signed [29:0] mul_ln23_fu_396_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

pointwise_conv2d_fix_2_SeparableConv2D_2_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_2_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_2_b_s_address0),
    .ce0(SeparableConv2D_2_b_s_ce0),
    .q0(SeparableConv2D_2_b_s_q0)
);

pointwise_conv2d_fix_2_SeparableConv2D_2_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
SeparableConv2D_2_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_2_w_s_address0),
    .ce0(SeparableConv2D_2_w_s_ce0),
    .q0(SeparableConv2D_2_w_s_q0)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U48(
    .din0(input_load_reg_500),
    .din1(SeparableConv2D_2_w_3_reg_505),
    .dout(mul_ln23_fu_396_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_0_reg_142 <= buffer_2_fu_391_p2;
    end else if (((icmp_ln18_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buffer_0_reg_142 <= sext_ln19_reg_436;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        in_d_0_reg_152 <= in_d_reg_480;
    end else if (((icmp_ln18_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_d_0_reg_152 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_0_reg_98 <= out_d_reg_416;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_98 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_254_p2 == 1'd1))) begin
        out_h_0_reg_120 <= out_h_reg_444;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_120 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_0_reg_131 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_274_p2 == 1'd1))) begin
        out_w_0_reg_131 <= out_w_reg_462;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_109 <= add_ln16_reg_408;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_109 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul_reg_163 <= add_ln23_6_reg_485;
    end else if (((icmp_ln18_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_163 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        SeparableConv2D_2_w_3_reg_505 <= SeparableConv2D_2_w_s_q0;
        input_load_reg_500 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln16_reg_408 <= add_ln16_fu_178_p2;
        out_d_reg_416 <= out_d_fu_190_p2;
        zext_ln16_reg_403[8 : 0] <= zext_ln16_fu_174_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_274_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln23_6_reg_485 <= add_ln23_6_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_d_reg_480 <= in_d_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_reg_444 <= out_h_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_462 <= out_w_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln19_reg_436 <= sext_ln19_fu_212_p1;
        shl_ln_reg_431[5 : 3] <= shl_ln_fu_205_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sext_ln23_reg_454 <= sext_ln23_fu_250_p1;
        sub_ln23_reg_449 <= sub_ln23_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln23_reg_426 <= trunc_ln23_fu_201_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln3_reg_510 <= {{mul_ln23_fu_396_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_254_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln20_2_reg_472[2 : 0] <= zext_ln20_2_fu_270_p1[2 : 0];
        zext_ln20_reg_467[2 : 0] <= zext_ln20_fu_266_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_2_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_2_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_2_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_2_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln16_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_274_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_184_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln17_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_254_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_274_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_2_b_s_address0 = zext_ln19_fu_196_p1;

assign SeparableConv2D_2_w_s_address0 = zext_ln23_9_fu_324_p1;

assign add_ln16_fu_178_p2 = (phi_mul1_reg_109 + 9'd49);

assign add_ln23_1_fu_305_p2 = ($signed(zext_ln23_12_fu_301_p1) + $signed(sext_ln23_reg_454));

assign add_ln23_2_fu_319_p2 = (shl_ln_reg_431 + zext_ln23_11_fu_286_p1);

assign add_ln23_6_fu_290_p2 = (phi_mul_reg_163 + 9'd49);

assign add_ln23_fu_296_p2 = (phi_mul_reg_163 + zext_ln20_2_reg_472);

assign add_ln30_1_fu_362_p2 = ($signed(sext_ln30_fu_358_p1) + $signed(zext_ln16_reg_403));

assign add_ln30_fu_354_p2 = ($signed(sub_ln23_reg_449) + $signed(zext_ln20_reg_467));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_2_fu_391_p2 = (trunc_ln3_reg_510 + buffer_0_reg_142);

assign icmp_ln16_fu_184_p2 = ((out_d_0_reg_98 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_216_p2 = ((out_h_0_reg_120 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_254_p2 = ((out_w_0_reg_131 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_274_p2 = ((in_d_0_reg_152 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_280_p2 = (in_d_0_reg_152 + 4'd1);

assign input_r_address0 = zext_ln23_8_fu_314_p1;

assign out_d_fu_190_p2 = (out_d_0_reg_98 + 4'd1);

assign out_h_fu_222_p2 = (out_h_0_reg_120 + 3'd1);

assign out_w_fu_260_p2 = (out_w_0_reg_131 + 3'd1);

assign output_r_address0 = zext_ln30_fu_371_p1;

assign output_r_d0 = select_ln27_fu_341_p3;

assign select_ln27_fu_341_p3 = ((tmp_fu_333_p3[0:0] === 1'b1) ? 15'd0 : trunc_ln20_fu_329_p1);

assign sext_ln19_fu_212_p1 = $signed(SeparableConv2D_2_b_s_q0);

assign sext_ln23_6_fu_310_p1 = $signed(add_ln23_1_fu_305_p2);

assign sext_ln23_fu_250_p1 = sub_ln23_fu_244_p2;

assign sext_ln30_2_fu_367_p1 = $signed(add_ln30_1_fu_362_p2);

assign sext_ln30_fu_358_p1 = $signed(add_ln30_fu_354_p2);

assign shl_ln23_4_fu_232_p3 = {{out_h_0_reg_120}, {3'd0}};

assign shl_ln_fu_205_p3 = {{trunc_ln23_reg_426}, {3'd0}};

assign sub_ln23_fu_244_p2 = (zext_ln23_10_fu_240_p1 - zext_ln23_fu_228_p1);

assign tmp_fu_333_p3 = buffer_0_reg_142[32'd15];

assign trunc_ln20_fu_329_p1 = buffer_0_reg_142[14:0];

assign trunc_ln23_fu_201_p1 = out_d_0_reg_98[2:0];

assign zext_ln16_fu_174_p1 = phi_mul1_reg_109;

assign zext_ln19_fu_196_p1 = out_d_0_reg_98;

assign zext_ln20_2_fu_270_p1 = out_w_0_reg_131;

assign zext_ln20_fu_266_p1 = out_w_0_reg_131;

assign zext_ln23_10_fu_240_p1 = shl_ln23_4_fu_232_p3;

assign zext_ln23_11_fu_286_p1 = in_d_0_reg_152;

assign zext_ln23_12_fu_301_p1 = add_ln23_fu_296_p2;

assign zext_ln23_8_fu_314_p1 = $unsigned(sext_ln23_6_fu_310_p1);

assign zext_ln23_9_fu_324_p1 = add_ln23_2_fu_319_p2;

assign zext_ln23_fu_228_p1 = out_h_0_reg_120;

assign zext_ln30_fu_371_p1 = $unsigned(sext_ln30_2_fu_367_p1);

always @ (posedge ap_clk) begin
    zext_ln16_reg_403[9] <= 1'b0;
    shl_ln_reg_431[2:0] <= 3'b000;
    zext_ln20_reg_467[6:3] <= 4'b0000;
    zext_ln20_2_reg_472[8:3] <= 6'b000000;
end

endmodule //pointwise_conv2d_fix_2
