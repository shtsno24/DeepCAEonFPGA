// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp1_stage0 = 7'd32;
parameter    ap_ST_fsm_state11 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] SeparableConv2D_2_b_s_address0;
reg    SeparableConv2D_2_b_s_ce0;
wire   [12:0] SeparableConv2D_2_b_s_q0;
reg   [8:0] indvar_flatten18_reg_365;
reg   [2:0] out_h_0_reg_376;
reg   [6:0] indvar_flatten_reg_387;
reg   [2:0] out_w_0_reg_398;
reg   [21:0] buffer_0_reg_409;
reg   [3:0] in_d_0_reg_419;
wire   [9:0] zext_ln22_fu_430_p1;
reg   [9:0] zext_ln22_reg_1198;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln22_fu_434_p2;
reg   [8:0] add_ln22_reg_1203;
wire   [0:0] icmp_ln22_fu_440_p2;
wire   [3:0] out_d_fu_446_p2;
reg   [3:0] out_d_reg_1212;
wire   [5:0] shl_ln_fu_456_p3;
reg   [5:0] shl_ln_reg_1217;
wire   [3:0] i_fu_470_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire  signed [21:0] sext_ln28_fu_703_p1;
reg  signed [21:0] sext_ln28_reg_1235;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln30_fu_739_p2;
reg   [0:0] icmp_ln30_reg_1242;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_state8_pp1_stage0_iter2;
wire    ap_block_state9_pp1_stage0_iter3;
wire    ap_block_state10_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln30_reg_1242_pp1_iter1_reg;
reg   [0:0] icmp_ln30_reg_1242_pp1_iter2_reg;
reg   [0:0] icmp_ln30_reg_1242_pp1_iter3_reg;
wire   [8:0] add_ln30_fu_745_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln31_fu_757_p2;
reg   [0:0] icmp_ln31_reg_1251;
reg   [0:0] icmp_ln31_reg_1251_pp1_iter1_reg;
reg   [0:0] icmp_ln31_reg_1251_pp1_iter2_reg;
reg   [0:0] icmp_ln31_reg_1251_pp1_iter3_reg;
wire   [6:0] select_ln37_7_fu_793_p3;
reg   [6:0] select_ln37_7_reg_1256;
wire   [0:0] and_ln37_fu_821_p2;
reg   [0:0] and_ln37_reg_1261;
reg   [0:0] and_ln37_reg_1261_pp1_iter1_reg;
reg   [0:0] and_ln37_reg_1261_pp1_iter2_reg;
reg   [0:0] and_ln37_reg_1261_pp1_iter3_reg;
wire   [2:0] select_ln30_fu_827_p3;
wire   [3:0] select_ln32_7_fu_847_p3;
reg   [3:0] select_ln32_7_reg_1271;
reg   [3:0] select_ln32_7_reg_1271_pp1_iter1_reg;
wire   [2:0] select_ln32_8_fu_859_p3;
reg   [2:0] select_ln32_8_reg_1277;
wire   [6:0] select_ln32_9_fu_873_p3;
reg  signed [6:0] select_ln32_9_reg_1283;
wire   [3:0] in_d_fu_881_p2;
reg   [3:0] in_d_reg_1288;
wire   [6:0] select_ln31_fu_893_p3;
wire   [0:0] icmp_ln34_3_fu_918_p2;
reg   [0:0] icmp_ln34_3_reg_1304;
reg   [0:0] icmp_ln34_3_reg_1304_pp1_iter2_reg;
reg   [0:0] icmp_ln34_3_reg_1304_pp1_iter3_reg;
wire   [9:0] add_ln44_1_fu_932_p2;
reg   [9:0] add_ln44_1_reg_1308;
reg   [9:0] add_ln44_1_reg_1308_pp1_iter2_reg;
reg   [9:0] add_ln44_1_reg_1308_pp1_iter3_reg;
reg   [15:0] input_load_reg_1313;
wire  signed [31:0] tmp_5_fu_982_p18;
reg  signed [31:0] tmp_5_reg_1318;
wire   [31:0] mul_ln37_fu_1022_p2;
reg   [31:0] mul_ln37_reg_1323;
wire   [21:0] buffer_fu_1052_p2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [3:0] out_d_0_reg_331;
wire    ap_CS_fsm_state11;
reg   [8:0] phi_mul_reg_343;
wire   [3:0] ap_phi_mux_i_0_phi_fu_358_p4;
reg   [3:0] i_0_reg_354;
wire   [0:0] icmp_ln24_fu_464_p2;
reg   [2:0] ap_phi_mux_out_w_0_phi_fu_402_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_in_d_0_phi_fu_423_p4;
wire   [63:0] zext_ln28_fu_698_p1;
wire   [63:0] zext_ln37_5_fu_913_p1;
wire   [63:0] zext_ln44_fu_1094_p1;
reg   [31:0] kernel_buffer_15_fu_232;
wire  signed [31:0] kernel_buffer_0_fu_619_p1;
reg   [31:0] kernel_buffer_15_31_fu_236;
reg   [31:0] kernel_buffer_15_32_fu_240;
reg   [31:0] kernel_buffer_15_33_fu_244;
reg   [31:0] kernel_buffer_15_34_fu_248;
reg   [31:0] kernel_buffer_15_35_fu_252;
reg   [31:0] kernel_buffer_15_36_fu_256;
reg   [31:0] kernel_buffer_15_37_fu_260;
reg   [31:0] kernel_buffer_15_38_fu_264;
reg   [31:0] kernel_buffer_15_39_fu_268;
reg   [31:0] kernel_buffer_15_40_fu_272;
reg   [31:0] kernel_buffer_15_41_fu_276;
reg   [31:0] kernel_buffer_15_42_fu_280;
reg   [31:0] kernel_buffer_15_43_fu_284;
reg   [31:0] kernel_buffer_15_016_fu_288;
wire   [2:0] trunc_ln26_fu_452_p1;
wire   [5:0] zext_ln26_fu_476_p1;
wire   [5:0] merge_i_fu_485_p65;
wire   [15:0] merge_i_fu_485_p66;
wire   [5:0] shl_ln2_fu_711_p3;
wire   [6:0] zext_ln37_11_fu_719_p1;
wire   [6:0] zext_ln37_fu_707_p1;
wire   [6:0] sub_ln37_fu_723_p2;
wire   [6:0] zext_ln34_fu_729_p1;
wire   [2:0] out_h_fu_751_p2;
wire   [5:0] shl_ln37_mid1_fu_775_p3;
wire   [6:0] zext_ln37_14_fu_783_p1;
wire   [6:0] zext_ln37_13_fu_771_p1;
wire   [6:0] sub_ln37_3_fu_787_p2;
wire   [6:0] add_ln37_fu_733_p2;
wire   [0:0] icmp_ln34_fu_815_p2;
wire   [0:0] xor_ln37_fu_809_p2;
wire   [2:0] select_ln37_fu_763_p3;
wire   [0:0] or_ln32_fu_841_p2;
wire   [2:0] out_w_fu_835_p2;
wire   [6:0] zext_ln34_3_fu_855_p1;
wire   [6:0] add_ln37_6_fu_867_p2;
wire   [6:0] select_ln37_8_fu_801_p3;
wire   [6:0] add_ln31_fu_887_p2;
wire  signed [9:0] grp_fu_1099_p3;
wire  signed [31:0] sext_ln37_fu_910_p1;
wire   [6:0] zext_ln32_fu_901_p1;
wire   [6:0] add_ln44_fu_923_p2;
wire  signed [9:0] sext_ln44_fu_928_p1;
wire  signed [15:0] mul_ln37_fu_1022_p1;
wire   [21:0] select_ln37_6_fu_1027_p3;
wire   [17:0] trunc_ln_fu_1039_p4;
wire  signed [21:0] sext_ln37_4_fu_1048_p1;
wire   [21:0] select_ln32_fu_1033_p3;
wire   [0:0] tmp_3_fu_1058_p3;
wire   [0:0] xor_ln43_fu_1070_p2;
wire   [15:0] select_ln43_fu_1076_p3;
wire   [15:0] trunc_ln43_fu_1066_p1;
wire  signed [31:0] sext_ln44_2_fu_1091_p1;
wire   [3:0] grp_fu_1099_p0;
wire   [6:0] grp_fu_1099_p1;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [9:0] grp_fu_1099_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

pointwise_conv2d_fix_2_SeparableConv2D_2_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_2_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_2_b_s_address0),
    .ce0(SeparableConv2D_2_b_s_ce0),
    .q0(SeparableConv2D_2_b_s_q0)
);

network_mux_646_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 16 ))
network_mux_646_16_1_1_U81(
    .din0(16'd10898),
    .din1(16'd6361),
    .din2(16'd62016),
    .din3(16'd3573),
    .din4(16'd57771),
    .din5(16'd65383),
    .din6(16'd10043),
    .din7(16'd6976),
    .din8(16'd573),
    .din9(16'd58348),
    .din10(16'd6348),
    .din11(16'd56160),
    .din12(16'd56346),
    .din13(16'd60123),
    .din14(16'd64660),
    .din15(16'd65496),
    .din16(16'd57212),
    .din17(16'd2097),
    .din18(16'd56049),
    .din19(16'd58901),
    .din20(16'd607),
    .din21(16'd57455),
    .din22(16'd7867),
    .din23(16'd60070),
    .din24(16'd11547),
    .din25(16'd8413),
    .din26(16'd63801),
    .din27(16'd8485),
    .din28(16'd2665),
    .din29(16'd3423),
    .din30(16'd64622),
    .din31(16'd4560),
    .din32(16'd59488),
    .din33(16'd7028),
    .din34(16'd59718),
    .din35(16'd9405),
    .din36(16'd6586),
    .din37(16'd4944),
    .din38(16'd7540),
    .din39(16'd8629),
    .din40(16'd6564),
    .din41(16'd54916),
    .din42(16'd63753),
    .din43(16'd5899),
    .din44(16'd57260),
    .din45(16'd12149),
    .din46(16'd2883),
    .din47(16'd60808),
    .din48(16'd9628),
    .din49(16'd8093),
    .din50(16'd733),
    .din51(16'd9047),
    .din52(16'd61262),
    .din53(16'd64311),
    .din54(16'd58905),
    .din55(16'd61810),
    .din56(16'd1720),
    .din57(16'd2151),
    .din58(16'd63606),
    .din59(16'd5081),
    .din60(16'd65127),
    .din61(16'd59644),
    .din62(16'd61499),
    .din63(16'd1956),
    .din64(merge_i_fu_485_p65),
    .dout(merge_i_fu_485_p66)
);

network_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
network_mux_164_32_1_1_U82(
    .din0(kernel_buffer_15_fu_232),
    .din1(kernel_buffer_15_31_fu_236),
    .din2(kernel_buffer_15_32_fu_240),
    .din3(kernel_buffer_15_33_fu_244),
    .din4(kernel_buffer_15_34_fu_248),
    .din5(kernel_buffer_15_35_fu_252),
    .din6(kernel_buffer_15_36_fu_256),
    .din7(kernel_buffer_15_37_fu_260),
    .din8(32'd0),
    .din9(kernel_buffer_15_38_fu_264),
    .din10(kernel_buffer_15_39_fu_268),
    .din11(kernel_buffer_15_40_fu_272),
    .din12(kernel_buffer_15_41_fu_276),
    .din13(kernel_buffer_15_42_fu_280),
    .din14(kernel_buffer_15_43_fu_284),
    .din15(kernel_buffer_15_016_fu_288),
    .din16(select_ln32_7_reg_1271_pp1_iter1_reg),
    .dout(tmp_5_fu_982_p18)
);

network_mac_muladd_4ns_7ns_7s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 10 ))
network_mac_muladd_4ns_7ns_7s_10_1_1_U83(
    .din0(grp_fu_1099_p0),
    .din1(grp_fu_1099_p1),
    .din2(select_ln32_9_reg_1283),
    .dout(grp_fu_1099_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state6)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1242_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        buffer_0_reg_409 <= buffer_fu_1052_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_0_reg_409 <= sext_ln28_fu_703_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_354 <= i_fu_470_p2;
    end else if (((icmp_ln22_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_354 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1242 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        in_d_0_reg_419 <= in_d_reg_1288;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        in_d_0_reg_419 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_739_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten18_reg_365 <= add_ln30_fu_745_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten18_reg_365 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_739_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        indvar_flatten_reg_387 <= select_ln31_fu_893_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten_reg_387 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        out_d_0_reg_331 <= out_d_reg_1212;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_331 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_739_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_h_0_reg_376 <= select_ln30_fu_827_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_h_0_reg_376 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1242 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_w_0_reg_398 <= select_ln32_8_reg_1277;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_0_reg_398 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul_reg_343 <= add_ln22_reg_1203;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_343 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln22_reg_1203 <= add_ln22_fu_434_p2;
        out_d_reg_1212 <= out_d_fu_446_p2;
        zext_ln22_reg_1198[8 : 0] <= zext_ln22_fu_430_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln34_3_fu_918_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln44_1_reg_1308 <= add_ln44_1_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln44_1_reg_1308_pp1_iter2_reg <= add_ln44_1_reg_1308;
        add_ln44_1_reg_1308_pp1_iter3_reg <= add_ln44_1_reg_1308_pp1_iter2_reg;
        and_ln37_reg_1261_pp1_iter2_reg <= and_ln37_reg_1261_pp1_iter1_reg;
        and_ln37_reg_1261_pp1_iter3_reg <= and_ln37_reg_1261_pp1_iter2_reg;
        icmp_ln30_reg_1242_pp1_iter2_reg <= icmp_ln30_reg_1242_pp1_iter1_reg;
        icmp_ln30_reg_1242_pp1_iter3_reg <= icmp_ln30_reg_1242_pp1_iter2_reg;
        icmp_ln31_reg_1251_pp1_iter2_reg <= icmp_ln31_reg_1251_pp1_iter1_reg;
        icmp_ln31_reg_1251_pp1_iter3_reg <= icmp_ln31_reg_1251_pp1_iter2_reg;
        icmp_ln34_3_reg_1304_pp1_iter2_reg <= icmp_ln34_3_reg_1304;
        icmp_ln34_3_reg_1304_pp1_iter3_reg <= icmp_ln34_3_reg_1304_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_739_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        and_ln37_reg_1261 <= and_ln37_fu_821_p2;
        icmp_ln31_reg_1251 <= icmp_ln31_fu_757_p2;
        select_ln32_7_reg_1271 <= select_ln32_7_fu_847_p3;
        select_ln32_9_reg_1283 <= select_ln32_9_fu_873_p3;
        select_ln37_7_reg_1256 <= select_ln37_7_fu_793_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        and_ln37_reg_1261_pp1_iter1_reg <= and_ln37_reg_1261;
        icmp_ln30_reg_1242 <= icmp_ln30_fu_739_p2;
        icmp_ln30_reg_1242_pp1_iter1_reg <= icmp_ln30_reg_1242;
        icmp_ln31_reg_1251_pp1_iter1_reg <= icmp_ln31_reg_1251;
        select_ln32_7_reg_1271_pp1_iter1_reg <= select_ln32_7_reg_1271;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1242 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln34_3_reg_1304 <= icmp_ln34_3_fu_918_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_fu_739_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        in_d_reg_1288 <= in_d_fu_881_p2;
        select_ln32_8_reg_1277 <= select_ln32_8_fu_859_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1242_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_load_reg_1313 <= input_r_q0;
        tmp_5_reg_1318 <= tmp_5_fu_982_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd8)) | ((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd15))))) begin
        kernel_buffer_15_016_fu_288 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_31_fu_236 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_32_fu_240 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_33_fu_244 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd4) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_34_fu_248 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd5) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_35_fu_252 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd6) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_36_fu_256 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd7) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_37_fu_260 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd9) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_38_fu_264 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd10) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_39_fu_268 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd11) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_40_fu_272 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd12) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_41_fu_276 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd13) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_42_fu_280 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd14) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_43_fu_284 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_464_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_358_p4 == 4'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_fu_232 <= kernel_buffer_0_fu_619_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln30_reg_1242_pp1_iter2_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        mul_ln37_reg_1323 <= mul_ln37_fu_1022_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sext_ln28_reg_1235 <= sext_ln28_fu_703_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_440_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln_reg_1217[5 : 3] <= shl_ln_fu_456_p3[5 : 3];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SeparableConv2D_2_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_2_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_739_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln22_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_1242 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_in_d_0_phi_fu_423_p4 = in_d_reg_1288;
    end else begin
        ap_phi_mux_in_d_0_phi_fu_423_p4 = in_d_0_reg_419;
    end
end

always @ (*) begin
    if (((icmp_ln30_reg_1242 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_402_p4 = select_ln32_8_reg_1277;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_402_p4 = out_w_0_reg_398;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln34_3_reg_1304_pp1_iter3_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_440_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln24_fu_464_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln30_fu_739_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln30_fu_739_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_2_b_s_address0 = zext_ln28_fu_698_p1;

assign add_ln22_fu_434_p2 = (phi_mul_reg_343 + 9'd49);

assign add_ln30_fu_745_p2 = (indvar_flatten18_reg_365 + 9'd1);

assign add_ln31_fu_887_p2 = (indvar_flatten_reg_387 + 7'd1);

assign add_ln37_6_fu_867_p2 = (select_ln37_7_fu_793_p3 + zext_ln34_3_fu_855_p1);

assign add_ln37_fu_733_p2 = (sub_ln37_fu_723_p2 + zext_ln34_fu_729_p1);

assign add_ln44_1_fu_932_p2 = ($signed(zext_ln22_reg_1198) + $signed(sext_ln44_fu_928_p1));

assign add_ln44_fu_923_p2 = (zext_ln32_fu_901_p1 + select_ln37_7_reg_1256);

assign and_ln37_fu_821_p2 = (xor_ln37_fu_809_p2 & icmp_ln34_fu_815_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_i_0_phi_fu_358_p4 = i_0_reg_354;

assign buffer_fu_1052_p2 = ($signed(sext_ln37_4_fu_1048_p1) + $signed(select_ln32_fu_1033_p3));

assign grp_fu_1099_p0 = grp_fu_1099_p00;

assign grp_fu_1099_p00 = select_ln32_7_reg_1271;

assign grp_fu_1099_p1 = 10'd49;

assign i_fu_470_p2 = (i_0_reg_354 + 4'd1);

assign icmp_ln22_fu_440_p2 = ((out_d_0_reg_331 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_464_p2 = ((i_0_reg_354 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_739_p2 = ((indvar_flatten18_reg_365 == 9'd392) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_757_p2 = ((indvar_flatten_reg_387 == 7'd56) ? 1'b1 : 1'b0);

assign icmp_ln34_3_fu_918_p2 = ((in_d_reg_1288 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_815_p2 = ((ap_phi_mux_in_d_0_phi_fu_423_p4 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_881_p2 = (select_ln32_7_fu_847_p3 + 4'd1);

assign input_r_address0 = zext_ln37_5_fu_913_p1;

assign kernel_buffer_0_fu_619_p1 = $signed(merge_i_fu_485_p66);

assign merge_i_fu_485_p65 = (shl_ln_reg_1217 + zext_ln26_fu_476_p1);

assign mul_ln37_fu_1022_p1 = input_load_reg_1313;

assign mul_ln37_fu_1022_p2 = ($signed(tmp_5_reg_1318) * $signed(mul_ln37_fu_1022_p1));

assign or_ln32_fu_841_p2 = (icmp_ln31_fu_757_p2 | and_ln37_fu_821_p2);

assign out_d_fu_446_p2 = (out_d_0_reg_331 + 4'd1);

assign out_h_fu_751_p2 = (out_h_0_reg_376 + 3'd1);

assign out_w_fu_835_p2 = (select_ln37_fu_763_p3 + 3'd1);

assign output_r_address0 = zext_ln44_fu_1094_p1;

assign output_r_d0 = (trunc_ln43_fu_1066_p1 & select_ln43_fu_1076_p3);

assign select_ln30_fu_827_p3 = ((icmp_ln31_fu_757_p2[0:0] === 1'b1) ? out_h_fu_751_p2 : out_h_0_reg_376);

assign select_ln31_fu_893_p3 = ((icmp_ln31_fu_757_p2[0:0] === 1'b1) ? 7'd1 : add_ln31_fu_887_p2);

assign select_ln32_7_fu_847_p3 = ((or_ln32_fu_841_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_in_d_0_phi_fu_423_p4);

assign select_ln32_8_fu_859_p3 = ((and_ln37_fu_821_p2[0:0] === 1'b1) ? out_w_fu_835_p2 : select_ln37_fu_763_p3);

assign select_ln32_9_fu_873_p3 = ((and_ln37_fu_821_p2[0:0] === 1'b1) ? add_ln37_6_fu_867_p2 : select_ln37_8_fu_801_p3);

assign select_ln32_fu_1033_p3 = ((and_ln37_reg_1261_pp1_iter3_reg[0:0] === 1'b1) ? sext_ln28_reg_1235 : select_ln37_6_fu_1027_p3);

assign select_ln37_6_fu_1027_p3 = ((icmp_ln31_reg_1251_pp1_iter3_reg[0:0] === 1'b1) ? sext_ln28_reg_1235 : buffer_0_reg_409);

assign select_ln37_7_fu_793_p3 = ((icmp_ln31_fu_757_p2[0:0] === 1'b1) ? sub_ln37_3_fu_787_p2 : sub_ln37_fu_723_p2);

assign select_ln37_8_fu_801_p3 = ((icmp_ln31_fu_757_p2[0:0] === 1'b1) ? sub_ln37_3_fu_787_p2 : add_ln37_fu_733_p2);

assign select_ln37_fu_763_p3 = ((icmp_ln31_fu_757_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_out_w_0_phi_fu_402_p4);

assign select_ln43_fu_1076_p3 = ((xor_ln43_fu_1070_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln28_fu_703_p1 = $signed(SeparableConv2D_2_b_s_q0);

assign sext_ln37_4_fu_1048_p1 = $signed(trunc_ln_fu_1039_p4);

assign sext_ln37_fu_910_p1 = grp_fu_1099_p3;

assign sext_ln44_2_fu_1091_p1 = $signed(add_ln44_1_reg_1308_pp1_iter3_reg);

assign sext_ln44_fu_928_p1 = $signed(add_ln44_fu_923_p2);

assign shl_ln2_fu_711_p3 = {{out_h_0_reg_376}, {3'd0}};

assign shl_ln37_mid1_fu_775_p3 = {{out_h_fu_751_p2}, {3'd0}};

assign shl_ln_fu_456_p3 = {{trunc_ln26_fu_452_p1}, {3'd0}};

assign sub_ln37_3_fu_787_p2 = (zext_ln37_14_fu_783_p1 - zext_ln37_13_fu_771_p1);

assign sub_ln37_fu_723_p2 = (zext_ln37_11_fu_719_p1 - zext_ln37_fu_707_p1);

assign tmp_3_fu_1058_p3 = buffer_fu_1052_p2[32'd21];

assign trunc_ln26_fu_452_p1 = out_d_0_reg_331[2:0];

assign trunc_ln43_fu_1066_p1 = buffer_fu_1052_p2[15:0];

assign trunc_ln_fu_1039_p4 = {{mul_ln37_reg_1323[31:14]}};

assign xor_ln37_fu_809_p2 = (icmp_ln31_fu_757_p2 ^ 1'd1);

assign xor_ln43_fu_1070_p2 = (tmp_3_fu_1058_p3 ^ 1'd1);

assign zext_ln22_fu_430_p1 = phi_mul_reg_343;

assign zext_ln26_fu_476_p1 = i_0_reg_354;

assign zext_ln28_fu_698_p1 = out_d_0_reg_331;

assign zext_ln32_fu_901_p1 = select_ln32_8_reg_1277;

assign zext_ln34_3_fu_855_p1 = out_w_fu_835_p2;

assign zext_ln34_fu_729_p1 = ap_phi_mux_out_w_0_phi_fu_402_p4;

assign zext_ln37_11_fu_719_p1 = shl_ln2_fu_711_p3;

assign zext_ln37_13_fu_771_p1 = out_h_fu_751_p2;

assign zext_ln37_14_fu_783_p1 = shl_ln37_mid1_fu_775_p3;

assign zext_ln37_5_fu_913_p1 = $unsigned(sext_ln37_fu_910_p1);

assign zext_ln37_fu_707_p1 = out_h_0_reg_376;

assign zext_ln44_fu_1094_p1 = $unsigned(sext_ln44_2_fu_1091_p1);

always @ (posedge ap_clk) begin
    zext_ln22_reg_1198[9] <= 1'b0;
    shl_ln_reg_1217[2:0] <= 3'b000;
end

endmodule //pointwise_conv2d_fix_2
