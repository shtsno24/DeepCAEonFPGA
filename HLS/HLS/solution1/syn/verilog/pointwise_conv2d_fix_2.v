// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] SeparableConv2D_2_b_s_address0;
reg    SeparableConv2D_2_b_s_ce0;
wire   [12:0] SeparableConv2D_2_b_s_q0;
wire   [9:0] zext_ln18_fu_293_p1;
reg   [9:0] zext_ln18_reg_646;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln18_fu_297_p2;
reg   [8:0] add_ln18_reg_651;
wire   [3:0] out_d_fu_309_p2;
reg   [3:0] out_d_reg_659;
wire   [0:0] icmp_ln18_fu_303_p2;
wire   [2:0] trunc_ln27_fu_320_p1;
reg   [2:0] trunc_ln27_reg_669;
wire  signed [21:0] sext_ln27_fu_324_p1;
reg  signed [21:0] sext_ln27_reg_674;
wire    ap_CS_fsm_state3;
wire   [5:0] shl_ln_fu_328_p3;
reg   [5:0] shl_ln_reg_679;
wire   [2:0] out_h_fu_341_p2;
reg   [2:0] out_h_reg_687;
wire    ap_CS_fsm_state4;
wire   [6:0] sub_ln27_fu_363_p2;
reg   [6:0] sub_ln27_reg_692;
wire   [0:0] icmp_ln19_fu_335_p2;
wire   [2:0] out_w_fu_375_p2;
reg   [2:0] out_w_reg_700;
wire    ap_CS_fsm_state5;
wire  signed [9:0] sext_ln27_8_fu_390_p1;
reg  signed [9:0] sext_ln27_8_reg_705;
wire   [0:0] icmp_ln20_fu_369_p2;
wire   [3:0] in_d_fu_404_p2;
reg   [3:0] in_d_reg_714;
wire    ap_CS_fsm_state6;
wire   [8:0] add_ln27_6_fu_410_p2;
reg   [8:0] add_ln27_6_reg_719;
wire   [0:0] icmp_ln22_fu_398_p2;
wire   [9:0] add_ln27_1_fu_416_p2;
reg   [9:0] add_ln27_1_reg_724;
wire   [5:0] add_ln27_5_fu_425_p2;
reg   [5:0] add_ln27_5_reg_729;
wire   [15:0] and_ln32_fu_456_p2;
reg   [15:0] and_ln32_reg_734;
wire   [9:0] add_ln32_fu_462_p2;
reg   [9:0] add_ln32_reg_739;
wire    ap_CS_fsm_state7;
reg  signed [15:0] input_load_reg_749;
wire    ap_CS_fsm_state8;
wire   [15:0] merge_i_fu_474_p66;
reg  signed [15:0] merge_i_reg_754;
wire  signed [31:0] mul_ln27_fu_640_p2;
reg  signed [31:0] mul_ln27_reg_759;
wire    ap_CS_fsm_state9;
wire   [21:0] buffer_fu_626_p2;
wire    ap_CS_fsm_state10;
reg   [3:0] out_d_0_reg_217;
reg   [8:0] phi_mul1_reg_228;
reg   [2:0] out_h_0_reg_239;
reg   [2:0] out_w_0_reg_250;
wire    ap_CS_fsm_state11;
reg   [21:0] buffer_0_reg_261;
reg   [3:0] in_d_0_reg_271;
reg   [8:0] phi_mul_reg_282;
wire   [63:0] zext_ln21_fu_315_p1;
wire   [63:0] zext_ln27_7_fu_469_p1;
wire   [63:0] zext_ln32_fu_635_p1;
wire   [5:0] shl_ln27_4_fu_351_p3;
wire   [6:0] zext_ln27_6_fu_359_p1;
wire   [6:0] zext_ln27_fu_347_p1;
wire   [6:0] zext_ln22_fu_381_p1;
wire   [6:0] add_ln27_fu_385_p2;
wire   [9:0] zext_ln22_3_fu_394_p1;
wire   [5:0] zext_ln27_8_fu_421_p1;
wire   [0:0] tmp_fu_430_p3;
wire   [0:0] xor_ln31_fu_442_p2;
wire   [15:0] select_ln31_fu_448_p3;
wire   [15:0] trunc_ln31_fu_438_p1;
wire  signed [31:0] sext_ln27_9_fu_466_p1;
wire   [17:0] trunc_ln3_fu_613_p4;
wire  signed [21:0] sext_ln27_10_fu_622_p1;
wire  signed [31:0] sext_ln32_fu_632_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

pointwise_conv2d_fix_2_SeparableConv2D_2_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_2_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_2_b_s_address0),
    .ce0(SeparableConv2D_2_b_s_ce0),
    .q0(SeparableConv2D_2_b_s_q0)
);

network_mux_646_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 16 ))
network_mux_646_16_1_1_U83(
    .din0(16'd10898),
    .din1(16'd6361),
    .din2(16'd62016),
    .din3(16'd3573),
    .din4(16'd57771),
    .din5(16'd65383),
    .din6(16'd10043),
    .din7(16'd6976),
    .din8(16'd573),
    .din9(16'd58348),
    .din10(16'd6348),
    .din11(16'd56160),
    .din12(16'd56346),
    .din13(16'd60123),
    .din14(16'd64660),
    .din15(16'd65496),
    .din16(16'd57212),
    .din17(16'd2097),
    .din18(16'd56049),
    .din19(16'd58901),
    .din20(16'd607),
    .din21(16'd57455),
    .din22(16'd7867),
    .din23(16'd60070),
    .din24(16'd11547),
    .din25(16'd8413),
    .din26(16'd63801),
    .din27(16'd8485),
    .din28(16'd2665),
    .din29(16'd3423),
    .din30(16'd64622),
    .din31(16'd4560),
    .din32(16'd59488),
    .din33(16'd7028),
    .din34(16'd59718),
    .din35(16'd9405),
    .din36(16'd6586),
    .din37(16'd4944),
    .din38(16'd7540),
    .din39(16'd8629),
    .din40(16'd6564),
    .din41(16'd54916),
    .din42(16'd63753),
    .din43(16'd5899),
    .din44(16'd57260),
    .din45(16'd12149),
    .din46(16'd2883),
    .din47(16'd60808),
    .din48(16'd9628),
    .din49(16'd8093),
    .din50(16'd733),
    .din51(16'd9047),
    .din52(16'd61262),
    .din53(16'd64311),
    .din54(16'd58905),
    .din55(16'd61810),
    .din56(16'd1720),
    .din57(16'd2151),
    .din58(16'd63606),
    .din59(16'd5081),
    .din60(16'd65127),
    .din61(16'd59644),
    .din62(16'd61499),
    .din63(16'd1956),
    .din64(add_ln27_5_reg_729),
    .dout(merge_i_fu_474_p66)
);

network_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16s_16s_32_1_1_U84(
    .din0(merge_i_reg_754),
    .din1(input_load_reg_749),
    .dout(mul_ln27_fu_640_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_0_reg_261 <= buffer_fu_626_p2;
    end else if (((icmp_ln20_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buffer_0_reg_261 <= sext_ln27_reg_674;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        in_d_0_reg_271 <= in_d_reg_714;
    end else if (((icmp_ln20_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_d_0_reg_271 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_0_reg_217 <= out_d_reg_659;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_217 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_369_p2 == 1'd1))) begin
        out_h_0_reg_239 <= out_h_reg_687;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_239 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_0_reg_250 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_w_0_reg_250 <= out_w_reg_700;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_228 <= add_ln18_reg_651;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_228 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        phi_mul_reg_282 <= add_ln27_6_reg_719;
    end else if (((icmp_ln20_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_282 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln18_reg_651 <= add_ln18_fu_297_p2;
        out_d_reg_659 <= out_d_fu_309_p2;
        zext_ln18_reg_646[8 : 0] <= zext_ln18_fu_293_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln27_1_reg_724 <= add_ln27_1_fu_416_p2;
        add_ln27_5_reg_729 <= add_ln27_5_fu_425_p2;
        add_ln27_6_reg_719 <= add_ln27_6_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_398_p2 == 1'd1))) begin
        add_ln32_reg_739 <= add_ln32_fu_462_p2;
        and_ln32_reg_734 <= and_ln32_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_d_reg_714 <= in_d_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_load_reg_749 <= input_r_q0;
        merge_i_reg_754 <= merge_i_fu_474_p66;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln27_reg_759 <= mul_ln27_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_reg_687 <= out_h_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_700 <= out_w_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sext_ln27_8_reg_705 <= sext_ln27_8_fu_390_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln27_reg_674 <= sext_ln27_fu_324_p1;
        shl_ln_reg_679[5 : 3] <= shl_ln_fu_328_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln27_reg_692 <= sub_ln27_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln27_reg_669 <= trunc_ln27_fu_320_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_2_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_2_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln18_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_303_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln19_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_369_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_398_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_2_b_s_address0 = zext_ln21_fu_315_p1;

assign add_ln18_fu_297_p2 = (phi_mul1_reg_228 + 9'd49);

assign add_ln27_1_fu_416_p2 = ($signed(sext_ln27_8_reg_705) + $signed(zext_ln22_3_fu_394_p1));

assign add_ln27_5_fu_425_p2 = (zext_ln27_8_fu_421_p1 + shl_ln_reg_679);

assign add_ln27_6_fu_410_p2 = (phi_mul_reg_282 + 9'd49);

assign add_ln27_fu_385_p2 = (sub_ln27_reg_692 + zext_ln22_fu_381_p1);

assign add_ln32_fu_462_p2 = ($signed(zext_ln18_reg_646) + $signed(sext_ln27_8_reg_705));

assign and_ln32_fu_456_p2 = (trunc_ln31_fu_438_p1 & select_ln31_fu_448_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_fu_626_p2 = ($signed(sext_ln27_10_fu_622_p1) + $signed(buffer_0_reg_261));

assign icmp_ln18_fu_303_p2 = ((out_d_0_reg_217 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_335_p2 = ((out_h_0_reg_239 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_369_p2 = ((out_w_0_reg_250 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_398_p2 = ((in_d_0_reg_271 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_404_p2 = (in_d_0_reg_271 + 4'd1);

assign input_r_address0 = zext_ln27_7_fu_469_p1;

assign out_d_fu_309_p2 = (out_d_0_reg_217 + 4'd1);

assign out_h_fu_341_p2 = (out_h_0_reg_239 + 3'd1);

assign out_w_fu_375_p2 = (out_w_0_reg_250 + 3'd1);

assign output_r_address0 = zext_ln32_fu_635_p1;

assign output_r_d0 = and_ln32_reg_734;

assign select_ln31_fu_448_p3 = ((xor_ln31_fu_442_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln27_10_fu_622_p1 = $signed(trunc_ln3_fu_613_p4);

assign sext_ln27_8_fu_390_p1 = $signed(add_ln27_fu_385_p2);

assign sext_ln27_9_fu_466_p1 = $signed(add_ln27_1_reg_724);

assign sext_ln27_fu_324_p1 = $signed(SeparableConv2D_2_b_s_q0);

assign sext_ln32_fu_632_p1 = $signed(add_ln32_reg_739);

assign shl_ln27_4_fu_351_p3 = {{out_h_0_reg_239}, {3'd0}};

assign shl_ln_fu_328_p3 = {{trunc_ln27_reg_669}, {3'd0}};

assign sub_ln27_fu_363_p2 = (zext_ln27_6_fu_359_p1 - zext_ln27_fu_347_p1);

assign tmp_fu_430_p3 = buffer_0_reg_261[32'd21];

assign trunc_ln27_fu_320_p1 = out_d_0_reg_217[2:0];

assign trunc_ln31_fu_438_p1 = buffer_0_reg_261[15:0];

assign trunc_ln3_fu_613_p4 = {{mul_ln27_reg_759[31:14]}};

assign xor_ln31_fu_442_p2 = (tmp_fu_430_p3 ^ 1'd1);

assign zext_ln18_fu_293_p1 = phi_mul1_reg_228;

assign zext_ln21_fu_315_p1 = out_d_0_reg_217;

assign zext_ln22_3_fu_394_p1 = phi_mul_reg_282;

assign zext_ln22_fu_381_p1 = out_w_0_reg_250;

assign zext_ln27_6_fu_359_p1 = shl_ln27_4_fu_351_p3;

assign zext_ln27_7_fu_469_p1 = $unsigned(sext_ln27_9_fu_466_p1);

assign zext_ln27_8_fu_421_p1 = in_d_0_reg_271;

assign zext_ln27_fu_347_p1 = out_h_0_reg_239;

assign zext_ln32_fu_635_p1 = $unsigned(sext_ln32_fu_632_p1);

always @ (posedge ap_clk) begin
    zext_ln18_reg_646[9] <= 1'b0;
    shl_ln_reg_679[2:0] <= 3'b000;
end

endmodule //pointwise_conv2d_fix_2
