// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state12 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [2:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [6:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [6:0] kernel_address1;
output   kernel_ce1;
input  [15:0] kernel_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg[6:0] kernel_address0;
reg kernel_ce0;
reg[6:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten48_reg_292;
reg   [3:0] out_d_0_reg_304;
reg   [7:0] indvar_flatten_reg_316;
reg   [3:0] out_h_0_reg_327;
reg   [3:0] out_w_0_reg_338;
reg  signed [15:0] reg_349;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln23_reg_1222;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] reg_354;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg  signed [15:0] reg_358;
reg  signed [15:0] reg_363;
reg   [0:0] icmp_ln23_reg_1222_pp0_iter1_reg;
reg  signed [15:0] reg_368;
wire   [6:0] zext_ln42_fu_373_p1;
reg   [6:0] zext_ln42_reg_1168;
wire   [10:0] zext_ln42_1_cast14_fu_377_p1;
reg   [10:0] zext_ln42_1_cast14_reg_1174;
wire   [6:0] zext_ln51_fu_381_p1;
reg   [6:0] zext_ln51_reg_1181;
wire   [10:0] zext_ln51_1_cast_fu_385_p1;
reg   [10:0] zext_ln51_1_cast_reg_1187;
wire   [3:0] empty_fu_389_p1;
reg   [3:0] empty_reg_1192;
wire   [7:0] mul_ln4_fu_405_p2;
reg   [7:0] mul_ln4_reg_1197;
wire   [10:0] tmp_s_fu_411_p3;
reg   [10:0] tmp_s_reg_1202;
wire   [0:0] icmp_ln33_fu_419_p2;
reg   [0:0] icmp_ln33_reg_1207;
wire   [6:0] zext_ln51_2_fu_425_p1;
reg   [6:0] zext_ln51_2_reg_1212;
wire   [6:0] zext_ln42_2_cast_fu_456_p1;
reg   [6:0] zext_ln42_2_cast_reg_1217;
wire   [0:0] icmp_ln23_fu_466_p2;
wire   [3:0] out_d_fu_471_p2;
reg   [3:0] out_d_reg_1226;
wire   [0:0] icmp_ln32_fu_477_p2;
reg   [0:0] icmp_ln32_reg_1231;
wire   [3:0] select_ln24_fu_482_p3;
reg   [3:0] select_ln24_reg_1239;
wire   [6:0] zext_ln51_4_fu_490_p1;
reg   [6:0] zext_ln51_4_reg_1244;
wire   [5:0] select_ln24_8_fu_516_p3;
reg   [5:0] select_ln24_8_reg_1249;
wire   [0:0] select_ln24_14_fu_555_p3;
reg   [0:0] select_ln24_14_reg_1259;
wire   [3:0] out_h_fu_562_p2;
reg   [3:0] out_h_reg_1265;
wire   [3:0] out_w_0_mid2_fu_574_p3;
reg   [3:0] out_w_0_mid2_reg_1270;
wire   [6:0] zext_ln42_2_cast_mid_fu_582_p1;
reg   [6:0] zext_ln42_2_cast_mid_reg_1277;
wire   [6:0] tmp12_0_0_mid2_v_v_fu_592_p3;
reg   [6:0] tmp12_0_0_mid2_v_v_reg_1282;
wire   [7:0] add_ln32_2_fu_600_p2;
reg   [7:0] add_ln32_2_reg_1289;
wire   [6:0] zext_ln24_19_fu_606_p1;
reg   [6:0] zext_ln24_19_reg_1294;
wire   [10:0] tmp12_0_0_mid2_fu_634_p2;
reg   [10:0] tmp12_0_0_mid2_reg_1314;
wire   [10:0] tmp12_1_0_mid2_fu_648_p2;
reg   [10:0] tmp12_1_0_mid2_reg_1319;
wire   [10:0] zext_ln40_fu_653_p1;
reg   [10:0] zext_ln40_reg_1326;
reg   [10:0] zext_ln40_reg_1326_pp0_iter1_reg;
wire   [3:0] out_w_fu_667_p2;
reg   [3:0] out_w_reg_1338;
wire   [10:0] zext_ln42_13_fu_672_p1;
reg   [10:0] zext_ln42_13_reg_1343;
wire   [6:0] mul_ln51_fu_687_p2;
reg   [6:0] mul_ln51_reg_1354;
wire   [6:0] tmp13_fu_691_p2;
reg   [6:0] tmp13_reg_1359;
wire   [10:0] add_ln23_fu_696_p2;
reg   [10:0] add_ln23_reg_1364;
wire   [10:0] tmp12_2_0_mid2_fu_731_p2;
reg   [10:0] tmp12_2_0_mid2_reg_1379;
wire   [10:0] zext_ln42_15_fu_741_p1;
reg   [10:0] zext_ln42_15_reg_1386;
wire   [6:0] tmp14_mid2_v_v_fu_813_p3;
reg   [6:0] tmp14_mid2_v_v_reg_1412;
reg   [15:0] trunc_ln_reg_1417;
reg   [15:0] trunc_ln51_9_reg_1422;
wire   [3:0] select_ln24_9_fu_892_p3;
reg   [3:0] select_ln24_9_reg_1447;
wire   [3:0] select_ln32_fu_898_p3;
reg   [3:0] select_ln32_reg_1453;
reg   [15:0] trunc_ln51_s_reg_1458;
reg   [15:0] trunc_ln51_8_reg_1463;
wire   [10:0] add_ln42_20_fu_947_p2;
reg   [10:0] add_ln42_20_reg_1478;
wire   [7:0] select_ln32_14_fu_951_p3;
reg   [7:0] select_ln32_14_reg_1483;
reg   [15:0] trunc_ln51_1_reg_1493;
reg   [15:0] trunc_ln51_2_reg_1498;
wire   [15:0] add_ln51_10_fu_999_p2;
reg   [15:0] add_ln51_10_reg_1508;
reg   [15:0] trunc_ln51_3_reg_1513;
reg   [15:0] trunc_ln51_4_reg_1518;
wire   [15:0] add_ln51_12_fu_1046_p2;
reg   [15:0] add_ln51_12_reg_1523;
wire   [15:0] add_ln51_13_fu_1052_p2;
reg   [15:0] add_ln51_13_reg_1528;
reg   [15:0] trunc_ln51_5_reg_1533;
wire   [10:0] grp_fu_1155_p3;
reg   [10:0] add_ln51_reg_1538;
wire   [15:0] add_ln51_17_fu_1090_p2;
reg   [15:0] add_ln51_17_reg_1543;
wire    ap_block_pp0_stage2_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage4_subdone;
reg   [10:0] ap_phi_mux_indvar_flatten48_phi_fu_296_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_out_d_0_phi_fu_308_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_320_p4;
reg   [3:0] ap_phi_mux_out_h_0_phi_fu_331_p4;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_342_p4;
wire   [63:0] zext_ln24_fu_524_p1;
wire   [63:0] zext_ln24_10_fu_615_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln24_11_fu_626_p1;
wire   [63:0] zext_ln42_12_fu_662_p1;
wire   [63:0] zext_ln42_14_fu_682_p1;
wire   [63:0] zext_ln24_12_fu_707_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln24_13_fu_717_p1;
wire   [63:0] zext_ln42_16_fu_750_p1;
wire   [63:0] zext_ln42_17_fu_759_p1;
wire   [63:0] zext_ln24_14_fu_777_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln24_15_fu_787_p1;
wire   [63:0] zext_ln42_18_fu_850_p1;
wire   [63:0] zext_ln42_19_fu_859_p1;
wire   [63:0] zext_ln24_16_fu_877_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln24_17_fu_887_p1;
wire   [63:0] zext_ln42_20_fu_933_p1;
wire   [63:0] zext_ln42_21_fu_942_p1;
wire   [63:0] zext_ln24_18_fu_965_p1;
wire   [63:0] zext_ln42_22_fu_995_p1;
wire   [63:0] zext_ln51_3_fu_1095_p1;
wire   [3:0] empty_60_fu_393_p1;
wire   [3:0] mul_ln4_fu_405_p0;
wire   [3:0] mul_ln4_fu_405_p1;
wire   [2:0] trunc_ln27_fu_433_p1;
wire   [5:0] zext_ln27_fu_429_p1;
wire   [5:0] shl_ln_fu_437_p3;
wire   [3:0] mul_ln42_fu_451_p0;
wire   [5:0] mul_ln42_fu_451_p1;
wire   [6:0] mul_ln42_fu_451_p2;
wire   [2:0] trunc_ln27_2_fu_498_p1;
wire   [5:0] zext_ln27_4_fu_494_p1;
wire   [5:0] shl_ln27_mid1_fu_502_p3;
wire   [5:0] add_ln27_2_fu_510_p2;
wire   [5:0] add_ln27_fu_445_p2;
wire   [3:0] mul_ln42_18_fu_529_p0;
wire   [5:0] mul_ln42_18_fu_529_p1;
wire   [6:0] mul_ln42_18_fu_529_p2;
wire   [6:0] tmp_0_0_fu_460_p2;
wire   [0:0] icmp_ln33_2_fu_550_p2;
wire   [0:0] empty_62_fu_568_p2;
wire   [6:0] select_ln24_10_fu_534_p3;
wire   [6:0] tmp_0_0_mid1_fu_586_p2;
wire   [6:0] select_ln24_12_fu_542_p3;
wire   [6:0] add_ln24_fu_609_p2;
wire   [6:0] add_ln24_8_fu_620_p2;
wire   [5:0] tmp12_0_0_mid2_fu_634_p0;
wire   [6:0] tmp12_0_0_mid2_fu_634_p1;
wire   [6:0] tmp12_1_0_mid2_v_v_fu_639_p2;
wire   [5:0] tmp12_1_0_mid2_fu_648_p0;
wire   [6:0] tmp12_1_0_mid2_fu_648_p1;
wire   [10:0] add_ln42_fu_656_p2;
wire   [10:0] add_ln42_12_fu_676_p2;
wire   [3:0] mul_ln51_fu_687_p0;
wire   [4:0] mul_ln51_fu_687_p1;
wire   [6:0] add_ln24_9_fu_702_p2;
wire   [6:0] add_ln24_10_fu_712_p2;
wire   [6:0] tmp12_2_0_mid2_v_v_fu_722_p2;
wire   [5:0] tmp12_2_0_mid2_fu_731_p0;
wire   [6:0] tmp12_2_0_mid2_fu_731_p1;
wire   [3:0] add_ln42_13_fu_736_p2;
wire   [10:0] add_ln42_14_fu_745_p2;
wire   [10:0] add_ln42_15_fu_755_p2;
wire   [6:0] add_ln24_11_fu_772_p2;
wire   [6:0] add_ln24_12_fu_782_p2;
wire   [3:0] mul_ln51_2_fu_792_p0;
wire   [4:0] mul_ln51_2_fu_792_p1;
wire   [6:0] mul_ln51_2_fu_792_p2;
wire   [6:0] select_ln24_11_fu_796_p3;
wire   [6:0] tmp13_mid1_fu_808_p2;
wire   [6:0] select_ln24_13_fu_802_p3;
wire  signed [29:0] mul_ln42_9_fu_1099_p2;
wire  signed [29:0] mul_ln42_10_fu_1106_p2;
wire   [10:0] add_ln42_16_fu_846_p2;
wire   [10:0] add_ln42_17_fu_855_p2;
wire   [6:0] add_ln24_13_fu_872_p2;
wire   [6:0] add_ln24_14_fu_882_p2;
wire  signed [29:0] mul_ln42_11_fu_1113_p2;
wire  signed [29:0] mul_ln42_12_fu_1120_p2;
wire   [10:0] add_ln42_18_fu_929_p2;
wire   [10:0] add_ln42_19_fu_938_p2;
wire  signed [29:0] mul_ln42_13_fu_1127_p2;
wire  signed [29:0] mul_ln42_14_fu_1134_p2;
wire  signed [29:0] mul_ln42_15_fu_1141_p2;
wire  signed [29:0] mul_ln42_16_fu_1148_p2;
wire   [15:0] add_ln51_9_fu_1037_p2;
wire   [15:0] add_ln51_11_fu_1042_p2;
wire  signed [29:0] mul_ln42_17_fu_1161_p2;
wire   [15:0] add_ln51_14_fu_1076_p2;
wire   [15:0] add_ln51_15_fu_1080_p2;
wire   [15:0] add_ln51_16_fu_1085_p2;
wire   [4:0] grp_fu_1155_p0;
wire   [6:0] grp_fu_1155_p1;
wire   [3:0] grp_fu_1155_p2;
wire    ap_CS_fsm_state12;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_1155_p10;
wire   [6:0] mul_ln42_18_fu_529_p00;
wire   [6:0] mul_ln42_fu_451_p00;
wire   [7:0] mul_ln4_fu_405_p00;
wire   [7:0] mul_ln4_fu_405_p10;
wire   [10:0] tmp12_0_0_mid2_fu_634_p10;
wire   [10:0] tmp12_1_0_mid2_fu_648_p10;
wire   [10:0] tmp12_2_0_mid2_fu_731_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U62(
    .din0(reg_363),
    .din1(reg_349),
    .dout(mul_ln42_9_fu_1099_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U63(
    .din0(reg_368),
    .din1(reg_354),
    .dout(mul_ln42_10_fu_1106_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U64(
    .din0(reg_363),
    .din1(reg_358),
    .dout(mul_ln42_11_fu_1113_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U65(
    .din0(reg_368),
    .din1(reg_349),
    .dout(mul_ln42_12_fu_1120_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U66(
    .din0(reg_363),
    .din1(reg_354),
    .dout(mul_ln42_13_fu_1127_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U67(
    .din0(reg_368),
    .din1(reg_349),
    .dout(mul_ln42_14_fu_1134_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U68(
    .din0(reg_363),
    .din1(reg_358),
    .dout(mul_ln42_15_fu_1141_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U69(
    .din0(reg_368),
    .din1(reg_349),
    .dout(mul_ln42_16_fu_1148_p2)
);

network_mac_muladd_5ns_7ns_4ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
network_mac_muladd_5ns_7ns_4ns_11_1_1_U70(
    .din0(grp_fu_1155_p0),
    .din1(grp_fu_1155_p1),
    .din2(grp_fu_1155_p2),
    .dout(grp_fu_1155_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U71(
    .din0(reg_363),
    .din1(reg_354),
    .dout(mul_ln42_17_fu_1161_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten48_reg_292 <= add_ln23_reg_1364;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten48_reg_292 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_316 <= select_ln32_14_reg_1483;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_316 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_304 <= select_ln24_9_reg_1447;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_304 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_h_0_reg_327 <= select_ln32_reg_1453;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_327 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_0_reg_338 <= out_w_reg_1338;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_338 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_349 <= kernel_q1;
    end else if (((icmp_ln23_reg_1222 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_349 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
            reg_358 <= kernel_q0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
            reg_358 <= kernel_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_363 <= input_r_q1;
    end else if ((((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln23_reg_1222_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        reg_363 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_368 <= input_r_q0;
    end else if (((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        reg_368 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln23_reg_1364 <= add_ln23_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_466_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln32_2_reg_1289 <= add_ln32_2_fu_600_p2;
        icmp_ln32_reg_1231 <= icmp_ln32_fu_477_p2;
        out_d_reg_1226 <= out_d_fu_471_p2;
        out_h_reg_1265 <= out_h_fu_562_p2;
        out_w_0_mid2_reg_1270 <= out_w_0_mid2_fu_574_p3;
        select_ln24_14_reg_1259 <= select_ln24_14_fu_555_p3;
        select_ln24_8_reg_1249 <= select_ln24_8_fu_516_p3;
        select_ln24_reg_1239 <= select_ln24_fu_482_p3;
        tmp12_0_0_mid2_v_v_reg_1282 <= tmp12_0_0_mid2_v_v_fu_592_p3;
        zext_ln42_2_cast_mid_reg_1277[3 : 0] <= zext_ln42_2_cast_mid_fu_582_p1[3 : 0];
        zext_ln51_4_reg_1244[3 : 0] <= zext_ln51_4_fu_490_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln42_20_reg_1478 <= add_ln42_20_fu_947_p2;
        trunc_ln51_8_reg_1463 <= {{mul_ln42_12_fu_1120_p2[29:14]}};
        trunc_ln51_s_reg_1458 <= {{mul_ln42_11_fu_1113_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln51_10_reg_1508 <= add_ln51_10_fu_999_p2;
        trunc_ln51_1_reg_1493 <= {{mul_ln42_13_fu_1127_p2[29:14]}};
        trunc_ln51_2_reg_1498 <= {{mul_ln42_14_fu_1134_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln51_12_reg_1523 <= add_ln51_12_fu_1046_p2;
        add_ln51_13_reg_1528 <= add_ln51_13_fu_1052_p2;
        trunc_ln51_3_reg_1513 <= {{mul_ln42_15_fu_1141_p2[29:14]}};
        trunc_ln51_4_reg_1518 <= {{mul_ln42_16_fu_1148_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln51_17_reg_1543 <= add_ln51_17_fu_1090_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln51_reg_1538 <= grp_fu_1155_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_1192 <= empty_fu_389_p1;
        icmp_ln33_reg_1207 <= icmp_ln33_fu_419_p2;
        mul_ln4_reg_1197 <= mul_ln4_fu_405_p2;
        tmp_s_reg_1202[10 : 3] <= tmp_s_fu_411_p3[10 : 3];
        zext_ln42_1_cast14_reg_1174[5 : 0] <= zext_ln42_1_cast14_fu_377_p1[5 : 0];
        zext_ln42_reg_1168[5 : 0] <= zext_ln42_fu_373_p1[5 : 0];
        zext_ln51_1_cast_reg_1187[4 : 0] <= zext_ln51_1_cast_fu_385_p1[4 : 0];
        zext_ln51_reg_1181[4 : 0] <= zext_ln51_fu_381_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln23_reg_1222 <= icmp_ln23_fu_466_p2;
        icmp_ln23_reg_1222_pp0_iter1_reg <= icmp_ln23_reg_1222;
        zext_ln42_2_cast_reg_1217[3 : 0] <= zext_ln42_2_cast_fu_456_p1[3 : 0];
        zext_ln51_2_reg_1212[3 : 0] <= zext_ln51_2_fu_425_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        mul_ln51_reg_1354 <= mul_ln51_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_w_reg_1338 <= out_w_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_354 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        select_ln24_9_reg_1447 <= select_ln24_9_fu_892_p3;
        select_ln32_14_reg_1483 <= select_ln32_14_fu_951_p3;
        select_ln32_reg_1453 <= select_ln32_fu_898_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp12_0_0_mid2_reg_1314 <= tmp12_0_0_mid2_fu_634_p2;
        tmp12_1_0_mid2_reg_1319 <= tmp12_1_0_mid2_fu_648_p2;
        zext_ln24_19_reg_1294[5 : 0] <= zext_ln24_19_fu_606_p1[5 : 0];
        zext_ln40_reg_1326[3 : 0] <= zext_ln40_fu_653_p1[3 : 0];
        zext_ln42_13_reg_1343[3 : 0] <= zext_ln42_13_fu_672_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp12_2_0_mid2_reg_1379 <= tmp12_2_0_mid2_fu_731_p2;
        zext_ln42_15_reg_1386[3 : 0] <= zext_ln42_15_fu_741_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln24_14_reg_1259 == 1'd0) & (icmp_ln32_reg_1231 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp13_reg_1359 <= tmp13_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp14_mid2_v_v_reg_1412 <= tmp14_mid2_v_v_fu_813_p3;
        trunc_ln51_9_reg_1422 <= {{mul_ln42_10_fu_1106_p2[29:14]}};
        trunc_ln_reg_1417 <= {{mul_ln42_9_fu_1099_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1222_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        trunc_ln51_5_reg_1533 <= {{mul_ln42_17_fu_1161_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln40_reg_1326_pp0_iter1_reg[3 : 0] <= zext_ln40_reg_1326[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln23_reg_1222 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten48_phi_fu_296_p4 = add_ln23_reg_1364;
    end else begin
        ap_phi_mux_indvar_flatten48_phi_fu_296_p4 = indvar_flatten48_reg_292;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_320_p4 = select_ln32_14_reg_1483;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_320_p4 = indvar_flatten_reg_316;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_308_p4 = select_ln24_9_reg_1447;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_308_p4 = out_d_0_reg_304;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_h_0_phi_fu_331_p4 = select_ln32_reg_1453;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_331_p4 = out_h_0_reg_327;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1222 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_342_p4 = out_w_reg_1338;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_342_p4 = out_w_0_reg_338;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln42_22_fu_995_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address0 = zext_ln42_21_fu_942_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln42_19_fu_859_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln42_17_fu_759_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln42_12_fu_662_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address1 = zext_ln42_20_fu_933_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = zext_ln42_18_fu_850_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln42_16_fu_750_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln42_14_fu_682_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address0 = zext_ln24_17_fu_887_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address0 = zext_ln24_15_fu_787_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address0 = zext_ln24_13_fu_717_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address0 = zext_ln24_10_fu_615_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kernel_address0 = zext_ln24_fu_524_p1;
        end else begin
            kernel_address0 = 'bx;
        end
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            kernel_address1 = zext_ln24_16_fu_877_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            kernel_address1 = zext_ln24_14_fu_777_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            kernel_address1 = zext_ln24_12_fu_707_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            kernel_address1 = zext_ln24_11_fu_626_p1;
        end else begin
            kernel_address1 = 'bx;
        end
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1222_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((icmp_ln23_reg_1222 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((icmp_ln23_reg_1222 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_696_p2 = (11'd1 + indvar_flatten48_reg_292);

assign add_ln24_10_fu_712_p2 = (7'd4 + zext_ln24_19_reg_1294);

assign add_ln24_11_fu_772_p2 = (7'd5 + zext_ln24_19_reg_1294);

assign add_ln24_12_fu_782_p2 = (7'd6 + zext_ln24_19_reg_1294);

assign add_ln24_13_fu_872_p2 = (7'd7 + zext_ln24_19_reg_1294);

assign add_ln24_14_fu_882_p2 = (7'd8 + zext_ln24_19_reg_1294);

assign add_ln24_8_fu_620_p2 = (7'd2 + zext_ln24_19_fu_606_p1);

assign add_ln24_9_fu_702_p2 = (7'd3 + zext_ln24_19_reg_1294);

assign add_ln24_fu_609_p2 = (7'd1 + zext_ln24_19_fu_606_p1);

assign add_ln27_2_fu_510_p2 = (zext_ln27_4_fu_494_p1 + shl_ln27_mid1_fu_502_p3);

assign add_ln27_fu_445_p2 = (zext_ln27_fu_429_p1 + shl_ln_fu_437_p3);

assign add_ln32_2_fu_600_p2 = (8'd1 + ap_phi_mux_indvar_flatten_phi_fu_320_p4);

assign add_ln42_12_fu_676_p2 = (tmp12_0_0_mid2_fu_634_p2 + zext_ln42_13_fu_672_p1);

assign add_ln42_13_fu_736_p2 = (4'd2 + out_w_0_mid2_reg_1270);

assign add_ln42_14_fu_745_p2 = (tmp12_0_0_mid2_reg_1314 + zext_ln42_15_fu_741_p1);

assign add_ln42_15_fu_755_p2 = (zext_ln40_reg_1326 + tmp12_1_0_mid2_reg_1319);

assign add_ln42_16_fu_846_p2 = (tmp12_1_0_mid2_reg_1319 + zext_ln42_13_reg_1343);

assign add_ln42_17_fu_855_p2 = (tmp12_1_0_mid2_reg_1319 + zext_ln42_15_reg_1386);

assign add_ln42_18_fu_929_p2 = (zext_ln40_reg_1326 + tmp12_2_0_mid2_reg_1379);

assign add_ln42_19_fu_938_p2 = (tmp12_2_0_mid2_reg_1379 + zext_ln42_13_reg_1343);

assign add_ln42_20_fu_947_p2 = (tmp12_2_0_mid2_reg_1379 + zext_ln42_15_reg_1386);

assign add_ln42_fu_656_p2 = (zext_ln40_fu_653_p1 + tmp12_0_0_mid2_fu_634_p2);

assign add_ln51_10_fu_999_p2 = (trunc_ln51_8_reg_1463 + trunc_ln51_s_reg_1458);

assign add_ln51_11_fu_1042_p2 = (trunc_ln51_9_reg_1422 + add_ln51_10_reg_1508);

assign add_ln51_12_fu_1046_p2 = (add_ln51_9_fu_1037_p2 + add_ln51_11_fu_1042_p2);

assign add_ln51_13_fu_1052_p2 = (trunc_ln51_2_reg_1498 + trunc_ln51_1_reg_1493);

assign add_ln51_14_fu_1076_p2 = (trunc_ln51_5_reg_1533 + trunc_ln51_4_reg_1518);

assign add_ln51_15_fu_1080_p2 = (trunc_ln51_3_reg_1513 + add_ln51_14_fu_1076_p2);

assign add_ln51_16_fu_1085_p2 = (add_ln51_13_reg_1528 + add_ln51_15_fu_1080_p2);

assign add_ln51_17_fu_1090_p2 = (add_ln51_12_reg_1523 + add_ln51_16_fu_1085_p2);

assign add_ln51_9_fu_1037_p2 = (trunc_ln_reg_1417 + bias_q0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_address0 = zext_ln24_18_fu_965_p1;

assign empty_60_fu_393_p1 = output_height[3:0];

assign empty_62_fu_568_p2 = (select_ln24_14_fu_555_p3 | icmp_ln32_fu_477_p2);

assign empty_fu_389_p1 = output_width[3:0];

assign grp_fu_1155_p0 = zext_ln51_1_cast_reg_1187;

assign grp_fu_1155_p1 = grp_fu_1155_p10;

assign grp_fu_1155_p10 = tmp14_mid2_v_v_reg_1412;

assign grp_fu_1155_p2 = zext_ln40_reg_1326_pp0_iter1_reg;

assign icmp_ln23_fu_466_p2 = ((ap_phi_mux_indvar_flatten48_phi_fu_296_p4 == tmp_s_reg_1202) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_477_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_320_p4 == mul_ln4_reg_1197) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_550_p2 = ((ap_phi_mux_out_w_0_phi_fu_342_p4 == empty_reg_1192) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_419_p2 = ((empty_fu_389_p1 == 4'd0) ? 1'b1 : 1'b0);

assign mul_ln42_18_fu_529_p0 = mul_ln42_18_fu_529_p00;

assign mul_ln42_18_fu_529_p00 = out_d_fu_471_p2;

assign mul_ln42_18_fu_529_p1 = zext_ln42_reg_1168;

assign mul_ln42_18_fu_529_p2 = (mul_ln42_18_fu_529_p0 * mul_ln42_18_fu_529_p1);

assign mul_ln42_fu_451_p0 = mul_ln42_fu_451_p00;

assign mul_ln42_fu_451_p00 = ap_phi_mux_out_d_0_phi_fu_308_p4;

assign mul_ln42_fu_451_p1 = zext_ln42_reg_1168;

assign mul_ln42_fu_451_p2 = (mul_ln42_fu_451_p0 * mul_ln42_fu_451_p1);

assign mul_ln4_fu_405_p0 = mul_ln4_fu_405_p00;

assign mul_ln4_fu_405_p00 = empty_60_fu_393_p1;

assign mul_ln4_fu_405_p1 = mul_ln4_fu_405_p10;

assign mul_ln4_fu_405_p10 = empty_fu_389_p1;

assign mul_ln4_fu_405_p2 = (mul_ln4_fu_405_p0 * mul_ln4_fu_405_p1);

assign mul_ln51_2_fu_792_p0 = zext_ln51_4_reg_1244;

assign mul_ln51_2_fu_792_p1 = zext_ln51_reg_1181;

assign mul_ln51_2_fu_792_p2 = (mul_ln51_2_fu_792_p0 * mul_ln51_2_fu_792_p1);

assign mul_ln51_fu_687_p0 = zext_ln51_2_reg_1212;

assign mul_ln51_fu_687_p1 = zext_ln51_reg_1181;

assign mul_ln51_fu_687_p2 = (mul_ln51_fu_687_p0 * mul_ln51_fu_687_p1);

assign out_d_fu_471_p2 = (4'd1 + ap_phi_mux_out_d_0_phi_fu_308_p4);

assign out_h_fu_562_p2 = (4'd1 + select_ln24_fu_482_p3);

assign out_w_0_mid2_fu_574_p3 = ((empty_62_fu_568_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_w_0_phi_fu_342_p4);

assign out_w_fu_667_p2 = (4'd1 + out_w_0_mid2_reg_1270);

assign output_r_address0 = zext_ln51_3_fu_1095_p1;

assign output_r_d0 = add_ln51_17_reg_1543;

assign select_ln24_10_fu_534_p3 = ((icmp_ln32_fu_477_p2[0:0] === 1'b1) ? mul_ln42_18_fu_529_p2 : mul_ln42_fu_451_p2);

assign select_ln24_11_fu_796_p3 = ((icmp_ln32_reg_1231[0:0] === 1'b1) ? mul_ln51_2_fu_792_p2 : mul_ln51_reg_1354);

assign select_ln24_12_fu_542_p3 = ((icmp_ln32_fu_477_p2[0:0] === 1'b1) ? mul_ln42_18_fu_529_p2 : tmp_0_0_fu_460_p2);

assign select_ln24_13_fu_802_p3 = ((icmp_ln32_reg_1231[0:0] === 1'b1) ? mul_ln51_2_fu_792_p2 : tmp13_reg_1359);

assign select_ln24_14_fu_555_p3 = ((icmp_ln32_fu_477_p2[0:0] === 1'b1) ? icmp_ln33_reg_1207 : icmp_ln33_2_fu_550_p2);

assign select_ln24_8_fu_516_p3 = ((icmp_ln32_fu_477_p2[0:0] === 1'b1) ? add_ln27_2_fu_510_p2 : add_ln27_fu_445_p2);

assign select_ln24_9_fu_892_p3 = ((icmp_ln32_reg_1231[0:0] === 1'b1) ? out_d_reg_1226 : out_d_0_reg_304);

assign select_ln24_fu_482_p3 = ((icmp_ln32_fu_477_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_h_0_phi_fu_331_p4);

assign select_ln32_14_fu_951_p3 = ((icmp_ln32_reg_1231[0:0] === 1'b1) ? 8'd1 : add_ln32_2_reg_1289);

assign select_ln32_fu_898_p3 = ((select_ln24_14_reg_1259[0:0] === 1'b1) ? out_h_reg_1265 : select_ln24_reg_1239);

assign shl_ln27_mid1_fu_502_p3 = {{trunc_ln27_2_fu_498_p1}, {3'd0}};

assign shl_ln_fu_437_p3 = {{trunc_ln27_fu_433_p1}, {3'd0}};

assign tmp12_0_0_mid2_fu_634_p0 = zext_ln42_1_cast14_reg_1174;

assign tmp12_0_0_mid2_fu_634_p1 = tmp12_0_0_mid2_fu_634_p10;

assign tmp12_0_0_mid2_fu_634_p10 = tmp12_0_0_mid2_v_v_reg_1282;

assign tmp12_0_0_mid2_fu_634_p2 = (tmp12_0_0_mid2_fu_634_p0 * tmp12_0_0_mid2_fu_634_p1);

assign tmp12_0_0_mid2_v_v_fu_592_p3 = ((select_ln24_14_fu_555_p3[0:0] === 1'b1) ? tmp_0_0_mid1_fu_586_p2 : select_ln24_12_fu_542_p3);

assign tmp12_1_0_mid2_fu_648_p0 = zext_ln42_1_cast14_reg_1174;

assign tmp12_1_0_mid2_fu_648_p1 = tmp12_1_0_mid2_fu_648_p10;

assign tmp12_1_0_mid2_fu_648_p10 = tmp12_1_0_mid2_v_v_fu_639_p2;

assign tmp12_1_0_mid2_fu_648_p2 = (tmp12_1_0_mid2_fu_648_p0 * tmp12_1_0_mid2_fu_648_p1);

assign tmp12_1_0_mid2_v_v_fu_639_p2 = (7'd1 + tmp12_0_0_mid2_v_v_reg_1282);

assign tmp12_2_0_mid2_fu_731_p0 = zext_ln42_1_cast14_reg_1174;

assign tmp12_2_0_mid2_fu_731_p1 = tmp12_2_0_mid2_fu_731_p10;

assign tmp12_2_0_mid2_fu_731_p10 = tmp12_2_0_mid2_v_v_fu_722_p2;

assign tmp12_2_0_mid2_fu_731_p2 = (tmp12_2_0_mid2_fu_731_p0 * tmp12_2_0_mid2_fu_731_p1);

assign tmp12_2_0_mid2_v_v_fu_722_p2 = (7'd2 + tmp12_0_0_mid2_v_v_reg_1282);

assign tmp13_fu_691_p2 = (zext_ln42_2_cast_reg_1217 + mul_ln51_fu_687_p2);

assign tmp13_mid1_fu_808_p2 = (zext_ln42_2_cast_mid_reg_1277 + select_ln24_11_fu_796_p3);

assign tmp14_mid2_v_v_fu_813_p3 = ((select_ln24_14_reg_1259[0:0] === 1'b1) ? tmp13_mid1_fu_808_p2 : select_ln24_13_fu_802_p3);

assign tmp_0_0_fu_460_p2 = (zext_ln42_2_cast_fu_456_p1 + mul_ln42_fu_451_p2);

assign tmp_0_0_mid1_fu_586_p2 = (zext_ln42_2_cast_mid_fu_582_p1 + select_ln24_10_fu_534_p3);

assign tmp_s_fu_411_p3 = {{mul_ln4_fu_405_p2}, {3'd0}};

assign trunc_ln27_2_fu_498_p1 = out_d_fu_471_p2[2:0];

assign trunc_ln27_fu_433_p1 = ap_phi_mux_out_d_0_phi_fu_308_p4[2:0];

assign zext_ln24_10_fu_615_p1 = add_ln24_fu_609_p2;

assign zext_ln24_11_fu_626_p1 = add_ln24_8_fu_620_p2;

assign zext_ln24_12_fu_707_p1 = add_ln24_9_fu_702_p2;

assign zext_ln24_13_fu_717_p1 = add_ln24_10_fu_712_p2;

assign zext_ln24_14_fu_777_p1 = add_ln24_11_fu_772_p2;

assign zext_ln24_15_fu_787_p1 = add_ln24_12_fu_782_p2;

assign zext_ln24_16_fu_877_p1 = add_ln24_13_fu_872_p2;

assign zext_ln24_17_fu_887_p1 = add_ln24_14_fu_882_p2;

assign zext_ln24_18_fu_965_p1 = select_ln24_9_reg_1447;

assign zext_ln24_19_fu_606_p1 = select_ln24_8_reg_1249;

assign zext_ln24_fu_524_p1 = select_ln24_8_fu_516_p3;

assign zext_ln27_4_fu_494_p1 = out_d_fu_471_p2;

assign zext_ln27_fu_429_p1 = ap_phi_mux_out_d_0_phi_fu_308_p4;

assign zext_ln40_fu_653_p1 = out_w_0_mid2_reg_1270;

assign zext_ln42_12_fu_662_p1 = add_ln42_fu_656_p2;

assign zext_ln42_13_fu_672_p1 = out_w_fu_667_p2;

assign zext_ln42_14_fu_682_p1 = add_ln42_12_fu_676_p2;

assign zext_ln42_15_fu_741_p1 = add_ln42_13_fu_736_p2;

assign zext_ln42_16_fu_750_p1 = add_ln42_14_fu_745_p2;

assign zext_ln42_17_fu_759_p1 = add_ln42_15_fu_755_p2;

assign zext_ln42_18_fu_850_p1 = add_ln42_16_fu_846_p2;

assign zext_ln42_19_fu_859_p1 = add_ln42_17_fu_855_p2;

assign zext_ln42_1_cast14_fu_377_p1 = input_width;

assign zext_ln42_20_fu_933_p1 = add_ln42_18_fu_929_p2;

assign zext_ln42_21_fu_942_p1 = add_ln42_19_fu_938_p2;

assign zext_ln42_22_fu_995_p1 = add_ln42_20_reg_1478;

assign zext_ln42_2_cast_fu_456_p1 = ap_phi_mux_out_h_0_phi_fu_331_p4;

assign zext_ln42_2_cast_mid_fu_582_p1 = out_h_fu_562_p2;

assign zext_ln42_fu_373_p1 = input_height;

assign zext_ln51_1_cast_fu_385_p1 = output_width;

assign zext_ln51_2_fu_425_p1 = ap_phi_mux_out_d_0_phi_fu_308_p4;

assign zext_ln51_3_fu_1095_p1 = add_ln51_reg_1538;

assign zext_ln51_4_fu_490_p1 = out_d_fu_471_p2;

assign zext_ln51_fu_381_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln42_reg_1168[6] <= 1'b0;
    zext_ln42_1_cast14_reg_1174[10:6] <= 5'b00000;
    zext_ln51_reg_1181[6:5] <= 2'b00;
    zext_ln51_1_cast_reg_1187[10:5] <= 6'b000000;
    tmp_s_reg_1202[2:0] <= 3'b000;
    zext_ln51_2_reg_1212[6:4] <= 3'b000;
    zext_ln42_2_cast_reg_1217[6:4] <= 3'b000;
    zext_ln51_4_reg_1244[6:4] <= 3'b000;
    zext_ln42_2_cast_mid_reg_1277[6:4] <= 3'b000;
    zext_ln24_19_reg_1294[6] <= 1'b0;
    zext_ln40_reg_1326[10:4] <= 7'b0000000;
    zext_ln40_reg_1326_pp0_iter1_reg[10:4] <= 7'b0000000;
    zext_ln42_13_reg_1343[10:4] <= 7'b0000000;
    zext_ln42_15_reg_1386[10:4] <= 7'b0000000;
end

endmodule //depthwise_conv2d_fix_1
