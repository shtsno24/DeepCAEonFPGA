// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel1_address0,
        kernel1_ce0,
        kernel1_q0,
        kernel2_address0,
        kernel2_ce0,
        kernel2_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state20 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [2:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [4:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [4:0] kernel1_address0;
output   kernel1_ce0;
input  [15:0] kernel1_q0;
output  [4:0] kernel2_address0;
output   kernel2_ce0;
input  [15:0] kernel2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg kernel_ce0;
reg kernel1_ce0;
reg kernel2_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten39_reg_254;
reg   [3:0] out_d_0_reg_266;
reg   [7:0] indvar_flatten_reg_278;
reg   [3:0] out_h_0_reg_289;
reg   [3:0] out_w_0_reg_300;
reg  signed [15:0] reg_312;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state16_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] icmp_ln21_reg_1024;
reg   [0:0] icmp_ln21_reg_1024_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state17_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_state18_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln21_reg_1024_pp0_iter2_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_state19_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
reg  signed [15:0] reg_317;
wire   [6:0] zext_ln34_fu_322_p1;
reg   [6:0] zext_ln34_reg_969;
wire   [10:0] zext_ln34_2_cast14_fu_326_p1;
reg   [10:0] zext_ln34_2_cast14_reg_975;
wire   [6:0] zext_ln40_fu_330_p1;
reg   [6:0] zext_ln40_reg_982;
wire   [10:0] zext_ln40_1_cast_fu_334_p1;
reg   [10:0] zext_ln40_1_cast_reg_988;
wire   [3:0] empty_fu_338_p1;
reg   [3:0] empty_reg_993;
wire   [7:0] mul_ln5_fu_354_p2;
reg   [7:0] mul_ln5_reg_998;
wire   [10:0] tmp_6_fu_360_p3;
reg   [10:0] tmp_6_reg_1003;
wire   [0:0] icmp_ln23_fu_368_p2;
reg   [0:0] icmp_ln23_reg_1008;
wire   [6:0] zext_ln40_2_fu_374_p1;
reg   [6:0] zext_ln40_2_reg_1013;
wire   [6:0] mul_ln34_fu_378_p2;
reg   [6:0] mul_ln34_reg_1018;
wire   [0:0] icmp_ln21_fu_383_p2;
reg   [0:0] icmp_ln21_reg_1024_pp0_iter3_reg;
wire   [3:0] out_d_fu_388_p2;
reg   [3:0] out_d_reg_1028;
wire   [0:0] icmp_ln22_fu_394_p2;
reg   [0:0] icmp_ln22_reg_1034;
wire   [7:0] add_ln22_2_fu_399_p2;
reg   [7:0] add_ln22_2_reg_1047;
wire   [6:0] zext_ln34_4_cast_fu_405_p1;
reg   [6:0] zext_ln34_4_cast_reg_1052;
wire   [3:0] select_ln28_fu_409_p3;
reg   [3:0] select_ln28_reg_1058;
wire   [3:0] select_ln28_9_fu_416_p3;
reg   [3:0] select_ln28_9_reg_1064;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] select_ln28_9_reg_1064_pp0_iter1_reg;
reg   [3:0] select_ln28_9_reg_1064_pp0_iter2_reg;
wire   [6:0] zext_ln40_4_fu_422_p1;
reg   [6:0] zext_ln40_4_reg_1070;
wire   [6:0] mul_ln34_18_fu_425_p2;
reg   [6:0] mul_ln34_18_reg_1075;
wire   [1:0] trunc_ln28_fu_430_p1;
reg   [1:0] trunc_ln28_reg_1081;
reg   [1:0] trunc_ln28_reg_1081_pp0_iter1_reg;
wire   [0:0] icmp_ln23_2_fu_434_p2;
reg   [0:0] icmp_ln23_2_reg_1089;
wire   [6:0] mul_ln40_fu_439_p2;
reg   [6:0] mul_ln40_reg_1094;
wire   [0:0] select_ln28_14_fu_443_p3;
reg   [0:0] select_ln28_14_reg_1100;
wire   [3:0] out_h_fu_448_p2;
reg   [3:0] out_h_reg_1108;
wire   [6:0] tmp_0_0_fu_453_p2;
reg   [6:0] tmp_0_0_reg_1114;
wire   [6:0] tmp6_fu_457_p2;
reg   [6:0] tmp6_reg_1119;
wire   [10:0] add_ln21_fu_461_p2;
reg   [10:0] add_ln21_reg_1124;
wire   [6:0] mul_ln40_2_fu_472_p2;
reg   [6:0] mul_ln40_2_reg_1129;
wire   [3:0] out_w_0_mid2_fu_480_p3;
reg   [3:0] out_w_0_mid2_reg_1135;
wire   [6:0] zext_ln34_4_cast_mid_fu_488_p1;
reg   [6:0] zext_ln34_4_cast_mid_reg_1142;
wire   [6:0] tmp_0_0_mid1_fu_491_p2;
reg   [6:0] tmp_0_0_mid1_reg_1147;
wire   [3:0] select_ln22_fu_497_p3;
reg   [3:0] select_ln22_reg_1152;
wire   [6:0] tmp5_0_0_mid2_v_v_fu_512_p3;
reg   [6:0] tmp5_0_0_mid2_v_v_reg_1157;
wire   [6:0] tmp6_mid1_fu_518_p2;
reg   [6:0] tmp6_mid1_reg_1164;
wire   [7:0] select_ln22_2_fu_523_p3;
reg   [7:0] select_ln22_2_reg_1169;
wire   [10:0] tmp5_0_0_mid2_fu_537_p2;
reg   [10:0] tmp5_0_0_mid2_reg_1174;
wire   [6:0] tmp5_2_0_mid2_v_v_fu_542_p2;
reg   [6:0] tmp5_2_0_mid2_v_v_reg_1181;
wire   [6:0] tmp7_mid2_v_v_fu_547_p3;
reg   [6:0] tmp7_mid2_v_v_reg_1186;
wire   [3:0] out_w_fu_553_p2;
reg   [3:0] out_w_reg_1191;
wire   [1:0] add_ln28_fu_558_p2;
reg   [1:0] add_ln28_reg_1197;
wire   [1:0] xor_ln28_fu_563_p2;
reg   [1:0] xor_ln28_reg_1202;
wire   [1:0] add_ln28_6_fu_568_p2;
reg   [1:0] add_ln28_6_reg_1207;
wire   [6:0] tmp5_1_0_mid2_v_v_fu_573_p2;
reg   [6:0] tmp5_1_0_mid2_v_v_reg_1212;
wire   [10:0] tmp5_2_0_mid2_fu_581_p2;
reg   [10:0] tmp5_2_0_mid2_reg_1217;
wire   [10:0] zext_ln34_21_fu_586_p1;
reg   [10:0] zext_ln34_21_reg_1224;
wire   [10:0] add_ln34_fu_589_p2;
reg   [10:0] add_ln34_reg_1231;
reg   [15:0] kernel_load_reg_1236;
reg   [15:0] kernel1_load_reg_1244;
reg   [15:0] kernel2_load_reg_1252;
wire   [10:0] zext_ln34_23_fu_594_p1;
reg   [10:0] zext_ln34_23_reg_1260;
wire   [10:0] add_ln34_14_fu_597_p2;
reg   [10:0] add_ln34_14_reg_1266;
wire   [10:0] tmp5_1_0_mid2_fu_605_p2;
reg   [10:0] tmp5_1_0_mid2_reg_1271;
wire   [3:0] add_ln34_15_fu_634_p2;
reg   [3:0] add_ln34_15_reg_1288;
wire   [10:0] add_ln34_20_fu_655_p2;
reg   [10:0] add_ln34_20_reg_1293;
wire   [10:0] add_ln34_21_fu_659_p2;
reg   [10:0] add_ln34_21_reg_1298;
wire   [10:0] zext_ln34_25_fu_663_p1;
reg   [10:0] zext_ln34_25_reg_1303;
wire   [10:0] add_ln34_16_fu_666_p2;
reg   [10:0] add_ln34_16_reg_1308;
wire   [10:0] add_ln34_22_fu_679_p2;
reg   [10:0] add_ln34_22_reg_1323;
wire   [15:0] grp_fu_614_p5;
reg  signed [15:0] tmp_9_reg_1328;
wire   [15:0] grp_fu_626_p5;
reg  signed [15:0] tmp_s_reg_1333;
wire   [15:0] grp_fu_639_p5;
reg  signed [15:0] tmp_4_reg_1343;
wire   [10:0] add_ln34_17_fu_691_p2;
reg   [10:0] add_ln34_17_reg_1348;
wire   [15:0] grp_fu_647_p5;
reg  signed [15:0] tmp_5_reg_1353;
wire   [10:0] add_ln34_18_fu_695_p2;
reg   [10:0] add_ln34_18_reg_1358;
wire   [10:0] add_ln34_19_fu_699_p2;
reg   [10:0] add_ln34_19_reg_1363;
wire   [10:0] grp_fu_899_p3;
reg   [10:0] add_ln40_reg_1373;
reg   [10:0] add_ln40_reg_1373_pp0_iter2_reg;
wire  signed [29:0] sext_ln34_14_fu_711_p1;
reg  signed [29:0] sext_ln34_14_reg_1378;
wire  signed [29:0] mul_ln34_9_fu_905_p2;
reg  signed [29:0] mul_ln34_9_reg_1384;
wire  signed [29:0] sext_ln34_16_fu_718_p1;
reg  signed [29:0] sext_ln34_16_reg_1389;
wire  signed [29:0] mul_ln34_10_fu_911_p2;
reg  signed [29:0] mul_ln34_10_reg_1394;
reg   [15:0] trunc_ln_reg_1409;
reg   [15:0] trunc_ln40_9_reg_1414;
wire  signed [29:0] sext_ln34_18_fu_747_p1;
reg  signed [29:0] sext_ln34_18_reg_1419;
wire  signed [29:0] sext_ln34_20_fu_750_p1;
reg  signed [29:0] sext_ln34_20_reg_1424;
wire  signed [29:0] mul_ln34_15_fu_917_p2;
reg  signed [29:0] mul_ln34_15_reg_1434;
wire  signed [29:0] mul_ln34_16_fu_923_p2;
reg  signed [29:0] mul_ln34_16_reg_1439;
wire  signed [29:0] mul_ln34_11_fu_929_p2;
reg  signed [29:0] mul_ln34_11_reg_1449;
reg   [15:0] trunc_ln40_3_reg_1454;
reg   [15:0] trunc_ln40_4_reg_1459;
wire  signed [29:0] mul_ln34_17_fu_934_p2;
reg  signed [29:0] mul_ln34_17_reg_1464;
reg   [15:0] bias_load_reg_1469;
reg   [15:0] trunc_ln40_s_reg_1474;
wire  signed [29:0] mul_ln34_12_fu_939_p2;
reg  signed [29:0] mul_ln34_12_reg_1479;
wire  signed [29:0] mul_ln34_13_fu_944_p2;
reg  signed [29:0] mul_ln34_13_reg_1484;
wire   [15:0] add_ln40_15_fu_826_p2;
reg   [15:0] add_ln40_15_reg_1489;
reg   [15:0] trunc_ln40_1_reg_1494;
wire  signed [29:0] mul_ln34_14_fu_949_p2;
reg  signed [29:0] mul_ln34_14_reg_1499;
wire   [15:0] add_ln40_9_fu_853_p2;
reg   [15:0] add_ln40_9_reg_1504;
wire   [15:0] add_ln40_11_fu_862_p2;
reg   [15:0] add_ln40_11_reg_1509;
wire   [15:0] add_ln40_16_fu_881_p2;
reg   [15:0] add_ln40_16_reg_1514;
wire   [15:0] add_ln40_17_fu_890_p2;
reg   [15:0] add_ln40_17_reg_1519;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [10:0] ap_phi_mux_indvar_flatten39_phi_fu_258_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_out_d_0_phi_fu_270_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_282_p4;
reg   [3:0] ap_phi_mux_out_h_0_phi_fu_293_p4;
wire    ap_block_pp0_stage1;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_304_p4;
wire   [63:0] zext_ln34_22_fu_610_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln34_24_fu_622_p1;
wire   [63:0] zext_ln34_30_fu_671_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln34_31_fu_675_p1;
wire   [63:0] zext_ln34_26_fu_687_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln34_32_fu_703_p1;
wire   [63:0] zext_ln34_27_fu_721_p1;
wire   [63:0] zext_ln34_28_fu_725_p1;
wire   [63:0] zext_ln34_29_fu_753_p1;
wire   [63:0] zext_ln28_fu_765_p1;
wire   [63:0] zext_ln40_3_fu_895_p1;
wire   [3:0] empty_50_fu_342_p1;
wire   [3:0] mul_ln5_fu_354_p0;
wire   [3:0] mul_ln5_fu_354_p1;
wire   [3:0] mul_ln34_fu_378_p0;
wire   [5:0] mul_ln34_fu_378_p1;
wire   [5:0] mul_ln34_18_fu_425_p0;
wire   [3:0] mul_ln34_18_fu_425_p1;
wire   [3:0] mul_ln40_fu_439_p0;
wire   [4:0] mul_ln40_fu_439_p1;
wire   [4:0] mul_ln40_2_fu_472_p0;
wire   [3:0] mul_ln40_2_fu_472_p1;
wire   [0:0] empty_52_fu_476_p2;
wire   [6:0] select_ln28_10_fu_467_p3;
wire   [6:0] select_ln28_12_fu_507_p3;
wire   [6:0] select_ln28_11_fu_502_p3;
wire   [5:0] tmp5_0_0_mid2_fu_537_p0;
wire   [6:0] tmp5_0_0_mid2_fu_537_p1;
wire   [6:0] select_ln28_13_fu_529_p3;
wire   [5:0] tmp5_2_0_mid2_fu_581_p0;
wire   [6:0] tmp5_2_0_mid2_fu_581_p1;
wire   [5:0] tmp5_1_0_mid2_fu_605_p0;
wire   [6:0] tmp5_1_0_mid2_fu_605_p1;
wire   [15:0] trunc_ln40_5_fu_812_p4;
wire   [15:0] add_ln40_14_fu_821_p2;
wire   [15:0] trunc_ln40_8_fu_831_p4;
wire   [15:0] add_ln40_10_fu_857_p2;
wire   [15:0] trunc_ln40_2_fu_867_p4;
wire   [15:0] add_ln40_13_fu_876_p2;
wire   [15:0] add_ln40_12_fu_886_p2;
wire   [4:0] grp_fu_899_p0;
wire   [6:0] grp_fu_899_p1;
wire   [3:0] grp_fu_899_p2;
wire  signed [15:0] mul_ln34_11_fu_929_p1;
wire  signed [15:0] mul_ln34_17_fu_934_p1;
wire  signed [15:0] mul_ln34_12_fu_939_p1;
wire  signed [15:0] mul_ln34_13_fu_944_p1;
wire  signed [15:0] mul_ln34_14_fu_949_p1;
wire    ap_CS_fsm_state20;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_899_p10;
wire   [6:0] mul_ln34_18_fu_425_p10;
wire   [6:0] mul_ln34_fu_378_p00;
wire   [7:0] mul_ln5_fu_354_p00;
wire   [7:0] mul_ln5_fu_354_p10;
wire   [10:0] tmp5_0_0_mid2_fu_537_p10;
wire   [10:0] tmp5_1_0_mid2_fu_605_p10;
wire   [10:0] tmp5_2_0_mid2_fu_581_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

network_mux_32_16_3_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_3_1_x_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_load_reg_1236),
    .din1(kernel1_load_reg_1244),
    .din2(kernel2_load_reg_1252),
    .din3(trunc_ln28_reg_1081_pp0_iter1_reg),
    .ce(1'b1),
    .dout(grp_fu_614_p5)
);

network_mux_32_16_3_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_3_1_x_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_load_reg_1236),
    .din1(kernel1_load_reg_1244),
    .din2(kernel2_load_reg_1252),
    .din3(add_ln28_reg_1197),
    .ce(1'b1),
    .dout(grp_fu_626_p5)
);

network_mux_32_16_3_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_3_1_x_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_load_reg_1236),
    .din1(kernel1_load_reg_1244),
    .din2(kernel2_load_reg_1252),
    .din3(xor_ln28_reg_1202),
    .ce(1'b1),
    .dout(grp_fu_639_p5)
);

network_mux_32_16_3_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_3_1_x_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_load_reg_1236),
    .din1(kernel1_load_reg_1244),
    .din2(kernel2_load_reg_1252),
    .din3(add_ln28_6_reg_1207),
    .ce(1'b1),
    .dout(grp_fu_647_p5)
);

network_mac_muladd_5ns_7ns_4ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
network_mac_muladd_5ns_7ns_4ns_11_1_1_U81(
    .din0(grp_fu_899_p0),
    .din1(grp_fu_899_p1),
    .din2(grp_fu_899_p2),
    .dout(grp_fu_899_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U82(
    .din0(reg_312),
    .din1(tmp_9_reg_1328),
    .dout(mul_ln34_9_fu_905_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U83(
    .din0(reg_317),
    .din1(tmp_s_reg_1333),
    .dout(mul_ln34_10_fu_911_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U84(
    .din0(reg_312),
    .din1(tmp_4_reg_1343),
    .dout(mul_ln34_15_fu_917_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U85(
    .din0(reg_317),
    .din1(tmp_5_reg_1353),
    .dout(mul_ln34_16_fu_923_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U86(
    .din0(reg_312),
    .din1(mul_ln34_11_fu_929_p1),
    .dout(mul_ln34_11_fu_929_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U87(
    .din0(reg_317),
    .din1(mul_ln34_17_fu_934_p1),
    .dout(mul_ln34_17_fu_934_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U88(
    .din0(reg_312),
    .din1(mul_ln34_12_fu_939_p1),
    .dout(mul_ln34_12_fu_939_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U89(
    .din0(reg_317),
    .din1(mul_ln34_13_fu_944_p1),
    .dout(mul_ln34_13_fu_944_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U90(
    .din0(reg_312),
    .din1(mul_ln34_14_fu_949_p1),
    .dout(mul_ln34_14_fu_949_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten39_reg_254 <= add_ln21_reg_1124;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten39_reg_254 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_278 <= select_ln22_2_reg_1169;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_278 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_266 <= select_ln28_9_reg_1064;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_266 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_h_0_reg_289 <= select_ln22_reg_1152;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_289 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_w_0_reg_300 <= out_w_reg_1191;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_300 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0)))) begin
        reg_312 <= input_r_q0;
    end else if ((((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0)) | ((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_312 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0))) begin
        reg_317 <= input_r_q1;
    end else if ((((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0)) | ((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_317 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln21_reg_1124 <= add_ln21_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_fu_383_p2 == 1'd0))) begin
        add_ln22_2_reg_1047 <= add_ln22_2_fu_399_p2;
        icmp_ln22_reg_1034 <= icmp_ln22_fu_394_p2;
        out_d_reg_1028 <= out_d_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln28_6_reg_1207 <= add_ln28_6_fu_568_p2;
        add_ln28_reg_1197 <= add_ln28_fu_558_p2;
        add_ln34_14_reg_1266 <= add_ln34_14_fu_597_p2;
        add_ln34_reg_1231 <= add_ln34_fu_589_p2;
        kernel1_load_reg_1244 <= kernel1_q0;
        kernel2_load_reg_1252 <= kernel2_q0;
        kernel_load_reg_1236 <= kernel_q0;
        tmp5_1_0_mid2_v_v_reg_1212 <= tmp5_1_0_mid2_v_v_fu_573_p2;
        tmp5_2_0_mid2_reg_1217 <= tmp5_2_0_mid2_fu_581_p2;
        xor_ln28_reg_1202 <= xor_ln28_fu_563_p2;
        zext_ln34_21_reg_1224[3 : 0] <= zext_ln34_21_fu_586_p1[3 : 0];
        zext_ln34_23_reg_1260[3 : 0] <= zext_ln34_23_fu_594_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln34_15_reg_1288 <= add_ln34_15_fu_634_p2;
        add_ln34_20_reg_1293 <= add_ln34_20_fu_655_p2;
        add_ln34_21_reg_1298 <= add_ln34_21_fu_659_p2;
        tmp5_1_0_mid2_reg_1271 <= tmp5_1_0_mid2_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln34_16_reg_1308 <= add_ln34_16_fu_666_p2;
        add_ln34_22_reg_1323 <= add_ln34_22_fu_679_p2;
        zext_ln34_25_reg_1303[3 : 0] <= zext_ln34_25_fu_663_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln34_17_reg_1348 <= add_ln34_17_fu_691_p2;
        add_ln34_18_reg_1358 <= add_ln34_18_fu_695_p2;
        add_ln34_19_reg_1363 <= add_ln34_19_fu_699_p2;
        tmp_4_reg_1343 <= grp_fu_639_p5;
        tmp_5_reg_1353 <= grp_fu_647_p5;
        tmp_9_reg_1328 <= grp_fu_614_p5;
        tmp_s_reg_1333 <= grp_fu_626_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0))) begin
        add_ln40_11_reg_1509 <= add_ln40_11_fu_862_p2;
        add_ln40_9_reg_1504 <= add_ln40_9_fu_853_p2;
        mul_ln34_14_reg_1499 <= mul_ln34_14_fu_949_p2;
        trunc_ln40_1_reg_1494 <= {{mul_ln34_13_reg_1484[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0))) begin
        add_ln40_15_reg_1489 <= add_ln40_15_fu_826_p2;
        bias_load_reg_1469 <= bias_q0;
        mul_ln34_12_reg_1479 <= mul_ln34_12_fu_939_p2;
        mul_ln34_13_reg_1484 <= mul_ln34_13_fu_944_p2;
        trunc_ln40_s_reg_1474 <= {{mul_ln34_11_reg_1449[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0))) begin
        add_ln40_16_reg_1514 <= add_ln40_16_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln21_reg_1024_pp0_iter3_reg == 1'd0))) begin
        add_ln40_17_reg_1519 <= add_ln40_17_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln40_reg_1373 <= grp_fu_899_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln40_reg_1373_pp0_iter2_reg <= add_ln40_reg_1373;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_993 <= empty_fu_338_p1;
        icmp_ln23_reg_1008 <= icmp_ln23_fu_368_p2;
        mul_ln5_reg_998 <= mul_ln5_fu_354_p2;
        tmp_6_reg_1003[10 : 3] <= tmp_6_fu_360_p3[10 : 3];
        zext_ln34_2_cast14_reg_975[5 : 0] <= zext_ln34_2_cast14_fu_326_p1[5 : 0];
        zext_ln34_reg_969[5 : 0] <= zext_ln34_fu_322_p1[5 : 0];
        zext_ln40_1_cast_reg_988[4 : 0] <= zext_ln40_1_cast_fu_334_p1[4 : 0];
        zext_ln40_reg_982[4 : 0] <= zext_ln40_fu_330_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln21_reg_1024 <= icmp_ln21_fu_383_p2;
        icmp_ln21_reg_1024_pp0_iter1_reg <= icmp_ln21_reg_1024;
        icmp_ln21_reg_1024_pp0_iter2_reg <= icmp_ln21_reg_1024_pp0_iter1_reg;
        icmp_ln21_reg_1024_pp0_iter3_reg <= icmp_ln21_reg_1024_pp0_iter2_reg;
        mul_ln34_reg_1018 <= mul_ln34_fu_378_p2;
        zext_ln40_2_reg_1013[3 : 0] <= zext_ln40_2_fu_374_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln22_reg_1034 == 1'd0))) begin
        icmp_ln23_2_reg_1089 <= icmp_ln23_2_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln34_10_reg_1394 <= mul_ln34_10_fu_911_p2;
        mul_ln34_9_reg_1384 <= mul_ln34_9_fu_905_p2;
        sext_ln34_14_reg_1378 <= sext_ln34_14_fu_711_p1;
        sext_ln34_16_reg_1389 <= sext_ln34_16_fu_718_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0))) begin
        mul_ln34_11_reg_1449 <= mul_ln34_11_fu_929_p2;
        mul_ln34_17_reg_1464 <= mul_ln34_17_fu_934_p2;
        trunc_ln40_3_reg_1454 <= {{mul_ln34_15_reg_1434[29:14]}};
        trunc_ln40_4_reg_1459 <= {{mul_ln34_16_reg_1439[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln21_reg_1024_pp0_iter2_reg == 1'd0))) begin
        mul_ln34_15_reg_1434 <= mul_ln34_15_fu_917_p2;
        mul_ln34_16_reg_1439 <= mul_ln34_16_fu_923_p2;
        sext_ln34_18_reg_1419 <= sext_ln34_18_fu_747_p1;
        sext_ln34_20_reg_1424 <= sext_ln34_20_fu_750_p1;
        trunc_ln40_9_reg_1414 <= {{mul_ln34_10_reg_1394[29:14]}};
        trunc_ln_reg_1409 <= {{mul_ln34_9_reg_1384[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_ln34_18_reg_1075 <= mul_ln34_18_fu_425_p2;
        select_ln28_reg_1058 <= select_ln28_fu_409_p3;
        trunc_ln28_reg_1081 <= trunc_ln28_fu_430_p1;
        zext_ln40_4_reg_1070[3 : 0] <= zext_ln40_4_fu_422_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_ln40_2_reg_1129 <= mul_ln40_2_fu_472_p2;
        out_w_0_mid2_reg_1135 <= out_w_0_mid2_fu_480_p3;
        zext_ln34_4_cast_mid_reg_1142[3 : 0] <= zext_ln34_4_cast_mid_fu_488_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        mul_ln40_reg_1094 <= mul_ln40_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        out_h_reg_1108 <= out_h_fu_448_p2;
        select_ln28_14_reg_1100 <= select_ln28_14_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_reg_1191 <= out_w_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln22_2_reg_1169 <= select_ln22_2_fu_523_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        select_ln22_reg_1152 <= select_ln22_fu_497_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_9_reg_1064 <= select_ln28_9_fu_416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_9_reg_1064_pp0_iter1_reg <= select_ln28_9_reg_1064;
        select_ln28_9_reg_1064_pp0_iter2_reg <= select_ln28_9_reg_1064_pp0_iter1_reg;
        trunc_ln28_reg_1081_pp0_iter1_reg <= trunc_ln28_reg_1081;
        zext_ln34_4_cast_reg_1052[3 : 0] <= zext_ln34_4_cast_fu_405_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp5_0_0_mid2_reg_1174 <= tmp5_0_0_mid2_fu_537_p2;
        tmp5_2_0_mid2_v_v_reg_1181 <= tmp5_2_0_mid2_v_v_fu_542_p2;
        tmp7_mid2_v_v_reg_1186 <= tmp7_mid2_v_v_fu_547_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp5_0_0_mid2_v_v_reg_1157 <= tmp5_0_0_mid2_v_v_fu_512_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (select_ln28_14_reg_1100 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp6_mid1_reg_1164 <= tmp6_mid1_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (select_ln28_14_reg_1100 == 1'd0) & (icmp_ln22_reg_1034 == 1'd0))) begin
        tmp6_reg_1119 <= tmp6_fu_457_p2;
        tmp_0_0_reg_1114 <= tmp_0_0_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (select_ln28_14_reg_1100 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_0_0_mid1_reg_1147 <= tmp_0_0_mid1_fu_491_p2;
    end
end

always @ (*) begin
    if ((icmp_ln21_reg_1024 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten39_phi_fu_258_p4 = add_ln21_reg_1124;
    end else begin
        ap_phi_mux_indvar_flatten39_phi_fu_258_p4 = indvar_flatten39_reg_254;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_282_p4 = select_ln22_2_reg_1169;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_282_p4 = indvar_flatten_reg_278;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1024 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_270_p4 = select_ln28_9_reg_1064;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_270_p4 = out_d_0_reg_266;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_h_0_phi_fu_293_p4 = select_ln22_reg_1152;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_293_p4 = out_h_0_reg_289;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_1024_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_w_0_phi_fu_304_p4 = out_w_reg_1191;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_304_p4 = out_w_0_reg_300;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_r_address0 = zext_ln34_29_fu_753_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln34_27_fu_721_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address0 = zext_ln34_32_fu_703_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln34_31_fu_675_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln34_24_fu_622_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln34_28_fu_725_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address1 = zext_ln34_26_fu_687_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address1 = zext_ln34_30_fu_671_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address1 = zext_ln34_22_fu_610_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel1_ce0 = 1'b1;
    end else begin
        kernel1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel2_ce0 = 1'b1;
    end else begin
        kernel2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_1024_pp0_iter3_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((icmp_ln21_reg_1024 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((icmp_ln21_reg_1024 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_461_p2 = (indvar_flatten39_reg_254 + 11'd1);

assign add_ln22_2_fu_399_p2 = (8'd1 + ap_phi_mux_indvar_flatten_phi_fu_282_p4);

assign add_ln28_6_fu_568_p2 = ($signed(2'd3) + $signed(trunc_ln28_reg_1081));

assign add_ln28_fu_558_p2 = (2'd1 + trunc_ln28_reg_1081);

assign add_ln34_14_fu_597_p2 = (tmp5_0_0_mid2_reg_1174 + zext_ln34_23_fu_594_p1);

assign add_ln34_15_fu_634_p2 = (4'd2 + out_w_0_mid2_reg_1135);

assign add_ln34_16_fu_666_p2 = (tmp5_0_0_mid2_reg_1174 + zext_ln34_25_fu_663_p1);

assign add_ln34_17_fu_691_p2 = (tmp5_1_0_mid2_reg_1271 + zext_ln34_21_reg_1224);

assign add_ln34_18_fu_695_p2 = (tmp5_1_0_mid2_reg_1271 + zext_ln34_23_reg_1260);

assign add_ln34_19_fu_699_p2 = (tmp5_1_0_mid2_reg_1271 + zext_ln34_25_reg_1303);

assign add_ln34_20_fu_655_p2 = (tmp5_2_0_mid2_reg_1217 + zext_ln34_21_reg_1224);

assign add_ln34_21_fu_659_p2 = (tmp5_2_0_mid2_reg_1217 + zext_ln34_23_reg_1260);

assign add_ln34_22_fu_679_p2 = (tmp5_2_0_mid2_reg_1217 + zext_ln34_25_fu_663_p1);

assign add_ln34_fu_589_p2 = (tmp5_0_0_mid2_reg_1174 + zext_ln34_21_fu_586_p1);

assign add_ln40_10_fu_857_p2 = (trunc_ln40_s_reg_1474 + trunc_ln40_8_fu_831_p4);

assign add_ln40_11_fu_862_p2 = (add_ln40_10_fu_857_p2 + trunc_ln40_9_reg_1414);

assign add_ln40_12_fu_886_p2 = (add_ln40_11_reg_1509 + add_ln40_9_reg_1504);

assign add_ln40_13_fu_876_p2 = (trunc_ln40_1_reg_1494 + trunc_ln40_2_fu_867_p4);

assign add_ln40_14_fu_821_p2 = (trunc_ln40_4_reg_1459 + trunc_ln40_5_fu_812_p4);

assign add_ln40_15_fu_826_p2 = (add_ln40_14_fu_821_p2 + trunc_ln40_3_reg_1454);

assign add_ln40_16_fu_881_p2 = (add_ln40_15_reg_1489 + add_ln40_13_fu_876_p2);

assign add_ln40_17_fu_890_p2 = (add_ln40_16_reg_1514 + add_ln40_12_fu_886_p2);

assign add_ln40_9_fu_853_p2 = (bias_load_reg_1469 + trunc_ln_reg_1409);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_address0 = zext_ln28_fu_765_p1;

assign empty_50_fu_342_p1 = output_height[3:0];

assign empty_52_fu_476_p2 = (select_ln28_14_reg_1100 | icmp_ln22_reg_1034);

assign empty_fu_338_p1 = output_width[3:0];

assign grp_fu_899_p0 = zext_ln40_1_cast_reg_988;

assign grp_fu_899_p1 = grp_fu_899_p10;

assign grp_fu_899_p10 = tmp7_mid2_v_v_reg_1186;

assign grp_fu_899_p2 = zext_ln34_21_reg_1224;

assign icmp_ln21_fu_383_p2 = ((ap_phi_mux_indvar_flatten39_phi_fu_258_p4 == tmp_6_reg_1003) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_394_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_282_p4 == mul_ln5_reg_998) ? 1'b1 : 1'b0);

assign icmp_ln23_2_fu_434_p2 = ((ap_phi_mux_out_w_0_phi_fu_304_p4 == empty_reg_993) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_368_p2 = ((empty_fu_338_p1 == 4'd0) ? 1'b1 : 1'b0);

assign kernel1_address0 = 64'd0;

assign kernel2_address0 = 64'd0;

assign kernel_address0 = 64'd0;

assign mul_ln34_11_fu_929_p1 = sext_ln34_18_reg_1419;

assign mul_ln34_12_fu_939_p1 = sext_ln34_20_reg_1424;

assign mul_ln34_13_fu_944_p1 = sext_ln34_14_reg_1378;

assign mul_ln34_14_fu_949_p1 = sext_ln34_16_reg_1389;

assign mul_ln34_17_fu_934_p1 = sext_ln34_14_reg_1378;

assign mul_ln34_18_fu_425_p0 = zext_ln34_reg_969;

assign mul_ln34_18_fu_425_p1 = mul_ln34_18_fu_425_p10;

assign mul_ln34_18_fu_425_p10 = out_d_reg_1028;

assign mul_ln34_18_fu_425_p2 = (mul_ln34_18_fu_425_p0 * mul_ln34_18_fu_425_p1);

assign mul_ln34_fu_378_p0 = mul_ln34_fu_378_p00;

assign mul_ln34_fu_378_p00 = ap_phi_mux_out_d_0_phi_fu_270_p4;

assign mul_ln34_fu_378_p1 = zext_ln34_reg_969;

assign mul_ln34_fu_378_p2 = (mul_ln34_fu_378_p0 * mul_ln34_fu_378_p1);

assign mul_ln40_2_fu_472_p0 = zext_ln40_reg_982;

assign mul_ln40_2_fu_472_p1 = zext_ln40_4_reg_1070;

assign mul_ln40_2_fu_472_p2 = (mul_ln40_2_fu_472_p0 * mul_ln40_2_fu_472_p1);

assign mul_ln40_fu_439_p0 = zext_ln40_2_reg_1013;

assign mul_ln40_fu_439_p1 = zext_ln40_reg_982;

assign mul_ln40_fu_439_p2 = (mul_ln40_fu_439_p0 * mul_ln40_fu_439_p1);

assign mul_ln5_fu_354_p0 = mul_ln5_fu_354_p00;

assign mul_ln5_fu_354_p00 = empty_50_fu_342_p1;

assign mul_ln5_fu_354_p1 = mul_ln5_fu_354_p10;

assign mul_ln5_fu_354_p10 = empty_fu_338_p1;

assign mul_ln5_fu_354_p2 = (mul_ln5_fu_354_p0 * mul_ln5_fu_354_p1);

assign out_d_fu_388_p2 = (4'd1 + ap_phi_mux_out_d_0_phi_fu_270_p4);

assign out_h_fu_448_p2 = (4'd1 + select_ln28_reg_1058);

assign out_w_0_mid2_fu_480_p3 = ((empty_52_fu_476_p2[0:0] === 1'b1) ? 4'd0 : out_w_0_reg_300);

assign out_w_fu_553_p2 = (4'd1 + out_w_0_mid2_reg_1135);

assign output_r_address0 = zext_ln40_3_fu_895_p1;

assign output_r_d0 = add_ln40_17_reg_1519;

assign select_ln22_2_fu_523_p3 = ((icmp_ln22_reg_1034[0:0] === 1'b1) ? 8'd1 : add_ln22_2_reg_1047);

assign select_ln22_fu_497_p3 = ((select_ln28_14_reg_1100[0:0] === 1'b1) ? out_h_reg_1108 : select_ln28_reg_1058);

assign select_ln28_10_fu_467_p3 = ((icmp_ln22_reg_1034[0:0] === 1'b1) ? mul_ln34_18_reg_1075 : mul_ln34_reg_1018);

assign select_ln28_11_fu_502_p3 = ((icmp_ln22_reg_1034[0:0] === 1'b1) ? mul_ln40_2_reg_1129 : mul_ln40_reg_1094);

assign select_ln28_12_fu_507_p3 = ((icmp_ln22_reg_1034[0:0] === 1'b1) ? mul_ln34_18_reg_1075 : tmp_0_0_reg_1114);

assign select_ln28_13_fu_529_p3 = ((icmp_ln22_reg_1034[0:0] === 1'b1) ? mul_ln40_2_reg_1129 : tmp6_reg_1119);

assign select_ln28_14_fu_443_p3 = ((icmp_ln22_reg_1034[0:0] === 1'b1) ? icmp_ln23_reg_1008 : icmp_ln23_2_reg_1089);

assign select_ln28_9_fu_416_p3 = ((icmp_ln22_reg_1034[0:0] === 1'b1) ? out_d_reg_1028 : out_d_0_reg_266);

assign select_ln28_fu_409_p3 = ((icmp_ln22_reg_1034[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_h_0_phi_fu_293_p4);

assign sext_ln34_14_fu_711_p1 = tmp_9_reg_1328;

assign sext_ln34_16_fu_718_p1 = tmp_s_reg_1333;

assign sext_ln34_18_fu_747_p1 = tmp_4_reg_1343;

assign sext_ln34_20_fu_750_p1 = tmp_5_reg_1353;

assign tmp5_0_0_mid2_fu_537_p0 = zext_ln34_2_cast14_reg_975;

assign tmp5_0_0_mid2_fu_537_p1 = tmp5_0_0_mid2_fu_537_p10;

assign tmp5_0_0_mid2_fu_537_p10 = tmp5_0_0_mid2_v_v_reg_1157;

assign tmp5_0_0_mid2_fu_537_p2 = (tmp5_0_0_mid2_fu_537_p0 * tmp5_0_0_mid2_fu_537_p1);

assign tmp5_0_0_mid2_v_v_fu_512_p3 = ((select_ln28_14_reg_1100[0:0] === 1'b1) ? tmp_0_0_mid1_reg_1147 : select_ln28_12_fu_507_p3);

assign tmp5_1_0_mid2_fu_605_p0 = zext_ln34_2_cast14_reg_975;

assign tmp5_1_0_mid2_fu_605_p1 = tmp5_1_0_mid2_fu_605_p10;

assign tmp5_1_0_mid2_fu_605_p10 = tmp5_1_0_mid2_v_v_reg_1212;

assign tmp5_1_0_mid2_fu_605_p2 = (tmp5_1_0_mid2_fu_605_p0 * tmp5_1_0_mid2_fu_605_p1);

assign tmp5_1_0_mid2_v_v_fu_573_p2 = (7'd1 + tmp5_0_0_mid2_v_v_reg_1157);

assign tmp5_2_0_mid2_fu_581_p0 = zext_ln34_2_cast14_reg_975;

assign tmp5_2_0_mid2_fu_581_p1 = tmp5_2_0_mid2_fu_581_p10;

assign tmp5_2_0_mid2_fu_581_p10 = tmp5_2_0_mid2_v_v_reg_1181;

assign tmp5_2_0_mid2_fu_581_p2 = (tmp5_2_0_mid2_fu_581_p0 * tmp5_2_0_mid2_fu_581_p1);

assign tmp5_2_0_mid2_v_v_fu_542_p2 = (7'd2 + tmp5_0_0_mid2_v_v_reg_1157);

assign tmp6_fu_457_p2 = (mul_ln40_reg_1094 + zext_ln34_4_cast_reg_1052);

assign tmp6_mid1_fu_518_p2 = (zext_ln34_4_cast_mid_reg_1142 + select_ln28_11_fu_502_p3);

assign tmp7_mid2_v_v_fu_547_p3 = ((select_ln28_14_reg_1100[0:0] === 1'b1) ? tmp6_mid1_reg_1164 : select_ln28_13_fu_529_p3);

assign tmp_0_0_fu_453_p2 = (mul_ln34_reg_1018 + zext_ln34_4_cast_reg_1052);

assign tmp_0_0_mid1_fu_491_p2 = (zext_ln34_4_cast_mid_fu_488_p1 + select_ln28_10_fu_467_p3);

assign tmp_6_fu_360_p3 = {{mul_ln5_fu_354_p2}, {3'd0}};

assign trunc_ln28_fu_430_p1 = select_ln28_9_fu_416_p3[1:0];

assign trunc_ln40_2_fu_867_p4 = {{mul_ln34_14_reg_1499[29:14]}};

assign trunc_ln40_5_fu_812_p4 = {{mul_ln34_17_reg_1464[29:14]}};

assign trunc_ln40_8_fu_831_p4 = {{mul_ln34_12_reg_1479[29:14]}};

assign xor_ln28_fu_563_p2 = (trunc_ln28_reg_1081 ^ 2'd2);

assign zext_ln28_fu_765_p1 = select_ln28_9_reg_1064_pp0_iter2_reg;

assign zext_ln34_21_fu_586_p1 = out_w_0_mid2_reg_1135;

assign zext_ln34_22_fu_610_p1 = add_ln34_reg_1231;

assign zext_ln34_23_fu_594_p1 = out_w_reg_1191;

assign zext_ln34_24_fu_622_p1 = add_ln34_14_reg_1266;

assign zext_ln34_25_fu_663_p1 = add_ln34_15_reg_1288;

assign zext_ln34_26_fu_687_p1 = add_ln34_16_reg_1308;

assign zext_ln34_27_fu_721_p1 = add_ln34_17_reg_1348;

assign zext_ln34_28_fu_725_p1 = add_ln34_18_reg_1358;

assign zext_ln34_29_fu_753_p1 = add_ln34_19_reg_1363;

assign zext_ln34_2_cast14_fu_326_p1 = input_width;

assign zext_ln34_30_fu_671_p1 = add_ln34_20_reg_1293;

assign zext_ln34_31_fu_675_p1 = add_ln34_21_reg_1298;

assign zext_ln34_32_fu_703_p1 = add_ln34_22_reg_1323;

assign zext_ln34_4_cast_fu_405_p1 = ap_phi_mux_out_h_0_phi_fu_293_p4;

assign zext_ln34_4_cast_mid_fu_488_p1 = out_h_reg_1108;

assign zext_ln34_fu_322_p1 = input_height;

assign zext_ln40_1_cast_fu_334_p1 = output_width;

assign zext_ln40_2_fu_374_p1 = ap_phi_mux_out_d_0_phi_fu_270_p4;

assign zext_ln40_3_fu_895_p1 = add_ln40_reg_1373_pp0_iter2_reg;

assign zext_ln40_4_fu_422_p1 = out_d_reg_1028;

assign zext_ln40_fu_330_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln34_reg_969[6] <= 1'b0;
    zext_ln34_2_cast14_reg_975[10:6] <= 5'b00000;
    zext_ln40_reg_982[6:5] <= 2'b00;
    zext_ln40_1_cast_reg_988[10:5] <= 6'b000000;
    tmp_6_reg_1003[2:0] <= 3'b000;
    zext_ln40_2_reg_1013[6:4] <= 3'b000;
    zext_ln34_4_cast_reg_1052[6:4] <= 3'b000;
    zext_ln40_4_reg_1070[6:4] <= 3'b000;
    zext_ln34_4_cast_mid_reg_1142[6:4] <= 3'b000;
    zext_ln34_21_reg_1224[10:4] <= 7'b0000000;
    zext_ln34_23_reg_1260[10:4] <= 7'b0000000;
    zext_ln34_25_reg_1303[10:4] <= 7'b0000000;
end

endmodule //depthwise_conv2d_fix_1
