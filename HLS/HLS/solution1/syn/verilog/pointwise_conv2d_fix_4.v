// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] out_h_fu_172_p2;
reg   [4:0] out_h_reg_383;
wire    ap_CS_fsm_state2;
wire   [10:0] sub_ln27_fu_202_p2;
reg   [10:0] sub_ln27_reg_388;
wire   [0:0] icmp_ln19_fu_166_p2;
wire   [4:0] out_w_fu_214_p2;
reg   [4:0] out_w_reg_396;
wire    ap_CS_fsm_state3;
wire  signed [10:0] add_ln27_fu_224_p2;
reg  signed [10:0] add_ln27_reg_401;
wire   [0:0] icmp_ln20_fu_208_p2;
wire  signed [14:0] sext_ln27_fu_229_p1;
reg  signed [14:0] sext_ln27_reg_406;
wire   [4:0] in_d_fu_243_p2;
reg   [4:0] in_d_reg_414;
wire    ap_CS_fsm_state4;
wire   [13:0] add_ln27_2_fu_249_p2;
reg   [13:0] add_ln27_2_reg_419;
wire   [0:0] icmp_ln22_fu_237_p2;
wire   [14:0] add_ln27_1_fu_255_p2;
reg   [14:0] add_ln27_1_reg_424;
wire   [3:0] trunc_ln27_fu_260_p1;
reg   [3:0] trunc_ln27_reg_429;
wire   [15:0] and_ln32_fu_290_p2;
reg   [15:0] and_ln32_reg_434;
wire    ap_CS_fsm_state5;
reg  signed [15:0] input_load_reg_444;
wire    ap_CS_fsm_state6;
wire   [15:0] tmp_fu_304_p18;
reg  signed [15:0] tmp_reg_449;
wire  signed [31:0] mul_ln27_fu_374_p2;
reg  signed [31:0] mul_ln27_reg_454;
wire    ap_CS_fsm_state7;
wire   [22:0] buffer_fu_360_p2;
wire    ap_CS_fsm_state8;
reg   [4:0] out_h_0_reg_110;
reg   [4:0] out_w_0_reg_121;
wire    ap_CS_fsm_state9;
reg   [22:0] buffer_0_reg_132;
reg   [4:0] in_d_0_reg_144;
reg   [13:0] phi_mul_reg_155;
wire   [63:0] zext_ln27_2_fu_299_p1;
wire   [63:0] zext_ln32_fu_369_p1;
wire   [9:0] shl_ln_fu_178_p3;
wire   [6:0] shl_ln27_7_fu_190_p3;
wire   [10:0] zext_ln27_fu_186_p1;
wire   [10:0] zext_ln27_1_fu_198_p1;
wire   [10:0] zext_ln22_fu_220_p1;
wire   [14:0] zext_ln22_1_fu_233_p1;
wire   [0:0] tmp_1_fu_264_p3;
wire   [0:0] xor_ln31_fu_276_p2;
wire   [15:0] select_ln31_fu_282_p3;
wire   [15:0] trunc_ln31_fu_272_p1;
wire  signed [31:0] sext_ln27_2_fu_296_p1;
wire   [17:0] trunc_ln27_2_fu_347_p4;
wire  signed [22:0] sext_ln27_4_fu_356_p1;
wire  signed [31:0] sext_ln32_fu_366_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

network_mux_164_16_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
network_mux_164_16_1_1_x_U108(
    .din0(16'd59034),
    .din1(16'd49155),
    .din2(16'd7191),
    .din3(16'd63772),
    .din4(16'd3434),
    .din5(16'd62572),
    .din6(16'd65500),
    .din7(16'd65058),
    .din8(16'd748),
    .din9(16'd7038),
    .din10(16'd7886),
    .din11(16'd3798),
    .din12(16'd53950),
    .din13(16'd5575),
    .din14(16'd58189),
    .din15(16'd55931),
    .din16(trunc_ln27_reg_429),
    .dout(tmp_fu_304_p18)
);

network_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16s_16s_32_1_1_U109(
    .din0(input_load_reg_444),
    .din1(tmp_reg_449),
    .dout(mul_ln27_fu_374_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_0_reg_132 <= buffer_fu_360_p2;
    end else if (((icmp_ln20_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        buffer_0_reg_132 <= 23'd8377869;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_d_0_reg_144 <= in_d_reg_414;
    end else if (((icmp_ln20_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_d_0_reg_144 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_h_0_reg_110 <= out_h_reg_383;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_110 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_w_0_reg_121 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        out_w_0_reg_121 <= out_w_reg_396;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_155 <= add_ln27_2_reg_419;
    end else if (((icmp_ln20_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_155 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_237_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln27_1_reg_424 <= add_ln27_1_fu_255_p2;
        add_ln27_2_reg_419 <= add_ln27_2_fu_249_p2;
        trunc_ln27_reg_429 <= trunc_ln27_fu_260_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln27_reg_401 <= add_ln27_fu_224_p2;
        sext_ln27_reg_406 <= sext_ln27_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        and_ln32_reg_434 <= and_ln32_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_d_reg_414 <= in_d_fu_243_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_load_reg_444 <= input_r_q0;
        tmp_reg_449 <= tmp_fu_304_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln27_reg_454 <= mul_ln27_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_reg_383 <= out_h_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_w_reg_396 <= out_w_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln27_reg_388[10 : 2] <= sub_ln27_fu_202_p2[10 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln19_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_166_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln20_fu_208_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln22_fu_237_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_1_fu_255_p2 = ($signed(zext_ln22_1_fu_233_p1) + $signed(sext_ln27_reg_406));

assign add_ln27_2_fu_249_p2 = (14'd784 + phi_mul_reg_155);

assign add_ln27_fu_224_p2 = (sub_ln27_reg_388 + zext_ln22_fu_220_p1);

assign and_ln32_fu_290_p2 = (trunc_ln31_fu_272_p1 & select_ln31_fu_282_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_fu_360_p2 = ($signed(buffer_0_reg_132) + $signed(sext_ln27_4_fu_356_p1));

assign icmp_ln19_fu_166_p2 = ((out_h_0_reg_110 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_208_p2 = ((out_w_0_reg_121 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_237_p2 = ((in_d_0_reg_144 == 5'd16) ? 1'b1 : 1'b0);

assign in_d_fu_243_p2 = (in_d_0_reg_144 + 5'd1);

assign input_r_address0 = zext_ln27_2_fu_299_p1;

assign out_h_fu_172_p2 = (out_h_0_reg_110 + 5'd1);

assign out_w_fu_214_p2 = (out_w_0_reg_121 + 5'd1);

assign output_r_address0 = zext_ln32_fu_369_p1;

assign output_r_d0 = and_ln32_reg_434;

assign select_ln31_fu_282_p3 = ((xor_ln31_fu_276_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln27_2_fu_296_p1 = $signed(add_ln27_1_reg_424);

assign sext_ln27_4_fu_356_p1 = $signed(trunc_ln27_2_fu_347_p4);

assign sext_ln27_fu_229_p1 = add_ln27_fu_224_p2;

assign sext_ln32_fu_366_p1 = add_ln27_reg_401;

assign shl_ln27_7_fu_190_p3 = {{out_h_0_reg_110}, {2'd0}};

assign shl_ln_fu_178_p3 = {{out_h_0_reg_110}, {5'd0}};

assign sub_ln27_fu_202_p2 = (zext_ln27_fu_186_p1 - zext_ln27_1_fu_198_p1);

assign tmp_1_fu_264_p3 = buffer_0_reg_132[32'd22];

assign trunc_ln27_2_fu_347_p4 = {{mul_ln27_reg_454[31:14]}};

assign trunc_ln27_fu_260_p1 = in_d_0_reg_144[3:0];

assign trunc_ln31_fu_272_p1 = buffer_0_reg_132[15:0];

assign xor_ln31_fu_276_p2 = (tmp_1_fu_264_p3 ^ 1'd1);

assign zext_ln22_1_fu_233_p1 = phi_mul_reg_155;

assign zext_ln22_fu_220_p1 = out_w_0_reg_121;

assign zext_ln27_1_fu_198_p1 = shl_ln27_7_fu_190_p3;

assign zext_ln27_2_fu_299_p1 = $unsigned(sext_ln27_2_fu_296_p1);

assign zext_ln27_fu_186_p1 = shl_ln_fu_178_p3;

assign zext_ln32_fu_369_p1 = $unsigned(sext_ln32_fu_366_p1);

always @ (posedge ap_clk) begin
    sub_ln27_reg_388[1:0] <= 2'b00;
end

endmodule //pointwise_conv2d_fix_4
