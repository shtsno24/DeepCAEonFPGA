// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _network_HH_
#define _network_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "network_MemBank_B.h"
#include "network_MemBank_Out.h"
#include "network_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct network : public sc_module {
    // Port declarations 38
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<16> > input_data_TDATA;
    sc_in< sc_logic > input_data_TVALID;
    sc_out< sc_logic > input_data_TREADY;
    sc_in< sc_lv<2> > input_data_TKEEP;
    sc_in< sc_lv<2> > input_data_TSTRB;
    sc_in< sc_lv<1> > input_data_TUSER;
    sc_in< sc_lv<1> > input_data_TLAST;
    sc_in< sc_lv<1> > input_data_TID;
    sc_in< sc_lv<1> > input_data_TDEST;
    sc_out< sc_lv<16> > output_data_TDATA;
    sc_out< sc_logic > output_data_TVALID;
    sc_in< sc_logic > output_data_TREADY;
    sc_out< sc_lv<2> > output_data_TKEEP;
    sc_out< sc_lv<2> > output_data_TSTRB;
    sc_out< sc_lv<1> > output_data_TUSER;
    sc_out< sc_lv<1> > output_data_TLAST;
    sc_out< sc_lv<1> > output_data_TID;
    sc_out< sc_lv<1> > output_data_TDEST;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    network(sc_module_name name);
    SC_HAS_PROCESS(network);

    ~network();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    network_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* network_AXILiteS_s_axi_U;
    network_MemBank_B* MemBank_B_U;
    network_MemBank_Out* MemBank_Out_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<16> > input_data_V_data_V_0_data_out;
    sc_signal< sc_logic > input_data_V_data_V_0_vld_in;
    sc_signal< sc_logic > input_data_V_data_V_0_vld_out;
    sc_signal< sc_logic > input_data_V_data_V_0_ack_in;
    sc_signal< sc_logic > input_data_V_data_V_0_ack_out;
    sc_signal< sc_lv<16> > input_data_V_data_V_0_payload_A;
    sc_signal< sc_lv<16> > input_data_V_data_V_0_payload_B;
    sc_signal< sc_logic > input_data_V_data_V_0_sel_rd;
    sc_signal< sc_logic > input_data_V_data_V_0_sel_wr;
    sc_signal< sc_logic > input_data_V_data_V_0_sel;
    sc_signal< sc_logic > input_data_V_data_V_0_load_A;
    sc_signal< sc_logic > input_data_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > input_data_V_data_V_0_state;
    sc_signal< sc_logic > input_data_V_data_V_0_state_cmp_full;
    sc_signal< sc_logic > input_data_V_dest_V_0_vld_in;
    sc_signal< sc_logic > input_data_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > input_data_V_dest_V_0_state;
    sc_signal< sc_lv<16> > output_data_V_data_V_1_data_out;
    sc_signal< sc_logic > output_data_V_data_V_1_vld_in;
    sc_signal< sc_logic > output_data_V_data_V_1_vld_out;
    sc_signal< sc_logic > output_data_V_data_V_1_ack_in;
    sc_signal< sc_logic > output_data_V_data_V_1_ack_out;
    sc_signal< sc_lv<16> > output_data_V_data_V_1_payload_A;
    sc_signal< sc_lv<16> > output_data_V_data_V_1_payload_B;
    sc_signal< sc_logic > output_data_V_data_V_1_sel_rd;
    sc_signal< sc_logic > output_data_V_data_V_1_sel_wr;
    sc_signal< sc_logic > output_data_V_data_V_1_sel;
    sc_signal< sc_logic > output_data_V_data_V_1_load_A;
    sc_signal< sc_logic > output_data_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > output_data_V_data_V_1_state;
    sc_signal< sc_logic > output_data_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<2> > output_data_V_keep_V_1_data_out;
    sc_signal< sc_logic > output_data_V_keep_V_1_vld_in;
    sc_signal< sc_logic > output_data_V_keep_V_1_vld_out;
    sc_signal< sc_logic > output_data_V_keep_V_1_ack_in;
    sc_signal< sc_logic > output_data_V_keep_V_1_ack_out;
    sc_signal< sc_logic > output_data_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > output_data_V_keep_V_1_sel;
    sc_signal< sc_lv<2> > output_data_V_keep_V_1_state;
    sc_signal< sc_lv<2> > output_data_V_strb_V_1_data_out;
    sc_signal< sc_logic > output_data_V_strb_V_1_vld_in;
    sc_signal< sc_logic > output_data_V_strb_V_1_vld_out;
    sc_signal< sc_logic > output_data_V_strb_V_1_ack_in;
    sc_signal< sc_logic > output_data_V_strb_V_1_ack_out;
    sc_signal< sc_logic > output_data_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > output_data_V_strb_V_1_sel;
    sc_signal< sc_lv<2> > output_data_V_strb_V_1_state;
    sc_signal< sc_lv<1> > output_data_V_user_V_1_data_out;
    sc_signal< sc_logic > output_data_V_user_V_1_vld_in;
    sc_signal< sc_logic > output_data_V_user_V_1_vld_out;
    sc_signal< sc_logic > output_data_V_user_V_1_ack_in;
    sc_signal< sc_logic > output_data_V_user_V_1_ack_out;
    sc_signal< sc_lv<1> > output_data_V_user_V_1_payload_A;
    sc_signal< sc_lv<1> > output_data_V_user_V_1_payload_B;
    sc_signal< sc_logic > output_data_V_user_V_1_sel_rd;
    sc_signal< sc_logic > output_data_V_user_V_1_sel_wr;
    sc_signal< sc_logic > output_data_V_user_V_1_sel;
    sc_signal< sc_logic > output_data_V_user_V_1_load_A;
    sc_signal< sc_logic > output_data_V_user_V_1_load_B;
    sc_signal< sc_lv<2> > output_data_V_user_V_1_state;
    sc_signal< sc_logic > output_data_V_user_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > output_data_V_last_V_1_data_out;
    sc_signal< sc_logic > output_data_V_last_V_1_vld_in;
    sc_signal< sc_logic > output_data_V_last_V_1_vld_out;
    sc_signal< sc_logic > output_data_V_last_V_1_ack_in;
    sc_signal< sc_logic > output_data_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > output_data_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > output_data_V_last_V_1_payload_B;
    sc_signal< sc_logic > output_data_V_last_V_1_sel_rd;
    sc_signal< sc_logic > output_data_V_last_V_1_sel_wr;
    sc_signal< sc_logic > output_data_V_last_V_1_sel;
    sc_signal< sc_logic > output_data_V_last_V_1_load_A;
    sc_signal< sc_logic > output_data_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > output_data_V_last_V_1_state;
    sc_signal< sc_logic > output_data_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > output_data_V_id_V_1_data_out;
    sc_signal< sc_logic > output_data_V_id_V_1_vld_in;
    sc_signal< sc_logic > output_data_V_id_V_1_vld_out;
    sc_signal< sc_logic > output_data_V_id_V_1_ack_in;
    sc_signal< sc_logic > output_data_V_id_V_1_ack_out;
    sc_signal< sc_logic > output_data_V_id_V_1_sel_rd;
    sc_signal< sc_logic > output_data_V_id_V_1_sel;
    sc_signal< sc_lv<2> > output_data_V_id_V_1_state;
    sc_signal< sc_lv<1> > output_data_V_dest_V_1_data_out;
    sc_signal< sc_logic > output_data_V_dest_V_1_vld_in;
    sc_signal< sc_logic > output_data_V_dest_V_1_vld_out;
    sc_signal< sc_logic > output_data_V_dest_V_1_ack_in;
    sc_signal< sc_logic > output_data_V_dest_V_1_ack_out;
    sc_signal< sc_logic > output_data_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > output_data_V_dest_V_1_sel;
    sc_signal< sc_lv<2> > output_data_V_dest_V_1_state;
    sc_signal< sc_lv<32> > ap_return;
    sc_signal< sc_logic > input_data_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_210_p2;
    sc_signal< sc_logic > output_data_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_6_reg_305;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > tmp_6_reg_305_pp0_iter1_reg;
    sc_signal< sc_lv<10> > i2_reg_199;
    sc_signal< sc_lv<10> > i_1_fu_216_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<1> > tmp_3_fu_232_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<10> > i_2_fu_238_p2;
    sc_signal< sc_lv<10> > i_2_reg_290;
    sc_signal< sc_lv<64> > tmp_4_fu_244_p1;
    sc_signal< sc_lv<64> > tmp_4_reg_295;
    sc_signal< sc_lv<1> > tmp_6_fu_249_p2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_io;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state7_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > i_3_fu_255_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_user_V_fu_266_p2;
    sc_signal< sc_lv<1> > tmp_user_V_reg_314;
    sc_signal< sc_lv<1> > tmp_last_V_fu_272_p2;
    sc_signal< sc_lv<1> > tmp_last_V_reg_319;
    sc_signal< sc_lv<16> > MemBank_Out_q0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state5;
    sc_signal< sc_lv<14> > MemBank_B_address0;
    sc_signal< sc_logic > MemBank_B_ce0;
    sc_signal< sc_logic > MemBank_B_we0;
    sc_signal< sc_lv<16> > MemBank_B_q0;
    sc_signal< sc_lv<10> > MemBank_Out_address0;
    sc_signal< sc_logic > MemBank_Out_ce0;
    sc_signal< sc_logic > MemBank_Out_we0;
    sc_signal< sc_lv<10> > i_reg_177;
    sc_signal< sc_lv<10> > i1_reg_188;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > tmp_1_fu_227_p1;
    sc_signal< sc_lv<64> > i2_cast1_fu_261_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< bool > ap_block_state9;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_pp0_stage0;
    static const sc_lv<7> ap_ST_fsm_state8;
    static const sc_lv<7> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_310;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<10> ap_const_lv10_30F;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_MemBank_B_address0();
    void thread_MemBank_B_ce0();
    void thread_MemBank_B_we0();
    void thread_MemBank_Out_address0();
    void thread_MemBank_Out_ce0();
    void thread_MemBank_Out_we0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2();
    void thread_ap_block_state5_pp0_stage0_iter0();
    void thread_ap_block_state6_io();
    void thread_ap_block_state6_pp0_stage0_iter1();
    void thread_ap_block_state7_io();
    void thread_ap_block_state7_pp0_stage0_iter2();
    void thread_ap_block_state9();
    void thread_ap_condition_pp0_exit_iter0_state5();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_rst_n_inv();
    void thread_exitcond_fu_210_p2();
    void thread_i2_cast1_fu_261_p1();
    void thread_i_1_fu_216_p2();
    void thread_i_2_fu_238_p2();
    void thread_i_3_fu_255_p2();
    void thread_input_data_TDATA_blk_n();
    void thread_input_data_TREADY();
    void thread_input_data_V_data_V_0_ack_in();
    void thread_input_data_V_data_V_0_ack_out();
    void thread_input_data_V_data_V_0_data_out();
    void thread_input_data_V_data_V_0_load_A();
    void thread_input_data_V_data_V_0_load_B();
    void thread_input_data_V_data_V_0_sel();
    void thread_input_data_V_data_V_0_state_cmp_full();
    void thread_input_data_V_data_V_0_vld_in();
    void thread_input_data_V_data_V_0_vld_out();
    void thread_input_data_V_dest_V_0_ack_out();
    void thread_input_data_V_dest_V_0_vld_in();
    void thread_output_data_TDATA();
    void thread_output_data_TDATA_blk_n();
    void thread_output_data_TDEST();
    void thread_output_data_TID();
    void thread_output_data_TKEEP();
    void thread_output_data_TLAST();
    void thread_output_data_TSTRB();
    void thread_output_data_TUSER();
    void thread_output_data_TVALID();
    void thread_output_data_V_data_V_1_ack_in();
    void thread_output_data_V_data_V_1_ack_out();
    void thread_output_data_V_data_V_1_data_out();
    void thread_output_data_V_data_V_1_load_A();
    void thread_output_data_V_data_V_1_load_B();
    void thread_output_data_V_data_V_1_sel();
    void thread_output_data_V_data_V_1_state_cmp_full();
    void thread_output_data_V_data_V_1_vld_in();
    void thread_output_data_V_data_V_1_vld_out();
    void thread_output_data_V_dest_V_1_ack_in();
    void thread_output_data_V_dest_V_1_ack_out();
    void thread_output_data_V_dest_V_1_data_out();
    void thread_output_data_V_dest_V_1_sel();
    void thread_output_data_V_dest_V_1_vld_in();
    void thread_output_data_V_dest_V_1_vld_out();
    void thread_output_data_V_id_V_1_ack_in();
    void thread_output_data_V_id_V_1_ack_out();
    void thread_output_data_V_id_V_1_data_out();
    void thread_output_data_V_id_V_1_sel();
    void thread_output_data_V_id_V_1_vld_in();
    void thread_output_data_V_id_V_1_vld_out();
    void thread_output_data_V_keep_V_1_ack_in();
    void thread_output_data_V_keep_V_1_ack_out();
    void thread_output_data_V_keep_V_1_data_out();
    void thread_output_data_V_keep_V_1_sel();
    void thread_output_data_V_keep_V_1_vld_in();
    void thread_output_data_V_keep_V_1_vld_out();
    void thread_output_data_V_last_V_1_ack_in();
    void thread_output_data_V_last_V_1_ack_out();
    void thread_output_data_V_last_V_1_data_out();
    void thread_output_data_V_last_V_1_load_A();
    void thread_output_data_V_last_V_1_load_B();
    void thread_output_data_V_last_V_1_sel();
    void thread_output_data_V_last_V_1_state_cmp_full();
    void thread_output_data_V_last_V_1_vld_in();
    void thread_output_data_V_last_V_1_vld_out();
    void thread_output_data_V_strb_V_1_ack_in();
    void thread_output_data_V_strb_V_1_ack_out();
    void thread_output_data_V_strb_V_1_data_out();
    void thread_output_data_V_strb_V_1_sel();
    void thread_output_data_V_strb_V_1_vld_in();
    void thread_output_data_V_strb_V_1_vld_out();
    void thread_output_data_V_user_V_1_ack_in();
    void thread_output_data_V_user_V_1_ack_out();
    void thread_output_data_V_user_V_1_data_out();
    void thread_output_data_V_user_V_1_load_A();
    void thread_output_data_V_user_V_1_load_B();
    void thread_output_data_V_user_V_1_sel();
    void thread_output_data_V_user_V_1_state_cmp_full();
    void thread_output_data_V_user_V_1_vld_in();
    void thread_output_data_V_user_V_1_vld_out();
    void thread_tmp_1_fu_227_p1();
    void thread_tmp_3_fu_232_p2();
    void thread_tmp_4_fu_244_p1();
    void thread_tmp_6_fu_249_p2();
    void thread_tmp_last_V_fu_272_p2();
    void thread_tmp_user_V_fu_266_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
