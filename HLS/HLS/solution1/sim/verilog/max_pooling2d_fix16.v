// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state21 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [5:0] output_depth;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten39_reg_174;
reg   [4:0] out_d_0_reg_186;
reg   [4:0] out_d_0_reg_186_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state15_pp0_stage0_iter3;
wire    ap_block_state19_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] out_d_0_reg_186_pp0_iter2_reg;
reg   [7:0] indvar_flatten_reg_198;
reg   [3:0] out_h_0_reg_210;
reg   [3:0] out_h_0_reg_210_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_state16_pp0_stage1_iter3;
wire    ap_block_state20_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
reg   [3:0] out_h_0_reg_210_pp0_iter2_reg;
reg   [3:0] out_w_0_reg_222;
reg   [15:0] reg_234;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state13_pp0_stage2_iter2;
wire    ap_block_state17_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln19_reg_729;
reg   [0:0] icmp_ln19_reg_729_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state14_pp0_stage3_iter2;
wire    ap_block_state18_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
reg   [15:0] reg_239;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln19_reg_729_pp0_iter2_reg;
wire   [3:0] empty_fu_244_p1;
reg   [3:0] empty_reg_678;
wire   [7:0] mul_ln9_fu_260_p2;
reg   [7:0] mul_ln9_reg_684;
wire   [8:0] zext_ln26_fu_276_p1;
reg   [8:0] zext_ln26_reg_690;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln26_1_cast4_fu_280_p1;
reg   [13:0] zext_ln26_1_cast4_reg_696;
wire   [7:0] zext_ln34_fu_284_p1;
reg   [7:0] zext_ln34_reg_702;
wire   [11:0] zext_ln34_1_cast_fu_288_p1;
reg   [11:0] zext_ln34_1_cast_reg_708;
wire   [12:0] mul_ln9_1_fu_303_p2;
reg   [12:0] mul_ln9_1_reg_713;
wire   [0:0] icmp_ln22_fu_309_p2;
reg   [0:0] icmp_ln22_reg_718;
wire   [8:0] mul_ln26_fu_318_p2;
reg   [8:0] mul_ln26_reg_723;
wire   [0:0] icmp_ln19_fu_323_p2;
reg   [0:0] icmp_ln19_reg_729_pp0_iter3_reg;
reg   [0:0] icmp_ln19_reg_729_pp0_iter4_reg;
wire   [4:0] out_d_fu_328_p2;
reg   [4:0] out_d_reg_733;
reg   [4:0] out_d_reg_733_pp0_iter1_reg;
reg   [4:0] out_d_reg_733_pp0_iter2_reg;
reg   [4:0] out_d_reg_733_pp0_iter3_reg;
wire   [0:0] icmp_ln21_fu_334_p2;
reg   [0:0] icmp_ln21_reg_740;
reg   [0:0] icmp_ln21_reg_740_pp0_iter1_reg;
reg   [0:0] icmp_ln21_reg_740_pp0_iter2_reg;
reg   [0:0] icmp_ln21_reg_740_pp0_iter3_reg;
wire   [3:0] select_ln20_fu_339_p3;
reg   [3:0] select_ln20_reg_752;
wire   [8:0] mul_ln26_1_fu_350_p2;
reg   [8:0] mul_ln26_1_reg_757;
wire   [0:0] icmp_ln22_1_fu_355_p2;
reg   [0:0] icmp_ln22_1_reg_763;
wire   [3:0] out_h_fu_360_p2;
reg   [3:0] out_h_reg_768;
reg   [3:0] out_h_reg_768_pp0_iter1_reg;
reg   [3:0] out_h_reg_768_pp0_iter2_reg;
reg   [3:0] out_h_reg_768_pp0_iter3_reg;
wire   [0:0] select_ln20_5_fu_394_p3;
reg   [0:0] select_ln20_5_reg_775;
reg   [0:0] select_ln20_5_reg_775_pp0_iter1_reg;
reg   [0:0] select_ln20_5_reg_775_pp0_iter2_reg;
wire   [8:0] select_ln26_1_fu_416_p3;
reg   [8:0] select_ln26_1_reg_782;
wire   [8:0] add_ln26_4_fu_424_p2;
reg   [8:0] add_ln26_4_reg_787;
wire   [12:0] add_ln19_fu_430_p2;
reg   [12:0] add_ln19_reg_792;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln19_fu_436_p3;
reg   [4:0] select_ln19_reg_797;
wire   [13:0] mul_ln26_2_fu_445_p2;
reg   [13:0] mul_ln26_2_reg_802;
wire   [13:0] mul_ln26_3_fu_453_p2;
reg   [13:0] mul_ln26_3_reg_808;
wire   [3:0] select_ln26_fu_462_p3;
reg   [3:0] select_ln26_reg_814;
reg   [3:0] select_ln26_reg_814_pp0_iter2_reg;
reg   [3:0] select_ln26_reg_814_pp0_iter3_reg;
wire   [3:0] select_ln21_fu_470_p3;
reg   [3:0] select_ln21_reg_819;
wire   [13:0] add_ln26_fu_487_p2;
reg   [13:0] add_ln26_reg_824;
wire   [13:0] add_ln26_1_fu_502_p2;
reg   [13:0] add_ln26_1_reg_830;
wire   [13:0] add_ln26_2_fu_507_p2;
reg   [13:0] add_ln26_2_reg_836;
reg   [13:0] add_ln26_2_reg_836_pp0_iter2_reg;
wire   [13:0] add_ln26_3_fu_512_p2;
reg   [13:0] add_ln26_3_reg_842;
reg   [13:0] add_ln26_3_reg_842_pp0_iter2_reg;
reg   [13:0] add_ln26_3_reg_842_pp0_iter3_reg;
wire   [3:0] out_w_fu_517_p2;
reg   [3:0] out_w_reg_848;
wire   [7:0] select_ln21_1_fu_529_p3;
reg   [7:0] select_ln21_1_reg_853;
wire   [13:0] select_ln29_fu_554_p3;
reg   [13:0] select_ln29_reg_873;
wire   [13:0] select_ln29_1_fu_570_p3;
reg   [13:0] select_ln29_1_reg_884;
wire   [7:0] mul_ln34_fu_588_p2;
reg   [7:0] mul_ln34_reg_900;
reg   [15:0] input_load_4_reg_906;
reg    ap_enable_reg_pp0_iter3;
wire   [7:0] tmp4_fu_597_p2;
reg   [7:0] tmp4_reg_911;
wire   [7:0] mul_ln34_1_fu_605_p2;
reg   [7:0] mul_ln34_1_reg_916;
wire   [13:0] select_ln29_2_fu_615_p3;
reg   [13:0] select_ln29_2_reg_922;
wire   [7:0] select_ln26_2_fu_640_p3;
reg   [7:0] select_ln26_2_reg_927;
wire   [11:0] grp_fu_661_p3;
reg   [11:0] add_ln34_reg_937;
reg   [15:0] input_load_6_reg_942;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter3_state16;
reg   [12:0] ap_phi_mux_indvar_flatten39_phi_fu_178_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_out_d_0_phi_fu_190_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_202_p4;
wire    ap_block_pp0_stage1;
reg   [3:0] ap_phi_mux_out_h_0_phi_fu_214_p4;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_226_p4;
wire   [63:0] zext_ln26_8_fu_536_p1;
wire   [63:0] zext_ln26_10_fu_540_p1;
wire   [63:0] zext_ln26_11_fu_544_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln29_fu_560_p1;
wire   [63:0] zext_ln26_12_fu_576_p1;
wire   [63:0] zext_ln29_1_fu_580_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln29_2_fu_653_p1;
wire   [63:0] zext_ln34_2_fu_657_p1;
wire  signed [4:0] empty_fu_244_p0;
wire  signed [4:0] empty_51_fu_248_p0;
wire   [3:0] empty_51_fu_248_p1;
wire   [3:0] mul_ln9_fu_260_p0;
wire   [3:0] mul_ln9_fu_260_p1;
wire  signed [4:0] sext_ln9_fu_266_p0;
wire  signed [4:0] sext_ln9_1_fu_269_p0;
wire  signed [6:0] sext_ln9_2_fu_272_p1;
wire  signed [5:0] sext_ln9_1_fu_269_p1;
wire  signed [5:0] sext_ln9_fu_266_p1;
wire   [4:0] empty_52_fu_292_p1;
wire   [4:0] mul_ln9_1_fu_303_p0;
wire   [7:0] mul_ln9_1_fu_303_p1;
wire   [4:0] mul_ln26_fu_318_p0;
wire   [6:0] mul_ln26_fu_318_p1;
wire   [4:0] mul_ln26_1_fu_350_p0;
wire   [6:0] mul_ln26_1_fu_350_p1;
wire   [4:0] shl_ln_fu_366_p3;
wire   [8:0] zext_ln26_3_fu_374_p1;
wire   [8:0] tmp_0_0_fu_378_p2;
wire   [4:0] shl_ln26_mid1_fu_399_p3;
wire   [8:0] zext_ln26_13_fu_406_p1;
wire   [8:0] select_ln20_1_fu_383_p3;
wire   [8:0] tmp_0_0_mid1_fu_410_p2;
wire   [8:0] select_ln20_3_fu_388_p3;
wire   [6:0] mul_ln26_2_fu_445_p0;
wire   [8:0] mul_ln26_2_fu_445_p1;
wire   [6:0] mul_ln26_3_fu_453_p0;
wire   [8:0] mul_ln26_3_fu_453_p1;
wire   [0:0] or_ln26_1_fu_458_p2;
wire   [4:0] shl_ln26_1_fu_475_p3;
wire   [13:0] zext_ln26_7_fu_483_p1;
wire   [4:0] or_ln26_fu_492_p2;
wire   [13:0] zext_ln26_9_fu_498_p1;
wire   [7:0] add_ln21_1_fu_523_p2;
wire   [0:0] icmp_ln29_fu_548_p2;
wire   [0:0] icmp_ln29_1_fu_564_p2;
wire   [4:0] mul_ln34_fu_588_p0;
wire   [5:0] mul_ln34_fu_588_p1;
wire   [7:0] zext_ln26_2_fu_593_p1;
wire   [4:0] mul_ln34_1_fu_605_p0;
wire   [5:0] mul_ln34_1_fu_605_p1;
wire   [0:0] icmp_ln29_2_fu_610_p2;
wire   [7:0] zext_ln26_6_fu_631_p1;
wire   [7:0] select_ln20_2_fu_621_p3;
wire   [7:0] tmp4_mid1_fu_634_p2;
wire   [7:0] select_ln20_4_fu_626_p3;
wire   [5:0] grp_fu_661_p0;
wire   [7:0] grp_fu_661_p1;
wire   [3:0] grp_fu_661_p2;
wire    ap_CS_fsm_state21;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_661_p10;
wire   [11:0] grp_fu_661_p20;
wire   [8:0] mul_ln26_1_fu_350_p00;
wire   [13:0] mul_ln26_2_fu_445_p10;
wire   [13:0] mul_ln26_3_fu_453_p10;
wire   [8:0] mul_ln26_fu_318_p00;
wire   [7:0] mul_ln34_1_fu_605_p00;
wire   [7:0] mul_ln34_fu_588_p00;
wire   [12:0] mul_ln9_1_fu_303_p00;
wire   [12:0] mul_ln9_1_fu_303_p10;
wire   [7:0] mul_ln9_fu_260_p00;
wire   [7:0] mul_ln9_fu_260_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

network_mac_muladd_6ns_8ns_4ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
network_mac_muladd_6ns_8ns_4ns_12_1_1_U27(
    .din0(grp_fu_661_p0),
    .din1(grp_fu_661_p1),
    .din2(grp_fu_661_p2),
    .dout(grp_fu_661_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln19_reg_729 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter3_state16)))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter3_state16) & (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
        end else if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_729 == 1'd0))) begin
        indvar_flatten39_reg_174 <= add_ln19_reg_792;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten39_reg_174 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0))) begin
        indvar_flatten_reg_198 <= select_ln21_1_reg_853;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_198 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_729 == 1'd0))) begin
        out_d_0_reg_186 <= select_ln19_reg_797;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d_0_reg_186 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0))) begin
        out_h_0_reg_210 <= select_ln21_reg_819;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_0_reg_210 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0))) begin
        out_w_0_reg_222 <= out_w_reg_848;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_w_0_reg_222 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            reg_234 <= input_r_q1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
            reg_234 <= input_r_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln19_reg_729_pp0_iter2_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_729_pp0_iter2_reg == 1'd0)))) begin
        reg_239 <= input_r_q0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        reg_239 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln19_reg_792 <= add_ln19_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_729 == 1'd0))) begin
        add_ln26_1_reg_830 <= add_ln26_1_fu_502_p2;
        add_ln26_2_reg_836 <= add_ln26_2_fu_507_p2;
        add_ln26_3_reg_842 <= add_ln26_3_fu_512_p2;
        add_ln26_reg_824 <= add_ln26_fu_487_p2;
        select_ln26_reg_814 <= select_ln26_fu_462_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln26_2_reg_836_pp0_iter2_reg <= add_ln26_2_reg_836;
        add_ln26_3_reg_842_pp0_iter2_reg <= add_ln26_3_reg_842;
        add_ln26_3_reg_842_pp0_iter3_reg <= add_ln26_3_reg_842_pp0_iter2_reg;
        icmp_ln19_reg_729 <= icmp_ln19_fu_323_p2;
        icmp_ln19_reg_729_pp0_iter1_reg <= icmp_ln19_reg_729;
        icmp_ln19_reg_729_pp0_iter2_reg <= icmp_ln19_reg_729_pp0_iter1_reg;
        icmp_ln19_reg_729_pp0_iter3_reg <= icmp_ln19_reg_729_pp0_iter2_reg;
        icmp_ln19_reg_729_pp0_iter4_reg <= icmp_ln19_reg_729_pp0_iter3_reg;
        mul_ln26_reg_723 <= mul_ln26_fu_318_p2;
        mul_ln34_reg_900 <= mul_ln34_fu_588_p2;
        out_d_0_reg_186_pp0_iter1_reg <= out_d_0_reg_186;
        out_d_0_reg_186_pp0_iter2_reg <= out_d_0_reg_186_pp0_iter1_reg;
        out_d_reg_733_pp0_iter1_reg <= out_d_reg_733;
        out_d_reg_733_pp0_iter2_reg <= out_d_reg_733_pp0_iter1_reg;
        out_d_reg_733_pp0_iter3_reg <= out_d_reg_733_pp0_iter2_reg;
        select_ln26_reg_814_pp0_iter2_reg <= select_ln26_reg_814;
        select_ln26_reg_814_pp0_iter3_reg <= select_ln26_reg_814_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln19_reg_729 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln26_4_reg_787 <= add_ln26_4_fu_424_p2;
        select_ln20_5_reg_775 <= select_ln20_5_fu_394_p3;
        select_ln26_1_reg_782 <= select_ln26_1_fu_416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_729_pp0_iter3_reg == 1'd0))) begin
        add_ln34_reg_937 <= grp_fu_661_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_678 <= empty_fu_244_p1;
        mul_ln9_reg_684 <= mul_ln9_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln19_reg_729 == 1'd0))) begin
        icmp_ln21_reg_740 <= icmp_ln21_fu_334_p2;
        icmp_ln22_1_reg_763 <= icmp_ln22_1_fu_355_p2;
        mul_ln26_1_reg_757 <= mul_ln26_1_fu_350_p2;
        out_h_reg_768 <= out_h_fu_360_p2;
        select_ln20_reg_752 <= select_ln20_fu_339_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln21_reg_740_pp0_iter1_reg <= icmp_ln21_reg_740;
        icmp_ln21_reg_740_pp0_iter2_reg <= icmp_ln21_reg_740_pp0_iter1_reg;
        icmp_ln21_reg_740_pp0_iter3_reg <= icmp_ln21_reg_740_pp0_iter2_reg;
        out_h_0_reg_210_pp0_iter1_reg <= out_h_0_reg_210;
        out_h_0_reg_210_pp0_iter2_reg <= out_h_0_reg_210_pp0_iter1_reg;
        out_h_reg_768_pp0_iter1_reg <= out_h_reg_768;
        out_h_reg_768_pp0_iter2_reg <= out_h_reg_768_pp0_iter1_reg;
        out_h_reg_768_pp0_iter3_reg <= out_h_reg_768_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln22_reg_718 <= icmp_ln22_fu_309_p2;
        mul_ln9_1_reg_713 <= mul_ln9_1_fu_303_p2;
        zext_ln26_1_cast4_reg_696[6 : 0] <= zext_ln26_1_cast4_fu_280_p1[6 : 0];
        zext_ln26_reg_690[6 : 0] <= zext_ln26_fu_276_p1[6 : 0];
        zext_ln34_1_cast_reg_708[5 : 0] <= zext_ln34_1_cast_fu_288_p1[5 : 0];
        zext_ln34_reg_702[5 : 0] <= zext_ln34_fu_284_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln19_reg_729_pp0_iter2_reg == 1'd0))) begin
        input_load_4_reg_906 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln19_reg_729_pp0_iter3_reg == 1'd0))) begin
        input_load_6_reg_942 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_729 == 1'd0))) begin
        mul_ln26_2_reg_802 <= mul_ln26_2_fu_445_p2;
        mul_ln26_3_reg_808 <= mul_ln26_3_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln19_reg_729_pp0_iter3_reg == 1'd0))) begin
        mul_ln34_1_reg_916 <= mul_ln34_1_fu_605_p2;
        select_ln29_2_reg_922 <= select_ln29_2_fu_615_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_fu_323_p2 == 1'd0))) begin
        out_d_reg_733 <= out_d_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_729 == 1'd0))) begin
        out_w_reg_848 <= out_w_fu_517_p2;
        select_ln21_1_reg_853 <= select_ln21_1_fu_529_p3;
        select_ln21_reg_819 <= select_ln21_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_729 == 1'd0))) begin
        select_ln19_reg_797 <= select_ln19_fu_436_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln20_5_reg_775_pp0_iter1_reg <= select_ln20_5_reg_775;
        select_ln20_5_reg_775_pp0_iter2_reg <= select_ln20_5_reg_775_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln19_reg_729_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln26_2_reg_927 <= select_ln26_2_fu_640_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln19_reg_729_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln29_1_reg_884 <= select_ln29_1_fu_570_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0))) begin
        select_ln29_reg_873 <= select_ln29_fu_554_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (select_ln20_5_reg_775_pp0_iter2_reg == 1'd0) & (icmp_ln21_reg_740_pp0_iter2_reg == 1'd0))) begin
        tmp4_reg_911 <= tmp4_fu_597_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_condition_pp0_exit_iter3_state16 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state16 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_729 == 1'd0))) begin
        ap_phi_mux_indvar_flatten39_phi_fu_178_p4 = add_ln19_reg_792;
    end else begin
        ap_phi_mux_indvar_flatten39_phi_fu_178_p4 = indvar_flatten39_reg_174;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_202_p4 = select_ln21_1_reg_853;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_202_p4 = indvar_flatten_reg_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_729 == 1'd0))) begin
        ap_phi_mux_out_d_0_phi_fu_190_p4 = select_ln19_reg_797;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_190_p4 = out_d_0_reg_186;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_out_h_0_phi_fu_214_p4 = select_ln21_reg_819;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_214_p4 = out_h_0_reg_210;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln19_reg_729_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_out_w_0_phi_fu_226_p4 = out_w_reg_848;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_226_p4 = out_w_0_reg_222;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln29_2_fu_653_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_r_address0 = zext_ln26_12_fu_576_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_r_address0 = zext_ln29_fu_560_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln26_8_fu_536_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address1 = zext_ln29_1_fu_580_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address1 = zext_ln26_11_fu_544_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address1 = zext_ln26_10_fu_540_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln19_reg_729_pp0_iter4_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_430_p2 = (indvar_flatten39_reg_174 + 13'd1);

assign add_ln21_1_fu_523_p2 = (indvar_flatten_reg_198 + 8'd1);

assign add_ln26_1_fu_502_p2 = (mul_ln26_2_reg_802 + zext_ln26_9_fu_498_p1);

assign add_ln26_2_fu_507_p2 = (mul_ln26_3_reg_808 + zext_ln26_7_fu_483_p1);

assign add_ln26_3_fu_512_p2 = (mul_ln26_3_reg_808 + zext_ln26_9_fu_498_p1);

assign add_ln26_4_fu_424_p2 = (select_ln26_1_fu_416_p3 + 9'd1);

assign add_ln26_fu_487_p2 = (mul_ln26_2_reg_802 + zext_ln26_7_fu_483_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_51_fu_248_p0 = output_height;

assign empty_51_fu_248_p1 = empty_51_fu_248_p0[3:0];

assign empty_52_fu_292_p1 = output_depth[4:0];

assign empty_fu_244_p0 = output_width;

assign empty_fu_244_p1 = empty_fu_244_p0[3:0];

assign grp_fu_661_p0 = zext_ln34_1_cast_reg_708;

assign grp_fu_661_p1 = grp_fu_661_p10;

assign grp_fu_661_p10 = select_ln26_2_reg_927;

assign grp_fu_661_p2 = grp_fu_661_p20;

assign grp_fu_661_p20 = select_ln26_reg_814_pp0_iter3_reg;

assign icmp_ln19_fu_323_p2 = ((ap_phi_mux_indvar_flatten39_phi_fu_178_p4 == mul_ln9_1_reg_713) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_334_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_202_p4 == mul_ln9_reg_684) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_355_p2 = ((ap_phi_mux_out_w_0_phi_fu_226_p4 == empty_reg_678) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_309_p2 = ((empty_reg_678 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_564_p2 = (($signed(reg_239) < $signed(reg_234)) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_610_p2 = (($signed(input_load_4_reg_906) < $signed(reg_239)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_548_p2 = (($signed(reg_234) < $signed(reg_239)) ? 1'b1 : 1'b0);

assign mul_ln26_1_fu_350_p0 = mul_ln26_1_fu_350_p00;

assign mul_ln26_1_fu_350_p00 = out_d_reg_733;

assign mul_ln26_1_fu_350_p1 = zext_ln26_reg_690;

assign mul_ln26_1_fu_350_p2 = (mul_ln26_1_fu_350_p0 * mul_ln26_1_fu_350_p1);

assign mul_ln26_2_fu_445_p0 = zext_ln26_1_cast4_reg_696;

assign mul_ln26_2_fu_445_p1 = mul_ln26_2_fu_445_p10;

assign mul_ln26_2_fu_445_p10 = select_ln26_1_reg_782;

assign mul_ln26_2_fu_445_p2 = (mul_ln26_2_fu_445_p0 * mul_ln26_2_fu_445_p1);

assign mul_ln26_3_fu_453_p0 = zext_ln26_1_cast4_reg_696;

assign mul_ln26_3_fu_453_p1 = mul_ln26_3_fu_453_p10;

assign mul_ln26_3_fu_453_p10 = add_ln26_4_reg_787;

assign mul_ln26_3_fu_453_p2 = (mul_ln26_3_fu_453_p0 * mul_ln26_3_fu_453_p1);

assign mul_ln26_fu_318_p0 = mul_ln26_fu_318_p00;

assign mul_ln26_fu_318_p00 = ap_phi_mux_out_d_0_phi_fu_190_p4;

assign mul_ln26_fu_318_p1 = zext_ln26_reg_690;

assign mul_ln26_fu_318_p2 = (mul_ln26_fu_318_p0 * mul_ln26_fu_318_p1);

assign mul_ln34_1_fu_605_p0 = mul_ln34_1_fu_605_p00;

assign mul_ln34_1_fu_605_p00 = out_d_reg_733_pp0_iter3_reg;

assign mul_ln34_1_fu_605_p1 = zext_ln34_reg_702;

assign mul_ln34_1_fu_605_p2 = (mul_ln34_1_fu_605_p0 * mul_ln34_1_fu_605_p1);

assign mul_ln34_fu_588_p0 = mul_ln34_fu_588_p00;

assign mul_ln34_fu_588_p00 = out_d_0_reg_186_pp0_iter2_reg;

assign mul_ln34_fu_588_p1 = zext_ln34_reg_702;

assign mul_ln34_fu_588_p2 = (mul_ln34_fu_588_p0 * mul_ln34_fu_588_p1);

assign mul_ln9_1_fu_303_p0 = mul_ln9_1_fu_303_p00;

assign mul_ln9_1_fu_303_p00 = empty_52_fu_292_p1;

assign mul_ln9_1_fu_303_p1 = mul_ln9_1_fu_303_p10;

assign mul_ln9_1_fu_303_p10 = mul_ln9_reg_684;

assign mul_ln9_1_fu_303_p2 = (mul_ln9_1_fu_303_p0 * mul_ln9_1_fu_303_p1);

assign mul_ln9_fu_260_p0 = mul_ln9_fu_260_p00;

assign mul_ln9_fu_260_p00 = empty_51_fu_248_p1;

assign mul_ln9_fu_260_p1 = mul_ln9_fu_260_p10;

assign mul_ln9_fu_260_p10 = empty_fu_244_p1;

assign mul_ln9_fu_260_p2 = (mul_ln9_fu_260_p0 * mul_ln9_fu_260_p1);

assign or_ln26_1_fu_458_p2 = (select_ln20_5_reg_775 | icmp_ln21_reg_740);

assign or_ln26_fu_492_p2 = (shl_ln26_1_fu_475_p3 | 5'd1);

assign out_d_fu_328_p2 = (ap_phi_mux_out_d_0_phi_fu_190_p4 + 5'd1);

assign out_h_fu_360_p2 = (select_ln20_fu_339_p3 + 4'd1);

assign out_w_fu_517_p2 = (select_ln26_fu_462_p3 + 4'd1);

assign output_r_address0 = zext_ln34_2_fu_657_p1;

assign output_r_d0 = input_load_6_reg_942;

assign select_ln19_fu_436_p3 = ((icmp_ln21_reg_740[0:0] === 1'b1) ? out_d_reg_733 : out_d_0_reg_186);

assign select_ln20_1_fu_383_p3 = ((icmp_ln21_reg_740[0:0] === 1'b1) ? mul_ln26_1_reg_757 : mul_ln26_reg_723);

assign select_ln20_2_fu_621_p3 = ((icmp_ln21_reg_740_pp0_iter3_reg[0:0] === 1'b1) ? mul_ln34_1_reg_916 : mul_ln34_reg_900);

assign select_ln20_3_fu_388_p3 = ((icmp_ln21_reg_740[0:0] === 1'b1) ? mul_ln26_1_reg_757 : tmp_0_0_fu_378_p2);

assign select_ln20_4_fu_626_p3 = ((icmp_ln21_reg_740_pp0_iter3_reg[0:0] === 1'b1) ? mul_ln34_1_reg_916 : tmp4_reg_911);

assign select_ln20_5_fu_394_p3 = ((icmp_ln21_reg_740[0:0] === 1'b1) ? icmp_ln22_reg_718 : icmp_ln22_1_reg_763);

assign select_ln20_fu_339_p3 = ((icmp_ln21_fu_334_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_h_0_phi_fu_214_p4);

assign select_ln21_1_fu_529_p3 = ((icmp_ln21_reg_740[0:0] === 1'b1) ? 8'd1 : add_ln21_1_fu_523_p2);

assign select_ln21_fu_470_p3 = ((select_ln20_5_reg_775[0:0] === 1'b1) ? out_h_reg_768 : select_ln20_reg_752);

assign select_ln26_1_fu_416_p3 = ((select_ln20_5_fu_394_p3[0:0] === 1'b1) ? tmp_0_0_mid1_fu_410_p2 : select_ln20_3_fu_388_p3);

assign select_ln26_2_fu_640_p3 = ((select_ln20_5_reg_775_pp0_iter2_reg[0:0] === 1'b1) ? tmp4_mid1_fu_634_p2 : select_ln20_4_fu_626_p3);

assign select_ln26_fu_462_p3 = ((or_ln26_1_fu_458_p2[0:0] === 1'b1) ? 4'd0 : out_w_0_reg_222);

assign select_ln29_1_fu_570_p3 = ((icmp_ln29_1_fu_564_p2[0:0] === 1'b1) ? add_ln26_2_reg_836_pp0_iter2_reg : select_ln29_reg_873);

assign select_ln29_2_fu_615_p3 = ((icmp_ln29_2_fu_610_p2[0:0] === 1'b1) ? add_ln26_3_reg_842_pp0_iter3_reg : select_ln29_1_reg_884);

assign select_ln29_fu_554_p3 = ((icmp_ln29_fu_548_p2[0:0] === 1'b1) ? add_ln26_1_reg_830 : add_ln26_reg_824);

assign sext_ln9_1_fu_269_p0 = output_height;

assign sext_ln9_1_fu_269_p1 = sext_ln9_1_fu_269_p0;

assign sext_ln9_2_fu_272_p1 = $signed(input_width);

assign sext_ln9_fu_266_p0 = output_width;

assign sext_ln9_fu_266_p1 = sext_ln9_fu_266_p0;

assign shl_ln26_1_fu_475_p3 = {{select_ln26_fu_462_p3}, {1'd0}};

assign shl_ln26_mid1_fu_399_p3 = {{out_h_reg_768}, {1'd0}};

assign shl_ln_fu_366_p3 = {{out_h_0_reg_210}, {1'd0}};

assign tmp4_fu_597_p2 = (zext_ln26_2_fu_593_p1 + mul_ln34_reg_900);

assign tmp4_mid1_fu_634_p2 = (zext_ln26_6_fu_631_p1 + select_ln20_2_fu_621_p3);

assign tmp_0_0_fu_378_p2 = (zext_ln26_3_fu_374_p1 + mul_ln26_reg_723);

assign tmp_0_0_mid1_fu_410_p2 = (zext_ln26_13_fu_406_p1 + select_ln20_1_fu_383_p3);

assign zext_ln26_10_fu_540_p1 = add_ln26_1_reg_830;

assign zext_ln26_11_fu_544_p1 = add_ln26_2_reg_836;

assign zext_ln26_12_fu_576_p1 = add_ln26_3_reg_842_pp0_iter2_reg;

assign zext_ln26_13_fu_406_p1 = shl_ln26_mid1_fu_399_p3;

assign zext_ln26_1_cast4_fu_280_p1 = $unsigned(sext_ln9_2_fu_272_p1);

assign zext_ln26_2_fu_593_p1 = out_h_0_reg_210_pp0_iter2_reg;

assign zext_ln26_3_fu_374_p1 = shl_ln_fu_366_p3;

assign zext_ln26_6_fu_631_p1 = out_h_reg_768_pp0_iter3_reg;

assign zext_ln26_7_fu_483_p1 = shl_ln26_1_fu_475_p3;

assign zext_ln26_8_fu_536_p1 = add_ln26_reg_824;

assign zext_ln26_9_fu_498_p1 = or_ln26_fu_492_p2;

assign zext_ln26_fu_276_p1 = input_height;

assign zext_ln29_1_fu_580_p1 = select_ln29_1_reg_884;

assign zext_ln29_2_fu_653_p1 = select_ln29_2_reg_922;

assign zext_ln29_fu_560_p1 = select_ln29_reg_873;

assign zext_ln34_1_cast_fu_288_p1 = $unsigned(sext_ln9_fu_266_p1);

assign zext_ln34_2_fu_657_p1 = add_ln34_reg_937;

assign zext_ln34_fu_284_p1 = $unsigned(sext_ln9_1_fu_269_p1);

always @ (posedge ap_clk) begin
    zext_ln26_reg_690[8:7] <= 2'b00;
    zext_ln26_1_cast4_reg_696[13:7] <= 7'b0000000;
    zext_ln34_reg_702[7:6] <= 2'b00;
    zext_ln34_1_cast_reg_708[11:6] <= 6'b000000;
end

endmodule //max_pooling2d_fix16
