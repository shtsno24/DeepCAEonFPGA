// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_depth;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] zext_ln25_fu_215_p1;
reg   [8:0] zext_ln25_reg_458;
wire   [13:0] zext_ln25_1_cast_fu_219_p1;
reg   [13:0] zext_ln25_1_cast_reg_463;
wire   [7:0] zext_ln31_fu_223_p1;
reg   [7:0] zext_ln31_reg_468;
wire   [11:0] zext_ln31_1_cast_fu_227_p1;
reg   [11:0] zext_ln31_1_cast_reg_473;
wire   [3:0] empty_fu_231_p1;
reg   [3:0] empty_reg_478;
wire   [3:0] empty_52_fu_235_p1;
reg   [3:0] empty_52_reg_483;
wire   [4:0] empty_53_fu_239_p1;
reg   [4:0] empty_53_reg_488;
wire   [7:0] next_mul5_fu_243_p2;
reg   [7:0] next_mul5_reg_493;
wire    ap_CS_fsm_state2;
wire   [8:0] next_mul_fu_248_p2;
reg   [8:0] next_mul_reg_498;
wire   [4:0] out_d_fu_258_p2;
reg   [4:0] out_d_reg_506;
wire   [3:0] out_h_fu_269_p2;
reg   [3:0] out_h_reg_514;
wire    ap_CS_fsm_state3;
wire   [8:0] zext_ln25_2_fu_287_p1;
reg   [8:0] zext_ln25_2_reg_519;
wire   [0:0] icmp_ln19_fu_264_p2;
wire   [11:0] tmp3_fu_301_p2;
reg   [11:0] tmp3_reg_524;
wire   [3:0] out_w_fu_311_p2;
reg   [3:0] out_w_reg_532;
wire    ap_CS_fsm_state4;
wire   [11:0] zext_ln25_3_fu_317_p1;
reg   [11:0] zext_ln25_3_reg_537;
wire   [0:0] icmp_ln20_fu_306_p2;
wire   [13:0] zext_ln25_4_fu_329_p1;
reg   [13:0] zext_ln25_4_reg_542;
wire   [0:0] trunc_ln23_fu_333_p1;
reg   [0:0] trunc_ln23_reg_547;
wire    ap_CS_fsm_state5;
wire   [1:0] in_h_fu_343_p2;
reg   [1:0] in_h_reg_555;
wire   [13:0] tmp1_fu_368_p2;
reg   [13:0] tmp1_reg_560;
wire   [0:0] icmp_ln23_fu_337_p2;
wire   [0:0] trunc_ln24_fu_382_p1;
reg   [0:0] trunc_ln24_reg_565;
wire    ap_CS_fsm_state6;
wire   [1:0] in_w_fu_392_p2;
reg   [1:0] in_w_reg_573;
wire   [0:0] icmp_ln24_fu_386_p2;
reg   [4:0] out_d_0_reg_120;
reg   [8:0] phi_mul_reg_131;
reg   [7:0] phi_mul4_reg_143;
reg   [3:0] out_h_0_reg_155;
wire   [0:0] icmp_ln18_fu_253_p2;
reg   [3:0] out_w_0_reg_166;
reg   [1:0] in_h_0_reg_177;
reg   [1:0] in_w_0_reg_188;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln31_1_fu_377_p1;
wire   [63:0] zext_ln25_6_fu_412_p1;
reg   [15:0] buffer_fu_60;
wire   [15:0] buffer_2_fu_439_p3;
wire  signed [4:0] sext_ln9_fu_203_p0;
wire  signed [4:0] sext_ln9_1_fu_207_p0;
wire  signed [6:0] sext_ln9_2_fu_211_p1;
wire  signed [5:0] sext_ln9_1_fu_207_p1;
wire  signed [5:0] sext_ln9_fu_203_p1;
wire  signed [4:0] empty_fu_231_p0;
wire  signed [4:0] empty_52_fu_235_p0;
wire   [4:0] shl_ln_fu_279_p3;
wire   [7:0] zext_ln25_1_fu_275_p1;
wire   [7:0] tmp2_fu_291_p2;
wire   [5:0] tmp3_fu_301_p0;
wire   [7:0] tmp3_fu_301_p1;
wire   [4:0] shl_ln25_1_fu_321_p3;
wire   [8:0] zext_ln25_5_cast_fu_349_p1;
wire   [8:0] tmp4_fu_353_p2;
wire   [8:0] tmp_fu_359_p2;
wire   [8:0] tmp1_fu_368_p0;
wire   [6:0] tmp1_fu_368_p1;
wire   [11:0] add_ln31_fu_373_p2;
wire   [13:0] zext_ln25_5_fu_398_p1;
wire   [13:0] add_ln25_fu_402_p2;
wire   [13:0] add_ln25_1_fu_407_p2;
wire   [0:0] or_ln26_fu_417_p2;
wire   [0:0] icmp_ln26_fu_427_p2;
wire   [0:0] xor_ln26_fu_421_p2;
wire   [0:0] or_ln26_1_fu_433_p2;
reg   [6:0] ap_NS_fsm;
wire   [13:0] tmp1_fu_368_p00;
wire   [11:0] tmp3_fu_301_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_386_p2 == 1'd1))) begin
        in_h_0_reg_177 <= in_h_reg_555;
    end else if (((icmp_ln20_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_h_0_reg_177 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_w_0_reg_188 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_w_0_reg_188 <= in_w_reg_573;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_d_0_reg_120 <= out_d_reg_506;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_120 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_h_0_reg_155 <= 4'd0;
    end else if (((icmp_ln20_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_h_0_reg_155 <= out_h_reg_514;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_w_0_reg_166 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_337_p2 == 1'd1))) begin
        out_w_0_reg_166 <= out_w_reg_532;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul4_reg_143 <= next_mul5_reg_493;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul4_reg_143 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_131 <= next_mul_reg_498;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_131 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_fu_60 <= buffer_2_fu_439_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_52_reg_483 <= empty_52_fu_235_p1;
        empty_53_reg_488 <= empty_53_fu_239_p1;
        empty_reg_478 <= empty_fu_231_p1;
        zext_ln25_1_cast_reg_463[6 : 0] <= zext_ln25_1_cast_fu_219_p1[6 : 0];
        zext_ln25_reg_458[6 : 0] <= zext_ln25_fu_215_p1[6 : 0];
        zext_ln31_1_cast_reg_473[5 : 0] <= zext_ln31_1_cast_fu_227_p1[5 : 0];
        zext_ln31_reg_468[5 : 0] <= zext_ln31_fu_223_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_h_reg_555 <= in_h_fu_343_p2;
        trunc_ln23_reg_547 <= trunc_ln23_fu_333_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_w_reg_573 <= in_w_fu_392_p2;
        trunc_ln24_reg_565 <= trunc_ln24_fu_382_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul5_reg_493 <= next_mul5_fu_243_p2;
        next_mul_reg_498 <= next_mul_fu_248_p2;
        out_d_reg_506 <= out_d_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_514 <= out_h_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_532 <= out_w_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp1_reg_560 <= tmp1_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_264_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp3_reg_524 <= tmp3_fu_301_p2;
        zext_ln25_2_reg_519[4 : 1] <= zext_ln25_2_fu_287_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln25_3_reg_537[3 : 0] <= zext_ln25_3_fu_317_p1[3 : 0];
        zext_ln25_4_reg_542[4 : 1] <= zext_ln25_4_fu_329_p1[4 : 1];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_253_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_253_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_337_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln18_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln19_fu_264_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln20_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln23_fu_337_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_386_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_1_fu_407_p2 = (add_ln25_fu_402_p2 + zext_ln25_4_reg_542);

assign add_ln25_fu_402_p2 = (tmp1_reg_560 + zext_ln25_5_fu_398_p1);

assign add_ln31_fu_373_p2 = (tmp3_reg_524 + zext_ln25_3_reg_537);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign buffer_2_fu_439_p3 = ((or_ln26_1_fu_433_p2[0:0] === 1'b1) ? input_r_q0 : buffer_fu_60);

assign empty_52_fu_235_p0 = output_height;

assign empty_52_fu_235_p1 = empty_52_fu_235_p0[3:0];

assign empty_53_fu_239_p1 = output_depth[4:0];

assign empty_fu_231_p0 = output_width;

assign empty_fu_231_p1 = empty_fu_231_p0[3:0];

assign icmp_ln18_fu_253_p2 = ((out_d_0_reg_120 == empty_53_reg_488) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_264_p2 = ((out_h_0_reg_155 == empty_52_reg_483) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_306_p2 = ((out_w_0_reg_166 == empty_reg_478) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_337_p2 = ((in_h_0_reg_177 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_386_p2 = ((in_w_0_reg_188 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_427_p2 = (($signed(buffer_fu_60) < $signed(input_r_q0)) ? 1'b1 : 1'b0);

assign in_h_fu_343_p2 = (2'd1 + in_h_0_reg_177);

assign in_w_fu_392_p2 = (2'd1 + in_w_0_reg_188);

assign input_r_address0 = zext_ln25_6_fu_412_p1;

assign next_mul5_fu_243_p2 = (phi_mul4_reg_143 + zext_ln31_reg_468);

assign next_mul_fu_248_p2 = (phi_mul_reg_131 + zext_ln25_reg_458);

assign or_ln26_1_fu_433_p2 = (xor_ln26_fu_421_p2 | icmp_ln26_fu_427_p2);

assign or_ln26_fu_417_p2 = (trunc_ln24_reg_565 | trunc_ln23_reg_547);

assign out_d_fu_258_p2 = (out_d_0_reg_120 + 5'd1);

assign out_h_fu_269_p2 = (out_h_0_reg_155 + 4'd1);

assign out_w_fu_311_p2 = (out_w_0_reg_166 + 4'd1);

assign output_r_address0 = zext_ln31_1_fu_377_p1;

assign output_r_d0 = buffer_fu_60;

assign sext_ln9_1_fu_207_p0 = output_height;

assign sext_ln9_1_fu_207_p1 = sext_ln9_1_fu_207_p0;

assign sext_ln9_2_fu_211_p1 = $signed(input_width);

assign sext_ln9_fu_203_p0 = output_width;

assign sext_ln9_fu_203_p1 = sext_ln9_fu_203_p0;

assign shl_ln25_1_fu_321_p3 = {{out_w_0_reg_166}, {1'd0}};

assign shl_ln_fu_279_p3 = {{out_h_0_reg_155}, {1'd0}};

assign tmp1_fu_368_p0 = tmp1_fu_368_p00;

assign tmp1_fu_368_p00 = tmp_fu_359_p2;

assign tmp1_fu_368_p1 = zext_ln25_1_cast_reg_463;

assign tmp1_fu_368_p2 = (tmp1_fu_368_p0 * tmp1_fu_368_p1);

assign tmp2_fu_291_p2 = (zext_ln25_1_fu_275_p1 + phi_mul4_reg_143);

assign tmp3_fu_301_p0 = zext_ln31_1_cast_reg_473;

assign tmp3_fu_301_p1 = tmp3_fu_301_p10;

assign tmp3_fu_301_p10 = tmp2_fu_291_p2;

assign tmp3_fu_301_p2 = (tmp3_fu_301_p0 * tmp3_fu_301_p1);

assign tmp4_fu_353_p2 = (phi_mul_reg_131 + zext_ln25_5_cast_fu_349_p1);

assign tmp_fu_359_p2 = (tmp4_fu_353_p2 + zext_ln25_2_reg_519);

assign trunc_ln23_fu_333_p1 = in_h_0_reg_177[0:0];

assign trunc_ln24_fu_382_p1 = in_w_0_reg_188[0:0];

assign xor_ln26_fu_421_p2 = (or_ln26_fu_417_p2 ^ 1'd1);

assign zext_ln25_1_cast_fu_219_p1 = $unsigned(sext_ln9_2_fu_211_p1);

assign zext_ln25_1_fu_275_p1 = out_h_0_reg_155;

assign zext_ln25_2_fu_287_p1 = shl_ln_fu_279_p3;

assign zext_ln25_3_fu_317_p1 = out_w_0_reg_166;

assign zext_ln25_4_fu_329_p1 = shl_ln25_1_fu_321_p3;

assign zext_ln25_5_cast_fu_349_p1 = in_h_0_reg_177;

assign zext_ln25_5_fu_398_p1 = in_w_0_reg_188;

assign zext_ln25_6_fu_412_p1 = add_ln25_1_fu_407_p2;

assign zext_ln25_fu_215_p1 = input_height;

assign zext_ln31_1_cast_fu_227_p1 = $unsigned(sext_ln9_fu_203_p1);

assign zext_ln31_1_fu_377_p1 = add_ln31_fu_373_p2;

assign zext_ln31_fu_223_p1 = $unsigned(sext_ln9_1_fu_207_p1);

always @ (posedge ap_clk) begin
    zext_ln25_reg_458[8:7] <= 2'b00;
    zext_ln25_1_cast_reg_463[13:7] <= 7'b0000000;
    zext_ln31_reg_468[7:6] <= 2'b00;
    zext_ln31_1_cast_reg_473[11:6] <= 6'b000000;
    zext_ln25_2_reg_519[0] <= 1'b0;
    zext_ln25_2_reg_519[8:5] <= 4'b0000;
    zext_ln25_3_reg_537[11:4] <= 8'b00000000;
    zext_ln25_4_reg_542[0] <= 1'b0;
    zext_ln25_4_reg_542[13:5] <= 9'b000000000;
end

endmodule //max_pooling2d_fix16
