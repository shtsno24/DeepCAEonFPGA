// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_pp0_stage2 = 7'd16;
parameter    ap_ST_fsm_pp0_stage3 = 7'd32;
parameter    ap_ST_fsm_state29 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [5:0] output_depth;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten39_reg_174;
reg   [4:0] out_d_0_reg_186;
reg   [4:0] out_d_0_reg_186_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state15_pp0_stage0_iter3;
wire    ap_block_state19_pp0_stage0_iter4;
wire    ap_block_state23_pp0_stage0_iter5;
wire    ap_block_state27_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [4:0] out_d_0_reg_186_pp0_iter2_reg;
reg   [4:0] out_d_0_reg_186_pp0_iter3_reg;
reg   [4:0] out_d_0_reg_186_pp0_iter4_reg;
reg   [7:0] indvar_flatten_reg_198;
reg   [3:0] out_h_0_reg_209;
reg   [3:0] out_h_0_reg_209_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state12_pp0_stage1_iter2;
wire    ap_block_state16_pp0_stage1_iter3;
wire    ap_block_state20_pp0_stage1_iter4;
wire    ap_block_state24_pp0_stage1_iter5;
wire    ap_block_state28_pp0_stage1_iter6;
wire    ap_block_pp0_stage1_11001;
reg   [3:0] out_h_0_reg_209_pp0_iter2_reg;
reg   [3:0] out_h_0_reg_209_pp0_iter3_reg;
reg   [3:0] out_h_0_reg_209_pp0_iter4_reg;
reg   [3:0] out_w_0_reg_221;
reg   [15:0] reg_233;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln18_reg_703;
reg   [0:0] icmp_ln18_reg_703_pp0_iter2_reg;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state13_pp0_stage2_iter2;
wire    ap_block_state17_pp0_stage2_iter3;
wire    ap_block_state21_pp0_stage2_iter4;
wire    ap_block_state25_pp0_stage2_iter5;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln18_reg_703_pp0_iter3_reg;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state14_pp0_stage3_iter2;
wire    ap_block_state18_pp0_stage3_iter3;
wire    ap_block_state22_pp0_stage3_iter4;
wire    ap_block_state26_pp0_stage3_iter5;
wire    ap_block_pp0_stage3_11001;
reg   [0:0] icmp_ln18_reg_703_pp0_iter4_reg;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] icmp_ln18_reg_703_pp0_iter5_reg;
reg   [15:0] reg_239;
wire   [3:0] empty_fu_250_p1;
reg   [3:0] empty_reg_652;
wire   [7:0] mul_ln9_fu_266_p2;
reg   [7:0] mul_ln9_reg_658;
wire   [8:0] zext_ln28_fu_282_p1;
reg   [8:0] zext_ln28_reg_664;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln28_1_cast4_fu_286_p1;
reg   [13:0] zext_ln28_1_cast4_reg_670;
wire   [7:0] zext_ln34_fu_290_p1;
reg   [7:0] zext_ln34_reg_676;
wire   [11:0] zext_ln34_1_cast_fu_294_p1;
reg   [11:0] zext_ln34_1_cast_reg_682;
wire   [12:0] mul_ln9_1_fu_309_p2;
reg   [12:0] mul_ln9_1_reg_687;
wire   [0:0] icmp_ln20_fu_315_p2;
reg   [0:0] icmp_ln20_reg_692;
wire   [8:0] mul_ln28_fu_324_p2;
reg   [8:0] mul_ln28_reg_697;
wire   [0:0] icmp_ln18_fu_329_p2;
reg   [0:0] icmp_ln18_reg_703_pp0_iter1_reg;
reg   [0:0] icmp_ln18_reg_703_pp0_iter6_reg;
wire   [4:0] out_d_fu_334_p2;
reg   [4:0] out_d_reg_707;
reg   [4:0] out_d_reg_707_pp0_iter1_reg;
reg   [4:0] out_d_reg_707_pp0_iter2_reg;
reg   [4:0] out_d_reg_707_pp0_iter3_reg;
reg   [4:0] out_d_reg_707_pp0_iter4_reg;
wire   [0:0] icmp_ln19_fu_340_p2;
reg   [0:0] icmp_ln19_reg_714;
reg   [0:0] icmp_ln19_reg_714_pp0_iter1_reg;
reg   [0:0] icmp_ln19_reg_714_pp0_iter2_reg;
reg   [0:0] icmp_ln19_reg_714_pp0_iter3_reg;
reg   [0:0] icmp_ln19_reg_714_pp0_iter4_reg;
reg   [0:0] icmp_ln19_reg_714_pp0_iter5_reg;
wire   [7:0] add_ln19_1_fu_345_p2;
reg   [7:0] add_ln19_1_reg_727;
wire   [3:0] select_ln34_fu_351_p3;
reg   [3:0] select_ln34_reg_732;
wire   [8:0] mul_ln28_1_fu_361_p2;
reg   [8:0] mul_ln28_1_reg_738;
wire   [0:0] icmp_ln20_1_fu_366_p2;
reg   [0:0] icmp_ln20_1_reg_744;
wire   [3:0] out_h_fu_371_p2;
reg   [3:0] out_h_reg_749;
reg   [3:0] out_h_reg_749_pp0_iter1_reg;
reg   [3:0] out_h_reg_749_pp0_iter2_reg;
reg   [3:0] out_h_reg_749_pp0_iter3_reg;
reg   [3:0] out_h_reg_749_pp0_iter4_reg;
wire   [8:0] tmp_0_0_fu_388_p2;
reg   [8:0] tmp_0_0_reg_756;
wire   [12:0] add_ln18_fu_393_p2;
reg   [12:0] add_ln18_reg_761;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] select_ln34_12_fu_404_p3;
reg   [0:0] select_ln34_12_reg_766;
reg   [0:0] select_ln34_12_reg_766_pp0_iter1_reg;
reg   [0:0] select_ln34_12_reg_766_pp0_iter2_reg;
reg   [0:0] select_ln34_12_reg_766_pp0_iter3_reg;
reg   [0:0] select_ln34_12_reg_766_pp0_iter4_reg;
wire   [4:0] select_ln18_fu_409_p3;
reg   [4:0] select_ln18_reg_774;
wire   [8:0] tmp_0_0_mid1_fu_426_p2;
reg   [8:0] tmp_0_0_mid1_reg_779;
wire   [7:0] select_ln19_1_fu_432_p3;
reg   [7:0] select_ln19_1_reg_784;
wire   [3:0] select_ln28_fu_447_p3;
reg   [3:0] select_ln28_reg_789;
reg   [3:0] select_ln28_reg_789_pp0_iter2_reg;
reg   [3:0] select_ln28_reg_789_pp0_iter3_reg;
reg   [3:0] select_ln28_reg_789_pp0_iter4_reg;
reg   [3:0] select_ln28_reg_789_pp0_iter5_reg;
wire   [8:0] select_ln28_1_fu_455_p3;
reg   [8:0] select_ln28_1_reg_796;
reg   [8:0] select_ln28_1_reg_796_pp0_iter2_reg;
wire   [3:0] select_ln19_fu_461_p3;
reg   [3:0] select_ln19_reg_802;
reg    ap_enable_reg_pp0_iter1;
wire   [13:0] mul_ln28_2_fu_469_p2;
reg   [13:0] mul_ln28_2_reg_807;
wire   [3:0] out_w_fu_474_p2;
reg   [3:0] out_w_reg_813;
wire   [13:0] zext_ln28_7_fu_486_p1;
reg   [13:0] zext_ln28_7_reg_818;
reg   [13:0] zext_ln28_7_reg_818_pp0_iter2_reg;
wire   [13:0] add_ln28_fu_490_p2;
reg   [13:0] add_ln28_reg_823;
reg   [13:0] add_ln28_reg_823_pp0_iter2_reg;
wire   [13:0] zext_ln28_9_fu_501_p1;
reg   [13:0] zext_ln28_9_reg_829;
reg   [13:0] zext_ln28_9_reg_829_pp0_iter2_reg;
wire   [13:0] add_ln28_1_fu_505_p2;
reg   [13:0] add_ln28_1_reg_834;
reg   [13:0] add_ln28_1_reg_834_pp0_iter2_reg;
wire   [8:0] add_ln28_4_fu_518_p2;
reg   [8:0] add_ln28_4_reg_850;
wire   [13:0] mul_ln28_3_fu_526_p2;
reg   [13:0] mul_ln28_3_reg_855;
wire   [0:0] grp_fu_244_p2;
reg   [0:0] icmp_ln29_reg_861;
wire   [13:0] select_ln29_fu_531_p3;
reg   [13:0] select_ln29_reg_866;
reg   [13:0] select_ln29_reg_866_pp0_iter3_reg;
wire   [13:0] add_ln28_2_fu_536_p2;
reg   [13:0] add_ln28_2_reg_872;
reg   [13:0] add_ln28_2_reg_872_pp0_iter3_reg;
wire   [13:0] add_ln28_3_fu_540_p2;
reg   [13:0] add_ln28_3_reg_878;
reg   [13:0] add_ln28_3_reg_878_pp0_iter3_reg;
reg   [13:0] add_ln28_3_reg_878_pp0_iter4_reg;
reg   [0:0] icmp_ln29_1_reg_894;
wire   [13:0] select_ln29_1_fu_552_p3;
reg   [13:0] select_ln29_1_reg_899;
reg   [13:0] select_ln29_1_reg_899_pp0_iter5_reg;
wire   [7:0] mul_ln34_1_fu_568_p2;
reg   [7:0] mul_ln34_1_reg_915;
wire   [7:0] mul_ln34_fu_577_p2;
reg   [7:0] mul_ln34_reg_921;
reg   [0:0] icmp_ln29_2_reg_927;
reg    ap_enable_reg_pp0_iter5;
wire   [7:0] tmp2_fu_586_p2;
reg   [7:0] tmp2_reg_932;
wire   [7:0] tmp2_mid1_fu_599_p2;
reg   [7:0] tmp2_mid1_reg_937;
wire   [13:0] select_ln29_2_fu_605_p3;
reg   [13:0] select_ln29_2_reg_942;
wire   [7:0] select_ln28_2_fu_615_p3;
reg   [7:0] select_ln28_2_reg_947;
wire   [11:0] grp_fu_635_p3;
reg   [11:0] add_ln34_reg_957;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter5_state24;
reg   [12:0] ap_phi_mux_indvar_flatten39_phi_fu_178_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_out_d_0_phi_fu_190_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_202_p4;
reg   [3:0] ap_phi_mux_out_h_0_phi_fu_213_p4;
wire    ap_block_pp0_stage1;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_225_p4;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln28_8_fu_510_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln28_10_fu_514_p1;
wire   [63:0] zext_ln29_fu_544_p1;
wire   [63:0] zext_ln28_11_fu_548_p1;
wire   [63:0] zext_ln29_19_fu_557_p1;
wire   [63:0] zext_ln28_12_fu_561_p1;
wire   [63:0] zext_ln29_20_fu_621_p1;
wire   [63:0] zext_ln34_9_fu_631_p1;
wire  signed [4:0] empty_fu_250_p0;
wire  signed [4:0] empty_42_fu_254_p0;
wire   [3:0] empty_42_fu_254_p1;
wire   [3:0] mul_ln9_fu_266_p0;
wire   [3:0] mul_ln9_fu_266_p1;
wire  signed [4:0] sext_ln9_fu_272_p0;
wire  signed [4:0] sext_ln9_1_fu_275_p0;
wire  signed [6:0] sext_ln9_2_fu_278_p1;
wire  signed [5:0] sext_ln9_1_fu_275_p1;
wire  signed [5:0] sext_ln9_fu_272_p1;
wire   [4:0] empty_43_fu_298_p1;
wire   [4:0] mul_ln9_1_fu_309_p0;
wire   [7:0] mul_ln9_1_fu_309_p1;
wire   [4:0] mul_ln28_fu_324_p0;
wire   [6:0] mul_ln28_fu_324_p1;
wire   [4:0] mul_ln28_1_fu_361_p0;
wire   [6:0] mul_ln28_1_fu_361_p1;
wire   [4:0] shl_ln_fu_376_p3;
wire   [8:0] zext_ln28_3_fu_384_p1;
wire   [4:0] shl_ln28_mid1_fu_415_p3;
wire   [8:0] zext_ln28_13_fu_422_p1;
wire   [8:0] select_ln34_8_fu_399_p3;
wire   [0:0] or_ln28_1_fu_443_p2;
wire   [8:0] select_ln34_10_fu_438_p3;
wire   [6:0] mul_ln28_2_fu_469_p0;
wire   [8:0] mul_ln28_2_fu_469_p1;
wire   [4:0] shl_ln28_1_fu_479_p3;
wire   [4:0] or_ln28_fu_495_p2;
wire   [6:0] mul_ln28_3_fu_526_p0;
wire   [8:0] mul_ln28_3_fu_526_p1;
wire   [4:0] mul_ln34_1_fu_568_p0;
wire   [5:0] mul_ln34_1_fu_568_p1;
wire   [4:0] mul_ln34_fu_577_p0;
wire   [5:0] mul_ln34_fu_577_p1;
wire   [7:0] zext_ln28_2_fu_582_p1;
wire   [7:0] zext_ln28_6_fu_596_p1;
wire   [7:0] select_ln34_9_fu_591_p3;
wire   [7:0] select_ln34_11_fu_610_p3;
wire   [5:0] grp_fu_635_p0;
wire   [7:0] grp_fu_635_p1;
wire   [3:0] grp_fu_635_p2;
wire    ap_CS_fsm_state29;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_635_p10;
wire   [11:0] grp_fu_635_p20;
wire   [8:0] mul_ln28_1_fu_361_p00;
wire   [13:0] mul_ln28_2_fu_469_p10;
wire   [13:0] mul_ln28_3_fu_526_p10;
wire   [8:0] mul_ln28_fu_324_p00;
wire   [7:0] mul_ln34_1_fu_568_p00;
wire   [7:0] mul_ln34_fu_577_p00;
wire   [12:0] mul_ln9_1_fu_309_p00;
wire   [12:0] mul_ln9_1_fu_309_p10;
wire   [7:0] mul_ln9_fu_266_p00;
wire   [7:0] mul_ln9_fu_266_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

network_mac_muladd_6ns_8ns_4ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
network_mac_muladd_6ns_8ns_4ns_12_1_1_U32(
    .din0(grp_fu_635_p0),
    .din1(grp_fu_635_p1),
    .din2(grp_fu_635_p2),
    .dout(grp_fu_635_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln18_reg_703 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter5_state24)))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter5_state24) & (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter4;
        end else if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703 == 1'd0))) begin
        indvar_flatten39_reg_174 <= add_ln18_reg_761;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten39_reg_174 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703 == 1'd0))) begin
        indvar_flatten_reg_198 <= select_ln19_1_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_198 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703 == 1'd0))) begin
        out_d_0_reg_186 <= select_ln18_reg_774;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d_0_reg_186 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703_pp0_iter1_reg == 1'd0))) begin
        out_h_0_reg_209 <= select_ln19_reg_802;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_0_reg_209 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703_pp0_iter1_reg == 1'd0))) begin
        out_w_0_reg_221 <= out_w_reg_813;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_w_0_reg_221 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln18_reg_703_pp0_iter5_reg == 1'd0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln18_reg_703_pp0_iter4_reg == 1'd0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703_pp0_iter3_reg == 1'd0)))) begin
        reg_233 <= input_r_q0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln18_reg_703_pp0_iter2_reg == 1'd0))) begin
        reg_233 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln18_reg_703_pp0_iter4_reg == 1'd0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703_pp0_iter3_reg == 1'd0)))) begin
        reg_239 <= input_r_q1;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln18_reg_703_pp0_iter2_reg == 1'd0))) begin
        reg_239 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln18_reg_761 <= add_ln18_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_fu_329_p2 == 1'd0))) begin
        add_ln19_1_reg_727 <= add_ln19_1_fu_345_p2;
        icmp_ln19_reg_714 <= icmp_ln19_fu_340_p2;
        out_d_reg_707 <= out_d_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703_pp0_iter1_reg == 1'd0))) begin
        add_ln28_1_reg_834 <= add_ln28_1_fu_505_p2;
        add_ln28_reg_823 <= add_ln28_fu_490_p2;
        zext_ln28_7_reg_818[4 : 1] <= zext_ln28_7_fu_486_p1[4 : 1];
        zext_ln28_9_reg_829[4 : 1] <= zext_ln28_9_fu_501_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln28_1_reg_834_pp0_iter2_reg <= add_ln28_1_reg_834;
        add_ln28_reg_823_pp0_iter2_reg <= add_ln28_reg_823;
        out_h_reg_749_pp0_iter1_reg <= out_h_reg_749;
        out_h_reg_749_pp0_iter2_reg <= out_h_reg_749_pp0_iter1_reg;
        out_h_reg_749_pp0_iter3_reg <= out_h_reg_749_pp0_iter2_reg;
        out_h_reg_749_pp0_iter4_reg <= out_h_reg_749_pp0_iter3_reg;
        zext_ln28_7_reg_818_pp0_iter2_reg[4 : 1] <= zext_ln28_7_reg_818[4 : 1];
        zext_ln28_9_reg_829_pp0_iter2_reg[4 : 1] <= zext_ln28_9_reg_829[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln18_reg_703_pp0_iter2_reg == 1'd0))) begin
        add_ln28_2_reg_872 <= add_ln28_2_fu_536_p2;
        add_ln28_3_reg_878 <= add_ln28_3_fu_540_p2;
        select_ln29_reg_866 <= select_ln29_fu_531_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln28_2_reg_872_pp0_iter3_reg <= add_ln28_2_reg_872;
        add_ln28_3_reg_878_pp0_iter3_reg <= add_ln28_3_reg_878;
        add_ln28_3_reg_878_pp0_iter4_reg <= add_ln28_3_reg_878_pp0_iter3_reg;
        select_ln29_reg_866_pp0_iter3_reg <= select_ln29_reg_866;
        select_ln34_12_reg_766_pp0_iter1_reg <= select_ln34_12_reg_766;
        select_ln34_12_reg_766_pp0_iter2_reg <= select_ln34_12_reg_766_pp0_iter1_reg;
        select_ln34_12_reg_766_pp0_iter3_reg <= select_ln34_12_reg_766_pp0_iter2_reg;
        select_ln34_12_reg_766_pp0_iter4_reg <= select_ln34_12_reg_766_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_703_pp0_iter2_reg == 1'd0))) begin
        add_ln28_4_reg_850 <= add_ln28_4_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln18_reg_703_pp0_iter5_reg == 1'd0))) begin
        add_ln34_reg_957 <= grp_fu_635_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_652 <= empty_fu_250_p1;
        mul_ln9_reg_658 <= mul_ln9_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln18_reg_703 <= icmp_ln18_fu_329_p2;
        icmp_ln18_reg_703_pp0_iter1_reg <= icmp_ln18_reg_703;
        icmp_ln18_reg_703_pp0_iter2_reg <= icmp_ln18_reg_703_pp0_iter1_reg;
        icmp_ln18_reg_703_pp0_iter3_reg <= icmp_ln18_reg_703_pp0_iter2_reg;
        icmp_ln18_reg_703_pp0_iter4_reg <= icmp_ln18_reg_703_pp0_iter3_reg;
        icmp_ln18_reg_703_pp0_iter5_reg <= icmp_ln18_reg_703_pp0_iter4_reg;
        icmp_ln18_reg_703_pp0_iter6_reg <= icmp_ln18_reg_703_pp0_iter5_reg;
        icmp_ln19_reg_714_pp0_iter1_reg <= icmp_ln19_reg_714;
        icmp_ln19_reg_714_pp0_iter2_reg <= icmp_ln19_reg_714_pp0_iter1_reg;
        icmp_ln19_reg_714_pp0_iter3_reg <= icmp_ln19_reg_714_pp0_iter2_reg;
        icmp_ln19_reg_714_pp0_iter4_reg <= icmp_ln19_reg_714_pp0_iter3_reg;
        icmp_ln19_reg_714_pp0_iter5_reg <= icmp_ln19_reg_714_pp0_iter4_reg;
        mul_ln28_reg_697 <= mul_ln28_fu_324_p2;
        mul_ln34_reg_921 <= mul_ln34_fu_577_p2;
        out_d_0_reg_186_pp0_iter1_reg <= out_d_0_reg_186;
        out_d_0_reg_186_pp0_iter2_reg <= out_d_0_reg_186_pp0_iter1_reg;
        out_d_0_reg_186_pp0_iter3_reg <= out_d_0_reg_186_pp0_iter2_reg;
        out_d_0_reg_186_pp0_iter4_reg <= out_d_0_reg_186_pp0_iter3_reg;
        out_d_reg_707_pp0_iter1_reg <= out_d_reg_707;
        out_d_reg_707_pp0_iter2_reg <= out_d_reg_707_pp0_iter1_reg;
        out_d_reg_707_pp0_iter3_reg <= out_d_reg_707_pp0_iter2_reg;
        out_d_reg_707_pp0_iter4_reg <= out_d_reg_707_pp0_iter3_reg;
        select_ln28_1_reg_796_pp0_iter2_reg <= select_ln28_1_reg_796;
        select_ln28_reg_789_pp0_iter2_reg <= select_ln28_reg_789;
        select_ln28_reg_789_pp0_iter3_reg <= select_ln28_reg_789_pp0_iter2_reg;
        select_ln28_reg_789_pp0_iter4_reg <= select_ln28_reg_789_pp0_iter3_reg;
        select_ln28_reg_789_pp0_iter5_reg <= select_ln28_reg_789_pp0_iter4_reg;
        select_ln29_1_reg_899_pp0_iter5_reg <= select_ln29_1_reg_899;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln19_reg_714 == 1'd0) & (icmp_ln18_reg_703 == 1'd0))) begin
        icmp_ln20_1_reg_744 <= icmp_ln20_1_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln20_reg_692 <= icmp_ln20_fu_315_p2;
        mul_ln9_1_reg_687 <= mul_ln9_1_fu_309_p2;
        zext_ln28_1_cast4_reg_670[6 : 0] <= zext_ln28_1_cast4_fu_286_p1[6 : 0];
        zext_ln28_reg_664[6 : 0] <= zext_ln28_fu_282_p1[6 : 0];
        zext_ln34_1_cast_reg_682[5 : 0] <= zext_ln34_1_cast_fu_294_p1[5 : 0];
        zext_ln34_reg_676[5 : 0] <= zext_ln34_fu_290_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln18_reg_703_pp0_iter3_reg == 1'd0))) begin
        icmp_ln29_1_reg_894 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln18_reg_703_pp0_iter4_reg == 1'd0))) begin
        icmp_ln29_2_reg_927 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703_pp0_iter2_reg == 1'd0))) begin
        icmp_ln29_reg_861 <= grp_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_703 == 1'd0))) begin
        mul_ln28_1_reg_738 <= mul_ln28_1_fu_361_p2;
        select_ln34_reg_732 <= select_ln34_fu_351_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_703_pp0_iter1_reg == 1'd0))) begin
        mul_ln28_2_reg_807 <= mul_ln28_2_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703_pp0_iter2_reg == 1'd0))) begin
        mul_ln28_3_reg_855 <= mul_ln28_3_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703_pp0_iter4_reg == 1'd0))) begin
        mul_ln34_1_reg_915 <= mul_ln34_1_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_h_0_reg_209_pp0_iter1_reg <= out_h_0_reg_209;
        out_h_0_reg_209_pp0_iter2_reg <= out_h_0_reg_209_pp0_iter1_reg;
        out_h_0_reg_209_pp0_iter3_reg <= out_h_0_reg_209_pp0_iter2_reg;
        out_h_0_reg_209_pp0_iter4_reg <= out_h_0_reg_209_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703 == 1'd0))) begin
        out_h_reg_749 <= out_h_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703_pp0_iter1_reg == 1'd0))) begin
        out_w_reg_813 <= out_w_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln18_reg_703 == 1'd0))) begin
        select_ln18_reg_774 <= select_ln18_fu_409_p3;
        select_ln19_1_reg_784 <= select_ln19_1_fu_432_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703 == 1'd0))) begin
        select_ln19_reg_802 <= select_ln19_fu_461_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_703 == 1'd0))) begin
        select_ln28_1_reg_796 <= select_ln28_1_fu_455_p3;
        select_ln28_reg_789 <= select_ln28_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_703_pp0_iter5_reg == 1'd0))) begin
        select_ln28_2_reg_947 <= select_ln28_2_fu_615_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln18_reg_703_pp0_iter3_reg == 1'd0))) begin
        select_ln29_1_reg_899 <= select_ln29_1_fu_552_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_703_pp0_iter5_reg == 1'd0))) begin
        select_ln29_2_reg_942 <= select_ln29_2_fu_605_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln18_reg_703 == 1'd0))) begin
        select_ln34_12_reg_766 <= select_ln34_12_fu_404_p3;
        tmp_0_0_mid1_reg_779 <= tmp_0_0_mid1_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln34_12_reg_766_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln18_reg_703_pp0_iter5_reg == 1'd0))) begin
        tmp2_mid1_reg_937 <= tmp2_mid1_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (select_ln34_12_reg_766_pp0_iter4_reg == 1'd0) & (icmp_ln19_reg_714_pp0_iter5_reg == 1'd0))) begin
        tmp2_reg_932 <= tmp2_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln19_reg_714 == 1'd0))) begin
        tmp_0_0_reg_756 <= tmp_0_0_fu_388_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
        ap_condition_pp0_exit_iter5_state24 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter5_state24 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703 == 1'd0))) begin
        ap_phi_mux_indvar_flatten39_phi_fu_178_p4 = add_ln18_reg_761;
    end else begin
        ap_phi_mux_indvar_flatten39_phi_fu_178_p4 = indvar_flatten39_reg_174;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_202_p4 = select_ln19_1_reg_784;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_202_p4 = indvar_flatten_reg_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703 == 1'd0))) begin
        ap_phi_mux_out_d_0_phi_fu_190_p4 = select_ln18_reg_774;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_190_p4 = out_d_0_reg_186;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln18_reg_703_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_out_h_0_phi_fu_213_p4 = select_ln19_reg_802;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_213_p4 = out_h_0_reg_209;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln18_reg_703_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_out_w_0_phi_fu_225_p4 = out_w_reg_813;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_225_p4 = out_w_0_reg_221;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln29_20_fu_621_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_r_address0 = zext_ln29_19_fu_557_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_address0 = zext_ln29_fu_544_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln28_10_fu_514_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        input_r_address1 = zext_ln28_12_fu_561_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        input_r_address1 = zext_ln28_11_fu_548_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address1 = zext_ln28_8_fu_510_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln18_reg_703_pp0_iter6_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_393_p2 = (indvar_flatten39_reg_174 + 13'd1);

assign add_ln19_1_fu_345_p2 = (ap_phi_mux_indvar_flatten_phi_fu_202_p4 + 8'd1);

assign add_ln28_1_fu_505_p2 = (mul_ln28_2_reg_807 + zext_ln28_9_fu_501_p1);

assign add_ln28_2_fu_536_p2 = (mul_ln28_3_reg_855 + zext_ln28_7_reg_818_pp0_iter2_reg);

assign add_ln28_3_fu_540_p2 = (mul_ln28_3_reg_855 + zext_ln28_9_reg_829_pp0_iter2_reg);

assign add_ln28_4_fu_518_p2 = (select_ln28_1_reg_796_pp0_iter2_reg + 9'd1);

assign add_ln28_fu_490_p2 = (mul_ln28_2_reg_807 + zext_ln28_7_fu_486_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_42_fu_254_p0 = output_height;

assign empty_42_fu_254_p1 = empty_42_fu_254_p0[3:0];

assign empty_43_fu_298_p1 = output_depth[4:0];

assign empty_fu_250_p0 = output_width;

assign empty_fu_250_p1 = empty_fu_250_p0[3:0];

assign grp_fu_244_p2 = (($signed(reg_233) < $signed(reg_239)) ? 1'b1 : 1'b0);

assign grp_fu_635_p0 = zext_ln34_1_cast_reg_682;

assign grp_fu_635_p1 = grp_fu_635_p10;

assign grp_fu_635_p10 = select_ln28_2_reg_947;

assign grp_fu_635_p2 = grp_fu_635_p20;

assign grp_fu_635_p20 = select_ln28_reg_789_pp0_iter5_reg;

assign icmp_ln18_fu_329_p2 = ((ap_phi_mux_indvar_flatten39_phi_fu_178_p4 == mul_ln9_1_reg_687) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_340_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_202_p4 == mul_ln9_reg_658) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_366_p2 = ((ap_phi_mux_out_w_0_phi_fu_225_p4 == empty_reg_652) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_315_p2 = ((empty_reg_652 == 4'd0) ? 1'b1 : 1'b0);

assign mul_ln28_1_fu_361_p0 = mul_ln28_1_fu_361_p00;

assign mul_ln28_1_fu_361_p00 = out_d_reg_707;

assign mul_ln28_1_fu_361_p1 = zext_ln28_reg_664;

assign mul_ln28_1_fu_361_p2 = (mul_ln28_1_fu_361_p0 * mul_ln28_1_fu_361_p1);

assign mul_ln28_2_fu_469_p0 = zext_ln28_1_cast4_reg_670;

assign mul_ln28_2_fu_469_p1 = mul_ln28_2_fu_469_p10;

assign mul_ln28_2_fu_469_p10 = select_ln28_1_reg_796;

assign mul_ln28_2_fu_469_p2 = (mul_ln28_2_fu_469_p0 * mul_ln28_2_fu_469_p1);

assign mul_ln28_3_fu_526_p0 = zext_ln28_1_cast4_reg_670;

assign mul_ln28_3_fu_526_p1 = mul_ln28_3_fu_526_p10;

assign mul_ln28_3_fu_526_p10 = add_ln28_4_reg_850;

assign mul_ln28_3_fu_526_p2 = (mul_ln28_3_fu_526_p0 * mul_ln28_3_fu_526_p1);

assign mul_ln28_fu_324_p0 = mul_ln28_fu_324_p00;

assign mul_ln28_fu_324_p00 = ap_phi_mux_out_d_0_phi_fu_190_p4;

assign mul_ln28_fu_324_p1 = zext_ln28_reg_664;

assign mul_ln28_fu_324_p2 = (mul_ln28_fu_324_p0 * mul_ln28_fu_324_p1);

assign mul_ln34_1_fu_568_p0 = mul_ln34_1_fu_568_p00;

assign mul_ln34_1_fu_568_p00 = out_d_reg_707_pp0_iter4_reg;

assign mul_ln34_1_fu_568_p1 = zext_ln34_reg_676;

assign mul_ln34_1_fu_568_p2 = (mul_ln34_1_fu_568_p0 * mul_ln34_1_fu_568_p1);

assign mul_ln34_fu_577_p0 = mul_ln34_fu_577_p00;

assign mul_ln34_fu_577_p00 = out_d_0_reg_186_pp0_iter4_reg;

assign mul_ln34_fu_577_p1 = zext_ln34_reg_676;

assign mul_ln34_fu_577_p2 = (mul_ln34_fu_577_p0 * mul_ln34_fu_577_p1);

assign mul_ln9_1_fu_309_p0 = mul_ln9_1_fu_309_p00;

assign mul_ln9_1_fu_309_p00 = empty_43_fu_298_p1;

assign mul_ln9_1_fu_309_p1 = mul_ln9_1_fu_309_p10;

assign mul_ln9_1_fu_309_p10 = mul_ln9_reg_658;

assign mul_ln9_1_fu_309_p2 = (mul_ln9_1_fu_309_p0 * mul_ln9_1_fu_309_p1);

assign mul_ln9_fu_266_p0 = mul_ln9_fu_266_p00;

assign mul_ln9_fu_266_p00 = empty_42_fu_254_p1;

assign mul_ln9_fu_266_p1 = mul_ln9_fu_266_p10;

assign mul_ln9_fu_266_p10 = empty_fu_250_p1;

assign mul_ln9_fu_266_p2 = (mul_ln9_fu_266_p0 * mul_ln9_fu_266_p1);

assign or_ln28_1_fu_443_p2 = (select_ln34_12_reg_766 | icmp_ln19_reg_714);

assign or_ln28_fu_495_p2 = (shl_ln28_1_fu_479_p3 | 5'd1);

assign out_d_fu_334_p2 = (ap_phi_mux_out_d_0_phi_fu_190_p4 + 5'd1);

assign out_h_fu_371_p2 = (select_ln34_reg_732 + 4'd1);

assign out_w_fu_474_p2 = (select_ln28_reg_789 + 4'd1);

assign output_r_address0 = zext_ln34_9_fu_631_p1;

assign output_r_d0 = reg_233;

assign select_ln18_fu_409_p3 = ((icmp_ln19_reg_714[0:0] === 1'b1) ? out_d_reg_707 : out_d_0_reg_186);

assign select_ln19_1_fu_432_p3 = ((icmp_ln19_reg_714[0:0] === 1'b1) ? 8'd1 : add_ln19_1_reg_727);

assign select_ln19_fu_461_p3 = ((select_ln34_12_reg_766[0:0] === 1'b1) ? out_h_reg_749 : select_ln34_reg_732);

assign select_ln28_1_fu_455_p3 = ((select_ln34_12_reg_766[0:0] === 1'b1) ? tmp_0_0_mid1_reg_779 : select_ln34_10_fu_438_p3);

assign select_ln28_2_fu_615_p3 = ((select_ln34_12_reg_766_pp0_iter4_reg[0:0] === 1'b1) ? tmp2_mid1_reg_937 : select_ln34_11_fu_610_p3);

assign select_ln28_fu_447_p3 = ((or_ln28_1_fu_443_p2[0:0] === 1'b1) ? 4'd0 : out_w_0_reg_221);

assign select_ln29_1_fu_552_p3 = ((icmp_ln29_1_reg_894[0:0] === 1'b1) ? add_ln28_2_reg_872_pp0_iter3_reg : select_ln29_reg_866_pp0_iter3_reg);

assign select_ln29_2_fu_605_p3 = ((icmp_ln29_2_reg_927[0:0] === 1'b1) ? add_ln28_3_reg_878_pp0_iter4_reg : select_ln29_1_reg_899_pp0_iter5_reg);

assign select_ln29_fu_531_p3 = ((icmp_ln29_reg_861[0:0] === 1'b1) ? add_ln28_1_reg_834_pp0_iter2_reg : add_ln28_reg_823_pp0_iter2_reg);

assign select_ln34_10_fu_438_p3 = ((icmp_ln19_reg_714[0:0] === 1'b1) ? mul_ln28_1_reg_738 : tmp_0_0_reg_756);

assign select_ln34_11_fu_610_p3 = ((icmp_ln19_reg_714_pp0_iter5_reg[0:0] === 1'b1) ? mul_ln34_1_reg_915 : tmp2_reg_932);

assign select_ln34_12_fu_404_p3 = ((icmp_ln19_reg_714[0:0] === 1'b1) ? icmp_ln20_reg_692 : icmp_ln20_1_reg_744);

assign select_ln34_8_fu_399_p3 = ((icmp_ln19_reg_714[0:0] === 1'b1) ? mul_ln28_1_reg_738 : mul_ln28_reg_697);

assign select_ln34_9_fu_591_p3 = ((icmp_ln19_reg_714_pp0_iter5_reg[0:0] === 1'b1) ? mul_ln34_1_reg_915 : mul_ln34_reg_921);

assign select_ln34_fu_351_p3 = ((icmp_ln19_reg_714[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_h_0_phi_fu_213_p4);

assign sext_ln9_1_fu_275_p0 = output_height;

assign sext_ln9_1_fu_275_p1 = sext_ln9_1_fu_275_p0;

assign sext_ln9_2_fu_278_p1 = $signed(input_width);

assign sext_ln9_fu_272_p0 = output_width;

assign sext_ln9_fu_272_p1 = sext_ln9_fu_272_p0;

assign shl_ln28_1_fu_479_p3 = {{select_ln28_reg_789}, {1'd0}};

assign shl_ln28_mid1_fu_415_p3 = {{out_h_reg_749}, {1'd0}};

assign shl_ln_fu_376_p3 = {{out_h_0_reg_209}, {1'd0}};

assign tmp2_fu_586_p2 = (zext_ln28_2_fu_582_p1 + mul_ln34_reg_921);

assign tmp2_mid1_fu_599_p2 = (zext_ln28_6_fu_596_p1 + select_ln34_9_fu_591_p3);

assign tmp_0_0_fu_388_p2 = (zext_ln28_3_fu_384_p1 + mul_ln28_reg_697);

assign tmp_0_0_mid1_fu_426_p2 = (zext_ln28_13_fu_422_p1 + select_ln34_8_fu_399_p3);

assign zext_ln28_10_fu_514_p1 = add_ln28_1_reg_834;

assign zext_ln28_11_fu_548_p1 = add_ln28_2_reg_872;

assign zext_ln28_12_fu_561_p1 = add_ln28_3_reg_878_pp0_iter3_reg;

assign zext_ln28_13_fu_422_p1 = shl_ln28_mid1_fu_415_p3;

assign zext_ln28_1_cast4_fu_286_p1 = $unsigned(sext_ln9_2_fu_278_p1);

assign zext_ln28_2_fu_582_p1 = out_h_0_reg_209_pp0_iter4_reg;

assign zext_ln28_3_fu_384_p1 = shl_ln_fu_376_p3;

assign zext_ln28_6_fu_596_p1 = out_h_reg_749_pp0_iter4_reg;

assign zext_ln28_7_fu_486_p1 = shl_ln28_1_fu_479_p3;

assign zext_ln28_8_fu_510_p1 = add_ln28_reg_823;

assign zext_ln28_9_fu_501_p1 = or_ln28_fu_495_p2;

assign zext_ln28_fu_282_p1 = input_height;

assign zext_ln29_19_fu_557_p1 = select_ln29_1_reg_899;

assign zext_ln29_20_fu_621_p1 = select_ln29_2_reg_942;

assign zext_ln29_fu_544_p1 = select_ln29_reg_866;

assign zext_ln34_1_cast_fu_294_p1 = $unsigned(sext_ln9_fu_272_p1);

assign zext_ln34_9_fu_631_p1 = add_ln34_reg_957;

assign zext_ln34_fu_290_p1 = $unsigned(sext_ln9_1_fu_275_p1);

always @ (posedge ap_clk) begin
    zext_ln28_reg_664[8:7] <= 2'b00;
    zext_ln28_1_cast4_reg_670[13:7] <= 7'b0000000;
    zext_ln34_reg_676[7:6] <= 2'b00;
    zext_ln34_1_cast_reg_682[11:6] <= 6'b000000;
    zext_ln28_7_reg_818[0] <= 1'b0;
    zext_ln28_7_reg_818[13:5] <= 9'b000000000;
    zext_ln28_7_reg_818_pp0_iter2_reg[0] <= 1'b0;
    zext_ln28_7_reg_818_pp0_iter2_reg[13:5] <= 9'b000000000;
    zext_ln28_9_reg_829[0] <= 1'b1;
    zext_ln28_9_reg_829[13:5] <= 9'b000000000;
    zext_ln28_9_reg_829_pp0_iter2_reg[0] <= 1'b1;
    zext_ln28_9_reg_829_pp0_iter2_reg[13:5] <= 9'b000000000;
end

endmodule //max_pooling2d_fix16
