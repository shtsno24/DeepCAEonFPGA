// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_pp0_stage0 = 13'd128;
parameter    ap_ST_fsm_pp0_stage1 = 13'd256;
parameter    ap_ST_fsm_pp0_stage2 = 13'd512;
parameter    ap_ST_fsm_pp0_stage3 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage4 = 13'd2048;
parameter    ap_ST_fsm_state18 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [6:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [6:0] kernel_address1;
output   kernel_ce1;
input  [15:0] kernel_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg[6:0] kernel_address0;
reg kernel_ce0;
reg[6:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] indvar_flatten_reg_324;
reg   [3:0] out_h_0_reg_335;
reg   [3:0] out_w_0_reg_346;
reg  signed [15:0] reg_357;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state10_pp0_stage2_iter0;
wire    ap_block_state15_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln32_reg_1208;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state11_pp0_stage3_iter0;
wire    ap_block_state16_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state12_pp0_stage4_iter0;
wire    ap_block_state17_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state8_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state9_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln32_reg_1208_pp0_iter1_reg;
reg  signed [15:0] reg_362;
wire   [6:0] zext_ln40_fu_367_p1;
reg   [6:0] zext_ln40_reg_1008;
wire   [10:0] zext_ln40_1_cast23_fu_371_p1;
reg   [10:0] zext_ln40_1_cast23_reg_1013;
wire   [6:0] zext_ln48_fu_375_p1;
reg   [6:0] zext_ln48_reg_1020;
wire   [10:0] zext_ln48_1_cast_fu_379_p1;
reg   [10:0] zext_ln48_1_cast_reg_1025;
wire   [3:0] empty_fu_383_p1;
reg   [3:0] empty_reg_1030;
wire   [7:0] bound_fu_399_p2;
reg   [7:0] bound_reg_1035;
wire   [6:0] add_ln23_fu_405_p2;
reg   [6:0] add_ln23_reg_1040;
wire    ap_CS_fsm_state2;
wire   [6:0] add_ln23_3_fu_410_p2;
reg   [6:0] add_ln23_3_reg_1045;
wire   [3:0] out_d_fu_421_p2;
reg   [3:0] out_d_reg_1053;
wire   [2:0] trunc_ln27_fu_431_p1;
reg   [2:0] trunc_ln27_reg_1058;
wire   [0:0] icmp_ln23_fu_415_p2;
wire   [5:0] add_ln27_fu_443_p2;
reg   [5:0] add_ln27_reg_1063;
wire   [6:0] zext_ln27_23_fu_454_p1;
reg   [6:0] zext_ln27_23_reg_1073;
wire    ap_CS_fsm_state3;
reg   [15:0] kernel_load_reg_1083;
reg   [15:0] kernel_load_1_reg_1098;
wire    ap_CS_fsm_state4;
reg   [15:0] kernel_load_2_reg_1103;
reg   [15:0] kernel_load_3_reg_1118;
wire    ap_CS_fsm_state5;
reg   [15:0] kernel_load_4_reg_1123;
reg   [15:0] kernel_load_5_reg_1138;
wire    ap_CS_fsm_state6;
reg   [15:0] kernel_load_6_reg_1143;
wire  signed [29:0] sext_ln27_fu_539_p1;
reg  signed [29:0] sext_ln27_reg_1158;
wire    ap_CS_fsm_state7;
wire  signed [29:0] sext_ln27_8_fu_542_p1;
reg  signed [29:0] sext_ln27_8_reg_1163;
wire  signed [29:0] sext_ln27_9_fu_545_p1;
reg  signed [29:0] sext_ln27_9_reg_1168;
wire  signed [29:0] sext_ln27_10_fu_548_p1;
reg  signed [29:0] sext_ln27_10_reg_1173;
wire  signed [29:0] sext_ln27_11_fu_551_p1;
reg  signed [29:0] sext_ln27_11_reg_1178;
wire  signed [29:0] sext_ln27_12_fu_554_p1;
reg  signed [29:0] sext_ln27_12_reg_1183;
wire  signed [29:0] sext_ln27_13_fu_557_p1;
reg  signed [29:0] sext_ln27_13_reg_1188;
wire  signed [29:0] sext_ln27_14_fu_560_p1;
reg  signed [29:0] sext_ln27_14_reg_1193;
wire  signed [29:0] sext_ln30_fu_564_p1;
reg  signed [29:0] sext_ln30_reg_1198;
wire   [15:0] tmp_5_fu_568_p10;
reg   [15:0] tmp_5_reg_1203;
wire   [0:0] icmp_ln32_fu_589_p2;
wire   [7:0] add_ln32_fu_594_p2;
reg   [7:0] add_ln32_reg_1212;
wire   [3:0] out_w_0_mid2_fu_611_p3;
reg   [3:0] out_w_0_mid2_reg_1217;
wire   [3:0] tmp10_0_0_mid2_v_v_v_2_fu_619_p3;
reg   [3:0] tmp10_0_0_mid2_v_v_v_2_reg_1224;
wire   [6:0] tmp10_0_0_mid2_v_v_fu_631_p2;
reg   [6:0] tmp10_0_0_mid2_v_v_reg_1229;
wire   [10:0] tmp10_0_0_mid2_fu_641_p2;
reg   [10:0] tmp10_0_0_mid2_reg_1235;
wire   [6:0] tmp12_mid2_v_v_fu_646_p2;
reg   [6:0] tmp12_mid2_v_v_reg_1242;
wire   [10:0] tmp10_1_0_mid2_fu_661_p2;
reg   [10:0] tmp10_1_0_mid2_reg_1247;
wire   [10:0] zext_ln40_13_fu_666_p1;
reg   [10:0] zext_ln40_13_reg_1254;
wire   [3:0] out_w_fu_679_p2;
reg   [3:0] out_w_reg_1266;
wire   [10:0] zext_ln40_15_fu_684_p1;
reg   [10:0] zext_ln40_15_reg_1271;
wire   [10:0] tmp10_2_0_mid2_fu_707_p2;
reg   [10:0] tmp10_2_0_mid2_reg_1282;
wire   [10:0] zext_ln40_17_fu_720_p1;
reg   [10:0] zext_ln40_17_reg_1289;
wire   [10:0] grp_fu_948_p3;
reg   [10:0] add_ln48_reg_1305;
reg   [10:0] add_ln48_reg_1305_pp0_iter1_reg;
reg   [15:0] trunc_ln_reg_1310;
reg   [15:0] trunc_ln48_9_reg_1315;
wire   [10:0] add_ln40_18_fu_787_p2;
reg   [10:0] add_ln40_18_reg_1330;
wire   [10:0] add_ln40_19_fu_791_p2;
reg   [10:0] add_ln40_19_reg_1335;
wire   [10:0] add_ln40_20_fu_795_p2;
reg   [10:0] add_ln40_20_reg_1340;
reg   [15:0] trunc_ln48_s_reg_1345;
reg   [15:0] trunc_ln48_8_reg_1350;
wire   [15:0] add_ln48_9_fu_833_p2;
reg   [15:0] add_ln48_9_reg_1365;
reg   [15:0] trunc_ln48_1_reg_1370;
reg   [15:0] trunc_ln48_2_reg_1375;
wire   [15:0] add_ln48_11_fu_871_p2;
reg   [15:0] add_ln48_11_reg_1385;
reg   [15:0] trunc_ln48_3_reg_1390;
reg   [15:0] trunc_ln48_4_reg_1395;
reg   [15:0] trunc_ln48_5_reg_1400;
wire   [15:0] add_ln48_16_fu_928_p2;
reg   [15:0] add_ln48_16_reg_1405;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire    ap_block_pp0_stage4_subdone;
reg   [3:0] out_d_0_reg_289;
wire    ap_CS_fsm_state18;
reg   [6:0] phi_mul_reg_300;
reg   [6:0] phi_mul5_reg_312;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_328_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_out_h_0_phi_fu_339_p4;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_350_p4;
wire   [63:0] zext_ln27_14_fu_449_p1;
wire   [63:0] zext_ln27_15_fu_463_p1;
wire   [63:0] zext_ln27_16_fu_474_p1;
wire   [63:0] zext_ln27_17_fu_484_p1;
wire   [63:0] zext_ln27_18_fu_494_p1;
wire   [63:0] zext_ln27_19_fu_504_p1;
wire   [63:0] zext_ln27_20_fu_514_p1;
wire   [63:0] zext_ln27_21_fu_524_p1;
wire   [63:0] zext_ln27_22_fu_534_p1;
wire   [63:0] zext_ln40_14_fu_674_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln40_16_fu_693_p1;
wire   [63:0] zext_ln40_18_fu_729_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln40_19_fu_738_p1;
wire   [63:0] zext_ln40_20_fu_773_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln40_21_fu_782_p1;
wire   [63:0] zext_ln40_22_fu_825_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln40_23_fu_829_p1;
wire   [63:0] zext_ln40_24_fu_863_p1;
wire   [63:0] zext_ln48_2_fu_944_p1;
wire   [3:0] empty_61_fu_387_p1;
wire   [3:0] bound_fu_399_p0;
wire   [3:0] bound_fu_399_p1;
wire   [5:0] zext_ln27_fu_427_p1;
wire   [5:0] shl_ln_fu_435_p3;
wire   [6:0] add_ln27_1_fu_457_p2;
wire   [6:0] add_ln27_2_fu_468_p2;
wire   [6:0] add_ln27_3_fu_479_p2;
wire   [6:0] add_ln27_4_fu_489_p2;
wire   [6:0] add_ln27_5_fu_499_p2;
wire   [6:0] add_ln27_6_fu_509_p2;
wire   [6:0] add_ln27_7_fu_519_p2;
wire   [6:0] add_ln27_8_fu_529_p2;
wire   [0:0] icmp_ln33_fu_606_p2;
wire   [3:0] out_h_fu_600_p2;
wire   [6:0] tmp10_0_0_mid2_v_v_v_fu_627_p1;
wire   [6:0] tmp10_0_0_mid2_fu_641_p0;
wire   [5:0] tmp10_0_0_mid2_fu_641_p1;
wire   [6:0] tmp10_1_0_mid2_v_v_fu_652_p2;
wire   [6:0] tmp10_1_0_mid2_fu_661_p0;
wire   [5:0] tmp10_1_0_mid2_fu_661_p1;
wire   [10:0] add_ln40_fu_669_p2;
wire   [10:0] add_ln40_12_fu_688_p2;
wire   [6:0] tmp10_2_0_mid2_v_v_fu_698_p2;
wire   [6:0] tmp10_2_0_mid2_fu_707_p0;
wire   [5:0] tmp10_2_0_mid2_fu_707_p1;
wire   [3:0] add_ln40_13_fu_715_p2;
wire   [10:0] add_ln40_14_fu_724_p2;
wire   [10:0] add_ln40_15_fu_734_p2;
wire  signed [29:0] mul_ln40_fu_954_p2;
wire  signed [29:0] mul_ln40_9_fu_960_p2;
wire   [10:0] add_ln40_16_fu_769_p2;
wire   [10:0] add_ln40_17_fu_778_p2;
wire  signed [29:0] mul_ln40_10_fu_966_p2;
wire  signed [29:0] mul_ln40_11_fu_972_p2;
wire  signed [29:0] mul_ln40_12_fu_978_p2;
wire  signed [29:0] mul_ln40_13_fu_984_p2;
wire   [15:0] add_ln48_10_fu_867_p2;
wire  signed [29:0] mul_ln40_14_fu_990_p2;
wire  signed [29:0] mul_ln40_15_fu_996_p2;
wire  signed [29:0] mul_ln40_16_fu_1002_p2;
wire   [15:0] add_ln48_14_fu_919_p2;
wire   [15:0] add_ln48_15_fu_923_p2;
wire   [15:0] add_ln48_13_fu_915_p2;
wire   [15:0] add_ln48_12_fu_934_p2;
wire   [6:0] grp_fu_948_p0;
wire   [4:0] grp_fu_948_p1;
wire   [3:0] grp_fu_948_p2;
wire  signed [15:0] mul_ln40_fu_954_p0;
wire  signed [15:0] mul_ln40_9_fu_960_p0;
wire  signed [15:0] mul_ln40_10_fu_966_p0;
wire  signed [15:0] mul_ln40_11_fu_972_p0;
wire  signed [15:0] mul_ln40_12_fu_978_p0;
wire  signed [15:0] mul_ln40_13_fu_984_p0;
wire  signed [15:0] mul_ln40_14_fu_990_p0;
wire  signed [15:0] mul_ln40_15_fu_996_p0;
wire  signed [15:0] mul_ln40_16_fu_1002_p0;
reg   [12:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] bound_fu_399_p00;
wire   [7:0] bound_fu_399_p10;
wire   [10:0] grp_fu_948_p00;
wire   [10:0] tmp10_0_0_mid2_fu_641_p00;
wire   [10:0] tmp10_1_0_mid2_fu_661_p00;
wire   [10:0] tmp10_2_0_mid2_fu_707_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

network_mux_83_16_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
network_mux_83_16_1_1_x_U65(
    .din0(16'd0),
    .din1(16'd0),
    .din2(16'd0),
    .din3(16'd0),
    .din4(16'd0),
    .din5(16'd0),
    .din6(16'd0),
    .din7(16'd0),
    .din8(trunc_ln27_reg_1058),
    .dout(tmp_5_fu_568_p10)
);

network_mac_muladd_7ns_5ns_4ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
network_mac_muladd_7ns_5ns_4ns_11_1_1_U66(
    .din0(grp_fu_948_p0),
    .din1(grp_fu_948_p1),
    .din2(grp_fu_948_p2),
    .dout(grp_fu_948_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U67(
    .din0(mul_ln40_fu_954_p0),
    .din1(reg_357),
    .dout(mul_ln40_fu_954_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U68(
    .din0(mul_ln40_9_fu_960_p0),
    .din1(reg_362),
    .dout(mul_ln40_9_fu_960_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U69(
    .din0(mul_ln40_10_fu_966_p0),
    .din1(reg_357),
    .dout(mul_ln40_10_fu_966_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U70(
    .din0(mul_ln40_11_fu_972_p0),
    .din1(reg_362),
    .dout(mul_ln40_11_fu_972_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U71(
    .din0(mul_ln40_12_fu_978_p0),
    .din1(reg_357),
    .dout(mul_ln40_12_fu_978_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U72(
    .din0(mul_ln40_13_fu_984_p0),
    .din1(reg_362),
    .dout(mul_ln40_13_fu_984_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U73(
    .din0(mul_ln40_14_fu_990_p0),
    .din1(reg_357),
    .dout(mul_ln40_14_fu_990_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U74(
    .din0(mul_ln40_15_fu_996_p0),
    .din1(reg_362),
    .dout(mul_ln40_15_fu_996_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U75(
    .din0(mul_ln40_16_fu_1002_p0),
    .din1(reg_357),
    .dout(mul_ln40_16_fu_1002_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_324 <= add_ln32_reg_1212;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_324 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        out_d_0_reg_289 <= out_d_reg_1053;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_289 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_h_0_reg_335 <= tmp10_0_0_mid2_v_v_v_2_reg_1224;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        out_h_0_reg_335 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_0_reg_346 <= out_w_reg_1266;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        out_w_0_reg_346 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_mul5_reg_312 <= add_ln23_reg_1040;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul5_reg_312 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_mul_reg_300 <= add_ln23_3_reg_1045;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_300 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln32_reg_1208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln32_reg_1208 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln32_reg_1208 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_357 <= input_r_q1;
    end else if ((((icmp_ln32_reg_1208 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln32_reg_1208_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_357 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln32_reg_1208 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln32_reg_1208 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln32_reg_1208 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_362 <= input_r_q0;
    end else if (((icmp_ln32_reg_1208 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_362 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln23_3_reg_1045 <= add_ln23_3_fu_410_p2;
        add_ln23_reg_1040 <= add_ln23_fu_405_p2;
        out_d_reg_1053 <= out_d_fu_421_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln27_reg_1063 <= add_ln27_fu_443_p2;
        trunc_ln27_reg_1058 <= trunc_ln27_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln32_reg_1212 <= add_ln32_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln32_reg_1208 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln40_18_reg_1330 <= add_ln40_18_fu_787_p2;
        add_ln40_19_reg_1335 <= add_ln40_19_fu_791_p2;
        add_ln40_20_reg_1340 <= add_ln40_20_fu_795_p2;
        trunc_ln48_9_reg_1315 <= {{mul_ln40_9_fu_960_p2[29:14]}};
        trunc_ln_reg_1310 <= {{mul_ln40_fu_954_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln48_11_reg_1385 <= add_ln48_11_fu_871_p2;
        trunc_ln48_1_reg_1370 <= {{mul_ln40_12_fu_978_p2[29:14]}};
        trunc_ln48_2_reg_1375 <= {{mul_ln40_13_fu_984_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln32_reg_1208_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln48_16_reg_1405 <= add_ln48_16_fu_928_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln48_9_reg_1365 <= add_ln48_9_fu_833_p2;
        trunc_ln48_8_reg_1350 <= {{mul_ln40_11_fu_972_p2[29:14]}};
        trunc_ln48_s_reg_1345 <= {{mul_ln40_10_fu_966_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln48_reg_1305 <= grp_fu_948_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln48_reg_1305_pp0_iter1_reg <= add_ln48_reg_1305;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_1035 <= bound_fu_399_p2;
        empty_reg_1030 <= empty_fu_383_p1;
        zext_ln40_1_cast23_reg_1013[5 : 0] <= zext_ln40_1_cast23_fu_371_p1[5 : 0];
        zext_ln40_reg_1008[5 : 0] <= zext_ln40_fu_367_p1[5 : 0];
        zext_ln48_1_cast_reg_1025[4 : 0] <= zext_ln48_1_cast_fu_379_p1[4 : 0];
        zext_ln48_reg_1020[4 : 0] <= zext_ln48_fu_375_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln32_reg_1208 <= icmp_ln32_fu_589_p2;
        icmp_ln32_reg_1208_pp0_iter1_reg <= icmp_ln32_reg_1208;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_load_1_reg_1098 <= kernel_q0;
        kernel_load_2_reg_1103 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_load_3_reg_1118 <= kernel_q1;
        kernel_load_4_reg_1123 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_load_5_reg_1138 <= kernel_q1;
        kernel_load_6_reg_1143 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_load_reg_1083 <= kernel_q0;
        zext_ln27_23_reg_1073[5 : 0] <= zext_ln27_23_fu_454_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_589_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_0_mid2_reg_1217 <= out_w_0_mid2_fu_611_p3;
        tmp10_0_0_mid2_reg_1235 <= tmp10_0_0_mid2_fu_641_p2;
        tmp10_0_0_mid2_v_v_reg_1229 <= tmp10_0_0_mid2_v_v_fu_631_p2;
        tmp12_mid2_v_v_reg_1242 <= tmp12_mid2_v_v_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_w_reg_1266 <= out_w_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        sext_ln27_10_reg_1173 <= sext_ln27_10_fu_548_p1;
        sext_ln27_11_reg_1178 <= sext_ln27_11_fu_551_p1;
        sext_ln27_12_reg_1183 <= sext_ln27_12_fu_554_p1;
        sext_ln27_13_reg_1188 <= sext_ln27_13_fu_557_p1;
        sext_ln27_14_reg_1193 <= sext_ln27_14_fu_560_p1;
        sext_ln27_8_reg_1163 <= sext_ln27_8_fu_542_p1;
        sext_ln27_9_reg_1168 <= sext_ln27_9_fu_545_p1;
        sext_ln27_reg_1158 <= sext_ln27_fu_539_p1;
        sext_ln30_reg_1198 <= sext_ln30_fu_564_p1;
        tmp_5_reg_1203 <= tmp_5_fu_568_p10;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_589_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp10_0_0_mid2_v_v_v_2_reg_1224 <= tmp10_0_0_mid2_v_v_v_2_fu_619_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp10_1_0_mid2_reg_1247 <= tmp10_1_0_mid2_fu_661_p2;
        zext_ln40_13_reg_1254[3 : 0] <= zext_ln40_13_fu_666_p1[3 : 0];
        zext_ln40_15_reg_1271[3 : 0] <= zext_ln40_15_fu_684_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp10_2_0_mid2_reg_1282 <= tmp10_2_0_mid2_fu_707_p2;
        zext_ln40_17_reg_1289[3 : 0] <= zext_ln40_17_fu_720_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        trunc_ln48_3_reg_1390 <= {{mul_ln40_14_fu_990_p2[29:14]}};
        trunc_ln48_4_reg_1395 <= {{mul_ln40_15_fu_996_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1208_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        trunc_ln48_5_reg_1400 <= {{mul_ln40_16_fu_1002_p2[29:14]}};
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_589_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_415_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_328_p4 = add_ln32_reg_1212;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_328_p4 = indvar_flatten_reg_324;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_h_0_phi_fu_339_p4 = tmp10_0_0_mid2_v_v_v_2_reg_1224;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_339_p4 = out_h_0_reg_335;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1208 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_350_p4 = out_w_reg_1266;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_350_p4 = out_w_0_reg_346;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_415_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln40_24_fu_863_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address0 = zext_ln40_23_fu_829_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln40_21_fu_782_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln40_19_fu_738_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln40_14_fu_674_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address1 = zext_ln40_22_fu_825_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = zext_ln40_20_fu_773_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln40_18_fu_729_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln40_16_fu_693_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_address0 = zext_ln27_22_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_address0 = zext_ln27_20_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_address0 = zext_ln27_18_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_address0 = zext_ln27_15_fu_463_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_address0 = zext_ln27_14_fu_449_p1;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_address1 = zext_ln27_21_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_address1 = zext_ln27_19_fu_504_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_address1 = zext_ln27_17_fu_484_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_address1 = zext_ln27_16_fu_474_p1;
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1208_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln23_fu_415_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln32_fu_589_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln32_fu_589_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_3_fu_410_p2 = (phi_mul_reg_300 + zext_ln40_reg_1008);

assign add_ln23_fu_405_p2 = (phi_mul5_reg_312 + zext_ln48_reg_1020);

assign add_ln27_1_fu_457_p2 = (7'd1 + zext_ln27_23_fu_454_p1);

assign add_ln27_2_fu_468_p2 = (7'd2 + zext_ln27_23_fu_454_p1);

assign add_ln27_3_fu_479_p2 = (7'd3 + zext_ln27_23_reg_1073);

assign add_ln27_4_fu_489_p2 = (7'd4 + zext_ln27_23_reg_1073);

assign add_ln27_5_fu_499_p2 = (7'd5 + zext_ln27_23_reg_1073);

assign add_ln27_6_fu_509_p2 = (7'd6 + zext_ln27_23_reg_1073);

assign add_ln27_7_fu_519_p2 = (7'd7 + zext_ln27_23_reg_1073);

assign add_ln27_8_fu_529_p2 = (7'd8 + zext_ln27_23_reg_1073);

assign add_ln27_fu_443_p2 = (zext_ln27_fu_427_p1 + shl_ln_fu_435_p3);

assign add_ln32_fu_594_p2 = (ap_phi_mux_indvar_flatten_phi_fu_328_p4 + 8'd1);

assign add_ln40_12_fu_688_p2 = (zext_ln40_15_fu_684_p1 + tmp10_0_0_mid2_reg_1235);

assign add_ln40_13_fu_715_p2 = (out_w_0_mid2_reg_1217 + 4'd2);

assign add_ln40_14_fu_724_p2 = (zext_ln40_17_fu_720_p1 + tmp10_0_0_mid2_reg_1235);

assign add_ln40_15_fu_734_p2 = (tmp10_1_0_mid2_reg_1247 + zext_ln40_13_reg_1254);

assign add_ln40_16_fu_769_p2 = (zext_ln40_15_reg_1271 + tmp10_1_0_mid2_reg_1247);

assign add_ln40_17_fu_778_p2 = (zext_ln40_17_reg_1289 + tmp10_1_0_mid2_reg_1247);

assign add_ln40_18_fu_787_p2 = (tmp10_2_0_mid2_reg_1282 + zext_ln40_13_reg_1254);

assign add_ln40_19_fu_791_p2 = (zext_ln40_15_reg_1271 + tmp10_2_0_mid2_reg_1282);

assign add_ln40_20_fu_795_p2 = (zext_ln40_17_reg_1289 + tmp10_2_0_mid2_reg_1282);

assign add_ln40_fu_669_p2 = (tmp10_0_0_mid2_reg_1235 + zext_ln40_13_fu_666_p1);

assign add_ln48_10_fu_867_p2 = (trunc_ln48_s_reg_1345 + trunc_ln48_8_reg_1350);

assign add_ln48_11_fu_871_p2 = (add_ln48_10_fu_867_p2 + trunc_ln48_9_reg_1315);

assign add_ln48_12_fu_934_p2 = (add_ln48_11_reg_1385 + add_ln48_9_reg_1365);

assign add_ln48_13_fu_915_p2 = (trunc_ln48_1_reg_1370 + trunc_ln48_2_reg_1375);

assign add_ln48_14_fu_919_p2 = (trunc_ln48_4_reg_1395 + trunc_ln48_5_reg_1400);

assign add_ln48_15_fu_923_p2 = (add_ln48_14_fu_919_p2 + trunc_ln48_3_reg_1390);

assign add_ln48_16_fu_928_p2 = (add_ln48_15_fu_923_p2 + add_ln48_13_fu_915_p2);

assign add_ln48_9_fu_833_p2 = (trunc_ln_reg_1310 + tmp_5_reg_1203);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_399_p0 = bound_fu_399_p00;

assign bound_fu_399_p00 = empty_fu_383_p1;

assign bound_fu_399_p1 = bound_fu_399_p10;

assign bound_fu_399_p10 = empty_61_fu_387_p1;

assign bound_fu_399_p2 = (bound_fu_399_p0 * bound_fu_399_p1);

assign empty_61_fu_387_p1 = output_height[3:0];

assign empty_fu_383_p1 = output_width[3:0];

assign grp_fu_948_p0 = grp_fu_948_p00;

assign grp_fu_948_p00 = tmp12_mid2_v_v_reg_1242;

assign grp_fu_948_p1 = zext_ln48_1_cast_reg_1025;

assign grp_fu_948_p2 = zext_ln40_13_reg_1254;

assign icmp_ln23_fu_415_p2 = ((out_d_0_reg_289 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_589_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_328_p4 == bound_reg_1035) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_606_p2 = ((ap_phi_mux_out_w_0_phi_fu_350_p4 == empty_reg_1030) ? 1'b1 : 1'b0);

assign mul_ln40_10_fu_966_p0 = sext_ln27_9_reg_1168;

assign mul_ln40_11_fu_972_p0 = sext_ln27_10_reg_1173;

assign mul_ln40_12_fu_978_p0 = sext_ln27_11_reg_1178;

assign mul_ln40_13_fu_984_p0 = sext_ln27_12_reg_1183;

assign mul_ln40_14_fu_990_p0 = sext_ln27_13_reg_1188;

assign mul_ln40_15_fu_996_p0 = sext_ln27_14_reg_1193;

assign mul_ln40_16_fu_1002_p0 = sext_ln30_reg_1198;

assign mul_ln40_9_fu_960_p0 = sext_ln27_8_reg_1163;

assign mul_ln40_fu_954_p0 = sext_ln27_reg_1158;

assign out_d_fu_421_p2 = (out_d_0_reg_289 + 4'd1);

assign out_h_fu_600_p2 = (ap_phi_mux_out_h_0_phi_fu_339_p4 + 4'd1);

assign out_w_0_mid2_fu_611_p3 = ((icmp_ln33_fu_606_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_w_0_phi_fu_350_p4);

assign out_w_fu_679_p2 = (out_w_0_mid2_reg_1217 + 4'd1);

assign output_r_address0 = zext_ln48_2_fu_944_p1;

assign output_r_d0 = (add_ln48_16_reg_1405 + add_ln48_12_fu_934_p2);

assign sext_ln27_10_fu_548_p1 = $signed(kernel_load_3_reg_1118);

assign sext_ln27_11_fu_551_p1 = $signed(kernel_load_4_reg_1123);

assign sext_ln27_12_fu_554_p1 = $signed(kernel_load_5_reg_1138);

assign sext_ln27_13_fu_557_p1 = $signed(kernel_load_6_reg_1143);

assign sext_ln27_14_fu_560_p1 = $signed(kernel_q1);

assign sext_ln27_8_fu_542_p1 = $signed(kernel_load_1_reg_1098);

assign sext_ln27_9_fu_545_p1 = $signed(kernel_load_2_reg_1103);

assign sext_ln27_fu_539_p1 = $signed(kernel_load_reg_1083);

assign sext_ln30_fu_564_p1 = $signed(kernel_q0);

assign shl_ln_fu_435_p3 = {{trunc_ln27_fu_431_p1}, {3'd0}};

assign tmp10_0_0_mid2_fu_641_p0 = tmp10_0_0_mid2_fu_641_p00;

assign tmp10_0_0_mid2_fu_641_p00 = tmp10_0_0_mid2_v_v_fu_631_p2;

assign tmp10_0_0_mid2_fu_641_p1 = zext_ln40_1_cast23_reg_1013;

assign tmp10_0_0_mid2_fu_641_p2 = (tmp10_0_0_mid2_fu_641_p0 * tmp10_0_0_mid2_fu_641_p1);

assign tmp10_0_0_mid2_v_v_fu_631_p2 = (phi_mul_reg_300 + tmp10_0_0_mid2_v_v_v_fu_627_p1);

assign tmp10_0_0_mid2_v_v_v_2_fu_619_p3 = ((icmp_ln33_fu_606_p2[0:0] === 1'b1) ? out_h_fu_600_p2 : ap_phi_mux_out_h_0_phi_fu_339_p4);

assign tmp10_0_0_mid2_v_v_v_fu_627_p1 = tmp10_0_0_mid2_v_v_v_2_fu_619_p3;

assign tmp10_1_0_mid2_fu_661_p0 = tmp10_1_0_mid2_fu_661_p00;

assign tmp10_1_0_mid2_fu_661_p00 = tmp10_1_0_mid2_v_v_fu_652_p2;

assign tmp10_1_0_mid2_fu_661_p1 = zext_ln40_1_cast23_reg_1013;

assign tmp10_1_0_mid2_fu_661_p2 = (tmp10_1_0_mid2_fu_661_p0 * tmp10_1_0_mid2_fu_661_p1);

assign tmp10_1_0_mid2_v_v_fu_652_p2 = (tmp10_0_0_mid2_v_v_reg_1229 + 7'd1);

assign tmp10_2_0_mid2_fu_707_p0 = tmp10_2_0_mid2_fu_707_p00;

assign tmp10_2_0_mid2_fu_707_p00 = tmp10_2_0_mid2_v_v_fu_698_p2;

assign tmp10_2_0_mid2_fu_707_p1 = zext_ln40_1_cast23_reg_1013;

assign tmp10_2_0_mid2_fu_707_p2 = (tmp10_2_0_mid2_fu_707_p0 * tmp10_2_0_mid2_fu_707_p1);

assign tmp10_2_0_mid2_v_v_fu_698_p2 = (tmp10_0_0_mid2_v_v_reg_1229 + 7'd2);

assign tmp12_mid2_v_v_fu_646_p2 = (phi_mul5_reg_312 + tmp10_0_0_mid2_v_v_v_fu_627_p1);

assign trunc_ln27_fu_431_p1 = out_d_0_reg_289[2:0];

assign zext_ln27_14_fu_449_p1 = add_ln27_fu_443_p2;

assign zext_ln27_15_fu_463_p1 = add_ln27_1_fu_457_p2;

assign zext_ln27_16_fu_474_p1 = add_ln27_2_fu_468_p2;

assign zext_ln27_17_fu_484_p1 = add_ln27_3_fu_479_p2;

assign zext_ln27_18_fu_494_p1 = add_ln27_4_fu_489_p2;

assign zext_ln27_19_fu_504_p1 = add_ln27_5_fu_499_p2;

assign zext_ln27_20_fu_514_p1 = add_ln27_6_fu_509_p2;

assign zext_ln27_21_fu_524_p1 = add_ln27_7_fu_519_p2;

assign zext_ln27_22_fu_534_p1 = add_ln27_8_fu_529_p2;

assign zext_ln27_23_fu_454_p1 = add_ln27_reg_1063;

assign zext_ln27_fu_427_p1 = out_d_0_reg_289;

assign zext_ln40_13_fu_666_p1 = out_w_0_mid2_reg_1217;

assign zext_ln40_14_fu_674_p1 = add_ln40_fu_669_p2;

assign zext_ln40_15_fu_684_p1 = out_w_fu_679_p2;

assign zext_ln40_16_fu_693_p1 = add_ln40_12_fu_688_p2;

assign zext_ln40_17_fu_720_p1 = add_ln40_13_fu_715_p2;

assign zext_ln40_18_fu_729_p1 = add_ln40_14_fu_724_p2;

assign zext_ln40_19_fu_738_p1 = add_ln40_15_fu_734_p2;

assign zext_ln40_1_cast23_fu_371_p1 = input_width;

assign zext_ln40_20_fu_773_p1 = add_ln40_16_fu_769_p2;

assign zext_ln40_21_fu_782_p1 = add_ln40_17_fu_778_p2;

assign zext_ln40_22_fu_825_p1 = add_ln40_18_reg_1330;

assign zext_ln40_23_fu_829_p1 = add_ln40_19_reg_1335;

assign zext_ln40_24_fu_863_p1 = add_ln40_20_reg_1340;

assign zext_ln40_fu_367_p1 = input_height;

assign zext_ln48_1_cast_fu_379_p1 = output_width;

assign zext_ln48_2_fu_944_p1 = add_ln48_reg_1305_pp0_iter1_reg;

assign zext_ln48_fu_375_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln40_reg_1008[6] <= 1'b0;
    zext_ln40_1_cast23_reg_1013[10:6] <= 5'b00000;
    zext_ln48_reg_1020[6:5] <= 2'b00;
    zext_ln48_1_cast_reg_1025[10:5] <= 6'b000000;
    zext_ln27_23_reg_1073[6] <= 1'b0;
    zext_ln40_13_reg_1254[10:4] <= 7'b0000000;
    zext_ln40_15_reg_1271[10:4] <= 7'b0000000;
    zext_ln40_17_reg_1289[10:4] <= 7'b0000000;
end

endmodule //depthwise_conv2d_fix_1
