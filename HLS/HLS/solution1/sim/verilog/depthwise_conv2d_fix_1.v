// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state17 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [2:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [6:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [6:0] kernel_address1;
output   kernel_ce1;
input  [15:0] kernel_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg[6:0] kernel_address0;
reg kernel_ce0;
reg[6:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten48_reg_298;
reg   [3:0] out_d_0_reg_310;
reg   [7:0] indvar_flatten_reg_322;
reg   [3:0] out_h_0_reg_334;
reg   [3:0] out_w_0_reg_345;
reg  signed [15:0] reg_356;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln23_reg_1170;
reg   [0:0] icmp_ln23_reg_1170_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state16_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] reg_360;
wire   [6:0] zext_ln40_fu_364_p1;
reg   [6:0] zext_ln40_reg_1109;
wire   [10:0] zext_ln40_1_cast14_fu_368_p1;
reg   [10:0] zext_ln40_1_cast14_reg_1115;
wire   [6:0] zext_ln48_fu_372_p1;
reg   [6:0] zext_ln48_reg_1122;
wire   [10:0] zext_ln48_1_cast_fu_376_p1;
reg   [10:0] zext_ln48_1_cast_reg_1128;
wire   [3:0] empty_fu_380_p1;
reg   [3:0] empty_reg_1133;
wire   [7:0] mul_ln4_fu_396_p2;
reg   [7:0] mul_ln4_reg_1138;
wire   [10:0] tmp_2_fu_402_p3;
reg   [10:0] tmp_2_reg_1143;
wire   [0:0] icmp_ln33_fu_410_p2;
reg   [0:0] icmp_ln33_reg_1148;
wire   [5:0] add_ln27_fu_436_p2;
reg   [5:0] add_ln27_reg_1153;
wire   [6:0] mul_ln40_fu_442_p2;
reg   [6:0] mul_ln40_reg_1158;
wire   [6:0] mul_ln48_fu_447_p2;
reg   [6:0] mul_ln48_reg_1164;
wire   [0:0] icmp_ln23_fu_452_p2;
reg   [0:0] icmp_ln23_reg_1170_pp0_iter2_reg;
wire   [3:0] out_d_fu_457_p2;
reg   [3:0] out_d_reg_1174;
wire   [0:0] icmp_ln32_fu_463_p2;
reg   [0:0] icmp_ln32_reg_1180;
wire   [5:0] add_ln27_2_fu_484_p2;
reg   [5:0] add_ln27_2_reg_1194;
wire   [6:0] tmp_0_0_fu_494_p2;
reg   [6:0] tmp_0_0_reg_1199;
wire   [6:0] tmp11_fu_499_p2;
reg   [6:0] tmp11_reg_1204;
wire   [10:0] add_ln23_fu_504_p2;
reg   [10:0] add_ln23_reg_1209;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] select_ln24_fu_510_p3;
reg   [3:0] select_ln24_reg_1214;
wire   [6:0] zext_ln24_19_fu_530_p1;
reg   [6:0] zext_ln24_19_reg_1225;
wire   [6:0] add_ln24_8_fu_534_p2;
reg   [6:0] add_ln24_8_reg_1235;
wire   [6:0] add_ln24_9_fu_540_p2;
reg   [6:0] add_ln24_9_reg_1240;
wire   [6:0] mul_ln40_18_fu_546_p2;
reg   [6:0] mul_ln40_18_reg_1245;
wire   [6:0] mul_ln48_2_fu_551_p2;
reg   [6:0] mul_ln48_2_reg_1251;
wire   [0:0] select_ln24_14_fu_561_p3;
reg   [0:0] select_ln24_14_reg_1257;
wire   [3:0] out_w_0_mid2_fu_572_p3;
reg   [3:0] out_w_0_mid2_reg_1264;
wire   [7:0] add_ln32_2_fu_580_p2;
reg   [7:0] add_ln32_2_reg_1271;
reg  signed [15:0] kernel_load_reg_1276;
wire   [6:0] add_ln24_fu_586_p2;
reg   [6:0] add_ln24_reg_1281;
wire   [6:0] add_ln24_10_fu_599_p2;
reg   [6:0] add_ln24_10_reg_1296;
wire   [3:0] out_h_fu_624_p2;
reg   [3:0] out_h_reg_1301;
wire   [6:0] tmp10_0_0_mid2_v_v_fu_639_p3;
reg   [6:0] tmp10_0_0_mid2_v_v_reg_1306;
wire   [6:0] tmp12_mid2_v_v_fu_652_p3;
reg   [6:0] tmp12_mid2_v_v_reg_1313;
reg  signed [15:0] kernel_load_10_reg_1323;
reg  signed [15:0] kernel_load_11_reg_1328;
wire   [6:0] add_ln24_11_fu_667_p2;
reg   [6:0] add_ln24_11_reg_1338;
wire   [6:0] add_ln24_12_fu_672_p2;
reg   [6:0] add_ln24_12_reg_1343;
wire   [10:0] tmp10_0_0_mid2_fu_680_p2;
reg   [10:0] tmp10_0_0_mid2_reg_1348;
wire   [6:0] tmp10_1_0_mid2_v_v_fu_685_p2;
reg   [6:0] tmp10_1_0_mid2_v_v_reg_1355;
wire   [6:0] tmp10_2_0_mid2_v_v_fu_690_p2;
reg   [6:0] tmp10_2_0_mid2_v_v_reg_1360;
reg  signed [15:0] kernel_load_9_reg_1365;
reg  signed [15:0] kernel_load_12_reg_1370;
wire   [6:0] add_ln24_13_fu_703_p2;
reg   [6:0] add_ln24_13_reg_1385;
wire   [6:0] add_ln24_14_fu_708_p2;
reg   [6:0] add_ln24_14_reg_1390;
wire   [3:0] select_ln24_9_fu_713_p3;
reg   [3:0] select_ln24_9_reg_1395;
wire   [10:0] tmp10_1_0_mid2_fu_722_p2;
reg   [10:0] tmp10_1_0_mid2_reg_1401;
wire   [10:0] tmp10_2_0_mid2_fu_730_p2;
reg   [10:0] tmp10_2_0_mid2_reg_1408;
wire   [10:0] zext_ln40_13_fu_735_p1;
reg   [10:0] zext_ln40_13_reg_1415;
wire   [10:0] add_ln40_fu_738_p2;
reg   [10:0] add_ln40_reg_1422;
wire   [10:0] zext_ln40_17_fu_748_p1;
reg   [10:0] zext_ln40_17_reg_1427;
wire   [10:0] add_ln40_14_fu_752_p2;
reg   [10:0] add_ln40_14_reg_1433;
wire   [7:0] select_ln32_14_fu_757_p3;
reg   [7:0] select_ln32_14_reg_1438;
reg  signed [15:0] kernel_load_13_reg_1443;
reg  signed [15:0] kernel_load_14_reg_1448;
wire   [3:0] select_ln32_fu_771_p3;
reg   [3:0] select_ln32_reg_1463;
wire   [3:0] out_w_fu_780_p2;
reg   [3:0] out_w_reg_1473;
wire   [10:0] zext_ln40_15_fu_785_p1;
reg   [10:0] zext_ln40_15_reg_1478;
wire   [10:0] add_ln40_12_fu_789_p2;
reg   [10:0] add_ln40_12_reg_1484;
wire   [10:0] add_ln40_15_fu_798_p2;
reg   [10:0] add_ln40_15_reg_1494;
reg  signed [15:0] kernel_load_15_reg_1499;
reg  signed [15:0] kernel_load_16_reg_1504;
wire   [10:0] add_ln40_16_fu_817_p2;
reg   [10:0] add_ln40_16_reg_1524;
wire   [10:0] add_ln40_17_fu_821_p2;
reg   [10:0] add_ln40_17_reg_1529;
wire   [10:0] add_ln40_18_fu_825_p2;
reg   [10:0] add_ln40_18_reg_1534;
wire   [10:0] add_ln40_19_fu_829_p2;
reg   [10:0] add_ln40_19_reg_1539;
wire   [10:0] add_ln40_20_fu_833_p2;
reg   [10:0] add_ln40_20_reg_1544;
wire   [10:0] grp_fu_1049_p3;
reg   [10:0] add_ln48_reg_1549;
reg   [10:0] add_ln48_reg_1549_pp0_iter2_reg;
reg   [15:0] bias_load_reg_1554;
wire  signed [29:0] mul_ln40_9_fu_1055_p2;
reg  signed [29:0] mul_ln40_9_reg_1559;
wire  signed [29:0] mul_ln40_11_fu_1061_p2;
reg  signed [29:0] mul_ln40_11_reg_1564;
wire  signed [29:0] mul_ln40_10_fu_1067_p2;
reg  signed [29:0] mul_ln40_10_reg_1579;
reg   [15:0] trunc_ln48_s_reg_1584;
wire  signed [29:0] mul_ln40_12_fu_1073_p2;
reg  signed [29:0] mul_ln40_12_reg_1589;
wire   [15:0] add_ln48_9_fu_899_p2;
reg   [15:0] add_ln48_9_reg_1604;
reg   [15:0] trunc_ln48_9_reg_1609;
wire  signed [29:0] mul_ln40_13_fu_1079_p2;
reg  signed [29:0] mul_ln40_13_reg_1614;
wire  signed [29:0] mul_ln40_14_fu_1085_p2;
reg  signed [29:0] mul_ln40_14_reg_1619;
wire   [15:0] add_ln48_10_fu_940_p2;
reg   [15:0] add_ln48_10_reg_1629;
wire  signed [29:0] mul_ln40_15_fu_1091_p2;
reg  signed [29:0] mul_ln40_15_reg_1634;
wire  signed [29:0] mul_ln40_16_fu_1097_p2;
reg  signed [29:0] mul_ln40_16_reg_1639;
wire   [15:0] add_ln48_12_fu_981_p2;
reg   [15:0] add_ln48_12_reg_1644;
wire   [15:0] add_ln48_13_fu_986_p2;
reg   [15:0] add_ln48_13_reg_1649;
reg   [15:0] trunc_ln48_3_reg_1654;
reg   [15:0] trunc_ln48_4_reg_1659;
wire  signed [29:0] mul_ln40_17_fu_1103_p2;
reg  signed [29:0] mul_ln40_17_reg_1664;
wire   [15:0] add_ln48_15_fu_1031_p2;
reg   [15:0] add_ln48_15_reg_1669;
wire   [15:0] add_ln48_17_fu_1040_p2;
reg   [15:0] add_ln48_17_reg_1674;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage4_subdone;
reg   [10:0] ap_phi_mux_indvar_flatten48_phi_fu_302_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_out_d_0_phi_fu_314_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_326_p4;
reg   [3:0] ap_phi_mux_out_h_0_phi_fu_338_p4;
wire    ap_block_pp0_stage1;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_349_p4;
wire   [63:0] zext_ln24_fu_525_p1;
wire   [63:0] zext_ln24_11_fu_591_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln24_12_fu_595_p1;
wire   [63:0] zext_ln24_10_fu_659_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln24_13_fu_663_p1;
wire   [63:0] zext_ln24_14_fu_695_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln24_15_fu_699_p1;
wire   [63:0] zext_ln24_16_fu_763_p1;
wire   [63:0] zext_ln24_17_fu_767_p1;
wire   [63:0] zext_ln40_14_fu_776_p1;
wire   [63:0] zext_ln40_18_fu_794_p1;
wire   [63:0] zext_ln24_18_fu_802_p1;
wire   [63:0] zext_ln40_16_fu_809_p1;
wire   [63:0] zext_ln40_19_fu_813_p1;
wire   [63:0] zext_ln40_20_fu_851_p1;
wire   [63:0] zext_ln40_21_fu_855_p1;
wire   [63:0] zext_ln40_22_fu_891_p1;
wire   [63:0] zext_ln40_23_fu_895_p1;
wire   [63:0] zext_ln40_24_fu_936_p1;
wire   [63:0] zext_ln48_3_fu_1045_p1;
wire   [3:0] empty_59_fu_384_p1;
wire   [3:0] mul_ln4_fu_396_p0;
wire   [3:0] mul_ln4_fu_396_p1;
wire   [2:0] trunc_ln27_fu_424_p1;
wire   [5:0] zext_ln27_fu_420_p1;
wire   [5:0] shl_ln_fu_428_p3;
wire   [3:0] mul_ln40_fu_442_p0;
wire   [6:0] zext_ln48_2_fu_416_p1;
wire   [5:0] mul_ln40_fu_442_p1;
wire   [3:0] mul_ln48_fu_447_p0;
wire   [4:0] mul_ln48_fu_447_p1;
wire   [2:0] trunc_ln27_2_fu_472_p1;
wire   [5:0] zext_ln27_4_fu_468_p1;
wire   [5:0] shl_ln27_mid1_fu_476_p3;
wire   [6:0] zext_ln40_2_cast_fu_490_p1;
wire   [5:0] select_ln24_8_fu_520_p3;
wire   [3:0] mul_ln40_18_fu_546_p0;
wire   [6:0] zext_ln48_4_fu_517_p1;
wire   [5:0] mul_ln40_18_fu_546_p1;
wire   [3:0] mul_ln48_2_fu_551_p0;
wire   [4:0] mul_ln48_2_fu_551_p1;
wire   [0:0] icmp_ln33_2_fu_556_p2;
wire   [0:0] empty_61_fu_567_p2;
wire   [6:0] zext_ln40_2_cast_mid_fu_629_p1;
wire   [6:0] select_ln24_10_fu_604_p3;
wire   [6:0] tmp_0_0_mid1_fu_633_p2;
wire   [6:0] select_ln24_12_fu_614_p3;
wire   [6:0] select_ln24_11_fu_609_p3;
wire   [6:0] tmp11_mid1_fu_646_p2;
wire   [6:0] select_ln24_13_fu_619_p3;
wire   [5:0] tmp10_0_0_mid2_fu_680_p0;
wire   [6:0] tmp10_0_0_mid2_fu_680_p1;
wire   [5:0] tmp10_1_0_mid2_fu_722_p0;
wire   [6:0] tmp10_1_0_mid2_fu_722_p1;
wire   [5:0] tmp10_2_0_mid2_fu_730_p0;
wire   [6:0] tmp10_2_0_mid2_fu_730_p1;
wire   [3:0] add_ln40_13_fu_743_p2;
wire   [15:0] trunc_ln_fu_865_p4;
wire   [15:0] trunc_ln48_8_fu_919_p4;
wire   [15:0] add_ln48_11_fu_977_p2;
wire   [15:0] trunc_ln48_2_fu_960_p4;
wire   [15:0] trunc_ln48_1_fu_951_p4;
wire   [15:0] trunc_ln48_5_fu_1017_p4;
wire   [15:0] add_ln48_14_fu_1026_p2;
wire   [15:0] add_ln48_16_fu_1036_p2;
wire   [4:0] grp_fu_1049_p0;
wire   [6:0] grp_fu_1049_p1;
wire   [3:0] grp_fu_1049_p2;
wire    ap_CS_fsm_state17;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_1049_p10;
wire   [7:0] mul_ln4_fu_396_p00;
wire   [7:0] mul_ln4_fu_396_p10;
wire   [10:0] tmp10_0_0_mid2_fu_680_p10;
wire   [10:0] tmp10_1_0_mid2_fu_722_p10;
wire   [10:0] tmp10_2_0_mid2_fu_730_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

network_mac_muladd_5ns_7ns_4ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
network_mac_muladd_5ns_7ns_4ns_11_1_1_U68(
    .din0(grp_fu_1049_p0),
    .din1(grp_fu_1049_p1),
    .din2(grp_fu_1049_p2),
    .dout(grp_fu_1049_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U69(
    .din0(reg_356),
    .din1(kernel_load_reg_1276),
    .dout(mul_ln40_9_fu_1055_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U70(
    .din0(reg_360),
    .din1(kernel_load_10_reg_1323),
    .dout(mul_ln40_11_fu_1061_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U71(
    .din0(reg_356),
    .din1(kernel_load_9_reg_1365),
    .dout(mul_ln40_10_fu_1067_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U72(
    .din0(reg_360),
    .din1(kernel_load_11_reg_1328),
    .dout(mul_ln40_12_fu_1073_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U73(
    .din0(reg_356),
    .din1(kernel_load_12_reg_1370),
    .dout(mul_ln40_13_fu_1079_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U74(
    .din0(reg_360),
    .din1(kernel_load_13_reg_1443),
    .dout(mul_ln40_14_fu_1085_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U75(
    .din0(reg_356),
    .din1(kernel_load_14_reg_1448),
    .dout(mul_ln40_15_fu_1091_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U76(
    .din0(reg_360),
    .din1(kernel_load_15_reg_1499),
    .dout(mul_ln40_16_fu_1097_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U77(
    .din0(reg_356),
    .din1(kernel_load_16_reg_1504),
    .dout(mul_ln40_17_fu_1103_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten48_reg_298 <= add_ln23_reg_1209;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten48_reg_298 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_322 <= select_ln32_14_reg_1438;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_322 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_310 <= select_ln24_9_reg_1395;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_310 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_h_0_reg_334 <= select_ln32_reg_1463;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_334 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_w_0_reg_345 <= out_w_reg_1473;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_345 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln23_reg_1209 <= add_ln23_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln24_10_reg_1296 <= add_ln24_10_fu_599_p2;
        add_ln24_reg_1281 <= add_ln24_fu_586_p2;
        out_h_reg_1301 <= out_h_fu_624_p2;
        tmp10_0_0_mid2_v_v_reg_1306 <= tmp10_0_0_mid2_v_v_fu_639_p3;
        tmp12_mid2_v_v_reg_1313 <= tmp12_mid2_v_v_fu_652_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln24_11_reg_1338 <= add_ln24_11_fu_667_p2;
        add_ln24_12_reg_1343 <= add_ln24_12_fu_672_p2;
        tmp10_0_0_mid2_reg_1348 <= tmp10_0_0_mid2_fu_680_p2;
        tmp10_1_0_mid2_v_v_reg_1355 <= tmp10_1_0_mid2_v_v_fu_685_p2;
        tmp10_2_0_mid2_v_v_reg_1360 <= tmp10_2_0_mid2_v_v_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln24_13_reg_1385 <= add_ln24_13_fu_703_p2;
        add_ln24_14_reg_1390 <= add_ln24_14_fu_708_p2;
        add_ln40_14_reg_1433 <= add_ln40_14_fu_752_p2;
        add_ln40_reg_1422 <= add_ln40_fu_738_p2;
        tmp10_1_0_mid2_reg_1401 <= tmp10_1_0_mid2_fu_722_p2;
        tmp10_2_0_mid2_reg_1408 <= tmp10_2_0_mid2_fu_730_p2;
        zext_ln40_13_reg_1415[3 : 0] <= zext_ln40_13_fu_735_p1[3 : 0];
        zext_ln40_17_reg_1427[3 : 0] <= zext_ln40_17_fu_748_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln24_8_reg_1235 <= add_ln24_8_fu_534_p2;
        add_ln24_9_reg_1240 <= add_ln24_9_fu_540_p2;
        mul_ln40_18_reg_1245 <= mul_ln40_18_fu_546_p2;
        mul_ln48_2_reg_1251 <= mul_ln48_2_fu_551_p2;
        out_w_0_mid2_reg_1264 <= out_w_0_mid2_fu_572_p3;
        select_ln24_14_reg_1257 <= select_ln24_14_fu_561_p3;
        select_ln24_reg_1214 <= select_ln24_fu_510_p3;
        zext_ln24_19_reg_1225[5 : 0] <= zext_ln24_19_fu_530_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_452_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln27_2_reg_1194 <= add_ln27_2_fu_484_p2;
        icmp_ln32_reg_1180 <= icmp_ln32_fu_463_p2;
        out_d_reg_1174 <= out_d_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln27_reg_1153 <= add_ln27_fu_436_p2;
        icmp_ln23_reg_1170 <= icmp_ln23_fu_452_p2;
        icmp_ln23_reg_1170_pp0_iter1_reg <= icmp_ln23_reg_1170;
        icmp_ln23_reg_1170_pp0_iter2_reg <= icmp_ln23_reg_1170_pp0_iter1_reg;
        mul_ln40_reg_1158 <= mul_ln40_fu_442_p2;
        mul_ln48_reg_1164 <= mul_ln48_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1180 == 1'd0) & (icmp_ln23_reg_1170 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln32_2_reg_1271 <= add_ln32_2_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln40_12_reg_1484 <= add_ln40_12_fu_789_p2;
        add_ln40_15_reg_1494 <= add_ln40_15_fu_798_p2;
        zext_ln40_15_reg_1478[3 : 0] <= zext_ln40_15_fu_785_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln40_16_reg_1524 <= add_ln40_16_fu_817_p2;
        add_ln40_17_reg_1529 <= add_ln40_17_fu_821_p2;
        add_ln40_18_reg_1534 <= add_ln40_18_fu_825_p2;
        add_ln40_19_reg_1539 <= add_ln40_19_fu_829_p2;
        add_ln40_20_reg_1544 <= add_ln40_20_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln48_10_reg_1629 <= add_ln48_10_fu_940_p2;
        mul_ln40_13_reg_1614 <= mul_ln40_13_fu_1079_p2;
        mul_ln40_14_reg_1619 <= mul_ln40_14_fu_1085_p2;
        trunc_ln48_9_reg_1609 <= {{mul_ln40_10_reg_1579[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln48_12_reg_1644 <= add_ln48_12_fu_981_p2;
        add_ln48_13_reg_1649 <= add_ln48_13_fu_986_p2;
        mul_ln40_15_reg_1634 <= mul_ln40_15_fu_1091_p2;
        mul_ln40_16_reg_1639 <= mul_ln40_16_fu_1097_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln48_15_reg_1669 <= add_ln48_15_fu_1031_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln48_17_reg_1674 <= add_ln48_17_fu_1040_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln48_9_reg_1604 <= add_ln48_9_fu_899_p2;
        mul_ln40_10_reg_1579 <= mul_ln40_10_fu_1067_p2;
        mul_ln40_12_reg_1589 <= mul_ln40_12_fu_1073_p2;
        trunc_ln48_s_reg_1584 <= {{mul_ln40_11_reg_1564[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln48_reg_1549 <= grp_fu_1049_p3;
        kernel_load_15_reg_1499 <= kernel_q0;
        kernel_load_16_reg_1504 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln48_reg_1549_pp0_iter2_reg <= add_ln48_reg_1549;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        bias_load_reg_1554 <= bias_q0;
        mul_ln40_11_reg_1564 <= mul_ln40_11_fu_1061_p2;
        mul_ln40_9_reg_1559 <= mul_ln40_9_fu_1055_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_1133 <= empty_fu_380_p1;
        icmp_ln33_reg_1148 <= icmp_ln33_fu_410_p2;
        mul_ln4_reg_1138 <= mul_ln4_fu_396_p2;
        tmp_2_reg_1143[10 : 3] <= tmp_2_fu_402_p3[10 : 3];
        zext_ln40_1_cast14_reg_1115[5 : 0] <= zext_ln40_1_cast14_fu_368_p1[5 : 0];
        zext_ln40_reg_1109[5 : 0] <= zext_ln40_fu_364_p1[5 : 0];
        zext_ln48_1_cast_reg_1128[4 : 0] <= zext_ln48_1_cast_fu_376_p1[4 : 0];
        zext_ln48_reg_1122[4 : 0] <= zext_ln48_fu_372_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        kernel_load_10_reg_1323 <= kernel_q1;
        kernel_load_11_reg_1328 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        kernel_load_12_reg_1370 <= kernel_q0;
        kernel_load_9_reg_1365 <= kernel_q1;
        select_ln24_9_reg_1395 <= select_ln24_9_fu_713_p3;
        select_ln32_14_reg_1438 <= select_ln32_14_fu_757_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_load_13_reg_1443 <= kernel_q1;
        kernel_load_14_reg_1448 <= kernel_q0;
        out_w_reg_1473 <= out_w_fu_780_p2;
        select_ln32_reg_1463 <= select_ln32_fu_771_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        kernel_load_reg_1276 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1170_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln40_17_reg_1664 <= mul_ln40_17_fu_1103_p2;
        trunc_ln48_3_reg_1654 <= {{mul_ln40_15_reg_1634[29:14]}};
        trunc_ln48_4_reg_1659 <= {{mul_ln40_16_reg_1639[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_356 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_360 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1180 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp11_reg_1204 <= tmp11_fu_499_p2;
        tmp_0_0_reg_1199 <= tmp_0_0_fu_494_p2;
    end
end

always @ (*) begin
    if ((icmp_ln23_reg_1170 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten48_phi_fu_302_p4 = add_ln23_reg_1209;
    end else begin
        ap_phi_mux_indvar_flatten48_phi_fu_302_p4 = indvar_flatten48_reg_298;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_326_p4 = select_ln32_14_reg_1438;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_326_p4 = indvar_flatten_reg_322;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1170 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_314_p4 = select_ln24_9_reg_1395;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_314_p4 = out_d_0_reg_310;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_h_0_phi_fu_338_p4 = select_ln32_reg_1463;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_338_p4 = out_h_0_reg_334;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1170_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_w_0_phi_fu_349_p4 = out_w_reg_1473;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_349_p4 = out_w_0_reg_345;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address0 = zext_ln40_24_fu_936_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address0 = zext_ln40_22_fu_891_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address0 = zext_ln40_20_fu_851_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = zext_ln40_16_fu_809_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address0 = zext_ln40_14_fu_776_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = zext_ln40_23_fu_895_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln40_21_fu_855_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln40_19_fu_813_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address1 = zext_ln40_18_fu_794_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_address0 = zext_ln24_16_fu_763_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        kernel_address0 = zext_ln24_15_fu_699_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_address0 = zext_ln24_13_fu_663_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_address0 = zext_ln24_12_fu_595_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_address0 = zext_ln24_fu_525_p1;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_address1 = zext_ln24_17_fu_767_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        kernel_address1 = zext_ln24_14_fu_695_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_address1 = zext_ln24_10_fu_659_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_address1 = zext_ln24_11_fu_591_p1;
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1170_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((icmp_ln23_reg_1170 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((icmp_ln23_reg_1170 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_504_p2 = (11'd1 + indvar_flatten48_reg_298);

assign add_ln24_10_fu_599_p2 = (7'd4 + zext_ln24_19_reg_1225);

assign add_ln24_11_fu_667_p2 = (7'd5 + zext_ln24_19_reg_1225);

assign add_ln24_12_fu_672_p2 = (7'd6 + zext_ln24_19_reg_1225);

assign add_ln24_13_fu_703_p2 = (7'd7 + zext_ln24_19_reg_1225);

assign add_ln24_14_fu_708_p2 = (7'd8 + zext_ln24_19_reg_1225);

assign add_ln24_8_fu_534_p2 = (7'd2 + zext_ln24_19_fu_530_p1);

assign add_ln24_9_fu_540_p2 = (7'd3 + zext_ln24_19_fu_530_p1);

assign add_ln24_fu_586_p2 = (7'd1 + zext_ln24_19_reg_1225);

assign add_ln27_2_fu_484_p2 = (zext_ln27_4_fu_468_p1 + shl_ln27_mid1_fu_476_p3);

assign add_ln27_fu_436_p2 = (zext_ln27_fu_420_p1 + shl_ln_fu_428_p3);

assign add_ln32_2_fu_580_p2 = (8'd1 + indvar_flatten_reg_322);

assign add_ln40_12_fu_789_p2 = (tmp10_0_0_mid2_reg_1348 + zext_ln40_15_fu_785_p1);

assign add_ln40_13_fu_743_p2 = (4'd2 + out_w_0_mid2_reg_1264);

assign add_ln40_14_fu_752_p2 = (tmp10_0_0_mid2_reg_1348 + zext_ln40_17_fu_748_p1);

assign add_ln40_15_fu_798_p2 = (zext_ln40_13_reg_1415 + tmp10_1_0_mid2_reg_1401);

assign add_ln40_16_fu_817_p2 = (tmp10_1_0_mid2_reg_1401 + zext_ln40_15_reg_1478);

assign add_ln40_17_fu_821_p2 = (tmp10_1_0_mid2_reg_1401 + zext_ln40_17_reg_1427);

assign add_ln40_18_fu_825_p2 = (zext_ln40_13_reg_1415 + tmp10_2_0_mid2_reg_1408);

assign add_ln40_19_fu_829_p2 = (tmp10_2_0_mid2_reg_1408 + zext_ln40_15_reg_1478);

assign add_ln40_20_fu_833_p2 = (tmp10_2_0_mid2_reg_1408 + zext_ln40_17_reg_1427);

assign add_ln40_fu_738_p2 = (zext_ln40_13_fu_735_p1 + tmp10_0_0_mid2_reg_1348);

assign add_ln48_10_fu_940_p2 = (trunc_ln48_8_fu_919_p4 + trunc_ln48_s_reg_1584);

assign add_ln48_11_fu_977_p2 = (trunc_ln48_9_reg_1609 + add_ln48_10_reg_1629);

assign add_ln48_12_fu_981_p2 = (add_ln48_9_reg_1604 + add_ln48_11_fu_977_p2);

assign add_ln48_13_fu_986_p2 = (trunc_ln48_2_fu_960_p4 + trunc_ln48_1_fu_951_p4);

assign add_ln48_14_fu_1026_p2 = (trunc_ln48_5_fu_1017_p4 + trunc_ln48_4_reg_1659);

assign add_ln48_15_fu_1031_p2 = (trunc_ln48_3_reg_1654 + add_ln48_14_fu_1026_p2);

assign add_ln48_16_fu_1036_p2 = (add_ln48_13_reg_1649 + add_ln48_15_reg_1669);

assign add_ln48_17_fu_1040_p2 = (add_ln48_12_reg_1644 + add_ln48_16_fu_1036_p2);

assign add_ln48_9_fu_899_p2 = (trunc_ln_fu_865_p4 + bias_load_reg_1554);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_address0 = zext_ln24_18_fu_802_p1;

assign empty_59_fu_384_p1 = output_height[3:0];

assign empty_61_fu_567_p2 = (select_ln24_14_fu_561_p3 | icmp_ln32_reg_1180);

assign empty_fu_380_p1 = output_width[3:0];

assign grp_fu_1049_p0 = zext_ln48_1_cast_reg_1128;

assign grp_fu_1049_p1 = grp_fu_1049_p10;

assign grp_fu_1049_p10 = tmp12_mid2_v_v_reg_1313;

assign grp_fu_1049_p2 = zext_ln40_13_reg_1415;

assign icmp_ln23_fu_452_p2 = ((ap_phi_mux_indvar_flatten48_phi_fu_302_p4 == tmp_2_reg_1143) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_463_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_326_p4 == mul_ln4_reg_1138) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_556_p2 = ((ap_phi_mux_out_w_0_phi_fu_349_p4 == empty_reg_1133) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_410_p2 = ((empty_fu_380_p1 == 4'd0) ? 1'b1 : 1'b0);

assign mul_ln40_18_fu_546_p0 = zext_ln48_4_fu_517_p1;

assign mul_ln40_18_fu_546_p1 = zext_ln40_reg_1109;

assign mul_ln40_18_fu_546_p2 = (mul_ln40_18_fu_546_p0 * mul_ln40_18_fu_546_p1);

assign mul_ln40_fu_442_p0 = zext_ln48_2_fu_416_p1;

assign mul_ln40_fu_442_p1 = zext_ln40_reg_1109;

assign mul_ln40_fu_442_p2 = (mul_ln40_fu_442_p0 * mul_ln40_fu_442_p1);

assign mul_ln48_2_fu_551_p0 = zext_ln48_4_fu_517_p1;

assign mul_ln48_2_fu_551_p1 = zext_ln48_reg_1122;

assign mul_ln48_2_fu_551_p2 = (mul_ln48_2_fu_551_p0 * mul_ln48_2_fu_551_p1);

assign mul_ln48_fu_447_p0 = zext_ln48_2_fu_416_p1;

assign mul_ln48_fu_447_p1 = zext_ln48_reg_1122;

assign mul_ln48_fu_447_p2 = (mul_ln48_fu_447_p0 * mul_ln48_fu_447_p1);

assign mul_ln4_fu_396_p0 = mul_ln4_fu_396_p00;

assign mul_ln4_fu_396_p00 = empty_59_fu_384_p1;

assign mul_ln4_fu_396_p1 = mul_ln4_fu_396_p10;

assign mul_ln4_fu_396_p10 = empty_fu_380_p1;

assign mul_ln4_fu_396_p2 = (mul_ln4_fu_396_p0 * mul_ln4_fu_396_p1);

assign out_d_fu_457_p2 = (4'd1 + ap_phi_mux_out_d_0_phi_fu_314_p4);

assign out_h_fu_624_p2 = (4'd1 + select_ln24_reg_1214);

assign out_w_0_mid2_fu_572_p3 = ((empty_61_fu_567_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_w_0_phi_fu_349_p4);

assign out_w_fu_780_p2 = (4'd1 + out_w_0_mid2_reg_1264);

assign output_r_address0 = zext_ln48_3_fu_1045_p1;

assign output_r_d0 = add_ln48_17_reg_1674;

assign select_ln24_10_fu_604_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? mul_ln40_18_reg_1245 : mul_ln40_reg_1158);

assign select_ln24_11_fu_609_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? mul_ln48_2_reg_1251 : mul_ln48_reg_1164);

assign select_ln24_12_fu_614_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? mul_ln40_18_reg_1245 : tmp_0_0_reg_1199);

assign select_ln24_13_fu_619_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? mul_ln48_2_reg_1251 : tmp11_reg_1204);

assign select_ln24_14_fu_561_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? icmp_ln33_reg_1148 : icmp_ln33_2_fu_556_p2);

assign select_ln24_8_fu_520_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? add_ln27_2_reg_1194 : add_ln27_reg_1153);

assign select_ln24_9_fu_713_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? out_d_reg_1174 : out_d_0_reg_310);

assign select_ln24_fu_510_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_h_0_phi_fu_338_p4);

assign select_ln32_14_fu_757_p3 = ((icmp_ln32_reg_1180[0:0] === 1'b1) ? 8'd1 : add_ln32_2_reg_1271);

assign select_ln32_fu_771_p3 = ((select_ln24_14_reg_1257[0:0] === 1'b1) ? out_h_reg_1301 : select_ln24_reg_1214);

assign shl_ln27_mid1_fu_476_p3 = {{trunc_ln27_2_fu_472_p1}, {3'd0}};

assign shl_ln_fu_428_p3 = {{trunc_ln27_fu_424_p1}, {3'd0}};

assign tmp10_0_0_mid2_fu_680_p0 = zext_ln40_1_cast14_reg_1115;

assign tmp10_0_0_mid2_fu_680_p1 = tmp10_0_0_mid2_fu_680_p10;

assign tmp10_0_0_mid2_fu_680_p10 = tmp10_0_0_mid2_v_v_reg_1306;

assign tmp10_0_0_mid2_fu_680_p2 = (tmp10_0_0_mid2_fu_680_p0 * tmp10_0_0_mid2_fu_680_p1);

assign tmp10_0_0_mid2_v_v_fu_639_p3 = ((select_ln24_14_reg_1257[0:0] === 1'b1) ? tmp_0_0_mid1_fu_633_p2 : select_ln24_12_fu_614_p3);

assign tmp10_1_0_mid2_fu_722_p0 = zext_ln40_1_cast14_reg_1115;

assign tmp10_1_0_mid2_fu_722_p1 = tmp10_1_0_mid2_fu_722_p10;

assign tmp10_1_0_mid2_fu_722_p10 = tmp10_1_0_mid2_v_v_reg_1355;

assign tmp10_1_0_mid2_fu_722_p2 = (tmp10_1_0_mid2_fu_722_p0 * tmp10_1_0_mid2_fu_722_p1);

assign tmp10_1_0_mid2_v_v_fu_685_p2 = (7'd1 + tmp10_0_0_mid2_v_v_reg_1306);

assign tmp10_2_0_mid2_fu_730_p0 = zext_ln40_1_cast14_reg_1115;

assign tmp10_2_0_mid2_fu_730_p1 = tmp10_2_0_mid2_fu_730_p10;

assign tmp10_2_0_mid2_fu_730_p10 = tmp10_2_0_mid2_v_v_reg_1360;

assign tmp10_2_0_mid2_fu_730_p2 = (tmp10_2_0_mid2_fu_730_p0 * tmp10_2_0_mid2_fu_730_p1);

assign tmp10_2_0_mid2_v_v_fu_690_p2 = (7'd2 + tmp10_0_0_mid2_v_v_reg_1306);

assign tmp11_fu_499_p2 = (zext_ln40_2_cast_fu_490_p1 + mul_ln48_reg_1164);

assign tmp11_mid1_fu_646_p2 = (zext_ln40_2_cast_mid_fu_629_p1 + select_ln24_11_fu_609_p3);

assign tmp12_mid2_v_v_fu_652_p3 = ((select_ln24_14_reg_1257[0:0] === 1'b1) ? tmp11_mid1_fu_646_p2 : select_ln24_13_fu_619_p3);

assign tmp_0_0_fu_494_p2 = (zext_ln40_2_cast_fu_490_p1 + mul_ln40_reg_1158);

assign tmp_0_0_mid1_fu_633_p2 = (zext_ln40_2_cast_mid_fu_629_p1 + select_ln24_10_fu_604_p3);

assign tmp_2_fu_402_p3 = {{mul_ln4_fu_396_p2}, {3'd0}};

assign trunc_ln27_2_fu_472_p1 = out_d_fu_457_p2[2:0];

assign trunc_ln27_fu_424_p1 = ap_phi_mux_out_d_0_phi_fu_314_p4[2:0];

assign trunc_ln48_1_fu_951_p4 = {{mul_ln40_13_reg_1614[29:14]}};

assign trunc_ln48_2_fu_960_p4 = {{mul_ln40_14_reg_1619[29:14]}};

assign trunc_ln48_5_fu_1017_p4 = {{mul_ln40_17_reg_1664[29:14]}};

assign trunc_ln48_8_fu_919_p4 = {{mul_ln40_12_reg_1589[29:14]}};

assign trunc_ln_fu_865_p4 = {{mul_ln40_9_reg_1559[29:14]}};

assign zext_ln24_10_fu_659_p1 = add_ln24_reg_1281;

assign zext_ln24_11_fu_591_p1 = add_ln24_8_reg_1235;

assign zext_ln24_12_fu_595_p1 = add_ln24_9_reg_1240;

assign zext_ln24_13_fu_663_p1 = add_ln24_10_reg_1296;

assign zext_ln24_14_fu_695_p1 = add_ln24_11_reg_1338;

assign zext_ln24_15_fu_699_p1 = add_ln24_12_reg_1343;

assign zext_ln24_16_fu_763_p1 = add_ln24_13_reg_1385;

assign zext_ln24_17_fu_767_p1 = add_ln24_14_reg_1390;

assign zext_ln24_18_fu_802_p1 = select_ln24_9_reg_1395;

assign zext_ln24_19_fu_530_p1 = select_ln24_8_fu_520_p3;

assign zext_ln24_fu_525_p1 = select_ln24_8_fu_520_p3;

assign zext_ln27_4_fu_468_p1 = out_d_fu_457_p2;

assign zext_ln27_fu_420_p1 = ap_phi_mux_out_d_0_phi_fu_314_p4;

assign zext_ln40_13_fu_735_p1 = out_w_0_mid2_reg_1264;

assign zext_ln40_14_fu_776_p1 = add_ln40_reg_1422;

assign zext_ln40_15_fu_785_p1 = out_w_fu_780_p2;

assign zext_ln40_16_fu_809_p1 = add_ln40_12_reg_1484;

assign zext_ln40_17_fu_748_p1 = add_ln40_13_fu_743_p2;

assign zext_ln40_18_fu_794_p1 = add_ln40_14_reg_1433;

assign zext_ln40_19_fu_813_p1 = add_ln40_15_reg_1494;

assign zext_ln40_1_cast14_fu_368_p1 = input_width;

assign zext_ln40_20_fu_851_p1 = add_ln40_16_reg_1524;

assign zext_ln40_21_fu_855_p1 = add_ln40_17_reg_1529;

assign zext_ln40_22_fu_891_p1 = add_ln40_18_reg_1534;

assign zext_ln40_23_fu_895_p1 = add_ln40_19_reg_1539;

assign zext_ln40_24_fu_936_p1 = add_ln40_20_reg_1544;

assign zext_ln40_2_cast_fu_490_p1 = ap_phi_mux_out_h_0_phi_fu_338_p4;

assign zext_ln40_2_cast_mid_fu_629_p1 = out_h_fu_624_p2;

assign zext_ln40_fu_364_p1 = input_height;

assign zext_ln48_1_cast_fu_376_p1 = output_width;

assign zext_ln48_2_fu_416_p1 = ap_phi_mux_out_d_0_phi_fu_314_p4;

assign zext_ln48_3_fu_1045_p1 = add_ln48_reg_1549_pp0_iter2_reg;

assign zext_ln48_4_fu_517_p1 = out_d_reg_1174;

assign zext_ln48_fu_372_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln40_reg_1109[6] <= 1'b0;
    zext_ln40_1_cast14_reg_1115[10:6] <= 5'b00000;
    zext_ln48_reg_1122[6:5] <= 2'b00;
    zext_ln48_1_cast_reg_1128[10:5] <= 6'b000000;
    tmp_2_reg_1143[2:0] <= 3'b000;
    zext_ln24_19_reg_1225[6] <= 1'b0;
    zext_ln40_13_reg_1415[10:4] <= 7'b0000000;
    zext_ln40_17_reg_1427[10:4] <= 7'b0000000;
    zext_ln40_15_reg_1478[10:4] <= 7'b0000000;
end

endmodule //depthwise_conv2d_fix_1
