// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_0_b_s_address0;
reg    SeparableConv2D_0_b_s_ce0;
wire   [13:0] SeparableConv2D_0_b_s_q0;
wire   [3:0] SeparableConv2D_0_w_s_address0;
reg    SeparableConv2D_0_w_s_ce0;
wire   [13:0] SeparableConv2D_0_w_s_q0;
wire   [14:0] zext_ln24_fu_146_p1;
reg   [14:0] zext_ln24_reg_338;
wire    ap_CS_fsm_state2;
wire   [13:0] add_ln24_fu_150_p2;
reg   [13:0] add_ln24_reg_343;
wire   [4:0] out_d_fu_162_p2;
reg   [4:0] out_d_reg_351;
wire   [0:0] icmp_ln24_fu_156_p2;
wire  signed [29:0] sext_ln37_2_cast_fu_182_p1;
reg  signed [29:0] sext_ln37_2_cast_reg_366;
wire    ap_CS_fsm_state3;
wire  signed [18:0] sext_ln31_fu_186_p1;
reg  signed [18:0] sext_ln31_reg_371;
wire   [4:0] out_h_fu_196_p2;
reg   [4:0] out_h_reg_379;
wire    ap_CS_fsm_state4;
wire   [10:0] sub_ln37_fu_226_p2;
reg   [10:0] sub_ln37_reg_384;
wire   [0:0] icmp_ln31_fu_190_p2;
wire   [4:0] out_w_fu_238_p2;
reg   [4:0] out_w_reg_392;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln33_fu_232_p2;
wire   [14:0] add_ln43_fu_266_p2;
reg   [14:0] add_ln43_reg_402;
reg  signed [15:0] input_load_reg_407;
wire    ap_CS_fsm_state6;
reg   [16:0] tmp_reg_412;
wire    ap_CS_fsm_state7;
reg   [4:0] out_d_0_reg_102;
reg   [13:0] phi_mul_reg_113;
reg   [4:0] out_h_0_reg_124;
reg   [4:0] out_w_0_reg_135;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln25_fu_168_p1;
wire   [63:0] zext_ln28_1_fu_177_p1;
wire   [63:0] zext_ln37_4_fu_257_p1;
wire   [63:0] zext_ln43_fu_327_p1;
wire   [3:0] trunc_ln26_fu_173_p1;
wire   [9:0] shl_ln_fu_202_p3;
wire   [6:0] shl_ln37_1_fu_214_p3;
wire   [10:0] zext_ln37_2_fu_210_p1;
wire   [10:0] zext_ln37_5_fu_222_p1;
wire   [10:0] zext_ln35_fu_244_p1;
wire  signed [10:0] add_ln37_fu_248_p2;
wire  signed [31:0] sext_ln37_fu_253_p1;
wire  signed [14:0] sext_ln43_fu_262_p1;
wire  signed [29:0] mul_ln37_fu_332_p2;
wire  signed [18:0] sext_ln37_14_fu_283_p1;
wire   [18:0] buffer_fu_286_p2;
wire   [0:0] tmp_4_fu_291_p3;
wire   [0:0] xor_ln42_fu_303_p2;
wire   [15:0] select_ln42_fu_309_p3;
wire   [15:0] trunc_ln42_fu_299_p1;
wire  signed [31:0] sext_ln43_1_fu_324_p1;
wire  signed [13:0] mul_ln37_fu_332_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

pointwise_conv2d_fix_SeparableConv2D_0_b_s #(
    .DataWidth( 14 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_b_s_address0),
    .ce0(SeparableConv2D_0_b_s_ce0),
    .q0(SeparableConv2D_0_b_s_q0)
);

pointwise_conv2d_fix_SeparableConv2D_0_w_s #(
    .DataWidth( 14 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_w_s_address0),
    .ce0(SeparableConv2D_0_w_s_ce0),
    .q0(SeparableConv2D_0_w_s_q0)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U11(
    .din0(input_load_reg_407),
    .din1(mul_ln37_fu_332_p1),
    .dout(mul_ln37_fu_332_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_0_reg_102 <= out_d_reg_351;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_102 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_232_p2 == 1'd1))) begin
        out_h_0_reg_124 <= out_h_reg_379;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_124 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_0_reg_135 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_w_0_reg_135 <= out_w_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_113 <= add_ln24_reg_343;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_113 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln24_reg_343 <= add_ln24_fu_150_p2;
        out_d_reg_351 <= out_d_fu_162_p2;
        zext_ln24_reg_338[13 : 0] <= zext_ln24_fu_146_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln43_reg_402 <= add_ln43_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_load_reg_407 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_reg_379 <= out_h_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_392 <= out_w_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln31_reg_371 <= sext_ln31_fu_186_p1;
        sext_ln37_2_cast_reg_366 <= sext_ln37_2_cast_fu_182_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln37_reg_384[10 : 2] <= sub_ln37_fu_226_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_reg_412 <= {{mul_ln37_fu_332_p2[29:13]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_0_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_0_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln24_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln24_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln31_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_232_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_0_b_s_address0 = zext_ln25_fu_168_p1;

assign SeparableConv2D_0_w_s_address0 = zext_ln28_1_fu_177_p1;

assign add_ln24_fu_150_p2 = (phi_mul_reg_113 + 14'd784);

assign add_ln37_fu_248_p2 = (zext_ln35_fu_244_p1 + sub_ln37_reg_384);

assign add_ln43_fu_266_p2 = ($signed(zext_ln24_reg_338) + $signed(sext_ln43_fu_262_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign buffer_fu_286_p2 = ($signed(sext_ln37_14_fu_283_p1) + $signed(sext_ln31_reg_371));

assign icmp_ln24_fu_156_p2 = ((out_d_0_reg_102 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_190_p2 = ((out_h_0_reg_124 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_232_p2 = ((out_w_0_reg_135 == 5'd28) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln37_4_fu_257_p1;

assign mul_ln37_fu_332_p1 = sext_ln37_2_cast_reg_366;

assign out_d_fu_162_p2 = (out_d_0_reg_102 + 5'd1);

assign out_h_fu_196_p2 = (out_h_0_reg_124 + 5'd1);

assign out_w_fu_238_p2 = (out_w_0_reg_135 + 5'd1);

assign output_r_address0 = zext_ln43_fu_327_p1;

assign output_r_d0 = (trunc_ln42_fu_299_p1 & select_ln42_fu_309_p3);

assign select_ln42_fu_309_p3 = ((xor_ln42_fu_303_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln31_fu_186_p1 = $signed(SeparableConv2D_0_b_s_q0);

assign sext_ln37_14_fu_283_p1 = $signed(tmp_reg_412);

assign sext_ln37_2_cast_fu_182_p1 = $signed(SeparableConv2D_0_w_s_q0);

assign sext_ln37_fu_253_p1 = add_ln37_fu_248_p2;

assign sext_ln43_1_fu_324_p1 = $signed(add_ln43_reg_402);

assign sext_ln43_fu_262_p1 = add_ln37_fu_248_p2;

assign shl_ln37_1_fu_214_p3 = {{out_h_0_reg_124}, {2'd0}};

assign shl_ln_fu_202_p3 = {{out_h_0_reg_124}, {5'd0}};

assign sub_ln37_fu_226_p2 = (zext_ln37_2_fu_210_p1 - zext_ln37_5_fu_222_p1);

assign tmp_4_fu_291_p3 = buffer_fu_286_p2[32'd18];

assign trunc_ln26_fu_173_p1 = out_d_0_reg_102[3:0];

assign trunc_ln42_fu_299_p1 = buffer_fu_286_p2[15:0];

assign xor_ln42_fu_303_p2 = (tmp_4_fu_291_p3 ^ 1'd1);

assign zext_ln24_fu_146_p1 = phi_mul_reg_113;

assign zext_ln25_fu_168_p1 = out_d_0_reg_102;

assign zext_ln28_1_fu_177_p1 = trunc_ln26_fu_173_p1;

assign zext_ln35_fu_244_p1 = out_w_0_reg_135;

assign zext_ln37_2_fu_210_p1 = shl_ln_fu_202_p3;

assign zext_ln37_4_fu_257_p1 = $unsigned(sext_ln37_fu_253_p1);

assign zext_ln37_5_fu_222_p1 = shl_ln37_1_fu_214_p3;

assign zext_ln43_fu_327_p1 = $unsigned(sext_ln43_1_fu_324_p1);

always @ (posedge ap_clk) begin
    zext_ln24_reg_338[14] <= 1'b0;
    sub_ln37_reg_384[1:0] <= 2'b00;
end

endmodule //pointwise_conv2d_fix
