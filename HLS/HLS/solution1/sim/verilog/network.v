// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="network,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=39,HLS_SYN_DSP=47,HLS_SYN_FF=8202,HLS_SYN_LUT=12678,HLS_VERSION=2019_1}" *)

module network (
        ap_clk,
        ap_rst_n,
        input_data_TDATA,
        input_data_TVALID,
        input_data_TREADY,
        input_data_TKEEP,
        input_data_TSTRB,
        input_data_TUSER,
        input_data_TLAST,
        input_data_TID,
        input_data_TDEST,
        output_data_TDATA,
        output_data_TVALID,
        output_data_TREADY,
        output_data_TKEEP,
        output_data_TSTRB,
        output_data_TUSER,
        output_data_TLAST,
        output_data_TID,
        output_data_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_pp1_stage0 = 45'd1099511627776;
parameter    ap_ST_fsm_state43 = 45'd2199023255552;
parameter    ap_ST_fsm_pp2_stage0 = 45'd4398046511104;
parameter    ap_ST_fsm_state47 = 45'd8796093022208;
parameter    ap_ST_fsm_state48 = 45'd17592186044416;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] input_data_TDATA;
input   input_data_TVALID;
output   input_data_TREADY;
input  [1:0] input_data_TKEEP;
input  [1:0] input_data_TSTRB;
input  [0:0] input_data_TUSER;
input  [0:0] input_data_TLAST;
input  [0:0] input_data_TID;
input  [0:0] input_data_TDEST;
output  [15:0] output_data_TDATA;
output   output_data_TVALID;
input   output_data_TREADY;
output  [1:0] output_data_TKEEP;
output  [1:0] output_data_TSTRB;
output  [0:0] output_data_TUSER;
output  [0:0] output_data_TLAST;
output  [0:0] output_data_TID;
output  [0:0] output_data_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [15:0] input_data_data_V_0_data_out;
wire    input_data_data_V_0_vld_in;
wire    input_data_data_V_0_vld_out;
wire    input_data_data_V_0_ack_in;
reg    input_data_data_V_0_ack_out;
reg   [15:0] input_data_data_V_0_payload_A;
reg   [15:0] input_data_data_V_0_payload_B;
reg    input_data_data_V_0_sel_rd;
reg    input_data_data_V_0_sel_wr;
wire    input_data_data_V_0_sel;
wire    input_data_data_V_0_load_A;
wire    input_data_data_V_0_load_B;
reg   [1:0] input_data_data_V_0_state;
wire    input_data_data_V_0_state_cmp_full;
reg   [1:0] input_data_keep_V_0_data_out;
wire    input_data_keep_V_0_vld_in;
wire    input_data_keep_V_0_vld_out;
wire    input_data_keep_V_0_ack_in;
reg    input_data_keep_V_0_ack_out;
reg   [1:0] input_data_keep_V_0_payload_A;
reg   [1:0] input_data_keep_V_0_payload_B;
reg    input_data_keep_V_0_sel_rd;
reg    input_data_keep_V_0_sel_wr;
wire    input_data_keep_V_0_sel;
wire    input_data_keep_V_0_load_A;
wire    input_data_keep_V_0_load_B;
reg   [1:0] input_data_keep_V_0_state;
wire    input_data_keep_V_0_state_cmp_full;
reg   [1:0] input_data_strb_V_0_data_out;
wire    input_data_strb_V_0_vld_in;
wire    input_data_strb_V_0_vld_out;
wire    input_data_strb_V_0_ack_in;
reg    input_data_strb_V_0_ack_out;
reg   [1:0] input_data_strb_V_0_payload_A;
reg   [1:0] input_data_strb_V_0_payload_B;
reg    input_data_strb_V_0_sel_rd;
reg    input_data_strb_V_0_sel_wr;
wire    input_data_strb_V_0_sel;
wire    input_data_strb_V_0_load_A;
wire    input_data_strb_V_0_load_B;
reg   [1:0] input_data_strb_V_0_state;
wire    input_data_strb_V_0_state_cmp_full;
reg   [0:0] input_data_user_V_0_data_out;
wire    input_data_user_V_0_vld_in;
wire    input_data_user_V_0_vld_out;
wire    input_data_user_V_0_ack_in;
reg    input_data_user_V_0_ack_out;
reg   [0:0] input_data_user_V_0_payload_A;
reg   [0:0] input_data_user_V_0_payload_B;
reg    input_data_user_V_0_sel_rd;
reg    input_data_user_V_0_sel_wr;
wire    input_data_user_V_0_sel;
wire    input_data_user_V_0_load_A;
wire    input_data_user_V_0_load_B;
reg   [1:0] input_data_user_V_0_state;
wire    input_data_user_V_0_state_cmp_full;
reg   [0:0] input_data_last_V_0_data_out;
wire    input_data_last_V_0_vld_in;
wire    input_data_last_V_0_vld_out;
wire    input_data_last_V_0_ack_in;
reg    input_data_last_V_0_ack_out;
reg   [0:0] input_data_last_V_0_payload_A;
reg   [0:0] input_data_last_V_0_payload_B;
reg    input_data_last_V_0_sel_rd;
reg    input_data_last_V_0_sel_wr;
wire    input_data_last_V_0_sel;
wire    input_data_last_V_0_load_A;
wire    input_data_last_V_0_load_B;
reg   [1:0] input_data_last_V_0_state;
wire    input_data_last_V_0_state_cmp_full;
reg   [0:0] input_data_id_V_0_data_out;
wire    input_data_id_V_0_vld_in;
wire    input_data_id_V_0_vld_out;
wire    input_data_id_V_0_ack_in;
reg    input_data_id_V_0_ack_out;
reg   [0:0] input_data_id_V_0_payload_A;
reg   [0:0] input_data_id_V_0_payload_B;
reg    input_data_id_V_0_sel_rd;
reg    input_data_id_V_0_sel_wr;
wire    input_data_id_V_0_sel;
wire    input_data_id_V_0_load_A;
wire    input_data_id_V_0_load_B;
reg   [1:0] input_data_id_V_0_state;
wire    input_data_id_V_0_state_cmp_full;
reg   [0:0] input_data_dest_V_0_data_out;
wire    input_data_dest_V_0_vld_in;
wire    input_data_dest_V_0_vld_out;
wire    input_data_dest_V_0_ack_in;
reg    input_data_dest_V_0_ack_out;
reg   [0:0] input_data_dest_V_0_payload_A;
reg   [0:0] input_data_dest_V_0_payload_B;
reg    input_data_dest_V_0_sel_rd;
reg    input_data_dest_V_0_sel_wr;
wire    input_data_dest_V_0_sel;
wire    input_data_dest_V_0_load_A;
wire    input_data_dest_V_0_load_B;
reg   [1:0] input_data_dest_V_0_state;
wire    input_data_dest_V_0_state_cmp_full;
reg   [15:0] output_data_data_V_1_data_out;
reg    output_data_data_V_1_vld_in;
wire    output_data_data_V_1_vld_out;
wire    output_data_data_V_1_ack_in;
wire    output_data_data_V_1_ack_out;
reg   [15:0] output_data_data_V_1_payload_A;
reg   [15:0] output_data_data_V_1_payload_B;
reg    output_data_data_V_1_sel_rd;
reg    output_data_data_V_1_sel_wr;
wire    output_data_data_V_1_sel;
wire    output_data_data_V_1_load_A;
wire    output_data_data_V_1_load_B;
reg   [1:0] output_data_data_V_1_state;
wire    output_data_data_V_1_state_cmp_full;
reg   [1:0] output_data_keep_V_1_data_out;
reg    output_data_keep_V_1_vld_in;
wire    output_data_keep_V_1_vld_out;
wire    output_data_keep_V_1_ack_in;
wire    output_data_keep_V_1_ack_out;
reg   [1:0] output_data_keep_V_1_payload_A;
reg   [1:0] output_data_keep_V_1_payload_B;
reg    output_data_keep_V_1_sel_rd;
reg    output_data_keep_V_1_sel_wr;
wire    output_data_keep_V_1_sel;
wire    output_data_keep_V_1_load_A;
wire    output_data_keep_V_1_load_B;
reg   [1:0] output_data_keep_V_1_state;
wire    output_data_keep_V_1_state_cmp_full;
reg   [1:0] output_data_strb_V_1_data_out;
reg    output_data_strb_V_1_vld_in;
wire    output_data_strb_V_1_vld_out;
wire    output_data_strb_V_1_ack_in;
wire    output_data_strb_V_1_ack_out;
reg   [1:0] output_data_strb_V_1_payload_A;
reg   [1:0] output_data_strb_V_1_payload_B;
reg    output_data_strb_V_1_sel_rd;
reg    output_data_strb_V_1_sel_wr;
wire    output_data_strb_V_1_sel;
wire    output_data_strb_V_1_load_A;
wire    output_data_strb_V_1_load_B;
reg   [1:0] output_data_strb_V_1_state;
wire    output_data_strb_V_1_state_cmp_full;
reg   [0:0] output_data_user_V_1_data_out;
reg    output_data_user_V_1_vld_in;
wire    output_data_user_V_1_vld_out;
wire    output_data_user_V_1_ack_in;
wire    output_data_user_V_1_ack_out;
reg   [0:0] output_data_user_V_1_payload_A;
reg   [0:0] output_data_user_V_1_payload_B;
reg    output_data_user_V_1_sel_rd;
reg    output_data_user_V_1_sel_wr;
wire    output_data_user_V_1_sel;
wire    output_data_user_V_1_load_A;
wire    output_data_user_V_1_load_B;
reg   [1:0] output_data_user_V_1_state;
wire    output_data_user_V_1_state_cmp_full;
reg   [0:0] output_data_last_V_1_data_out;
reg    output_data_last_V_1_vld_in;
wire    output_data_last_V_1_vld_out;
wire    output_data_last_V_1_ack_in;
wire    output_data_last_V_1_ack_out;
reg   [0:0] output_data_last_V_1_payload_A;
reg   [0:0] output_data_last_V_1_payload_B;
reg    output_data_last_V_1_sel_rd;
reg    output_data_last_V_1_sel_wr;
wire    output_data_last_V_1_sel;
wire    output_data_last_V_1_load_A;
wire    output_data_last_V_1_load_B;
reg   [1:0] output_data_last_V_1_state;
wire    output_data_last_V_1_state_cmp_full;
reg   [0:0] output_data_id_V_1_data_out;
reg    output_data_id_V_1_vld_in;
wire    output_data_id_V_1_vld_out;
wire    output_data_id_V_1_ack_in;
wire    output_data_id_V_1_ack_out;
reg   [0:0] output_data_id_V_1_payload_A;
reg   [0:0] output_data_id_V_1_payload_B;
reg    output_data_id_V_1_sel_rd;
reg    output_data_id_V_1_sel_wr;
wire    output_data_id_V_1_sel;
wire    output_data_id_V_1_load_A;
wire    output_data_id_V_1_load_B;
reg   [1:0] output_data_id_V_1_state;
wire    output_data_id_V_1_state_cmp_full;
reg   [0:0] output_data_dest_V_1_data_out;
reg    output_data_dest_V_1_vld_in;
wire    output_data_dest_V_1_vld_out;
wire    output_data_dest_V_1_ack_in;
wire    output_data_dest_V_1_ack_out;
reg   [0:0] output_data_dest_V_1_payload_A;
reg   [0:0] output_data_dest_V_1_payload_B;
reg    output_data_dest_V_1_sel_rd;
reg    output_data_dest_V_1_sel_wr;
wire    output_data_dest_V_1_sel;
wire    output_data_dest_V_1_load_A;
wire    output_data_dest_V_1_load_B;
reg   [1:0] output_data_dest_V_1_state;
wire    output_data_dest_V_1_state_cmp_full;
reg    SeparableConv2D_1_b_s_ce0;
wire   [15:0] SeparableConv2D_1_b_s_q0;
reg    SeparableConv2D_1_w_s_ce0;
wire   [15:0] SeparableConv2D_1_w_s_q0;
reg    SeparableConv2D_1_w_s_ce1;
wire   [15:0] SeparableConv2D_1_w_s_q1;
reg    SeparableConv2D_2_b_s_ce0;
wire   [15:0] SeparableConv2D_2_b_s_q0;
reg    SeparableConv2D_2_w_s_ce0;
wire   [15:0] SeparableConv2D_2_w_s_q0;
reg    SeparableConv2D_2_w_s_ce1;
wire   [15:0] SeparableConv2D_2_w_s_q1;
reg    SeparableConv2D_3_b_s_ce0;
wire   [15:0] SeparableConv2D_3_b_s_q0;
reg    SeparableConv2D_3_w_s_ce0;
wire   [15:0] SeparableConv2D_3_w_s_q0;
reg    SeparableConv2D_3_w_s_ce1;
wire   [15:0] SeparableConv2D_3_w_s_q1;
reg    SeparableConv2D_4_b_s_ce0;
wire   [15:0] SeparableConv2D_4_b_s_q0;
reg    SeparableConv2D_4_w_s_ce0;
wire   [15:0] SeparableConv2D_4_w_s_q0;
reg    SeparableConv2D_4_w_s_ce1;
wire   [15:0] SeparableConv2D_4_w_s_q1;
wire   [31:0] ap_return;
reg    input_data_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    output_data_TDATA_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln197_reg_692;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln197_reg_692_pp2_iter1_reg;
reg   [9:0] i_1_reg_405;
reg   [9:0] i_2_reg_416;
wire   [31:0] i_fu_619_p2;
wire   [0:0] icmp_ln173_fu_625_p2;
reg   [0:0] icmp_ln173_reg_673;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state41_pp1_stage0_iter0;
wire    ap_block_state42_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [9:0] i_3_fu_631_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln176_fu_637_p1;
reg   [63:0] zext_ln176_reg_682;
wire   [0:0] icmp_ln197_fu_642_p2;
wire    ap_block_state44_pp2_stage0_iter0;
wire    ap_block_state45_pp2_stage0_iter1;
reg    ap_block_state45_io;
wire    ap_block_state46_pp2_stage0_iter2;
reg    ap_block_state46_io;
reg    ap_block_pp2_stage0_11001;
wire   [9:0] i_4_fu_648_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [15:0] MemBank_Out_q0;
wire   [1:0] sig_buffer_keep_V_q0;
wire   [1:0] sig_buffer_strb_V_q0;
wire   [0:0] sig_buffer_user_V_q0;
wire   [0:0] sig_buffer_last_V_q0;
wire   [0:0] sig_buffer_id_V_q0;
wire   [0:0] sig_buffer_dest_V_q0;
wire    ap_CS_fsm_state40;
wire    grp_pointwise_conv2d_fix_4_fu_501_ap_ready;
wire    grp_pointwise_conv2d_fix_4_fu_501_ap_done;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state41;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state43;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state44;
reg   [13:0] MemBank_A_address0;
reg    MemBank_A_ce0;
reg    MemBank_A_we0;
reg   [15:0] MemBank_A_d0;
wire   [15:0] MemBank_A_q0;
reg   [13:0] MemBank_B_address0;
reg    MemBank_B_ce0;
reg    MemBank_B_we0;
reg   [15:0] MemBank_B_d0;
wire   [15:0] MemBank_B_q0;
reg   [13:0] MemBank_B_address1;
reg    MemBank_B_ce1;
reg    MemBank_B_we1;
wire   [15:0] MemBank_B_q1;
reg   [9:0] MemBank_Out_address0;
reg    MemBank_Out_ce0;
reg    MemBank_Out_we0;
reg   [9:0] sig_buffer_keep_V_address0;
reg    sig_buffer_keep_V_ce0;
reg    sig_buffer_keep_V_we0;
reg   [9:0] sig_buffer_strb_V_address0;
reg    sig_buffer_strb_V_ce0;
reg    sig_buffer_strb_V_we0;
reg   [9:0] sig_buffer_user_V_address0;
reg    sig_buffer_user_V_ce0;
reg    sig_buffer_user_V_we0;
reg   [9:0] sig_buffer_last_V_address0;
reg    sig_buffer_last_V_ce0;
reg    sig_buffer_last_V_we0;
reg   [9:0] sig_buffer_id_V_address0;
reg    sig_buffer_id_V_ce0;
reg    sig_buffer_id_V_we0;
reg   [9:0] sig_buffer_dest_V_address0;
reg    sig_buffer_dest_V_ce0;
reg    sig_buffer_dest_V_we0;
wire    grp_depthwise_conv2d_fix_2_fu_427_ap_start;
wire    grp_depthwise_conv2d_fix_2_fu_427_ap_done;
wire    grp_depthwise_conv2d_fix_2_fu_427_ap_idle;
wire    grp_depthwise_conv2d_fix_2_fu_427_ap_ready;
reg   [6:0] grp_depthwise_conv2d_fix_2_fu_427_input_height;
reg   [5:0] grp_depthwise_conv2d_fix_2_fu_427_input_width;
wire   [13:0] grp_depthwise_conv2d_fix_2_fu_427_input_r_address0;
wire    grp_depthwise_conv2d_fix_2_fu_427_input_r_ce0;
wire   [13:0] grp_depthwise_conv2d_fix_2_fu_427_input_r_address1;
wire    grp_depthwise_conv2d_fix_2_fu_427_input_r_ce1;
reg   [5:0] grp_depthwise_conv2d_fix_2_fu_427_output_height;
reg   [5:0] grp_depthwise_conv2d_fix_2_fu_427_output_width;
wire   [13:0] grp_depthwise_conv2d_fix_2_fu_427_output_r_address0;
wire    grp_depthwise_conv2d_fix_2_fu_427_output_r_ce0;
wire    grp_depthwise_conv2d_fix_2_fu_427_output_r_we0;
wire   [15:0] grp_depthwise_conv2d_fix_2_fu_427_output_r_d0;
wire   [3:0] grp_depthwise_conv2d_fix_2_fu_427_bias_address0;
wire    grp_depthwise_conv2d_fix_2_fu_427_bias_ce0;
reg   [15:0] grp_depthwise_conv2d_fix_2_fu_427_bias_q0;
wire   [7:0] grp_depthwise_conv2d_fix_2_fu_427_kernel_address0;
wire    grp_depthwise_conv2d_fix_2_fu_427_kernel_ce0;
reg   [15:0] grp_depthwise_conv2d_fix_2_fu_427_kernel_q0;
wire   [7:0] grp_depthwise_conv2d_fix_2_fu_427_kernel_address1;
wire    grp_depthwise_conv2d_fix_2_fu_427_kernel_ce1;
reg   [15:0] grp_depthwise_conv2d_fix_2_fu_427_kernel_q1;
wire    grp_depthwise_conv2d_fix_1_fu_451_ap_start;
wire    grp_depthwise_conv2d_fix_1_fu_451_ap_done;
wire    grp_depthwise_conv2d_fix_1_fu_451_ap_idle;
wire    grp_depthwise_conv2d_fix_1_fu_451_ap_ready;
reg   [5:0] grp_depthwise_conv2d_fix_1_fu_451_input_height;
reg   [5:0] grp_depthwise_conv2d_fix_1_fu_451_input_width;
wire   [13:0] grp_depthwise_conv2d_fix_1_fu_451_input_r_address0;
wire    grp_depthwise_conv2d_fix_1_fu_451_input_r_ce0;
wire   [13:0] grp_depthwise_conv2d_fix_1_fu_451_input_r_address1;
wire    grp_depthwise_conv2d_fix_1_fu_451_input_r_ce1;
reg   [4:0] grp_depthwise_conv2d_fix_1_fu_451_output_height;
reg   [4:0] grp_depthwise_conv2d_fix_1_fu_451_output_width;
wire   [13:0] grp_depthwise_conv2d_fix_1_fu_451_output_r_address0;
wire    grp_depthwise_conv2d_fix_1_fu_451_output_r_ce0;
wire    grp_depthwise_conv2d_fix_1_fu_451_output_r_we0;
wire   [15:0] grp_depthwise_conv2d_fix_1_fu_451_output_r_d0;
wire   [2:0] grp_depthwise_conv2d_fix_1_fu_451_bias_address0;
wire    grp_depthwise_conv2d_fix_1_fu_451_bias_ce0;
reg   [15:0] grp_depthwise_conv2d_fix_1_fu_451_bias_q0;
wire   [6:0] grp_depthwise_conv2d_fix_1_fu_451_kernel_address0;
wire    grp_depthwise_conv2d_fix_1_fu_451_kernel_ce0;
reg   [15:0] grp_depthwise_conv2d_fix_1_fu_451_kernel_q0;
wire   [6:0] grp_depthwise_conv2d_fix_1_fu_451_kernel_address1;
wire    grp_depthwise_conv2d_fix_1_fu_451_kernel_ce1;
reg   [15:0] grp_depthwise_conv2d_fix_1_fu_451_kernel_q1;
wire    grp_depthwise_conv2d_fix_fu_475_ap_start;
wire    grp_depthwise_conv2d_fix_fu_475_ap_done;
wire    grp_depthwise_conv2d_fix_fu_475_ap_idle;
wire    grp_depthwise_conv2d_fix_fu_475_ap_ready;
wire   [13:0] grp_depthwise_conv2d_fix_fu_475_input_r_address0;
wire    grp_depthwise_conv2d_fix_fu_475_input_r_ce0;
wire   [13:0] grp_depthwise_conv2d_fix_fu_475_input_r_address1;
wire    grp_depthwise_conv2d_fix_fu_475_input_r_ce1;
wire   [13:0] grp_depthwise_conv2d_fix_fu_475_output_r_address0;
wire    grp_depthwise_conv2d_fix_fu_475_output_r_ce0;
wire    grp_depthwise_conv2d_fix_fu_475_output_r_we0;
wire   [15:0] grp_depthwise_conv2d_fix_fu_475_output_r_d0;
wire    grp_pointwise_conv2d_fix_1_fu_483_ap_start;
wire    grp_pointwise_conv2d_fix_1_fu_483_ap_done;
wire    grp_pointwise_conv2d_fix_1_fu_483_ap_idle;
wire    grp_pointwise_conv2d_fix_1_fu_483_ap_ready;
wire   [13:0] grp_pointwise_conv2d_fix_1_fu_483_input_r_address0;
wire    grp_pointwise_conv2d_fix_1_fu_483_input_r_ce0;
wire   [13:0] grp_pointwise_conv2d_fix_1_fu_483_output_r_address0;
wire    grp_pointwise_conv2d_fix_1_fu_483_output_r_ce0;
wire    grp_pointwise_conv2d_fix_1_fu_483_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_1_fu_483_output_r_d0;
wire    grp_pointwise_conv2d_fix_3_fu_489_ap_start;
wire    grp_pointwise_conv2d_fix_3_fu_489_ap_done;
wire    grp_pointwise_conv2d_fix_3_fu_489_ap_idle;
wire    grp_pointwise_conv2d_fix_3_fu_489_ap_ready;
wire   [13:0] grp_pointwise_conv2d_fix_3_fu_489_input_r_address0;
wire    grp_pointwise_conv2d_fix_3_fu_489_input_r_ce0;
wire   [13:0] grp_pointwise_conv2d_fix_3_fu_489_output_r_address0;
wire    grp_pointwise_conv2d_fix_3_fu_489_output_r_ce0;
wire    grp_pointwise_conv2d_fix_3_fu_489_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_3_fu_489_output_r_d0;
wire    grp_pointwise_conv2d_fix_2_fu_495_ap_start;
wire    grp_pointwise_conv2d_fix_2_fu_495_ap_done;
wire    grp_pointwise_conv2d_fix_2_fu_495_ap_idle;
wire    grp_pointwise_conv2d_fix_2_fu_495_ap_ready;
wire   [13:0] grp_pointwise_conv2d_fix_2_fu_495_input_r_address0;
wire    grp_pointwise_conv2d_fix_2_fu_495_input_r_ce0;
wire   [13:0] grp_pointwise_conv2d_fix_2_fu_495_output_r_address0;
wire    grp_pointwise_conv2d_fix_2_fu_495_output_r_ce0;
wire    grp_pointwise_conv2d_fix_2_fu_495_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_2_fu_495_output_r_d0;
wire    grp_pointwise_conv2d_fix_4_fu_501_ap_start;
wire    grp_pointwise_conv2d_fix_4_fu_501_ap_idle;
wire   [13:0] grp_pointwise_conv2d_fix_4_fu_501_input_r_address0;
wire    grp_pointwise_conv2d_fix_4_fu_501_input_r_ce0;
wire   [13:0] grp_pointwise_conv2d_fix_4_fu_501_output_r_address0;
wire    grp_pointwise_conv2d_fix_4_fu_501_output_r_ce0;
wire    grp_pointwise_conv2d_fix_4_fu_501_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_4_fu_501_output_r_d0;
wire    grp_padding2d_fix16_fu_507_ap_start;
wire    grp_padding2d_fix16_fu_507_ap_done;
wire    grp_padding2d_fix16_fu_507_ap_idle;
wire    grp_padding2d_fix16_fu_507_ap_ready;
reg   [6:0] grp_padding2d_fix16_fu_507_input_depth;
reg   [5:0] grp_padding2d_fix16_fu_507_input_height;
reg   [5:0] grp_padding2d_fix16_fu_507_input_width;
wire   [13:0] grp_padding2d_fix16_fu_507_input_r_address0;
wire    grp_padding2d_fix16_fu_507_input_r_ce0;
wire   [13:0] grp_padding2d_fix16_fu_507_output_r_address0;
wire    grp_padding2d_fix16_fu_507_output_r_ce0;
wire    grp_padding2d_fix16_fu_507_output_r_we0;
wire   [15:0] grp_padding2d_fix16_fu_507_output_r_d0;
wire   [13:0] grp_padding2d_fix16_fu_507_output_r_address1;
wire    grp_padding2d_fix16_fu_507_output_r_ce1;
wire    grp_padding2d_fix16_fu_507_output_r_we1;
wire   [15:0] grp_padding2d_fix16_fu_507_output_r_d1;
wire    grp_max_pooling2d_fix16_fu_525_ap_start;
wire    grp_max_pooling2d_fix16_fu_525_ap_done;
wire    grp_max_pooling2d_fix16_fu_525_ap_idle;
wire    grp_max_pooling2d_fix16_fu_525_ap_ready;
reg   [6:0] grp_max_pooling2d_fix16_fu_525_input_height;
reg   [5:0] grp_max_pooling2d_fix16_fu_525_input_width;
wire   [13:0] grp_max_pooling2d_fix16_fu_525_input_r_address0;
wire    grp_max_pooling2d_fix16_fu_525_input_r_ce0;
wire   [13:0] grp_max_pooling2d_fix16_fu_525_input_r_address1;
wire    grp_max_pooling2d_fix16_fu_525_input_r_ce1;
reg   [5:0] grp_max_pooling2d_fix16_fu_525_output_depth;
reg   [4:0] grp_max_pooling2d_fix16_fu_525_output_height;
reg   [4:0] grp_max_pooling2d_fix16_fu_525_output_width;
wire   [13:0] grp_max_pooling2d_fix16_fu_525_output_r_address0;
wire    grp_max_pooling2d_fix16_fu_525_output_r_ce0;
wire    grp_max_pooling2d_fix16_fu_525_output_r_we0;
wire   [15:0] grp_max_pooling2d_fix16_fu_525_output_r_d0;
wire    grp_pointwise_conv2d_fix_fu_546_ap_start;
wire    grp_pointwise_conv2d_fix_fu_546_ap_done;
wire    grp_pointwise_conv2d_fix_fu_546_ap_idle;
wire    grp_pointwise_conv2d_fix_fu_546_ap_ready;
wire   [13:0] grp_pointwise_conv2d_fix_fu_546_input_r_address0;
wire    grp_pointwise_conv2d_fix_fu_546_input_r_ce0;
wire   [13:0] grp_pointwise_conv2d_fix_fu_546_output_r_address0;
wire    grp_pointwise_conv2d_fix_fu_546_output_r_ce0;
wire    grp_pointwise_conv2d_fix_fu_546_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_fu_546_output_r_d0;
wire    grp_up_sampling2d_fix16_fu_552_ap_start;
wire    grp_up_sampling2d_fix16_fu_552_ap_done;
wire    grp_up_sampling2d_fix16_fu_552_ap_idle;
wire    grp_up_sampling2d_fix16_fu_552_ap_ready;
reg   [4:0] grp_up_sampling2d_fix16_fu_552_input_height;
reg   [4:0] grp_up_sampling2d_fix16_fu_552_input_width;
wire   [13:0] grp_up_sampling2d_fix16_fu_552_input_r_address0;
wire    grp_up_sampling2d_fix16_fu_552_input_r_ce0;
reg   [5:0] grp_up_sampling2d_fix16_fu_552_output_depth;
reg   [5:0] grp_up_sampling2d_fix16_fu_552_output_height;
reg   [5:0] grp_up_sampling2d_fix16_fu_552_output_width;
wire   [13:0] grp_up_sampling2d_fix16_fu_552_output_r_address0;
wire    grp_up_sampling2d_fix16_fu_552_output_r_ce0;
wire    grp_up_sampling2d_fix16_fu_552_output_r_we0;
wire   [15:0] grp_up_sampling2d_fix16_fu_552_output_r_d0;
reg  signed [31:0] i_0_reg_394;
wire   [0:0] input_data_last_V_tm_fu_604_p1;
reg    grp_depthwise_conv2d_fix_2_fu_427_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state38;
reg    grp_depthwise_conv2d_fix_1_fu_451_ap_start_reg;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state30;
reg    grp_depthwise_conv2d_fix_fu_475_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg    grp_pointwise_conv2d_fix_1_fu_483_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg    grp_pointwise_conv2d_fix_3_fu_489_ap_start_reg;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
reg    grp_pointwise_conv2d_fix_2_fu_495_ap_start_reg;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
reg    grp_pointwise_conv2d_fix_4_fu_501_ap_start_reg;
wire    ap_CS_fsm_state39;
reg    grp_padding2d_fix16_fu_507_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state36;
reg    grp_max_pooling2d_fix16_fu_525_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state18;
reg    grp_pointwise_conv2d_fix_fu_546_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_up_sampling2d_fix16_fu_552_ap_start_reg;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state34;
wire  signed [63:0] sext_ln71_fu_573_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln200_fu_654_p1;
wire    ap_block_pp2_stage0_01001;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
reg    ap_block_state48;
reg   [44:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 input_data_data_V_0_sel_rd = 1'b0;
#0 input_data_data_V_0_sel_wr = 1'b0;
#0 input_data_data_V_0_state = 2'd0;
#0 input_data_keep_V_0_sel_rd = 1'b0;
#0 input_data_keep_V_0_sel_wr = 1'b0;
#0 input_data_keep_V_0_state = 2'd0;
#0 input_data_strb_V_0_sel_rd = 1'b0;
#0 input_data_strb_V_0_sel_wr = 1'b0;
#0 input_data_strb_V_0_state = 2'd0;
#0 input_data_user_V_0_sel_rd = 1'b0;
#0 input_data_user_V_0_sel_wr = 1'b0;
#0 input_data_user_V_0_state = 2'd0;
#0 input_data_last_V_0_sel_rd = 1'b0;
#0 input_data_last_V_0_sel_wr = 1'b0;
#0 input_data_last_V_0_state = 2'd0;
#0 input_data_id_V_0_sel_rd = 1'b0;
#0 input_data_id_V_0_sel_wr = 1'b0;
#0 input_data_id_V_0_state = 2'd0;
#0 input_data_dest_V_0_sel_rd = 1'b0;
#0 input_data_dest_V_0_sel_wr = 1'b0;
#0 input_data_dest_V_0_state = 2'd0;
#0 output_data_data_V_1_sel_rd = 1'b0;
#0 output_data_data_V_1_sel_wr = 1'b0;
#0 output_data_data_V_1_state = 2'd0;
#0 output_data_keep_V_1_sel_rd = 1'b0;
#0 output_data_keep_V_1_sel_wr = 1'b0;
#0 output_data_keep_V_1_state = 2'd0;
#0 output_data_strb_V_1_sel_rd = 1'b0;
#0 output_data_strb_V_1_sel_wr = 1'b0;
#0 output_data_strb_V_1_state = 2'd0;
#0 output_data_user_V_1_sel_rd = 1'b0;
#0 output_data_user_V_1_sel_wr = 1'b0;
#0 output_data_user_V_1_state = 2'd0;
#0 output_data_last_V_1_sel_rd = 1'b0;
#0 output_data_last_V_1_sel_wr = 1'b0;
#0 output_data_last_V_1_state = 2'd0;
#0 output_data_id_V_1_sel_rd = 1'b0;
#0 output_data_id_V_1_sel_wr = 1'b0;
#0 output_data_id_V_1_state = 2'd0;
#0 output_data_dest_V_1_sel_rd = 1'b0;
#0 output_data_dest_V_1_sel_wr = 1'b0;
#0 output_data_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_depthwise_conv2d_fix_2_fu_427_ap_start_reg = 1'b0;
#0 grp_depthwise_conv2d_fix_1_fu_451_ap_start_reg = 1'b0;
#0 grp_depthwise_conv2d_fix_fu_475_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_1_fu_483_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_3_fu_489_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_2_fu_495_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_4_fu_501_ap_start_reg = 1'b0;
#0 grp_padding2d_fix16_fu_507_ap_start_reg = 1'b0;
#0 grp_max_pooling2d_fix16_fu_525_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_fu_546_ap_start_reg = 1'b0;
#0 grp_up_sampling2d_fix16_fu_552_ap_start_reg = 1'b0;
end

network_SeparableConv2D_1_b_s #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_1_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_depthwise_conv2d_fix_2_fu_427_bias_address0),
    .ce0(SeparableConv2D_1_b_s_ce0),
    .q0(SeparableConv2D_1_b_s_q0)
);

network_SeparableConv2D_1_w_s #(
    .DataWidth( 16 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
SeparableConv2D_1_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_depthwise_conv2d_fix_2_fu_427_kernel_address0),
    .ce0(SeparableConv2D_1_w_s_ce0),
    .q0(SeparableConv2D_1_w_s_q0),
    .address1(grp_depthwise_conv2d_fix_2_fu_427_kernel_address1),
    .ce1(SeparableConv2D_1_w_s_ce1),
    .q1(SeparableConv2D_1_w_s_q1)
);

network_SeparableConv2D_2_b_s #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_2_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_depthwise_conv2d_fix_1_fu_451_bias_address0),
    .ce0(SeparableConv2D_2_b_s_ce0),
    .q0(SeparableConv2D_2_b_s_q0)
);

network_SeparableConv2D_2_w_s #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
SeparableConv2D_2_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_depthwise_conv2d_fix_1_fu_451_kernel_address0),
    .ce0(SeparableConv2D_2_w_s_ce0),
    .q0(SeparableConv2D_2_w_s_q0),
    .address1(grp_depthwise_conv2d_fix_1_fu_451_kernel_address1),
    .ce1(SeparableConv2D_2_w_s_ce1),
    .q1(SeparableConv2D_2_w_s_q1)
);

network_SeparableConv2D_2_b_s #(
    .DataWidth( 16 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_3_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_depthwise_conv2d_fix_1_fu_451_bias_address0),
    .ce0(SeparableConv2D_3_b_s_ce0),
    .q0(SeparableConv2D_3_b_s_q0)
);

network_SeparableConv2D_3_w_s #(
    .DataWidth( 16 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
SeparableConv2D_3_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_depthwise_conv2d_fix_1_fu_451_kernel_address0),
    .ce0(SeparableConv2D_3_w_s_ce0),
    .q0(SeparableConv2D_3_w_s_q0),
    .address1(grp_depthwise_conv2d_fix_1_fu_451_kernel_address1),
    .ce1(SeparableConv2D_3_w_s_ce1),
    .q1(SeparableConv2D_3_w_s_q1)
);

network_SeparableConv2D_1_b_s #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_4_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_depthwise_conv2d_fix_2_fu_427_bias_address0),
    .ce0(SeparableConv2D_4_b_s_ce0),
    .q0(SeparableConv2D_4_b_s_q0)
);

network_SeparableConv2D_4_w_s #(
    .DataWidth( 16 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
SeparableConv2D_4_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_depthwise_conv2d_fix_2_fu_427_kernel_address0),
    .ce0(SeparableConv2D_4_w_s_ce0),
    .q0(SeparableConv2D_4_w_s_q0),
    .address1(grp_depthwise_conv2d_fix_2_fu_427_kernel_address1),
    .ce1(SeparableConv2D_4_w_s_ce1),
    .q1(SeparableConv2D_4_w_s_q1)
);

network_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
network_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_return)
);

network_MemBank_A #(
    .DataWidth( 16 ),
    .AddressRange( 14400 ),
    .AddressWidth( 14 ))
MemBank_A_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(MemBank_A_address0),
    .ce0(MemBank_A_ce0),
    .we0(MemBank_A_we0),
    .d0(MemBank_A_d0),
    .q0(MemBank_A_q0)
);

network_MemBank_B #(
    .DataWidth( 16 ),
    .AddressRange( 14400 ),
    .AddressWidth( 14 ))
MemBank_B_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(MemBank_B_address0),
    .ce0(MemBank_B_ce0),
    .we0(MemBank_B_we0),
    .d0(MemBank_B_d0),
    .q0(MemBank_B_q0),
    .address1(MemBank_B_address1),
    .ce1(MemBank_B_ce1),
    .we1(MemBank_B_we1),
    .d1(grp_padding2d_fix16_fu_507_output_r_d1),
    .q1(MemBank_B_q1)
);

network_MemBank_Out #(
    .DataWidth( 16 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
MemBank_Out_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(MemBank_Out_address0),
    .ce0(MemBank_Out_ce0),
    .we0(MemBank_Out_we0),
    .d0(MemBank_B_q0),
    .q0(MemBank_Out_q0)
);

network_sig_buffer_keep_V #(
    .DataWidth( 2 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
sig_buffer_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sig_buffer_keep_V_address0),
    .ce0(sig_buffer_keep_V_ce0),
    .we0(sig_buffer_keep_V_we0),
    .d0(input_data_keep_V_0_data_out),
    .q0(sig_buffer_keep_V_q0)
);

network_sig_buffer_keep_V #(
    .DataWidth( 2 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
sig_buffer_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sig_buffer_strb_V_address0),
    .ce0(sig_buffer_strb_V_ce0),
    .we0(sig_buffer_strb_V_we0),
    .d0(input_data_strb_V_0_data_out),
    .q0(sig_buffer_strb_V_q0)
);

network_sig_buffer_user_V #(
    .DataWidth( 1 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
sig_buffer_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sig_buffer_user_V_address0),
    .ce0(sig_buffer_user_V_ce0),
    .we0(sig_buffer_user_V_we0),
    .d0(input_data_user_V_0_data_out),
    .q0(sig_buffer_user_V_q0)
);

network_sig_buffer_user_V #(
    .DataWidth( 1 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
sig_buffer_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sig_buffer_last_V_address0),
    .ce0(sig_buffer_last_V_ce0),
    .we0(sig_buffer_last_V_we0),
    .d0(input_data_last_V_0_data_out),
    .q0(sig_buffer_last_V_q0)
);

network_sig_buffer_user_V #(
    .DataWidth( 1 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
sig_buffer_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sig_buffer_id_V_address0),
    .ce0(sig_buffer_id_V_ce0),
    .we0(sig_buffer_id_V_we0),
    .d0(input_data_id_V_0_data_out),
    .q0(sig_buffer_id_V_q0)
);

network_sig_buffer_user_V #(
    .DataWidth( 1 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
sig_buffer_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(sig_buffer_dest_V_address0),
    .ce0(sig_buffer_dest_V_ce0),
    .we0(sig_buffer_dest_V_we0),
    .d0(input_data_dest_V_0_data_out),
    .q0(sig_buffer_dest_V_q0)
);

depthwise_conv2d_fix_2 grp_depthwise_conv2d_fix_2_fu_427(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_2_fu_427_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_2_fu_427_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_2_fu_427_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_2_fu_427_ap_ready),
    .input_height(grp_depthwise_conv2d_fix_2_fu_427_input_height),
    .input_width(grp_depthwise_conv2d_fix_2_fu_427_input_width),
    .input_r_address0(grp_depthwise_conv2d_fix_2_fu_427_input_r_address0),
    .input_r_ce0(grp_depthwise_conv2d_fix_2_fu_427_input_r_ce0),
    .input_r_q0(MemBank_B_q0),
    .input_r_address1(grp_depthwise_conv2d_fix_2_fu_427_input_r_address1),
    .input_r_ce1(grp_depthwise_conv2d_fix_2_fu_427_input_r_ce1),
    .input_r_q1(MemBank_B_q1),
    .output_height(grp_depthwise_conv2d_fix_2_fu_427_output_height),
    .output_width(grp_depthwise_conv2d_fix_2_fu_427_output_width),
    .output_r_address0(grp_depthwise_conv2d_fix_2_fu_427_output_r_address0),
    .output_r_ce0(grp_depthwise_conv2d_fix_2_fu_427_output_r_ce0),
    .output_r_we0(grp_depthwise_conv2d_fix_2_fu_427_output_r_we0),
    .output_r_d0(grp_depthwise_conv2d_fix_2_fu_427_output_r_d0),
    .bias_address0(grp_depthwise_conv2d_fix_2_fu_427_bias_address0),
    .bias_ce0(grp_depthwise_conv2d_fix_2_fu_427_bias_ce0),
    .bias_q0(grp_depthwise_conv2d_fix_2_fu_427_bias_q0),
    .kernel_address0(grp_depthwise_conv2d_fix_2_fu_427_kernel_address0),
    .kernel_ce0(grp_depthwise_conv2d_fix_2_fu_427_kernel_ce0),
    .kernel_q0(grp_depthwise_conv2d_fix_2_fu_427_kernel_q0),
    .kernel_address1(grp_depthwise_conv2d_fix_2_fu_427_kernel_address1),
    .kernel_ce1(grp_depthwise_conv2d_fix_2_fu_427_kernel_ce1),
    .kernel_q1(grp_depthwise_conv2d_fix_2_fu_427_kernel_q1)
);

depthwise_conv2d_fix_1 grp_depthwise_conv2d_fix_1_fu_451(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_1_fu_451_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_1_fu_451_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_1_fu_451_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_1_fu_451_ap_ready),
    .input_height(grp_depthwise_conv2d_fix_1_fu_451_input_height),
    .input_width(grp_depthwise_conv2d_fix_1_fu_451_input_width),
    .input_r_address0(grp_depthwise_conv2d_fix_1_fu_451_input_r_address0),
    .input_r_ce0(grp_depthwise_conv2d_fix_1_fu_451_input_r_ce0),
    .input_r_q0(MemBank_B_q0),
    .input_r_address1(grp_depthwise_conv2d_fix_1_fu_451_input_r_address1),
    .input_r_ce1(grp_depthwise_conv2d_fix_1_fu_451_input_r_ce1),
    .input_r_q1(MemBank_B_q1),
    .output_height(grp_depthwise_conv2d_fix_1_fu_451_output_height),
    .output_width(grp_depthwise_conv2d_fix_1_fu_451_output_width),
    .output_r_address0(grp_depthwise_conv2d_fix_1_fu_451_output_r_address0),
    .output_r_ce0(grp_depthwise_conv2d_fix_1_fu_451_output_r_ce0),
    .output_r_we0(grp_depthwise_conv2d_fix_1_fu_451_output_r_we0),
    .output_r_d0(grp_depthwise_conv2d_fix_1_fu_451_output_r_d0),
    .bias_address0(grp_depthwise_conv2d_fix_1_fu_451_bias_address0),
    .bias_ce0(grp_depthwise_conv2d_fix_1_fu_451_bias_ce0),
    .bias_q0(grp_depthwise_conv2d_fix_1_fu_451_bias_q0),
    .kernel_address0(grp_depthwise_conv2d_fix_1_fu_451_kernel_address0),
    .kernel_ce0(grp_depthwise_conv2d_fix_1_fu_451_kernel_ce0),
    .kernel_q0(grp_depthwise_conv2d_fix_1_fu_451_kernel_q0),
    .kernel_address1(grp_depthwise_conv2d_fix_1_fu_451_kernel_address1),
    .kernel_ce1(grp_depthwise_conv2d_fix_1_fu_451_kernel_ce1),
    .kernel_q1(grp_depthwise_conv2d_fix_1_fu_451_kernel_q1)
);

depthwise_conv2d_fix grp_depthwise_conv2d_fix_fu_475(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_fu_475_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_fu_475_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_fu_475_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_fu_475_ap_ready),
    .input_r_address0(grp_depthwise_conv2d_fix_fu_475_input_r_address0),
    .input_r_ce0(grp_depthwise_conv2d_fix_fu_475_input_r_ce0),
    .input_r_q0(MemBank_B_q0),
    .input_r_address1(grp_depthwise_conv2d_fix_fu_475_input_r_address1),
    .input_r_ce1(grp_depthwise_conv2d_fix_fu_475_input_r_ce1),
    .input_r_q1(MemBank_B_q1),
    .output_r_address0(grp_depthwise_conv2d_fix_fu_475_output_r_address0),
    .output_r_ce0(grp_depthwise_conv2d_fix_fu_475_output_r_ce0),
    .output_r_we0(grp_depthwise_conv2d_fix_fu_475_output_r_we0),
    .output_r_d0(grp_depthwise_conv2d_fix_fu_475_output_r_d0)
);

pointwise_conv2d_fix_1 grp_pointwise_conv2d_fix_1_fu_483(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_1_fu_483_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_1_fu_483_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_1_fu_483_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_1_fu_483_ap_ready),
    .input_r_address0(grp_pointwise_conv2d_fix_1_fu_483_input_r_address0),
    .input_r_ce0(grp_pointwise_conv2d_fix_1_fu_483_input_r_ce0),
    .input_r_q0(MemBank_A_q0),
    .output_r_address0(grp_pointwise_conv2d_fix_1_fu_483_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_1_fu_483_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_1_fu_483_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_1_fu_483_output_r_d0)
);

pointwise_conv2d_fix_3 grp_pointwise_conv2d_fix_3_fu_489(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_3_fu_489_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_3_fu_489_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_3_fu_489_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_3_fu_489_ap_ready),
    .input_r_address0(grp_pointwise_conv2d_fix_3_fu_489_input_r_address0),
    .input_r_ce0(grp_pointwise_conv2d_fix_3_fu_489_input_r_ce0),
    .input_r_q0(MemBank_A_q0),
    .output_r_address0(grp_pointwise_conv2d_fix_3_fu_489_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_3_fu_489_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_3_fu_489_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_3_fu_489_output_r_d0)
);

pointwise_conv2d_fix_2 grp_pointwise_conv2d_fix_2_fu_495(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_2_fu_495_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_2_fu_495_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_2_fu_495_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_2_fu_495_ap_ready),
    .input_r_address0(grp_pointwise_conv2d_fix_2_fu_495_input_r_address0),
    .input_r_ce0(grp_pointwise_conv2d_fix_2_fu_495_input_r_ce0),
    .input_r_q0(MemBank_A_q0),
    .output_r_address0(grp_pointwise_conv2d_fix_2_fu_495_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_2_fu_495_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_2_fu_495_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_2_fu_495_output_r_d0)
);

pointwise_conv2d_fix_4 grp_pointwise_conv2d_fix_4_fu_501(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_4_fu_501_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_4_fu_501_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_4_fu_501_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_4_fu_501_ap_ready),
    .input_r_address0(grp_pointwise_conv2d_fix_4_fu_501_input_r_address0),
    .input_r_ce0(grp_pointwise_conv2d_fix_4_fu_501_input_r_ce0),
    .input_r_q0(MemBank_A_q0),
    .output_r_address0(grp_pointwise_conv2d_fix_4_fu_501_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_4_fu_501_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_4_fu_501_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_4_fu_501_output_r_d0)
);

padding2d_fix16 grp_padding2d_fix16_fu_507(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_padding2d_fix16_fu_507_ap_start),
    .ap_done(grp_padding2d_fix16_fu_507_ap_done),
    .ap_idle(grp_padding2d_fix16_fu_507_ap_idle),
    .ap_ready(grp_padding2d_fix16_fu_507_ap_ready),
    .input_depth(grp_padding2d_fix16_fu_507_input_depth),
    .input_height(grp_padding2d_fix16_fu_507_input_height),
    .input_width(grp_padding2d_fix16_fu_507_input_width),
    .input_r_address0(grp_padding2d_fix16_fu_507_input_r_address0),
    .input_r_ce0(grp_padding2d_fix16_fu_507_input_r_ce0),
    .input_r_q0(MemBank_A_q0),
    .output_r_address0(grp_padding2d_fix16_fu_507_output_r_address0),
    .output_r_ce0(grp_padding2d_fix16_fu_507_output_r_ce0),
    .output_r_we0(grp_padding2d_fix16_fu_507_output_r_we0),
    .output_r_d0(grp_padding2d_fix16_fu_507_output_r_d0),
    .output_r_address1(grp_padding2d_fix16_fu_507_output_r_address1),
    .output_r_ce1(grp_padding2d_fix16_fu_507_output_r_ce1),
    .output_r_we1(grp_padding2d_fix16_fu_507_output_r_we1),
    .output_r_d1(grp_padding2d_fix16_fu_507_output_r_d1)
);

max_pooling2d_fix16 grp_max_pooling2d_fix16_fu_525(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pooling2d_fix16_fu_525_ap_start),
    .ap_done(grp_max_pooling2d_fix16_fu_525_ap_done),
    .ap_idle(grp_max_pooling2d_fix16_fu_525_ap_idle),
    .ap_ready(grp_max_pooling2d_fix16_fu_525_ap_ready),
    .input_height(grp_max_pooling2d_fix16_fu_525_input_height),
    .input_width(grp_max_pooling2d_fix16_fu_525_input_width),
    .input_r_address0(grp_max_pooling2d_fix16_fu_525_input_r_address0),
    .input_r_ce0(grp_max_pooling2d_fix16_fu_525_input_r_ce0),
    .input_r_q0(MemBank_B_q0),
    .input_r_address1(grp_max_pooling2d_fix16_fu_525_input_r_address1),
    .input_r_ce1(grp_max_pooling2d_fix16_fu_525_input_r_ce1),
    .input_r_q1(MemBank_B_q1),
    .output_depth(grp_max_pooling2d_fix16_fu_525_output_depth),
    .output_height(grp_max_pooling2d_fix16_fu_525_output_height),
    .output_width(grp_max_pooling2d_fix16_fu_525_output_width),
    .output_r_address0(grp_max_pooling2d_fix16_fu_525_output_r_address0),
    .output_r_ce0(grp_max_pooling2d_fix16_fu_525_output_r_ce0),
    .output_r_we0(grp_max_pooling2d_fix16_fu_525_output_r_we0),
    .output_r_d0(grp_max_pooling2d_fix16_fu_525_output_r_d0)
);

pointwise_conv2d_fix grp_pointwise_conv2d_fix_fu_546(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_fu_546_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_fu_546_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_fu_546_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_fu_546_ap_ready),
    .input_r_address0(grp_pointwise_conv2d_fix_fu_546_input_r_address0),
    .input_r_ce0(grp_pointwise_conv2d_fix_fu_546_input_r_ce0),
    .input_r_q0(MemBank_A_q0),
    .output_r_address0(grp_pointwise_conv2d_fix_fu_546_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_fu_546_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_fu_546_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_fu_546_output_r_d0)
);

up_sampling2d_fix16 grp_up_sampling2d_fix16_fu_552(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_up_sampling2d_fix16_fu_552_ap_start),
    .ap_done(grp_up_sampling2d_fix16_fu_552_ap_done),
    .ap_idle(grp_up_sampling2d_fix16_fu_552_ap_idle),
    .ap_ready(grp_up_sampling2d_fix16_fu_552_ap_ready),
    .input_height(grp_up_sampling2d_fix16_fu_552_input_height),
    .input_width(grp_up_sampling2d_fix16_fu_552_input_width),
    .input_r_address0(grp_up_sampling2d_fix16_fu_552_input_r_address0),
    .input_r_ce0(grp_up_sampling2d_fix16_fu_552_input_r_ce0),
    .input_r_q0(MemBank_B_q0),
    .output_depth(grp_up_sampling2d_fix16_fu_552_output_depth),
    .output_height(grp_up_sampling2d_fix16_fu_552_output_height),
    .output_width(grp_up_sampling2d_fix16_fu_552_output_width),
    .output_r_address0(grp_up_sampling2d_fix16_fu_552_output_r_address0),
    .output_r_ce0(grp_up_sampling2d_fix16_fu_552_output_r_ce0),
    .output_r_we0(grp_up_sampling2d_fix16_fu_552_output_r_we0),
    .output_r_d0(grp_up_sampling2d_fix16_fu_552_output_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state41) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_4_fu_501_ap_done == 1'b1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state41) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state41);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_4_fu_501_ap_done == 1'b1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state44) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state44)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state44);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_1_fu_451_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state21))) begin
            grp_depthwise_conv2d_fix_1_fu_451_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_1_fu_451_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_1_fu_451_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_2_fu_427_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state13))) begin
            grp_depthwise_conv2d_fix_2_fu_427_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_2_fu_427_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_2_fu_427_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_fu_475_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_depthwise_conv2d_fix_fu_475_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_fu_475_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_fu_475_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pooling2d_fix16_fu_525_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
            grp_max_pooling2d_fix16_fu_525_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling2d_fix16_fu_525_ap_ready == 1'b1)) begin
            grp_max_pooling2d_fix16_fu_525_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_padding2d_fix16_fu_507_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3))) begin
            grp_padding2d_fix16_fu_507_ap_start_reg <= 1'b1;
        end else if ((grp_padding2d_fix16_fu_507_ap_ready == 1'b1)) begin
            grp_padding2d_fix16_fu_507_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_1_fu_483_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_pointwise_conv2d_fix_1_fu_483_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_1_fu_483_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_1_fu_483_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_2_fu_495_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            grp_pointwise_conv2d_fix_2_fu_495_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_2_fu_495_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_2_fu_495_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_3_fu_489_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            grp_pointwise_conv2d_fix_3_fu_489_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_3_fu_489_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_3_fu_489_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_4_fu_501_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            grp_pointwise_conv2d_fix_4_fu_501_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_4_fu_501_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_4_fu_501_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_fu_546_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_pointwise_conv2d_fix_fu_546_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_fu_546_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_fu_546_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_up_sampling2d_fix16_fu_552_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25))) begin
            grp_up_sampling2d_fix16_fu_552_ap_start_reg <= 1'b1;
        end else if ((grp_up_sampling2d_fix16_fu_552_ap_ready == 1'b1)) begin
            grp_up_sampling2d_fix16_fu_552_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_data_V_0_ack_out == 1'b1) & (input_data_data_V_0_vld_out == 1'b1))) begin
            input_data_data_V_0_sel_rd <= ~input_data_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_data_V_0_ack_in == 1'b1) & (input_data_data_V_0_vld_in == 1'b1))) begin
            input_data_data_V_0_sel_wr <= ~input_data_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_data_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_data_V_0_state == 2'd3) & (input_data_data_V_0_vld_in == 1'b0) & (input_data_data_V_0_ack_out == 1'b1)) | ((input_data_data_V_0_state == 2'd2) & (input_data_data_V_0_vld_in == 1'b0)))) begin
            input_data_data_V_0_state <= 2'd2;
        end else if ((((input_data_data_V_0_state == 2'd1) & (input_data_data_V_0_ack_out == 1'b0)) | ((input_data_data_V_0_state == 2'd3) & (input_data_data_V_0_ack_out == 1'b0) & (input_data_data_V_0_vld_in == 1'b1)))) begin
            input_data_data_V_0_state <= 2'd1;
        end else if ((((input_data_data_V_0_state == 2'd1) & (input_data_data_V_0_ack_out == 1'b1)) | ((input_data_data_V_0_state == 2'd2) & (input_data_data_V_0_vld_in == 1'b1)) | (~((input_data_data_V_0_vld_in == 1'b0) & (input_data_data_V_0_ack_out == 1'b1)) & ~((input_data_data_V_0_ack_out == 1'b0) & (input_data_data_V_0_vld_in == 1'b1)) & (input_data_data_V_0_state == 2'd3)))) begin
            input_data_data_V_0_state <= 2'd3;
        end else begin
            input_data_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_dest_V_0_ack_out == 1'b1) & (input_data_dest_V_0_vld_out == 1'b1))) begin
            input_data_dest_V_0_sel_rd <= ~input_data_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_dest_V_0_ack_in == 1'b1) & (input_data_dest_V_0_vld_in == 1'b1))) begin
            input_data_dest_V_0_sel_wr <= ~input_data_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_dest_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_dest_V_0_state == 2'd2) & (input_data_dest_V_0_vld_in == 1'b0)) | ((input_data_dest_V_0_state == 2'd3) & (input_data_dest_V_0_vld_in == 1'b0) & (input_data_dest_V_0_ack_out == 1'b1)))) begin
            input_data_dest_V_0_state <= 2'd2;
        end else if ((((input_data_dest_V_0_state == 2'd1) & (input_data_dest_V_0_ack_out == 1'b0)) | ((input_data_dest_V_0_state == 2'd3) & (input_data_dest_V_0_ack_out == 1'b0) & (input_data_dest_V_0_vld_in == 1'b1)))) begin
            input_data_dest_V_0_state <= 2'd1;
        end else if (((~((input_data_dest_V_0_vld_in == 1'b0) & (input_data_dest_V_0_ack_out == 1'b1)) & ~((input_data_dest_V_0_ack_out == 1'b0) & (input_data_dest_V_0_vld_in == 1'b1)) & (input_data_dest_V_0_state == 2'd3)) | ((input_data_dest_V_0_state == 2'd1) & (input_data_dest_V_0_ack_out == 1'b1)) | ((input_data_dest_V_0_state == 2'd2) & (input_data_dest_V_0_vld_in == 1'b1)))) begin
            input_data_dest_V_0_state <= 2'd3;
        end else begin
            input_data_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_id_V_0_ack_out == 1'b1) & (input_data_id_V_0_vld_out == 1'b1))) begin
            input_data_id_V_0_sel_rd <= ~input_data_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_id_V_0_ack_in == 1'b1) & (input_data_id_V_0_vld_in == 1'b1))) begin
            input_data_id_V_0_sel_wr <= ~input_data_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_id_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_id_V_0_state == 2'd2) & (input_data_id_V_0_vld_in == 1'b0)) | ((input_data_id_V_0_state == 2'd3) & (input_data_id_V_0_vld_in == 1'b0) & (input_data_id_V_0_ack_out == 1'b1)))) begin
            input_data_id_V_0_state <= 2'd2;
        end else if ((((input_data_id_V_0_state == 2'd1) & (input_data_id_V_0_ack_out == 1'b0)) | ((input_data_id_V_0_state == 2'd3) & (input_data_id_V_0_ack_out == 1'b0) & (input_data_id_V_0_vld_in == 1'b1)))) begin
            input_data_id_V_0_state <= 2'd1;
        end else if (((~((input_data_id_V_0_vld_in == 1'b0) & (input_data_id_V_0_ack_out == 1'b1)) & ~((input_data_id_V_0_ack_out == 1'b0) & (input_data_id_V_0_vld_in == 1'b1)) & (input_data_id_V_0_state == 2'd3)) | ((input_data_id_V_0_state == 2'd1) & (input_data_id_V_0_ack_out == 1'b1)) | ((input_data_id_V_0_state == 2'd2) & (input_data_id_V_0_vld_in == 1'b1)))) begin
            input_data_id_V_0_state <= 2'd3;
        end else begin
            input_data_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_keep_V_0_ack_out == 1'b1) & (input_data_keep_V_0_vld_out == 1'b1))) begin
            input_data_keep_V_0_sel_rd <= ~input_data_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_keep_V_0_ack_in == 1'b1) & (input_data_keep_V_0_vld_in == 1'b1))) begin
            input_data_keep_V_0_sel_wr <= ~input_data_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_keep_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_keep_V_0_state == 2'd2) & (input_data_keep_V_0_vld_in == 1'b0)) | ((input_data_keep_V_0_state == 2'd3) & (input_data_keep_V_0_vld_in == 1'b0) & (input_data_keep_V_0_ack_out == 1'b1)))) begin
            input_data_keep_V_0_state <= 2'd2;
        end else if ((((input_data_keep_V_0_state == 2'd1) & (input_data_keep_V_0_ack_out == 1'b0)) | ((input_data_keep_V_0_state == 2'd3) & (input_data_keep_V_0_ack_out == 1'b0) & (input_data_keep_V_0_vld_in == 1'b1)))) begin
            input_data_keep_V_0_state <= 2'd1;
        end else if (((~((input_data_keep_V_0_vld_in == 1'b0) & (input_data_keep_V_0_ack_out == 1'b1)) & ~((input_data_keep_V_0_ack_out == 1'b0) & (input_data_keep_V_0_vld_in == 1'b1)) & (input_data_keep_V_0_state == 2'd3)) | ((input_data_keep_V_0_state == 2'd1) & (input_data_keep_V_0_ack_out == 1'b1)) | ((input_data_keep_V_0_state == 2'd2) & (input_data_keep_V_0_vld_in == 1'b1)))) begin
            input_data_keep_V_0_state <= 2'd3;
        end else begin
            input_data_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_last_V_0_ack_out == 1'b1) & (input_data_last_V_0_vld_out == 1'b1))) begin
            input_data_last_V_0_sel_rd <= ~input_data_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_last_V_0_ack_in == 1'b1) & (input_data_last_V_0_vld_in == 1'b1))) begin
            input_data_last_V_0_sel_wr <= ~input_data_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_last_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_last_V_0_state == 2'd2) & (input_data_last_V_0_vld_in == 1'b0)) | ((input_data_last_V_0_state == 2'd3) & (input_data_last_V_0_vld_in == 1'b0) & (input_data_last_V_0_ack_out == 1'b1)))) begin
            input_data_last_V_0_state <= 2'd2;
        end else if ((((input_data_last_V_0_state == 2'd1) & (input_data_last_V_0_ack_out == 1'b0)) | ((input_data_last_V_0_state == 2'd3) & (input_data_last_V_0_ack_out == 1'b0) & (input_data_last_V_0_vld_in == 1'b1)))) begin
            input_data_last_V_0_state <= 2'd1;
        end else if (((~((input_data_last_V_0_vld_in == 1'b0) & (input_data_last_V_0_ack_out == 1'b1)) & ~((input_data_last_V_0_ack_out == 1'b0) & (input_data_last_V_0_vld_in == 1'b1)) & (input_data_last_V_0_state == 2'd3)) | ((input_data_last_V_0_state == 2'd1) & (input_data_last_V_0_ack_out == 1'b1)) | ((input_data_last_V_0_state == 2'd2) & (input_data_last_V_0_vld_in == 1'b1)))) begin
            input_data_last_V_0_state <= 2'd3;
        end else begin
            input_data_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_strb_V_0_ack_out == 1'b1) & (input_data_strb_V_0_vld_out == 1'b1))) begin
            input_data_strb_V_0_sel_rd <= ~input_data_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_strb_V_0_ack_in == 1'b1) & (input_data_strb_V_0_vld_in == 1'b1))) begin
            input_data_strb_V_0_sel_wr <= ~input_data_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_strb_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_strb_V_0_state == 2'd2) & (input_data_strb_V_0_vld_in == 1'b0)) | ((input_data_strb_V_0_state == 2'd3) & (input_data_strb_V_0_vld_in == 1'b0) & (input_data_strb_V_0_ack_out == 1'b1)))) begin
            input_data_strb_V_0_state <= 2'd2;
        end else if ((((input_data_strb_V_0_state == 2'd1) & (input_data_strb_V_0_ack_out == 1'b0)) | ((input_data_strb_V_0_state == 2'd3) & (input_data_strb_V_0_ack_out == 1'b0) & (input_data_strb_V_0_vld_in == 1'b1)))) begin
            input_data_strb_V_0_state <= 2'd1;
        end else if (((~((input_data_strb_V_0_vld_in == 1'b0) & (input_data_strb_V_0_ack_out == 1'b1)) & ~((input_data_strb_V_0_ack_out == 1'b0) & (input_data_strb_V_0_vld_in == 1'b1)) & (input_data_strb_V_0_state == 2'd3)) | ((input_data_strb_V_0_state == 2'd1) & (input_data_strb_V_0_ack_out == 1'b1)) | ((input_data_strb_V_0_state == 2'd2) & (input_data_strb_V_0_vld_in == 1'b1)))) begin
            input_data_strb_V_0_state <= 2'd3;
        end else begin
            input_data_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_user_V_0_ack_out == 1'b1) & (input_data_user_V_0_vld_out == 1'b1))) begin
            input_data_user_V_0_sel_rd <= ~input_data_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_user_V_0_ack_in == 1'b1) & (input_data_user_V_0_vld_in == 1'b1))) begin
            input_data_user_V_0_sel_wr <= ~input_data_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_user_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_user_V_0_state == 2'd2) & (input_data_user_V_0_vld_in == 1'b0)) | ((input_data_user_V_0_state == 2'd3) & (input_data_user_V_0_vld_in == 1'b0) & (input_data_user_V_0_ack_out == 1'b1)))) begin
            input_data_user_V_0_state <= 2'd2;
        end else if ((((input_data_user_V_0_state == 2'd1) & (input_data_user_V_0_ack_out == 1'b0)) | ((input_data_user_V_0_state == 2'd3) & (input_data_user_V_0_ack_out == 1'b0) & (input_data_user_V_0_vld_in == 1'b1)))) begin
            input_data_user_V_0_state <= 2'd1;
        end else if (((~((input_data_user_V_0_vld_in == 1'b0) & (input_data_user_V_0_ack_out == 1'b1)) & ~((input_data_user_V_0_ack_out == 1'b0) & (input_data_user_V_0_vld_in == 1'b1)) & (input_data_user_V_0_state == 2'd3)) | ((input_data_user_V_0_state == 2'd1) & (input_data_user_V_0_ack_out == 1'b1)) | ((input_data_user_V_0_state == 2'd2) & (input_data_user_V_0_vld_in == 1'b1)))) begin
            input_data_user_V_0_state <= 2'd3;
        end else begin
            input_data_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_data_V_1_ack_out == 1'b1) & (output_data_data_V_1_vld_out == 1'b1))) begin
            output_data_data_V_1_sel_rd <= ~output_data_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_data_V_1_ack_in == 1'b1) & (output_data_data_V_1_vld_in == 1'b1))) begin
            output_data_data_V_1_sel_wr <= ~output_data_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_data_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_data_V_1_state == 2'd2) & (output_data_data_V_1_vld_in == 1'b0)) | ((output_data_data_V_1_state == 2'd3) & (output_data_data_V_1_vld_in == 1'b0) & (output_data_data_V_1_ack_out == 1'b1)))) begin
            output_data_data_V_1_state <= 2'd2;
        end else if ((((output_data_data_V_1_state == 2'd1) & (output_data_TREADY == 1'b0)) | ((output_data_data_V_1_state == 2'd3) & (output_data_TREADY == 1'b0) & (output_data_data_V_1_vld_in == 1'b1)))) begin
            output_data_data_V_1_state <= 2'd1;
        end else if (((~((output_data_data_V_1_vld_in == 1'b0) & (output_data_data_V_1_ack_out == 1'b1)) & ~((output_data_TREADY == 1'b0) & (output_data_data_V_1_vld_in == 1'b1)) & (output_data_data_V_1_state == 2'd3)) | ((output_data_data_V_1_state == 2'd1) & (output_data_data_V_1_ack_out == 1'b1)) | ((output_data_data_V_1_state == 2'd2) & (output_data_data_V_1_vld_in == 1'b1)))) begin
            output_data_data_V_1_state <= 2'd3;
        end else begin
            output_data_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_dest_V_1_ack_out == 1'b1) & (output_data_dest_V_1_vld_out == 1'b1))) begin
            output_data_dest_V_1_sel_rd <= ~output_data_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_dest_V_1_ack_in == 1'b1) & (output_data_dest_V_1_vld_in == 1'b1))) begin
            output_data_dest_V_1_sel_wr <= ~output_data_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_dest_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_dest_V_1_state == 2'd2) & (output_data_dest_V_1_vld_in == 1'b0)) | ((output_data_dest_V_1_state == 2'd3) & (output_data_dest_V_1_vld_in == 1'b0) & (output_data_dest_V_1_ack_out == 1'b1)))) begin
            output_data_dest_V_1_state <= 2'd2;
        end else if ((((output_data_dest_V_1_state == 2'd1) & (output_data_TREADY == 1'b0)) | ((output_data_dest_V_1_state == 2'd3) & (output_data_TREADY == 1'b0) & (output_data_dest_V_1_vld_in == 1'b1)))) begin
            output_data_dest_V_1_state <= 2'd1;
        end else if (((~((output_data_dest_V_1_vld_in == 1'b0) & (output_data_dest_V_1_ack_out == 1'b1)) & ~((output_data_TREADY == 1'b0) & (output_data_dest_V_1_vld_in == 1'b1)) & (output_data_dest_V_1_state == 2'd3)) | ((output_data_dest_V_1_state == 2'd1) & (output_data_dest_V_1_ack_out == 1'b1)) | ((output_data_dest_V_1_state == 2'd2) & (output_data_dest_V_1_vld_in == 1'b1)))) begin
            output_data_dest_V_1_state <= 2'd3;
        end else begin
            output_data_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_id_V_1_ack_out == 1'b1) & (output_data_id_V_1_vld_out == 1'b1))) begin
            output_data_id_V_1_sel_rd <= ~output_data_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_id_V_1_ack_in == 1'b1) & (output_data_id_V_1_vld_in == 1'b1))) begin
            output_data_id_V_1_sel_wr <= ~output_data_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_id_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_id_V_1_state == 2'd2) & (output_data_id_V_1_vld_in == 1'b0)) | ((output_data_id_V_1_state == 2'd3) & (output_data_id_V_1_vld_in == 1'b0) & (output_data_id_V_1_ack_out == 1'b1)))) begin
            output_data_id_V_1_state <= 2'd2;
        end else if ((((output_data_id_V_1_state == 2'd1) & (output_data_TREADY == 1'b0)) | ((output_data_id_V_1_state == 2'd3) & (output_data_TREADY == 1'b0) & (output_data_id_V_1_vld_in == 1'b1)))) begin
            output_data_id_V_1_state <= 2'd1;
        end else if (((~((output_data_id_V_1_vld_in == 1'b0) & (output_data_id_V_1_ack_out == 1'b1)) & ~((output_data_TREADY == 1'b0) & (output_data_id_V_1_vld_in == 1'b1)) & (output_data_id_V_1_state == 2'd3)) | ((output_data_id_V_1_state == 2'd1) & (output_data_id_V_1_ack_out == 1'b1)) | ((output_data_id_V_1_state == 2'd2) & (output_data_id_V_1_vld_in == 1'b1)))) begin
            output_data_id_V_1_state <= 2'd3;
        end else begin
            output_data_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_keep_V_1_ack_out == 1'b1) & (output_data_keep_V_1_vld_out == 1'b1))) begin
            output_data_keep_V_1_sel_rd <= ~output_data_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_keep_V_1_ack_in == 1'b1) & (output_data_keep_V_1_vld_in == 1'b1))) begin
            output_data_keep_V_1_sel_wr <= ~output_data_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_keep_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_keep_V_1_state == 2'd2) & (output_data_keep_V_1_vld_in == 1'b0)) | ((output_data_keep_V_1_state == 2'd3) & (output_data_keep_V_1_vld_in == 1'b0) & (output_data_keep_V_1_ack_out == 1'b1)))) begin
            output_data_keep_V_1_state <= 2'd2;
        end else if ((((output_data_keep_V_1_state == 2'd1) & (output_data_TREADY == 1'b0)) | ((output_data_keep_V_1_state == 2'd3) & (output_data_TREADY == 1'b0) & (output_data_keep_V_1_vld_in == 1'b1)))) begin
            output_data_keep_V_1_state <= 2'd1;
        end else if (((~((output_data_keep_V_1_vld_in == 1'b0) & (output_data_keep_V_1_ack_out == 1'b1)) & ~((output_data_TREADY == 1'b0) & (output_data_keep_V_1_vld_in == 1'b1)) & (output_data_keep_V_1_state == 2'd3)) | ((output_data_keep_V_1_state == 2'd1) & (output_data_keep_V_1_ack_out == 1'b1)) | ((output_data_keep_V_1_state == 2'd2) & (output_data_keep_V_1_vld_in == 1'b1)))) begin
            output_data_keep_V_1_state <= 2'd3;
        end else begin
            output_data_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_last_V_1_ack_out == 1'b1) & (output_data_last_V_1_vld_out == 1'b1))) begin
            output_data_last_V_1_sel_rd <= ~output_data_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_last_V_1_ack_in == 1'b1) & (output_data_last_V_1_vld_in == 1'b1))) begin
            output_data_last_V_1_sel_wr <= ~output_data_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_last_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_last_V_1_state == 2'd2) & (output_data_last_V_1_vld_in == 1'b0)) | ((output_data_last_V_1_state == 2'd3) & (output_data_last_V_1_vld_in == 1'b0) & (output_data_last_V_1_ack_out == 1'b1)))) begin
            output_data_last_V_1_state <= 2'd2;
        end else if ((((output_data_last_V_1_state == 2'd1) & (output_data_TREADY == 1'b0)) | ((output_data_last_V_1_state == 2'd3) & (output_data_TREADY == 1'b0) & (output_data_last_V_1_vld_in == 1'b1)))) begin
            output_data_last_V_1_state <= 2'd1;
        end else if (((~((output_data_last_V_1_vld_in == 1'b0) & (output_data_last_V_1_ack_out == 1'b1)) & ~((output_data_TREADY == 1'b0) & (output_data_last_V_1_vld_in == 1'b1)) & (output_data_last_V_1_state == 2'd3)) | ((output_data_last_V_1_state == 2'd1) & (output_data_last_V_1_ack_out == 1'b1)) | ((output_data_last_V_1_state == 2'd2) & (output_data_last_V_1_vld_in == 1'b1)))) begin
            output_data_last_V_1_state <= 2'd3;
        end else begin
            output_data_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_strb_V_1_ack_out == 1'b1) & (output_data_strb_V_1_vld_out == 1'b1))) begin
            output_data_strb_V_1_sel_rd <= ~output_data_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_strb_V_1_ack_in == 1'b1) & (output_data_strb_V_1_vld_in == 1'b1))) begin
            output_data_strb_V_1_sel_wr <= ~output_data_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_strb_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_strb_V_1_state == 2'd2) & (output_data_strb_V_1_vld_in == 1'b0)) | ((output_data_strb_V_1_state == 2'd3) & (output_data_strb_V_1_vld_in == 1'b0) & (output_data_strb_V_1_ack_out == 1'b1)))) begin
            output_data_strb_V_1_state <= 2'd2;
        end else if ((((output_data_strb_V_1_state == 2'd1) & (output_data_TREADY == 1'b0)) | ((output_data_strb_V_1_state == 2'd3) & (output_data_TREADY == 1'b0) & (output_data_strb_V_1_vld_in == 1'b1)))) begin
            output_data_strb_V_1_state <= 2'd1;
        end else if (((~((output_data_strb_V_1_vld_in == 1'b0) & (output_data_strb_V_1_ack_out == 1'b1)) & ~((output_data_TREADY == 1'b0) & (output_data_strb_V_1_vld_in == 1'b1)) & (output_data_strb_V_1_state == 2'd3)) | ((output_data_strb_V_1_state == 2'd1) & (output_data_strb_V_1_ack_out == 1'b1)) | ((output_data_strb_V_1_state == 2'd2) & (output_data_strb_V_1_vld_in == 1'b1)))) begin
            output_data_strb_V_1_state <= 2'd3;
        end else begin
            output_data_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_user_V_1_ack_out == 1'b1) & (output_data_user_V_1_vld_out == 1'b1))) begin
            output_data_user_V_1_sel_rd <= ~output_data_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_user_V_1_ack_in == 1'b1) & (output_data_user_V_1_vld_in == 1'b1))) begin
            output_data_user_V_1_sel_wr <= ~output_data_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_user_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_user_V_1_state == 2'd2) & (output_data_user_V_1_vld_in == 1'b0)) | ((output_data_user_V_1_state == 2'd3) & (output_data_user_V_1_vld_in == 1'b0) & (output_data_user_V_1_ack_out == 1'b1)))) begin
            output_data_user_V_1_state <= 2'd2;
        end else if ((((output_data_user_V_1_state == 2'd1) & (output_data_TREADY == 1'b0)) | ((output_data_user_V_1_state == 2'd3) & (output_data_TREADY == 1'b0) & (output_data_user_V_1_vld_in == 1'b1)))) begin
            output_data_user_V_1_state <= 2'd1;
        end else if (((~((output_data_user_V_1_vld_in == 1'b0) & (output_data_user_V_1_ack_out == 1'b1)) & ~((output_data_TREADY == 1'b0) & (output_data_user_V_1_vld_in == 1'b1)) & (output_data_user_V_1_state == 2'd3)) | ((output_data_user_V_1_state == 2'd1) & (output_data_user_V_1_ack_out == 1'b1)) | ((output_data_user_V_1_state == 2'd2) & (output_data_user_V_1_vld_in == 1'b1)))) begin
            output_data_user_V_1_state <= 2'd3;
        end else begin
            output_data_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_394 <= 32'd0;
    end else if (((input_data_last_V_tm_fu_604_p1 == 1'd0) & (input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_394 <= i_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_fu_625_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_405 <= i_3_fu_631_p2;
    end else if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_4_fu_501_ap_done == 1'b1))) begin
        i_1_reg_405 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_2_reg_416 <= 10'd0;
    end else if (((icmp_ln197_fu_642_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_416 <= i_4_fu_648_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln173_reg_673 <= icmp_ln173_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln197_reg_692 <= icmp_ln197_fu_642_p2;
        icmp_ln197_reg_692_pp2_iter1_reg <= icmp_ln197_reg_692;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_data_V_0_load_A == 1'b1)) begin
        input_data_data_V_0_payload_A <= input_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_data_V_0_load_B == 1'b1)) begin
        input_data_data_V_0_payload_B <= input_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_dest_V_0_load_A == 1'b1)) begin
        input_data_dest_V_0_payload_A <= input_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_dest_V_0_load_B == 1'b1)) begin
        input_data_dest_V_0_payload_B <= input_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_id_V_0_load_A == 1'b1)) begin
        input_data_id_V_0_payload_A <= input_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_id_V_0_load_B == 1'b1)) begin
        input_data_id_V_0_payload_B <= input_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_keep_V_0_load_A == 1'b1)) begin
        input_data_keep_V_0_payload_A <= input_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_keep_V_0_load_B == 1'b1)) begin
        input_data_keep_V_0_payload_B <= input_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_last_V_0_load_A == 1'b1)) begin
        input_data_last_V_0_payload_A <= input_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_last_V_0_load_B == 1'b1)) begin
        input_data_last_V_0_payload_B <= input_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_strb_V_0_load_A == 1'b1)) begin
        input_data_strb_V_0_payload_A <= input_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_strb_V_0_load_B == 1'b1)) begin
        input_data_strb_V_0_payload_B <= input_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_user_V_0_load_A == 1'b1)) begin
        input_data_user_V_0_payload_A <= input_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_user_V_0_load_B == 1'b1)) begin
        input_data_user_V_0_payload_B <= input_data_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_data_V_1_load_A == 1'b1)) begin
        output_data_data_V_1_payload_A <= MemBank_Out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_data_V_1_load_B == 1'b1)) begin
        output_data_data_V_1_payload_B <= MemBank_Out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_dest_V_1_load_A == 1'b1)) begin
        output_data_dest_V_1_payload_A <= sig_buffer_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_dest_V_1_load_B == 1'b1)) begin
        output_data_dest_V_1_payload_B <= sig_buffer_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_id_V_1_load_A == 1'b1)) begin
        output_data_id_V_1_payload_A <= sig_buffer_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_id_V_1_load_B == 1'b1)) begin
        output_data_id_V_1_payload_B <= sig_buffer_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_keep_V_1_load_A == 1'b1)) begin
        output_data_keep_V_1_payload_A <= sig_buffer_keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_keep_V_1_load_B == 1'b1)) begin
        output_data_keep_V_1_payload_B <= sig_buffer_keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_last_V_1_load_A == 1'b1)) begin
        output_data_last_V_1_payload_A <= sig_buffer_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_last_V_1_load_B == 1'b1)) begin
        output_data_last_V_1_payload_B <= sig_buffer_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_strb_V_1_load_A == 1'b1)) begin
        output_data_strb_V_1_payload_A <= sig_buffer_strb_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_strb_V_1_load_B == 1'b1)) begin
        output_data_strb_V_1_payload_B <= sig_buffer_strb_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_user_V_1_load_A == 1'b1)) begin
        output_data_user_V_1_payload_A <= sig_buffer_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_user_V_1_load_B == 1'b1)) begin
        output_data_user_V_1_payload_B <= sig_buffer_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln173_fu_625_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        zext_ln176_reg_682[9 : 0] <= zext_ln176_fu_637_p1[9 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        MemBank_A_address0 = sext_ln71_fu_573_p1;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26))) begin
        MemBank_A_address0 = grp_up_sampling2d_fix16_fu_552_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        MemBank_A_address0 = grp_pointwise_conv2d_fix_fu_546_input_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        MemBank_A_address0 = grp_max_pooling2d_fix16_fu_525_output_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_A_address0 = grp_padding2d_fix16_fu_507_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        MemBank_A_address0 = grp_pointwise_conv2d_fix_4_fu_501_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        MemBank_A_address0 = grp_pointwise_conv2d_fix_2_fu_495_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        MemBank_A_address0 = grp_pointwise_conv2d_fix_3_fu_489_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        MemBank_A_address0 = grp_pointwise_conv2d_fix_1_fu_483_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        MemBank_A_address0 = grp_depthwise_conv2d_fix_fu_475_output_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        MemBank_A_address0 = grp_depthwise_conv2d_fix_1_fu_451_output_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14))) begin
        MemBank_A_address0 = grp_depthwise_conv2d_fix_2_fu_427_output_r_address0;
    end else begin
        MemBank_A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        MemBank_A_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26))) begin
        MemBank_A_ce0 = grp_up_sampling2d_fix16_fu_552_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        MemBank_A_ce0 = grp_pointwise_conv2d_fix_fu_546_input_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        MemBank_A_ce0 = grp_max_pooling2d_fix16_fu_525_output_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_A_ce0 = grp_padding2d_fix16_fu_507_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        MemBank_A_ce0 = grp_pointwise_conv2d_fix_4_fu_501_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        MemBank_A_ce0 = grp_pointwise_conv2d_fix_2_fu_495_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        MemBank_A_ce0 = grp_pointwise_conv2d_fix_3_fu_489_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        MemBank_A_ce0 = grp_pointwise_conv2d_fix_1_fu_483_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        MemBank_A_ce0 = grp_depthwise_conv2d_fix_fu_475_output_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        MemBank_A_ce0 = grp_depthwise_conv2d_fix_1_fu_451_output_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14))) begin
        MemBank_A_ce0 = grp_depthwise_conv2d_fix_2_fu_427_output_r_ce0;
    end else begin
        MemBank_A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        MemBank_A_d0 = input_data_data_V_0_data_out;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26))) begin
        MemBank_A_d0 = grp_up_sampling2d_fix16_fu_552_output_r_d0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        MemBank_A_d0 = grp_max_pooling2d_fix16_fu_525_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        MemBank_A_d0 = grp_depthwise_conv2d_fix_fu_475_output_r_d0;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        MemBank_A_d0 = grp_depthwise_conv2d_fix_1_fu_451_output_r_d0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14))) begin
        MemBank_A_d0 = grp_depthwise_conv2d_fix_2_fu_427_output_r_d0;
    end else begin
        MemBank_A_d0 = 'bx;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        MemBank_A_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26))) begin
        MemBank_A_we0 = grp_up_sampling2d_fix16_fu_552_output_r_we0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        MemBank_A_we0 = grp_max_pooling2d_fix16_fu_525_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        MemBank_A_we0 = grp_depthwise_conv2d_fix_fu_475_output_r_we0;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        MemBank_A_we0 = grp_depthwise_conv2d_fix_1_fu_451_output_r_we0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14))) begin
        MemBank_A_we0 = grp_depthwise_conv2d_fix_2_fu_427_output_r_we0;
    end else begin
        MemBank_A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        MemBank_B_address0 = zext_ln176_fu_637_p1;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26))) begin
        MemBank_B_address0 = grp_up_sampling2d_fix16_fu_552_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        MemBank_B_address0 = grp_pointwise_conv2d_fix_fu_546_output_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        MemBank_B_address0 = grp_max_pooling2d_fix16_fu_525_input_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_B_address0 = grp_padding2d_fix16_fu_507_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        MemBank_B_address0 = grp_pointwise_conv2d_fix_4_fu_501_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        MemBank_B_address0 = grp_pointwise_conv2d_fix_2_fu_495_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        MemBank_B_address0 = grp_pointwise_conv2d_fix_3_fu_489_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        MemBank_B_address0 = grp_pointwise_conv2d_fix_1_fu_483_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        MemBank_B_address0 = grp_depthwise_conv2d_fix_fu_475_input_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        MemBank_B_address0 = grp_depthwise_conv2d_fix_1_fu_451_input_r_address0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14))) begin
        MemBank_B_address0 = grp_depthwise_conv2d_fix_2_fu_427_input_r_address0;
    end else begin
        MemBank_B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        MemBank_B_address1 = grp_max_pooling2d_fix16_fu_525_input_r_address1;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_B_address1 = grp_padding2d_fix16_fu_507_output_r_address1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        MemBank_B_address1 = grp_depthwise_conv2d_fix_fu_475_input_r_address1;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        MemBank_B_address1 = grp_depthwise_conv2d_fix_1_fu_451_input_r_address1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14))) begin
        MemBank_B_address1 = grp_depthwise_conv2d_fix_2_fu_427_input_r_address1;
    end else begin
        MemBank_B_address1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        MemBank_B_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state26))) begin
        MemBank_B_ce0 = grp_up_sampling2d_fix16_fu_552_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        MemBank_B_ce0 = grp_pointwise_conv2d_fix_fu_546_output_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        MemBank_B_ce0 = grp_max_pooling2d_fix16_fu_525_input_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_B_ce0 = grp_padding2d_fix16_fu_507_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        MemBank_B_ce0 = grp_pointwise_conv2d_fix_4_fu_501_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        MemBank_B_ce0 = grp_pointwise_conv2d_fix_2_fu_495_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        MemBank_B_ce0 = grp_pointwise_conv2d_fix_3_fu_489_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        MemBank_B_ce0 = grp_pointwise_conv2d_fix_1_fu_483_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        MemBank_B_ce0 = grp_depthwise_conv2d_fix_fu_475_input_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        MemBank_B_ce0 = grp_depthwise_conv2d_fix_1_fu_451_input_r_ce0;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14))) begin
        MemBank_B_ce0 = grp_depthwise_conv2d_fix_2_fu_427_input_r_ce0;
    end else begin
        MemBank_B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state10))) begin
        MemBank_B_ce1 = grp_max_pooling2d_fix16_fu_525_input_r_ce1;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_B_ce1 = grp_padding2d_fix16_fu_507_output_r_ce1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        MemBank_B_ce1 = grp_depthwise_conv2d_fix_fu_475_input_r_ce1;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        MemBank_B_ce1 = grp_depthwise_conv2d_fix_1_fu_451_input_r_ce1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state14))) begin
        MemBank_B_ce1 = grp_depthwise_conv2d_fix_2_fu_427_input_r_ce1;
    end else begin
        MemBank_B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        MemBank_B_d0 = grp_pointwise_conv2d_fix_fu_546_output_r_d0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_B_d0 = grp_padding2d_fix16_fu_507_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        MemBank_B_d0 = grp_pointwise_conv2d_fix_4_fu_501_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        MemBank_B_d0 = grp_pointwise_conv2d_fix_2_fu_495_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        MemBank_B_d0 = grp_pointwise_conv2d_fix_3_fu_489_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        MemBank_B_d0 = grp_pointwise_conv2d_fix_1_fu_483_output_r_d0;
    end else begin
        MemBank_B_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        MemBank_B_we0 = grp_pointwise_conv2d_fix_fu_546_output_r_we0;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_B_we0 = grp_padding2d_fix16_fu_507_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        MemBank_B_we0 = grp_pointwise_conv2d_fix_4_fu_501_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        MemBank_B_we0 = grp_pointwise_conv2d_fix_2_fu_495_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        MemBank_B_we0 = grp_pointwise_conv2d_fix_3_fu_489_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        MemBank_B_we0 = grp_pointwise_conv2d_fix_1_fu_483_output_r_we0;
    end else begin
        MemBank_B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state4))) begin
        MemBank_B_we1 = grp_padding2d_fix16_fu_507_output_r_we1;
    end else begin
        MemBank_B_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        MemBank_Out_address0 = zext_ln200_fu_654_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        MemBank_Out_address0 = zext_ln176_reg_682;
    end else begin
        MemBank_Out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        MemBank_Out_ce0 = 1'b1;
    end else begin
        MemBank_Out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln173_reg_673 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        MemBank_Out_we0 = 1'b1;
    end else begin
        MemBank_Out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SeparableConv2D_1_b_s_ce0 = grp_depthwise_conv2d_fix_2_fu_427_bias_ce0;
    end else begin
        SeparableConv2D_1_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SeparableConv2D_1_w_s_ce0 = grp_depthwise_conv2d_fix_2_fu_427_kernel_ce0;
    end else begin
        SeparableConv2D_1_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SeparableConv2D_1_w_s_ce1 = grp_depthwise_conv2d_fix_2_fu_427_kernel_ce1;
    end else begin
        SeparableConv2D_1_w_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        SeparableConv2D_2_b_s_ce0 = grp_depthwise_conv2d_fix_1_fu_451_bias_ce0;
    end else begin
        SeparableConv2D_2_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        SeparableConv2D_2_w_s_ce0 = grp_depthwise_conv2d_fix_1_fu_451_kernel_ce0;
    end else begin
        SeparableConv2D_2_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        SeparableConv2D_2_w_s_ce1 = grp_depthwise_conv2d_fix_1_fu_451_kernel_ce1;
    end else begin
        SeparableConv2D_2_w_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        SeparableConv2D_3_b_s_ce0 = grp_depthwise_conv2d_fix_1_fu_451_bias_ce0;
    end else begin
        SeparableConv2D_3_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        SeparableConv2D_3_w_s_ce0 = grp_depthwise_conv2d_fix_1_fu_451_kernel_ce0;
    end else begin
        SeparableConv2D_3_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        SeparableConv2D_3_w_s_ce1 = grp_depthwise_conv2d_fix_1_fu_451_kernel_ce1;
    end else begin
        SeparableConv2D_3_w_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        SeparableConv2D_4_b_s_ce0 = grp_depthwise_conv2d_fix_2_fu_427_bias_ce0;
    end else begin
        SeparableConv2D_4_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        SeparableConv2D_4_w_s_ce0 = grp_depthwise_conv2d_fix_2_fu_427_kernel_ce0;
    end else begin
        SeparableConv2D_4_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        SeparableConv2D_4_w_s_ce1 = grp_depthwise_conv2d_fix_2_fu_427_kernel_ce1;
    end else begin
        SeparableConv2D_4_w_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln173_fu_625_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state41 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state41 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln197_fu_642_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state44 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state44 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_data_dest_V_1_state == 2'd1) | (output_data_id_V_1_state == 2'd1) | (output_data_last_V_1_state == 2'd1) | (output_data_user_V_1_state == 2'd1) | (output_data_strb_V_1_state == 2'd1) | (output_data_keep_V_1_state == 2'd1) | (output_data_data_V_1_state == 2'd1) | ((output_data_dest_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_id_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_last_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_user_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_strb_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_keep_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_data_V_1_state == 2'd3) & (output_data_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_data_dest_V_1_state == 2'd1) | (output_data_id_V_1_state == 2'd1) | (output_data_last_V_1_state == 2'd1) | (output_data_user_V_1_state == 2'd1) | (output_data_strb_V_1_state == 2'd1) | (output_data_keep_V_1_state == 2'd1) | (output_data_data_V_1_state == 2'd1) | ((output_data_dest_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_id_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_last_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_user_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_strb_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_keep_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_data_V_1_state == 2'd3) & (output_data_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_depthwise_conv2d_fix_1_fu_451_bias_q0 = SeparableConv2D_3_b_s_q0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_depthwise_conv2d_fix_1_fu_451_bias_q0 = SeparableConv2D_2_b_s_q0;
    end else begin
        grp_depthwise_conv2d_fix_1_fu_451_bias_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_depthwise_conv2d_fix_1_fu_451_input_height = 6'd16;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_depthwise_conv2d_fix_1_fu_451_input_height = 6'd9;
    end else begin
        grp_depthwise_conv2d_fix_1_fu_451_input_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_depthwise_conv2d_fix_1_fu_451_input_width = 6'd16;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_depthwise_conv2d_fix_1_fu_451_input_width = 6'd9;
    end else begin
        grp_depthwise_conv2d_fix_1_fu_451_input_width = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_depthwise_conv2d_fix_1_fu_451_kernel_q0 = SeparableConv2D_3_w_s_q0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_depthwise_conv2d_fix_1_fu_451_kernel_q0 = SeparableConv2D_2_w_s_q0;
    end else begin
        grp_depthwise_conv2d_fix_1_fu_451_kernel_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_depthwise_conv2d_fix_1_fu_451_kernel_q1 = SeparableConv2D_3_w_s_q1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_depthwise_conv2d_fix_1_fu_451_kernel_q1 = SeparableConv2D_2_w_s_q1;
    end else begin
        grp_depthwise_conv2d_fix_1_fu_451_kernel_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_depthwise_conv2d_fix_1_fu_451_output_height = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_depthwise_conv2d_fix_1_fu_451_output_height = 5'd7;
    end else begin
        grp_depthwise_conv2d_fix_1_fu_451_output_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_depthwise_conv2d_fix_1_fu_451_output_width = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_depthwise_conv2d_fix_1_fu_451_output_width = 5'd7;
    end else begin
        grp_depthwise_conv2d_fix_1_fu_451_output_width = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_depthwise_conv2d_fix_2_fu_427_bias_q0 = SeparableConv2D_4_b_s_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_depthwise_conv2d_fix_2_fu_427_bias_q0 = SeparableConv2D_1_b_s_q0;
    end else begin
        grp_depthwise_conv2d_fix_2_fu_427_bias_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_depthwise_conv2d_fix_2_fu_427_input_height = 7'd30;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_depthwise_conv2d_fix_2_fu_427_input_height = 7'd16;
    end else begin
        grp_depthwise_conv2d_fix_2_fu_427_input_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_depthwise_conv2d_fix_2_fu_427_input_width = 6'd30;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_depthwise_conv2d_fix_2_fu_427_input_width = 6'd16;
    end else begin
        grp_depthwise_conv2d_fix_2_fu_427_input_width = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_depthwise_conv2d_fix_2_fu_427_kernel_q0 = SeparableConv2D_4_w_s_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_depthwise_conv2d_fix_2_fu_427_kernel_q0 = SeparableConv2D_1_w_s_q0;
    end else begin
        grp_depthwise_conv2d_fix_2_fu_427_kernel_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_depthwise_conv2d_fix_2_fu_427_kernel_q1 = SeparableConv2D_4_w_s_q1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_depthwise_conv2d_fix_2_fu_427_kernel_q1 = SeparableConv2D_1_w_s_q1;
    end else begin
        grp_depthwise_conv2d_fix_2_fu_427_kernel_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_depthwise_conv2d_fix_2_fu_427_output_height = 6'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_depthwise_conv2d_fix_2_fu_427_output_height = 6'd14;
    end else begin
        grp_depthwise_conv2d_fix_2_fu_427_output_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_depthwise_conv2d_fix_2_fu_427_output_width = 6'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_depthwise_conv2d_fix_2_fu_427_output_width = 6'd14;
    end else begin
        grp_depthwise_conv2d_fix_2_fu_427_output_width = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_max_pooling2d_fix16_fu_525_input_height = 7'd14;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_max_pooling2d_fix16_fu_525_input_height = 7'd28;
    end else begin
        grp_max_pooling2d_fix16_fu_525_input_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_max_pooling2d_fix16_fu_525_input_width = 6'd14;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_max_pooling2d_fix16_fu_525_input_width = 6'd28;
    end else begin
        grp_max_pooling2d_fix16_fu_525_input_width = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_max_pooling2d_fix16_fu_525_output_depth = 6'd8;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_max_pooling2d_fix16_fu_525_output_depth = 6'd16;
    end else begin
        grp_max_pooling2d_fix16_fu_525_output_depth = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_max_pooling2d_fix16_fu_525_output_height = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_max_pooling2d_fix16_fu_525_output_height = 5'd14;
    end else begin
        grp_max_pooling2d_fix16_fu_525_output_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_max_pooling2d_fix16_fu_525_output_width = 5'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_max_pooling2d_fix16_fu_525_output_width = 5'd14;
    end else begin
        grp_max_pooling2d_fix16_fu_525_output_width = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20))) begin
        grp_padding2d_fix16_fu_507_input_depth = 7'd8;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_padding2d_fix16_fu_507_input_depth = 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_padding2d_fix16_fu_507_input_depth = 7'd1;
    end else begin
        grp_padding2d_fix16_fu_507_input_depth = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_padding2d_fix16_fu_507_input_height = 6'd7;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_padding2d_fix16_fu_507_input_height = 6'd14;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_padding2d_fix16_fu_507_input_height = 6'd28;
    end else begin
        grp_padding2d_fix16_fu_507_input_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_padding2d_fix16_fu_507_input_width = 6'd7;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_padding2d_fix16_fu_507_input_width = 6'd14;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_padding2d_fix16_fu_507_input_width = 6'd28;
    end else begin
        grp_padding2d_fix16_fu_507_input_width = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_up_sampling2d_fix16_fu_552_input_height = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_up_sampling2d_fix16_fu_552_input_height = 5'd7;
    end else begin
        grp_up_sampling2d_fix16_fu_552_input_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_up_sampling2d_fix16_fu_552_input_width = 5'd14;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_up_sampling2d_fix16_fu_552_input_width = 5'd7;
    end else begin
        grp_up_sampling2d_fix16_fu_552_input_width = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_up_sampling2d_fix16_fu_552_output_depth = 6'd16;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_up_sampling2d_fix16_fu_552_output_depth = 6'd8;
    end else begin
        grp_up_sampling2d_fix16_fu_552_output_depth = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_up_sampling2d_fix16_fu_552_output_height = 6'd28;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_up_sampling2d_fix16_fu_552_output_height = 6'd14;
    end else begin
        grp_up_sampling2d_fix16_fu_552_output_height = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_up_sampling2d_fix16_fu_552_output_width = 6'd28;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_up_sampling2d_fix16_fu_552_output_width = 6'd14;
    end else begin
        grp_up_sampling2d_fix16_fu_552_output_width = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_data_TDATA_blk_n = input_data_data_V_0_state[1'd0];
    end else begin
        input_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        input_data_data_V_0_ack_out = 1'b1;
    end else begin
        input_data_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_data_V_0_sel == 1'b1)) begin
        input_data_data_V_0_data_out = input_data_data_V_0_payload_B;
    end else begin
        input_data_data_V_0_data_out = input_data_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        input_data_dest_V_0_ack_out = 1'b1;
    end else begin
        input_data_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_dest_V_0_sel == 1'b1)) begin
        input_data_dest_V_0_data_out = input_data_dest_V_0_payload_B;
    end else begin
        input_data_dest_V_0_data_out = input_data_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        input_data_id_V_0_ack_out = 1'b1;
    end else begin
        input_data_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_id_V_0_sel == 1'b1)) begin
        input_data_id_V_0_data_out = input_data_id_V_0_payload_B;
    end else begin
        input_data_id_V_0_data_out = input_data_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        input_data_keep_V_0_ack_out = 1'b1;
    end else begin
        input_data_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_keep_V_0_sel == 1'b1)) begin
        input_data_keep_V_0_data_out = input_data_keep_V_0_payload_B;
    end else begin
        input_data_keep_V_0_data_out = input_data_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        input_data_last_V_0_ack_out = 1'b1;
    end else begin
        input_data_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_last_V_0_sel == 1'b1)) begin
        input_data_last_V_0_data_out = input_data_last_V_0_payload_B;
    end else begin
        input_data_last_V_0_data_out = input_data_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        input_data_strb_V_0_ack_out = 1'b1;
    end else begin
        input_data_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_strb_V_0_sel == 1'b1)) begin
        input_data_strb_V_0_data_out = input_data_strb_V_0_payload_B;
    end else begin
        input_data_strb_V_0_data_out = input_data_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        input_data_user_V_0_ack_out = 1'b1;
    end else begin
        input_data_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_user_V_0_sel == 1'b1)) begin
        input_data_user_V_0_data_out = input_data_user_V_0_payload_B;
    end else begin
        input_data_user_V_0_data_out = input_data_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (icmp_ln197_reg_692_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln197_reg_692 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        output_data_TDATA_blk_n = output_data_data_V_1_state[1'd1];
    end else begin
        output_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((output_data_data_V_1_sel == 1'b1)) begin
        output_data_data_V_1_data_out = output_data_data_V_1_payload_B;
    end else begin
        output_data_data_V_1_data_out = output_data_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_692 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        output_data_data_V_1_vld_in = 1'b1;
    end else begin
        output_data_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_dest_V_1_sel == 1'b1)) begin
        output_data_dest_V_1_data_out = output_data_dest_V_1_payload_B;
    end else begin
        output_data_dest_V_1_data_out = output_data_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_692 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        output_data_dest_V_1_vld_in = 1'b1;
    end else begin
        output_data_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_id_V_1_sel == 1'b1)) begin
        output_data_id_V_1_data_out = output_data_id_V_1_payload_B;
    end else begin
        output_data_id_V_1_data_out = output_data_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_692 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        output_data_id_V_1_vld_in = 1'b1;
    end else begin
        output_data_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_keep_V_1_sel == 1'b1)) begin
        output_data_keep_V_1_data_out = output_data_keep_V_1_payload_B;
    end else begin
        output_data_keep_V_1_data_out = output_data_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_692 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        output_data_keep_V_1_vld_in = 1'b1;
    end else begin
        output_data_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_last_V_1_sel == 1'b1)) begin
        output_data_last_V_1_data_out = output_data_last_V_1_payload_B;
    end else begin
        output_data_last_V_1_data_out = output_data_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_692 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        output_data_last_V_1_vld_in = 1'b1;
    end else begin
        output_data_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_strb_V_1_sel == 1'b1)) begin
        output_data_strb_V_1_data_out = output_data_strb_V_1_payload_B;
    end else begin
        output_data_strb_V_1_data_out = output_data_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_692 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        output_data_strb_V_1_vld_in = 1'b1;
    end else begin
        output_data_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_user_V_1_sel == 1'b1)) begin
        output_data_user_V_1_data_out = output_data_user_V_1_payload_B;
    end else begin
        output_data_user_V_1_data_out = output_data_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln197_reg_692 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        output_data_user_V_1_vld_in = 1'b1;
    end else begin
        output_data_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sig_buffer_dest_V_address0 = zext_ln200_fu_654_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sig_buffer_dest_V_address0 = sext_ln71_fu_573_p1;
    end else begin
        sig_buffer_dest_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        sig_buffer_dest_V_ce0 = 1'b1;
    end else begin
        sig_buffer_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        sig_buffer_dest_V_we0 = 1'b1;
    end else begin
        sig_buffer_dest_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sig_buffer_id_V_address0 = zext_ln200_fu_654_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sig_buffer_id_V_address0 = sext_ln71_fu_573_p1;
    end else begin
        sig_buffer_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        sig_buffer_id_V_ce0 = 1'b1;
    end else begin
        sig_buffer_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        sig_buffer_id_V_we0 = 1'b1;
    end else begin
        sig_buffer_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sig_buffer_keep_V_address0 = zext_ln200_fu_654_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sig_buffer_keep_V_address0 = sext_ln71_fu_573_p1;
    end else begin
        sig_buffer_keep_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        sig_buffer_keep_V_ce0 = 1'b1;
    end else begin
        sig_buffer_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        sig_buffer_keep_V_we0 = 1'b1;
    end else begin
        sig_buffer_keep_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sig_buffer_last_V_address0 = zext_ln200_fu_654_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sig_buffer_last_V_address0 = sext_ln71_fu_573_p1;
    end else begin
        sig_buffer_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        sig_buffer_last_V_ce0 = 1'b1;
    end else begin
        sig_buffer_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        sig_buffer_last_V_we0 = 1'b1;
    end else begin
        sig_buffer_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sig_buffer_strb_V_address0 = zext_ln200_fu_654_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sig_buffer_strb_V_address0 = sext_ln71_fu_573_p1;
    end else begin
        sig_buffer_strb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        sig_buffer_strb_V_ce0 = 1'b1;
    end else begin
        sig_buffer_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        sig_buffer_strb_V_we0 = 1'b1;
    end else begin
        sig_buffer_strb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        sig_buffer_user_V_address0 = zext_ln200_fu_654_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sig_buffer_user_V_address0 = sext_ln71_fu_573_p1;
    end else begin
        sig_buffer_user_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        sig_buffer_user_V_ce0 = 1'b1;
    end else begin
        sig_buffer_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        sig_buffer_user_V_we0 = 1'b1;
    end else begin
        sig_buffer_user_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((input_data_last_V_tm_fu_604_p1 == 1'd0) & (input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((input_data_last_V_tm_fu_604_p1 == 1'd1) & (input_data_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_padding2d_fix16_fu_507_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_depthwise_conv2d_fix_fu_475_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_pointwise_conv2d_fix_fu_546_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_max_pooling2d_fix16_fu_525_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_padding2d_fix16_fu_507_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_depthwise_conv2d_fix_2_fu_427_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_pointwise_conv2d_fix_1_fu_483_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_max_pooling2d_fix16_fu_525_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (grp_padding2d_fix16_fu_507_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (grp_depthwise_conv2d_fix_1_fu_451_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (grp_pointwise_conv2d_fix_2_fu_495_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (grp_up_sampling2d_fix16_fu_552_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_padding2d_fix16_fu_507_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (grp_depthwise_conv2d_fix_1_fu_451_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (grp_pointwise_conv2d_fix_3_fu_489_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (grp_up_sampling2d_fix16_fu_552_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (grp_padding2d_fix16_fu_507_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (grp_depthwise_conv2d_fix_2_fu_427_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_4_fu_501_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln173_fu_625_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln173_fu_625_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln197_fu_642_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln197_fu_642_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if ((~((output_data_dest_V_1_state == 2'd1) | (output_data_id_V_1_state == 2'd1) | (output_data_last_V_1_state == 2'd1) | (output_data_user_V_1_state == 2'd1) | (output_data_strb_V_1_state == 2'd1) | (output_data_keep_V_1_state == 2'd1) | (output_data_data_V_1_state == 2'd1) | ((output_data_dest_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_id_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_last_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_user_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_strb_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_keep_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_data_V_1_state == 2'd3) & (output_data_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state46_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state45_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state46_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state45_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

assign ap_block_state41_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state45_io = ((icmp_ln197_reg_692 == 1'd0) & (output_data_data_V_1_ack_in == 1'b0));
end

assign ap_block_state45_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state46_io = ((icmp_ln197_reg_692_pp2_iter1_reg == 1'd0) & (output_data_data_V_1_ack_in == 1'b0));
end

assign ap_block_state46_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state48 = ((output_data_dest_V_1_state == 2'd1) | (output_data_id_V_1_state == 2'd1) | (output_data_last_V_1_state == 2'd1) | (output_data_user_V_1_state == 2'd1) | (output_data_strb_V_1_state == 2'd1) | (output_data_keep_V_1_state == 2'd1) | (output_data_data_V_1_state == 2'd1) | ((output_data_dest_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_id_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_last_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_user_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_strb_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_keep_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)) | ((output_data_data_V_1_state == 2'd3) & (output_data_TREADY == 1'b0)));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_return = 32'd0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_depthwise_conv2d_fix_1_fu_451_ap_start = grp_depthwise_conv2d_fix_1_fu_451_ap_start_reg;

assign grp_depthwise_conv2d_fix_2_fu_427_ap_start = grp_depthwise_conv2d_fix_2_fu_427_ap_start_reg;

assign grp_depthwise_conv2d_fix_fu_475_ap_start = grp_depthwise_conv2d_fix_fu_475_ap_start_reg;

assign grp_max_pooling2d_fix16_fu_525_ap_start = grp_max_pooling2d_fix16_fu_525_ap_start_reg;

assign grp_padding2d_fix16_fu_507_ap_start = grp_padding2d_fix16_fu_507_ap_start_reg;

assign grp_pointwise_conv2d_fix_1_fu_483_ap_start = grp_pointwise_conv2d_fix_1_fu_483_ap_start_reg;

assign grp_pointwise_conv2d_fix_2_fu_495_ap_start = grp_pointwise_conv2d_fix_2_fu_495_ap_start_reg;

assign grp_pointwise_conv2d_fix_3_fu_489_ap_start = grp_pointwise_conv2d_fix_3_fu_489_ap_start_reg;

assign grp_pointwise_conv2d_fix_4_fu_501_ap_start = grp_pointwise_conv2d_fix_4_fu_501_ap_start_reg;

assign grp_pointwise_conv2d_fix_fu_546_ap_start = grp_pointwise_conv2d_fix_fu_546_ap_start_reg;

assign grp_up_sampling2d_fix16_fu_552_ap_start = grp_up_sampling2d_fix16_fu_552_ap_start_reg;

assign i_3_fu_631_p2 = (i_1_reg_405 + 10'd1);

assign i_4_fu_648_p2 = (i_2_reg_416 + 10'd1);

assign i_fu_619_p2 = ($signed(i_0_reg_394) + $signed(32'd1));

assign icmp_ln173_fu_625_p2 = ((i_1_reg_405 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln197_fu_642_p2 = ((i_2_reg_416 == 10'd784) ? 1'b1 : 1'b0);

assign input_data_TREADY = input_data_dest_V_0_state[1'd1];

assign input_data_data_V_0_ack_in = input_data_data_V_0_state[1'd1];

assign input_data_data_V_0_load_A = (input_data_data_V_0_state_cmp_full & ~input_data_data_V_0_sel_wr);

assign input_data_data_V_0_load_B = (input_data_data_V_0_state_cmp_full & input_data_data_V_0_sel_wr);

assign input_data_data_V_0_sel = input_data_data_V_0_sel_rd;

assign input_data_data_V_0_state_cmp_full = ((input_data_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_data_V_0_vld_in = input_data_TVALID;

assign input_data_data_V_0_vld_out = input_data_data_V_0_state[1'd0];

assign input_data_dest_V_0_ack_in = input_data_dest_V_0_state[1'd1];

assign input_data_dest_V_0_load_A = (input_data_dest_V_0_state_cmp_full & ~input_data_dest_V_0_sel_wr);

assign input_data_dest_V_0_load_B = (input_data_dest_V_0_state_cmp_full & input_data_dest_V_0_sel_wr);

assign input_data_dest_V_0_sel = input_data_dest_V_0_sel_rd;

assign input_data_dest_V_0_state_cmp_full = ((input_data_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_dest_V_0_vld_in = input_data_TVALID;

assign input_data_dest_V_0_vld_out = input_data_dest_V_0_state[1'd0];

assign input_data_id_V_0_ack_in = input_data_id_V_0_state[1'd1];

assign input_data_id_V_0_load_A = (input_data_id_V_0_state_cmp_full & ~input_data_id_V_0_sel_wr);

assign input_data_id_V_0_load_B = (input_data_id_V_0_state_cmp_full & input_data_id_V_0_sel_wr);

assign input_data_id_V_0_sel = input_data_id_V_0_sel_rd;

assign input_data_id_V_0_state_cmp_full = ((input_data_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_id_V_0_vld_in = input_data_TVALID;

assign input_data_id_V_0_vld_out = input_data_id_V_0_state[1'd0];

assign input_data_keep_V_0_ack_in = input_data_keep_V_0_state[1'd1];

assign input_data_keep_V_0_load_A = (input_data_keep_V_0_state_cmp_full & ~input_data_keep_V_0_sel_wr);

assign input_data_keep_V_0_load_B = (input_data_keep_V_0_state_cmp_full & input_data_keep_V_0_sel_wr);

assign input_data_keep_V_0_sel = input_data_keep_V_0_sel_rd;

assign input_data_keep_V_0_state_cmp_full = ((input_data_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_keep_V_0_vld_in = input_data_TVALID;

assign input_data_keep_V_0_vld_out = input_data_keep_V_0_state[1'd0];

assign input_data_last_V_0_ack_in = input_data_last_V_0_state[1'd1];

assign input_data_last_V_0_load_A = (input_data_last_V_0_state_cmp_full & ~input_data_last_V_0_sel_wr);

assign input_data_last_V_0_load_B = (input_data_last_V_0_state_cmp_full & input_data_last_V_0_sel_wr);

assign input_data_last_V_0_sel = input_data_last_V_0_sel_rd;

assign input_data_last_V_0_state_cmp_full = ((input_data_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_last_V_0_vld_in = input_data_TVALID;

assign input_data_last_V_0_vld_out = input_data_last_V_0_state[1'd0];

assign input_data_last_V_tm_fu_604_p1 = input_data_last_V_0_data_out;

assign input_data_strb_V_0_ack_in = input_data_strb_V_0_state[1'd1];

assign input_data_strb_V_0_load_A = (input_data_strb_V_0_state_cmp_full & ~input_data_strb_V_0_sel_wr);

assign input_data_strb_V_0_load_B = (input_data_strb_V_0_state_cmp_full & input_data_strb_V_0_sel_wr);

assign input_data_strb_V_0_sel = input_data_strb_V_0_sel_rd;

assign input_data_strb_V_0_state_cmp_full = ((input_data_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_strb_V_0_vld_in = input_data_TVALID;

assign input_data_strb_V_0_vld_out = input_data_strb_V_0_state[1'd0];

assign input_data_user_V_0_ack_in = input_data_user_V_0_state[1'd1];

assign input_data_user_V_0_load_A = (input_data_user_V_0_state_cmp_full & ~input_data_user_V_0_sel_wr);

assign input_data_user_V_0_load_B = (input_data_user_V_0_state_cmp_full & input_data_user_V_0_sel_wr);

assign input_data_user_V_0_sel = input_data_user_V_0_sel_rd;

assign input_data_user_V_0_state_cmp_full = ((input_data_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_user_V_0_vld_in = input_data_TVALID;

assign input_data_user_V_0_vld_out = input_data_user_V_0_state[1'd0];

assign output_data_TDATA = output_data_data_V_1_data_out;

assign output_data_TDEST = output_data_dest_V_1_data_out;

assign output_data_TID = output_data_id_V_1_data_out;

assign output_data_TKEEP = output_data_keep_V_1_data_out;

assign output_data_TLAST = output_data_last_V_1_data_out;

assign output_data_TSTRB = output_data_strb_V_1_data_out;

assign output_data_TUSER = output_data_user_V_1_data_out;

assign output_data_TVALID = output_data_dest_V_1_state[1'd0];

assign output_data_data_V_1_ack_in = output_data_data_V_1_state[1'd1];

assign output_data_data_V_1_ack_out = output_data_TREADY;

assign output_data_data_V_1_load_A = (output_data_data_V_1_state_cmp_full & ~output_data_data_V_1_sel_wr);

assign output_data_data_V_1_load_B = (output_data_data_V_1_state_cmp_full & output_data_data_V_1_sel_wr);

assign output_data_data_V_1_sel = output_data_data_V_1_sel_rd;

assign output_data_data_V_1_state_cmp_full = ((output_data_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_data_V_1_vld_out = output_data_data_V_1_state[1'd0];

assign output_data_dest_V_1_ack_in = output_data_dest_V_1_state[1'd1];

assign output_data_dest_V_1_ack_out = output_data_TREADY;

assign output_data_dest_V_1_load_A = (output_data_dest_V_1_state_cmp_full & ~output_data_dest_V_1_sel_wr);

assign output_data_dest_V_1_load_B = (output_data_dest_V_1_state_cmp_full & output_data_dest_V_1_sel_wr);

assign output_data_dest_V_1_sel = output_data_dest_V_1_sel_rd;

assign output_data_dest_V_1_state_cmp_full = ((output_data_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_dest_V_1_vld_out = output_data_dest_V_1_state[1'd0];

assign output_data_id_V_1_ack_in = output_data_id_V_1_state[1'd1];

assign output_data_id_V_1_ack_out = output_data_TREADY;

assign output_data_id_V_1_load_A = (output_data_id_V_1_state_cmp_full & ~output_data_id_V_1_sel_wr);

assign output_data_id_V_1_load_B = (output_data_id_V_1_state_cmp_full & output_data_id_V_1_sel_wr);

assign output_data_id_V_1_sel = output_data_id_V_1_sel_rd;

assign output_data_id_V_1_state_cmp_full = ((output_data_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_id_V_1_vld_out = output_data_id_V_1_state[1'd0];

assign output_data_keep_V_1_ack_in = output_data_keep_V_1_state[1'd1];

assign output_data_keep_V_1_ack_out = output_data_TREADY;

assign output_data_keep_V_1_load_A = (output_data_keep_V_1_state_cmp_full & ~output_data_keep_V_1_sel_wr);

assign output_data_keep_V_1_load_B = (output_data_keep_V_1_state_cmp_full & output_data_keep_V_1_sel_wr);

assign output_data_keep_V_1_sel = output_data_keep_V_1_sel_rd;

assign output_data_keep_V_1_state_cmp_full = ((output_data_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_keep_V_1_vld_out = output_data_keep_V_1_state[1'd0];

assign output_data_last_V_1_ack_in = output_data_last_V_1_state[1'd1];

assign output_data_last_V_1_ack_out = output_data_TREADY;

assign output_data_last_V_1_load_A = (output_data_last_V_1_state_cmp_full & ~output_data_last_V_1_sel_wr);

assign output_data_last_V_1_load_B = (output_data_last_V_1_state_cmp_full & output_data_last_V_1_sel_wr);

assign output_data_last_V_1_sel = output_data_last_V_1_sel_rd;

assign output_data_last_V_1_state_cmp_full = ((output_data_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_last_V_1_vld_out = output_data_last_V_1_state[1'd0];

assign output_data_strb_V_1_ack_in = output_data_strb_V_1_state[1'd1];

assign output_data_strb_V_1_ack_out = output_data_TREADY;

assign output_data_strb_V_1_load_A = (output_data_strb_V_1_state_cmp_full & ~output_data_strb_V_1_sel_wr);

assign output_data_strb_V_1_load_B = (output_data_strb_V_1_state_cmp_full & output_data_strb_V_1_sel_wr);

assign output_data_strb_V_1_sel = output_data_strb_V_1_sel_rd;

assign output_data_strb_V_1_state_cmp_full = ((output_data_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_strb_V_1_vld_out = output_data_strb_V_1_state[1'd0];

assign output_data_user_V_1_ack_in = output_data_user_V_1_state[1'd1];

assign output_data_user_V_1_ack_out = output_data_TREADY;

assign output_data_user_V_1_load_A = (output_data_user_V_1_state_cmp_full & ~output_data_user_V_1_sel_wr);

assign output_data_user_V_1_load_B = (output_data_user_V_1_state_cmp_full & output_data_user_V_1_sel_wr);

assign output_data_user_V_1_sel = output_data_user_V_1_sel_rd;

assign output_data_user_V_1_state_cmp_full = ((output_data_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_user_V_1_vld_out = output_data_user_V_1_state[1'd0];

assign sext_ln71_fu_573_p1 = i_0_reg_394;

assign zext_ln176_fu_637_p1 = i_1_reg_405;

assign zext_ln200_fu_654_p1 = i_2_reg_416;

always @ (posedge ap_clk) begin
    zext_ln176_reg_682[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //network
