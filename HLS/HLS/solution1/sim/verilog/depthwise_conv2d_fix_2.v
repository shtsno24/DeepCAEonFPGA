// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel1_address0,
        kernel1_ce0,
        kernel1_q0,
        kernel2_address0,
        kernel2_ce0,
        kernel2_q0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [5:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [5:0] kernel1_address0;
output   kernel1_ce0;
input  [15:0] kernel1_q0;
output  [5:0] kernel2_address0;
output   kernel2_ce0;
input  [15:0] kernel2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg kernel_ce0;
reg kernel1_ce0;
reg kernel2_ce0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] reg_287;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg  signed [15:0] reg_291;
wire   [8:0] zext_ln103_1_fu_299_p1;
reg   [8:0] zext_ln103_1_reg_837;
wire   [13:0] zext_ln103_fu_303_p1;
reg   [13:0] zext_ln103_reg_842;
wire   [11:0] zext_ln103_2_fu_307_p1;
reg   [11:0] zext_ln103_2_reg_847;
wire   [9:0] zext_ln103_4_fu_311_p1;
reg   [9:0] zext_ln103_4_reg_853;
wire   [8:0] zext_ln103_3_fu_315_p1;
reg   [8:0] zext_ln103_3_reg_858;
wire   [13:0] zext_ln103_1_cast_fu_319_p1;
reg   [13:0] zext_ln103_1_cast_reg_863;
wire   [4:0] empty_fu_323_p1;
reg   [4:0] empty_reg_868;
wire   [4:0] empty_60_fu_327_p1;
reg   [4:0] empty_60_reg_873;
wire   [8:0] add_ln20_fu_331_p2;
reg   [8:0] add_ln20_reg_878;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln20_3_fu_336_p2;
reg   [8:0] add_ln20_3_reg_883;
wire   [4:0] out_d_fu_347_p2;
reg   [4:0] out_d_reg_891;
wire   [13:0] mul_ln41_fu_357_p2;
reg   [13:0] mul_ln41_reg_896;
wire   [0:0] icmp_ln20_fu_341_p2;
wire   [1:0] trunc_ln41_fu_362_p1;
reg   [1:0] trunc_ln41_reg_903;
wire   [13:0] add_ln47_fu_366_p2;
reg   [13:0] add_ln47_reg_911;
wire    ap_CS_fsm_state3;
wire   [1:0] add_ln47_1_fu_371_p2;
reg   [1:0] add_ln47_1_reg_916;
wire   [13:0] add_ln53_fu_376_p2;
reg   [13:0] add_ln53_reg_921;
wire   [1:0] xor_ln53_fu_381_p2;
reg   [1:0] xor_ln53_reg_926;
wire   [1:0] add_ln60_fu_386_p2;
reg   [1:0] add_ln60_reg_931;
wire   [9:0] next_mul_fu_391_p2;
reg   [9:0] next_mul_reg_936;
wire    ap_CS_fsm_state4;
wire   [4:0] out_h_fu_401_p2;
reg   [4:0] out_h_reg_944;
wire   [4:0] add_ln79_1_fu_411_p2;
reg   [4:0] add_ln79_1_reg_950;
wire   [0:0] icmp_ln21_fu_396_p2;
wire   [8:0] tmp_fu_417_p2;
reg   [8:0] tmp_reg_955;
wire   [13:0] zext_ln41_2_fu_423_p1;
reg   [13:0] zext_ln41_2_reg_960;
wire    ap_CS_fsm_state5;
wire   [13:0] zext_ln60_1_fu_435_p1;
reg   [13:0] zext_ln60_1_reg_967;
wire   [13:0] zext_ln79_2_fu_447_p1;
reg   [13:0] zext_ln79_2_reg_974;
wire   [13:0] tmp10_fu_454_p2;
reg   [13:0] tmp10_reg_981;
wire   [4:0] out_w_fu_464_p2;
reg   [4:0] out_w_reg_989;
wire    ap_CS_fsm_state6;
wire   [13:0] add_ln41_fu_474_p2;
reg   [13:0] add_ln41_reg_994;
wire   [0:0] icmp_ln22_fu_459_p2;
wire   [13:0] add_ln47_2_fu_479_p2;
reg   [13:0] add_ln47_2_reg_1001;
wire   [13:0] add_ln53_1_fu_484_p2;
reg   [13:0] add_ln53_1_reg_1008;
wire   [13:0] add_ln103_fu_489_p2;
reg   [13:0] add_ln103_reg_1015;
wire   [13:0] add_ln41_1_fu_494_p2;
reg   [13:0] add_ln41_1_reg_1020;
wire    ap_CS_fsm_state7;
wire   [13:0] add_ln47_3_fu_498_p2;
reg   [13:0] add_ln47_3_reg_1025;
wire    ap_CS_fsm_state8;
wire   [13:0] add_ln53_2_fu_510_p2;
reg   [13:0] add_ln53_2_reg_1040;
wire   [13:0] add_ln60_2_fu_514_p2;
reg   [13:0] add_ln60_2_reg_1045;
wire   [13:0] add_ln66_fu_526_p2;
reg   [13:0] add_ln66_reg_1060;
wire   [13:0] add_ln72_fu_530_p2;
reg   [13:0] add_ln72_reg_1065;
wire   [13:0] add_ln79_fu_534_p2;
reg   [13:0] add_ln79_reg_1070;
wire   [13:0] add_ln85_fu_538_p2;
reg   [13:0] add_ln85_reg_1075;
wire   [13:0] add_ln91_fu_542_p2;
reg   [13:0] add_ln91_reg_1080;
reg   [15:0] kernel_load_reg_1085;
wire    ap_CS_fsm_state10;
reg   [15:0] kernel1_load_reg_1093;
reg   [15:0] kernel2_load_reg_1101;
reg  signed [15:0] input_load_2_reg_1109;
reg  signed [15:0] input_load_3_reg_1114;
wire   [15:0] tmp_s_fu_554_p5;
reg   [15:0] tmp_s_reg_1129;
wire    ap_CS_fsm_state11;
wire   [15:0] tmp_1_fu_562_p5;
reg   [15:0] tmp_1_reg_1134;
wire   [15:0] tmp_2_fu_570_p5;
reg   [15:0] tmp_2_reg_1139;
wire   [15:0] tmp_3_fu_578_p5;
reg   [15:0] tmp_3_reg_1144;
reg  signed [15:0] input_load_4_reg_1149;
reg  signed [15:0] input_load_5_reg_1154;
wire  signed [29:0] sext_ln41_1_fu_598_p1;
reg  signed [29:0] sext_ln41_1_reg_1169;
wire  signed [29:0] mul_ln41_1_fu_769_p2;
reg  signed [29:0] mul_ln41_1_reg_1174;
wire  signed [29:0] mul_ln47_fu_775_p2;
reg  signed [29:0] mul_ln47_reg_1179;
wire  signed [29:0] mul_ln66_fu_781_p2;
reg  signed [29:0] mul_ln66_reg_1184;
wire  signed [29:0] mul_ln72_fu_787_p2;
reg  signed [29:0] mul_ln72_reg_1189;
wire  signed [29:0] mul_ln53_fu_793_p2;
reg  signed [29:0] mul_ln53_reg_1199;
wire  signed [29:0] mul_ln60_1_fu_799_p2;
reg  signed [29:0] mul_ln60_1_reg_1204;
wire  signed [29:0] mul_ln79_1_fu_805_p2;
reg  signed [29:0] mul_ln79_1_reg_1209;
wire  signed [29:0] mul_ln85_fu_811_p2;
reg  signed [29:0] mul_ln85_reg_1214;
wire   [15:0] add_ln103_1_fu_674_p2;
reg   [15:0] add_ln103_1_reg_1219;
wire   [15:0] add_ln103_5_fu_680_p2;
reg   [15:0] add_ln103_5_reg_1224;
wire  signed [29:0] mul_ln91_fu_817_p2;
reg  signed [29:0] mul_ln91_reg_1229;
wire    ap_CS_fsm_state14;
reg   [15:0] trunc_ln2_reg_1234;
reg   [15:0] trunc_ln3_reg_1239;
wire   [15:0] add_ln103_4_fu_732_p2;
reg   [15:0] add_ln103_4_reg_1244;
wire   [15:0] add_ln103_7_fu_751_p2;
reg   [15:0] add_ln103_7_reg_1249;
wire    ap_CS_fsm_state15;
wire   [15:0] add_ln103_3_fu_760_p2;
reg   [15:0] add_ln103_3_reg_1254;
wire    ap_CS_fsm_state16;
reg   [4:0] out_d_0_reg_219;
reg   [8:0] phi_mul2_reg_230;
reg   [8:0] phi_mul5_reg_241;
reg   [4:0] out_h_0_reg_253;
reg   [9:0] phi_mul_reg_264;
reg   [4:0] out_w_0_reg_276;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln41_4_fu_502_p1;
wire   [63:0] zext_ln47_fu_506_p1;
wire   [63:0] zext_ln53_fu_518_p1;
wire   [63:0] zext_ln60_2_fu_522_p1;
wire   [63:0] zext_ln66_fu_546_p1;
wire   [63:0] zext_ln72_fu_550_p1;
wire   [63:0] zext_ln79_1_fu_586_p1;
wire   [63:0] zext_ln85_fu_590_p1;
wire   [63:0] zext_ln91_fu_614_p1;
wire   [63:0] zext_ln103_5_fu_765_p1;
wire  signed [6:0] sext_ln41_2_fu_295_p1;
wire   [6:0] mul_ln41_fu_357_p0;
wire   [8:0] mul_ln41_fu_357_p1;
wire   [8:0] zext_ln41_1_fu_407_p1;
wire   [6:0] mul_ln60_fu_430_p0;
wire   [4:0] mul_ln60_fu_430_p1;
wire   [11:0] mul_ln60_fu_430_p2;
wire   [6:0] mul_ln79_fu_442_p0;
wire   [4:0] mul_ln79_fu_442_p1;
wire   [11:0] mul_ln79_fu_442_p2;
wire   [5:0] tmp10_fu_454_p0;
wire   [8:0] tmp10_fu_454_p1;
wire   [13:0] zext_ln41_3_fu_470_p1;
wire   [15:0] trunc_ln92_3_fu_647_p4;
wire   [15:0] trunc_ln7_fu_638_p4;
wire   [15:0] trunc_ln1_fu_665_p4;
wire   [15:0] trunc_ln_fu_656_p4;
wire   [15:0] trunc_ln9_fu_699_p4;
wire   [15:0] trunc_ln8_fu_690_p4;
wire   [15:0] add_ln103_2_fu_726_p2;
wire   [15:0] trunc_ln101_3_fu_737_p4;
wire   [15:0] add_ln103_6_fu_746_p2;
wire   [15:0] add_ln103_8_fu_756_p2;
wire  signed [15:0] mul_ln41_1_fu_769_p0;
wire  signed [15:0] mul_ln47_fu_775_p0;
wire  signed [29:0] sext_ln47_1_fu_605_p1;
wire  signed [15:0] mul_ln66_fu_781_p0;
wire  signed [15:0] mul_ln72_fu_787_p0;
wire  signed [15:0] mul_ln53_fu_793_p0;
wire  signed [29:0] sext_ln53_1_fu_621_p1;
wire  signed [15:0] mul_ln60_1_fu_799_p0;
wire  signed [29:0] sext_ln60_1_fu_627_p1;
wire  signed [15:0] mul_ln79_1_fu_805_p0;
wire  signed [15:0] mul_ln85_fu_811_p0;
wire  signed [15:0] mul_ln91_fu_817_p0;
reg   [16:0] ap_NS_fsm;
wire   [13:0] mul_ln41_fu_357_p10;
wire   [11:0] mul_ln60_fu_430_p10;
wire   [11:0] mul_ln79_fu_442_p10;
wire   [13:0] tmp10_fu_454_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U31(
    .din0(kernel_load_reg_1085),
    .din1(kernel1_load_reg_1093),
    .din2(kernel2_load_reg_1101),
    .din3(trunc_ln41_reg_903),
    .dout(tmp_s_fu_554_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U32(
    .din0(kernel_load_reg_1085),
    .din1(kernel1_load_reg_1093),
    .din2(kernel2_load_reg_1101),
    .din3(add_ln47_1_reg_916),
    .dout(tmp_1_fu_562_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U33(
    .din0(kernel_load_reg_1085),
    .din1(kernel1_load_reg_1093),
    .din2(kernel2_load_reg_1101),
    .din3(xor_ln53_reg_926),
    .dout(tmp_2_fu_570_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U34(
    .din0(kernel_load_reg_1085),
    .din1(kernel1_load_reg_1093),
    .din2(kernel2_load_reg_1101),
    .din3(add_ln60_reg_931),
    .dout(tmp_3_fu_578_p5)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U35(
    .din0(mul_ln41_1_fu_769_p0),
    .din1(reg_287),
    .dout(mul_ln41_1_fu_769_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U36(
    .din0(mul_ln47_fu_775_p0),
    .din1(reg_291),
    .dout(mul_ln47_fu_775_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U37(
    .din0(mul_ln66_fu_781_p0),
    .din1(input_load_4_reg_1149),
    .dout(mul_ln66_fu_781_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U38(
    .din0(mul_ln72_fu_787_p0),
    .din1(input_load_5_reg_1154),
    .dout(mul_ln72_fu_787_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U39(
    .din0(mul_ln53_fu_793_p0),
    .din1(input_load_2_reg_1109),
    .dout(mul_ln53_fu_793_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U40(
    .din0(mul_ln60_1_fu_799_p0),
    .din1(input_load_3_reg_1114),
    .dout(mul_ln60_1_fu_799_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U41(
    .din0(mul_ln79_1_fu_805_p0),
    .din1(reg_287),
    .dout(mul_ln79_1_fu_805_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U42(
    .din0(mul_ln85_fu_811_p0),
    .din1(reg_291),
    .dout(mul_ln85_fu_811_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U43(
    .din0(mul_ln91_fu_817_p0),
    .din1(reg_287),
    .dout(mul_ln91_fu_817_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_396_p2 == 1'd1))) begin
        out_d_0_reg_219 <= out_d_reg_891;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_d_0_reg_219 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_459_p2 == 1'd1))) begin
        out_h_0_reg_253 <= out_h_reg_944;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_253 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_0_reg_276 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        out_w_0_reg_276 <= out_w_reg_989;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_396_p2 == 1'd1))) begin
        phi_mul2_reg_230 <= add_ln20_3_reg_883;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul2_reg_230 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_396_p2 == 1'd1))) begin
        phi_mul5_reg_241 <= add_ln20_reg_878;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul5_reg_241 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_459_p2 == 1'd1))) begin
        phi_mul_reg_264 <= next_mul_reg_936;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_mul_reg_264 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln103_1_reg_1219 <= add_ln103_1_fu_674_p2;
        add_ln103_5_reg_1224 <= add_ln103_5_fu_680_p2;
        mul_ln53_reg_1199 <= mul_ln53_fu_793_p2;
        mul_ln60_1_reg_1204 <= mul_ln60_1_fu_799_p2;
        mul_ln79_1_reg_1209 <= mul_ln79_1_fu_805_p2;
        mul_ln85_reg_1214 <= mul_ln85_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln103_3_reg_1254 <= add_ln103_3_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln103_4_reg_1244 <= add_ln103_4_fu_732_p2;
        mul_ln91_reg_1229 <= mul_ln91_fu_817_p2;
        trunc_ln2_reg_1234 <= {{mul_ln79_1_reg_1209[29:14]}};
        trunc_ln3_reg_1239 <= {{mul_ln85_reg_1214[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln103_7_reg_1249 <= add_ln103_7_fu_751_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_459_p2 == 1'd0))) begin
        add_ln103_reg_1015 <= add_ln103_fu_489_p2;
        add_ln41_reg_994 <= add_ln41_fu_474_p2;
        add_ln47_2_reg_1001 <= add_ln47_2_fu_479_p2;
        add_ln53_1_reg_1008 <= add_ln53_1_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln20_3_reg_883 <= add_ln20_3_fu_336_p2;
        add_ln20_reg_878 <= add_ln20_fu_331_p2;
        out_d_reg_891 <= out_d_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln41_1_reg_1020 <= add_ln41_1_fu_494_p2;
        add_ln47_3_reg_1025 <= add_ln47_3_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln47_1_reg_916 <= add_ln47_1_fu_371_p2;
        add_ln47_reg_911 <= add_ln47_fu_366_p2;
        add_ln53_reg_921 <= add_ln53_fu_376_p2;
        add_ln60_reg_931 <= add_ln60_fu_386_p2;
        xor_ln53_reg_926 <= xor_ln53_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln53_2_reg_1040 <= add_ln53_2_fu_510_p2;
        add_ln60_2_reg_1045 <= add_ln60_2_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln66_reg_1060 <= add_ln66_fu_526_p2;
        add_ln72_reg_1065 <= add_ln72_fu_530_p2;
        add_ln79_reg_1070 <= add_ln79_fu_534_p2;
        add_ln85_reg_1075 <= add_ln85_fu_538_p2;
        add_ln91_reg_1080 <= add_ln91_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_396_p2 == 1'd0))) begin
        add_ln79_1_reg_950 <= add_ln79_1_fu_411_p2;
        tmp_reg_955 <= tmp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_60_reg_873 <= empty_60_fu_327_p1;
        empty_reg_868 <= empty_fu_323_p1;
        zext_ln103_1_cast_reg_863[5 : 0] <= zext_ln103_1_cast_fu_319_p1[5 : 0];
        zext_ln103_1_reg_837[6 : 0] <= zext_ln103_1_fu_299_p1[6 : 0];
        zext_ln103_2_reg_847[6 : 0] <= zext_ln103_2_fu_307_p1[6 : 0];
        zext_ln103_3_reg_858[5 : 0] <= zext_ln103_3_fu_315_p1[5 : 0];
        zext_ln103_4_reg_853[6 : 0] <= zext_ln103_4_fu_311_p1[6 : 0];
        zext_ln103_reg_842[6 : 0] <= zext_ln103_fu_303_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_load_2_reg_1109 <= input_r_q0;
        input_load_3_reg_1114 <= input_r_q1;
        kernel1_load_reg_1093 <= kernel1_q0;
        kernel2_load_reg_1101 <= kernel2_q0;
        kernel_load_reg_1085 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_load_4_reg_1149 <= input_r_q0;
        input_load_5_reg_1154 <= input_r_q1;
        tmp_1_reg_1134 <= tmp_1_fu_562_p5;
        tmp_2_reg_1139 <= tmp_2_fu_570_p5;
        tmp_3_reg_1144 <= tmp_3_fu_578_p5;
        tmp_s_reg_1129 <= tmp_s_fu_554_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln41_1_reg_1174 <= mul_ln41_1_fu_769_p2;
        mul_ln47_reg_1179 <= mul_ln47_fu_775_p2;
        mul_ln66_reg_1184 <= mul_ln66_fu_781_p2;
        mul_ln72_reg_1189 <= mul_ln72_fu_787_p2;
        sext_ln41_1_reg_1169 <= sext_ln41_1_fu_598_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_341_p2 == 1'd0))) begin
        mul_ln41_reg_896 <= mul_ln41_fu_357_p2;
        trunc_ln41_reg_903 <= trunc_ln41_fu_362_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        next_mul_reg_936 <= next_mul_fu_391_p2;
        out_h_reg_944 <= out_h_fu_401_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_w_reg_989 <= out_w_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_287 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_291 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp10_reg_981 <= tmp10_fu_454_p2;
        zext_ln41_2_reg_960[9 : 0] <= zext_ln41_2_fu_423_p1[9 : 0];
        zext_ln60_1_reg_967[11 : 0] <= zext_ln60_1_fu_435_p1[11 : 0];
        zext_ln79_2_reg_974[11 : 0] <= zext_ln79_2_fu_447_p1[11 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_341_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_341_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_r_address0 = zext_ln91_fu_614_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = zext_ln79_1_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = zext_ln66_fu_546_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = zext_ln53_fu_518_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = zext_ln41_4_fu_502_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address1 = zext_ln85_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address1 = zext_ln72_fu_550_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address1 = zext_ln60_2_fu_522_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address1 = zext_ln47_fu_506_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel1_ce0 = 1'b1;
    end else begin
        kernel1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel2_ce0 = 1'b1;
    end else begin
        kernel2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_341_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_396_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_459_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_1_fu_674_p2 = (trunc_ln92_3_fu_647_p4 + trunc_ln7_fu_638_p4);

assign add_ln103_2_fu_726_p2 = (trunc_ln9_fu_699_p4 + trunc_ln8_fu_690_p4);

assign add_ln103_3_fu_760_p2 = (add_ln103_4_reg_1244 + add_ln103_8_fu_756_p2);

assign add_ln103_4_fu_732_p2 = (add_ln103_1_reg_1219 + add_ln103_2_fu_726_p2);

assign add_ln103_5_fu_680_p2 = (trunc_ln1_fu_665_p4 + trunc_ln_fu_656_p4);

assign add_ln103_6_fu_746_p2 = (trunc_ln101_3_fu_737_p4 + trunc_ln3_reg_1239);

assign add_ln103_7_fu_751_p2 = (trunc_ln2_reg_1234 + add_ln103_6_fu_746_p2);

assign add_ln103_8_fu_756_p2 = (add_ln103_5_reg_1224 + add_ln103_7_reg_1249);

assign add_ln103_fu_489_p2 = (zext_ln41_3_fu_470_p1 + tmp10_reg_981);

assign add_ln20_3_fu_336_p2 = (phi_mul2_reg_230 + zext_ln103_1_reg_837);

assign add_ln20_fu_331_p2 = (phi_mul5_reg_241 + zext_ln103_3_reg_858);

assign add_ln41_1_fu_494_p2 = (zext_ln41_2_reg_960 + add_ln41_reg_994);

assign add_ln41_fu_474_p2 = (zext_ln41_3_fu_470_p1 + mul_ln41_reg_896);

assign add_ln47_1_fu_371_p2 = (2'd1 + trunc_ln41_reg_903);

assign add_ln47_2_fu_479_p2 = (zext_ln41_3_fu_470_p1 + add_ln47_reg_911);

assign add_ln47_3_fu_498_p2 = (zext_ln41_2_reg_960 + add_ln47_2_reg_1001);

assign add_ln47_fu_366_p2 = (14'd1 + mul_ln41_reg_896);

assign add_ln53_1_fu_484_p2 = (zext_ln41_3_fu_470_p1 + add_ln53_reg_921);

assign add_ln53_2_fu_510_p2 = (zext_ln41_2_reg_960 + add_ln53_1_reg_1008);

assign add_ln53_fu_376_p2 = (14'd2 + mul_ln41_reg_896);

assign add_ln60_2_fu_514_p2 = (zext_ln60_1_reg_967 + add_ln41_reg_994);

assign add_ln60_fu_386_p2 = ($signed(2'd3) + $signed(trunc_ln41_reg_903));

assign add_ln66_fu_526_p2 = (zext_ln60_1_reg_967 + add_ln47_2_reg_1001);

assign add_ln72_fu_530_p2 = (zext_ln60_1_reg_967 + add_ln53_1_reg_1008);

assign add_ln79_1_fu_411_p2 = (out_h_0_reg_253 + 5'd2);

assign add_ln79_fu_534_p2 = (zext_ln79_2_reg_974 + add_ln41_reg_994);

assign add_ln85_fu_538_p2 = (zext_ln79_2_reg_974 + add_ln47_2_reg_1001);

assign add_ln91_fu_542_p2 = (zext_ln79_2_reg_974 + add_ln53_1_reg_1008);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_60_fu_327_p1 = output_height[4:0];

assign empty_fu_323_p1 = output_width[4:0];

assign icmp_ln20_fu_341_p2 = ((out_d_0_reg_219 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_396_p2 = ((out_h_0_reg_253 == empty_60_reg_873) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_459_p2 = ((out_w_0_reg_276 == empty_reg_868) ? 1'b1 : 1'b0);

assign kernel1_address0 = 64'd0;

assign kernel2_address0 = 64'd0;

assign kernel_address0 = 64'd0;

assign mul_ln41_1_fu_769_p0 = sext_ln41_1_fu_598_p1;

assign mul_ln41_fu_357_p0 = zext_ln103_reg_842;

assign mul_ln41_fu_357_p1 = mul_ln41_fu_357_p10;

assign mul_ln41_fu_357_p10 = phi_mul2_reg_230;

assign mul_ln41_fu_357_p2 = (mul_ln41_fu_357_p0 * mul_ln41_fu_357_p1);

assign mul_ln47_fu_775_p0 = sext_ln47_1_fu_605_p1;

assign mul_ln53_fu_793_p0 = sext_ln53_1_fu_621_p1;

assign mul_ln60_1_fu_799_p0 = sext_ln60_1_fu_627_p1;

assign mul_ln60_fu_430_p0 = zext_ln103_2_reg_847;

assign mul_ln60_fu_430_p1 = mul_ln60_fu_430_p10;

assign mul_ln60_fu_430_p10 = out_h_reg_944;

assign mul_ln60_fu_430_p2 = (mul_ln60_fu_430_p0 * mul_ln60_fu_430_p1);

assign mul_ln66_fu_781_p0 = sext_ln41_1_fu_598_p1;

assign mul_ln72_fu_787_p0 = sext_ln47_1_fu_605_p1;

assign mul_ln79_1_fu_805_p0 = sext_ln53_1_fu_621_p1;

assign mul_ln79_fu_442_p0 = zext_ln103_2_reg_847;

assign mul_ln79_fu_442_p1 = mul_ln79_fu_442_p10;

assign mul_ln79_fu_442_p10 = add_ln79_1_reg_950;

assign mul_ln79_fu_442_p2 = (mul_ln79_fu_442_p0 * mul_ln79_fu_442_p1);

assign mul_ln85_fu_811_p0 = sext_ln60_1_fu_627_p1;

assign mul_ln91_fu_817_p0 = sext_ln41_1_reg_1169;

assign next_mul_fu_391_p2 = (phi_mul_reg_264 + zext_ln103_4_reg_853);

assign out_d_fu_347_p2 = (out_d_0_reg_219 + 5'd1);

assign out_h_fu_401_p2 = (out_h_0_reg_253 + 5'd1);

assign out_w_fu_464_p2 = (out_w_0_reg_276 + 5'd1);

assign output_r_address0 = zext_ln103_5_fu_765_p1;

assign output_r_d0 = add_ln103_3_reg_1254;

assign sext_ln41_1_fu_598_p1 = $signed(tmp_s_reg_1129);

assign sext_ln41_2_fu_295_p1 = $signed(input_width);

assign sext_ln47_1_fu_605_p1 = $signed(tmp_1_reg_1134);

assign sext_ln53_1_fu_621_p1 = $signed(tmp_2_reg_1139);

assign sext_ln60_1_fu_627_p1 = $signed(tmp_3_reg_1144);

assign tmp10_fu_454_p0 = zext_ln103_1_cast_reg_863;

assign tmp10_fu_454_p1 = tmp10_fu_454_p10;

assign tmp10_fu_454_p10 = tmp_reg_955;

assign tmp10_fu_454_p2 = (tmp10_fu_454_p0 * tmp10_fu_454_p1);

assign tmp_fu_417_p2 = (zext_ln41_1_fu_407_p1 + phi_mul5_reg_241);

assign trunc_ln101_3_fu_737_p4 = {{mul_ln91_reg_1229[29:14]}};

assign trunc_ln1_fu_665_p4 = {{mul_ln72_reg_1189[29:14]}};

assign trunc_ln41_fu_362_p1 = out_d_0_reg_219[1:0];

assign trunc_ln7_fu_638_p4 = {{mul_ln47_reg_1179[29:14]}};

assign trunc_ln8_fu_690_p4 = {{mul_ln53_reg_1199[29:14]}};

assign trunc_ln92_3_fu_647_p4 = {{mul_ln41_1_reg_1174[29:14]}};

assign trunc_ln9_fu_699_p4 = {{mul_ln60_1_reg_1204[29:14]}};

assign trunc_ln_fu_656_p4 = {{mul_ln66_reg_1184[29:14]}};

assign xor_ln53_fu_381_p2 = (trunc_ln41_reg_903 ^ 2'd2);

assign zext_ln103_1_cast_fu_319_p1 = output_width;

assign zext_ln103_1_fu_299_p1 = input_height;

assign zext_ln103_2_fu_307_p1 = $unsigned(sext_ln41_2_fu_295_p1);

assign zext_ln103_3_fu_315_p1 = output_height;

assign zext_ln103_4_fu_311_p1 = $unsigned(sext_ln41_2_fu_295_p1);

assign zext_ln103_5_fu_765_p1 = add_ln103_reg_1015;

assign zext_ln103_fu_303_p1 = $unsigned(sext_ln41_2_fu_295_p1);

assign zext_ln41_1_fu_407_p1 = out_h_0_reg_253;

assign zext_ln41_2_fu_423_p1 = phi_mul_reg_264;

assign zext_ln41_3_fu_470_p1 = out_w_0_reg_276;

assign zext_ln41_4_fu_502_p1 = add_ln41_1_reg_1020;

assign zext_ln47_fu_506_p1 = add_ln47_3_reg_1025;

assign zext_ln53_fu_518_p1 = add_ln53_2_reg_1040;

assign zext_ln60_1_fu_435_p1 = mul_ln60_fu_430_p2;

assign zext_ln60_2_fu_522_p1 = add_ln60_2_reg_1045;

assign zext_ln66_fu_546_p1 = add_ln66_reg_1060;

assign zext_ln72_fu_550_p1 = add_ln72_reg_1065;

assign zext_ln79_1_fu_586_p1 = add_ln79_reg_1070;

assign zext_ln79_2_fu_447_p1 = mul_ln79_fu_442_p2;

assign zext_ln85_fu_590_p1 = add_ln85_reg_1075;

assign zext_ln91_fu_614_p1 = add_ln91_reg_1080;

always @ (posedge ap_clk) begin
    zext_ln103_1_reg_837[8:7] <= 2'b00;
    zext_ln103_reg_842[13:7] <= 7'b0000000;
    zext_ln103_2_reg_847[11:7] <= 5'b00000;
    zext_ln103_4_reg_853[9:7] <= 3'b000;
    zext_ln103_3_reg_858[8:6] <= 3'b000;
    zext_ln103_1_cast_reg_863[13:6] <= 8'b00000000;
    zext_ln41_2_reg_960[13:10] <= 4'b0000;
    zext_ln60_1_reg_967[13:12] <= 2'b00;
    zext_ln79_2_reg_974[13:12] <= 2'b00;
end

endmodule //depthwise_conv2d_fix_2
