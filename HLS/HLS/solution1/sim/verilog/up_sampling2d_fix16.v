// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module up_sampling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_pp0_stage1 = 6'd8;
parameter    ap_ST_fsm_pp0_stage2 = 6'd16;
parameter    ap_ST_fsm_state13 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] input_height;
input  [4:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_depth;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] indvar_flatten31_reg_114;
reg   [4:0] out_d_0_reg_126;
reg   [9:0] indvar_flatten_reg_138;
reg   [4:0] out_h_0_reg_149;
reg   [4:0] out_w_0_reg_161;
wire   [4:0] empty_fu_173_p1;
reg   [4:0] empty_reg_490;
wire   [9:0] mul_ln6_fu_189_p2;
reg   [9:0] mul_ln6_reg_496;
wire   [7:0] zext_ln21_fu_195_p1;
reg   [7:0] zext_ln21_reg_502;
wire    ap_CS_fsm_state2;
wire   [8:0] zext_ln21_1_fu_199_p1;
reg   [8:0] zext_ln21_1_reg_508;
wire   [13:0] zext_ln21_3_cast_fu_202_p1;
reg   [13:0] zext_ln21_3_cast_reg_514;
wire   [11:0] empty_11_fu_209_p1;
reg   [11:0] empty_11_reg_519;
wire   [14:0] mul_ln6_1_fu_460_p2;
reg   [14:0] mul_ln6_1_reg_524;
wire   [0:0] icmp_ln17_fu_220_p2;
reg   [0:0] icmp_ln17_reg_529;
wire   [7:0] mul_ln21_fu_229_p2;
reg   [7:0] mul_ln21_reg_534;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln14_fu_234_p2;
reg   [0:0] icmp_ln14_reg_540;
reg   [0:0] icmp_ln14_reg_540_pp0_iter1_reg;
reg   [0:0] icmp_ln14_reg_540_pp0_iter2_reg;
wire   [4:0] out_d_fu_239_p2;
reg   [4:0] out_d_reg_544;
wire   [0:0] icmp_ln15_fu_245_p2;
reg   [0:0] icmp_ln15_reg_551;
reg   [0:0] icmp_ln15_reg_551_pp0_iter1_reg;
wire   [9:0] add_ln15_1_fu_250_p2;
reg   [9:0] add_ln15_1_reg_564;
reg   [3:0] lshr_ln_reg_569;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln21_fu_266_p3;
reg   [4:0] select_ln21_reg_574;
wire   [7:0] mul_ln21_2_fu_279_p2;
reg   [7:0] mul_ln21_2_reg_580;
wire   [8:0] mul_ln21_3_fu_284_p2;
reg   [8:0] mul_ln21_3_reg_586;
reg   [8:0] mul_ln21_3_reg_586_pp0_iter1_reg;
wire   [0:0] icmp_ln17_1_fu_289_p2;
reg   [0:0] icmp_ln17_1_reg_592;
wire   [14:0] add_ln14_fu_294_p2;
reg   [14:0] add_ln14_reg_597;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] select_ln21_5_fu_300_p3;
reg   [0:0] select_ln21_5_reg_602;
wire   [4:0] select_ln14_fu_305_p3;
reg   [4:0] select_ln14_reg_610;
wire   [4:0] out_h_fu_311_p2;
reg   [4:0] out_h_reg_615;
wire   [9:0] select_ln15_1_fu_316_p3;
reg   [9:0] select_ln15_1_reg_622;
wire   [8:0] mul_ln21_1_fu_326_p2;
reg   [8:0] mul_ln21_1_reg_627;
wire   [7:0] tmp_fu_334_p2;
reg   [7:0] tmp_reg_633;
wire   [4:0] select_ln21_6_fu_348_p3;
reg   [4:0] select_ln21_6_reg_638;
wire   [7:0] tmp_mid1_fu_369_p2;
reg   [7:0] tmp_mid1_reg_644;
wire   [4:0] select_ln15_fu_375_p3;
reg   [4:0] select_ln15_reg_649;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] lshr_ln21_1_reg_654;
wire   [8:0] tmp2_fu_394_p2;
reg   [8:0] tmp2_reg_659;
wire   [7:0] select_ln21_7_fu_412_p3;
reg   [7:0] select_ln21_7_reg_664;
wire   [8:0] tmp2_mid1_fu_418_p2;
reg   [8:0] tmp2_mid1_reg_669;
wire   [4:0] out_w_fu_424_p2;
wire   [8:0] select_ln21_8_fu_437_p3;
reg   [8:0] select_ln21_8_reg_679;
wire   [11:0] grp_fu_466_p3;
reg   [11:0] add_ln21_reg_684;
wire   [13:0] grp_fu_473_p3;
reg   [13:0] add_ln21_1_reg_694;
reg    ap_enable_reg_pp0_iter2;
reg   [15:0] input_load_reg_699;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter1_state7;
reg    ap_enable_reg_pp0_iter3;
reg   [14:0] ap_phi_mux_indvar_flatten31_phi_fu_118_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_out_d_0_phi_fu_130_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_142_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_153_p4;
wire    ap_block_pp0_stage1;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_165_p4;
wire   [63:0] zext_ln21_6_fu_449_p1;
wire   [63:0] zext_ln21_8_fu_456_p1;
wire   [4:0] empty_9_fu_177_p1;
wire   [4:0] mul_ln6_fu_189_p0;
wire   [4:0] mul_ln6_fu_189_p1;
wire   [4:0] empty_10_fu_205_p1;
wire   [4:0] mul_ln21_fu_229_p0;
wire   [4:0] mul_ln21_fu_229_p1;
wire   [4:0] mul_ln21_2_fu_279_p0;
wire   [4:0] mul_ln21_2_fu_279_p1;
wire   [4:0] mul_ln21_3_fu_284_p0;
wire   [5:0] mul_ln21_3_fu_284_p1;
wire    ap_block_pp0_stage2;
wire   [4:0] mul_ln21_1_fu_326_p0;
wire   [5:0] mul_ln21_1_fu_326_p1;
wire   [7:0] zext_ln21_4_fu_331_p1;
wire   [0:0] or_ln21_fu_344_p2;
wire   [3:0] lshr_ln21_mid1_fu_356_p4;
wire   [7:0] select_ln21_1_fu_339_p3;
wire   [7:0] zext_ln21_11_fu_365_p1;
wire   [8:0] zext_ln21_6_cast_fu_390_p1;
wire   [7:0] select_ln21_3_fu_404_p3;
wire   [8:0] select_ln21_2_fu_399_p3;
wire   [8:0] zext_ln21_6_cast_mid_fu_409_p1;
wire   [8:0] select_ln21_4_fu_429_p3;
wire   [9:0] mul_ln6_1_fu_460_p0;
wire   [4:0] mul_ln6_1_fu_460_p1;
wire   [7:0] grp_fu_466_p0;
wire   [4:0] grp_fu_466_p1;
wire   [3:0] grp_fu_466_p2;
wire   [8:0] grp_fu_473_p0;
wire   [5:0] grp_fu_473_p1;
wire   [4:0] grp_fu_473_p2;
wire    ap_CS_fsm_state13;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_466_p00;
wire   [11:0] grp_fu_466_p20;
wire   [13:0] grp_fu_473_p00;
wire   [13:0] grp_fu_473_p20;
wire   [8:0] mul_ln21_1_fu_326_p00;
wire   [7:0] mul_ln21_2_fu_279_p00;
wire   [8:0] mul_ln21_3_fu_284_p00;
wire   [7:0] mul_ln21_fu_229_p00;
wire   [14:0] mul_ln6_1_fu_460_p00;
wire   [14:0] mul_ln6_1_fu_460_p10;
wire   [9:0] mul_ln6_fu_189_p00;
wire   [9:0] mul_ln6_fu_189_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

network_mul_mul_10ns_5ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
network_mul_mul_10ns_5ns_15_1_1_U112(
    .din0(mul_ln6_1_fu_460_p0),
    .din1(mul_ln6_1_fu_460_p1),
    .dout(mul_ln6_1_fu_460_p2)
);

network_mac_muladd_8ns_5ns_4ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
network_mac_muladd_8ns_5ns_4ns_12_1_1_U113(
    .din0(grp_fu_466_p0),
    .din1(grp_fu_466_p1),
    .din2(grp_fu_466_p2),
    .dout(grp_fu_466_p3)
);

network_mac_muladd_9ns_6ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_mac_muladd_9ns_6ns_5ns_14_1_1_U114(
    .din0(grp_fu_473_p0),
    .din1(grp_fu_473_p1),
    .din2(grp_fu_473_p2),
    .dout(grp_fu_473_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln14_reg_540 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state7)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten31_reg_114 <= add_ln14_reg_597;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten31_reg_114 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_138 <= select_ln15_1_reg_622;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_138 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_d_0_reg_126 <= select_ln14_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d_0_reg_126 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        out_h_0_reg_149 <= select_ln15_reg_649;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_0_reg_149 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        out_w_0_reg_161 <= out_w_fu_424_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_w_0_reg_161 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln14_reg_597 <= add_ln14_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_234_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln15_1_reg_564 <= add_ln15_1_fu_250_p2;
        icmp_ln15_reg_551 <= icmp_ln15_fu_245_p2;
        out_d_reg_544 <= out_d_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        add_ln21_1_reg_694 <= grp_fu_473_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        add_ln21_reg_684 <= grp_fu_466_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_11_reg_519[4 : 0] <= empty_11_fu_209_p1[4 : 0];
        icmp_ln17_reg_529 <= icmp_ln17_fu_220_p2;
        mul_ln6_1_reg_524 <= mul_ln6_1_fu_460_p2;
        zext_ln21_1_reg_508[5 : 0] <= zext_ln21_1_fu_199_p1[5 : 0];
        zext_ln21_3_cast_reg_514[5 : 0] <= zext_ln21_3_cast_fu_202_p1[5 : 0];
        zext_ln21_reg_502[4 : 0] <= zext_ln21_fu_195_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_490 <= empty_fu_173_p1;
        mul_ln6_reg_496 <= mul_ln6_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_540 <= icmp_ln14_fu_234_p2;
        icmp_ln14_reg_540_pp0_iter1_reg <= icmp_ln14_reg_540;
        icmp_ln14_reg_540_pp0_iter2_reg <= icmp_ln14_reg_540_pp0_iter1_reg;
        icmp_ln15_reg_551_pp0_iter1_reg <= icmp_ln15_reg_551;
        mul_ln21_1_reg_627 <= mul_ln21_1_fu_326_p2;
        mul_ln21_reg_534 <= mul_ln21_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln15_reg_551 == 1'd0))) begin
        icmp_ln17_1_reg_592 <= icmp_ln17_1_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln14_reg_540_pp0_iter2_reg == 1'd0))) begin
        input_load_reg_699 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln21_1_reg_654 <= {{select_ln21_6_fu_348_p3[4:1]}};
        select_ln21_6_reg_638 <= select_ln21_6_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln15_reg_551 == 1'd0))) begin
        lshr_ln_reg_569 <= {{ap_phi_mux_out_h_0_phi_fu_153_p4[4:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_ln21_2_reg_580 <= mul_ln21_2_fu_279_p2;
        mul_ln21_3_reg_586 <= mul_ln21_3_fu_284_p2;
        select_ln21_reg_574 <= select_ln21_fu_266_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_ln21_3_reg_586_pp0_iter1_reg <= mul_ln21_3_reg_586;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        out_h_reg_615 <= out_h_fu_311_p2;
        select_ln21_5_reg_602 <= select_ln21_5_fu_300_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln14_reg_610 <= select_ln14_fu_305_p3;
        select_ln15_1_reg_622 <= select_ln15_1_fu_316_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln15_reg_649 <= select_ln15_fu_375_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        select_ln21_7_reg_664 <= select_ln21_7_fu_412_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        select_ln21_8_reg_679 <= select_ln21_8_fu_437_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (select_ln21_5_reg_602 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        tmp2_mid1_reg_669 <= tmp2_mid1_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (select_ln21_5_reg_602 == 1'd0) & (icmp_ln15_reg_551_pp0_iter1_reg == 1'd0))) begin
        tmp2_reg_659 <= tmp2_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln21_5_reg_602 == 1'd1))) begin
        tmp_mid1_reg_644 <= tmp_mid1_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln21_5_reg_602 == 1'd0) & (icmp_ln15_reg_551 == 1'd0))) begin
        tmp_reg_633 <= tmp_fu_334_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten31_phi_fu_118_p4 = add_ln14_reg_597;
    end else begin
        ap_phi_mux_indvar_flatten31_phi_fu_118_p4 = indvar_flatten31_reg_114;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_142_p4 = select_ln15_1_reg_622;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_142_p4 = indvar_flatten_reg_138;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_540 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_out_d_0_phi_fu_130_p4 = select_ln14_reg_610;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_130_p4 = out_d_0_reg_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_out_h_0_phi_fu_153_p4 = select_ln15_reg_649;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_153_p4 = out_h_0_reg_149;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_reg_540_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_out_w_0_phi_fu_165_p4 = out_w_fu_424_p2;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_165_p4 = out_w_0_reg_161;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln14_reg_540_pp0_iter2_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_294_p2 = (indvar_flatten31_reg_114 + 15'd1);

assign add_ln15_1_fu_250_p2 = (ap_phi_mux_indvar_flatten_phi_fu_142_p4 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_10_fu_205_p1 = output_depth[4:0];

assign empty_11_fu_209_p1 = input_width;

assign empty_9_fu_177_p1 = output_height[4:0];

assign empty_fu_173_p1 = output_width[4:0];

assign grp_fu_466_p0 = grp_fu_466_p00;

assign grp_fu_466_p00 = select_ln21_7_reg_664;

assign grp_fu_466_p1 = empty_11_reg_519;

assign grp_fu_466_p2 = grp_fu_466_p20;

assign grp_fu_466_p20 = lshr_ln21_1_reg_654;

assign grp_fu_473_p0 = grp_fu_473_p00;

assign grp_fu_473_p00 = select_ln21_8_reg_679;

assign grp_fu_473_p1 = zext_ln21_3_cast_reg_514;

assign grp_fu_473_p2 = grp_fu_473_p20;

assign grp_fu_473_p20 = select_ln21_6_reg_638;

assign icmp_ln14_fu_234_p2 = ((ap_phi_mux_indvar_flatten31_phi_fu_118_p4 == mul_ln6_1_reg_524) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_245_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_142_p4 == mul_ln6_reg_496) ? 1'b1 : 1'b0);

assign icmp_ln17_1_fu_289_p2 = ((ap_phi_mux_out_w_0_phi_fu_165_p4 == empty_reg_490) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_220_p2 = ((empty_reg_490 == 5'd0) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln21_6_fu_449_p1;

assign lshr_ln21_mid1_fu_356_p4 = {{out_h_reg_615[4:1]}};

assign mul_ln21_1_fu_326_p0 = mul_ln21_1_fu_326_p00;

assign mul_ln21_1_fu_326_p00 = out_d_0_reg_126;

assign mul_ln21_1_fu_326_p1 = zext_ln21_1_reg_508;

assign mul_ln21_1_fu_326_p2 = (mul_ln21_1_fu_326_p0 * mul_ln21_1_fu_326_p1);

assign mul_ln21_2_fu_279_p0 = mul_ln21_2_fu_279_p00;

assign mul_ln21_2_fu_279_p00 = out_d_reg_544;

assign mul_ln21_2_fu_279_p1 = zext_ln21_reg_502;

assign mul_ln21_2_fu_279_p2 = (mul_ln21_2_fu_279_p0 * mul_ln21_2_fu_279_p1);

assign mul_ln21_3_fu_284_p0 = mul_ln21_3_fu_284_p00;

assign mul_ln21_3_fu_284_p00 = out_d_reg_544;

assign mul_ln21_3_fu_284_p1 = zext_ln21_1_reg_508;

assign mul_ln21_3_fu_284_p2 = (mul_ln21_3_fu_284_p0 * mul_ln21_3_fu_284_p1);

assign mul_ln21_fu_229_p0 = mul_ln21_fu_229_p00;

assign mul_ln21_fu_229_p00 = ap_phi_mux_out_d_0_phi_fu_130_p4;

assign mul_ln21_fu_229_p1 = zext_ln21_reg_502;

assign mul_ln21_fu_229_p2 = (mul_ln21_fu_229_p0 * mul_ln21_fu_229_p1);

assign mul_ln6_1_fu_460_p0 = mul_ln6_1_fu_460_p00;

assign mul_ln6_1_fu_460_p00 = mul_ln6_reg_496;

assign mul_ln6_1_fu_460_p1 = mul_ln6_1_fu_460_p10;

assign mul_ln6_1_fu_460_p10 = empty_10_fu_205_p1;

assign mul_ln6_fu_189_p0 = mul_ln6_fu_189_p00;

assign mul_ln6_fu_189_p00 = empty_fu_173_p1;

assign mul_ln6_fu_189_p1 = mul_ln6_fu_189_p10;

assign mul_ln6_fu_189_p10 = empty_9_fu_177_p1;

assign mul_ln6_fu_189_p2 = (mul_ln6_fu_189_p0 * mul_ln6_fu_189_p1);

assign or_ln21_fu_344_p2 = (select_ln21_5_reg_602 | icmp_ln15_reg_551);

assign out_d_fu_239_p2 = (ap_phi_mux_out_d_0_phi_fu_130_p4 + 5'd1);

assign out_h_fu_311_p2 = (select_ln21_reg_574 + 5'd1);

assign out_w_fu_424_p2 = (select_ln21_6_reg_638 + 5'd1);

assign output_r_address0 = zext_ln21_8_fu_456_p1;

assign output_r_d0 = input_load_reg_699;

assign select_ln14_fu_305_p3 = ((icmp_ln15_reg_551[0:0] === 1'b1) ? out_d_reg_544 : out_d_0_reg_126);

assign select_ln15_1_fu_316_p3 = ((icmp_ln15_reg_551[0:0] === 1'b1) ? 10'd1 : add_ln15_1_reg_564);

assign select_ln15_fu_375_p3 = ((select_ln21_5_reg_602[0:0] === 1'b1) ? out_h_reg_615 : select_ln21_reg_574);

assign select_ln21_1_fu_339_p3 = ((icmp_ln15_reg_551[0:0] === 1'b1) ? mul_ln21_2_reg_580 : mul_ln21_reg_534);

assign select_ln21_2_fu_399_p3 = ((icmp_ln15_reg_551_pp0_iter1_reg[0:0] === 1'b1) ? mul_ln21_3_reg_586 : mul_ln21_1_reg_627);

assign select_ln21_3_fu_404_p3 = ((icmp_ln15_reg_551_pp0_iter1_reg[0:0] === 1'b1) ? mul_ln21_2_reg_580 : tmp_reg_633);

assign select_ln21_4_fu_429_p3 = ((icmp_ln15_reg_551_pp0_iter1_reg[0:0] === 1'b1) ? mul_ln21_3_reg_586_pp0_iter1_reg : tmp2_reg_659);

assign select_ln21_5_fu_300_p3 = ((icmp_ln15_reg_551[0:0] === 1'b1) ? icmp_ln17_reg_529 : icmp_ln17_1_reg_592);

assign select_ln21_6_fu_348_p3 = ((or_ln21_fu_344_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_161);

assign select_ln21_7_fu_412_p3 = ((select_ln21_5_reg_602[0:0] === 1'b1) ? tmp_mid1_reg_644 : select_ln21_3_fu_404_p3);

assign select_ln21_8_fu_437_p3 = ((select_ln21_5_reg_602[0:0] === 1'b1) ? tmp2_mid1_reg_669 : select_ln21_4_fu_429_p3);

assign select_ln21_fu_266_p3 = ((icmp_ln15_reg_551[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_h_0_phi_fu_153_p4);

assign tmp2_fu_394_p2 = (mul_ln21_1_reg_627 + zext_ln21_6_cast_fu_390_p1);

assign tmp2_mid1_fu_418_p2 = (select_ln21_2_fu_399_p3 + zext_ln21_6_cast_mid_fu_409_p1);

assign tmp_fu_334_p2 = (mul_ln21_reg_534 + zext_ln21_4_fu_331_p1);

assign tmp_mid1_fu_369_p2 = (select_ln21_1_fu_339_p3 + zext_ln21_11_fu_365_p1);

assign zext_ln21_11_fu_365_p1 = lshr_ln21_mid1_fu_356_p4;

assign zext_ln21_1_fu_199_p1 = output_height;

assign zext_ln21_3_cast_fu_202_p1 = output_width;

assign zext_ln21_4_fu_331_p1 = lshr_ln_reg_569;

assign zext_ln21_6_cast_fu_390_p1 = out_h_0_reg_149;

assign zext_ln21_6_cast_mid_fu_409_p1 = out_h_reg_615;

assign zext_ln21_6_fu_449_p1 = add_ln21_reg_684;

assign zext_ln21_8_fu_456_p1 = add_ln21_1_reg_694;

assign zext_ln21_fu_195_p1 = input_height;

always @ (posedge ap_clk) begin
    zext_ln21_reg_502[7:5] <= 3'b000;
    zext_ln21_1_reg_508[8:6] <= 3'b000;
    zext_ln21_3_cast_reg_514[13:6] <= 8'b00000000;
    empty_11_reg_519[11:5] <= 7'b0000000;
end

endmodule //up_sampling2d_fix16
