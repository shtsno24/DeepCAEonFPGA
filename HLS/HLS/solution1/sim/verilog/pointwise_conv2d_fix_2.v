// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] indvar_flatten18_reg_369;
reg   [2:0] out_h_0_reg_380;
reg   [6:0] indvar_flatten_reg_391;
reg   [2:0] out_w_0_reg_402;
reg   [21:0] buffer_0_reg_413;
reg   [3:0] in_d_0_reg_423;
wire   [9:0] zext_ln24_fu_434_p1;
reg   [9:0] zext_ln24_reg_1219;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln24_fu_438_p2;
reg   [8:0] add_ln24_reg_1224;
wire   [0:0] icmp_ln24_fu_444_p2;
wire   [3:0] out_d_fu_450_p2;
reg   [3:0] out_d_reg_1233;
wire  signed [21:0] sext_ln34_fu_482_p1;
reg  signed [21:0] sext_ln34_reg_1238;
wire   [5:0] shl_ln_fu_486_p3;
reg   [5:0] shl_ln_reg_1245;
wire   [3:0] i_fu_500_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln31_fu_760_p2;
reg   [0:0] icmp_ln31_reg_1258;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
wire    ap_block_state9_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln31_reg_1258_pp1_iter1_reg;
reg   [0:0] icmp_ln31_reg_1258_pp1_iter2_reg;
reg   [0:0] icmp_ln31_reg_1258_pp1_iter3_reg;
wire   [8:0] add_ln31_fu_766_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln33_fu_778_p2;
reg   [0:0] icmp_ln33_reg_1267;
reg   [0:0] icmp_ln33_reg_1267_pp1_iter1_reg;
reg   [0:0] icmp_ln33_reg_1267_pp1_iter2_reg;
reg   [0:0] icmp_ln33_reg_1267_pp1_iter3_reg;
wire   [6:0] select_ln32_7_fu_814_p3;
reg   [6:0] select_ln32_7_reg_1272;
wire   [0:0] and_ln32_fu_842_p2;
reg   [0:0] and_ln32_reg_1277;
reg   [0:0] and_ln32_reg_1277_pp1_iter1_reg;
reg   [0:0] and_ln32_reg_1277_pp1_iter2_reg;
reg   [0:0] and_ln32_reg_1277_pp1_iter3_reg;
wire   [2:0] select_ln31_fu_848_p3;
wire   [3:0] select_ln36_7_fu_868_p3;
reg   [3:0] select_ln36_7_reg_1287;
reg   [3:0] select_ln36_7_reg_1287_pp1_iter1_reg;
wire   [2:0] select_ln36_8_fu_880_p3;
reg   [2:0] select_ln36_8_reg_1293;
wire   [6:0] select_ln36_9_fu_894_p3;
reg  signed [6:0] select_ln36_9_reg_1299;
wire   [3:0] in_d_fu_902_p2;
reg   [3:0] in_d_reg_1304;
wire   [6:0] select_ln33_fu_914_p3;
wire   [0:0] icmp_ln36_3_fu_939_p2;
reg   [0:0] icmp_ln36_3_reg_1320;
reg   [0:0] icmp_ln36_3_reg_1320_pp1_iter2_reg;
reg   [0:0] icmp_ln36_3_reg_1320_pp1_iter3_reg;
wire   [6:0] add_ln47_fu_944_p2;
reg   [6:0] add_ln47_reg_1324;
reg   [6:0] add_ln47_reg_1324_pp1_iter2_reg;
reg   [6:0] add_ln47_reg_1324_pp1_iter3_reg;
reg   [15:0] input_load_reg_1329;
wire  signed [31:0] tmp_fu_994_p18;
reg  signed [31:0] tmp_reg_1334;
wire   [31:0] mul_ln39_fu_1034_p2;
reg   [31:0] mul_ln39_reg_1339;
wire   [21:0] buffer_fu_1064_p2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [3:0] out_d_0_reg_336;
wire    ap_CS_fsm_state10;
reg   [8:0] phi_mul_reg_347;
wire   [3:0] ap_phi_mux_i_0_phi_fu_362_p4;
reg   [3:0] i_0_reg_358;
wire   [0:0] icmp_ln26_fu_494_p2;
reg   [2:0] ap_phi_mux_out_w_0_phi_fu_406_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_in_d_0_phi_fu_427_p4;
wire   [63:0] zext_ln39_5_fu_934_p1;
wire   [63:0] zext_ln47_fu_1115_p1;
reg   [31:0] kernel_buffer_15_fu_250;
wire  signed [31:0] kernel_buffer_0_fu_649_p1;
reg   [31:0] kernel_buffer_15_31_fu_254;
reg   [31:0] kernel_buffer_15_32_fu_258;
reg   [31:0] kernel_buffer_15_33_fu_262;
reg   [31:0] kernel_buffer_15_34_fu_266;
reg   [31:0] kernel_buffer_15_35_fu_270;
reg   [31:0] kernel_buffer_15_36_fu_274;
reg   [31:0] kernel_buffer_15_37_fu_278;
reg   [31:0] kernel_buffer_15_38_fu_282;
reg   [31:0] kernel_buffer_15_39_fu_286;
reg   [31:0] kernel_buffer_15_40_fu_290;
reg   [31:0] kernel_buffer_15_41_fu_294;
reg   [31:0] kernel_buffer_15_42_fu_298;
reg   [31:0] kernel_buffer_15_43_fu_302;
reg   [31:0] kernel_buffer_15_016_fu_306;
wire   [2:0] trunc_ln25_fu_456_p1;
wire   [15:0] tmp_6_fu_460_p10;
wire   [5:0] zext_ln28_fu_506_p1;
wire   [5:0] merge_i_fu_515_p65;
wire   [15:0] merge_i_fu_515_p66;
wire   [5:0] shl_ln2_fu_732_p3;
wire   [6:0] zext_ln39_11_fu_740_p1;
wire   [6:0] zext_ln39_fu_728_p1;
wire   [6:0] sub_ln39_fu_744_p2;
wire   [6:0] zext_ln36_fu_750_p1;
wire   [2:0] out_h_fu_772_p2;
wire   [5:0] shl_ln39_mid1_fu_796_p3;
wire   [6:0] zext_ln39_14_fu_804_p1;
wire   [6:0] zext_ln39_13_fu_792_p1;
wire   [6:0] sub_ln39_3_fu_808_p2;
wire   [6:0] add_ln39_fu_754_p2;
wire   [0:0] icmp_ln36_fu_836_p2;
wire   [0:0] xor_ln32_fu_830_p2;
wire   [2:0] select_ln32_fu_784_p3;
wire   [0:0] or_ln36_fu_862_p2;
wire   [2:0] out_w_fu_856_p2;
wire   [6:0] zext_ln36_3_fu_876_p1;
wire   [6:0] add_ln39_6_fu_888_p2;
wire   [6:0] select_ln32_8_fu_822_p3;
wire   [6:0] add_ln33_fu_908_p2;
wire  signed [9:0] grp_fu_1120_p3;
wire  signed [31:0] sext_ln39_fu_931_p1;
wire   [6:0] zext_ln36_4_fu_922_p1;
wire  signed [15:0] mul_ln39_fu_1034_p1;
wire   [21:0] select_ln32_6_fu_1039_p3;
wire   [17:0] trunc_ln5_fu_1051_p4;
wire  signed [21:0] sext_ln39_4_fu_1060_p1;
wire   [21:0] select_ln36_fu_1045_p3;
wire   [0:0] tmp_5_fu_1070_p3;
wire   [0:0] xor_ln46_fu_1082_p2;
wire   [15:0] select_ln46_fu_1088_p3;
wire   [15:0] trunc_ln46_fu_1078_p1;
wire  signed [9:0] sext_ln47_fu_1103_p1;
wire   [9:0] add_ln47_1_fu_1106_p2;
wire  signed [31:0] sext_ln47_2_fu_1111_p1;
wire   [3:0] grp_fu_1120_p0;
wire   [6:0] grp_fu_1120_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [9:0] grp_fu_1120_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

network_mux_83_16_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
network_mux_83_16_1_1_x_U83(
    .din0(16'd414),
    .din1(16'd4),
    .din2(16'd42),
    .din3(16'd62377),
    .din4(16'd11),
    .din5(16'd159),
    .din6(16'd2276),
    .din7(16'd64059),
    .din8(trunc_ln25_fu_456_p1),
    .dout(tmp_6_fu_460_p10)
);

network_mux_646_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 16 ))
network_mux_646_16_1_1_U84(
    .din0(16'd10898),
    .din1(16'd6361),
    .din2(16'd62016),
    .din3(16'd3573),
    .din4(16'd57771),
    .din5(16'd65383),
    .din6(16'd10043),
    .din7(16'd6976),
    .din8(16'd573),
    .din9(16'd58348),
    .din10(16'd6348),
    .din11(16'd56160),
    .din12(16'd56346),
    .din13(16'd60123),
    .din14(16'd64660),
    .din15(16'd65496),
    .din16(16'd57212),
    .din17(16'd2097),
    .din18(16'd56049),
    .din19(16'd58901),
    .din20(16'd607),
    .din21(16'd57455),
    .din22(16'd7867),
    .din23(16'd60070),
    .din24(16'd11547),
    .din25(16'd8413),
    .din26(16'd63801),
    .din27(16'd8485),
    .din28(16'd2665),
    .din29(16'd3423),
    .din30(16'd64622),
    .din31(16'd4560),
    .din32(16'd59488),
    .din33(16'd7028),
    .din34(16'd59718),
    .din35(16'd9405),
    .din36(16'd6586),
    .din37(16'd4944),
    .din38(16'd7540),
    .din39(16'd8629),
    .din40(16'd6564),
    .din41(16'd54916),
    .din42(16'd63753),
    .din43(16'd5899),
    .din44(16'd57260),
    .din45(16'd12149),
    .din46(16'd2883),
    .din47(16'd60808),
    .din48(16'd9628),
    .din49(16'd8093),
    .din50(16'd733),
    .din51(16'd9047),
    .din52(16'd61262),
    .din53(16'd64311),
    .din54(16'd58905),
    .din55(16'd61810),
    .din56(16'd1720),
    .din57(16'd2151),
    .din58(16'd63606),
    .din59(16'd5081),
    .din60(16'd65127),
    .din61(16'd59644),
    .din62(16'd61499),
    .din63(16'd1956),
    .din64(merge_i_fu_515_p65),
    .dout(merge_i_fu_515_p66)
);

network_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
network_mux_164_32_1_1_U85(
    .din0(kernel_buffer_15_fu_250),
    .din1(kernel_buffer_15_31_fu_254),
    .din2(kernel_buffer_15_32_fu_258),
    .din3(kernel_buffer_15_33_fu_262),
    .din4(kernel_buffer_15_34_fu_266),
    .din5(kernel_buffer_15_35_fu_270),
    .din6(kernel_buffer_15_36_fu_274),
    .din7(kernel_buffer_15_37_fu_278),
    .din8(32'd0),
    .din9(kernel_buffer_15_38_fu_282),
    .din10(kernel_buffer_15_39_fu_286),
    .din11(kernel_buffer_15_40_fu_290),
    .din12(kernel_buffer_15_41_fu_294),
    .din13(kernel_buffer_15_42_fu_298),
    .din14(kernel_buffer_15_43_fu_302),
    .din15(kernel_buffer_15_016_fu_306),
    .din16(select_ln36_7_reg_1287_pp1_iter1_reg),
    .dout(tmp_fu_994_p18)
);

network_mac_muladd_4ns_7ns_7s_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 10 ))
network_mac_muladd_4ns_7ns_7s_10_1_1_U86(
    .din0(grp_fu_1120_p0),
    .din1(grp_fu_1120_p1),
    .din2(select_ln36_9_reg_1299),
    .dout(grp_fu_1120_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_0_reg_413 <= sext_ln34_reg_1238;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1258_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        buffer_0_reg_413 <= buffer_fu_1064_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_358 <= i_fu_500_p2;
    end else if (((icmp_ln24_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_358 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_d_0_reg_423 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1258 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        in_d_0_reg_423 <= in_d_reg_1304;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten18_reg_369 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_760_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten18_reg_369 <= add_ln31_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_391 <= 7'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_760_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten_reg_391 <= select_ln33_fu_914_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_d_0_reg_336 <= out_d_reg_1233;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_336 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_0_reg_380 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_760_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        out_h_0_reg_380 <= select_ln31_fu_848_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_0_reg_402 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1258 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        out_w_0_reg_402 <= select_ln36_8_reg_1293;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        phi_mul_reg_347 <= add_ln24_reg_1224;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_347 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln24_reg_1224 <= add_ln24_fu_438_p2;
        out_d_reg_1233 <= out_d_fu_450_p2;
        zext_ln24_reg_1219[8 : 0] <= zext_ln24_fu_434_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln36_3_fu_939_p2 == 1'd1))) begin
        add_ln47_reg_1324 <= add_ln47_fu_944_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln47_reg_1324_pp1_iter2_reg <= add_ln47_reg_1324;
        add_ln47_reg_1324_pp1_iter3_reg <= add_ln47_reg_1324_pp1_iter2_reg;
        and_ln32_reg_1277_pp1_iter2_reg <= and_ln32_reg_1277_pp1_iter1_reg;
        and_ln32_reg_1277_pp1_iter3_reg <= and_ln32_reg_1277_pp1_iter2_reg;
        icmp_ln31_reg_1258_pp1_iter2_reg <= icmp_ln31_reg_1258_pp1_iter1_reg;
        icmp_ln31_reg_1258_pp1_iter3_reg <= icmp_ln31_reg_1258_pp1_iter2_reg;
        icmp_ln33_reg_1267_pp1_iter2_reg <= icmp_ln33_reg_1267_pp1_iter1_reg;
        icmp_ln33_reg_1267_pp1_iter3_reg <= icmp_ln33_reg_1267_pp1_iter2_reg;
        icmp_ln36_3_reg_1320_pp1_iter2_reg <= icmp_ln36_3_reg_1320;
        icmp_ln36_3_reg_1320_pp1_iter3_reg <= icmp_ln36_3_reg_1320_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_760_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln32_reg_1277 <= and_ln32_fu_842_p2;
        icmp_ln33_reg_1267 <= icmp_ln33_fu_778_p2;
        select_ln32_7_reg_1272 <= select_ln32_7_fu_814_p3;
        select_ln36_7_reg_1287 <= select_ln36_7_fu_868_p3;
        select_ln36_9_reg_1299 <= select_ln36_9_fu_894_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln32_reg_1277_pp1_iter1_reg <= and_ln32_reg_1277;
        icmp_ln31_reg_1258 <= icmp_ln31_fu_760_p2;
        icmp_ln31_reg_1258_pp1_iter1_reg <= icmp_ln31_reg_1258;
        icmp_ln33_reg_1267_pp1_iter1_reg <= icmp_ln33_reg_1267;
        select_ln36_7_reg_1287_pp1_iter1_reg <= select_ln36_7_reg_1287;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1258 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln36_3_reg_1320 <= icmp_ln36_3_fu_939_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_760_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        in_d_reg_1304 <= in_d_fu_902_p2;
        select_ln36_8_reg_1293 <= select_ln36_8_fu_880_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1258_pp1_iter1_reg == 1'd0))) begin
        input_load_reg_1329 <= input_r_q0;
        tmp_reg_1334 <= tmp_fu_994_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd8)) | ((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd15))))) begin
        kernel_buffer_15_016_fu_306 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_31_fu_254 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_32_fu_258 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_33_fu_262 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd4) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_34_fu_266 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd5) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_35_fu_270 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd6) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_36_fu_274 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd7) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_37_fu_278 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd9) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_38_fu_282 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd10) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_39_fu_286 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd11) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_40_fu_290 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd12) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_41_fu_294 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd13) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_42_fu_298 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd14) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_43_fu_302 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_i_0_phi_fu_362_p4 == 4'd0))) begin
        kernel_buffer_15_fu_250 <= kernel_buffer_0_fu_649_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1258_pp1_iter2_reg == 1'd0))) begin
        mul_ln39_reg_1339 <= mul_ln39_fu_1034_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln34_reg_1238 <= sext_ln34_fu_482_p1;
        shl_ln_reg_1245[5 : 3] <= shl_ln_fu_486_p3[5 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_760_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln24_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1258 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_in_d_0_phi_fu_427_p4 = in_d_reg_1304;
    end else begin
        ap_phi_mux_in_d_0_phi_fu_427_p4 = in_d_0_reg_423;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1258 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_out_w_0_phi_fu_406_p4 = select_ln36_8_reg_1293;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_406_p4 = out_w_0_reg_402;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln36_3_reg_1320_pp1_iter3_reg == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln24_fu_444_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln26_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln31_fu_760_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln31_fu_760_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_438_p2 = (phi_mul_reg_347 + 9'd49);

assign add_ln31_fu_766_p2 = (indvar_flatten18_reg_369 + 9'd1);

assign add_ln33_fu_908_p2 = (indvar_flatten_reg_391 + 7'd1);

assign add_ln39_6_fu_888_p2 = (select_ln32_7_fu_814_p3 + zext_ln36_3_fu_876_p1);

assign add_ln39_fu_754_p2 = (sub_ln39_fu_744_p2 + zext_ln36_fu_750_p1);

assign add_ln47_1_fu_1106_p2 = ($signed(zext_ln24_reg_1219) + $signed(sext_ln47_fu_1103_p1));

assign add_ln47_fu_944_p2 = (zext_ln36_4_fu_922_p1 + select_ln32_7_reg_1272);

assign and_ln32_fu_842_p2 = (xor_ln32_fu_830_p2 & icmp_ln36_fu_836_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_i_0_phi_fu_362_p4 = i_0_reg_358;

assign buffer_fu_1064_p2 = ($signed(sext_ln39_4_fu_1060_p1) + $signed(select_ln36_fu_1045_p3));

assign grp_fu_1120_p0 = grp_fu_1120_p00;

assign grp_fu_1120_p00 = select_ln36_7_reg_1287;

assign grp_fu_1120_p1 = 10'd49;

assign i_fu_500_p2 = (i_0_reg_358 + 4'd1);

assign icmp_ln24_fu_444_p2 = ((out_d_0_reg_336 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_494_p2 = ((i_0_reg_358 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_760_p2 = ((indvar_flatten18_reg_369 == 9'd392) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_778_p2 = ((indvar_flatten_reg_391 == 7'd56) ? 1'b1 : 1'b0);

assign icmp_ln36_3_fu_939_p2 = ((in_d_reg_1304 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_836_p2 = ((ap_phi_mux_in_d_0_phi_fu_427_p4 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_902_p2 = (select_ln36_7_fu_868_p3 + 4'd1);

assign input_r_address0 = zext_ln39_5_fu_934_p1;

assign kernel_buffer_0_fu_649_p1 = $signed(merge_i_fu_515_p66);

assign merge_i_fu_515_p65 = (shl_ln_reg_1245 + zext_ln28_fu_506_p1);

assign mul_ln39_fu_1034_p1 = input_load_reg_1329;

assign mul_ln39_fu_1034_p2 = ($signed(tmp_reg_1334) * $signed(mul_ln39_fu_1034_p1));

assign or_ln36_fu_862_p2 = (icmp_ln33_fu_778_p2 | and_ln32_fu_842_p2);

assign out_d_fu_450_p2 = (out_d_0_reg_336 + 4'd1);

assign out_h_fu_772_p2 = (out_h_0_reg_380 + 3'd1);

assign out_w_fu_856_p2 = (select_ln32_fu_784_p3 + 3'd1);

assign output_r_address0 = zext_ln47_fu_1115_p1;

assign output_r_d0 = (trunc_ln46_fu_1078_p1 & select_ln46_fu_1088_p3);

assign select_ln31_fu_848_p3 = ((icmp_ln33_fu_778_p2[0:0] === 1'b1) ? out_h_fu_772_p2 : out_h_0_reg_380);

assign select_ln32_6_fu_1039_p3 = ((icmp_ln33_reg_1267_pp1_iter3_reg[0:0] === 1'b1) ? sext_ln34_reg_1238 : buffer_0_reg_413);

assign select_ln32_7_fu_814_p3 = ((icmp_ln33_fu_778_p2[0:0] === 1'b1) ? sub_ln39_3_fu_808_p2 : sub_ln39_fu_744_p2);

assign select_ln32_8_fu_822_p3 = ((icmp_ln33_fu_778_p2[0:0] === 1'b1) ? sub_ln39_3_fu_808_p2 : add_ln39_fu_754_p2);

assign select_ln32_fu_784_p3 = ((icmp_ln33_fu_778_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_out_w_0_phi_fu_406_p4);

assign select_ln33_fu_914_p3 = ((icmp_ln33_fu_778_p2[0:0] === 1'b1) ? 7'd1 : add_ln33_fu_908_p2);

assign select_ln36_7_fu_868_p3 = ((or_ln36_fu_862_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_in_d_0_phi_fu_427_p4);

assign select_ln36_8_fu_880_p3 = ((and_ln32_fu_842_p2[0:0] === 1'b1) ? out_w_fu_856_p2 : select_ln32_fu_784_p3);

assign select_ln36_9_fu_894_p3 = ((and_ln32_fu_842_p2[0:0] === 1'b1) ? add_ln39_6_fu_888_p2 : select_ln32_8_fu_822_p3);

assign select_ln36_fu_1045_p3 = ((and_ln32_reg_1277_pp1_iter3_reg[0:0] === 1'b1) ? sext_ln34_reg_1238 : select_ln32_6_fu_1039_p3);

assign select_ln46_fu_1088_p3 = ((xor_ln46_fu_1082_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln34_fu_482_p1 = $signed(tmp_6_fu_460_p10);

assign sext_ln39_4_fu_1060_p1 = $signed(trunc_ln5_fu_1051_p4);

assign sext_ln39_fu_931_p1 = grp_fu_1120_p3;

assign sext_ln47_2_fu_1111_p1 = $signed(add_ln47_1_fu_1106_p2);

assign sext_ln47_fu_1103_p1 = $signed(add_ln47_reg_1324_pp1_iter3_reg);

assign shl_ln2_fu_732_p3 = {{out_h_0_reg_380}, {3'd0}};

assign shl_ln39_mid1_fu_796_p3 = {{out_h_fu_772_p2}, {3'd0}};

assign shl_ln_fu_486_p3 = {{trunc_ln25_fu_456_p1}, {3'd0}};

assign sub_ln39_3_fu_808_p2 = (zext_ln39_14_fu_804_p1 - zext_ln39_13_fu_792_p1);

assign sub_ln39_fu_744_p2 = (zext_ln39_11_fu_740_p1 - zext_ln39_fu_728_p1);

assign tmp_5_fu_1070_p3 = buffer_fu_1064_p2[32'd21];

assign trunc_ln25_fu_456_p1 = out_d_0_reg_336[2:0];

assign trunc_ln46_fu_1078_p1 = buffer_fu_1064_p2[15:0];

assign trunc_ln5_fu_1051_p4 = {{mul_ln39_reg_1339[31:14]}};

assign xor_ln32_fu_830_p2 = (icmp_ln33_fu_778_p2 ^ 1'd1);

assign xor_ln46_fu_1082_p2 = (tmp_5_fu_1070_p3 ^ 1'd1);

assign zext_ln24_fu_434_p1 = phi_mul_reg_347;

assign zext_ln28_fu_506_p1 = i_0_reg_358;

assign zext_ln36_3_fu_876_p1 = out_w_fu_856_p2;

assign zext_ln36_4_fu_922_p1 = select_ln36_8_reg_1293;

assign zext_ln36_fu_750_p1 = ap_phi_mux_out_w_0_phi_fu_406_p4;

assign zext_ln39_11_fu_740_p1 = shl_ln2_fu_732_p3;

assign zext_ln39_13_fu_792_p1 = out_h_fu_772_p2;

assign zext_ln39_14_fu_804_p1 = shl_ln39_mid1_fu_796_p3;

assign zext_ln39_5_fu_934_p1 = $unsigned(sext_ln39_fu_931_p1);

assign zext_ln39_fu_728_p1 = out_h_0_reg_380;

assign zext_ln47_fu_1115_p1 = $unsigned(sext_ln47_2_fu_1111_p1);

always @ (posedge ap_clk) begin
    zext_ln24_reg_1219[9] <= 1'b0;
    shl_ln_reg_1245[2:0] <= 3'b000;
end

endmodule //pointwise_conv2d_fix_2
