// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten18_reg_521;
reg   [3:0] out_h_0_reg_532;
reg   [7:0] indvar_flatten_reg_543;
reg   [3:0] out_w_0_reg_554;
reg   [21:0] buffer_0_reg_565;
reg   [3:0] in_d_0_reg_575;
wire   [12:0] zext_ln24_fu_586_p1;
reg   [12:0] zext_ln24_reg_1531;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln24_fu_590_p2;
reg   [11:0] add_ln24_reg_1536;
wire   [0:0] icmp_ln24_fu_596_p2;
wire   [4:0] out_d_fu_602_p2;
reg   [4:0] out_d_reg_1545;
wire  signed [21:0] sext_ln34_fu_650_p1;
reg  signed [21:0] sext_ln34_reg_1550;
wire   [6:0] shl_ln_fu_654_p3;
reg   [6:0] shl_ln_reg_1557;
wire   [3:0] i_fu_668_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln31_fu_1064_p2;
reg   [0:0] icmp_ln31_reg_1570;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_state7_pp1_stage0_iter2;
wire    ap_block_state8_pp1_stage0_iter3;
wire    ap_block_state9_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln31_reg_1570_pp1_iter1_reg;
reg   [0:0] icmp_ln31_reg_1570_pp1_iter2_reg;
reg   [0:0] icmp_ln31_reg_1570_pp1_iter3_reg;
wire   [10:0] add_ln31_fu_1070_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln33_fu_1082_p2;
reg   [0:0] icmp_ln33_reg_1579;
reg   [0:0] icmp_ln33_reg_1579_pp1_iter1_reg;
reg   [0:0] icmp_ln33_reg_1579_pp1_iter2_reg;
reg   [0:0] icmp_ln33_reg_1579_pp1_iter3_reg;
wire   [8:0] select_ln32_4_fu_1126_p3;
reg   [8:0] select_ln32_4_reg_1584;
wire   [0:0] and_ln32_fu_1154_p2;
reg   [0:0] and_ln32_reg_1589;
reg   [0:0] and_ln32_reg_1589_pp1_iter1_reg;
reg   [0:0] and_ln32_reg_1589_pp1_iter2_reg;
reg   [0:0] and_ln32_reg_1589_pp1_iter3_reg;
wire   [3:0] select_ln31_fu_1160_p3;
wire   [3:0] select_ln36_4_fu_1180_p3;
reg   [3:0] select_ln36_4_reg_1599;
reg   [3:0] select_ln36_4_reg_1599_pp1_iter1_reg;
wire   [3:0] select_ln36_5_fu_1192_p3;
reg   [3:0] select_ln36_5_reg_1605;
wire   [8:0] select_ln36_6_fu_1206_p3;
reg  signed [8:0] select_ln36_6_reg_1611;
wire   [3:0] in_d_fu_1214_p2;
reg   [3:0] in_d_reg_1616;
wire   [7:0] select_ln33_fu_1226_p3;
wire   [0:0] icmp_ln36_2_fu_1251_p2;
reg   [0:0] icmp_ln36_2_reg_1632;
reg   [0:0] icmp_ln36_2_reg_1632_pp1_iter2_reg;
reg   [0:0] icmp_ln36_2_reg_1632_pp1_iter3_reg;
wire   [8:0] add_ln47_fu_1256_p2;
reg   [8:0] add_ln47_reg_1636;
reg   [8:0] add_ln47_reg_1636_pp1_iter2_reg;
reg   [8:0] add_ln47_reg_1636_pp1_iter3_reg;
reg   [15:0] input_load_reg_1641;
wire  signed [31:0] tmp_fu_1306_p18;
reg  signed [31:0] tmp_reg_1646;
wire   [31:0] mul_ln39_fu_1346_p2;
reg   [31:0] mul_ln39_reg_1651;
wire   [21:0] buffer_fu_1376_p2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [4:0] out_d_0_reg_488;
wire    ap_CS_fsm_state10;
reg   [11:0] phi_mul_reg_499;
wire   [3:0] ap_phi_mux_i_0_phi_fu_514_p4;
reg   [3:0] i_0_reg_510;
wire   [0:0] icmp_ln26_fu_662_p2;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_558_p4;
wire    ap_block_pp1_stage0;
reg   [3:0] ap_phi_mux_in_d_0_phi_fu_579_p4;
wire   [63:0] zext_ln39_6_fu_1246_p1;
wire   [63:0] zext_ln47_fu_1427_p1;
reg   [31:0] kernel_buffer_15_fu_402;
wire  signed [31:0] kernel_buffer_0_fu_945_p1;
reg   [31:0] kernel_buffer_15_17_fu_406;
reg   [31:0] kernel_buffer_15_18_fu_410;
reg   [31:0] kernel_buffer_15_19_fu_414;
reg   [31:0] kernel_buffer_15_20_fu_418;
reg   [31:0] kernel_buffer_15_21_fu_422;
reg   [31:0] kernel_buffer_15_22_fu_426;
reg   [31:0] kernel_buffer_15_23_fu_430;
reg   [31:0] kernel_buffer_15_24_fu_434;
reg   [31:0] kernel_buffer_15_25_fu_438;
reg   [31:0] kernel_buffer_15_26_fu_442;
reg   [31:0] kernel_buffer_15_27_fu_446;
reg   [31:0] kernel_buffer_15_28_fu_450;
reg   [31:0] kernel_buffer_15_29_fu_454;
reg   [31:0] kernel_buffer_15_016_fu_458;
wire   [3:0] trunc_ln25_fu_608_p1;
wire   [15:0] tmp_9_fu_612_p18;
wire   [6:0] zext_ln28_fu_674_p1;
wire   [6:0] tmp_3_fu_683_p129;
wire   [15:0] tmp_3_fu_683_p130;
wire   [7:0] shl_ln1_fu_1024_p3;
wire   [4:0] shl_ln39_3_fu_1036_p3;
wire   [8:0] zext_ln39_fu_1032_p1;
wire   [8:0] zext_ln39_7_fu_1044_p1;
wire   [8:0] sub_ln39_fu_1048_p2;
wire   [8:0] zext_ln36_fu_1054_p1;
wire   [3:0] out_h_fu_1076_p2;
wire   [7:0] shl_ln39_mid1_fu_1096_p3;
wire   [4:0] shl_ln39_3_mid1_fu_1108_p3;
wire   [8:0] zext_ln39_8_fu_1104_p1;
wire   [8:0] zext_ln39_9_fu_1116_p1;
wire   [8:0] sub_ln39_2_fu_1120_p2;
wire   [8:0] add_ln39_fu_1058_p2;
wire   [0:0] icmp_ln36_fu_1148_p2;
wire   [0:0] xor_ln32_fu_1142_p2;
wire   [3:0] select_ln32_fu_1088_p3;
wire   [0:0] or_ln36_fu_1174_p2;
wire   [3:0] out_w_fu_1168_p2;
wire   [8:0] zext_ln36_2_fu_1188_p1;
wire   [8:0] add_ln39_4_fu_1200_p2;
wire   [8:0] select_ln32_5_fu_1134_p3;
wire   [7:0] add_ln33_fu_1220_p2;
wire  signed [11:0] grp_fu_1432_p3;
wire  signed [31:0] sext_ln39_fu_1243_p1;
wire   [8:0] zext_ln36_3_fu_1234_p1;
wire  signed [15:0] mul_ln39_fu_1346_p1;
wire   [21:0] select_ln32_3_fu_1351_p3;
wire   [17:0] trunc_ln3_fu_1363_p4;
wire  signed [21:0] sext_ln39_3_fu_1372_p1;
wire   [21:0] select_ln36_fu_1357_p3;
wire   [0:0] tmp_4_fu_1382_p3;
wire   [0:0] xor_ln46_fu_1394_p2;
wire   [15:0] select_ln46_fu_1400_p3;
wire   [15:0] trunc_ln46_fu_1390_p1;
wire  signed [12:0] sext_ln47_fu_1415_p1;
wire   [12:0] add_ln47_1_fu_1418_p2;
wire  signed [31:0] sext_ln47_1_fu_1423_p1;
wire   [3:0] grp_fu_1432_p0;
wire   [8:0] grp_fu_1432_p1;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [11:0] grp_fu_1432_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

network_mux_164_16_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
network_mux_164_16_1_1_x_U192(
    .din0(16'd14),
    .din1(16'd62211),
    .din2(16'd262),
    .din3(16'd1),
    .din4(16'd65480),
    .din5(16'd0),
    .din6(16'd65531),
    .din7(16'd402),
    .din8(16'd65213),
    .din9(16'd62151),
    .din10(16'd4336),
    .din11(16'd0),
    .din12(16'd60884),
    .din13(16'd59),
    .din14(16'd76),
    .din15(16'd63586),
    .din16(trunc_ln25_fu_608_p1),
    .dout(tmp_9_fu_612_p18)
);

network_mux_1287_16_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 16 ),
    .din73_WIDTH( 16 ),
    .din74_WIDTH( 16 ),
    .din75_WIDTH( 16 ),
    .din76_WIDTH( 16 ),
    .din77_WIDTH( 16 ),
    .din78_WIDTH( 16 ),
    .din79_WIDTH( 16 ),
    .din80_WIDTH( 16 ),
    .din81_WIDTH( 16 ),
    .din82_WIDTH( 16 ),
    .din83_WIDTH( 16 ),
    .din84_WIDTH( 16 ),
    .din85_WIDTH( 16 ),
    .din86_WIDTH( 16 ),
    .din87_WIDTH( 16 ),
    .din88_WIDTH( 16 ),
    .din89_WIDTH( 16 ),
    .din90_WIDTH( 16 ),
    .din91_WIDTH( 16 ),
    .din92_WIDTH( 16 ),
    .din93_WIDTH( 16 ),
    .din94_WIDTH( 16 ),
    .din95_WIDTH( 16 ),
    .din96_WIDTH( 16 ),
    .din97_WIDTH( 16 ),
    .din98_WIDTH( 16 ),
    .din99_WIDTH( 16 ),
    .din100_WIDTH( 16 ),
    .din101_WIDTH( 16 ),
    .din102_WIDTH( 16 ),
    .din103_WIDTH( 16 ),
    .din104_WIDTH( 16 ),
    .din105_WIDTH( 16 ),
    .din106_WIDTH( 16 ),
    .din107_WIDTH( 16 ),
    .din108_WIDTH( 16 ),
    .din109_WIDTH( 16 ),
    .din110_WIDTH( 16 ),
    .din111_WIDTH( 16 ),
    .din112_WIDTH( 16 ),
    .din113_WIDTH( 16 ),
    .din114_WIDTH( 16 ),
    .din115_WIDTH( 16 ),
    .din116_WIDTH( 16 ),
    .din117_WIDTH( 16 ),
    .din118_WIDTH( 16 ),
    .din119_WIDTH( 16 ),
    .din120_WIDTH( 16 ),
    .din121_WIDTH( 16 ),
    .din122_WIDTH( 16 ),
    .din123_WIDTH( 16 ),
    .din124_WIDTH( 16 ),
    .din125_WIDTH( 16 ),
    .din126_WIDTH( 16 ),
    .din127_WIDTH( 16 ),
    .din128_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
network_mux_1287_16_1_1_x_U193(
    .din0(16'd62885),
    .din1(16'd2073),
    .din2(16'd1156),
    .din3(16'd3349),
    .din4(16'd604),
    .din5(16'd57380),
    .din6(16'd60508),
    .din7(16'd6387),
    .din8(16'd55510),
    .din9(16'd5920),
    .din10(16'd1322),
    .din11(16'd57996),
    .din12(16'd3993),
    .din13(16'd8863),
    .din14(16'd10066),
    .din15(16'd6497),
    .din16(16'd59697),
    .din17(16'd4141),
    .din18(16'd60043),
    .din19(16'd7347),
    .din20(16'd64048),
    .din21(16'd63388),
    .din22(16'd57513),
    .din23(16'd6361),
    .din24(16'd2258),
    .din25(16'd64569),
    .din26(16'd64590),
    .din27(16'd58169),
    .din28(16'd6947),
    .din29(16'd58235),
    .din30(16'd1582),
    .din31(16'd59650),
    .din32(16'd3762),
    .din33(16'd60298),
    .din34(16'd4505),
    .din35(16'd58497),
    .din36(16'd63790),
    .din37(16'd953),
    .din38(16'd5991),
    .din39(16'd58218),
    .din40(16'd61344),
    .din41(16'd7946),
    .din42(16'd58735),
    .din43(16'd58602),
    .din44(16'd6251),
    .din45(16'd58211),
    .din46(16'd61243),
    .din47(16'd57804),
    .din48(16'd6991),
    .din49(16'd62949),
    .din50(16'd1501),
    .din51(16'd61189),
    .din52(16'd58710),
    .din53(16'd535),
    .din54(16'd7485),
    .din55(16'd65437),
    .din56(16'd61129),
    .din57(16'd6362),
    .din58(16'd60818),
    .din59(16'd60802),
    .din60(16'd2770),
    .din61(16'd64224),
    .din62(16'd2669),
    .din63(16'd62677),
    .din64(16'd61095),
    .din65(16'd60052),
    .din66(16'd6676),
    .din67(16'd61248),
    .din68(16'd58276),
    .din69(16'd669),
    .din70(16'd59019),
    .din71(16'd62964),
    .din72(16'd59186),
    .din73(16'd2136),
    .din74(16'd4793),
    .din75(16'd7198),
    .din76(16'd58792),
    .din77(16'd8508),
    .din78(16'd59698),
    .din79(16'd6660),
    .din80(16'd8779),
    .din81(16'd7883),
    .din82(16'd64369),
    .din83(16'd64293),
    .din84(16'd3744),
    .din85(16'd2181),
    .din86(16'd4585),
    .din87(16'd63357),
    .din88(16'd738),
    .din89(16'd57610),
    .din90(16'd4738),
    .din91(16'd2494),
    .din92(16'd2931),
    .din93(16'd58083),
    .din94(16'd7364),
    .din95(16'd64769),
    .din96(16'd60896),
    .din97(16'd59412),
    .din98(16'd61162),
    .din99(16'd63852),
    .din100(16'd9249),
    .din101(16'd9727),
    .din102(16'd65469),
    .din103(16'd1304),
    .din104(16'd58553),
    .din105(16'd788),
    .din106(16'd5068),
    .din107(16'd62814),
    .din108(16'd60492),
    .din109(16'd57349),
    .din110(16'd64499),
    .din111(16'd7848),
    .din112(16'd63471),
    .din113(16'd58243),
    .din114(16'd2987),
    .din115(16'd60466),
    .din116(16'd65276),
    .din117(16'd57906),
    .din118(16'd65308),
    .din119(16'd62696),
    .din120(16'd62681),
    .din121(16'd57322),
    .din122(16'd62827),
    .din123(16'd59954),
    .din124(16'd60637),
    .din125(16'd4232),
    .din126(16'd5145),
    .din127(16'd1740),
    .din128(tmp_3_fu_683_p129),
    .dout(tmp_3_fu_683_p130)
);

network_mux_164_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
network_mux_164_32_1_1_U194(
    .din0(kernel_buffer_15_fu_402),
    .din1(kernel_buffer_15_17_fu_406),
    .din2(kernel_buffer_15_18_fu_410),
    .din3(kernel_buffer_15_19_fu_414),
    .din4(kernel_buffer_15_20_fu_418),
    .din5(kernel_buffer_15_21_fu_422),
    .din6(kernel_buffer_15_22_fu_426),
    .din7(kernel_buffer_15_23_fu_430),
    .din8(32'd0),
    .din9(kernel_buffer_15_24_fu_434),
    .din10(kernel_buffer_15_25_fu_438),
    .din11(kernel_buffer_15_26_fu_442),
    .din12(kernel_buffer_15_27_fu_446),
    .din13(kernel_buffer_15_28_fu_450),
    .din14(kernel_buffer_15_29_fu_454),
    .din15(kernel_buffer_15_016_fu_458),
    .din16(select_ln36_4_reg_1599_pp1_iter1_reg),
    .dout(tmp_fu_1306_p18)
);

network_mac_muladd_4ns_9ns_9s_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
network_mac_muladd_4ns_9ns_9s_12_1_1_U195(
    .din0(grp_fu_1432_p0),
    .din1(grp_fu_1432_p1),
    .din2(select_ln36_6_reg_1611),
    .dout(grp_fu_1432_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state5)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_0_reg_565 <= sext_ln34_reg_1550;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1570_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        buffer_0_reg_565 <= buffer_fu_1376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_510 <= i_fu_668_p2;
    end else if (((icmp_ln24_fu_596_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_510 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_d_0_reg_575 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1570 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        in_d_0_reg_575 <= in_d_reg_1616;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten18_reg_521 <= 11'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_1064_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten18_reg_521 <= add_ln31_fu_1070_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_543 <= 8'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_1064_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        indvar_flatten_reg_543 <= select_ln33_fu_1226_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        out_d_0_reg_488 <= out_d_reg_1545;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_488 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_0_reg_532 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_1064_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        out_h_0_reg_532 <= select_ln31_fu_1160_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_0_reg_554 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1570 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        out_w_0_reg_554 <= select_ln36_5_reg_1605;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        phi_mul_reg_499 <= add_ln24_reg_1536;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_499 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln24_reg_1536 <= add_ln24_fu_590_p2;
        out_d_reg_1545 <= out_d_fu_602_p2;
        zext_ln24_reg_1531[11 : 0] <= zext_ln24_fu_586_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln36_2_fu_1251_p2 == 1'd1))) begin
        add_ln47_reg_1636 <= add_ln47_fu_1256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        add_ln47_reg_1636_pp1_iter2_reg <= add_ln47_reg_1636;
        add_ln47_reg_1636_pp1_iter3_reg <= add_ln47_reg_1636_pp1_iter2_reg;
        and_ln32_reg_1589_pp1_iter2_reg <= and_ln32_reg_1589_pp1_iter1_reg;
        and_ln32_reg_1589_pp1_iter3_reg <= and_ln32_reg_1589_pp1_iter2_reg;
        icmp_ln31_reg_1570_pp1_iter2_reg <= icmp_ln31_reg_1570_pp1_iter1_reg;
        icmp_ln31_reg_1570_pp1_iter3_reg <= icmp_ln31_reg_1570_pp1_iter2_reg;
        icmp_ln33_reg_1579_pp1_iter2_reg <= icmp_ln33_reg_1579_pp1_iter1_reg;
        icmp_ln33_reg_1579_pp1_iter3_reg <= icmp_ln33_reg_1579_pp1_iter2_reg;
        icmp_ln36_2_reg_1632_pp1_iter2_reg <= icmp_ln36_2_reg_1632;
        icmp_ln36_2_reg_1632_pp1_iter3_reg <= icmp_ln36_2_reg_1632_pp1_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_1064_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln32_reg_1589 <= and_ln32_fu_1154_p2;
        icmp_ln33_reg_1579 <= icmp_ln33_fu_1082_p2;
        select_ln32_4_reg_1584[8 : 1] <= select_ln32_4_fu_1126_p3[8 : 1];
        select_ln36_4_reg_1599 <= select_ln36_4_fu_1180_p3;
        select_ln36_6_reg_1611 <= select_ln36_6_fu_1206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        and_ln32_reg_1589_pp1_iter1_reg <= and_ln32_reg_1589;
        icmp_ln31_reg_1570 <= icmp_ln31_fu_1064_p2;
        icmp_ln31_reg_1570_pp1_iter1_reg <= icmp_ln31_reg_1570;
        icmp_ln33_reg_1579_pp1_iter1_reg <= icmp_ln33_reg_1579;
        select_ln36_4_reg_1599_pp1_iter1_reg <= select_ln36_4_reg_1599;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1570 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln36_2_reg_1632 <= icmp_ln36_2_fu_1251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_fu_1064_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        in_d_reg_1616 <= in_d_fu_1214_p2;
        select_ln36_5_reg_1605 <= select_ln36_5_fu_1192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1570_pp1_iter1_reg == 1'd0))) begin
        input_load_reg_1641 <= input_r_q0;
        tmp_reg_1646 <= tmp_fu_1306_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd8)) | ((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd15))))) begin
        kernel_buffer_15_016_fu_458 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_17_fu_406 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_18_fu_410 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_19_fu_414 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd4) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_20_fu_418 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd5) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_21_fu_422 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd6) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_22_fu_426 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd7) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_23_fu_430 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd9) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_24_fu_434 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd10) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_25_fu_438 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd11) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_26_fu_442 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd12) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_27_fu_446 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd13) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_28_fu_450 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd14) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_29_fu_454 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_662_p2 == 1'd0) & (ap_phi_mux_i_0_phi_fu_514_p4 == 4'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        kernel_buffer_15_fu_402 <= kernel_buffer_0_fu_945_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln31_reg_1570_pp1_iter2_reg == 1'd0))) begin
        mul_ln39_reg_1651 <= mul_ln39_fu_1346_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_596_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln34_reg_1550 <= sext_ln34_fu_650_p1;
        shl_ln_reg_1557[6 : 3] <= shl_ln_fu_654_p3[6 : 3];
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_1064_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln24_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1570 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_in_d_0_phi_fu_579_p4 = in_d_reg_1616;
    end else begin
        ap_phi_mux_in_d_0_phi_fu_579_p4 = in_d_0_reg_575;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_1570 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_out_w_0_phi_fu_558_p4 = select_ln36_5_reg_1605;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_558_p4 = out_w_0_reg_554;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter4 == 1'b1) & (icmp_ln36_2_reg_1632_pp1_iter3_reg == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln24_fu_596_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln26_fu_662_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln31_fu_1064_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln31_fu_1064_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_590_p2 = (phi_mul_reg_499 + 12'd196);

assign add_ln31_fu_1070_p2 = (indvar_flatten18_reg_521 + 11'd1);

assign add_ln33_fu_1220_p2 = (indvar_flatten_reg_543 + 8'd1);

assign add_ln39_4_fu_1200_p2 = (select_ln32_4_fu_1126_p3 + zext_ln36_2_fu_1188_p1);

assign add_ln39_fu_1058_p2 = (sub_ln39_fu_1048_p2 + zext_ln36_fu_1054_p1);

assign add_ln47_1_fu_1418_p2 = ($signed(zext_ln24_reg_1531) + $signed(sext_ln47_fu_1415_p1));

assign add_ln47_fu_1256_p2 = (zext_ln36_3_fu_1234_p1 + select_ln32_4_reg_1584);

assign and_ln32_fu_1154_p2 = (xor_ln32_fu_1142_p2 & icmp_ln36_fu_1148_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_i_0_phi_fu_514_p4 = i_0_reg_510;

assign buffer_fu_1376_p2 = ($signed(sext_ln39_3_fu_1372_p1) + $signed(select_ln36_fu_1357_p3));

assign grp_fu_1432_p0 = grp_fu_1432_p00;

assign grp_fu_1432_p00 = select_ln36_4_reg_1599;

assign grp_fu_1432_p1 = 12'd196;

assign i_fu_668_p2 = (i_0_reg_510 + 4'd1);

assign icmp_ln24_fu_596_p2 = ((out_d_0_reg_488 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_662_p2 = ((i_0_reg_510 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_1064_p2 = ((indvar_flatten18_reg_521 == 11'd1568) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_1082_p2 = ((indvar_flatten_reg_543 == 8'd112) ? 1'b1 : 1'b0);

assign icmp_ln36_2_fu_1251_p2 = ((in_d_reg_1616 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_1148_p2 = ((ap_phi_mux_in_d_0_phi_fu_579_p4 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_1214_p2 = (select_ln36_4_fu_1180_p3 + 4'd1);

assign input_r_address0 = zext_ln39_6_fu_1246_p1;

assign kernel_buffer_0_fu_945_p1 = $signed(tmp_3_fu_683_p130);

assign mul_ln39_fu_1346_p1 = input_load_reg_1641;

assign mul_ln39_fu_1346_p2 = ($signed(tmp_reg_1646) * $signed(mul_ln39_fu_1346_p1));

assign or_ln36_fu_1174_p2 = (icmp_ln33_fu_1082_p2 | and_ln32_fu_1154_p2);

assign out_d_fu_602_p2 = (out_d_0_reg_488 + 5'd1);

assign out_h_fu_1076_p2 = (out_h_0_reg_532 + 4'd1);

assign out_w_fu_1168_p2 = (select_ln32_fu_1088_p3 + 4'd1);

assign output_r_address0 = zext_ln47_fu_1427_p1;

assign output_r_d0 = (trunc_ln46_fu_1390_p1 & select_ln46_fu_1400_p3);

assign select_ln31_fu_1160_p3 = ((icmp_ln33_fu_1082_p2[0:0] === 1'b1) ? out_h_fu_1076_p2 : out_h_0_reg_532);

assign select_ln32_3_fu_1351_p3 = ((icmp_ln33_reg_1579_pp1_iter3_reg[0:0] === 1'b1) ? sext_ln34_reg_1550 : buffer_0_reg_565);

assign select_ln32_4_fu_1126_p3 = ((icmp_ln33_fu_1082_p2[0:0] === 1'b1) ? sub_ln39_2_fu_1120_p2 : sub_ln39_fu_1048_p2);

assign select_ln32_5_fu_1134_p3 = ((icmp_ln33_fu_1082_p2[0:0] === 1'b1) ? sub_ln39_2_fu_1120_p2 : add_ln39_fu_1058_p2);

assign select_ln32_fu_1088_p3 = ((icmp_ln33_fu_1082_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_w_0_phi_fu_558_p4);

assign select_ln33_fu_1226_p3 = ((icmp_ln33_fu_1082_p2[0:0] === 1'b1) ? 8'd1 : add_ln33_fu_1220_p2);

assign select_ln36_4_fu_1180_p3 = ((or_ln36_fu_1174_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_in_d_0_phi_fu_579_p4);

assign select_ln36_5_fu_1192_p3 = ((and_ln32_fu_1154_p2[0:0] === 1'b1) ? out_w_fu_1168_p2 : select_ln32_fu_1088_p3);

assign select_ln36_6_fu_1206_p3 = ((and_ln32_fu_1154_p2[0:0] === 1'b1) ? add_ln39_4_fu_1200_p2 : select_ln32_5_fu_1134_p3);

assign select_ln36_fu_1357_p3 = ((and_ln32_reg_1589_pp1_iter3_reg[0:0] === 1'b1) ? sext_ln34_reg_1550 : select_ln32_3_fu_1351_p3);

assign select_ln46_fu_1400_p3 = ((xor_ln46_fu_1394_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln34_fu_650_p1 = $signed(tmp_9_fu_612_p18);

assign sext_ln39_3_fu_1372_p1 = $signed(trunc_ln3_fu_1363_p4);

assign sext_ln39_fu_1243_p1 = grp_fu_1432_p3;

assign sext_ln47_1_fu_1423_p1 = $signed(add_ln47_1_fu_1418_p2);

assign sext_ln47_fu_1415_p1 = $signed(add_ln47_reg_1636_pp1_iter3_reg);

assign shl_ln1_fu_1024_p3 = {{out_h_0_reg_532}, {4'd0}};

assign shl_ln39_3_fu_1036_p3 = {{out_h_0_reg_532}, {1'd0}};

assign shl_ln39_3_mid1_fu_1108_p3 = {{out_h_fu_1076_p2}, {1'd0}};

assign shl_ln39_mid1_fu_1096_p3 = {{out_h_fu_1076_p2}, {4'd0}};

assign shl_ln_fu_654_p3 = {{trunc_ln25_fu_608_p1}, {3'd0}};

assign sub_ln39_2_fu_1120_p2 = (zext_ln39_8_fu_1104_p1 - zext_ln39_9_fu_1116_p1);

assign sub_ln39_fu_1048_p2 = (zext_ln39_fu_1032_p1 - zext_ln39_7_fu_1044_p1);

assign tmp_3_fu_683_p129 = (shl_ln_reg_1557 + zext_ln28_fu_674_p1);

assign tmp_4_fu_1382_p3 = buffer_fu_1376_p2[32'd21];

assign trunc_ln25_fu_608_p1 = out_d_0_reg_488[3:0];

assign trunc_ln3_fu_1363_p4 = {{mul_ln39_reg_1651[31:14]}};

assign trunc_ln46_fu_1390_p1 = buffer_fu_1376_p2[15:0];

assign xor_ln32_fu_1142_p2 = (icmp_ln33_fu_1082_p2 ^ 1'd1);

assign xor_ln46_fu_1394_p2 = (tmp_4_fu_1382_p3 ^ 1'd1);

assign zext_ln24_fu_586_p1 = phi_mul_reg_499;

assign zext_ln28_fu_674_p1 = i_0_reg_510;

assign zext_ln36_2_fu_1188_p1 = out_w_fu_1168_p2;

assign zext_ln36_3_fu_1234_p1 = select_ln36_5_reg_1605;

assign zext_ln36_fu_1054_p1 = ap_phi_mux_out_w_0_phi_fu_558_p4;

assign zext_ln39_6_fu_1246_p1 = $unsigned(sext_ln39_fu_1243_p1);

assign zext_ln39_7_fu_1044_p1 = shl_ln39_3_fu_1036_p3;

assign zext_ln39_8_fu_1104_p1 = shl_ln39_mid1_fu_1096_p3;

assign zext_ln39_9_fu_1116_p1 = shl_ln39_3_mid1_fu_1108_p3;

assign zext_ln39_fu_1032_p1 = shl_ln1_fu_1024_p3;

assign zext_ln47_fu_1427_p1 = $unsigned(sext_ln47_1_fu_1423_p1);

always @ (posedge ap_clk) begin
    zext_ln24_reg_1531[12] <= 1'b0;
    shl_ln_reg_1557[2:0] <= 3'b000;
    select_ln32_4_reg_1584[0] <= 1'b0;
end

endmodule //pointwise_conv2d_fix_3
