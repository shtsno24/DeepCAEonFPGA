// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_3_b_s_address0;
reg    SeparableConv2D_3_b_s_ce0;
wire   [13:0] SeparableConv2D_3_b_s_q0;
wire   [12:0] zext_ln18_fu_437_p1;
reg   [12:0] zext_ln18_reg_930;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln18_fu_441_p2;
reg   [11:0] add_ln18_reg_935;
wire   [4:0] out_d_fu_453_p2;
reg   [4:0] out_d_reg_943;
wire   [0:0] icmp_ln18_fu_447_p2;
wire   [3:0] trunc_ln27_fu_464_p1;
reg   [3:0] trunc_ln27_reg_953;
wire  signed [21:0] sext_ln27_fu_468_p1;
reg  signed [21:0] sext_ln27_reg_958;
wire    ap_CS_fsm_state3;
wire   [6:0] shl_ln_fu_472_p3;
reg   [6:0] shl_ln_reg_963;
wire   [3:0] out_h_fu_485_p2;
reg   [3:0] out_h_reg_971;
wire    ap_CS_fsm_state4;
wire   [8:0] sub_ln27_fu_515_p2;
reg   [8:0] sub_ln27_reg_976;
wire   [0:0] icmp_ln19_fu_479_p2;
wire   [3:0] out_w_fu_527_p2;
reg   [3:0] out_w_reg_984;
wire    ap_CS_fsm_state5;
wire  signed [8:0] add_ln27_fu_537_p2;
reg  signed [8:0] add_ln27_reg_989;
wire   [0:0] icmp_ln20_fu_521_p2;
wire  signed [11:0] sext_ln27_5_fu_542_p1;
reg  signed [11:0] sext_ln27_5_reg_994;
wire   [3:0] in_d_fu_556_p2;
reg   [3:0] in_d_reg_1002;
wire    ap_CS_fsm_state6;
wire   [10:0] add_ln27_4_fu_562_p2;
reg   [10:0] add_ln27_4_reg_1007;
wire   [0:0] icmp_ln22_fu_550_p2;
wire   [11:0] add_ln27_1_fu_568_p2;
reg   [11:0] add_ln27_1_reg_1012;
wire   [6:0] add_ln27_3_fu_577_p2;
reg   [6:0] add_ln27_3_reg_1017;
wire   [15:0] and_ln32_fu_608_p2;
reg   [15:0] and_ln32_reg_1022;
wire   [12:0] add_ln32_fu_617_p2;
reg   [12:0] add_ln32_reg_1027;
wire    ap_CS_fsm_state7;
reg  signed [15:0] input_load_reg_1037;
wire    ap_CS_fsm_state8;
wire   [15:0] grp_fu_630_p130;
reg  signed [15:0] tmp_reg_1042;
wire  signed [31:0] mul_ln27_fu_924_p2;
reg  signed [31:0] mul_ln27_reg_1047;
wire    ap_CS_fsm_state9;
wire   [21:0] buffer_fu_910_p2;
wire    ap_CS_fsm_state10;
reg   [4:0] out_d_0_reg_361;
reg   [11:0] phi_mul1_reg_372;
reg   [3:0] out_h_0_reg_383;
reg   [3:0] out_w_0_reg_394;
wire    ap_CS_fsm_state11;
reg   [21:0] buffer_0_reg_405;
reg   [3:0] in_d_0_reg_415;
reg   [10:0] phi_mul_reg_426;
wire   [63:0] zext_ln21_fu_459_p1;
wire   [63:0] zext_ln27_4_fu_625_p1;
wire   [63:0] zext_ln32_fu_919_p1;
wire   [7:0] shl_ln27_5_fu_491_p3;
wire   [4:0] shl_ln27_6_fu_503_p3;
wire   [8:0] zext_ln27_fu_499_p1;
wire   [8:0] zext_ln27_3_fu_511_p1;
wire   [8:0] zext_ln22_fu_533_p1;
wire   [11:0] zext_ln22_2_fu_546_p1;
wire   [6:0] zext_ln27_5_fu_573_p1;
wire   [0:0] tmp_2_fu_582_p3;
wire   [0:0] xor_ln31_fu_594_p2;
wire   [15:0] select_ln31_fu_600_p3;
wire   [15:0] trunc_ln31_fu_590_p1;
wire  signed [12:0] sext_ln32_fu_614_p1;
wire  signed [31:0] sext_ln27_6_fu_622_p1;
wire   [17:0] trunc_ln2_fu_897_p4;
wire  signed [21:0] sext_ln27_7_fu_906_p1;
wire  signed [31:0] sext_ln32_1_fu_916_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

pointwise_conv2d_fix_3_SeparableConv2D_3_b_s #(
    .DataWidth( 14 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_3_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_3_b_s_address0),
    .ce0(SeparableConv2D_3_b_s_ce0),
    .q0(SeparableConv2D_3_b_s_q0)
);

network_mux_1287_16_2_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 16 ),
    .din73_WIDTH( 16 ),
    .din74_WIDTH( 16 ),
    .din75_WIDTH( 16 ),
    .din76_WIDTH( 16 ),
    .din77_WIDTH( 16 ),
    .din78_WIDTH( 16 ),
    .din79_WIDTH( 16 ),
    .din80_WIDTH( 16 ),
    .din81_WIDTH( 16 ),
    .din82_WIDTH( 16 ),
    .din83_WIDTH( 16 ),
    .din84_WIDTH( 16 ),
    .din85_WIDTH( 16 ),
    .din86_WIDTH( 16 ),
    .din87_WIDTH( 16 ),
    .din88_WIDTH( 16 ),
    .din89_WIDTH( 16 ),
    .din90_WIDTH( 16 ),
    .din91_WIDTH( 16 ),
    .din92_WIDTH( 16 ),
    .din93_WIDTH( 16 ),
    .din94_WIDTH( 16 ),
    .din95_WIDTH( 16 ),
    .din96_WIDTH( 16 ),
    .din97_WIDTH( 16 ),
    .din98_WIDTH( 16 ),
    .din99_WIDTH( 16 ),
    .din100_WIDTH( 16 ),
    .din101_WIDTH( 16 ),
    .din102_WIDTH( 16 ),
    .din103_WIDTH( 16 ),
    .din104_WIDTH( 16 ),
    .din105_WIDTH( 16 ),
    .din106_WIDTH( 16 ),
    .din107_WIDTH( 16 ),
    .din108_WIDTH( 16 ),
    .din109_WIDTH( 16 ),
    .din110_WIDTH( 16 ),
    .din111_WIDTH( 16 ),
    .din112_WIDTH( 16 ),
    .din113_WIDTH( 16 ),
    .din114_WIDTH( 16 ),
    .din115_WIDTH( 16 ),
    .din116_WIDTH( 16 ),
    .din117_WIDTH( 16 ),
    .din118_WIDTH( 16 ),
    .din119_WIDTH( 16 ),
    .din120_WIDTH( 16 ),
    .din121_WIDTH( 16 ),
    .din122_WIDTH( 16 ),
    .din123_WIDTH( 16 ),
    .din124_WIDTH( 16 ),
    .din125_WIDTH( 16 ),
    .din126_WIDTH( 16 ),
    .din127_WIDTH( 16 ),
    .din128_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
network_mux_1287_16_2_1_x_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(16'd62885),
    .din1(16'd2073),
    .din2(16'd1156),
    .din3(16'd3349),
    .din4(16'd604),
    .din5(16'd57380),
    .din6(16'd60508),
    .din7(16'd6387),
    .din8(16'd55510),
    .din9(16'd5920),
    .din10(16'd1322),
    .din11(16'd57996),
    .din12(16'd3993),
    .din13(16'd8863),
    .din14(16'd10066),
    .din15(16'd6497),
    .din16(16'd59697),
    .din17(16'd4141),
    .din18(16'd60043),
    .din19(16'd7347),
    .din20(16'd64048),
    .din21(16'd63388),
    .din22(16'd57513),
    .din23(16'd6361),
    .din24(16'd2258),
    .din25(16'd64569),
    .din26(16'd64590),
    .din27(16'd58169),
    .din28(16'd6947),
    .din29(16'd58235),
    .din30(16'd1582),
    .din31(16'd59650),
    .din32(16'd3762),
    .din33(16'd60298),
    .din34(16'd4505),
    .din35(16'd58497),
    .din36(16'd63790),
    .din37(16'd953),
    .din38(16'd5991),
    .din39(16'd58218),
    .din40(16'd61344),
    .din41(16'd7946),
    .din42(16'd58735),
    .din43(16'd58602),
    .din44(16'd6251),
    .din45(16'd58211),
    .din46(16'd61243),
    .din47(16'd57804),
    .din48(16'd6991),
    .din49(16'd62949),
    .din50(16'd1501),
    .din51(16'd61189),
    .din52(16'd58710),
    .din53(16'd535),
    .din54(16'd7485),
    .din55(16'd65437),
    .din56(16'd61129),
    .din57(16'd6362),
    .din58(16'd60818),
    .din59(16'd60802),
    .din60(16'd2770),
    .din61(16'd64224),
    .din62(16'd2669),
    .din63(16'd62677),
    .din64(16'd61095),
    .din65(16'd60052),
    .din66(16'd6676),
    .din67(16'd61248),
    .din68(16'd58276),
    .din69(16'd669),
    .din70(16'd59019),
    .din71(16'd62964),
    .din72(16'd59186),
    .din73(16'd2136),
    .din74(16'd4793),
    .din75(16'd7198),
    .din76(16'd58792),
    .din77(16'd8508),
    .din78(16'd59698),
    .din79(16'd6660),
    .din80(16'd8779),
    .din81(16'd7883),
    .din82(16'd64369),
    .din83(16'd64293),
    .din84(16'd3744),
    .din85(16'd2181),
    .din86(16'd4585),
    .din87(16'd63357),
    .din88(16'd738),
    .din89(16'd57610),
    .din90(16'd4738),
    .din91(16'd2494),
    .din92(16'd2931),
    .din93(16'd58083),
    .din94(16'd7364),
    .din95(16'd64769),
    .din96(16'd60896),
    .din97(16'd59412),
    .din98(16'd61162),
    .din99(16'd63852),
    .din100(16'd9249),
    .din101(16'd9727),
    .din102(16'd65469),
    .din103(16'd1304),
    .din104(16'd58553),
    .din105(16'd788),
    .din106(16'd5068),
    .din107(16'd62814),
    .din108(16'd60492),
    .din109(16'd57349),
    .din110(16'd64499),
    .din111(16'd7848),
    .din112(16'd63471),
    .din113(16'd58243),
    .din114(16'd2987),
    .din115(16'd60466),
    .din116(16'd65276),
    .din117(16'd57906),
    .din118(16'd65308),
    .din119(16'd62696),
    .din120(16'd62681),
    .din121(16'd57322),
    .din122(16'd62827),
    .din123(16'd59954),
    .din124(16'd60637),
    .din125(16'd4232),
    .din126(16'd5145),
    .din127(16'd1740),
    .din128(add_ln27_3_reg_1017),
    .ce(1'b1),
    .dout(grp_fu_630_p130)
);

network_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16s_16s_32_1_1_U103(
    .din0(tmp_reg_1042),
    .din1(input_load_reg_1037),
    .dout(mul_ln27_fu_924_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_0_reg_405 <= buffer_fu_910_p2;
    end else if (((icmp_ln20_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buffer_0_reg_405 <= sext_ln27_reg_958;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        in_d_0_reg_415 <= in_d_reg_1002;
    end else if (((icmp_ln20_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_d_0_reg_415 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_0_reg_361 <= out_d_reg_943;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_361 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_521_p2 == 1'd1))) begin
        out_h_0_reg_383 <= out_h_reg_971;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_383 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_0_reg_394 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_w_0_reg_394 <= out_w_reg_984;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_372 <= add_ln18_reg_935;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_372 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        phi_mul_reg_426 <= add_ln27_4_reg_1007;
    end else if (((icmp_ln20_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_426 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln18_reg_935 <= add_ln18_fu_441_p2;
        out_d_reg_943 <= out_d_fu_453_p2;
        zext_ln18_reg_930[11 : 0] <= zext_ln18_fu_437_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_550_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln27_1_reg_1012 <= add_ln27_1_fu_568_p2;
        add_ln27_3_reg_1017 <= add_ln27_3_fu_577_p2;
        add_ln27_4_reg_1007 <= add_ln27_4_fu_562_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_521_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln27_reg_989 <= add_ln27_fu_537_p2;
        sext_ln27_5_reg_994 <= sext_ln27_5_fu_542_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_550_p2 == 1'd1))) begin
        add_ln32_reg_1027 <= add_ln32_fu_617_p2;
        and_ln32_reg_1022 <= and_ln32_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_d_reg_1002 <= in_d_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_load_reg_1037 <= input_r_q0;
        tmp_reg_1042 <= grp_fu_630_p130;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln27_reg_1047 <= mul_ln27_fu_924_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_reg_971 <= out_h_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_984 <= out_w_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln27_reg_958 <= sext_ln27_fu_468_p1;
        shl_ln_reg_963[6 : 3] <= shl_ln_fu_472_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_479_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sub_ln27_reg_976[8 : 1] <= sub_ln27_fu_515_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_447_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln27_reg_953 <= trunc_ln27_fu_464_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_3_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_3_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln18_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln18_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln19_fu_479_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_521_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_550_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_3_b_s_address0 = zext_ln21_fu_459_p1;

assign add_ln18_fu_441_p2 = (phi_mul1_reg_372 + 12'd196);

assign add_ln27_1_fu_568_p2 = ($signed(sext_ln27_5_reg_994) + $signed(zext_ln22_2_fu_546_p1));

assign add_ln27_3_fu_577_p2 = (zext_ln27_5_fu_573_p1 + shl_ln_reg_963);

assign add_ln27_4_fu_562_p2 = (phi_mul_reg_426 + 11'd196);

assign add_ln27_fu_537_p2 = (sub_ln27_reg_976 + zext_ln22_fu_533_p1);

assign add_ln32_fu_617_p2 = ($signed(zext_ln18_reg_930) + $signed(sext_ln32_fu_614_p1));

assign and_ln32_fu_608_p2 = (trunc_ln31_fu_590_p1 & select_ln31_fu_600_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_fu_910_p2 = ($signed(sext_ln27_7_fu_906_p1) + $signed(buffer_0_reg_405));

assign icmp_ln18_fu_447_p2 = ((out_d_0_reg_361 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_479_p2 = ((out_h_0_reg_383 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_521_p2 = ((out_w_0_reg_394 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_550_p2 = ((in_d_0_reg_415 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_556_p2 = (in_d_0_reg_415 + 4'd1);

assign input_r_address0 = zext_ln27_4_fu_625_p1;

assign out_d_fu_453_p2 = (out_d_0_reg_361 + 5'd1);

assign out_h_fu_485_p2 = (out_h_0_reg_383 + 4'd1);

assign out_w_fu_527_p2 = (out_w_0_reg_394 + 4'd1);

assign output_r_address0 = zext_ln32_fu_919_p1;

assign output_r_d0 = and_ln32_reg_1022;

assign select_ln31_fu_600_p3 = ((xor_ln31_fu_594_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln27_5_fu_542_p1 = add_ln27_fu_537_p2;

assign sext_ln27_6_fu_622_p1 = $signed(add_ln27_1_reg_1012);

assign sext_ln27_7_fu_906_p1 = $signed(trunc_ln2_fu_897_p4);

assign sext_ln27_fu_468_p1 = $signed(SeparableConv2D_3_b_s_q0);

assign sext_ln32_1_fu_916_p1 = $signed(add_ln32_reg_1027);

assign sext_ln32_fu_614_p1 = add_ln27_reg_989;

assign shl_ln27_5_fu_491_p3 = {{out_h_0_reg_383}, {4'd0}};

assign shl_ln27_6_fu_503_p3 = {{out_h_0_reg_383}, {1'd0}};

assign shl_ln_fu_472_p3 = {{trunc_ln27_reg_953}, {3'd0}};

assign sub_ln27_fu_515_p2 = (zext_ln27_fu_499_p1 - zext_ln27_3_fu_511_p1);

assign tmp_2_fu_582_p3 = buffer_0_reg_405[32'd21];

assign trunc_ln27_fu_464_p1 = out_d_0_reg_361[3:0];

assign trunc_ln2_fu_897_p4 = {{mul_ln27_reg_1047[31:14]}};

assign trunc_ln31_fu_590_p1 = buffer_0_reg_405[15:0];

assign xor_ln31_fu_594_p2 = (tmp_2_fu_582_p3 ^ 1'd1);

assign zext_ln18_fu_437_p1 = phi_mul1_reg_372;

assign zext_ln21_fu_459_p1 = out_d_0_reg_361;

assign zext_ln22_2_fu_546_p1 = phi_mul_reg_426;

assign zext_ln22_fu_533_p1 = out_w_0_reg_394;

assign zext_ln27_3_fu_511_p1 = shl_ln27_6_fu_503_p3;

assign zext_ln27_4_fu_625_p1 = $unsigned(sext_ln27_6_fu_622_p1);

assign zext_ln27_5_fu_573_p1 = in_d_0_reg_415;

assign zext_ln27_fu_499_p1 = shl_ln27_5_fu_491_p3;

assign zext_ln32_fu_919_p1 = $unsigned(sext_ln32_1_fu_916_p1);

always @ (posedge ap_clk) begin
    zext_ln18_reg_930[12] <= 1'b0;
    shl_ln_reg_963[2:0] <= 3'b000;
    sub_ln27_reg_976[0] <= 1'b0;
end

endmodule //pointwise_conv2d_fix_3
