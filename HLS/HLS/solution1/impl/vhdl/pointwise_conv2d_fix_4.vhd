-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_D60D : STD_LOGIC_VECTOR (15 downto 0) := "1101011000001101";
    constant ap_const_lv14_24C0 : STD_LOGIC_VECTOR (13 downto 0) := "10010011000000";
    constant ap_const_lv12_310 : STD_LOGIC_VECTOR (11 downto 0) := "001100010000";
    constant ap_const_lv13_1570 : STD_LOGIC_VECTOR (12 downto 0) := "1010101110000";
    constant ap_const_lv13_1260 : STD_LOGIC_VECTOR (12 downto 0) := "1001001100000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_2AE0 : STD_LOGIC_VECTOR (13 downto 0) := "10101011100000";
    constant ap_const_lv13_1880 : STD_LOGIC_VECTOR (12 downto 0) := "1100010000000";
    constant ap_const_lv14_21B0 : STD_LOGIC_VECTOR (13 downto 0) := "10000110110000";
    constant ap_const_lv12_620 : STD_LOGIC_VECTOR (11 downto 0) := "011000100000";
    constant ap_const_lv14_27D0 : STD_LOGIC_VECTOR (13 downto 0) := "10011111010000";
    constant ap_const_lv14_2DF0 : STD_LOGIC_VECTOR (13 downto 0) := "10110111110000";
    constant ap_const_lv13_C40 : STD_LOGIC_VECTOR (12 downto 0) := "0110001000000";
    constant ap_const_lv14_1EA0 : STD_LOGIC_VECTOR (13 downto 0) := "01111010100000";
    constant ap_const_lv13_F50 : STD_LOGIC_VECTOR (12 downto 0) := "0111101010000";
    constant ap_const_lv13_1B90 : STD_LOGIC_VECTOR (12 downto 0) := "1101110010000";
    constant ap_const_lv12_930 : STD_LOGIC_VECTOR (11 downto 0) := "100100110000";
    constant ap_const_lv30_3FFFE34D : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111110001101001101";
    constant ap_const_lv30_3FFFD2BE : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111101001010111110";
    constant ap_const_lv30_3FFFDA7B : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111101101001111011";
    constant ap_const_lv27_2EC : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001011101100";
    constant ap_const_lv30_3FFFE69A : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111110011010011010";
    constant ap_const_lv30_1B7E : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001101101111110";
    constant ap_const_lv29_ED6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000111011010110";
    constant ap_const_lv15_310 : STD_LOGIC_VECTOR (14 downto 0) := "000001100010000";
    constant ap_const_lv30_1ECE : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001111011001110";
    constant ap_const_lv26_3FFFE22 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111000100010";
    constant ap_const_lv29_D6A : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000110101101010";
    constant ap_const_lv30_15C7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001010111000111";
    constant ap_const_lv30_3FFFC003 : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111100000000000011";
    constant ap_const_lv29_1FFFF46C : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111010001101100";
    constant ap_const_lv28_FFFF91C : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111100100011100";
    constant ap_const_lv30_1C17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001110000010111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln23_fu_335_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal reg_288 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln18_fu_5395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_346_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_530 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_w_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_922 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_16_reg_928 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln23_19_fu_340_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_19_reg_1174 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln23_26_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_26_reg_1490 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln23_17_fu_337_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_17_reg_1493 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln23_25_fu_353_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_25_reg_1786 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_20_reg_2048 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln23_23_fu_345_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_23_reg_2054 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln23_22_fu_356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_22_reg_2617 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln23_29_fu_339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_29_reg_2929 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sub_ln23_fu_5389_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln23_reg_5882 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln17_fu_5359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln23_6_fu_5406_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln23_6_reg_5890 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_load_1_reg_5901 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln23_5_fu_5430_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln23_5_reg_5916 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln23_4_fu_5613_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln23_4_reg_5954 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln23_fu_5785_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln23_reg_5992 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln23_1_reg_5997 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln20_fu_5803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln20_fu_5823_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln20_reg_6010 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_299 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_0_reg_310 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_0_0_reg_322 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_3_fu_5415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_4_fu_5420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_5_fu_5425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_6_fu_5472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_7_fu_5477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_8_fu_5522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_9_fu_5527_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_10_fu_5603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_11_fu_5608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_12_fu_5655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_13_fu_5660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_14_fu_5701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_15_fu_5706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_16_fu_5743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_17_fu_5748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_19_fu_5818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_fu_5858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_334_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln23_29_fu_5696_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_334_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln23_2_fu_5401_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_336_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln23_8_fu_5467_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln23_20_fu_5517_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln23_10_fu_5497_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln23_27_fu_5634_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_28_fu_355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_18_fu_343_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln23_25_fu_5598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln23_23_fu_5578_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_4_fu_5732_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_3_fu_5716_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_fu_346_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_24_fu_357_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_fu_5868_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_6_fu_5774_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln23_5_fu_5758_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_fu_3486_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln23_13_fu_3475_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_11_fu_3476_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_14_fu_3478_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_7_fu_3479_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_15_fu_3480_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_8_fu_3481_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_10_fu_3482_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_fu_3486_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln23_9_fu_3487_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_6_fu_3488_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_4_fu_3492_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_12_fu_3495_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_1_fu_3498_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_5_fu_3503_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_3_fu_3504_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_2_fu_3506_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln17_fu_5359_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_5365_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_5365_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln23_7_fu_5377_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln23_7_fu_5377_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln23_fu_5373_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_1_fu_5385_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_1_fu_341_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln23_1_fu_5411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_2_fu_350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln23_3_fu_362_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln23_5_fu_5430_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln23_2_fu_3506_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln23_3_fu_3504_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_2_fu_5457_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_4_fu_354_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_5_fu_359_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln23_4_fu_3492_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_3_fu_5487_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln23_5_fu_3503_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_5507_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln23_6_fu_344_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_7_fu_342_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_5532_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln23_21_fu_5540_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_5550_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln23_1_fu_5544_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln23_22_fu_5558_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln23_2_fu_5562_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_5568_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln23_6_fu_3488_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_6_fu_5588_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln23_8_fu_348_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln23_9_fu_361_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln23_4_fu_5613_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln23_7_fu_3479_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_7_fu_5624_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln23_8_fu_3481_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln23_10_fu_358_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_11_fu_349_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln23_9_fu_3487_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln23_10_fu_3482_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_fu_5686_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln23_12_fu_333_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_13_fu_351_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln23_11_fu_3476_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln23_12_fu_3495_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln23_14_fu_347_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_15_fu_352_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln23_13_fu_3475_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln23_14_fu_3478_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln23_fu_5785_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln23_1_fu_3498_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln23_27_fu_360_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln23_18_fu_5814_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_5833_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln20_fu_5829_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln27_fu_5841_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln30_fu_5854_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln30_fu_5854_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_15_fu_3480_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln23_fu_3486_p00 : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                buffer_0_0_reg_310 <= grp_fu_334_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                buffer_0_0_reg_310 <= ap_const_lv16_D60D;
            end if; 
        end if;
    end process;

    in_d_0_0_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                in_d_0_0_reg_322 <= xor_ln20_reg_6010;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                in_d_0_0_reg_322 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_5359_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_w_0_reg_299 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln20_fu_5803_p2 = ap_const_lv1_1))) then 
                out_w_0_reg_299 <= out_w_reg_922;
            end if; 
        end if;
    end process;

    reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_5395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_288 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_530),11));
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                reg_288 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv5_0),11));
            elsif (((icmp_ln18_fu_5395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_288 <= add_ln23_fu_335_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_16_reg_928 <= grp_fu_336_p2;
                sext_ln23_5_reg_5916 <= sext_ln23_5_fu_5430_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln23_17_reg_1493 <= add_ln23_17_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln23_19_reg_1174 <= add_ln23_19_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln23_20_reg_2048 <= grp_fu_338_p2;
                sext_ln23_4_reg_5954 <= sext_ln23_4_fu_5613_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln23_22_reg_2617 <= add_ln23_22_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln23_23_reg_2054 <= add_ln23_23_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln23_25_reg_1786 <= add_ln23_25_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln23_26_reg_1490 <= add_ln23_26_fu_363_p2;
                sext_ln23_reg_5992 <= sext_ln23_fu_5785_p1;
                trunc_ln23_1_reg_5997 <= mul_ln23_1_fu_3498_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln23_29_reg_2929 <= add_ln23_29_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_load_1_reg_5901 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                out_h_reg_530 <= out_h_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_w_reg_922 <= out_w_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_5395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sext_ln23_6_reg_5890 <= sext_ln23_6_fu_5406_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_5359_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sub_ln23_reg_5882(10 downto 2) <= sub_ln23_fu_5389_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_5803_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                xor_ln20_reg_6010 <= xor_ln20_fu_5823_p2;
            end if;
        end if;
    end process;
    sub_ln23_reg_5882(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln18_fu_5395_p2, ap_CS_fsm_state2, icmp_ln17_fu_5359_p2, ap_CS_fsm_state13, icmp_ln20_fu_5803_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_5359_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln18_fu_5395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln20_fu_5803_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_10_fu_358_p2 <= std_logic_vector(signed(sext_ln23_4_fu_5613_p1) + signed(ap_const_lv14_1EA0));
    add_ln23_11_fu_349_p2 <= std_logic_vector(signed(sext_ln23_4_fu_5613_p1) + signed(ap_const_lv14_21B0));
    add_ln23_12_fu_333_p2 <= std_logic_vector(signed(sext_ln23_4_reg_5954) + signed(ap_const_lv14_24C0));
    add_ln23_13_fu_351_p2 <= std_logic_vector(signed(sext_ln23_4_reg_5954) + signed(ap_const_lv14_27D0));
    add_ln23_14_fu_347_p2 <= std_logic_vector(signed(sext_ln23_4_reg_5954) + signed(ap_const_lv14_2AE0));
    add_ln23_15_fu_352_p2 <= std_logic_vector(signed(sext_ln23_4_reg_5954) + signed(ap_const_lv14_2DF0));
    add_ln23_17_fu_337_p2 <= std_logic_vector(signed(sext_ln23_20_fu_5517_p1) + signed(sext_ln23_10_fu_5497_p1));
    add_ln23_18_fu_343_p2 <= std_logic_vector(signed(sext_ln23_25_fu_5598_p1) + signed(sext_ln23_23_fu_5578_p1));
    add_ln23_19_fu_340_p2 <= std_logic_vector(unsigned(add_ln23_17_reg_1493) + unsigned(add_ln23_18_fu_343_p2));
    add_ln23_1_fu_341_p2 <= std_logic_vector(signed(sext_ln23_6_fu_5406_p1) + signed(ap_const_lv12_310));
    add_ln23_22_fu_356_p2 <= std_logic_vector(unsigned(add_ln23_20_reg_2048) + unsigned(grp_fu_334_p2));
    add_ln23_23_fu_345_p2 <= std_logic_vector(unsigned(trunc_ln23_4_fu_5732_p4) + unsigned(trunc_ln23_3_fu_5716_p4));
    add_ln23_24_fu_357_p2 <= std_logic_vector(unsigned(trunc_ln23_6_fu_5774_p4) + unsigned(trunc_ln23_5_fu_5758_p4));
    add_ln23_25_fu_353_p2 <= std_logic_vector(unsigned(add_ln23_23_reg_2054) + unsigned(add_ln23_24_fu_357_p2));
    add_ln23_26_fu_363_p2 <= std_logic_vector(unsigned(add_ln23_22_reg_2617) + unsigned(add_ln23_25_reg_1786));
    add_ln23_27_fu_360_p2 <= std_logic_vector(unsigned(mul_ln23_fu_3486_p2) + unsigned(sext_ln23_reg_5992));
    add_ln23_28_fu_355_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_5868_p4) + unsigned(trunc_ln23_1_reg_5997));
    add_ln23_29_fu_339_p2 <= std_logic_vector(unsigned(add_ln23_16_reg_928) + unsigned(add_ln23_28_fu_355_p2));
    add_ln23_2_fu_350_p2 <= std_logic_vector(signed(sext_ln23_6_reg_5890) + signed(ap_const_lv12_620));
    add_ln23_3_fu_362_p2 <= std_logic_vector(signed(sext_ln23_6_reg_5890) + signed(ap_const_lv12_930));
    add_ln23_4_fu_354_p2 <= std_logic_vector(signed(sext_ln23_5_fu_5430_p1) + signed(ap_const_lv13_C40));
    add_ln23_5_fu_359_p2 <= std_logic_vector(signed(sext_ln23_5_fu_5430_p1) + signed(ap_const_lv13_F50));
    add_ln23_6_fu_344_p2 <= std_logic_vector(signed(sext_ln23_5_reg_5916) + signed(ap_const_lv13_1260));
    add_ln23_7_fu_342_p2 <= std_logic_vector(signed(sext_ln23_5_reg_5916) + signed(ap_const_lv13_1570));
    add_ln23_8_fu_348_p2 <= std_logic_vector(signed(sext_ln23_5_reg_5916) + signed(ap_const_lv13_1880));
    add_ln23_9_fu_361_p2 <= std_logic_vector(signed(sext_ln23_5_reg_5916) + signed(ap_const_lv13_1B90));
    add_ln23_fu_335_p2 <= std_logic_vector(unsigned(zext_ln23_2_fu_5401_p1) + unsigned(sub_ln23_reg_5882));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln17_fu_5359_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_5359_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_5359_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_5359_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_334_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state15, buffer_0_0_reg_310, sext_ln23_29_fu_5696_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_334_p0 <= buffer_0_0_reg_310;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_334_p0 <= sext_ln23_29_fu_5696_p1;
        else 
            grp_fu_334_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_334_p1_assign_proc : process(grp_fu_336_p2, ap_CS_fsm_state9, ap_CS_fsm_state15, mul_ln23_9_fu_3487_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_334_p1 <= grp_fu_336_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_334_p1 <= mul_ln23_9_fu_3487_p2(29 downto 14);
        else 
            grp_fu_334_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_334_p2 <= std_logic_vector(signed(grp_fu_334_p0) + signed(grp_fu_334_p1));

    grp_fu_336_p0_assign_proc : process(ap_CS_fsm_state5, add_ln23_26_reg_1490, ap_CS_fsm_state15, sext_ln23_8_fu_5467_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_336_p0 <= add_ln23_26_reg_1490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_336_p0 <= sext_ln23_8_fu_5467_p1;
        else 
            grp_fu_336_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_336_p1_assign_proc : process(ap_CS_fsm_state5, grp_fu_338_p2, ap_CS_fsm_state15, mul_ln23_2_fu_3506_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_336_p1 <= grp_fu_338_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_336_p1 <= mul_ln23_2_fu_3506_p2(29 downto 14);
        else 
            grp_fu_336_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_336_p2 <= std_logic_vector(signed(grp_fu_336_p0) + signed(grp_fu_336_p1));

    grp_fu_338_p0_assign_proc : process(add_ln23_19_reg_1174, ap_CS_fsm_state8, ap_CS_fsm_state15, mul_ln23_8_fu_3481_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_338_p0 <= add_ln23_19_reg_1174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_338_p0 <= mul_ln23_8_fu_3481_p2(29 downto 14);
        else 
            grp_fu_338_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_338_p1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state15, add_ln23_29_reg_2929, sext_ln23_27_fu_5634_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_338_p1 <= add_ln23_29_reg_2929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_338_p1 <= sext_ln23_27_fu_5634_p1;
        else 
            grp_fu_338_p1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_338_p2 <= std_logic_vector(unsigned(grp_fu_338_p0) + unsigned(grp_fu_338_p1));
    icmp_ln17_fu_5359_p0 <= reg_288(5 - 1 downto 0);
    icmp_ln17_fu_5359_p2 <= "1" when (icmp_ln17_fu_5359_p0 = ap_const_lv5_1C) else "0";
    icmp_ln18_fu_5395_p2 <= "1" when (out_w_0_reg_299 = ap_const_lv5_1C) else "0";
    icmp_ln20_fu_5803_p2 <= "1" when (in_d_0_0_reg_322 = ap_const_lv5_10) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state4, zext_ln23_3_fu_5415_p1, zext_ln23_4_fu_5420_p1, zext_ln23_7_fu_5477_p1, zext_ln23_9_fu_5527_p1, zext_ln23_11_fu_5608_p1, zext_ln23_13_fu_5660_p1, zext_ln23_15_fu_5706_p1, zext_ln23_17_fu_5748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln23_17_fu_5748_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= zext_ln23_15_fu_5706_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln23_13_fu_5660_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln23_11_fu_5608_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln23_9_fu_5527_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= zext_ln23_7_fu_5477_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= zext_ln23_4_fu_5420_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= zext_ln23_3_fu_5415_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state13, zext_ln23_5_fu_5425_p1, zext_ln23_6_fu_5472_p1, zext_ln23_8_fu_5522_p1, zext_ln23_10_fu_5603_p1, zext_ln23_12_fu_5655_p1, zext_ln23_14_fu_5701_p1, zext_ln23_16_fu_5743_p1, zext_ln23_19_fu_5818_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_address1 <= zext_ln23_19_fu_5818_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= zext_ln23_16_fu_5743_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= zext_ln23_14_fu_5701_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= zext_ln23_12_fu_5655_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address1 <= zext_ln23_10_fu_5603_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address1 <= zext_ln23_8_fu_5522_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address1 <= zext_ln23_6_fu_5472_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address1 <= zext_ln23_5_fu_5425_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln23_10_fu_3482_p0 <= input_r_q0;
    mul_ln23_10_fu_3482_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_10_fu_3482_p0) * signed('0' &ap_const_lv29_ED6))), 29));
    mul_ln23_11_fu_3476_p0 <= input_r_q1;
    mul_ln23_11_fu_3476_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_11_fu_3476_p0) * signed(ap_const_lv30_3FFFD2BE))), 30));
    mul_ln23_12_fu_3495_p0 <= input_r_q0;
    mul_ln23_12_fu_3495_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_12_fu_3495_p0) * signed('0' &ap_const_lv30_15C7))), 30));
    mul_ln23_13_fu_3475_p0 <= input_r_q1;
    mul_ln23_13_fu_3475_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_13_fu_3475_p0) * signed(ap_const_lv30_3FFFE34D))), 30));
    mul_ln23_14_fu_3478_p0 <= input_r_q0;
    mul_ln23_14_fu_3478_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_14_fu_3478_p0) * signed(ap_const_lv30_3FFFDA7B))), 30));
    mul_ln23_15_fu_3480_p0 <= input_r_q1;
    mul_ln23_15_fu_3480_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_15_fu_3480_p0) * signed(ap_const_lv30_3FFFE69A))), 30));
    mul_ln23_1_fu_3498_p0 <= input_load_1_reg_5901;
    mul_ln23_1_fu_3498_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_1_fu_3498_p0) * signed(ap_const_lv30_3FFFC003))), 30));
    mul_ln23_2_fu_3506_p0 <= input_r_q0;
    mul_ln23_2_fu_3506_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_2_fu_3506_p0) * signed('0' &ap_const_lv30_1C17))), 30));
    mul_ln23_3_fu_3504_p0 <= input_r_q1;
    mul_ln23_3_fu_3504_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_3_fu_3504_p0) * signed(ap_const_lv28_FFFF91C))), 28));
    mul_ln23_4_fu_3492_p0 <= input_r_q1;
    mul_ln23_4_fu_3492_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_4_fu_3492_p0) * signed('0' &ap_const_lv29_D6A))), 29));
    mul_ln23_5_fu_3503_p0 <= input_r_q0;
    mul_ln23_5_fu_3503_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_5_fu_3503_p0) * signed(ap_const_lv29_1FFFF46C))), 29));
    mul_ln23_6_fu_3488_p0 <= input_r_q0;
    mul_ln23_6_fu_3488_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_6_fu_3488_p0) * signed(ap_const_lv26_3FFFE22))), 26));
    mul_ln23_7_fu_3479_p0 <= input_r_q1;
    mul_ln23_7_fu_3479_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_7_fu_3479_p0) * signed('0' &ap_const_lv27_2EC))), 27));
    mul_ln23_8_fu_3481_p0 <= input_r_q0;
    mul_ln23_8_fu_3481_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_8_fu_3481_p0) * signed('0' &ap_const_lv30_1B7E))), 30));
    mul_ln23_9_fu_3487_p0 <= input_r_q1;
    mul_ln23_9_fu_3487_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln23_9_fu_3487_p0) * signed('0' &ap_const_lv30_1ECE))), 30));
    mul_ln23_fu_3486_p0 <= mul_ln23_fu_3486_p00(5 - 1 downto 0);
    mul_ln23_fu_3486_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_0_0_reg_322),15));
    mul_ln23_fu_3486_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln23_fu_3486_p0) * unsigned(ap_const_lv15_310), 15));
    out_h_fu_346_p0 <= reg_288(5 - 1 downto 0);
    out_h_fu_346_p2 <= std_logic_vector(unsigned(out_h_fu_346_p0) + unsigned(ap_const_lv5_1));
    out_w_fu_364_p2 <= std_logic_vector(unsigned(out_w_0_reg_299) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln30_fu_5858_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln27_fu_5841_p3),16));

    output_r_we0_assign_proc : process(ap_CS_fsm_state13, icmp_ln20_fu_5803_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln20_fu_5803_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln27_fu_5841_p3 <= 
        ap_const_lv15_0 when (tmp_9_fu_5833_p3(0) = '1') else 
        trunc_ln20_fu_5829_p1;
        sext_ln23_10_fu_5497_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_5487_p4),16));

        sext_ln23_18_fu_5814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_27_fu_360_p2),32));

        sext_ln23_1_fu_5411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_1_fu_341_p2),32));

        sext_ln23_20_fu_5517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_5507_p4),16));

        sext_ln23_21_fu_5540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_5532_p3),22));

        sext_ln23_22_fu_5558_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_5550_p3),22));

        sext_ln23_23_fu_5578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_5568_p4),16));

        sext_ln23_25_fu_5598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_5588_p4),16));

        sext_ln23_27_fu_5634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_5624_p4),16));

        sext_ln23_29_fu_5696_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_5686_p4),16));

    sext_ln23_4_fu_5613_p0 <= reg_288;
        sext_ln23_4_fu_5613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_4_fu_5613_p0),14));

    sext_ln23_5_fu_5430_p0 <= reg_288;
        sext_ln23_5_fu_5430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_5_fu_5430_p0),13));

        sext_ln23_6_fu_5406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_fu_335_p2),12));

        sext_ln23_8_fu_5467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_5457_p4),16));

    sext_ln23_fu_5785_p0 <= reg_288;
        sext_ln23_fu_5785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_fu_5785_p0),15));

    sext_ln30_fu_5854_p0 <= reg_288;
        sext_ln30_fu_5854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln30_fu_5854_p0),32));

    shl_ln23_7_fu_5377_p1 <= reg_288(5 - 1 downto 0);
    shl_ln23_7_fu_5377_p3 <= (shl_ln23_7_fu_5377_p1 & ap_const_lv2_0);
    shl_ln_fu_5365_p1 <= reg_288(5 - 1 downto 0);
    shl_ln_fu_5365_p3 <= (shl_ln_fu_5365_p1 & ap_const_lv5_0);
    sub_ln23_1_fu_5544_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(sext_ln23_21_fu_5540_p1));
    sub_ln23_2_fu_5562_p2 <= std_logic_vector(unsigned(sub_ln23_1_fu_5544_p2) - unsigned(sext_ln23_22_fu_5558_p1));
    sub_ln23_fu_5389_p2 <= std_logic_vector(unsigned(zext_ln23_fu_5373_p1) - unsigned(zext_ln23_1_fu_5385_p1));
    tmp_1_fu_5550_p3 <= (input_r_q1 & ap_const_lv2_0);
    tmp_2_fu_5457_p4 <= mul_ln23_3_fu_3504_p2(27 downto 14);
    tmp_3_fu_5487_p4 <= mul_ln23_4_fu_3492_p2(28 downto 14);
    tmp_4_fu_5507_p4 <= mul_ln23_5_fu_3503_p2(28 downto 14);
    tmp_5_fu_5568_p4 <= sub_ln23_2_fu_5562_p2(21 downto 14);
    tmp_6_fu_5588_p4 <= mul_ln23_6_fu_3488_p2(25 downto 14);
    tmp_7_fu_5624_p4 <= mul_ln23_7_fu_3479_p2(26 downto 14);
    tmp_8_fu_5686_p4 <= mul_ln23_10_fu_3482_p2(28 downto 14);
    tmp_9_fu_5833_p3 <= buffer_0_0_reg_310(15 downto 15);
    tmp_fu_5532_p3 <= (input_r_q1 & ap_const_lv5_0);
    trunc_ln1_fu_5868_p4 <= mul_ln23_15_fu_3480_p2(29 downto 14);
    trunc_ln20_fu_5829_p1 <= buffer_0_0_reg_310(15 - 1 downto 0);
    trunc_ln23_3_fu_5716_p4 <= mul_ln23_11_fu_3476_p2(29 downto 14);
    trunc_ln23_4_fu_5732_p4 <= mul_ln23_12_fu_3495_p2(29 downto 14);
    trunc_ln23_5_fu_5758_p4 <= mul_ln23_13_fu_3475_p2(29 downto 14);
    trunc_ln23_6_fu_5774_p4 <= mul_ln23_14_fu_3478_p2(29 downto 14);
    xor_ln20_fu_5823_p2 <= (in_d_0_0_reg_322 xor ap_const_lv5_10);
    zext_ln23_10_fu_5603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_8_fu_348_p2),64));
    zext_ln23_11_fu_5608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_9_fu_361_p2),64));
    zext_ln23_12_fu_5655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_10_fu_358_p2),64));
    zext_ln23_13_fu_5660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_11_fu_349_p2),64));
    zext_ln23_14_fu_5701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_12_fu_333_p2),64));
    zext_ln23_15_fu_5706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_13_fu_351_p2),64));
    zext_ln23_16_fu_5743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_14_fu_347_p2),64));
    zext_ln23_17_fu_5748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_15_fu_352_p2),64));
    zext_ln23_19_fu_5818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln23_18_fu_5814_p1),64));
    zext_ln23_1_fu_5385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln23_7_fu_5377_p3),11));
    zext_ln23_2_fu_5401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_299),11));
    zext_ln23_3_fu_5415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln23_1_fu_5411_p1),64));
    zext_ln23_4_fu_5420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_2_fu_350_p2),64));
    zext_ln23_5_fu_5425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_3_fu_362_p2),64));
    zext_ln23_6_fu_5472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_4_fu_354_p2),64));
    zext_ln23_7_fu_5477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_5_fu_359_p2),64));
    zext_ln23_8_fu_5522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_6_fu_344_p2),64));
    zext_ln23_9_fu_5527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_7_fu_342_p2),64));
    zext_ln23_fu_5373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_5365_p3),11));
    zext_ln30_fu_5858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln30_fu_5854_p1),64));
end behav;
