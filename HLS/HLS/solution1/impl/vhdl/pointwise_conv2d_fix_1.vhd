-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv16_BD1 : STD_LOGIC_VECTOR (15 downto 0) := "0000101111010001";
    constant ap_const_lv16_FCD1 : STD_LOGIC_VECTOR (15 downto 0) := "1111110011010001";
    constant ap_const_lv16_FEE5 : STD_LOGIC_VECTOR (15 downto 0) := "1111111011100101";
    constant ap_const_lv16_1368 : STD_LOGIC_VECTOR (15 downto 0) := "0001001101101000";
    constant ap_const_lv16_F701 : STD_LOGIC_VECTOR (15 downto 0) := "1111011100000001";
    constant ap_const_lv16_FF75 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101110101";
    constant ap_const_lv16_FFCC : STD_LOGIC_VECTOR (15 downto 0) := "1111111111001100";
    constant ap_const_lv16_EC3A : STD_LOGIC_VECTOR (15 downto 0) := "1110110000111010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_1EE6 : STD_LOGIC_VECTOR (15 downto 0) := "0001111011100110";
    constant ap_const_lv16_6D7 : STD_LOGIC_VECTOR (15 downto 0) := "0000011011010111";
    constant ap_const_lv16_23B : STD_LOGIC_VECTOR (15 downto 0) := "0000001000111011";
    constant ap_const_lv16_14AC : STD_LOGIC_VECTOR (15 downto 0) := "0001010010101100";
    constant ap_const_lv16_F2E2 : STD_LOGIC_VECTOR (15 downto 0) := "1111001011100010";
    constant ap_const_lv16_321 : STD_LOGIC_VECTOR (15 downto 0) := "0000001100100001";
    constant ap_const_lv16_234F : STD_LOGIC_VECTOR (15 downto 0) := "0010001101001111";
    constant ap_const_lv16_F5BA : STD_LOGIC_VECTOR (15 downto 0) := "1111010110111010";
    constant ap_const_lv16_FD84 : STD_LOGIC_VECTOR (15 downto 0) := "1111110110000100";
    constant ap_const_lv16_D5F7 : STD_LOGIC_VECTOR (15 downto 0) := "1101010111110111";
    constant ap_const_lv16_F3A4 : STD_LOGIC_VECTOR (15 downto 0) := "1111001110100100";
    constant ap_const_lv16_F68D : STD_LOGIC_VECTOR (15 downto 0) := "1111011010001101";
    constant ap_const_lv16_FCBD : STD_LOGIC_VECTOR (15 downto 0) := "1111110010111101";
    constant ap_const_lv16_FD7C : STD_LOGIC_VECTOR (15 downto 0) := "1111110101111100";
    constant ap_const_lv16_F43B : STD_LOGIC_VECTOR (15 downto 0) := "1111010000111011";
    constant ap_const_lv16_FFEB : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101011";
    constant ap_const_lv16_FAF6 : STD_LOGIC_VECTOR (15 downto 0) := "1111101011110110";
    constant ap_const_lv16_566 : STD_LOGIC_VECTOR (15 downto 0) := "0000010101100110";
    constant ap_const_lv16_EBE2 : STD_LOGIC_VECTOR (15 downto 0) := "1110101111100010";
    constant ap_const_lv16_15CE : STD_LOGIC_VECTOR (15 downto 0) := "0001010111001110";
    constant ap_const_lv16_FA74 : STD_LOGIC_VECTOR (15 downto 0) := "1111101001110100";
    constant ap_const_lv16_44 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000100";
    constant ap_const_lv16_F7FF : STD_LOGIC_VECTOR (15 downto 0) := "1111011111111111";
    constant ap_const_lv16_A70 : STD_LOGIC_VECTOR (15 downto 0) := "0000101001110000";
    constant ap_const_lv16_F0EB : STD_LOGIC_VECTOR (15 downto 0) := "1111000011101011";
    constant ap_const_lv16_E2B : STD_LOGIC_VECTOR (15 downto 0) := "0000111000101011";
    constant ap_const_lv16_FC21 : STD_LOGIC_VECTOR (15 downto 0) := "1111110000100001";
    constant ap_const_lv16_E92F : STD_LOGIC_VECTOR (15 downto 0) := "1110100100101111";
    constant ap_const_lv16_FDAC : STD_LOGIC_VECTOR (15 downto 0) := "1111110110101100";
    constant ap_const_lv16_F62D : STD_LOGIC_VECTOR (15 downto 0) := "1111011000101101";
    constant ap_const_lv16_E32 : STD_LOGIC_VECTOR (15 downto 0) := "0000111000110010";
    constant ap_const_lv16_DE9A : STD_LOGIC_VECTOR (15 downto 0) := "1101111010011010";
    constant ap_const_lv16_2A9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001010101001";
    constant ap_const_lv16_5E1 : STD_LOGIC_VECTOR (15 downto 0) := "0000010111100001";
    constant ap_const_lv16_164D : STD_LOGIC_VECTOR (15 downto 0) := "0001011001001101";
    constant ap_const_lv16_BB2 : STD_LOGIC_VECTOR (15 downto 0) := "0000101110110010";
    constant ap_const_lv16_F994 : STD_LOGIC_VECTOR (15 downto 0) := "1111100110010100";
    constant ap_const_lv16_198A : STD_LOGIC_VECTOR (15 downto 0) := "0001100110001010";
    constant ap_const_lv16_931 : STD_LOGIC_VECTOR (15 downto 0) := "0000100100110001";
    constant ap_const_lv16_F5F2 : STD_LOGIC_VECTOR (15 downto 0) := "1111010111110010";
    constant ap_const_lv16_FB6E : STD_LOGIC_VECTOR (15 downto 0) := "1111101101101110";
    constant ap_const_lv16_EDCB : STD_LOGIC_VECTOR (15 downto 0) := "1110110111001011";
    constant ap_const_lv16_FEC3 : STD_LOGIC_VECTOR (15 downto 0) := "1111111011000011";
    constant ap_const_lv16_FDDD : STD_LOGIC_VECTOR (15 downto 0) := "1111110111011101";
    constant ap_const_lv16_92F : STD_LOGIC_VECTOR (15 downto 0) := "0000100100101111";
    constant ap_const_lv16_B1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010110001";
    constant ap_const_lv16_4BB : STD_LOGIC_VECTOR (15 downto 0) := "0000010010111011";
    constant ap_const_lv16_FBF3 : STD_LOGIC_VECTOR (15 downto 0) := "1111101111110011";
    constant ap_const_lv16_5E5 : STD_LOGIC_VECTOR (15 downto 0) := "0000010111100101";
    constant ap_const_lv16_FC43 : STD_LOGIC_VECTOR (15 downto 0) := "1111110001000011";
    constant ap_const_lv16_672 : STD_LOGIC_VECTOR (15 downto 0) := "0000011001110010";
    constant ap_const_lv16_DFCA : STD_LOGIC_VECTOR (15 downto 0) := "1101111111001010";
    constant ap_const_lv16_9FA : STD_LOGIC_VECTOR (15 downto 0) := "0000100111111010";
    constant ap_const_lv16_FC7B : STD_LOGIC_VECTOR (15 downto 0) := "1111110001111011";
    constant ap_const_lv16_F39A : STD_LOGIC_VECTOR (15 downto 0) := "1111001110011010";
    constant ap_const_lv16_F770 : STD_LOGIC_VECTOR (15 downto 0) := "1111011101110000";
    constant ap_const_lv16_FA64 : STD_LOGIC_VECTOR (15 downto 0) := "1111101001100100";
    constant ap_const_lv16_EA70 : STD_LOGIC_VECTOR (15 downto 0) := "1110101001110000";
    constant ap_const_lv16_A02 : STD_LOGIC_VECTOR (15 downto 0) := "0000101000000010";
    constant ap_const_lv16_FDC5 : STD_LOGIC_VECTOR (15 downto 0) := "1111110111000101";
    constant ap_const_lv16_F104 : STD_LOGIC_VECTOR (15 downto 0) := "1111000100000100";
    constant ap_const_lv16_F867 : STD_LOGIC_VECTOR (15 downto 0) := "1111100001100111";
    constant ap_const_lv16_B91 : STD_LOGIC_VECTOR (15 downto 0) := "0000101110010001";
    constant ap_const_lv16_F5E2 : STD_LOGIC_VECTOR (15 downto 0) := "1111010111100010";
    constant ap_const_lv16_65F : STD_LOGIC_VECTOR (15 downto 0) := "0000011001011111";
    constant ap_const_lv16_FD5D : STD_LOGIC_VECTOR (15 downto 0) := "1111110101011101";
    constant ap_const_lv16_1D5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000111010101";
    constant ap_const_lv16_90A : STD_LOGIC_VECTOR (15 downto 0) := "0000100100001010";
    constant ap_const_lv16_FD85 : STD_LOGIC_VECTOR (15 downto 0) := "1111110110000101";
    constant ap_const_lv16_E7F3 : STD_LOGIC_VECTOR (15 downto 0) := "1110011111110011";
    constant ap_const_lv16_A73 : STD_LOGIC_VECTOR (15 downto 0) := "0000101001110011";
    constant ap_const_lv16_F33F : STD_LOGIC_VECTOR (15 downto 0) := "1111001100111111";
    constant ap_const_lv16_FCDE : STD_LOGIC_VECTOR (15 downto 0) := "1111110011011110";
    constant ap_const_lv16_EFBA : STD_LOGIC_VECTOR (15 downto 0) := "1110111110111010";
    constant ap_const_lv16_EC4 : STD_LOGIC_VECTOR (15 downto 0) := "0000111011000100";
    constant ap_const_lv16_FBEE : STD_LOGIC_VECTOR (15 downto 0) := "1111101111101110";
    constant ap_const_lv16_6C8 : STD_LOGIC_VECTOR (15 downto 0) := "0000011011001000";
    constant ap_const_lv16_912 : STD_LOGIC_VECTOR (15 downto 0) := "0000100100010010";
    constant ap_const_lv16_F4ED : STD_LOGIC_VECTOR (15 downto 0) := "1111010011101101";
    constant ap_const_lv16_FF9F : STD_LOGIC_VECTOR (15 downto 0) := "1111111110011111";
    constant ap_const_lv16_867 : STD_LOGIC_VECTOR (15 downto 0) := "0000100001100111";
    constant ap_const_lv16_61E : STD_LOGIC_VECTOR (15 downto 0) := "0000011000011110";
    constant ap_const_lv16_F1C9 : STD_LOGIC_VECTOR (15 downto 0) := "1111000111001001";
    constant ap_const_lv16_294 : STD_LOGIC_VECTOR (15 downto 0) := "0000001010010100";
    constant ap_const_lv16_18D9 : STD_LOGIC_VECTOR (15 downto 0) := "0001100011011001";
    constant ap_const_lv16_282 : STD_LOGIC_VECTOR (15 downto 0) := "0000001010000010";
    constant ap_const_lv16_727 : STD_LOGIC_VECTOR (15 downto 0) := "0000011100100111";
    constant ap_const_lv16_F14D : STD_LOGIC_VECTOR (15 downto 0) := "1111000101001101";
    constant ap_const_lv16_FD35 : STD_LOGIC_VECTOR (15 downto 0) := "1111110100110101";
    constant ap_const_lv16_FF64 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101100100";
    constant ap_const_lv16_FF76 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101110110";
    constant ap_const_lv16_D742 : STD_LOGIC_VECTOR (15 downto 0) := "1101011101000010";
    constant ap_const_lv16_FA94 : STD_LOGIC_VECTOR (15 downto 0) := "1111101010010100";
    constant ap_const_lv16_F26 : STD_LOGIC_VECTOR (15 downto 0) := "0000111100100110";
    constant ap_const_lv16_F932 : STD_LOGIC_VECTOR (15 downto 0) := "1111100100110010";
    constant ap_const_lv16_FF28 : STD_LOGIC_VECTOR (15 downto 0) := "1111111100101000";
    constant ap_const_lv16_90F : STD_LOGIC_VECTOR (15 downto 0) := "0000100100001111";
    constant ap_const_lv16_2F1 : STD_LOGIC_VECTOR (15 downto 0) := "0000001011110001";
    constant ap_const_lv16_F5DA : STD_LOGIC_VECTOR (15 downto 0) := "1111010111011010";
    constant ap_const_lv16_FB76 : STD_LOGIC_VECTOR (15 downto 0) := "1111101101110110";
    constant ap_const_lv16_FDB2 : STD_LOGIC_VECTOR (15 downto 0) := "1111110110110010";
    constant ap_const_lv16_FEB : STD_LOGIC_VECTOR (15 downto 0) := "0000111111101011";
    constant ap_const_lv16_B4E : STD_LOGIC_VECTOR (15 downto 0) := "0000101101001110";
    constant ap_const_lv16_773 : STD_LOGIC_VECTOR (15 downto 0) := "0000011101110011";
    constant ap_const_lv16_1161 : STD_LOGIC_VECTOR (15 downto 0) := "0001000101100001";
    constant ap_const_lv16_122F : STD_LOGIC_VECTOR (15 downto 0) := "0001001000101111";
    constant ap_const_lv16_2B7 : STD_LOGIC_VECTOR (15 downto 0) := "0000001010110111";
    constant ap_const_lv16_96A : STD_LOGIC_VECTOR (15 downto 0) := "0000100101101010";
    constant ap_const_lv16_F7C : STD_LOGIC_VECTOR (15 downto 0) := "0000111101111100";
    constant ap_const_lv16_F53F : STD_LOGIC_VECTOR (15 downto 0) := "1111010100111111";
    constant ap_const_lv16_F212 : STD_LOGIC_VECTOR (15 downto 0) := "1111001000010010";
    constant ap_const_lv16_FDFE : STD_LOGIC_VECTOR (15 downto 0) := "1111110111111110";
    constant ap_const_lv16_E0B : STD_LOGIC_VECTOR (15 downto 0) := "0000111000001011";
    constant ap_const_lv16_1A37 : STD_LOGIC_VECTOR (15 downto 0) := "0001101000110111";
    constant ap_const_lv16_23FF : STD_LOGIC_VECTOR (15 downto 0) := "0010001111111111";
    constant ap_const_lv16_3EA : STD_LOGIC_VECTOR (15 downto 0) := "0000001111101010";
    constant ap_const_lv16_FE4A : STD_LOGIC_VECTOR (15 downto 0) := "1111111001001010";
    constant ap_const_lv16_8B7 : STD_LOGIC_VECTOR (15 downto 0) := "0000100010110111";
    constant ap_const_lv16_BF : STD_LOGIC_VECTOR (15 downto 0) := "0000000010111111";
    constant ap_const_lv16_E79E : STD_LOGIC_VECTOR (15 downto 0) := "1110011110011110";
    constant ap_const_lv16_6CF : STD_LOGIC_VECTOR (15 downto 0) := "0000011011001111";
    constant ap_const_lv16_F1C1 : STD_LOGIC_VECTOR (15 downto 0) := "1111000111000001";
    constant ap_const_lv16_FAB : STD_LOGIC_VECTOR (15 downto 0) := "0000111110101011";
    constant ap_const_lv16_5A6 : STD_LOGIC_VECTOR (15 downto 0) := "0000010110100110";
    constant ap_const_lv16_CEE : STD_LOGIC_VECTOR (15 downto 0) := "0000110011101110";
    constant ap_const_lv16_DC13 : STD_LOGIC_VECTOR (15 downto 0) := "1101110000010011";
    constant ap_const_lv16_FE39 : STD_LOGIC_VECTOR (15 downto 0) := "1111111000111001";
    constant ap_const_lv12_C40 : STD_LOGIC_VECTOR (11 downto 0) := "110001000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv9_E0 : STD_LOGIC_VECTOR (8 downto 0) := "011100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv13_C4 : STD_LOGIC_VECTOR (12 downto 0) := "0000011000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten18_reg_509 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_h_0_reg_520 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_531 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_w_0_reg_542 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_0_reg_553 : STD_LOGIC_VECTOR (23 downto 0);
    signal in_d_0_reg_563 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln24_fu_574_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln24_reg_1525 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln24_fu_578_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_reg_1530 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_590_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1539 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln34_fu_622_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln34_reg_1544 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln_fu_626_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_1551 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_640_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln31_fu_1045_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1567 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_1567_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1567_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1567_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_1051_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln33_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1576 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1576_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1576_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1576_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_10_fu_1107_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln32_10_reg_1581 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln32_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1586 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1586_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1586_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1586_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_1141_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_10_fu_1161_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_10_reg_1596 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_11_fu_1173_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_11_reg_1601 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_12_fu_1187_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln36_12_reg_1607 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln39_fu_1195_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_reg_1612 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_reg_1612_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal in_d_fu_1199_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_reg_1617 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_fu_1211_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln36_4_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_4_reg_1633 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_4_reg_1633_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_4_reg_1633_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_fu_1241_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln47_reg_1637 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln47_reg_1637_pp1_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln47_reg_1637_pp1_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal input_load_reg_1642 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_1294_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_fu_1334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_reg_1652 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_fu_1364_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal out_d_0_reg_476 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal phi_mul_reg_487 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_498 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln26_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_546_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_in_d_0_phi_fu_567_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_4_fu_1231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_1415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_buffer_15_fu_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_0_fu_917_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln28_fu_921_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_buffer_15_45_fu_390 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_46_fu_394 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_47_fu_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_48_fu_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_49_fu_406 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_50_fu_410 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_51_fu_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_52_fu_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_53_fu_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_54_fu_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_55_fu_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_56_fu_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_57_fu_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_58_fu_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_016_fu_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln25_fu_596_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_600_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_fu_646_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_655_p129 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_655_p130 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln3_fu_1005_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln39_2_fu_1017_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_7_fu_1013_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln39_8_fu_1025_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln39_fu_1029_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_fu_1035_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_fu_1057_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln39_mid1_fu_1077_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln39_2_mid1_fu_1089_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_fu_1085_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln39_15_fu_1097_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln39_4_fu_1101_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln39_fu_1039_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln36_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_1069_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln36_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_1149_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_4_fu_1169_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln39_8_fu_1181_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln32_11_fu_1115_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln33_fu_1205_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1420_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln39_3_fu_1228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_5_fu_1219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln39_fu_1334_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_9_fu_1339_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln39_1_fu_1351_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln36_fu_1345_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln39_4_fu_1360_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_1370_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_fu_1388_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_fu_1378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_fu_1403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln47_1_fu_1406_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln47_2_fu_1411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1420_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1420_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_1420_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component network_mux_83_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mux_1287_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        din81_WIDTH : INTEGER;
        din82_WIDTH : INTEGER;
        din83_WIDTH : INTEGER;
        din84_WIDTH : INTEGER;
        din85_WIDTH : INTEGER;
        din86_WIDTH : INTEGER;
        din87_WIDTH : INTEGER;
        din88_WIDTH : INTEGER;
        din89_WIDTH : INTEGER;
        din90_WIDTH : INTEGER;
        din91_WIDTH : INTEGER;
        din92_WIDTH : INTEGER;
        din93_WIDTH : INTEGER;
        din94_WIDTH : INTEGER;
        din95_WIDTH : INTEGER;
        din96_WIDTH : INTEGER;
        din97_WIDTH : INTEGER;
        din98_WIDTH : INTEGER;
        din99_WIDTH : INTEGER;
        din100_WIDTH : INTEGER;
        din101_WIDTH : INTEGER;
        din102_WIDTH : INTEGER;
        din103_WIDTH : INTEGER;
        din104_WIDTH : INTEGER;
        din105_WIDTH : INTEGER;
        din106_WIDTH : INTEGER;
        din107_WIDTH : INTEGER;
        din108_WIDTH : INTEGER;
        din109_WIDTH : INTEGER;
        din110_WIDTH : INTEGER;
        din111_WIDTH : INTEGER;
        din112_WIDTH : INTEGER;
        din113_WIDTH : INTEGER;
        din114_WIDTH : INTEGER;
        din115_WIDTH : INTEGER;
        din116_WIDTH : INTEGER;
        din117_WIDTH : INTEGER;
        din118_WIDTH : INTEGER;
        din119_WIDTH : INTEGER;
        din120_WIDTH : INTEGER;
        din121_WIDTH : INTEGER;
        din122_WIDTH : INTEGER;
        din123_WIDTH : INTEGER;
        din124_WIDTH : INTEGER;
        din125_WIDTH : INTEGER;
        din126_WIDTH : INTEGER;
        din127_WIDTH : INTEGER;
        din128_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (15 downto 0);
        din65 : IN STD_LOGIC_VECTOR (15 downto 0);
        din66 : IN STD_LOGIC_VECTOR (15 downto 0);
        din67 : IN STD_LOGIC_VECTOR (15 downto 0);
        din68 : IN STD_LOGIC_VECTOR (15 downto 0);
        din69 : IN STD_LOGIC_VECTOR (15 downto 0);
        din70 : IN STD_LOGIC_VECTOR (15 downto 0);
        din71 : IN STD_LOGIC_VECTOR (15 downto 0);
        din72 : IN STD_LOGIC_VECTOR (15 downto 0);
        din73 : IN STD_LOGIC_VECTOR (15 downto 0);
        din74 : IN STD_LOGIC_VECTOR (15 downto 0);
        din75 : IN STD_LOGIC_VECTOR (15 downto 0);
        din76 : IN STD_LOGIC_VECTOR (15 downto 0);
        din77 : IN STD_LOGIC_VECTOR (15 downto 0);
        din78 : IN STD_LOGIC_VECTOR (15 downto 0);
        din79 : IN STD_LOGIC_VECTOR (15 downto 0);
        din80 : IN STD_LOGIC_VECTOR (15 downto 0);
        din81 : IN STD_LOGIC_VECTOR (15 downto 0);
        din82 : IN STD_LOGIC_VECTOR (15 downto 0);
        din83 : IN STD_LOGIC_VECTOR (15 downto 0);
        din84 : IN STD_LOGIC_VECTOR (15 downto 0);
        din85 : IN STD_LOGIC_VECTOR (15 downto 0);
        din86 : IN STD_LOGIC_VECTOR (15 downto 0);
        din87 : IN STD_LOGIC_VECTOR (15 downto 0);
        din88 : IN STD_LOGIC_VECTOR (15 downto 0);
        din89 : IN STD_LOGIC_VECTOR (15 downto 0);
        din90 : IN STD_LOGIC_VECTOR (15 downto 0);
        din91 : IN STD_LOGIC_VECTOR (15 downto 0);
        din92 : IN STD_LOGIC_VECTOR (15 downto 0);
        din93 : IN STD_LOGIC_VECTOR (15 downto 0);
        din94 : IN STD_LOGIC_VECTOR (15 downto 0);
        din95 : IN STD_LOGIC_VECTOR (15 downto 0);
        din96 : IN STD_LOGIC_VECTOR (15 downto 0);
        din97 : IN STD_LOGIC_VECTOR (15 downto 0);
        din98 : IN STD_LOGIC_VECTOR (15 downto 0);
        din99 : IN STD_LOGIC_VECTOR (15 downto 0);
        din100 : IN STD_LOGIC_VECTOR (15 downto 0);
        din101 : IN STD_LOGIC_VECTOR (15 downto 0);
        din102 : IN STD_LOGIC_VECTOR (15 downto 0);
        din103 : IN STD_LOGIC_VECTOR (15 downto 0);
        din104 : IN STD_LOGIC_VECTOR (15 downto 0);
        din105 : IN STD_LOGIC_VECTOR (15 downto 0);
        din106 : IN STD_LOGIC_VECTOR (15 downto 0);
        din107 : IN STD_LOGIC_VECTOR (15 downto 0);
        din108 : IN STD_LOGIC_VECTOR (15 downto 0);
        din109 : IN STD_LOGIC_VECTOR (15 downto 0);
        din110 : IN STD_LOGIC_VECTOR (15 downto 0);
        din111 : IN STD_LOGIC_VECTOR (15 downto 0);
        din112 : IN STD_LOGIC_VECTOR (15 downto 0);
        din113 : IN STD_LOGIC_VECTOR (15 downto 0);
        din114 : IN STD_LOGIC_VECTOR (15 downto 0);
        din115 : IN STD_LOGIC_VECTOR (15 downto 0);
        din116 : IN STD_LOGIC_VECTOR (15 downto 0);
        din117 : IN STD_LOGIC_VECTOR (15 downto 0);
        din118 : IN STD_LOGIC_VECTOR (15 downto 0);
        din119 : IN STD_LOGIC_VECTOR (15 downto 0);
        din120 : IN STD_LOGIC_VECTOR (15 downto 0);
        din121 : IN STD_LOGIC_VECTOR (15 downto 0);
        din122 : IN STD_LOGIC_VECTOR (15 downto 0);
        din123 : IN STD_LOGIC_VECTOR (15 downto 0);
        din124 : IN STD_LOGIC_VECTOR (15 downto 0);
        din125 : IN STD_LOGIC_VECTOR (15 downto 0);
        din126 : IN STD_LOGIC_VECTOR (15 downto 0);
        din127 : IN STD_LOGIC_VECTOR (15 downto 0);
        din128 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_mac_muladd_9ns_5ns_9s_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    network_mux_83_16_1_1_U54 : component network_mux_83_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_BD1,
        din1 => ap_const_lv16_FCD1,
        din2 => ap_const_lv16_FEE5,
        din3 => ap_const_lv16_1368,
        din4 => ap_const_lv16_F701,
        din5 => ap_const_lv16_FF75,
        din6 => ap_const_lv16_FFCC,
        din7 => ap_const_lv16_EC3A,
        din8 => trunc_ln25_fu_596_p1,
        dout => tmp_4_fu_600_p10);

    network_mux_1287_16_1_1_U55 : component network_mux_1287_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 16,
        din65_WIDTH => 16,
        din66_WIDTH => 16,
        din67_WIDTH => 16,
        din68_WIDTH => 16,
        din69_WIDTH => 16,
        din70_WIDTH => 16,
        din71_WIDTH => 16,
        din72_WIDTH => 16,
        din73_WIDTH => 16,
        din74_WIDTH => 16,
        din75_WIDTH => 16,
        din76_WIDTH => 16,
        din77_WIDTH => 16,
        din78_WIDTH => 16,
        din79_WIDTH => 16,
        din80_WIDTH => 16,
        din81_WIDTH => 16,
        din82_WIDTH => 16,
        din83_WIDTH => 16,
        din84_WIDTH => 16,
        din85_WIDTH => 16,
        din86_WIDTH => 16,
        din87_WIDTH => 16,
        din88_WIDTH => 16,
        din89_WIDTH => 16,
        din90_WIDTH => 16,
        din91_WIDTH => 16,
        din92_WIDTH => 16,
        din93_WIDTH => 16,
        din94_WIDTH => 16,
        din95_WIDTH => 16,
        din96_WIDTH => 16,
        din97_WIDTH => 16,
        din98_WIDTH => 16,
        din99_WIDTH => 16,
        din100_WIDTH => 16,
        din101_WIDTH => 16,
        din102_WIDTH => 16,
        din103_WIDTH => 16,
        din104_WIDTH => 16,
        din105_WIDTH => 16,
        din106_WIDTH => 16,
        din107_WIDTH => 16,
        din108_WIDTH => 16,
        din109_WIDTH => 16,
        din110_WIDTH => 16,
        din111_WIDTH => 16,
        din112_WIDTH => 16,
        din113_WIDTH => 16,
        din114_WIDTH => 16,
        din115_WIDTH => 16,
        din116_WIDTH => 16,
        din117_WIDTH => 16,
        din118_WIDTH => 16,
        din119_WIDTH => 16,
        din120_WIDTH => 16,
        din121_WIDTH => 16,
        din122_WIDTH => 16,
        din123_WIDTH => 16,
        din124_WIDTH => 16,
        din125_WIDTH => 16,
        din126_WIDTH => 16,
        din127_WIDTH => 16,
        din128_WIDTH => 7,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_1EE6,
        din1 => ap_const_lv16_6D7,
        din2 => ap_const_lv16_23B,
        din3 => ap_const_lv16_14AC,
        din4 => ap_const_lv16_F2E2,
        din5 => ap_const_lv16_321,
        din6 => ap_const_lv16_234F,
        din7 => ap_const_lv16_F5BA,
        din8 => ap_const_lv16_FD84,
        din9 => ap_const_lv16_D5F7,
        din10 => ap_const_lv16_F3A4,
        din11 => ap_const_lv16_F68D,
        din12 => ap_const_lv16_FCBD,
        din13 => ap_const_lv16_FD7C,
        din14 => ap_const_lv16_F43B,
        din15 => ap_const_lv16_FFEB,
        din16 => ap_const_lv16_FAF6,
        din17 => ap_const_lv16_566,
        din18 => ap_const_lv16_EBE2,
        din19 => ap_const_lv16_15CE,
        din20 => ap_const_lv16_FA74,
        din21 => ap_const_lv16_44,
        din22 => ap_const_lv16_F7FF,
        din23 => ap_const_lv16_A70,
        din24 => ap_const_lv16_F0EB,
        din25 => ap_const_lv16_F43B,
        din26 => ap_const_lv16_E2B,
        din27 => ap_const_lv16_FC21,
        din28 => ap_const_lv16_E92F,
        din29 => ap_const_lv16_FDAC,
        din30 => ap_const_lv16_F62D,
        din31 => ap_const_lv16_E32,
        din32 => ap_const_lv16_DE9A,
        din33 => ap_const_lv16_2A9,
        din34 => ap_const_lv16_5E1,
        din35 => ap_const_lv16_164D,
        din36 => ap_const_lv16_BB2,
        din37 => ap_const_lv16_F994,
        din38 => ap_const_lv16_198A,
        din39 => ap_const_lv16_931,
        din40 => ap_const_lv16_F5F2,
        din41 => ap_const_lv16_FB6E,
        din42 => ap_const_lv16_EDCB,
        din43 => ap_const_lv16_FEC3,
        din44 => ap_const_lv16_FDDD,
        din45 => ap_const_lv16_92F,
        din46 => ap_const_lv16_B1,
        din47 => ap_const_lv16_4BB,
        din48 => ap_const_lv16_FBF3,
        din49 => ap_const_lv16_5E5,
        din50 => ap_const_lv16_FC43,
        din51 => ap_const_lv16_672,
        din52 => ap_const_lv16_DFCA,
        din53 => ap_const_lv16_9FA,
        din54 => ap_const_lv16_FC7B,
        din55 => ap_const_lv16_F39A,
        din56 => ap_const_lv16_F770,
        din57 => ap_const_lv16_FA64,
        din58 => ap_const_lv16_EA70,
        din59 => ap_const_lv16_A02,
        din60 => ap_const_lv16_FDC5,
        din61 => ap_const_lv16_F104,
        din62 => ap_const_lv16_F867,
        din63 => ap_const_lv16_B91,
        din64 => ap_const_lv16_F5E2,
        din65 => ap_const_lv16_65F,
        din66 => ap_const_lv16_FD5D,
        din67 => ap_const_lv16_1D5,
        din68 => ap_const_lv16_90A,
        din69 => ap_const_lv16_FD85,
        din70 => ap_const_lv16_E7F3,
        din71 => ap_const_lv16_A73,
        din72 => ap_const_lv16_F33F,
        din73 => ap_const_lv16_FCDE,
        din74 => ap_const_lv16_EFBA,
        din75 => ap_const_lv16_EC4,
        din76 => ap_const_lv16_FBEE,
        din77 => ap_const_lv16_6C8,
        din78 => ap_const_lv16_912,
        din79 => ap_const_lv16_F4ED,
        din80 => ap_const_lv16_FF9F,
        din81 => ap_const_lv16_867,
        din82 => ap_const_lv16_61E,
        din83 => ap_const_lv16_F1C9,
        din84 => ap_const_lv16_294,
        din85 => ap_const_lv16_18D9,
        din86 => ap_const_lv16_282,
        din87 => ap_const_lv16_727,
        din88 => ap_const_lv16_F14D,
        din89 => ap_const_lv16_FD35,
        din90 => ap_const_lv16_FF64,
        din91 => ap_const_lv16_FF76,
        din92 => ap_const_lv16_D742,
        din93 => ap_const_lv16_FA94,
        din94 => ap_const_lv16_F26,
        din95 => ap_const_lv16_F932,
        din96 => ap_const_lv16_FF28,
        din97 => ap_const_lv16_90F,
        din98 => ap_const_lv16_2F1,
        din99 => ap_const_lv16_F5DA,
        din100 => ap_const_lv16_FB76,
        din101 => ap_const_lv16_FDB2,
        din102 => ap_const_lv16_FEB,
        din103 => ap_const_lv16_B4E,
        din104 => ap_const_lv16_773,
        din105 => ap_const_lv16_1161,
        din106 => ap_const_lv16_122F,
        din107 => ap_const_lv16_2B7,
        din108 => ap_const_lv16_96A,
        din109 => ap_const_lv16_F7C,
        din110 => ap_const_lv16_F53F,
        din111 => ap_const_lv16_F212,
        din112 => ap_const_lv16_FDFE,
        din113 => ap_const_lv16_E0B,
        din114 => ap_const_lv16_1A37,
        din115 => ap_const_lv16_23FF,
        din116 => ap_const_lv16_3EA,
        din117 => ap_const_lv16_FE4A,
        din118 => ap_const_lv16_8B7,
        din119 => ap_const_lv16_BF,
        din120 => ap_const_lv16_E79E,
        din121 => ap_const_lv16_6CF,
        din122 => ap_const_lv16_F1C1,
        din123 => ap_const_lv16_FAB,
        din124 => ap_const_lv16_5A6,
        din125 => ap_const_lv16_CEE,
        din126 => ap_const_lv16_DC13,
        din127 => ap_const_lv16_FE39,
        din128 => tmp_5_fu_655_p129,
        dout => tmp_5_fu_655_p130);

    network_mux_164_32_1_1_U56 : component network_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => kernel_buffer_15_fu_386,
        din1 => kernel_buffer_15_45_fu_390,
        din2 => kernel_buffer_15_46_fu_394,
        din3 => kernel_buffer_15_47_fu_398,
        din4 => kernel_buffer_15_48_fu_402,
        din5 => kernel_buffer_15_49_fu_406,
        din6 => kernel_buffer_15_50_fu_410,
        din7 => kernel_buffer_15_51_fu_414,
        din8 => kernel_buffer_15_52_fu_418,
        din9 => kernel_buffer_15_53_fu_422,
        din10 => kernel_buffer_15_54_fu_426,
        din11 => kernel_buffer_15_55_fu_430,
        din12 => kernel_buffer_15_56_fu_434,
        din13 => kernel_buffer_15_57_fu_438,
        din14 => kernel_buffer_15_58_fu_442,
        din15 => kernel_buffer_15_016_fu_446,
        din16 => trunc_ln39_reg_1612_pp1_iter1_reg,
        dout => tmp_fu_1294_p18);

    network_mac_muladd_9ns_5ns_9s_13_1_1_U57 : component network_mac_muladd_9ns_5ns_9s_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_1420_p0,
        din1 => grp_fu_1420_p1,
        din2 => select_ln36_12_reg_1607,
        dout => grp_fu_1420_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_reg_553_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                buffer_0_reg_553 <= sext_ln34_reg_1544;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_1567_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
                buffer_0_reg_553 <= buffer_fu_1364_p2;
            end if; 
        end if;
    end process;

    i_0_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_498 <= i_fu_640_p2;
            elsif (((icmp_ln24_fu_584_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_498 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    in_d_0_reg_563_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                in_d_0_reg_563 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_1567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                in_d_0_reg_563 <= in_d_reg_1617;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten18_reg_509 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten18_reg_509 <= add_ln31_fu_1051_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_531_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_531 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_531 <= select_ln33_fu_1211_p3;
            end if; 
        end if;
    end process;

    out_d_0_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                out_d_0_reg_476 <= out_d_reg_1539;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_476 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_h_0_reg_520 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
                out_h_0_reg_520 <= select_ln31_fu_1141_p3;
            end if; 
        end if;
    end process;

    out_w_0_reg_542_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_0_reg_542 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_1567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                out_w_0_reg_542 <= select_ln36_11_reg_1601;
            end if; 
        end if;
    end process;

    phi_mul_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul_reg_487 <= add_ln24_reg_1530;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_487 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln24_reg_1530 <= add_ln24_fu_578_p2;
                out_d_reg_1539 <= out_d_fu_590_p2;
                    zext_ln24_reg_1525(10 downto 0) <= zext_ln24_fu_574_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln36_4_fu_1236_p2 = ap_const_lv1_1))) then
                add_ln47_reg_1637 <= add_ln47_fu_1241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln47_reg_1637_pp1_iter2_reg <= add_ln47_reg_1637;
                add_ln47_reg_1637_pp1_iter3_reg <= add_ln47_reg_1637_pp1_iter2_reg;
                and_ln32_reg_1586_pp1_iter2_reg <= and_ln32_reg_1586_pp1_iter1_reg;
                and_ln32_reg_1586_pp1_iter3_reg <= and_ln32_reg_1586_pp1_iter2_reg;
                icmp_ln31_reg_1567_pp1_iter2_reg <= icmp_ln31_reg_1567_pp1_iter1_reg;
                icmp_ln31_reg_1567_pp1_iter3_reg <= icmp_ln31_reg_1567_pp1_iter2_reg;
                icmp_ln33_reg_1576_pp1_iter2_reg <= icmp_ln33_reg_1576_pp1_iter1_reg;
                icmp_ln33_reg_1576_pp1_iter3_reg <= icmp_ln33_reg_1576_pp1_iter2_reg;
                icmp_ln36_4_reg_1633_pp1_iter2_reg <= icmp_ln36_4_reg_1633;
                icmp_ln36_4_reg_1633_pp1_iter3_reg <= icmp_ln36_4_reg_1633_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                and_ln32_reg_1586 <= and_ln32_fu_1135_p2;
                icmp_ln33_reg_1576 <= icmp_ln33_fu_1063_p2;
                    select_ln32_10_reg_1581(8 downto 1) <= select_ln32_10_fu_1107_p3(8 downto 1);
                select_ln36_10_reg_1596 <= select_ln36_10_fu_1161_p3;
                select_ln36_12_reg_1607 <= select_ln36_12_fu_1187_p3;
                trunc_ln39_reg_1612 <= trunc_ln39_fu_1195_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                and_ln32_reg_1586_pp1_iter1_reg <= and_ln32_reg_1586;
                icmp_ln31_reg_1567 <= icmp_ln31_fu_1045_p2;
                icmp_ln31_reg_1567_pp1_iter1_reg <= icmp_ln31_reg_1567;
                icmp_ln33_reg_1576_pp1_iter1_reg <= icmp_ln33_reg_1576;
                trunc_ln39_reg_1612_pp1_iter1_reg <= trunc_ln39_reg_1612;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_1567 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln36_4_reg_1633 <= icmp_ln36_4_fu_1236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_1045_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                in_d_reg_1617 <= in_d_fu_1199_p2;
                select_ln36_11_reg_1601 <= select_ln36_11_fu_1173_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_1567_pp1_iter1_reg = ap_const_lv1_0))) then
                input_load_reg_1642 <= input_r_q0;
                tmp_reg_1647 <= tmp_fu_1294_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_F) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_016_fu_446 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_45_fu_390 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_46_fu_394 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_47_fu_398 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_48_fu_402 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_49_fu_406 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_50_fu_410 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_51_fu_414 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_52_fu_418 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_9) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_53_fu_422 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_A) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_54_fu_426 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_B) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_55_fu_430 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_C) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_56_fu_434 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_D) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_57_fu_438 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (trunc_ln28_fu_921_p1 = ap_const_lv4_E) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_58_fu_442 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln28_fu_921_p1 = ap_const_lv4_0))) then
                kernel_buffer_15_fu_386 <= kernel_buffer_0_fu_917_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_1567_pp1_iter2_reg = ap_const_lv1_0))) then
                mul_ln39_reg_1652 <= mul_ln39_fu_1334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_584_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sext_ln34_reg_1544 <= sext_ln34_fu_622_p1;
                    shl_ln_reg_1551(6 downto 4) <= shl_ln_fu_626_p3(6 downto 4);
            end if;
        end if;
    end process;
    zext_ln24_reg_1525(11) <= '0';
    shl_ln_reg_1551(3 downto 0) <= "0000";
    select_ln32_10_reg_1581(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_584_p2, ap_CS_fsm_state3, icmp_ln31_fu_1045_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, icmp_ln26_fu_634_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln24_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln26_fu_634_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln31_fu_1045_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((icmp_ln31_fu_1045_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln24_fu_578_p2 <= std_logic_vector(unsigned(phi_mul_reg_487) + unsigned(ap_const_lv11_C4));
    add_ln31_fu_1051_p2 <= std_logic_vector(unsigned(indvar_flatten18_reg_509) + unsigned(ap_const_lv12_1));
    add_ln33_fu_1205_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_531) + unsigned(ap_const_lv9_1));
    add_ln39_8_fu_1181_p2 <= std_logic_vector(unsigned(zext_ln36_4_fu_1169_p1) + unsigned(select_ln32_10_fu_1107_p3));
    add_ln39_fu_1039_p2 <= std_logic_vector(unsigned(sub_ln39_fu_1029_p2) + unsigned(zext_ln36_fu_1035_p1));
    add_ln47_1_fu_1406_p2 <= std_logic_vector(unsigned(zext_ln24_reg_1525) + unsigned(sext_ln47_fu_1403_p1));
    add_ln47_fu_1241_p2 <= std_logic_vector(unsigned(zext_ln36_5_fu_1219_p1) + unsigned(select_ln32_10_reg_1581));
    and_ln32_fu_1135_p2 <= (xor_ln32_fu_1123_p2 and icmp_ln36_fu_1129_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln31_fu_1045_p2)
    begin
        if ((icmp_ln31_fu_1045_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_584_p2)
    begin
        if ((((icmp_ln24_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_in_d_0_phi_fu_567_p4_assign_proc : process(in_d_0_reg_563, icmp_ln31_reg_1567, ap_CS_fsm_pp1_stage0, in_d_reg_1617, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_1567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_in_d_0_phi_fu_567_p4 <= in_d_reg_1617;
        else 
            ap_phi_mux_in_d_0_phi_fu_567_p4 <= in_d_0_reg_563;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_546_p4_assign_proc : process(out_w_0_reg_542, icmp_ln31_reg_1567, ap_CS_fsm_pp1_stage0, select_ln36_11_reg_1601, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_1567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_out_w_0_phi_fu_546_p4 <= select_ln36_11_reg_1601;
        else 
            ap_phi_mux_out_w_0_phi_fu_546_p4 <= out_w_0_reg_542;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_584_p2)
    begin
        if (((icmp_ln24_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_1364_p2 <= std_logic_vector(unsigned(select_ln36_fu_1345_p3) + unsigned(sext_ln39_4_fu_1360_p1));
    grp_fu_1420_p0 <= ap_const_lv13_C4(9 - 1 downto 0);
    grp_fu_1420_p1 <= grp_fu_1420_p10(5 - 1 downto 0);
    grp_fu_1420_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_10_reg_1596),13));
    i_fu_640_p2 <= std_logic_vector(unsigned(i_0_reg_498) + unsigned(ap_const_lv5_1));
    icmp_ln24_fu_584_p2 <= "1" when (out_d_0_reg_476 = ap_const_lv4_8) else "0";
    icmp_ln26_fu_634_p2 <= "1" when (i_0_reg_498 = ap_const_lv5_10) else "0";
    icmp_ln31_fu_1045_p2 <= "1" when (indvar_flatten18_reg_509 = ap_const_lv12_C40) else "0";
    icmp_ln33_fu_1063_p2 <= "1" when (indvar_flatten_reg_531 = ap_const_lv9_E0) else "0";
    icmp_ln36_4_fu_1236_p2 <= "1" when (in_d_reg_1617 = ap_const_lv5_10) else "0";
    icmp_ln36_fu_1129_p2 <= "1" when (ap_phi_mux_in_d_0_phi_fu_567_p4 = ap_const_lv5_10) else "0";
    in_d_fu_1199_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln36_10_fu_1161_p3));
    input_r_address0 <= zext_ln39_4_fu_1231_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        kernel_buffer_0_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_655_p130),32));

    mul_ln39_fu_1334_p0 <= input_load_reg_1642;
    mul_ln39_fu_1334_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln39_fu_1334_p0) * signed(tmp_reg_1647))), 32));
    or_ln36_fu_1155_p2 <= (icmp_ln33_fu_1063_p2 or and_ln32_fu_1135_p2);
    out_d_fu_590_p2 <= std_logic_vector(unsigned(out_d_0_reg_476) + unsigned(ap_const_lv4_1));
    out_h_fu_1057_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(out_h_0_reg_520));
    out_w_fu_1149_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln32_fu_1069_p3));
    output_r_address0 <= zext_ln47_fu_1415_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln46_fu_1378_p1 and select_ln46_fu_1388_p3);

    output_r_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln36_4_reg_1633_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln36_4_reg_1633_pp1_iter3_reg = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln31_fu_1141_p3 <= 
        out_h_fu_1057_p2 when (icmp_ln33_fu_1063_p2(0) = '1') else 
        out_h_0_reg_520;
    select_ln32_10_fu_1107_p3 <= 
        sub_ln39_4_fu_1101_p2 when (icmp_ln33_fu_1063_p2(0) = '1') else 
        sub_ln39_fu_1029_p2;
    select_ln32_11_fu_1115_p3 <= 
        sub_ln39_4_fu_1101_p2 when (icmp_ln33_fu_1063_p2(0) = '1') else 
        add_ln39_fu_1039_p2;
    select_ln32_9_fu_1339_p3 <= 
        sext_ln34_reg_1544 when (icmp_ln33_reg_1576_pp1_iter3_reg(0) = '1') else 
        buffer_0_reg_553;
    select_ln32_fu_1069_p3 <= 
        ap_const_lv4_0 when (icmp_ln33_fu_1063_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_546_p4;
    select_ln33_fu_1211_p3 <= 
        ap_const_lv9_1 when (icmp_ln33_fu_1063_p2(0) = '1') else 
        add_ln33_fu_1205_p2;
    select_ln36_10_fu_1161_p3 <= 
        ap_const_lv5_0 when (or_ln36_fu_1155_p2(0) = '1') else 
        ap_phi_mux_in_d_0_phi_fu_567_p4;
    select_ln36_11_fu_1173_p3 <= 
        out_w_fu_1149_p2 when (and_ln32_fu_1135_p2(0) = '1') else 
        select_ln32_fu_1069_p3;
    select_ln36_12_fu_1187_p3 <= 
        add_ln39_8_fu_1181_p2 when (and_ln32_fu_1135_p2(0) = '1') else 
        select_ln32_11_fu_1115_p3;
    select_ln36_fu_1345_p3 <= 
        sext_ln34_reg_1544 when (and_ln32_reg_1586_pp1_iter3_reg(0) = '1') else 
        select_ln32_9_fu_1339_p3;
    select_ln46_fu_1388_p3 <= 
        ap_const_lv16_FFFF when (xor_ln46_fu_1382_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln34_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_600_p10),24));

        sext_ln39_3_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1420_p3),32));

        sext_ln39_4_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln39_1_fu_1351_p4),24));

        sext_ln47_2_fu_1411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_1_fu_1406_p2),32));

        sext_ln47_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_reg_1637_pp1_iter3_reg),12));

    shl_ln39_2_fu_1017_p3 <= (out_h_0_reg_520 & ap_const_lv1_0);
    shl_ln39_2_mid1_fu_1089_p3 <= (out_h_fu_1057_p2 & ap_const_lv1_0);
    shl_ln39_mid1_fu_1077_p3 <= (out_h_fu_1057_p2 & ap_const_lv4_0);
    shl_ln3_fu_1005_p3 <= (out_h_0_reg_520 & ap_const_lv4_0);
    shl_ln_fu_626_p3 <= (trunc_ln25_fu_596_p1 & ap_const_lv4_0);
    sub_ln39_4_fu_1101_p2 <= std_logic_vector(unsigned(zext_ln39_fu_1085_p1) - unsigned(zext_ln39_15_fu_1097_p1));
    sub_ln39_fu_1029_p2 <= std_logic_vector(unsigned(zext_ln39_7_fu_1013_p1) - unsigned(zext_ln39_8_fu_1025_p1));
    tmp_5_fu_655_p129 <= std_logic_vector(unsigned(shl_ln_reg_1551) + unsigned(zext_ln28_fu_646_p1));
    tmp_6_fu_1370_p3 <= buffer_fu_1364_p2(23 downto 23);
    trunc_ln25_fu_596_p1 <= out_d_0_reg_476(3 - 1 downto 0);
    trunc_ln28_fu_921_p1 <= i_0_reg_498(4 - 1 downto 0);
    trunc_ln39_1_fu_1351_p4 <= mul_ln39_reg_1652(31 downto 13);
    trunc_ln39_fu_1195_p1 <= select_ln36_10_fu_1161_p3(4 - 1 downto 0);
    trunc_ln46_fu_1378_p1 <= buffer_fu_1364_p2(16 - 1 downto 0);
    xor_ln32_fu_1123_p2 <= (icmp_ln33_fu_1063_p2 xor ap_const_lv1_1);
    xor_ln46_fu_1382_p2 <= (tmp_6_fu_1370_p3 xor ap_const_lv1_1);
    zext_ln24_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_487),12));
    zext_ln28_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_498),7));
    zext_ln36_4_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_1149_p2),9));
    zext_ln36_5_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_11_reg_1601),9));
    zext_ln36_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_w_0_phi_fu_546_p4),9));
    zext_ln39_15_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_2_mid1_fu_1089_p3),9));
    zext_ln39_4_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln39_3_fu_1228_p1),64));
    zext_ln39_7_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_1005_p3),9));
    zext_ln39_8_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_2_fu_1017_p3),9));
    zext_ln39_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_mid1_fu_1077_p3),9));
    zext_ln47_fu_1415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_2_fu_1411_p1),64));
end behav;
