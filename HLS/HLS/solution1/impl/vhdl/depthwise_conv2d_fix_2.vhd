-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce1 : OUT STD_LOGIC;
    kernel_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_486 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_491 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal output_width_cast_fu_499_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast_reg_1943 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_fu_503_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln28_reg_1951 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_1_fu_507_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln36_1_reg_1956 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln36_fu_511_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_reg_1963 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_1_cast_cas_fu_515_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln36_1_cast_cas_reg_1968 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_fu_519_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1973 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln19_fu_523_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_reg_1978 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln19_98_fu_528_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_98_reg_1983 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_539_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1991 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_addr_reg_1996 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_addr_reg_2001 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_1_reg_2006 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_2_reg_2011 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_3_reg_2016 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_4_reg_2021 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_5_reg_2026 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_6_reg_2031 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_7_reg_2036 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_8_reg_2041 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_fu_674_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_2049 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp5_0_0_0_cast_fu_699_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_0_0_cast_reg_2054 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln20_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_0_1_0_cast_fu_718_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_1_0_cast_reg_2066 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_0_cast_fu_737_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_0_cast_reg_2078 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_0_cast_fu_756_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_0_cast_reg_2090 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln21_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_2098 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln28_12_fu_765_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_12_reg_2102 : STD_LOGIC_VECTOR (16 downto 0);
    signal kernel_0_load_reg_2114 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_14_fu_785_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_14_reg_2119 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln28_1_fu_799_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln28_1_reg_2132 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_16_fu_805_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_16_reg_2137 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln21_1_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_1_reg_2150 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_load_1_reg_2154 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_195_reg_2159 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_2_reg_2164 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_196_reg_2179 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal kernel_0_load_3_reg_2184 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_197_reg_2189 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_4_reg_2194 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_198_reg_2209 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal kernel_0_load_5_reg_2214 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_199_reg_2219 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_6_reg_2224 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_1_fu_882_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_1_reg_2239 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal trunc_ln_reg_2246 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_2_fu_894_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_2_reg_2251 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_3_fu_898_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_3_reg_2256 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_4_fu_910_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_4_reg_2263 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_5_fu_913_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_5_reg_2268 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_7_fu_928_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_7_reg_2275 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_8_fu_940_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_8_reg_2282 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_9_fu_943_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_9_reg_2287 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_3_reg_2294 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_10_fu_955_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_10_reg_2299 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_11_fu_958_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_11_reg_2304 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_4_reg_2311 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_13_fu_973_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_13_reg_2316 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_14_fu_985_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_14_reg_2323 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_15_fu_989_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_15_reg_2328 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_16_fu_1002_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_16_reg_2335 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_17_fu_1006_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_17_reg_2340 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_20_fu_1025_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_20_reg_2347 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_24_fu_1037_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_24_reg_2352 : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_load_reg_2357 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal trunc_ln28_8_reg_2364 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_27_fu_1087_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_27_reg_2369 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln28_2_fu_1102_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln28_2_reg_2380 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_25_fu_1108_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln28_25_reg_2385 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_11_reg_2399 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_14_reg_2404 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln21_2_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_2_reg_2409 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln28_19_fu_1157_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_19_reg_2413 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln28_36_fu_1193_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_36_reg_2429 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_12_reg_2444 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sext_ln28_21_fu_1230_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_21_reg_2449 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_13_reg_2455 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln28_23_fu_1256_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln28_23_reg_2460 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_40_fu_1275_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_40_reg_2466 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_17_reg_2471 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln28_43_fu_1323_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_43_reg_2476 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_20_reg_2487 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_23_reg_2492 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln21_3_fu_1356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_3_reg_2497 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln28_49_fu_1405_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_49_reg_2511 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_21_reg_2516 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal trunc_ln28_22_reg_2521 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_53_fu_1461_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_53_reg_2526 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_56_fu_1509_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_56_reg_2531 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln28_58_fu_1524_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_58_reg_2542 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_29_reg_2553 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_32_reg_2558 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_64_fu_1557_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_64_reg_2563 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_3_fu_1562_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln36_3_reg_2568 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln21_fu_1566_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_reg_2573 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln28_62_fu_1616_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_62_reg_2588 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_63_fu_1620_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_63_reg_2593 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_66_fu_1629_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_66_reg_2598 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_30_reg_2603 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln28_31_reg_2608 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_70_fu_1701_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_70_reg_2623 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal out_d_0_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_439 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_451 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_0_reg_463 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_0_reg_474 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln23_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_3_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_4_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_5_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_6_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_7_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_8_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_9_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_10_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_11_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_13_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_15_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_17_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_18_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_19_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_20_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_21_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_22_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_23_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_2_fu_1073_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_24_fu_1097_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_26_fu_1117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_27_fu_1174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_28_fu_1183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_29_fu_1203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_30_fu_1212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_3_fu_1309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_31_fu_1333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_32_fu_1386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_33_fu_1395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_4_fu_1495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_34_fu_1519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_35_fu_1534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_36_fu_1602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_37_fu_1611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_38_fu_1661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_39_fu_1665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_5_fu_1726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln28_26_fu_1062_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_42_fu_1298_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_55_fu_1484_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_72_fu_1719_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_width_cast_fu_495_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln28_fu_554_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_558_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_1_fu_550_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_2_fu_566_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_fu_570_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_1_fu_581_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_2_fu_592_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_3_fu_603_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_4_fu_614_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_5_fu_625_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_6_fu_636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_7_fu_647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_8_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_3_cast_fu_680_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_0_fu_684_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_0_fu_694_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_0_fu_694_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_0_fu_694_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_1_0_fu_703_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_1_0_fu_713_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_1_0_fu_713_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_1_0_fu_713_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_0_2_0_fu_722_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_2_0_fu_732_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_2_0_fu_732_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_2_0_fu_732_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_0_fu_741_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_0_fu_751_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp7_0_fu_751_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_0_fu_751_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln28_9_fu_769_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln28_fu_779_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_10_fu_789_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_11_fu_809_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_12_fu_824_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_13_fu_833_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_14_fu_842_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_15_fu_851_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_16_fu_860_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_17_fu_869_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_fu_1730_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_1_fu_1737_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_2_fu_1744_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_3_fu_1751_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_4_fu_1758_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_5_fu_1765_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_6_fu_1772_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_7_fu_1779_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_8_fu_1786_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_1_fu_916_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_2_fu_931_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_19_fu_1019_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_s_fu_901_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_6_fu_993_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_7_fu_1010_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_23_fu_1031_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_5_fu_976_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_18_fu_1043_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_22_fu_1053_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_25_fu_1057_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_21_fu_1048_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_fu_1069_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_9_fu_1793_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_28_fu_1092_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_29_fu_1112_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_12_fu_1798_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_15_fu_1803_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_10_fu_1808_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_11_fu_1814_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_30_fu_1170_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_31_fu_1179_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_10_fu_1161_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_35_fu_1188_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_9_fu_1148_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_32_fu_1199_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_33_fu_1208_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_13_fu_1820_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_14_fu_1826_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_16_fu_1832_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_17_fu_1838_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_15_fu_1247_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_16_fu_1260_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_39_fu_1269_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_34_fu_1280_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_38_fu_1289_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_41_fu_1293_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_37_fu_1284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_1_fu_1305_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_18_fu_1844_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_44_fu_1328_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_21_fu_1849_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_24_fu_1854_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_19_fu_1859_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_20_fu_1864_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_45_fu_1382_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_46_fu_1391_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_19_fu_1373_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_48_fu_1400_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_18_fu_1360_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_22_fu_1870_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_23_fu_1875_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_25_fu_1881_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_26_fu_1886_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_24_fu_1433_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_25_fu_1446_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_52_fu_1455_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_47_fu_1466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_51_fu_1475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_54_fu_1479_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_50_fu_1470_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln36_2_fu_1491_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_27_fu_1892_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_57_fu_1514_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_59_fu_1529_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln28_30_fu_1897_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_33_fu_1902_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_26_fu_1500_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_28_fu_1907_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_29_fu_1913_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln28_60_fu_1598_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln28_61_fu_1607_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln28_28_fu_1589_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_65_fu_1624_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_27_fu_1576_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_31_fu_1919_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_32_fu_1925_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_34_fu_1931_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln28_35_fu_1937_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln28_33_fu_1673_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln28_34_fu_1686_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_69_fu_1695_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_68_fu_1710_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_71_fu_1714_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_67_fu_1706_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_9_fu_1793_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_9_fu_1793_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_12_fu_1798_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_12_fu_1798_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_15_fu_1803_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_15_fu_1803_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_10_fu_1808_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_11_fu_1814_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_13_fu_1820_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_14_fu_1826_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_16_fu_1832_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_17_fu_1838_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_18_fu_1844_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_18_fu_1844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_21_fu_1849_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_21_fu_1849_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_24_fu_1854_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_24_fu_1854_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_19_fu_1859_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_19_fu_1859_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_20_fu_1864_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_22_fu_1870_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_22_fu_1870_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_23_fu_1875_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_25_fu_1881_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_25_fu_1881_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_26_fu_1886_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_27_fu_1892_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_27_fu_1892_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_30_fu_1897_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_30_fu_1897_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_33_fu_1902_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_33_fu_1902_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_28_fu_1907_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_29_fu_1913_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_31_fu_1919_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_32_fu_1925_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_34_fu_1931_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln28_35_fu_1937_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp5_0_0_0_fu_694_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_1_0_fu_713_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_2_0_fu_732_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_0_fu_751_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_1_1_U62 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_reg_2114,
        din1 => reg_486,
        dout => mul_ln28_fu_1730_p2);

    network_mul_mul_16s_16s_30_1_1_U63 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_1_reg_2154,
        din1 => reg_491,
        dout => mul_ln28_1_fu_1737_p2);

    network_mul_mul_16s_16s_30_1_1_U64 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_2_reg_2164,
        din1 => input_load_195_reg_2159,
        dout => mul_ln28_2_fu_1744_p2);

    network_mul_mul_16s_16s_30_1_1_U65 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_3_reg_2184,
        din1 => input_load_196_reg_2179,
        dout => mul_ln28_3_fu_1751_p2);

    network_mul_mul_16s_16s_30_1_1_U66 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_4_reg_2194,
        din1 => input_load_197_reg_2189,
        dout => mul_ln28_4_fu_1758_p2);

    network_mul_mul_16s_16s_30_1_1_U67 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_5_reg_2214,
        din1 => input_load_198_reg_2209,
        dout => mul_ln28_5_fu_1765_p2);

    network_mul_mul_16s_16s_30_1_1_U68 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_6_reg_2224,
        din1 => input_load_199_reg_2219,
        dout => mul_ln28_6_fu_1772_p2);

    network_mul_mul_16s_16s_30_1_1_U69 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_q1,
        din1 => input_r_q1,
        dout => mul_ln28_7_fu_1779_p2);

    network_mul_mul_16s_16s_30_1_1_U70 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_q0,
        din1 => input_r_q0,
        dout => mul_ln28_8_fu_1786_p2);

    network_mul_mul_16s_16s_30_1_1_U71 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_9_fu_1793_p0,
        din1 => mul_ln28_9_fu_1793_p1,
        dout => mul_ln28_9_fu_1793_p2);

    network_mul_mul_16s_16s_30_1_1_U72 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_12_fu_1798_p0,
        din1 => mul_ln28_12_fu_1798_p1,
        dout => mul_ln28_12_fu_1798_p2);

    network_mul_mul_16s_16s_30_1_1_U73 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_15_fu_1803_p0,
        din1 => mul_ln28_15_fu_1803_p1,
        dout => mul_ln28_15_fu_1803_p2);

    network_mul_mul_16s_16s_30_1_1_U74 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_10_fu_1808_p0,
        din1 => input_r_q1,
        dout => mul_ln28_10_fu_1808_p2);

    network_mul_mul_16s_16s_30_1_1_U75 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_11_fu_1814_p0,
        din1 => input_r_q0,
        dout => mul_ln28_11_fu_1814_p2);

    network_mul_mul_16s_16s_30_1_1_U76 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_13_fu_1820_p0,
        din1 => reg_486,
        dout => mul_ln28_13_fu_1820_p2);

    network_mul_mul_16s_16s_30_1_1_U77 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_14_fu_1826_p0,
        din1 => reg_491,
        dout => mul_ln28_14_fu_1826_p2);

    network_mul_mul_16s_16s_30_1_1_U78 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_16_fu_1832_p0,
        din1 => input_r_q1,
        dout => mul_ln28_16_fu_1832_p2);

    network_mul_mul_16s_16s_30_1_1_U79 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_17_fu_1838_p0,
        din1 => input_r_q0,
        dout => mul_ln28_17_fu_1838_p2);

    network_mul_mul_16s_16s_30_1_1_U80 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_18_fu_1844_p0,
        din1 => mul_ln28_18_fu_1844_p1,
        dout => mul_ln28_18_fu_1844_p2);

    network_mul_mul_16s_16s_30_1_1_U81 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_21_fu_1849_p0,
        din1 => mul_ln28_21_fu_1849_p1,
        dout => mul_ln28_21_fu_1849_p2);

    network_mul_mul_16s_16s_30_1_1_U82 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_24_fu_1854_p0,
        din1 => mul_ln28_24_fu_1854_p1,
        dout => mul_ln28_24_fu_1854_p2);

    network_mul_mul_16s_16s_30_1_1_U83 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_19_fu_1859_p0,
        din1 => mul_ln28_19_fu_1859_p1,
        dout => mul_ln28_19_fu_1859_p2);

    network_mul_mul_16s_16s_30_1_1_U84 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_20_fu_1864_p0,
        din1 => input_r_q1,
        dout => mul_ln28_20_fu_1864_p2);

    network_mul_mul_16s_16s_30_1_1_U85 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_22_fu_1870_p0,
        din1 => mul_ln28_22_fu_1870_p1,
        dout => mul_ln28_22_fu_1870_p2);

    network_mul_mul_16s_16s_30_1_1_U86 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_23_fu_1875_p0,
        din1 => input_r_q0,
        dout => mul_ln28_23_fu_1875_p2);

    network_mul_mul_16s_16s_30_1_1_U87 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_25_fu_1881_p0,
        din1 => mul_ln28_25_fu_1881_p1,
        dout => mul_ln28_25_fu_1881_p2);

    network_mul_mul_16s_16s_30_1_1_U88 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_26_fu_1886_p0,
        din1 => input_r_q1,
        dout => mul_ln28_26_fu_1886_p2);

    network_mul_mul_16s_16s_30_1_1_U89 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_27_fu_1892_p0,
        din1 => mul_ln28_27_fu_1892_p1,
        dout => mul_ln28_27_fu_1892_p2);

    network_mul_mul_16s_16s_30_1_1_U90 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_30_fu_1897_p0,
        din1 => mul_ln28_30_fu_1897_p1,
        dout => mul_ln28_30_fu_1897_p2);

    network_mul_mul_16s_16s_30_1_1_U91 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_33_fu_1902_p0,
        din1 => mul_ln28_33_fu_1902_p1,
        dout => mul_ln28_33_fu_1902_p2);

    network_mul_mul_16s_16s_30_1_1_U92 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_28_fu_1907_p0,
        din1 => input_r_q0,
        dout => mul_ln28_28_fu_1907_p2);

    network_mul_mul_16s_16s_30_1_1_U93 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_29_fu_1913_p0,
        din1 => input_r_q1,
        dout => mul_ln28_29_fu_1913_p2);

    network_mul_mul_16s_16s_30_1_1_U94 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_31_fu_1919_p0,
        din1 => input_r_q0,
        dout => mul_ln28_31_fu_1919_p2);

    network_mul_mul_16s_16s_30_1_1_U95 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_32_fu_1925_p0,
        din1 => input_r_q1,
        dout => mul_ln28_32_fu_1925_p2);

    network_mul_mul_16s_16s_30_1_1_U96 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_34_fu_1931_p0,
        din1 => input_r_q0,
        dout => mul_ln28_34_fu_1931_p2);

    network_mul_mul_16s_16s_30_1_1_U97 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln28_35_fu_1937_p0,
        din1 => input_r_q1,
        dout => mul_ln28_35_fu_1937_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_0_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_669_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_428 <= out_d_reg_1991;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_0_reg_428 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_533_p2 = ap_const_lv1_0))) then 
                out_h_0_reg_463 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and ((icmp_ln21_reg_2098 = ap_const_lv1_1) or ((icmp_ln21_1_reg_2150 = ap_const_lv1_1) or ((icmp_ln21_3_reg_2497 = ap_const_lv1_1) or (icmp_ln21_2_reg_2409 = ap_const_lv1_1)))))) then 
                out_h_0_reg_463 <= out_h_reg_2049;
            end if; 
        end if;
    end process;

    out_w_0_0_reg_474_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_669_p2 = ap_const_lv1_0))) then 
                out_w_0_0_reg_474 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                out_w_0_0_reg_474 <= add_ln21_reg_2573;
            end if; 
        end if;
    end process;

    phi_mul2_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_669_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_451 <= add_ln19_reg_1978;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_451 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_669_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_439 <= add_ln19_98_reg_1983;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_439 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_486 <= input_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_486 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln19_98_reg_1983 <= add_ln19_98_fu_528_p2;
                add_ln19_reg_1978 <= add_ln19_fu_523_p2;
                out_d_reg_1991 <= out_d_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln21_3_reg_2497 = ap_const_lv1_0) and (icmp_ln21_2_reg_2409 = ap_const_lv1_0) and (icmp_ln21_1_reg_2150 = ap_const_lv1_0) and (icmp_ln21_reg_2098 = ap_const_lv1_0))) then
                add_ln21_reg_2573 <= add_ln21_fu_1566_p2;
                    add_ln28_56_reg_2531(16 downto 2) <= add_ln28_56_fu_1509_p2(16 downto 2);
                    add_ln28_58_reg_2542(16 downto 2) <= add_ln28_58_fu_1524_p2(16 downto 2);
                add_ln28_64_reg_2563 <= add_ln28_64_fu_1557_p2;
                add_ln36_3_reg_2568 <= add_ln36_3_fu_1562_p2;
                trunc_ln28_29_reg_2553 <= mul_ln28_30_fu_1897_p2(29 downto 14);
                trunc_ln28_32_reg_2558 <= mul_ln28_33_fu_1902_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln28_20_reg_2347 <= add_ln28_20_fu_1025_p2;
                add_ln28_24_reg_2352 <= add_ln28_24_fu_1037_p2;
                sext_ln28_10_reg_2299 <= sext_ln28_10_fu_955_p1;
                sext_ln28_11_reg_2304 <= sext_ln28_11_fu_958_p1;
                sext_ln28_13_reg_2316 <= sext_ln28_13_fu_973_p1;
                sext_ln28_14_reg_2323 <= sext_ln28_14_fu_985_p1;
                sext_ln28_15_reg_2328 <= sext_ln28_15_fu_989_p1;
                sext_ln28_16_reg_2335 <= sext_ln28_16_fu_1002_p1;
                sext_ln28_17_reg_2340 <= sext_ln28_17_fu_1006_p1;
                sext_ln28_1_reg_2239 <= sext_ln28_1_fu_882_p1;
                sext_ln28_2_reg_2251 <= sext_ln28_2_fu_894_p1;
                sext_ln28_3_reg_2256 <= sext_ln28_3_fu_898_p1;
                sext_ln28_4_reg_2263 <= sext_ln28_4_fu_910_p1;
                sext_ln28_5_reg_2268 <= sext_ln28_5_fu_913_p1;
                sext_ln28_7_reg_2275 <= sext_ln28_7_fu_928_p1;
                sext_ln28_8_reg_2282 <= sext_ln28_8_fu_940_p1;
                sext_ln28_9_reg_2287 <= sext_ln28_9_fu_943_p1;
                trunc_ln28_3_reg_2294 <= mul_ln28_4_fu_1758_p2(29 downto 14);
                trunc_ln28_4_reg_2311 <= mul_ln28_5_fu_1765_p2(29 downto 14);
                trunc_ln_reg_2246 <= mul_ln28_fu_1730_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_reg_2150 = ap_const_lv1_0))) then
                    add_ln28_27_reg_2369(16 downto 1) <= add_ln28_27_fu_1087_p2(16 downto 1);
                icmp_ln21_2_reg_2409 <= icmp_ln21_2_fu_1140_p2;
                    or_ln28_2_reg_2380(15 downto 2) <= or_ln28_2_fu_1102_p2(15 downto 2);
                trunc_ln28_11_reg_2399 <= mul_ln28_12_fu_1798_p2(29 downto 14);
                trunc_ln28_14_reg_2404 <= mul_ln28_15_fu_1803_p2(29 downto 14);
                trunc_ln28_8_reg_2364 <= mul_ln28_9_fu_1793_p2(29 downto 14);
                    zext_ln28_25_reg_2385(15 downto 2) <= zext_ln28_25_fu_1108_p1(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln28_36_reg_2429 <= add_ln28_36_fu_1193_p2;
                sext_ln28_19_reg_2413 <= sext_ln28_19_fu_1157_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln28_40_reg_2466 <= add_ln28_40_fu_1275_p2;
                sext_ln28_21_reg_2449 <= sext_ln28_21_fu_1230_p1;
                sext_ln28_23_reg_2460 <= sext_ln28_23_fu_1256_p1;
                trunc_ln28_12_reg_2444 <= mul_ln28_13_fu_1820_p2(29 downto 14);
                trunc_ln28_13_reg_2455 <= mul_ln28_14_fu_1826_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln21_2_reg_2409 = ap_const_lv1_0))) then
                add_ln28_43_reg_2476 <= add_ln28_43_fu_1323_p2;
                icmp_ln21_3_reg_2497 <= icmp_ln21_3_fu_1356_p2;
                trunc_ln28_17_reg_2471 <= mul_ln28_18_fu_1844_p2(29 downto 14);
                trunc_ln28_20_reg_2487 <= mul_ln28_21_fu_1849_p2(29 downto 14);
                trunc_ln28_23_reg_2492 <= mul_ln28_24_fu_1854_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln28_49_reg_2511 <= add_ln28_49_fu_1405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln28_53_reg_2526 <= add_ln28_53_fu_1461_p2;
                trunc_ln28_21_reg_2516 <= mul_ln28_22_fu_1870_p2(29 downto 14);
                trunc_ln28_22_reg_2521 <= mul_ln28_23_fu_1875_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln28_62_reg_2588 <= add_ln28_62_fu_1616_p2;
                add_ln28_63_reg_2593 <= add_ln28_63_fu_1620_p2;
                add_ln28_66_reg_2598 <= add_ln28_66_fu_1629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln28_70_reg_2623 <= add_ln28_70_fu_1701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_533_p2 = ap_const_lv1_0))) then
                bias_addr_reg_1996 <= zext_ln23_fu_545_p1(4 - 1 downto 0);
                kernel_0_addr_1_reg_2006 <= zext_ln28_4_fu_587_p1(8 - 1 downto 0);
                kernel_0_addr_2_reg_2011 <= zext_ln28_5_fu_598_p1(8 - 1 downto 0);
                kernel_0_addr_3_reg_2016 <= zext_ln28_6_fu_609_p1(8 - 1 downto 0);
                kernel_0_addr_4_reg_2021 <= zext_ln28_7_fu_620_p1(8 - 1 downto 0);
                kernel_0_addr_5_reg_2026 <= zext_ln28_8_fu_631_p1(8 - 1 downto 0);
                kernel_0_addr_6_reg_2031 <= zext_ln28_9_fu_642_p1(8 - 1 downto 0);
                kernel_0_addr_7_reg_2036 <= zext_ln28_10_fu_653_p1(8 - 1 downto 0);
                kernel_0_addr_8_reg_2041 <= zext_ln28_11_fu_664_p1(8 - 1 downto 0);
                kernel_0_addr_reg_2001 <= zext_ln28_3_fu_576_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                bias_load_reg_2357 <= bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_1973 <= empty_fu_519_p1;
                    output_width_cast_reg_1943(5 downto 0) <= output_width_cast_fu_499_p1(5 downto 0);
                    zext_ln28_reg_1951(6 downto 0) <= zext_ln28_fu_503_p1(6 downto 0);
                    zext_ln36_1_cast_cas_reg_1968(5 downto 0) <= zext_ln36_1_cast_cas_fu_515_p1(5 downto 0);
                    zext_ln36_1_reg_1956(6 downto 0) <= zext_ln36_1_fu_507_p1(6 downto 0);
                    zext_ln36_reg_1963(5 downto 0) <= zext_ln36_fu_511_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln21_1_reg_2150 <= icmp_ln21_1_fu_819_p2;
                kernel_0_load_reg_2114 <= kernel_0_q0;
                    or_ln28_1_reg_2132(0) <= or_ln28_1_fu_799_p2(0);    or_ln28_1_reg_2132(15 downto 2) <= or_ln28_1_fu_799_p2(15 downto 2);
                    zext_ln28_14_reg_2119(15 downto 1) <= zext_ln28_14_fu_785_p1(15 downto 1);
                    zext_ln28_16_reg_2137(0) <= zext_ln28_16_fu_805_p1(0);    zext_ln28_16_reg_2137(15 downto 2) <= zext_ln28_16_fu_805_p1(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                icmp_ln21_reg_2098 <= icmp_ln21_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_load_195_reg_2159 <= input_r_q1;
                kernel_0_load_1_reg_2154 <= kernel_0_q0;
                kernel_0_load_2_reg_2164 <= kernel_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_196_reg_2179 <= input_r_q1;
                input_load_197_reg_2189 <= input_r_q0;
                kernel_0_load_3_reg_2184 <= kernel_0_q1;
                kernel_0_load_4_reg_2194 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_load_198_reg_2209 <= input_r_q1;
                input_load_199_reg_2219 <= input_r_q0;
                kernel_0_load_5_reg_2214 <= kernel_0_q1;
                kernel_0_load_6_reg_2224 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_reg_2049 <= out_h_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_491 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_669_p2 = ap_const_lv1_0))) then
                    tmp5_0_0_0_cast_reg_2054(15 downto 0) <= tmp5_0_0_0_cast_fu_699_p1(15 downto 0);
                    tmp5_0_1_0_cast_reg_2066(15 downto 0) <= tmp5_0_1_0_cast_fu_718_p1(15 downto 0);
                    tmp5_0_2_0_cast_reg_2078(15 downto 0) <= tmp5_0_2_0_cast_fu_737_p1(15 downto 0);
                    tmp7_0_cast_reg_2090(14 downto 0) <= tmp7_0_cast_fu_756_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                trunc_ln28_30_reg_2603 <= mul_ln28_31_fu_1919_p2(29 downto 14);
                trunc_ln28_31_reg_2608 <= mul_ln28_32_fu_1925_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_760_p2 = ap_const_lv1_0))) then
                    zext_ln28_12_reg_2102(15 downto 0) <= zext_ln28_12_fu_765_p1(15 downto 0);
            end if;
        end if;
    end process;
    output_width_cast_reg_1943(15 downto 6) <= "0000000000";
    zext_ln28_reg_1951(8 downto 7) <= "00";
    zext_ln36_1_reg_1956(15 downto 7) <= "000000000";
    zext_ln36_reg_1963(8 downto 6) <= "000";
    zext_ln36_1_cast_cas_reg_1968(14 downto 6) <= "000000000";
    tmp5_0_0_0_cast_reg_2054(16) <= '0';
    tmp5_0_1_0_cast_reg_2066(16) <= '0';
    tmp5_0_2_0_cast_reg_2078(16) <= '0';
    tmp7_0_cast_reg_2090(16 downto 15) <= "00";
    zext_ln28_12_reg_2102(16) <= '0';
    zext_ln28_14_reg_2119(0) <= '1';
    zext_ln28_14_reg_2119(16) <= '0';
    or_ln28_1_reg_2132(1) <= '1';
    zext_ln28_16_reg_2137(1) <= '1';
    zext_ln28_16_reg_2137(16) <= '0';
    add_ln28_27_reg_2369(0) <= '0';
    or_ln28_2_reg_2380(1 downto 0) <= "11";
    zext_ln28_25_reg_2385(1 downto 0) <= "11";
    zext_ln28_25_reg_2385(16) <= '0';
    add_ln28_56_reg_2531(1 downto 0) <= "00";
    add_ln28_58_reg_2542(1 downto 0) <= "01";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_533_p2, ap_CS_fsm_state3, icmp_ln20_fu_669_p2, icmp_ln21_fu_760_p2, icmp_ln21_reg_2098, ap_CS_fsm_state4, icmp_ln21_1_reg_2150, ap_CS_fsm_state10, icmp_ln21_2_reg_2409, ap_CS_fsm_state14, icmp_ln21_3_reg_2497, ap_CS_fsm_state17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_533_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_669_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_760_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln21_1_reg_2150 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln21_2_reg_2409 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and ((icmp_ln21_reg_2098 = ap_const_lv1_1) or ((icmp_ln21_1_reg_2150 = ap_const_lv1_1) or ((icmp_ln21_3_reg_2497 = ap_const_lv1_1) or (icmp_ln21_2_reg_2409 = ap_const_lv1_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_98_fu_528_p2 <= std_logic_vector(unsigned(phi_mul_reg_439) + unsigned(zext_ln28_reg_1951));
    add_ln19_fu_523_p2 <= std_logic_vector(unsigned(phi_mul2_reg_451) + unsigned(zext_ln36_reg_1963));
    add_ln21_fu_1566_p2 <= std_logic_vector(unsigned(out_w_0_0_reg_474) + unsigned(ap_const_lv16_4));
    add_ln28_10_fu_789_p2 <= std_logic_vector(unsigned(zext_ln28_14_fu_785_p1) + unsigned(tmp5_0_0_0_cast_reg_2054));
    add_ln28_11_fu_809_p2 <= std_logic_vector(unsigned(zext_ln28_16_fu_805_p1) + unsigned(tmp5_0_0_0_cast_reg_2054));
    add_ln28_12_fu_824_p2 <= std_logic_vector(unsigned(tmp5_0_1_0_cast_reg_2066) + unsigned(zext_ln28_12_reg_2102));
    add_ln28_13_fu_833_p2 <= std_logic_vector(unsigned(zext_ln28_14_reg_2119) + unsigned(tmp5_0_1_0_cast_reg_2066));
    add_ln28_14_fu_842_p2 <= std_logic_vector(unsigned(zext_ln28_16_reg_2137) + unsigned(tmp5_0_1_0_cast_reg_2066));
    add_ln28_15_fu_851_p2 <= std_logic_vector(unsigned(tmp5_0_2_0_cast_reg_2078) + unsigned(zext_ln28_12_reg_2102));
    add_ln28_16_fu_860_p2 <= std_logic_vector(unsigned(zext_ln28_14_reg_2119) + unsigned(tmp5_0_2_0_cast_reg_2078));
    add_ln28_17_fu_869_p2 <= std_logic_vector(unsigned(zext_ln28_16_reg_2137) + unsigned(tmp5_0_2_0_cast_reg_2078));
    add_ln28_18_fu_1043_p2 <= std_logic_vector(unsigned(bias_q0) + unsigned(trunc_ln_reg_2246));
    add_ln28_19_fu_1019_p2 <= std_logic_vector(unsigned(trunc_ln28_1_fu_916_p4) + unsigned(trunc_ln28_2_fu_931_p4));
    add_ln28_1_fu_581_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(add_ln28_fu_570_p2));
    add_ln28_20_fu_1025_p2 <= std_logic_vector(unsigned(add_ln28_19_fu_1019_p2) + unsigned(trunc_ln28_s_fu_901_p4));
    add_ln28_21_fu_1048_p2 <= std_logic_vector(unsigned(add_ln28_20_reg_2347) + unsigned(add_ln28_18_fu_1043_p2));
    add_ln28_22_fu_1053_p2 <= std_logic_vector(unsigned(trunc_ln28_3_reg_2294) + unsigned(trunc_ln28_4_reg_2311));
    add_ln28_23_fu_1031_p2 <= std_logic_vector(unsigned(trunc_ln28_6_fu_993_p4) + unsigned(trunc_ln28_7_fu_1010_p4));
    add_ln28_24_fu_1037_p2 <= std_logic_vector(unsigned(add_ln28_23_fu_1031_p2) + unsigned(trunc_ln28_5_fu_976_p4));
    add_ln28_25_fu_1057_p2 <= std_logic_vector(unsigned(add_ln28_24_reg_2352) + unsigned(add_ln28_22_fu_1053_p2));
    add_ln28_26_fu_1062_p2 <= std_logic_vector(unsigned(add_ln28_25_fu_1057_p2) + unsigned(add_ln28_21_fu_1048_p2));
    add_ln28_27_fu_1087_p2 <= std_logic_vector(unsigned(zext_ln28_14_reg_2119) + unsigned(ap_const_lv17_1));
    add_ln28_28_fu_1092_p2 <= std_logic_vector(unsigned(add_ln28_27_fu_1087_p2) + unsigned(tmp5_0_0_0_cast_reg_2054));
    add_ln28_29_fu_1112_p2 <= std_logic_vector(unsigned(zext_ln28_25_fu_1108_p1) + unsigned(tmp5_0_0_0_cast_reg_2054));
    add_ln28_2_fu_592_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(add_ln28_fu_570_p2));
    add_ln28_30_fu_1170_p2 <= std_logic_vector(unsigned(add_ln28_27_reg_2369) + unsigned(tmp5_0_1_0_cast_reg_2066));
    add_ln28_31_fu_1179_p2 <= std_logic_vector(unsigned(zext_ln28_25_reg_2385) + unsigned(tmp5_0_1_0_cast_reg_2066));
    add_ln28_32_fu_1199_p2 <= std_logic_vector(unsigned(add_ln28_27_reg_2369) + unsigned(tmp5_0_2_0_cast_reg_2078));
    add_ln28_33_fu_1208_p2 <= std_logic_vector(unsigned(zext_ln28_25_reg_2385) + unsigned(tmp5_0_2_0_cast_reg_2078));
    add_ln28_34_fu_1280_p2 <= std_logic_vector(unsigned(bias_load_reg_2357) + unsigned(trunc_ln28_8_reg_2364));
    add_ln28_35_fu_1188_p2 <= std_logic_vector(unsigned(trunc_ln28_10_fu_1161_p4) + unsigned(trunc_ln28_11_reg_2399));
    add_ln28_36_fu_1193_p2 <= std_logic_vector(unsigned(add_ln28_35_fu_1188_p2) + unsigned(trunc_ln28_9_fu_1148_p4));
    add_ln28_37_fu_1284_p2 <= std_logic_vector(unsigned(add_ln28_36_reg_2429) + unsigned(add_ln28_34_fu_1280_p2));
    add_ln28_38_fu_1289_p2 <= std_logic_vector(unsigned(trunc_ln28_12_reg_2444) + unsigned(trunc_ln28_13_reg_2455));
    add_ln28_39_fu_1269_p2 <= std_logic_vector(unsigned(trunc_ln28_15_fu_1247_p4) + unsigned(trunc_ln28_16_fu_1260_p4));
    add_ln28_3_fu_603_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(add_ln28_fu_570_p2));
    add_ln28_40_fu_1275_p2 <= std_logic_vector(unsigned(add_ln28_39_fu_1269_p2) + unsigned(trunc_ln28_14_reg_2404));
    add_ln28_41_fu_1293_p2 <= std_logic_vector(unsigned(add_ln28_40_reg_2466) + unsigned(add_ln28_38_fu_1289_p2));
    add_ln28_42_fu_1298_p2 <= std_logic_vector(unsigned(add_ln28_41_fu_1293_p2) + unsigned(add_ln28_37_fu_1284_p2));
    add_ln28_43_fu_1323_p2 <= std_logic_vector(unsigned(zext_ln28_16_reg_2137) + unsigned(ap_const_lv17_2));
    add_ln28_44_fu_1328_p2 <= std_logic_vector(unsigned(add_ln28_43_fu_1323_p2) + unsigned(tmp5_0_0_0_cast_reg_2054));
    add_ln28_45_fu_1382_p2 <= std_logic_vector(unsigned(add_ln28_43_reg_2476) + unsigned(tmp5_0_1_0_cast_reg_2066));
    add_ln28_46_fu_1391_p2 <= std_logic_vector(unsigned(add_ln28_43_reg_2476) + unsigned(tmp5_0_2_0_cast_reg_2078));
    add_ln28_47_fu_1466_p2 <= std_logic_vector(unsigned(bias_load_reg_2357) + unsigned(trunc_ln28_17_reg_2471));
    add_ln28_48_fu_1400_p2 <= std_logic_vector(unsigned(trunc_ln28_19_fu_1373_p4) + unsigned(trunc_ln28_20_reg_2487));
    add_ln28_49_fu_1405_p2 <= std_logic_vector(unsigned(add_ln28_48_fu_1400_p2) + unsigned(trunc_ln28_18_fu_1360_p4));
    add_ln28_4_fu_614_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(add_ln28_fu_570_p2));
    add_ln28_50_fu_1470_p2 <= std_logic_vector(unsigned(add_ln28_49_reg_2511) + unsigned(add_ln28_47_fu_1466_p2));
    add_ln28_51_fu_1475_p2 <= std_logic_vector(unsigned(trunc_ln28_21_reg_2516) + unsigned(trunc_ln28_22_reg_2521));
    add_ln28_52_fu_1455_p2 <= std_logic_vector(unsigned(trunc_ln28_24_fu_1433_p4) + unsigned(trunc_ln28_25_fu_1446_p4));
    add_ln28_53_fu_1461_p2 <= std_logic_vector(unsigned(add_ln28_52_fu_1455_p2) + unsigned(trunc_ln28_23_reg_2492));
    add_ln28_54_fu_1479_p2 <= std_logic_vector(unsigned(add_ln28_53_reg_2526) + unsigned(add_ln28_51_fu_1475_p2));
    add_ln28_55_fu_1484_p2 <= std_logic_vector(unsigned(add_ln28_54_fu_1479_p2) + unsigned(add_ln28_50_fu_1470_p2));
    add_ln28_56_fu_1509_p2 <= std_logic_vector(unsigned(zext_ln28_25_reg_2385) + unsigned(ap_const_lv17_1));
    add_ln28_57_fu_1514_p2 <= std_logic_vector(unsigned(add_ln28_56_fu_1509_p2) + unsigned(tmp5_0_0_0_cast_reg_2054));
    add_ln28_58_fu_1524_p2 <= std_logic_vector(unsigned(zext_ln28_25_reg_2385) + unsigned(ap_const_lv17_2));
    add_ln28_59_fu_1529_p2 <= std_logic_vector(unsigned(add_ln28_58_fu_1524_p2) + unsigned(tmp5_0_0_0_cast_reg_2054));
    add_ln28_5_fu_625_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(add_ln28_fu_570_p2));
    add_ln28_60_fu_1598_p2 <= std_logic_vector(unsigned(add_ln28_56_reg_2531) + unsigned(tmp5_0_1_0_cast_reg_2066));
    add_ln28_61_fu_1607_p2 <= std_logic_vector(unsigned(add_ln28_58_reg_2542) + unsigned(tmp5_0_1_0_cast_reg_2066));
    add_ln28_62_fu_1616_p2 <= std_logic_vector(unsigned(add_ln28_56_reg_2531) + unsigned(tmp5_0_2_0_cast_reg_2078));
    add_ln28_63_fu_1620_p2 <= std_logic_vector(unsigned(add_ln28_58_reg_2542) + unsigned(tmp5_0_2_0_cast_reg_2078));
    add_ln28_64_fu_1557_p2 <= std_logic_vector(unsigned(bias_load_reg_2357) + unsigned(trunc_ln28_26_fu_1500_p4));
    add_ln28_65_fu_1624_p2 <= std_logic_vector(unsigned(trunc_ln28_28_fu_1589_p4) + unsigned(trunc_ln28_29_reg_2553));
    add_ln28_66_fu_1629_p2 <= std_logic_vector(unsigned(add_ln28_65_fu_1624_p2) + unsigned(trunc_ln28_27_fu_1576_p4));
    add_ln28_67_fu_1706_p2 <= std_logic_vector(unsigned(add_ln28_66_reg_2598) + unsigned(add_ln28_64_reg_2563));
    add_ln28_68_fu_1710_p2 <= std_logic_vector(unsigned(trunc_ln28_30_reg_2603) + unsigned(trunc_ln28_31_reg_2608));
    add_ln28_69_fu_1695_p2 <= std_logic_vector(unsigned(trunc_ln28_33_fu_1673_p4) + unsigned(trunc_ln28_34_fu_1686_p4));
    add_ln28_6_fu_636_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(add_ln28_fu_570_p2));
    add_ln28_70_fu_1701_p2 <= std_logic_vector(unsigned(add_ln28_69_fu_1695_p2) + unsigned(trunc_ln28_32_reg_2558));
    add_ln28_71_fu_1714_p2 <= std_logic_vector(unsigned(add_ln28_70_reg_2623) + unsigned(add_ln28_68_fu_1710_p2));
    add_ln28_72_fu_1719_p2 <= std_logic_vector(unsigned(add_ln28_71_fu_1714_p2) + unsigned(add_ln28_67_fu_1706_p2));
    add_ln28_7_fu_647_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(add_ln28_fu_570_p2));
    add_ln28_8_fu_658_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(add_ln28_fu_570_p2));
    add_ln28_9_fu_769_p2 <= std_logic_vector(unsigned(tmp5_0_0_0_cast_reg_2054) + unsigned(zext_ln28_12_fu_765_p1));
    add_ln28_fu_570_p2 <= std_logic_vector(unsigned(zext_ln28_1_fu_550_p1) + unsigned(zext_ln28_2_fu_566_p1));
    add_ln36_1_fu_1305_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_2090) + unsigned(zext_ln28_14_reg_2119));
    add_ln36_2_fu_1491_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_2090) + unsigned(zext_ln28_16_reg_2137));
    add_ln36_3_fu_1562_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_2090) + unsigned(zext_ln28_25_reg_2385));
    add_ln36_fu_1069_p2 <= std_logic_vector(unsigned(tmp7_0_cast_reg_2090) + unsigned(zext_ln28_12_reg_2102));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_533_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_533_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_533_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_533_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_1996;

    bias_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_519_p1 <= output_height(5 - 1 downto 0);
    icmp_ln19_fu_533_p2 <= "1" when (out_d_0_reg_428 = ap_const_lv5_10) else "0";
    icmp_ln20_fu_669_p2 <= "1" when (out_h_0_reg_463 = empty_reg_1973) else "0";
    icmp_ln21_1_fu_819_p2 <= "1" when (or_ln28_fu_779_p2 = output_width_cast_reg_1943) else "0";
    icmp_ln21_2_fu_1140_p2 <= "1" when (or_ln28_1_reg_2132 = output_width_cast_reg_1943) else "0";
    icmp_ln21_3_fu_1356_p2 <= "1" when (or_ln28_2_reg_2380 = output_width_cast_reg_1943) else "0";
    icmp_ln21_fu_760_p2 <= "1" when (out_w_0_0_reg_474 = output_width_cast_reg_1943) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln28_13_fu_774_p1, zext_ln28_15_fu_794_p1, zext_ln28_19_fu_837_p1, zext_ln28_21_fu_855_p1, zext_ln28_23_fu_873_p1, zext_ln28_26_fu_1117_p1, zext_ln28_28_fu_1183_p1, zext_ln28_30_fu_1212_p1, zext_ln28_32_fu_1386_p1, zext_ln28_34_fu_1519_p1, zext_ln28_36_fu_1602_p1, zext_ln28_38_fu_1661_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_address0 <= zext_ln28_38_fu_1661_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_address0 <= zext_ln28_36_fu_1602_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_r_address0 <= zext_ln28_34_fu_1519_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address0 <= zext_ln28_32_fu_1386_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= zext_ln28_30_fu_1212_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= zext_ln28_28_fu_1183_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln28_26_fu_1117_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln28_23_fu_873_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln28_21_fu_855_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln28_19_fu_837_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= zext_ln28_15_fu_794_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= zext_ln28_13_fu_774_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, zext_ln28_17_fu_814_p1, zext_ln28_18_fu_828_p1, zext_ln28_20_fu_846_p1, zext_ln28_22_fu_864_p1, zext_ln28_24_fu_1097_p1, zext_ln28_27_fu_1174_p1, zext_ln28_29_fu_1203_p1, zext_ln28_31_fu_1333_p1, zext_ln28_33_fu_1395_p1, zext_ln28_35_fu_1534_p1, zext_ln28_37_fu_1611_p1, zext_ln28_39_fu_1665_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_address1 <= zext_ln28_39_fu_1665_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_address1 <= zext_ln28_37_fu_1611_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_r_address1 <= zext_ln28_35_fu_1534_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address1 <= zext_ln28_33_fu_1395_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_r_address1 <= zext_ln28_31_fu_1333_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address1 <= zext_ln28_29_fu_1203_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= zext_ln28_27_fu_1174_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= zext_ln28_24_fu_1097_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= zext_ln28_22_fu_864_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address1 <= zext_ln28_20_fu_846_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address1 <= zext_ln28_18_fu_828_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address1 <= zext_ln28_17_fu_814_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        input_width_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));


    kernel_0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, kernel_0_addr_reg_2001, kernel_0_addr_1_reg_2006, kernel_0_addr_4_reg_2021, kernel_0_addr_6_reg_2031, kernel_0_addr_8_reg_2041, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address0 <= kernel_0_addr_8_reg_2041;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_0_address0 <= kernel_0_addr_6_reg_2031;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_0_address0 <= kernel_0_addr_4_reg_2021;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_0_address0 <= kernel_0_addr_1_reg_2006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_0_address0 <= kernel_0_addr_reg_2001;
        else 
            kernel_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_0_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, kernel_0_addr_2_reg_2011, kernel_0_addr_3_reg_2016, kernel_0_addr_5_reg_2026, kernel_0_addr_7_reg_2036, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address1 <= kernel_0_addr_7_reg_2036;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_0_address1 <= kernel_0_addr_5_reg_2026;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_0_address1 <= kernel_0_addr_3_reg_2016;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_0_address1 <= kernel_0_addr_2_reg_2011;
        else 
            kernel_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            kernel_0_ce1 <= ap_const_logic_1;
        else 
            kernel_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_10_fu_1808_p0 <= sext_ln28_3_reg_2256(16 - 1 downto 0);
    mul_ln28_11_fu_1814_p0 <= sext_ln28_5_reg_2268(16 - 1 downto 0);
    mul_ln28_12_fu_1798_p0 <= sext_ln28_7_reg_2275(16 - 1 downto 0);
    mul_ln28_12_fu_1798_p1 <= sext_ln28_8_reg_2282(16 - 1 downto 0);
    mul_ln28_13_fu_1820_p0 <= sext_ln28_9_reg_2287(16 - 1 downto 0);
    mul_ln28_14_fu_1826_p0 <= sext_ln28_11_reg_2304(16 - 1 downto 0);
    mul_ln28_15_fu_1803_p0 <= sext_ln28_13_reg_2316(16 - 1 downto 0);
    mul_ln28_15_fu_1803_p1 <= sext_ln28_14_reg_2323(16 - 1 downto 0);
    mul_ln28_16_fu_1832_p0 <= sext_ln28_15_reg_2328(16 - 1 downto 0);
    mul_ln28_17_fu_1838_p0 <= sext_ln28_17_reg_2340(16 - 1 downto 0);
    mul_ln28_18_fu_1844_p0 <= sext_ln28_1_reg_2239(16 - 1 downto 0);
    mul_ln28_18_fu_1844_p1 <= sext_ln28_4_reg_2263(16 - 1 downto 0);
    mul_ln28_19_fu_1859_p0 <= sext_ln28_3_reg_2256(16 - 1 downto 0);
    mul_ln28_19_fu_1859_p1 <= sext_ln28_19_reg_2413(16 - 1 downto 0);
    mul_ln28_20_fu_1864_p0 <= sext_ln28_5_reg_2268(16 - 1 downto 0);
    mul_ln28_21_fu_1849_p0 <= sext_ln28_7_reg_2275(16 - 1 downto 0);
    mul_ln28_21_fu_1849_p1 <= sext_ln28_10_reg_2299(16 - 1 downto 0);
    mul_ln28_22_fu_1870_p0 <= sext_ln28_9_reg_2287(16 - 1 downto 0);
    mul_ln28_22_fu_1870_p1 <= sext_ln28_21_reg_2449(16 - 1 downto 0);
    mul_ln28_23_fu_1875_p0 <= sext_ln28_11_reg_2304(16 - 1 downto 0);
    mul_ln28_24_fu_1854_p0 <= sext_ln28_13_reg_2316(16 - 1 downto 0);
    mul_ln28_24_fu_1854_p1 <= sext_ln28_16_reg_2335(16 - 1 downto 0);
    mul_ln28_25_fu_1881_p0 <= sext_ln28_15_reg_2328(16 - 1 downto 0);
    mul_ln28_25_fu_1881_p1 <= sext_ln28_23_reg_2460(16 - 1 downto 0);
    mul_ln28_26_fu_1886_p0 <= sext_ln28_17_reg_2340(16 - 1 downto 0);
    mul_ln28_27_fu_1892_p0 <= sext_ln28_1_reg_2239(16 - 1 downto 0);
    mul_ln28_27_fu_1892_p1 <= sext_ln28_19_reg_2413(16 - 1 downto 0);
    mul_ln28_28_fu_1907_p0 <= sext_ln28_3_reg_2256(16 - 1 downto 0);
    mul_ln28_29_fu_1913_p0 <= sext_ln28_5_reg_2268(16 - 1 downto 0);
    mul_ln28_30_fu_1897_p0 <= sext_ln28_7_reg_2275(16 - 1 downto 0);
    mul_ln28_30_fu_1897_p1 <= sext_ln28_21_reg_2449(16 - 1 downto 0);
    mul_ln28_31_fu_1919_p0 <= sext_ln28_9_reg_2287(16 - 1 downto 0);
    mul_ln28_32_fu_1925_p0 <= sext_ln28_11_reg_2304(16 - 1 downto 0);
    mul_ln28_33_fu_1902_p0 <= sext_ln28_13_reg_2316(16 - 1 downto 0);
    mul_ln28_33_fu_1902_p1 <= sext_ln28_23_reg_2460(16 - 1 downto 0);
    mul_ln28_34_fu_1931_p0 <= sext_ln28_15_reg_2328(16 - 1 downto 0);
    mul_ln28_35_fu_1937_p0 <= sext_ln28_17_reg_2340(16 - 1 downto 0);
    mul_ln28_9_fu_1793_p0 <= sext_ln28_1_reg_2239(16 - 1 downto 0);
    mul_ln28_9_fu_1793_p1 <= sext_ln28_2_reg_2251(16 - 1 downto 0);
    or_ln28_1_fu_799_p2 <= (out_w_0_0_reg_474 or ap_const_lv16_2);
    or_ln28_2_fu_1102_p2 <= (out_w_0_0_reg_474 or ap_const_lv16_3);
    or_ln28_fu_779_p2 <= (out_w_0_0_reg_474 or ap_const_lv16_1);
    out_d_fu_539_p2 <= std_logic_vector(unsigned(out_d_0_reg_428) + unsigned(ap_const_lv5_1));
    out_h_fu_674_p2 <= std_logic_vector(unsigned(out_h_0_reg_463) + unsigned(ap_const_lv5_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state21, zext_ln36_2_fu_1073_p1, zext_ln36_3_fu_1309_p1, zext_ln36_4_fu_1495_p1, zext_ln36_5_fu_1726_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_address0 <= zext_ln36_5_fu_1726_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_address0 <= zext_ln36_4_fu_1495_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_address0 <= zext_ln36_3_fu_1309_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address0 <= zext_ln36_2_fu_1073_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state21, add_ln28_26_fu_1062_p2, add_ln28_42_fu_1298_p2, add_ln28_55_fu_1484_p2, add_ln28_72_fu_1719_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            output_r_d0 <= add_ln28_72_fu_1719_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_d0 <= add_ln28_55_fu_1484_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_d0 <= add_ln28_42_fu_1298_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d0 <= add_ln28_26_fu_1062_p2;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(icmp_ln21_reg_2098, icmp_ln21_1_reg_2150, ap_CS_fsm_state10, icmp_ln21_2_reg_2409, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln21_2_reg_2409 = ap_const_lv1_0) and (icmp_ln21_1_reg_2150 = ap_const_lv1_0) and (icmp_ln21_reg_2098 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),16));
        sext_ln28_10_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_198_reg_2209),30));

        sext_ln28_11_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_5_reg_2214),30));

        sext_ln28_13_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_6_reg_2224),30));

        sext_ln28_14_fu_985_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_r_q1),30));

        sext_ln28_15_fu_989_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_q1),30));

        sext_ln28_16_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_r_q0),30));

        sext_ln28_17_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_q0),30));

        sext_ln28_19_fu_1157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_r_q0),30));

        sext_ln28_1_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_reg_2114),30));

        sext_ln28_21_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_491),30));

        sext_ln28_23_fu_1256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_r_q0),30));

        sext_ln28_2_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_491),30));

        sext_ln28_3_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_1_reg_2154),30));

        sext_ln28_4_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_195_reg_2159),30));

        sext_ln28_5_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_2_reg_2164),30));

        sext_ln28_7_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_3_reg_2184),30));

        sext_ln28_8_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_197_reg_2189),30));

        sext_ln28_9_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_4_reg_2194),30));

    shl_ln_fu_558_p3 <= (trunc_ln28_fu_554_p1 & ap_const_lv3_0);
    tmp5_0_0_0_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_0_fu_694_p2),17));
    tmp5_0_0_0_fu_694_p0 <= zext_ln36_1_reg_1956(7 - 1 downto 0);
    tmp5_0_0_0_fu_694_p1 <= tmp5_0_0_0_fu_694_p10(9 - 1 downto 0);
    tmp5_0_0_0_fu_694_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_0_0_fu_684_p2),16));
    tmp5_0_0_0_fu_694_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_0_fu_694_p0) * unsigned(tmp5_0_0_0_fu_694_p1), 16));
    tmp5_0_1_0_cast_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_0_fu_713_p2),17));
    tmp5_0_1_0_fu_713_p0 <= zext_ln36_1_reg_1956(7 - 1 downto 0);
    tmp5_0_1_0_fu_713_p1 <= tmp5_0_1_0_fu_713_p10(9 - 1 downto 0);
    tmp5_0_1_0_fu_713_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_1_0_fu_703_p2),16));
    tmp5_0_1_0_fu_713_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_0_fu_713_p0) * unsigned(tmp5_0_1_0_fu_713_p1), 16));
    tmp5_0_2_0_cast_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_0_fu_732_p2),17));
    tmp5_0_2_0_fu_732_p0 <= zext_ln36_1_reg_1956(7 - 1 downto 0);
    tmp5_0_2_0_fu_732_p1 <= tmp5_0_2_0_fu_732_p10(9 - 1 downto 0);
    tmp5_0_2_0_fu_732_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_2_0_fu_722_p2),16));
    tmp5_0_2_0_fu_732_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_0_fu_732_p0) * unsigned(tmp5_0_2_0_fu_732_p1), 16));
    tmp6_0_fu_741_p2 <= std_logic_vector(unsigned(zext_ln28_3_cast_fu_680_p1) + unsigned(phi_mul2_reg_451));
    tmp7_0_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_0_fu_751_p2),17));
    tmp7_0_fu_751_p0 <= zext_ln36_1_cast_cas_reg_1968(6 - 1 downto 0);
    tmp7_0_fu_751_p1 <= tmp7_0_fu_751_p10(9 - 1 downto 0);
    tmp7_0_fu_751_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_0_fu_741_p2),15));
    tmp7_0_fu_751_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_0_fu_751_p0) * unsigned(tmp7_0_fu_751_p1), 15));
    tmp_0_0_0_fu_684_p2 <= std_logic_vector(unsigned(zext_ln28_3_cast_fu_680_p1) + unsigned(phi_mul_reg_439));
    tmp_0_1_0_fu_703_p2 <= std_logic_vector(unsigned(tmp_0_0_0_fu_684_p2) + unsigned(ap_const_lv9_1));
    tmp_0_2_0_fu_722_p2 <= std_logic_vector(unsigned(tmp_0_0_0_fu_684_p2) + unsigned(ap_const_lv9_2));
    trunc_ln28_10_fu_1161_p4 <= mul_ln28_11_fu_1814_p2(29 downto 14);
    trunc_ln28_15_fu_1247_p4 <= mul_ln28_16_fu_1832_p2(29 downto 14);
    trunc_ln28_16_fu_1260_p4 <= mul_ln28_17_fu_1838_p2(29 downto 14);
    trunc_ln28_18_fu_1360_p4 <= mul_ln28_19_fu_1859_p2(29 downto 14);
    trunc_ln28_19_fu_1373_p4 <= mul_ln28_20_fu_1864_p2(29 downto 14);
    trunc_ln28_1_fu_916_p4 <= mul_ln28_2_fu_1744_p2(29 downto 14);
    trunc_ln28_24_fu_1433_p4 <= mul_ln28_25_fu_1881_p2(29 downto 14);
    trunc_ln28_25_fu_1446_p4 <= mul_ln28_26_fu_1886_p2(29 downto 14);
    trunc_ln28_26_fu_1500_p4 <= mul_ln28_27_fu_1892_p2(29 downto 14);
    trunc_ln28_27_fu_1576_p4 <= mul_ln28_28_fu_1907_p2(29 downto 14);
    trunc_ln28_28_fu_1589_p4 <= mul_ln28_29_fu_1913_p2(29 downto 14);
    trunc_ln28_2_fu_931_p4 <= mul_ln28_3_fu_1751_p2(29 downto 14);
    trunc_ln28_33_fu_1673_p4 <= mul_ln28_34_fu_1931_p2(29 downto 14);
    trunc_ln28_34_fu_1686_p4 <= mul_ln28_35_fu_1937_p2(29 downto 14);
    trunc_ln28_5_fu_976_p4 <= mul_ln28_6_fu_1772_p2(29 downto 14);
    trunc_ln28_6_fu_993_p4 <= mul_ln28_7_fu_1779_p2(29 downto 14);
    trunc_ln28_7_fu_1010_p4 <= mul_ln28_8_fu_1786_p2(29 downto 14);
    trunc_ln28_9_fu_1148_p4 <= mul_ln28_10_fu_1808_p2(29 downto 14);
    trunc_ln28_fu_554_p1 <= out_d_0_reg_428(4 - 1 downto 0);
    trunc_ln28_s_fu_901_p4 <= mul_ln28_1_fu_1737_p2(29 downto 14);
    zext_ln23_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_428),64));
    zext_ln28_10_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_7_fu_647_p2),64));
    zext_ln28_11_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_8_fu_658_p2),64));
    zext_ln28_12_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_0_reg_474),17));
    zext_ln28_13_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_9_fu_769_p2),64));
    zext_ln28_14_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_fu_779_p2),17));
    zext_ln28_15_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_10_fu_789_p2),64));
    zext_ln28_16_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_1_fu_799_p2),17));
    zext_ln28_17_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_11_fu_809_p2),64));
    zext_ln28_18_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_12_fu_824_p2),64));
    zext_ln28_19_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_13_fu_833_p2),64));
    zext_ln28_1_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_428),8));
    zext_ln28_20_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_14_fu_842_p2),64));
    zext_ln28_21_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_15_fu_851_p2),64));
    zext_ln28_22_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_16_fu_860_p2),64));
    zext_ln28_23_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_17_fu_869_p2),64));
    zext_ln28_24_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_28_fu_1092_p2),64));
    zext_ln28_25_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_2_fu_1102_p2),17));
    zext_ln28_26_fu_1117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_29_fu_1112_p2),64));
    zext_ln28_27_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_30_fu_1170_p2),64));
    zext_ln28_28_fu_1183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_31_fu_1179_p2),64));
    zext_ln28_29_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_32_fu_1199_p2),64));
    zext_ln28_2_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_558_p3),8));
    zext_ln28_30_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_33_fu_1208_p2),64));
    zext_ln28_31_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_44_fu_1328_p2),64));
    zext_ln28_32_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_45_fu_1382_p2),64));
    zext_ln28_33_fu_1395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_46_fu_1391_p2),64));
    zext_ln28_34_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_57_fu_1514_p2),64));
    zext_ln28_35_fu_1534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_59_fu_1529_p2),64));
    zext_ln28_36_fu_1602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_60_fu_1598_p2),64));
    zext_ln28_37_fu_1611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_61_fu_1607_p2),64));
    zext_ln28_38_fu_1661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_62_reg_2588),64));
    zext_ln28_39_fu_1665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_63_reg_2593),64));
    zext_ln28_3_cast_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_463),9));
    zext_ln28_3_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_570_p2),64));
    zext_ln28_4_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_581_p2),64));
    zext_ln28_5_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_592_p2),64));
    zext_ln28_6_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_603_p2),64));
    zext_ln28_7_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_4_fu_614_p2),64));
    zext_ln28_8_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_625_p2),64));
    zext_ln28_9_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_6_fu_636_p2),64));
    zext_ln28_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln36_1_cast_cas_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),15));
    zext_ln36_1_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_495_p1),16));
    zext_ln36_2_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_1069_p2),64));
    zext_ln36_3_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_1305_p2),64));
    zext_ln36_4_fu_1495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_2_fu_1491_p2),64));
    zext_ln36_5_fu_1726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_3_reg_2568),64));
    zext_ln36_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
