-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten48_reg_304 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_0_reg_316 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_328 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_340 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_362 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1185_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_366 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln40_fu_374_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_reg_1124 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_1_cast14_fu_378_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_cast14_reg_1130 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln48_fu_382_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_reg_1137 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_cast_fu_386_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln48_1_cast_reg_1143 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_390_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1148 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_406_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln4_reg_1153 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_412_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_reg_1158 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln33_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1163 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_450_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_reg_1168 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_fu_456_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_reg_1173 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln48_fu_461_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln48_reg_1179 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln23_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1185_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_471_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1189 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln32_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_1_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_1_reg_1209 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_0_fu_512_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_reg_1214 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_fu_517_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_reg_1219 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_fu_522_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_reg_1224 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln24_fu_528_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_reg_1229 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_1_fu_538_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_1_reg_1234 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_1_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_1_reg_1249 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_2_fu_554_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_2_reg_1254 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_1_fu_560_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_1_reg_1259 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln48_1_fu_565_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln48_1_reg_1265 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_7_fu_575_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_7_reg_1271 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_581_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1278 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_fu_592_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1284 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln32_1_fu_600_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_1_reg_1291 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_load_reg_1296 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_reg_1301 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_3_fu_619_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_3_reg_1316 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_0_0_mid2_v_v_fu_653_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_v_v_reg_1321 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_v_v_fu_660_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_v_v_reg_1327 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_mid2_v_v_fu_672_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_mid2_v_v_reg_1332 : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_load_2_reg_1342 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_3_reg_1347 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_4_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_4_reg_1357 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_5_fu_692_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_5_reg_1362 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_0_0_mid2_fu_700_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_0_0_mid2_reg_1367 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_fu_708_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_reg_1374 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_v_v_fu_713_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_2_0_mid2_v_v_reg_1381 : STD_LOGIC_VECTOR (8 downto 0);
    signal kernel_load_1_reg_1386 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_4_reg_1391 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_6_fu_726_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_6_reg_1406 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_7_fu_731_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_7_reg_1411 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_2_fu_736_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_2_reg_1416 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp10_2_0_mid2_fu_745_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_reg_1422 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_fu_750_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_reg_1429 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_fu_753_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_reg_1436 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_5_fu_763_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_5_reg_1441 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_4_fu_767_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_4_reg_1447 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln32_13_fu_772_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_13_reg_1452 : STD_LOGIC_VECTOR (9 downto 0);
    signal kernel_load_5_reg_1457 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_6_reg_1462 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_fu_786_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_reg_1477 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_fu_795_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1487 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_3_fu_800_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_3_reg_1492 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_2_fu_804_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_2_reg_1498 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_5_fu_813_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_5_reg_1508 : STD_LOGIC_VECTOR (13 downto 0);
    signal kernel_load_7_reg_1513 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_8_reg_1518 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_6_fu_832_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_6_reg_1538 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_7_fu_836_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_7_reg_1543 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_8_fu_840_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_8_reg_1548 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_9_fu_844_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_9_reg_1553 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_10_fu_848_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_10_reg_1558 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1064_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln48_reg_1563 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln48_reg_1563_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal bias_load_reg_1568 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_2_fu_1070_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_2_reg_1573 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_4_fu_1076_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_4_reg_1578 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_3_fu_1082_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_3_reg_1593 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln48_1_reg_1598 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_5_fu_1088_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_5_reg_1603 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_1_fu_914_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_1_reg_1618 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_s_reg_1623 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_6_fu_1094_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_6_reg_1628 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_7_fu_1100_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_7_reg_1633 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_2_fu_955_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_2_reg_1643 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_8_fu_1106_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_8_reg_1648 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_9_fu_1112_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_9_reg_1653 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_4_fu_996_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_4_reg_1658 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_5_fu_1001_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_5_reg_1663 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_5_reg_1668 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_6_reg_1673 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_10_fu_1118_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_10_reg_1678 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_7_fu_1046_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_7_reg_1683 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_9_fu_1055_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_9_reg_1688 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten48_phi_fu_308_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_320_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_332_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_344_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_355_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln24_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_2_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_3_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_4_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_6_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_7_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_8_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_2_fu_791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_6_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_9_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_4_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_7_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_8_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_9_fu_870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_10_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_11_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_12_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_1060_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4_fu_370_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_55_fu_394_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_406_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_406_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_fu_434_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_438_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_1_fu_446_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_fu_456_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln48_1_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_fu_456_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_fu_461_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln48_fu_461_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln27_1_fu_486_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln27_mid1_fu_490_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_2_fu_482_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_3_fu_498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln40_2_cast_fu_508_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_1_fu_560_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln48_2_fu_535_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_1_fu_560_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_1_fu_565_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln48_1_fu_565_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln33_1_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln40_2_cast_mid_fu_644_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_3_fu_624_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_mid1_fu_647_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_5_fu_634_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_4_fu_629_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_mid1_fu_666_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_6_fu_639_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_fu_700_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_700_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_fu_708_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_708_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_2_0_mid2_fu_745_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_fu_745_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln40_3_fu_758_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_fu_880_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_2_fu_934_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_3_fu_992_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_4_fu_975_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_3_fu_966_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_7_fu_1032_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_6_fu_1041_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_8_fu_1051_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1064_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1064_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1064_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1064_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln4_fu_406_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln4_fu_406_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_0_0_mid2_fu_700_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_fu_708_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_fu_745_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component network_mac_muladd_6ns_9ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mac_muladd_6ns_9ns_5ns_14_1_1_U36 : component network_mac_muladd_6ns_9ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1064_p0,
        din1 => grp_fu_1064_p1,
        din2 => grp_fu_1064_p2,
        dout => grp_fu_1064_p3);

    network_mul_mul_16s_16s_30_1_1_U37 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_362,
        din1 => kernel_load_reg_1296,
        dout => mul_ln40_2_fu_1070_p2);

    network_mul_mul_16s_16s_30_1_1_U38 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_366,
        din1 => kernel_load_2_reg_1342,
        dout => mul_ln40_4_fu_1076_p2);

    network_mul_mul_16s_16s_30_1_1_U39 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_362,
        din1 => kernel_load_1_reg_1386,
        dout => mul_ln40_3_fu_1082_p2);

    network_mul_mul_16s_16s_30_1_1_U40 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_366,
        din1 => kernel_load_3_reg_1347,
        dout => mul_ln40_5_fu_1088_p2);

    network_mul_mul_16s_16s_30_1_1_U41 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_362,
        din1 => kernel_load_4_reg_1391,
        dout => mul_ln40_6_fu_1094_p2);

    network_mul_mul_16s_16s_30_1_1_U42 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_366,
        din1 => kernel_load_5_reg_1457,
        dout => mul_ln40_7_fu_1100_p2);

    network_mul_mul_16s_16s_30_1_1_U43 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_362,
        din1 => kernel_load_6_reg_1462,
        dout => mul_ln40_8_fu_1106_p2);

    network_mul_mul_16s_16s_30_1_1_U44 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_366,
        din1 => kernel_load_7_reg_1513,
        dout => mul_ln40_9_fu_1112_p2);

    network_mul_mul_16s_16s_30_1_1_U45 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_362,
        din1 => kernel_load_8_reg_1518,
        dout => mul_ln40_10_fu_1118_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten48_reg_304 <= add_ln23_reg_1224;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten48_reg_304 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_328 <= select_ln32_13_reg_1452;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_328 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_316 <= select_ln24_2_reg_1416;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_316 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_h_0_reg_340 <= select_ln32_reg_1477;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_340 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                out_w_0_reg_351 <= out_w_reg_1487;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_351 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln23_reg_1224 <= add_ln23_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln24_1_reg_1249 <= add_ln24_1_fu_548_p2;
                add_ln24_2_reg_1254 <= add_ln24_2_fu_554_p2;
                mul_ln40_1_reg_1259 <= mul_ln40_1_fu_560_p2;
                mul_ln48_1_reg_1265 <= mul_ln48_1_fu_565_p2;
                out_h_reg_1278 <= out_h_fu_581_p2;
                out_w_0_mid2_reg_1284 <= out_w_0_mid2_fu_592_p3;
                select_ln24_1_reg_1234 <= select_ln24_1_fu_538_p3;
                select_ln24_7_reg_1271 <= select_ln24_7_fu_575_p3;
                select_ln24_reg_1229 <= select_ln24_fu_528_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln24_3_reg_1316 <= add_ln24_3_fu_619_p2;
                add_ln24_reg_1301 <= add_ln24_fu_606_p2;
                tmp10_0_0_mid2_v_v_reg_1321 <= tmp10_0_0_mid2_v_v_fu_653_p3;
                tmp10_1_0_mid2_v_v_reg_1327 <= tmp10_1_0_mid2_v_v_fu_660_p2;
                tmp12_mid2_v_v_reg_1332 <= tmp12_mid2_v_v_fu_672_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln24_4_reg_1357 <= add_ln24_4_fu_687_p2;
                add_ln24_5_reg_1362 <= add_ln24_5_fu_692_p2;
                tmp10_0_0_mid2_reg_1367 <= tmp10_0_0_mid2_fu_700_p2;
                tmp10_1_0_mid2_reg_1374 <= tmp10_1_0_mid2_fu_708_p2;
                tmp10_2_0_mid2_v_v_reg_1381 <= tmp10_2_0_mid2_v_v_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln24_6_reg_1406 <= add_ln24_6_fu_726_p2;
                add_ln24_7_reg_1411 <= add_ln24_7_fu_731_p2;
                add_ln40_4_reg_1447 <= add_ln40_4_fu_767_p2;
                add_ln40_reg_1436 <= add_ln40_fu_753_p2;
                tmp10_2_0_mid2_reg_1422 <= tmp10_2_0_mid2_fu_745_p2;
                    zext_ln40_1_reg_1429(4 downto 0) <= zext_ln40_1_fu_750_p1(4 downto 0);
                    zext_ln40_5_reg_1441(4 downto 0) <= zext_ln40_5_fu_763_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_466_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln27_1_reg_1209 <= add_ln27_1_fu_502_p2;
                icmp_ln32_reg_1195 <= icmp_ln32_fu_477_p2;
                out_d_reg_1189 <= out_d_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln27_reg_1168 <= add_ln27_fu_450_p2;
                icmp_ln23_reg_1185 <= icmp_ln23_fu_466_p2;
                icmp_ln23_reg_1185_pp0_iter1_reg <= icmp_ln23_reg_1185;
                icmp_ln23_reg_1185_pp0_iter2_reg <= icmp_ln23_reg_1185_pp0_iter1_reg;
                mul_ln40_reg_1173 <= mul_ln40_fu_456_p2;
                mul_ln48_reg_1179 <= mul_ln48_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1195 = ap_const_lv1_0) and (icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln32_1_reg_1291 <= add_ln32_1_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln40_10_reg_1558 <= add_ln40_10_fu_848_p2;
                add_ln40_6_reg_1538 <= add_ln40_6_fu_832_p2;
                add_ln40_7_reg_1543 <= add_ln40_7_fu_836_p2;
                add_ln40_8_reg_1548 <= add_ln40_8_fu_840_p2;
                add_ln40_9_reg_1553 <= add_ln40_9_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln40_2_reg_1498 <= add_ln40_2_fu_804_p2;
                add_ln40_5_reg_1508 <= add_ln40_5_fu_813_p2;
                    zext_ln40_3_reg_1492(4 downto 0) <= zext_ln40_3_fu_800_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln48_1_reg_1618 <= add_ln48_1_fu_914_p2;
                mul_ln40_3_reg_1593 <= mul_ln40_3_fu_1082_p2;
                mul_ln40_5_reg_1603 <= mul_ln40_5_fu_1088_p2;
                trunc_ln48_1_reg_1598 <= mul_ln40_4_reg_1578(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln48_2_reg_1643 <= add_ln48_2_fu_955_p2;
                mul_ln40_6_reg_1628 <= mul_ln40_6_fu_1094_p2;
                mul_ln40_7_reg_1633 <= mul_ln40_7_fu_1100_p2;
                trunc_ln48_s_reg_1623 <= mul_ln40_3_reg_1593(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln48_4_reg_1658 <= add_ln48_4_fu_996_p2;
                add_ln48_5_reg_1663 <= add_ln48_5_fu_1001_p2;
                mul_ln40_8_reg_1648 <= mul_ln40_8_fu_1106_p2;
                mul_ln40_9_reg_1653 <= mul_ln40_9_fu_1112_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln48_7_reg_1683 <= add_ln48_7_fu_1046_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln48_9_reg_1688 <= add_ln48_9_fu_1055_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_reg_1563 <= grp_fu_1064_p3;
                kernel_load_7_reg_1513 <= kernel_q0;
                kernel_load_8_reg_1518 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_reg_1563_pp0_iter2_reg <= add_ln48_reg_1563;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                bias_load_reg_1568 <= bias_q0;
                mul_ln40_2_reg_1573 <= mul_ln40_2_fu_1070_p2;
                mul_ln40_4_reg_1578 <= mul_ln40_4_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1148 <= empty_fu_390_p1;
                icmp_ln33_reg_1163 <= icmp_ln33_fu_420_p2;
                mul_ln4_reg_1153 <= mul_ln4_fu_406_p2;
                    tmp_1_reg_1158(13 downto 4) <= tmp_1_fu_412_p3(13 downto 4);
                    zext_ln40_1_cast14_reg_1130(6 downto 0) <= zext_ln40_1_cast14_fu_378_p1(6 downto 0);
                    zext_ln40_reg_1124(6 downto 0) <= zext_ln40_fu_374_p1(6 downto 0);
                    zext_ln48_1_cast_reg_1143(5 downto 0) <= zext_ln48_1_cast_fu_386_p1(5 downto 0);
                    zext_ln48_reg_1137(5 downto 0) <= zext_ln48_fu_382_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                kernel_load_1_reg_1386 <= kernel_q1;
                kernel_load_4_reg_1391 <= kernel_q0;
                select_ln24_2_reg_1416 <= select_ln24_2_fu_736_p3;
                select_ln32_13_reg_1452 <= select_ln32_13_fu_772_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                kernel_load_2_reg_1342 <= kernel_q1;
                kernel_load_3_reg_1347 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                kernel_load_5_reg_1457 <= kernel_q1;
                kernel_load_6_reg_1462 <= kernel_q0;
                out_w_reg_1487 <= out_w_fu_795_p2;
                select_ln32_reg_1477 <= select_ln32_fu_786_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                kernel_load_reg_1296 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1185_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln40_10_reg_1678 <= mul_ln40_10_fu_1118_p2;
                trunc_ln48_5_reg_1668 <= mul_ln40_8_reg_1648(29 downto 14);
                trunc_ln48_6_reg_1673 <= mul_ln40_9_reg_1653(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_362 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_366 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1195 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp11_reg_1219 <= tmp11_fu_517_p2;
                tmp_0_0_reg_1214 <= tmp_0_0_fu_512_p2;
            end if;
        end if;
    end process;
    zext_ln40_reg_1124(8 downto 7) <= "00";
    zext_ln40_1_cast14_reg_1130(13 downto 7) <= "0000000";
    zext_ln48_reg_1137(8 downto 6) <= "000";
    zext_ln48_1_cast_reg_1143(13 downto 6) <= "00000000";
    tmp_1_reg_1158(3 downto 0) <= "0000";
    zext_ln40_1_reg_1429(13 downto 5) <= "000000000";
    zext_ln40_5_reg_1441(13 downto 5) <= "000000000";
    zext_ln40_3_reg_1492(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1185, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((icmp_ln23_reg_1185 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((icmp_ln23_reg_1185 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln23_fu_522_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(indvar_flatten48_reg_304));
    add_ln24_1_fu_548_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(select_ln24_1_fu_538_p3));
    add_ln24_2_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(select_ln24_1_fu_538_p3));
    add_ln24_3_fu_619_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(select_ln24_1_reg_1234));
    add_ln24_4_fu_687_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(select_ln24_1_reg_1234));
    add_ln24_5_fu_692_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(select_ln24_1_reg_1234));
    add_ln24_6_fu_726_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(select_ln24_1_reg_1234));
    add_ln24_7_fu_731_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(select_ln24_1_reg_1234));
    add_ln24_fu_606_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln24_1_reg_1234));
    add_ln27_1_fu_502_p2 <= std_logic_vector(unsigned(zext_ln27_2_fu_482_p1) + unsigned(zext_ln27_3_fu_498_p1));
    add_ln27_fu_450_p2 <= std_logic_vector(unsigned(zext_ln27_fu_430_p1) + unsigned(zext_ln27_1_fu_446_p1));
    add_ln32_1_fu_600_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(indvar_flatten_reg_328));
    add_ln40_10_fu_848_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1422) + unsigned(zext_ln40_5_reg_1441));
    add_ln40_2_fu_804_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1367) + unsigned(zext_ln40_3_fu_800_p1));
    add_ln40_3_fu_758_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(out_w_0_mid2_reg_1284));
    add_ln40_4_fu_767_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1367) + unsigned(zext_ln40_5_fu_763_p1));
    add_ln40_5_fu_813_p2 <= std_logic_vector(unsigned(zext_ln40_1_reg_1429) + unsigned(tmp10_1_0_mid2_reg_1374));
    add_ln40_6_fu_832_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1374) + unsigned(zext_ln40_3_reg_1492));
    add_ln40_7_fu_836_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1374) + unsigned(zext_ln40_5_reg_1441));
    add_ln40_8_fu_840_p2 <= std_logic_vector(unsigned(zext_ln40_1_reg_1429) + unsigned(tmp10_2_0_mid2_reg_1422));
    add_ln40_9_fu_844_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1422) + unsigned(zext_ln40_3_reg_1492));
    add_ln40_fu_753_p2 <= std_logic_vector(unsigned(zext_ln40_1_fu_750_p1) + unsigned(tmp10_0_0_mid2_reg_1367));
    add_ln48_1_fu_914_p2 <= std_logic_vector(unsigned(trunc_ln_fu_880_p4) + unsigned(bias_load_reg_1568));
    add_ln48_2_fu_955_p2 <= std_logic_vector(unsigned(trunc_ln48_2_fu_934_p4) + unsigned(trunc_ln48_1_reg_1598));
    add_ln48_3_fu_992_p2 <= std_logic_vector(unsigned(trunc_ln48_s_reg_1623) + unsigned(add_ln48_2_reg_1643));
    add_ln48_4_fu_996_p2 <= std_logic_vector(unsigned(add_ln48_1_reg_1618) + unsigned(add_ln48_3_fu_992_p2));
    add_ln48_5_fu_1001_p2 <= std_logic_vector(unsigned(trunc_ln48_4_fu_975_p4) + unsigned(trunc_ln48_3_fu_966_p4));
    add_ln48_6_fu_1041_p2 <= std_logic_vector(unsigned(trunc_ln48_7_fu_1032_p4) + unsigned(trunc_ln48_6_reg_1673));
    add_ln48_7_fu_1046_p2 <= std_logic_vector(unsigned(trunc_ln48_5_reg_1668) + unsigned(add_ln48_6_fu_1041_p2));
    add_ln48_8_fu_1051_p2 <= std_logic_vector(unsigned(add_ln48_5_reg_1663) + unsigned(add_ln48_7_reg_1683));
    add_ln48_9_fu_1055_p2 <= std_logic_vector(unsigned(add_ln48_4_reg_1658) + unsigned(add_ln48_8_fu_1051_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln23_reg_1185)
    begin
        if ((icmp_ln23_reg_1185 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten48_phi_fu_308_p4_assign_proc : process(indvar_flatten48_reg_304, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1185, ap_CS_fsm_pp0_stage0, add_ln23_reg_1224, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten48_phi_fu_308_p4 <= add_ln23_reg_1224;
        else 
            ap_phi_mux_indvar_flatten48_phi_fu_308_p4 <= indvar_flatten48_reg_304;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_332_p4_assign_proc : process(indvar_flatten_reg_328, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1185, ap_CS_fsm_pp0_stage0, select_ln32_13_reg_1452, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= select_ln32_13_reg_1452;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= indvar_flatten_reg_328;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_320_p4_assign_proc : process(out_d_0_reg_316, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1185, ap_CS_fsm_pp0_stage0, select_ln24_2_reg_1416, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_320_p4 <= select_ln24_2_reg_1416;
        else 
            ap_phi_mux_out_d_0_phi_fu_320_p4 <= out_d_0_reg_316;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_344_p4_assign_proc : process(out_h_0_reg_340, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1185_pp0_iter1_reg, select_ln32_reg_1477, ap_block_pp0_stage1)
    begin
        if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_out_h_0_phi_fu_344_p4 <= select_ln32_reg_1477;
        else 
            ap_phi_mux_out_h_0_phi_fu_344_p4 <= out_h_0_reg_340;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_355_p4_assign_proc : process(out_w_0_reg_351, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1185_pp0_iter1_reg, out_w_reg_1487, ap_block_pp0_stage1)
    begin
        if (((icmp_ln23_reg_1185_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_out_w_0_phi_fu_355_p4 <= out_w_reg_1487;
        else 
            ap_phi_mux_out_w_0_phi_fu_355_p4 <= out_w_0_reg_351;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln24_9_fu_817_p1(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_55_fu_394_p1 <= output_height(5 - 1 downto 0);
    empty_57_fu_587_p2 <= (select_ln24_7_fu_575_p3 or icmp_ln32_reg_1195);
    empty_fu_390_p1 <= output_width(5 - 1 downto 0);
    grp_fu_1064_p0 <= zext_ln48_1_cast_reg_1143(6 - 1 downto 0);
    grp_fu_1064_p1 <= grp_fu_1064_p10(9 - 1 downto 0);
    grp_fu_1064_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_mid2_v_v_reg_1332),14));
    grp_fu_1064_p2 <= zext_ln40_1_reg_1429(5 - 1 downto 0);
    icmp_ln23_fu_466_p2 <= "1" when (ap_phi_mux_indvar_flatten48_phi_fu_308_p4 = tmp_1_reg_1158) else "0";
    icmp_ln32_fu_477_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_332_p4 = mul_ln4_reg_1153) else "0";
    icmp_ln33_1_fu_570_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_355_p4 = empty_reg_1148) else "0";
    icmp_ln33_fu_420_p2 <= "1" when (empty_fu_390_p1 = ap_const_lv5_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, zext_ln40_2_fu_791_p1, zext_ln40_4_fu_824_p1, zext_ln40_8_fu_866_p1, zext_ln40_10_fu_906_p1, zext_ln40_12_fu_951_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address0 <= zext_ln40_12_fu_951_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address0 <= zext_ln40_10_fu_906_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address0 <= zext_ln40_8_fu_866_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln40_4_fu_824_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln40_2_fu_791_p1(14 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln40_6_fu_809_p1, zext_ln40_7_fu_828_p1, zext_ln40_9_fu_870_p1, zext_ln40_11_fu_910_p1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= zext_ln40_11_fu_910_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln40_9_fu_870_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln40_7_fu_828_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address1 <= zext_ln40_6_fu_809_p1(14 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln24_fu_543_p1, ap_block_pp0_stage2, zext_ln24_3_fu_615_p1, ap_block_pp0_stage3, zext_ln24_4_fu_683_p1, ap_block_pp0_stage4, zext_ln24_6_fu_722_p1, zext_ln24_7_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_address0 <= zext_ln24_7_fu_778_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            kernel_address0 <= zext_ln24_6_fu_722_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            kernel_address0 <= zext_ln24_4_fu_683_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_address0 <= zext_ln24_3_fu_615_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_address0 <= zext_ln24_fu_543_p1(8 - 1 downto 0);
        else 
            kernel_address0 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln24_2_fu_611_p1, ap_block_pp0_stage2, zext_ln24_1_fu_679_p1, ap_block_pp0_stage3, zext_ln24_5_fu_718_p1, ap_block_pp0_stage4, zext_ln24_8_fu_782_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_address1 <= zext_ln24_8_fu_782_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            kernel_address1 <= zext_ln24_5_fu_718_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            kernel_address1 <= zext_ln24_1_fu_679_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            kernel_address1 <= zext_ln24_2_fu_611_p1(8 - 1 downto 0);
        else 
            kernel_address1 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln40_1_fu_560_p0 <= zext_ln48_2_fu_535_p1(5 - 1 downto 0);
    mul_ln40_1_fu_560_p1 <= zext_ln40_reg_1124(7 - 1 downto 0);
    mul_ln40_1_fu_560_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_1_fu_560_p0) * unsigned(mul_ln40_1_fu_560_p1), 9));
    mul_ln40_fu_456_p0 <= zext_ln48_1_fu_426_p1(5 - 1 downto 0);
    mul_ln40_fu_456_p1 <= zext_ln40_reg_1124(7 - 1 downto 0);
    mul_ln40_fu_456_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_fu_456_p0) * unsigned(mul_ln40_fu_456_p1), 9));
    mul_ln48_1_fu_565_p0 <= zext_ln48_2_fu_535_p1(5 - 1 downto 0);
    mul_ln48_1_fu_565_p1 <= zext_ln48_reg_1137(6 - 1 downto 0);
    mul_ln48_1_fu_565_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_1_fu_565_p0) * unsigned(mul_ln48_1_fu_565_p1), 9));
    mul_ln48_fu_461_p0 <= zext_ln48_1_fu_426_p1(5 - 1 downto 0);
    mul_ln48_fu_461_p1 <= zext_ln48_reg_1137(6 - 1 downto 0);
    mul_ln48_fu_461_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_fu_461_p0) * unsigned(mul_ln48_fu_461_p1), 9));
    mul_ln4_fu_406_p0 <= mul_ln4_fu_406_p00(5 - 1 downto 0);
    mul_ln4_fu_406_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_55_fu_394_p1),10));
    mul_ln4_fu_406_p1 <= mul_ln4_fu_406_p10(5 - 1 downto 0);
    mul_ln4_fu_406_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_390_p1),10));
    mul_ln4_fu_406_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln4_fu_406_p0) * unsigned(mul_ln4_fu_406_p1), 10));
    out_d_fu_471_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4));
    out_h_fu_581_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln24_fu_528_p3));
    out_w_0_mid2_fu_592_p3 <= 
        ap_const_lv5_0 when (empty_57_fu_587_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_355_p4;
    out_w_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(out_w_0_mid2_reg_1284));
    output_r_address0 <= zext_ln48_3_fu_1060_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln48_9_reg_1688;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter2, icmp_ln23_reg_1185_pp0_iter2_reg)
    begin
        if (((icmp_ln23_reg_1185_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_1_fu_538_p3 <= 
        add_ln27_1_reg_1209 when (icmp_ln32_reg_1195(0) = '1') else 
        add_ln27_reg_1168;
    select_ln24_2_fu_736_p3 <= 
        out_d_reg_1189 when (icmp_ln32_reg_1195(0) = '1') else 
        out_d_0_reg_316;
    select_ln24_3_fu_624_p3 <= 
        mul_ln40_1_reg_1259 when (icmp_ln32_reg_1195(0) = '1') else 
        mul_ln40_reg_1173;
    select_ln24_4_fu_629_p3 <= 
        mul_ln48_1_reg_1265 when (icmp_ln32_reg_1195(0) = '1') else 
        mul_ln48_reg_1179;
    select_ln24_5_fu_634_p3 <= 
        mul_ln40_1_reg_1259 when (icmp_ln32_reg_1195(0) = '1') else 
        tmp_0_0_reg_1214;
    select_ln24_6_fu_639_p3 <= 
        mul_ln48_1_reg_1265 when (icmp_ln32_reg_1195(0) = '1') else 
        tmp11_reg_1219;
    select_ln24_7_fu_575_p3 <= 
        icmp_ln33_reg_1163 when (icmp_ln32_reg_1195(0) = '1') else 
        icmp_ln33_1_fu_570_p2;
    select_ln24_fu_528_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_reg_1195(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_344_p4;
    select_ln32_13_fu_772_p3 <= 
        ap_const_lv10_1 when (icmp_ln32_reg_1195(0) = '1') else 
        add_ln32_1_reg_1291;
    select_ln32_fu_786_p3 <= 
        out_h_reg_1278 when (select_ln24_7_reg_1271(0) = '1') else 
        select_ln24_reg_1229;
        sext_ln4_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    shl_ln27_mid1_fu_490_p3 <= (trunc_ln27_1_fu_486_p1 & ap_const_lv3_0);
    shl_ln_fu_438_p3 <= (trunc_ln27_fu_434_p1 & ap_const_lv3_0);
    tmp10_0_0_mid2_fu_700_p0 <= zext_ln40_1_cast14_reg_1130(7 - 1 downto 0);
    tmp10_0_0_mid2_fu_700_p1 <= tmp10_0_0_mid2_fu_700_p10(9 - 1 downto 0);
    tmp10_0_0_mid2_fu_700_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_reg_1321),14));
    tmp10_0_0_mid2_fu_700_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_fu_700_p0) * unsigned(tmp10_0_0_mid2_fu_700_p1), 14));
    tmp10_0_0_mid2_v_v_fu_653_p3 <= 
        tmp_0_0_mid1_fu_647_p2 when (select_ln24_7_reg_1271(0) = '1') else 
        select_ln24_5_fu_634_p3;
    tmp10_1_0_mid2_fu_708_p0 <= zext_ln40_1_cast14_reg_1130(7 - 1 downto 0);
    tmp10_1_0_mid2_fu_708_p1 <= tmp10_1_0_mid2_fu_708_p10(9 - 1 downto 0);
    tmp10_1_0_mid2_fu_708_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_v_v_reg_1327),14));
    tmp10_1_0_mid2_fu_708_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_fu_708_p0) * unsigned(tmp10_1_0_mid2_fu_708_p1), 14));
    tmp10_1_0_mid2_v_v_fu_660_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp10_0_0_mid2_v_v_fu_653_p3));
    tmp10_2_0_mid2_fu_745_p0 <= zext_ln40_1_cast14_reg_1130(7 - 1 downto 0);
    tmp10_2_0_mid2_fu_745_p1 <= tmp10_2_0_mid2_fu_745_p10(9 - 1 downto 0);
    tmp10_2_0_mid2_fu_745_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_v_v_reg_1381),14));
    tmp10_2_0_mid2_fu_745_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_fu_745_p0) * unsigned(tmp10_2_0_mid2_fu_745_p1), 14));
    tmp10_2_0_mid2_v_v_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(tmp10_0_0_mid2_v_v_reg_1321));
    tmp11_fu_517_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_fu_508_p1) + unsigned(mul_ln48_reg_1179));
    tmp11_mid1_fu_666_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_fu_644_p1) + unsigned(select_ln24_4_fu_629_p3));
    tmp12_mid2_v_v_fu_672_p3 <= 
        tmp11_mid1_fu_666_p2 when (select_ln24_7_reg_1271(0) = '1') else 
        select_ln24_6_fu_639_p3;
    tmp_0_0_fu_512_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_fu_508_p1) + unsigned(mul_ln40_reg_1173));
    tmp_0_0_mid1_fu_647_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_fu_644_p1) + unsigned(select_ln24_3_fu_624_p3));
    tmp_1_fu_412_p3 <= (mul_ln4_fu_406_p2 & ap_const_lv4_0);
    trunc_ln27_1_fu_486_p1 <= out_d_fu_471_p2(4 - 1 downto 0);
    trunc_ln27_fu_434_p1 <= ap_phi_mux_out_d_0_phi_fu_320_p4(4 - 1 downto 0);
    trunc_ln48_2_fu_934_p4 <= mul_ln40_5_reg_1603(29 downto 14);
    trunc_ln48_3_fu_966_p4 <= mul_ln40_6_reg_1628(29 downto 14);
    trunc_ln48_4_fu_975_p4 <= mul_ln40_7_reg_1633(29 downto 14);
    trunc_ln48_7_fu_1032_p4 <= mul_ln40_10_reg_1678(29 downto 14);
    trunc_ln_fu_880_p4 <= mul_ln40_2_reg_1573(29 downto 14);
    zext_ln24_1_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_reg_1301),64));
    zext_ln24_2_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_1_reg_1249),64));
    zext_ln24_3_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_2_reg_1254),64));
    zext_ln24_4_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_3_reg_1316),64));
    zext_ln24_5_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_4_reg_1357),64));
    zext_ln24_6_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_5_reg_1362),64));
    zext_ln24_7_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_6_reg_1406),64));
    zext_ln24_8_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_7_reg_1411),64));
    zext_ln24_9_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_2_reg_1416),64));
    zext_ln24_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_fu_538_p3),64));
    zext_ln27_1_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_438_p3),8));
    zext_ln27_2_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_471_p2),8));
    zext_ln27_3_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln27_mid1_fu_490_p3),8));
    zext_ln27_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4),8));
    zext_ln40_10_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_8_reg_1548),64));
    zext_ln40_11_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_9_reg_1553),64));
    zext_ln40_12_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_10_reg_1558),64));
    zext_ln40_1_cast14_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln4_fu_370_p1),14));
    zext_ln40_1_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1284),14));
    zext_ln40_2_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_344_p4),9));
    zext_ln40_2_cast_mid_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_1278),9));
    zext_ln40_2_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_reg_1436),64));
    zext_ln40_3_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_795_p2),14));
    zext_ln40_4_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_reg_1498),64));
    zext_ln40_5_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_3_fu_758_p2),14));
    zext_ln40_6_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_4_reg_1447),64));
    zext_ln40_7_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_5_reg_1508),64));
    zext_ln40_8_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_6_reg_1538),64));
    zext_ln40_9_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_7_reg_1543),64));
    zext_ln40_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln48_1_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln48_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4),9));
    zext_ln48_2_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_1189),9));
    zext_ln48_3_fu_1060_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1563_pp0_iter2_reg),64));
    zext_ln48_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
