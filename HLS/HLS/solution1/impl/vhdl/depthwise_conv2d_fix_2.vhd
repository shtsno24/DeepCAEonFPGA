-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten48_reg_298 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_0_reg_310 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_322 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_333 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_344 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_355 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_360 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_364 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_373 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_reg_1237_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_fu_387_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_reg_1183 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_1_cast14_fu_391_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_1_cast14_reg_1189 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln51_fu_395_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_reg_1196 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_1_cast_fu_399_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln51_1_cast_reg_1202 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_403_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1207 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_419_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln4_reg_1212 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_425_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_1217 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln33_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1222 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln51_1_fu_439_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_1_reg_1227 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_1_reg_1227_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_2_cast_fu_474_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_2_cast_reg_1232 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_2_cast_reg_1232_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln23_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_489_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1241 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln32_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1246 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1246_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_500_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_reg_1254 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln51_2_fu_508_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln51_2_reg_1259 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_1_fu_538_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_1_reg_1264 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_7_fu_577_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_7_reg_1281 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_7_reg_1281_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1287 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_fu_596_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1292 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln42_2_cast_mid_fu_604_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_2_cast_mid_reg_1299 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_2_cast_mid_reg_1299_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_0_0_mid2_v_v_fu_614_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_0_0_mid2_v_v_reg_1304 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln32_1_fu_622_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_1_reg_1311 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp12_0_0_mid2_fu_651_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_0_0_mid2_reg_1326 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_1_0_mid2_fu_665_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_1_0_mid2_reg_1333 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_2_0_mid2_fu_699_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_2_0_mid2_reg_1350 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_fu_704_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_reg_1357 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_reg_1357_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_fu_717_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1369 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln42_2_fu_722_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_2_reg_1374 : STD_LOGIC_VECTOR (13 downto 0);
    signal kernel_load_4_reg_1385 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln51_1_fu_756_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln51_1_reg_1400 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln42_4_fu_765_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln42_4_reg_1406 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_fu_788_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_reg_1422 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln24_2_fu_822_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_2_reg_1437 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_fu_828_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_reg_1443 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_reg_1448 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_s_reg_1453 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_13_fu_877_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_13_reg_1468 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln51_1_reg_1478 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_2_reg_1483 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_10_fu_939_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_10_reg_1498 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln51_3_reg_1503 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_4_reg_1508 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_4_fu_994_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_4_reg_1518 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_mid2_v_v_fu_1034_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp14_mid2_v_v_reg_1523 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln51_5_reg_1528 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_6_reg_1533 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_5_fu_1067_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_5_reg_1538 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_7_reg_1543 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1170_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln51_reg_1548 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln51_9_fu_1105_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_9_reg_1553 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten48_phi_fu_302_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_314_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_326_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_337_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_348_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln24_fu_546_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln24_2_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_3_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_4_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_1_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_3_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_6_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_5_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_6_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_7_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_8_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_7_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_8_fu_872_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_9_fu_891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_9_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_10_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_11_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_3_fu_1110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4_fu_383_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_57_fu_407_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_419_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_419_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_fu_447_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_451_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_443_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_1_fu_459_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_fu_469_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln42_fu_469_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln42_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln27_1_fu_516_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln27_mid1_fu_520_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_2_fu_512_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_3_fu_528_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_1_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_1_fu_551_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln42_1_fu_551_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln42_1_fu_551_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_fu_478_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln33_1_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_59_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_3_fu_556_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_mid1_fu_608_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_5_fu_564_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln24_fu_628_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_1_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_0_0_mid2_fu_651_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_0_0_mid2_fu_651_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_1_0_mid2_v_v_fu_656_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_1_0_mid2_fu_665_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_1_0_mid2_fu_665_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln24_2_fu_670_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_3_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_2_0_mid2_v_v_fu_690_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_2_0_mid2_fu_699_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_2_0_mid2_fu_699_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln42_fu_707_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_2_fu_726_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_4_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_5_fu_746_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln51_1_fu_756_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln51_1_fu_756_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln42_3_fu_760_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln42_4_fu_769_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_5_fu_779_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_6_fu_802_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_7_fu_812_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_2_fu_1114_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_3_fu_1121_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln42_6_fu_859_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_7_fu_868_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln42_4_fu_1128_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_5_fu_1135_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln42_8_fu_921_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln42_9_fu_930_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln42_6_fu_1142_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_7_fu_1149_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln51_2_fu_985_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_1_fu_980_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_3_fu_989_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln51_fu_1000_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln51_fu_1000_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln51_fu_1000_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp13_fu_1004_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_4_fu_1017_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp13_mid1_fu_1029_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_6_fu_1023_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln42_8_fu_1156_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_9_fu_1163_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_10_fu_1176_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln51_6_fu_1091_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_7_fu_1095_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_8_fu_1100_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1170_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1170_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1170_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1170_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln42_1_fu_551_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln42_fu_469_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln4_fu_419_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln4_fu_419_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp12_0_0_mid2_fu_651_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_1_0_mid2_fu_665_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_2_0_mid2_fu_699_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_condition_150 : BOOLEAN;
    signal ap_condition_135 : BOOLEAN;

    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component network_mac_muladd_6ns_9ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_1_1_U33 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_373,
        din1 => reg_355,
        dout => mul_ln42_2_fu_1114_p2);

    network_mul_mul_16s_16s_30_1_1_U34 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_378,
        din1 => reg_360,
        dout => mul_ln42_3_fu_1121_p2);

    network_mul_mul_16s_16s_30_1_1_U35 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_373,
        din1 => reg_364,
        dout => mul_ln42_4_fu_1128_p2);

    network_mul_mul_16s_16s_30_1_1_U36 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_378,
        din1 => reg_368,
        dout => mul_ln42_5_fu_1135_p2);

    network_mul_mul_16s_16s_30_1_1_U37 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_373,
        din1 => kernel_load_4_reg_1385,
        dout => mul_ln42_6_fu_1142_p2);

    network_mul_mul_16s_16s_30_1_1_U38 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_378,
        din1 => reg_355,
        dout => mul_ln42_7_fu_1149_p2);

    network_mul_mul_16s_16s_30_1_1_U39 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_373,
        din1 => reg_360,
        dout => mul_ln42_8_fu_1156_p2);

    network_mul_mul_16s_16s_30_1_1_U40 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_378,
        din1 => reg_364,
        dout => mul_ln42_9_fu_1163_p2);

    network_mac_muladd_6ns_9ns_5ns_14_1_1_U41 : component network_mac_muladd_6ns_9ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1170_p0,
        din1 => grp_fu_1170_p1,
        din2 => grp_fu_1170_p2,
        dout => grp_fu_1170_p3);

    network_mul_mul_16s_16s_30_1_1_U42 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_373,
        din1 => reg_368,
        dout => mul_ln42_10_fu_1176_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln23_reg_1237 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state9) and (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten48_reg_298 <= add_ln23_reg_1422;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten48_reg_298 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_322 <= select_ln32_13_reg_1468;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_322 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_310 <= select_ln24_2_reg_1437;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_310 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_333 <= select_ln32_reg_1443;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_333 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_344 <= out_w_reg_1369;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_344 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                    reg_355 <= kernel_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_355 <= kernel_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln23_reg_1237 = ap_const_lv1_0)) then
                if ((ap_const_boolean_1 = ap_condition_135)) then 
                    reg_368 <= kernel_q0;
                elsif ((ap_const_boolean_1 = ap_condition_150)) then 
                    reg_368 <= kernel_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_373_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
                reg_373 <= input_r_q0;
            elsif ((((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_373 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                reg_378 <= input_r_q1;
            elsif ((((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_378 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln23_reg_1422 <= add_ln23_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln32_1_reg_1311 <= add_ln32_1_fu_622_p2;
                icmp_ln32_reg_1246 <= icmp_ln32_fu_495_p2;
                out_d_reg_1241 <= out_d_fu_489_p2;
                out_h_reg_1287 <= out_h_fu_584_p2;
                out_w_0_mid2_reg_1292 <= out_w_0_mid2_fu_596_p3;
                select_ln24_1_reg_1264 <= select_ln24_1_fu_538_p3;
                select_ln24_7_reg_1281 <= select_ln24_7_fu_577_p3;
                select_ln24_reg_1254 <= select_ln24_fu_500_p3;
                tmp12_0_0_mid2_v_v_reg_1304 <= tmp12_0_0_mid2_v_v_fu_614_p3;
                    zext_ln42_2_cast_mid_reg_1299(4 downto 0) <= zext_ln42_2_cast_mid_fu_604_p1(4 downto 0);
                    zext_ln51_2_reg_1259(4 downto 0) <= zext_ln51_2_fu_508_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln42_10_reg_1498 <= add_ln42_10_fu_939_p2;
                trunc_ln51_1_reg_1478 <= mul_ln42_4_fu_1128_p2(29 downto 14);
                trunc_ln51_2_reg_1483 <= mul_ln42_5_fu_1135_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln51_4_reg_1518 <= add_ln51_4_fu_994_p2;
                trunc_ln51_3_reg_1503 <= mul_ln42_6_fu_1142_p2(29 downto 14);
                trunc_ln51_4_reg_1508 <= mul_ln42_7_fu_1149_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln51_5_reg_1538 <= add_ln51_5_fu_1067_p2;
                tmp14_mid2_v_v_reg_1523 <= tmp14_mid2_v_v_fu_1034_p3;
                trunc_ln51_5_reg_1528 <= mul_ln42_8_fu_1156_p2(29 downto 14);
                trunc_ln51_6_reg_1533 <= mul_ln42_9_fu_1163_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln51_9_reg_1553 <= add_ln51_9_fu_1105_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln51_reg_1548 <= grp_fu_1170_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1207 <= empty_fu_403_p1;
                icmp_ln33_reg_1222 <= icmp_ln33_fu_433_p2;
                mul_ln4_reg_1212 <= mul_ln4_fu_419_p2;
                    tmp_s_reg_1217(13 downto 4) <= tmp_s_fu_425_p3(13 downto 4);
                    zext_ln42_1_cast14_reg_1189(6 downto 0) <= zext_ln42_1_cast14_fu_391_p1(6 downto 0);
                    zext_ln42_reg_1183(6 downto 0) <= zext_ln42_fu_387_p1(6 downto 0);
                    zext_ln51_1_cast_reg_1202(5 downto 0) <= zext_ln51_1_cast_fu_399_p1(5 downto 0);
                    zext_ln51_reg_1196(5 downto 0) <= zext_ln51_fu_395_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln23_reg_1237 <= icmp_ln23_fu_484_p2;
                icmp_ln23_reg_1237_pp0_iter1_reg <= icmp_ln23_reg_1237;
                icmp_ln32_reg_1246_pp0_iter1_reg <= icmp_ln32_reg_1246;
                select_ln24_7_reg_1281_pp0_iter1_reg <= select_ln24_7_reg_1281;
                    zext_ln42_2_cast_mid_reg_1299_pp0_iter1_reg(4 downto 0) <= zext_ln42_2_cast_mid_reg_1299(4 downto 0);
                    zext_ln42_2_cast_reg_1232(4 downto 0) <= zext_ln42_2_cast_fu_474_p1(4 downto 0);
                    zext_ln42_2_cast_reg_1232_pp0_iter1_reg(4 downto 0) <= zext_ln42_2_cast_reg_1232(4 downto 0);
                    zext_ln51_1_reg_1227(4 downto 0) <= zext_ln51_1_fu_439_p1(4 downto 0);
                    zext_ln51_1_reg_1227_pp0_iter1_reg(4 downto 0) <= zext_ln51_1_reg_1227(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                kernel_load_4_reg_1385 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_ln51_1_reg_1400 <= mul_ln51_1_fu_756_p2;
                    zext_ln42_4_reg_1406(4 downto 0) <= zext_ln42_4_fu_765_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_w_reg_1369 <= out_w_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_360 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_364 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln24_2_reg_1437 <= select_ln24_2_fu_822_p3;
                select_ln32_13_reg_1468 <= select_ln32_13_fu_877_p3;
                select_ln32_reg_1443 <= select_ln32_fu_828_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp12_0_0_mid2_reg_1326 <= tmp12_0_0_mid2_fu_651_p2;
                tmp12_1_0_mid2_reg_1333 <= tmp12_1_0_mid2_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp12_2_0_mid2_reg_1350 <= tmp12_2_0_mid2_fu_699_p2;
                    zext_ln40_reg_1357(4 downto 0) <= zext_ln40_fu_704_p1(4 downto 0);
                    zext_ln42_2_reg_1374(4 downto 0) <= zext_ln42_2_fu_722_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                trunc_ln51_7_reg_1543 <= mul_ln42_10_fu_1176_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                trunc_ln51_s_reg_1453 <= mul_ln42_3_fu_1121_p2(29 downto 14);
                trunc_ln_reg_1448 <= mul_ln42_2_fu_1114_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                    zext_ln40_reg_1357_pp0_iter1_reg(4 downto 0) <= zext_ln40_reg_1357(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln42_reg_1183(8 downto 7) <= "00";
    zext_ln42_1_cast14_reg_1189(13 downto 7) <= "0000000";
    zext_ln51_reg_1196(8 downto 6) <= "000";
    zext_ln51_1_cast_reg_1202(13 downto 6) <= "00000000";
    tmp_s_reg_1217(3 downto 0) <= "0000";
    zext_ln51_1_reg_1227(8 downto 5) <= "0000";
    zext_ln51_1_reg_1227_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln42_2_cast_reg_1232(8 downto 5) <= "0000";
    zext_ln42_2_cast_reg_1232_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln51_2_reg_1259(8 downto 5) <= "0000";
    zext_ln42_2_cast_mid_reg_1299(8 downto 5) <= "0000";
    zext_ln42_2_cast_mid_reg_1299_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln40_reg_1357(13 downto 5) <= "000000000";
    zext_ln40_reg_1357_pp0_iter1_reg(13 downto 5) <= "000000000";
    zext_ln42_2_reg_1374(13 downto 5) <= "000000000";
    zext_ln42_4_reg_1406(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln23_fu_788_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(indvar_flatten48_reg_298));
    add_ln24_1_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(select_ln24_1_reg_1264));
    add_ln24_2_fu_670_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(select_ln24_1_reg_1264));
    add_ln24_3_fu_680_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(select_ln24_1_reg_1264));
    add_ln24_4_fu_736_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(select_ln24_1_reg_1264));
    add_ln24_5_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(select_ln24_1_reg_1264));
    add_ln24_6_fu_802_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(select_ln24_1_reg_1264));
    add_ln24_7_fu_812_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(select_ln24_1_reg_1264));
    add_ln24_fu_628_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln24_1_reg_1264));
    add_ln27_1_fu_532_p2 <= std_logic_vector(unsigned(zext_ln27_2_fu_512_p1) + unsigned(zext_ln27_3_fu_528_p1));
    add_ln27_fu_463_p2 <= std_logic_vector(unsigned(zext_ln27_fu_443_p1) + unsigned(zext_ln27_1_fu_459_p1));
    add_ln32_1_fu_622_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_326_p4));
    add_ln42_10_fu_939_p2 <= std_logic_vector(unsigned(tmp12_2_0_mid2_reg_1350) + unsigned(zext_ln42_4_reg_1406));
    add_ln42_2_fu_726_p2 <= std_logic_vector(unsigned(tmp12_0_0_mid2_reg_1326) + unsigned(zext_ln42_2_fu_722_p1));
    add_ln42_3_fu_760_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(out_w_0_mid2_reg_1292));
    add_ln42_4_fu_769_p2 <= std_logic_vector(unsigned(tmp12_0_0_mid2_reg_1326) + unsigned(zext_ln42_4_fu_765_p1));
    add_ln42_5_fu_779_p2 <= std_logic_vector(unsigned(zext_ln40_reg_1357) + unsigned(tmp12_1_0_mid2_reg_1333));
    add_ln42_6_fu_859_p2 <= std_logic_vector(unsigned(tmp12_1_0_mid2_reg_1333) + unsigned(zext_ln42_2_reg_1374));
    add_ln42_7_fu_868_p2 <= std_logic_vector(unsigned(tmp12_1_0_mid2_reg_1333) + unsigned(zext_ln42_4_reg_1406));
    add_ln42_8_fu_921_p2 <= std_logic_vector(unsigned(zext_ln40_reg_1357) + unsigned(tmp12_2_0_mid2_reg_1350));
    add_ln42_9_fu_930_p2 <= std_logic_vector(unsigned(tmp12_2_0_mid2_reg_1350) + unsigned(zext_ln42_2_reg_1374));
    add_ln42_fu_707_p2 <= std_logic_vector(unsigned(zext_ln40_fu_704_p1) + unsigned(tmp12_0_0_mid2_reg_1326));
    add_ln51_1_fu_980_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1448) + unsigned(bias_q0));
    add_ln51_2_fu_985_p2 <= std_logic_vector(unsigned(trunc_ln51_2_reg_1483) + unsigned(trunc_ln51_1_reg_1478));
    add_ln51_3_fu_989_p2 <= std_logic_vector(unsigned(trunc_ln51_s_reg_1453) + unsigned(add_ln51_2_fu_985_p2));
    add_ln51_4_fu_994_p2 <= std_logic_vector(unsigned(add_ln51_1_fu_980_p2) + unsigned(add_ln51_3_fu_989_p2));
    add_ln51_5_fu_1067_p2 <= std_logic_vector(unsigned(trunc_ln51_4_reg_1508) + unsigned(trunc_ln51_3_reg_1503));
    add_ln51_6_fu_1091_p2 <= std_logic_vector(unsigned(trunc_ln51_7_reg_1543) + unsigned(trunc_ln51_6_reg_1533));
    add_ln51_7_fu_1095_p2 <= std_logic_vector(unsigned(trunc_ln51_5_reg_1528) + unsigned(add_ln51_6_fu_1091_p2));
    add_ln51_8_fu_1100_p2 <= std_logic_vector(unsigned(add_ln51_5_reg_1538) + unsigned(add_ln51_7_fu_1095_p2));
    add_ln51_9_fu_1105_p2 <= std_logic_vector(unsigned(add_ln51_4_reg_1518) + unsigned(add_ln51_8_fu_1100_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_135_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_135 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_150_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
                ap_condition_150 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001));
    end process;


    ap_condition_pp0_exit_iter1_state9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten48_phi_fu_302_p4_assign_proc : process(indvar_flatten48_reg_298, icmp_ln23_reg_1237, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln23_reg_1422, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten48_phi_fu_302_p4 <= add_ln23_reg_1422;
        else 
            ap_phi_mux_indvar_flatten48_phi_fu_302_p4 <= indvar_flatten48_reg_298;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_326_p4_assign_proc : process(indvar_flatten_reg_322, icmp_ln23_reg_1237, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_13_reg_1468, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_326_p4 <= select_ln32_13_reg_1468;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_326_p4 <= indvar_flatten_reg_322;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_314_p4_assign_proc : process(out_d_0_reg_310, icmp_ln23_reg_1237, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln24_2_reg_1437, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_314_p4 <= select_ln24_2_reg_1437;
        else 
            ap_phi_mux_out_d_0_phi_fu_314_p4 <= out_d_0_reg_310;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_337_p4_assign_proc : process(out_h_0_reg_333, icmp_ln23_reg_1237, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_reg_1443, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_337_p4 <= select_ln32_reg_1443;
        else 
            ap_phi_mux_out_h_0_phi_fu_337_p4 <= out_h_0_reg_333;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_348_p4_assign_proc : process(out_w_0_reg_344, icmp_ln23_reg_1237, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1369, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1237 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_348_p4 <= out_w_reg_1369;
        else 
            ap_phi_mux_out_w_0_phi_fu_348_p4 <= out_w_0_reg_344;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln24_9_fu_891_p1(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_57_fu_407_p1 <= output_height(5 - 1 downto 0);
    empty_59_fu_590_p2 <= (select_ln24_7_fu_577_p3 or icmp_ln32_fu_495_p2);
    empty_fu_403_p1 <= output_width(5 - 1 downto 0);
    grp_fu_1170_p0 <= zext_ln51_1_cast_reg_1202(6 - 1 downto 0);
    grp_fu_1170_p1 <= grp_fu_1170_p10(9 - 1 downto 0);
    grp_fu_1170_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp14_mid2_v_v_reg_1523),14));
    grp_fu_1170_p2 <= zext_ln40_reg_1357_pp0_iter1_reg(5 - 1 downto 0);
    icmp_ln23_fu_484_p2 <= "1" when (ap_phi_mux_indvar_flatten48_phi_fu_302_p4 = tmp_s_reg_1217) else "0";
    icmp_ln32_fu_495_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_326_p4 = mul_ln4_reg_1212) else "0";
    icmp_ln33_1_fu_572_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_348_p4 = empty_reg_1207) else "0";
    icmp_ln33_fu_433_p2 <= "1" when (empty_fu_403_p1 = ap_const_lv5_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln42_3_fu_731_p1, ap_block_pp0_stage3, zext_ln42_6_fu_783_p1, ap_block_pp0_stage4, zext_ln42_8_fu_872_p1, zext_ln42_9_fu_925_p1, zext_ln42_11_fu_976_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln42_11_fu_976_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln42_9_fu_925_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln42_8_fu_872_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln42_6_fu_783_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln42_3_fu_731_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln42_1_fu_712_p1, ap_block_pp0_stage3, zext_ln42_5_fu_774_p1, ap_block_pp0_stage4, zext_ln42_7_fu_863_p1, zext_ln42_10_fu_934_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln42_10_fu_934_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln42_7_fu_863_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln42_5_fu_774_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln42_1_fu_712_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln24_fu_546_p1, zext_ln24_1_fu_633_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln24_4_fu_685_p1, ap_block_pp0_stage3, zext_ln24_6_fu_751_p1, ap_block_pp0_stage4, zext_ln24_8_fu_817_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= zext_ln24_8_fu_817_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= zext_ln24_6_fu_751_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= zext_ln24_4_fu_685_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= zext_ln24_1_fu_633_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= zext_ln24_fu_546_p1(8 - 1 downto 0);
            else 
                kernel_address0 <= "XXXXXXXX";
            end if;
        else 
            kernel_address0 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, zext_ln24_2_fu_643_p1, zext_ln24_3_fu_675_p1, ap_block_pp0_stage2, zext_ln24_5_fu_741_p1, ap_block_pp0_stage3, zext_ln24_7_fu_807_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address1 <= zext_ln24_7_fu_807_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= zext_ln24_5_fu_741_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= zext_ln24_3_fu_675_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= zext_ln24_2_fu_643_p1(8 - 1 downto 0);
            else 
                kernel_address1 <= "XXXXXXXX";
            end if;
        else 
            kernel_address1 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln42_1_fu_551_p0 <= mul_ln42_1_fu_551_p00(5 - 1 downto 0);
    mul_ln42_1_fu_551_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_489_p2),9));
    mul_ln42_1_fu_551_p1 <= zext_ln42_reg_1183(7 - 1 downto 0);
    mul_ln42_1_fu_551_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln42_1_fu_551_p0) * unsigned(mul_ln42_1_fu_551_p1), 9));
    mul_ln42_fu_469_p0 <= mul_ln42_fu_469_p00(5 - 1 downto 0);
    mul_ln42_fu_469_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),9));
    mul_ln42_fu_469_p1 <= zext_ln42_reg_1183(7 - 1 downto 0);
    mul_ln42_fu_469_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln42_fu_469_p0) * unsigned(mul_ln42_fu_469_p1), 9));
    mul_ln4_fu_419_p0 <= mul_ln4_fu_419_p00(5 - 1 downto 0);
    mul_ln4_fu_419_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_57_fu_407_p1),10));
    mul_ln4_fu_419_p1 <= mul_ln4_fu_419_p10(5 - 1 downto 0);
    mul_ln4_fu_419_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_403_p1),10));
    mul_ln4_fu_419_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln4_fu_419_p0) * unsigned(mul_ln4_fu_419_p1), 10));
    mul_ln51_1_fu_756_p0 <= zext_ln51_2_reg_1259(5 - 1 downto 0);
    mul_ln51_1_fu_756_p1 <= zext_ln51_reg_1196(6 - 1 downto 0);
    mul_ln51_1_fu_756_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln51_1_fu_756_p0) * unsigned(mul_ln51_1_fu_756_p1), 9));
    mul_ln51_fu_1000_p0 <= zext_ln51_1_reg_1227_pp0_iter1_reg(5 - 1 downto 0);
    mul_ln51_fu_1000_p1 <= zext_ln51_reg_1196(6 - 1 downto 0);
    mul_ln51_fu_1000_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln51_fu_1000_p0) * unsigned(mul_ln51_fu_1000_p1), 9));
    out_d_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4));
    out_h_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln24_fu_500_p3));
    out_w_0_mid2_fu_596_p3 <= 
        ap_const_lv5_0 when (empty_59_fu_590_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_348_p4;
    out_w_fu_717_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(out_w_0_mid2_reg_1292));
    output_r_address0 <= zext_ln51_3_fu_1110_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln51_9_reg_1553;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln23_reg_1237_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln23_reg_1237_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_1_fu_538_p3 <= 
        add_ln27_1_fu_532_p2 when (icmp_ln32_fu_495_p2(0) = '1') else 
        add_ln27_fu_463_p2;
    select_ln24_2_fu_822_p3 <= 
        out_d_reg_1241 when (icmp_ln32_reg_1246(0) = '1') else 
        out_d_0_reg_310;
    select_ln24_3_fu_556_p3 <= 
        mul_ln42_1_fu_551_p2 when (icmp_ln32_fu_495_p2(0) = '1') else 
        mul_ln42_fu_469_p2;
    select_ln24_4_fu_1017_p3 <= 
        mul_ln51_1_reg_1400 when (icmp_ln32_reg_1246_pp0_iter1_reg(0) = '1') else 
        mul_ln51_fu_1000_p2;
    select_ln24_5_fu_564_p3 <= 
        mul_ln42_1_fu_551_p2 when (icmp_ln32_fu_495_p2(0) = '1') else 
        tmp_0_0_fu_478_p2;
    select_ln24_6_fu_1023_p3 <= 
        mul_ln51_1_reg_1400 when (icmp_ln32_reg_1246_pp0_iter1_reg(0) = '1') else 
        tmp13_fu_1004_p2;
    select_ln24_7_fu_577_p3 <= 
        icmp_ln33_reg_1222 when (icmp_ln32_fu_495_p2(0) = '1') else 
        icmp_ln33_1_fu_572_p2;
    select_ln24_fu_500_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_fu_495_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_337_p4;
    select_ln32_13_fu_877_p3 <= 
        ap_const_lv10_1 when (icmp_ln32_reg_1246(0) = '1') else 
        add_ln32_1_reg_1311;
    select_ln32_fu_828_p3 <= 
        out_h_reg_1287 when (select_ln24_7_reg_1281(0) = '1') else 
        select_ln24_reg_1254;
        sext_ln4_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    shl_ln27_mid1_fu_520_p3 <= (trunc_ln27_1_fu_516_p1 & ap_const_lv3_0);
    shl_ln_fu_451_p3 <= (trunc_ln27_fu_447_p1 & ap_const_lv3_0);
    tmp12_0_0_mid2_fu_651_p0 <= zext_ln42_1_cast14_reg_1189(7 - 1 downto 0);
    tmp12_0_0_mid2_fu_651_p1 <= tmp12_0_0_mid2_fu_651_p10(9 - 1 downto 0);
    tmp12_0_0_mid2_fu_651_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_0_0_mid2_v_v_reg_1304),14));
    tmp12_0_0_mid2_fu_651_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_0_0_mid2_fu_651_p0) * unsigned(tmp12_0_0_mid2_fu_651_p1), 14));
    tmp12_0_0_mid2_v_v_fu_614_p3 <= 
        tmp_0_0_mid1_fu_608_p2 when (select_ln24_7_fu_577_p3(0) = '1') else 
        select_ln24_5_fu_564_p3;
    tmp12_1_0_mid2_fu_665_p0 <= zext_ln42_1_cast14_reg_1189(7 - 1 downto 0);
    tmp12_1_0_mid2_fu_665_p1 <= tmp12_1_0_mid2_fu_665_p10(9 - 1 downto 0);
    tmp12_1_0_mid2_fu_665_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_1_0_mid2_v_v_fu_656_p2),14));
    tmp12_1_0_mid2_fu_665_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_1_0_mid2_fu_665_p0) * unsigned(tmp12_1_0_mid2_fu_665_p1), 14));
    tmp12_1_0_mid2_v_v_fu_656_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp12_0_0_mid2_v_v_reg_1304));
    tmp12_2_0_mid2_fu_699_p0 <= zext_ln42_1_cast14_reg_1189(7 - 1 downto 0);
    tmp12_2_0_mid2_fu_699_p1 <= tmp12_2_0_mid2_fu_699_p10(9 - 1 downto 0);
    tmp12_2_0_mid2_fu_699_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_2_0_mid2_v_v_fu_690_p2),14));
    tmp12_2_0_mid2_fu_699_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_2_0_mid2_fu_699_p0) * unsigned(tmp12_2_0_mid2_fu_699_p1), 14));
    tmp12_2_0_mid2_v_v_fu_690_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(tmp12_0_0_mid2_v_v_reg_1304));
    tmp13_fu_1004_p2 <= std_logic_vector(unsigned(zext_ln42_2_cast_reg_1232_pp0_iter1_reg) + unsigned(mul_ln51_fu_1000_p2));
    tmp13_mid1_fu_1029_p2 <= std_logic_vector(unsigned(zext_ln42_2_cast_mid_reg_1299_pp0_iter1_reg) + unsigned(select_ln24_4_fu_1017_p3));
    tmp14_mid2_v_v_fu_1034_p3 <= 
        tmp13_mid1_fu_1029_p2 when (select_ln24_7_reg_1281_pp0_iter1_reg(0) = '1') else 
        select_ln24_6_fu_1023_p3;
    tmp_0_0_fu_478_p2 <= std_logic_vector(unsigned(zext_ln42_2_cast_fu_474_p1) + unsigned(mul_ln42_fu_469_p2));
    tmp_0_0_mid1_fu_608_p2 <= std_logic_vector(unsigned(zext_ln42_2_cast_mid_fu_604_p1) + unsigned(select_ln24_3_fu_556_p3));
    tmp_s_fu_425_p3 <= (mul_ln4_fu_419_p2 & ap_const_lv4_0);
    trunc_ln27_1_fu_516_p1 <= out_d_fu_489_p2(4 - 1 downto 0);
    trunc_ln27_fu_447_p1 <= ap_phi_mux_out_d_0_phi_fu_314_p4(4 - 1 downto 0);
    zext_ln24_1_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_628_p2),64));
    zext_ln24_2_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_1_fu_638_p2),64));
    zext_ln24_3_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_2_fu_670_p2),64));
    zext_ln24_4_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_3_fu_680_p2),64));
    zext_ln24_5_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_4_fu_736_p2),64));
    zext_ln24_6_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_5_fu_746_p2),64));
    zext_ln24_7_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_6_fu_802_p2),64));
    zext_ln24_8_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_7_fu_812_p2),64));
    zext_ln24_9_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_2_reg_1437),64));
    zext_ln24_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_fu_538_p3),64));
    zext_ln27_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_451_p3),8));
    zext_ln27_2_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_489_p2),8));
    zext_ln27_3_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln27_mid1_fu_520_p3),8));
    zext_ln27_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),8));
    zext_ln40_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1292),14));
    zext_ln42_10_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_9_fu_930_p2),64));
    zext_ln42_11_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_10_reg_1498),64));
    zext_ln42_1_cast14_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln4_fu_383_p1),14));
    zext_ln42_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_707_p2),64));
    zext_ln42_2_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_337_p4),9));
    zext_ln42_2_cast_mid_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_584_p2),9));
    zext_ln42_2_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_717_p2),14));
    zext_ln42_3_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_2_fu_726_p2),64));
    zext_ln42_4_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_3_fu_760_p2),14));
    zext_ln42_5_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_4_fu_769_p2),64));
    zext_ln42_6_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_5_fu_779_p2),64));
    zext_ln42_7_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_6_fu_859_p2),64));
    zext_ln42_8_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_7_fu_868_p2),64));
    zext_ln42_9_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_8_fu_921_p2),64));
    zext_ln42_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln51_1_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln51_1_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),9));
    zext_ln51_2_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_489_p2),9));
    zext_ln51_3_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_reg_1548),64));
    zext_ln51_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
