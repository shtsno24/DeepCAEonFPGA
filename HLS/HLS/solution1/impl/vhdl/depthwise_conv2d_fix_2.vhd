-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel1_ce0 : OUT STD_LOGIC;
    kernel1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kernel2_ce0 : OUT STD_LOGIC;
    kernel2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten39_reg_254 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_0_reg_266 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_278 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_289 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_300 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_312 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal icmp_ln21_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1028_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln21_reg_1028_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_317 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_fu_326_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln34_reg_973 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln34_2_cast14_fu_330_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_2_cast14_reg_979 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_fu_334_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_reg_986 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_1_cast_fu_338_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_cast_reg_992 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_342_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_997 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln5_fu_358_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln5_reg_1002 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_364_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_reg_1007 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln23_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln40_1_fu_378_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_1_reg_1017 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_fu_382_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_reg_1022 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln21_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1028_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1032 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln22_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_1_fu_403_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln22_1_reg_1051 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln34_4_cast_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln34_4_cast_reg_1056 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_fu_413_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_reg_1062 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_3_fu_420_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_3_reg_1068 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_3_reg_1068_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_3_reg_1068_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_2_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_2_reg_1074 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_2_fu_429_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_2_reg_1079 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln28_fu_434_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln28_reg_1085 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln28_reg_1085_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln23_1_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln40_fu_443_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_reg_1098 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_8_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_8_reg_1104 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_452_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1112 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_0_0_fu_457_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_reg_1118 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_fu_461_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_reg_1123 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln21_fu_465_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_reg_1128 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln40_1_fu_476_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_1_reg_1133 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_w_0_mid2_fu_484_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1139 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_4_cast_mid_fu_492_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln34_4_cast_mid_reg_1146 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_mid1_fu_495_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_mid1_reg_1151 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln22_fu_501_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln22_reg_1156 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_0_0_mid2_v_v_fu_516_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_mid2_v_v_reg_1161 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_mid1_fu_522_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_mid1_reg_1168 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln22_1_fu_527_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln22_1_reg_1173 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_0_0_mid2_fu_541_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_0_0_mid2_reg_1178 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_2_0_mid2_v_v_fu_546_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_2_0_mid2_v_v_reg_1185 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_mid2_v_v_fu_551_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_mid2_v_v_reg_1190 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_w_fu_557_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1195 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_fu_562_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_reg_1201 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln28_fu_567_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln28_reg_1206 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_5_fu_572_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_5_reg_1211 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp5_1_0_mid2_v_v_fu_577_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_1_0_mid2_v_v_reg_1216 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_2_0_mid2_fu_585_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_2_0_mid2_reg_1221 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_10_fu_590_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_10_reg_1228 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_fu_593_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_reg_1235 : STD_LOGIC_VECTOR (13 downto 0);
    signal kernel_load_reg_1240 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel1_load_reg_1248 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel2_load_reg_1256 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_12_fu_598_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_12_reg_1264 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_4_fu_601_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_4_reg_1270 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_1_0_mid2_fu_609_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_1_0_mid2_reg_1275 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_5_fu_638_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_5_reg_1292 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_10_fu_659_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_10_reg_1297 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_11_fu_663_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_11_reg_1302 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_14_fu_667_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_14_reg_1307 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_6_fu_670_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_6_reg_1312 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_12_fu_683_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_12_reg_1327 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_618_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1332 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_630_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_1337 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_643_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_1347 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_7_fu_695_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_7_reg_1352 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_651_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1357 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_8_fu_699_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_8_reg_1362 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_9_fu_703_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_9_reg_1367 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_903_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_reg_1377 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_reg_1377_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln34_2_fu_715_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_2_reg_1382 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_3_fu_909_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_3_reg_1388 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_4_fu_722_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_4_reg_1393 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_4_fu_915_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_4_reg_1398 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_reg_1413 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_s_reg_1418 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_6_fu_751_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_6_reg_1423 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_8_fu_754_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_8_reg_1428 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_9_fu_921_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_9_reg_1438 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_10_fu_927_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_10_reg_1443 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_5_fu_933_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_5_reg_1453 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln40_5_reg_1458 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_6_reg_1463 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_11_fu_938_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_11_reg_1468 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_load_reg_1473 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_1_reg_1478 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_6_fu_943_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_6_reg_1483 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_7_fu_948_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_7_reg_1488 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln40_7_fu_830_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_7_reg_1493 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_3_reg_1498 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_8_fu_953_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_8_reg_1503 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln40_1_fu_857_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_1_reg_1508 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_3_fu_866_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_3_reg_1513 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_8_fu_885_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_8_reg_1518 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_9_fu_894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_9_reg_1523 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten39_phi_fu_258_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_270_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_282_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_293_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_304_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln34_11_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln34_13_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_19_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln34_20_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_15_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln34_21_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_16_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_17_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_18_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_3_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_14_fu_322_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_46_fu_346_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln5_fu_358_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln5_fu_358_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln34_fu_382_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln34_fu_382_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln34_2_fu_429_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln34_2_fu_429_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_fu_443_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_fu_443_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_1_fu_476_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_1_fu_476_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_48_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_4_fu_471_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_6_fu_511_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_5_fu_506_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_0_mid2_fu_541_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_mid2_fu_541_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_7_fu_533_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_2_0_mid2_fu_585_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_2_0_mid2_fu_585_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_1_0_mid2_fu_609_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_1_0_mid2_fu_609_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln40_7_fu_816_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_6_fu_825_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_2_fu_835_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_2_fu_861_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_4_fu_871_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_5_fu_880_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_4_fu_890_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_903_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_903_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_903_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln34_5_fu_933_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_11_fu_938_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_6_fu_943_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_7_fu_948_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_8_fu_953_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_903_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln34_2_fu_429_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_fu_382_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln5_fu_358_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln5_fu_358_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp5_0_0_mid2_fu_541_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_1_0_mid2_fu_609_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_2_0_mid2_fu_585_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component network_mux_32_16_3_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mac_muladd_6ns_9ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mux_32_16_3_1_x_U41 : component network_mux_32_16_3_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_load_reg_1240,
        din1 => kernel1_load_reg_1248,
        din2 => kernel2_load_reg_1256,
        din3 => trunc_ln28_reg_1085_pp0_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_618_p5);

    network_mux_32_16_3_1_x_U42 : component network_mux_32_16_3_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_load_reg_1240,
        din1 => kernel1_load_reg_1248,
        din2 => kernel2_load_reg_1256,
        din3 => add_ln28_reg_1201,
        ce => ap_const_logic_1,
        dout => grp_fu_630_p5);

    network_mux_32_16_3_1_x_U43 : component network_mux_32_16_3_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_load_reg_1240,
        din1 => kernel1_load_reg_1248,
        din2 => kernel2_load_reg_1256,
        din3 => xor_ln28_reg_1206,
        ce => ap_const_logic_1,
        dout => grp_fu_643_p5);

    network_mux_32_16_3_1_x_U44 : component network_mux_32_16_3_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_load_reg_1240,
        din1 => kernel1_load_reg_1248,
        din2 => kernel2_load_reg_1256,
        din3 => add_ln28_5_reg_1211,
        ce => ap_const_logic_1,
        dout => grp_fu_651_p5);

    network_mac_muladd_6ns_9ns_5ns_14_1_1_U45 : component network_mac_muladd_6ns_9ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_903_p0,
        din1 => grp_fu_903_p1,
        din2 => grp_fu_903_p2,
        dout => grp_fu_903_p3);

    network_mul_mul_16s_16s_30_1_1_U46 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => tmp_s_reg_1332,
        dout => mul_ln34_3_fu_909_p2);

    network_mul_mul_16s_16s_30_1_1_U47 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_317,
        din1 => tmp_1_reg_1337,
        dout => mul_ln34_4_fu_915_p2);

    network_mul_mul_16s_16s_30_1_1_U48 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => tmp_2_reg_1347,
        dout => mul_ln34_9_fu_921_p2);

    network_mul_mul_16s_16s_30_1_1_U49 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_317,
        din1 => tmp_3_reg_1357,
        dout => mul_ln34_10_fu_927_p2);

    network_mul_mul_16s_16s_30_1_1_U50 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => mul_ln34_5_fu_933_p1,
        dout => mul_ln34_5_fu_933_p2);

    network_mul_mul_16s_16s_30_1_1_U51 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_317,
        din1 => mul_ln34_11_fu_938_p1,
        dout => mul_ln34_11_fu_938_p2);

    network_mul_mul_16s_16s_30_1_1_U52 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => mul_ln34_6_fu_943_p1,
        dout => mul_ln34_6_fu_943_p2);

    network_mul_mul_16s_16s_30_1_1_U53 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_317,
        din1 => mul_ln34_7_fu_948_p1,
        dout => mul_ln34_7_fu_948_p2);

    network_mul_mul_16s_16s_30_1_1_U54 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => mul_ln34_8_fu_953_p1,
        dout => mul_ln34_8_fu_953_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten39_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten39_reg_254 <= add_ln21_reg_1128;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten39_reg_254 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_278 <= select_ln22_1_reg_1173;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_278 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_266 <= select_ln28_3_reg_1068;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_266 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                out_h_0_reg_289 <= select_ln22_reg_1156;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_289 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                out_w_0_reg_300 <= out_w_reg_1195;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_300 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0)))) then 
                reg_312 <= input_r_q0;
            elsif ((((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0)) or ((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                reg_312 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0))) then 
                reg_317 <= input_r_q1;
            elsif ((((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0)) or ((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                reg_317 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln21_reg_1128 <= add_ln21_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_fu_387_p2 = ap_const_lv1_0))) then
                add_ln22_1_reg_1051 <= add_ln22_1_fu_403_p2;
                icmp_ln22_reg_1038 <= icmp_ln22_fu_398_p2;
                out_d_reg_1032 <= out_d_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln28_5_reg_1211 <= add_ln28_5_fu_572_p2;
                add_ln28_reg_1201 <= add_ln28_fu_562_p2;
                add_ln34_4_reg_1270 <= add_ln34_4_fu_601_p2;
                add_ln34_reg_1235 <= add_ln34_fu_593_p2;
                kernel1_load_reg_1248 <= kernel1_q0;
                kernel2_load_reg_1256 <= kernel2_q0;
                kernel_load_reg_1240 <= kernel_q0;
                tmp5_1_0_mid2_v_v_reg_1216 <= tmp5_1_0_mid2_v_v_fu_577_p2;
                tmp5_2_0_mid2_reg_1221 <= tmp5_2_0_mid2_fu_585_p2;
                xor_ln28_reg_1206 <= xor_ln28_fu_567_p2;
                    zext_ln34_10_reg_1228(4 downto 0) <= zext_ln34_10_fu_590_p1(4 downto 0);
                    zext_ln34_12_reg_1264(4 downto 0) <= zext_ln34_12_fu_598_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln34_10_reg_1297 <= add_ln34_10_fu_659_p2;
                add_ln34_11_reg_1302 <= add_ln34_11_fu_663_p2;
                add_ln34_5_reg_1292 <= add_ln34_5_fu_638_p2;
                tmp5_1_0_mid2_reg_1275 <= tmp5_1_0_mid2_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln34_12_reg_1327 <= add_ln34_12_fu_683_p2;
                add_ln34_6_reg_1312 <= add_ln34_6_fu_670_p2;
                    zext_ln34_14_reg_1307(4 downto 0) <= zext_ln34_14_fu_667_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln34_7_reg_1352 <= add_ln34_7_fu_695_p2;
                add_ln34_8_reg_1362 <= add_ln34_8_fu_699_p2;
                add_ln34_9_reg_1367 <= add_ln34_9_fu_703_p2;
                tmp_1_reg_1337 <= grp_fu_630_p5;
                tmp_2_reg_1347 <= grp_fu_643_p5;
                tmp_3_reg_1357 <= grp_fu_651_p5;
                tmp_s_reg_1332 <= grp_fu_618_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln40_1_reg_1508 <= add_ln40_1_fu_857_p2;
                add_ln40_3_reg_1513 <= add_ln40_3_fu_866_p2;
                mul_ln34_8_reg_1503 <= mul_ln34_8_fu_953_p2;
                trunc_ln40_3_reg_1498 <= mul_ln34_7_reg_1488(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln40_7_reg_1493 <= add_ln40_7_fu_830_p2;
                bias_load_reg_1473 <= bias_q0;
                mul_ln34_6_reg_1483 <= mul_ln34_6_fu_943_p2;
                mul_ln34_7_reg_1488 <= mul_ln34_7_fu_948_p2;
                trunc_ln40_1_reg_1478 <= mul_ln34_5_reg_1453(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln40_8_reg_1518 <= add_ln40_8_fu_885_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln21_reg_1028_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln40_9_reg_1523 <= add_ln40_9_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln40_reg_1377 <= grp_fu_903_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln40_reg_1377_pp0_iter2_reg <= add_ln40_reg_1377;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_997 <= empty_fu_342_p1;
                icmp_ln23_reg_1012 <= icmp_ln23_fu_372_p2;
                mul_ln5_reg_1002 <= mul_ln5_fu_358_p2;
                    tmp_4_reg_1007(13 downto 4) <= tmp_4_fu_364_p3(13 downto 4);
                    zext_ln34_2_cast14_reg_979(6 downto 0) <= zext_ln34_2_cast14_fu_330_p1(6 downto 0);
                    zext_ln34_reg_973(6 downto 0) <= zext_ln34_fu_326_p1(6 downto 0);
                    zext_ln40_1_cast_reg_992(5 downto 0) <= zext_ln40_1_cast_fu_338_p1(5 downto 0);
                    zext_ln40_reg_986(5 downto 0) <= zext_ln40_fu_334_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln21_reg_1028 <= icmp_ln21_fu_387_p2;
                icmp_ln21_reg_1028_pp0_iter1_reg <= icmp_ln21_reg_1028;
                icmp_ln21_reg_1028_pp0_iter2_reg <= icmp_ln21_reg_1028_pp0_iter1_reg;
                icmp_ln21_reg_1028_pp0_iter3_reg <= icmp_ln21_reg_1028_pp0_iter2_reg;
                mul_ln34_reg_1022 <= mul_ln34_fu_382_p2;
                    zext_ln40_1_reg_1017(4 downto 0) <= zext_ln40_1_fu_378_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln22_reg_1038 = ap_const_lv1_0))) then
                icmp_ln23_1_reg_1093 <= icmp_ln23_1_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0))) then
                mul_ln34_10_reg_1443 <= mul_ln34_10_fu_927_p2;
                mul_ln34_9_reg_1438 <= mul_ln34_9_fu_921_p2;
                sext_ln34_6_reg_1423 <= sext_ln34_6_fu_751_p1;
                sext_ln34_8_reg_1428 <= sext_ln34_8_fu_754_p1;
                trunc_ln40_s_reg_1418 <= mul_ln34_4_reg_1398(29 downto 14);
                trunc_ln_reg_1413 <= mul_ln34_3_reg_1388(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_1028_pp0_iter2_reg = ap_const_lv1_0))) then
                mul_ln34_11_reg_1468 <= mul_ln34_11_fu_938_p2;
                mul_ln34_5_reg_1453 <= mul_ln34_5_fu_933_p2;
                trunc_ln40_5_reg_1458 <= mul_ln34_9_reg_1438(29 downto 14);
                trunc_ln40_6_reg_1463 <= mul_ln34_10_reg_1443(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln34_2_reg_1079 <= mul_ln34_2_fu_429_p2;
                select_ln28_reg_1062 <= select_ln28_fu_413_p3;
                trunc_ln28_reg_1085 <= trunc_ln28_fu_434_p1;
                    zext_ln40_2_reg_1074(4 downto 0) <= zext_ln40_2_fu_426_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln34_3_reg_1388 <= mul_ln34_3_fu_909_p2;
                mul_ln34_4_reg_1398 <= mul_ln34_4_fu_915_p2;
                sext_ln34_2_reg_1382 <= sext_ln34_2_fu_715_p1;
                sext_ln34_4_reg_1393 <= sext_ln34_4_fu_722_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_ln40_1_reg_1133 <= mul_ln40_1_fu_476_p2;
                out_w_0_mid2_reg_1139 <= out_w_0_mid2_fu_484_p3;
                    zext_ln34_4_cast_mid_reg_1146(4 downto 0) <= zext_ln34_4_cast_mid_fu_492_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul_ln40_reg_1098 <= mul_ln40_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_h_reg_1112 <= out_h_fu_452_p2;
                select_ln28_8_reg_1104 <= select_ln28_8_fu_447_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                out_w_reg_1195 <= out_w_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln22_1_reg_1173 <= select_ln22_1_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                select_ln22_reg_1156 <= select_ln22_fu_501_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_3_reg_1068 <= select_ln28_3_fu_420_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_3_reg_1068_pp0_iter1_reg <= select_ln28_3_reg_1068;
                select_ln28_3_reg_1068_pp0_iter2_reg <= select_ln28_3_reg_1068_pp0_iter1_reg;
                trunc_ln28_reg_1085_pp0_iter1_reg <= trunc_ln28_reg_1085;
                    zext_ln34_4_cast_reg_1056(4 downto 0) <= zext_ln34_4_cast_fu_409_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp5_0_0_mid2_reg_1178 <= tmp5_0_0_mid2_fu_541_p2;
                tmp5_2_0_mid2_v_v_reg_1185 <= tmp5_2_0_mid2_v_v_fu_546_p2;
                tmp7_mid2_v_v_reg_1190 <= tmp7_mid2_v_v_fu_551_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp5_0_0_mid2_v_v_reg_1161 <= tmp5_0_0_mid2_v_v_fu_516_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (select_ln28_8_reg_1104 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp6_mid1_reg_1168 <= tmp6_mid1_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (select_ln28_8_reg_1104 = ap_const_lv1_0) and (icmp_ln22_reg_1038 = ap_const_lv1_0))) then
                tmp6_reg_1123 <= tmp6_fu_461_p2;
                tmp_0_0_reg_1118 <= tmp_0_0_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (select_ln28_8_reg_1104 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_0_0_mid1_reg_1151 <= tmp_0_0_mid1_fu_495_p2;
            end if;
        end if;
    end process;
    zext_ln34_reg_973(8 downto 7) <= "00";
    zext_ln34_2_cast14_reg_979(13 downto 7) <= "0000000";
    zext_ln40_reg_986(8 downto 6) <= "000";
    zext_ln40_1_cast_reg_992(13 downto 6) <= "00000000";
    tmp_4_reg_1007(3 downto 0) <= "0000";
    zext_ln40_1_reg_1017(8 downto 5) <= "0000";
    zext_ln34_4_cast_reg_1056(8 downto 5) <= "0000";
    zext_ln40_2_reg_1074(8 downto 5) <= "0000";
    zext_ln34_4_cast_mid_reg_1146(8 downto 5) <= "0000";
    zext_ln34_10_reg_1228(13 downto 5) <= "000000000";
    zext_ln34_12_reg_1264(13 downto 5) <= "000000000";
    zext_ln34_14_reg_1307(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1028, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((icmp_ln21_reg_1028 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((icmp_ln21_reg_1028 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln21_fu_465_p2 <= std_logic_vector(unsigned(indvar_flatten39_reg_254) + unsigned(ap_const_lv14_1));
    add_ln22_1_fu_403_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_282_p4));
    add_ln28_5_fu_572_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln28_reg_1085));
    add_ln28_fu_562_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln28_reg_1085));
    add_ln34_10_fu_659_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1221) + unsigned(zext_ln34_10_reg_1228));
    add_ln34_11_fu_663_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1221) + unsigned(zext_ln34_12_reg_1264));
    add_ln34_12_fu_683_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1221) + unsigned(zext_ln34_14_fu_667_p1));
    add_ln34_4_fu_601_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1178) + unsigned(zext_ln34_12_fu_598_p1));
    add_ln34_5_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(out_w_0_mid2_reg_1139));
    add_ln34_6_fu_670_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1178) + unsigned(zext_ln34_14_fu_667_p1));
    add_ln34_7_fu_695_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1275) + unsigned(zext_ln34_10_reg_1228));
    add_ln34_8_fu_699_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1275) + unsigned(zext_ln34_12_reg_1264));
    add_ln34_9_fu_703_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1275) + unsigned(zext_ln34_14_reg_1307));
    add_ln34_fu_593_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1178) + unsigned(zext_ln34_10_fu_590_p1));
    add_ln40_1_fu_857_p2 <= std_logic_vector(unsigned(bias_load_reg_1473) + unsigned(trunc_ln_reg_1413));
    add_ln40_2_fu_861_p2 <= std_logic_vector(unsigned(trunc_ln40_1_reg_1478) + unsigned(trunc_ln40_2_fu_835_p4));
    add_ln40_3_fu_866_p2 <= std_logic_vector(unsigned(add_ln40_2_fu_861_p2) + unsigned(trunc_ln40_s_reg_1418));
    add_ln40_4_fu_890_p2 <= std_logic_vector(unsigned(add_ln40_3_reg_1513) + unsigned(add_ln40_1_reg_1508));
    add_ln40_5_fu_880_p2 <= std_logic_vector(unsigned(trunc_ln40_3_reg_1498) + unsigned(trunc_ln40_4_fu_871_p4));
    add_ln40_6_fu_825_p2 <= std_logic_vector(unsigned(trunc_ln40_6_reg_1463) + unsigned(trunc_ln40_7_fu_816_p4));
    add_ln40_7_fu_830_p2 <= std_logic_vector(unsigned(add_ln40_6_fu_825_p2) + unsigned(trunc_ln40_5_reg_1458));
    add_ln40_8_fu_885_p2 <= std_logic_vector(unsigned(add_ln40_7_reg_1493) + unsigned(add_ln40_5_fu_880_p2));
    add_ln40_9_fu_894_p2 <= std_logic_vector(unsigned(add_ln40_8_reg_1518) + unsigned(add_ln40_4_fu_890_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln21_reg_1028)
    begin
        if ((icmp_ln21_reg_1028 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten39_phi_fu_258_p4_assign_proc : process(indvar_flatten39_reg_254, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1028, ap_CS_fsm_pp0_stage0, add_ln21_reg_1128, ap_block_pp0_stage0)
    begin
        if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten39_phi_fu_258_p4 <= add_ln21_reg_1128;
        else 
            ap_phi_mux_indvar_flatten39_phi_fu_258_p4 <= indvar_flatten39_reg_254;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_282_p4_assign_proc : process(indvar_flatten_reg_278, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1028, ap_CS_fsm_pp0_stage0, select_ln22_1_reg_1173, ap_block_pp0_stage0)
    begin
        if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_282_p4 <= select_ln22_1_reg_1173;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_282_p4 <= indvar_flatten_reg_278;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_270_p4_assign_proc : process(out_d_0_reg_266, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1028, ap_CS_fsm_pp0_stage0, select_ln28_3_reg_1068, ap_block_pp0_stage0)
    begin
        if (((icmp_ln21_reg_1028 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_270_p4 <= select_ln28_3_reg_1068;
        else 
            ap_phi_mux_out_d_0_phi_fu_270_p4 <= out_d_0_reg_266;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_293_p4_assign_proc : process(out_h_0_reg_289, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1028_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln22_reg_1156, ap_block_pp0_stage1)
    begin
        if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_out_h_0_phi_fu_293_p4 <= select_ln22_reg_1156;
        else 
            ap_phi_mux_out_h_0_phi_fu_293_p4 <= out_h_0_reg_289;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_304_p4_assign_proc : process(out_w_0_reg_300, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1028_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, out_w_reg_1195, ap_block_pp0_stage1)
    begin
        if (((icmp_ln21_reg_1028_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_out_w_0_phi_fu_304_p4 <= out_w_reg_1195;
        else 
            ap_phi_mux_out_w_0_phi_fu_304_p4 <= out_w_0_reg_300;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln28_fu_769_p1(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_46_fu_346_p1 <= output_height(5 - 1 downto 0);
    empty_48_fu_480_p2 <= (select_ln28_8_reg_1104 or icmp_ln22_reg_1038);
    empty_fu_342_p1 <= output_width(5 - 1 downto 0);
    grp_fu_903_p0 <= zext_ln40_1_cast_reg_992(6 - 1 downto 0);
    grp_fu_903_p1 <= grp_fu_903_p10(9 - 1 downto 0);
    grp_fu_903_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_mid2_v_v_reg_1190),14));
    grp_fu_903_p2 <= zext_ln34_10_reg_1228(5 - 1 downto 0);
    icmp_ln21_fu_387_p2 <= "1" when (ap_phi_mux_indvar_flatten39_phi_fu_258_p4 = tmp_4_reg_1007) else "0";
    icmp_ln22_fu_398_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_282_p4 = mul_ln5_reg_1002) else "0";
    icmp_ln23_1_fu_438_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_304_p4 = empty_reg_997) else "0";
    icmp_ln23_fu_372_p2 <= "1" when (empty_fu_342_p1 = ap_const_lv5_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln34_13_fu_626_p1, ap_block_pp0_stage3, zext_ln34_20_fu_679_p1, ap_block_pp0_stage4, zext_ln34_21_fu_707_p1, zext_ln34_16_fu_725_p1, zext_ln34_18_fu_757_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln34_18_fu_757_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln34_16_fu_725_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln34_21_fu_707_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln34_20_fu_679_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln34_13_fu_626_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln34_11_fu_614_p1, ap_block_pp0_stage2, zext_ln34_19_fu_675_p1, ap_block_pp0_stage3, zext_ln34_15_fu_691_p1, ap_block_pp0_stage4, zext_ln34_17_fu_729_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln34_17_fu_729_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address1 <= zext_ln34_15_fu_691_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln34_19_fu_675_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln34_11_fu_614_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    kernel1_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel1_ce0 <= ap_const_logic_1;
        else 
            kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel2_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel2_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel2_ce0 <= ap_const_logic_1;
        else 
            kernel2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_address0 <= ap_const_lv64_0(6 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln34_11_fu_938_p1 <= sext_ln34_2_reg_1382(16 - 1 downto 0);
    mul_ln34_2_fu_429_p0 <= zext_ln34_reg_973(7 - 1 downto 0);
    mul_ln34_2_fu_429_p1 <= mul_ln34_2_fu_429_p10(5 - 1 downto 0);
    mul_ln34_2_fu_429_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_1032),9));
    mul_ln34_2_fu_429_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln34_2_fu_429_p0) * unsigned(mul_ln34_2_fu_429_p1), 9));
    mul_ln34_5_fu_933_p1 <= sext_ln34_6_reg_1423(16 - 1 downto 0);
    mul_ln34_6_fu_943_p1 <= sext_ln34_8_reg_1428(16 - 1 downto 0);
    mul_ln34_7_fu_948_p1 <= sext_ln34_2_reg_1382(16 - 1 downto 0);
    mul_ln34_8_fu_953_p1 <= sext_ln34_4_reg_1393(16 - 1 downto 0);
    mul_ln34_fu_382_p0 <= mul_ln34_fu_382_p00(5 - 1 downto 0);
    mul_ln34_fu_382_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4),9));
    mul_ln34_fu_382_p1 <= zext_ln34_reg_973(7 - 1 downto 0);
    mul_ln34_fu_382_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln34_fu_382_p0) * unsigned(mul_ln34_fu_382_p1), 9));
    mul_ln40_1_fu_476_p0 <= zext_ln40_reg_986(6 - 1 downto 0);
    mul_ln40_1_fu_476_p1 <= zext_ln40_2_reg_1074(5 - 1 downto 0);
    mul_ln40_1_fu_476_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_1_fu_476_p0) * unsigned(mul_ln40_1_fu_476_p1), 9));
    mul_ln40_fu_443_p0 <= zext_ln40_1_reg_1017(5 - 1 downto 0);
    mul_ln40_fu_443_p1 <= zext_ln40_reg_986(6 - 1 downto 0);
    mul_ln40_fu_443_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_fu_443_p0) * unsigned(mul_ln40_fu_443_p1), 9));
    mul_ln5_fu_358_p0 <= mul_ln5_fu_358_p00(5 - 1 downto 0);
    mul_ln5_fu_358_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_46_fu_346_p1),10));
    mul_ln5_fu_358_p1 <= mul_ln5_fu_358_p10(5 - 1 downto 0);
    mul_ln5_fu_358_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_342_p1),10));
    mul_ln5_fu_358_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln5_fu_358_p0) * unsigned(mul_ln5_fu_358_p1), 10));
    out_d_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4));
    out_h_fu_452_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln28_reg_1062));
    out_w_0_mid2_fu_484_p3 <= 
        ap_const_lv5_0 when (empty_48_fu_480_p2(0) = '1') else 
        out_w_0_reg_300;
    out_w_fu_557_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(out_w_0_mid2_reg_1139));
    output_r_address0 <= zext_ln40_3_fu_899_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln40_9_reg_1523;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln21_reg_1028_pp0_iter3_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_1028_pp0_iter3_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln22_1_fu_527_p3 <= 
        ap_const_lv10_1 when (icmp_ln22_reg_1038(0) = '1') else 
        add_ln22_1_reg_1051;
    select_ln22_fu_501_p3 <= 
        out_h_reg_1112 when (select_ln28_8_reg_1104(0) = '1') else 
        select_ln28_reg_1062;
    select_ln28_3_fu_420_p3 <= 
        out_d_reg_1032 when (icmp_ln22_reg_1038(0) = '1') else 
        out_d_0_reg_266;
    select_ln28_4_fu_471_p3 <= 
        mul_ln34_2_reg_1079 when (icmp_ln22_reg_1038(0) = '1') else 
        mul_ln34_reg_1022;
    select_ln28_5_fu_506_p3 <= 
        mul_ln40_1_reg_1133 when (icmp_ln22_reg_1038(0) = '1') else 
        mul_ln40_reg_1098;
    select_ln28_6_fu_511_p3 <= 
        mul_ln34_2_reg_1079 when (icmp_ln22_reg_1038(0) = '1') else 
        tmp_0_0_reg_1118;
    select_ln28_7_fu_533_p3 <= 
        mul_ln40_1_reg_1133 when (icmp_ln22_reg_1038(0) = '1') else 
        tmp6_reg_1123;
    select_ln28_8_fu_447_p3 <= 
        icmp_ln23_reg_1012 when (icmp_ln22_reg_1038(0) = '1') else 
        icmp_ln23_1_reg_1093;
    select_ln28_fu_413_p3 <= 
        ap_const_lv5_0 when (icmp_ln22_reg_1038(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_293_p4;
        sext_ln34_14_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

        sext_ln34_2_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_1332),30));

        sext_ln34_4_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_1337),30));

        sext_ln34_6_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_reg_1347),30));

        sext_ln34_8_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_1357),30));

    tmp5_0_0_mid2_fu_541_p0 <= zext_ln34_2_cast14_reg_979(7 - 1 downto 0);
    tmp5_0_0_mid2_fu_541_p1 <= tmp5_0_0_mid2_fu_541_p10(9 - 1 downto 0);
    tmp5_0_0_mid2_fu_541_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_mid2_v_v_reg_1161),14));
    tmp5_0_0_mid2_fu_541_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_mid2_fu_541_p0) * unsigned(tmp5_0_0_mid2_fu_541_p1), 14));
    tmp5_0_0_mid2_v_v_fu_516_p3 <= 
        tmp_0_0_mid1_reg_1151 when (select_ln28_8_reg_1104(0) = '1') else 
        select_ln28_6_fu_511_p3;
    tmp5_1_0_mid2_fu_609_p0 <= zext_ln34_2_cast14_reg_979(7 - 1 downto 0);
    tmp5_1_0_mid2_fu_609_p1 <= tmp5_1_0_mid2_fu_609_p10(9 - 1 downto 0);
    tmp5_1_0_mid2_fu_609_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_1_0_mid2_v_v_reg_1216),14));
    tmp5_1_0_mid2_fu_609_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_1_0_mid2_fu_609_p0) * unsigned(tmp5_1_0_mid2_fu_609_p1), 14));
    tmp5_1_0_mid2_v_v_fu_577_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp5_0_0_mid2_v_v_reg_1161));
    tmp5_2_0_mid2_fu_585_p0 <= zext_ln34_2_cast14_reg_979(7 - 1 downto 0);
    tmp5_2_0_mid2_fu_585_p1 <= tmp5_2_0_mid2_fu_585_p10(9 - 1 downto 0);
    tmp5_2_0_mid2_fu_585_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_2_0_mid2_v_v_reg_1185),14));
    tmp5_2_0_mid2_fu_585_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_2_0_mid2_fu_585_p0) * unsigned(tmp5_2_0_mid2_fu_585_p1), 14));
    tmp5_2_0_mid2_v_v_fu_546_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(tmp5_0_0_mid2_v_v_reg_1161));
    tmp6_fu_461_p2 <= std_logic_vector(unsigned(mul_ln40_reg_1098) + unsigned(zext_ln34_4_cast_reg_1056));
    tmp6_mid1_fu_522_p2 <= std_logic_vector(unsigned(zext_ln34_4_cast_mid_reg_1146) + unsigned(select_ln28_5_fu_506_p3));
    tmp7_mid2_v_v_fu_551_p3 <= 
        tmp6_mid1_reg_1168 when (select_ln28_8_reg_1104(0) = '1') else 
        select_ln28_7_fu_533_p3;
    tmp_0_0_fu_457_p2 <= std_logic_vector(unsigned(mul_ln34_reg_1022) + unsigned(zext_ln34_4_cast_reg_1056));
    tmp_0_0_mid1_fu_495_p2 <= std_logic_vector(unsigned(zext_ln34_4_cast_mid_fu_492_p1) + unsigned(select_ln28_4_fu_471_p3));
    tmp_4_fu_364_p3 <= (mul_ln5_fu_358_p2 & ap_const_lv4_0);
    trunc_ln28_fu_434_p1 <= select_ln28_3_fu_420_p3(2 - 1 downto 0);
    trunc_ln40_2_fu_835_p4 <= mul_ln34_6_reg_1483(29 downto 14);
    trunc_ln40_4_fu_871_p4 <= mul_ln34_8_reg_1503(29 downto 14);
    trunc_ln40_7_fu_816_p4 <= mul_ln34_11_reg_1468(29 downto 14);
    xor_ln28_fu_567_p2 <= (trunc_ln28_reg_1085 xor ap_const_lv2_2);
    zext_ln28_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_3_reg_1068_pp0_iter2_reg),64));
    zext_ln34_10_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1139),14));
    zext_ln34_11_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_reg_1235),64));
    zext_ln34_12_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_1195),14));
    zext_ln34_13_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_4_reg_1270),64));
    zext_ln34_14_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_5_reg_1292),14));
    zext_ln34_15_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_6_reg_1312),64));
    zext_ln34_16_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_7_reg_1352),64));
    zext_ln34_17_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_8_reg_1362),64));
    zext_ln34_18_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_9_reg_1367),64));
    zext_ln34_19_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_10_reg_1297),64));
    zext_ln34_20_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_11_reg_1302),64));
    zext_ln34_21_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_12_reg_1327),64));
    zext_ln34_2_cast14_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln34_14_fu_322_p1),14));
    zext_ln34_4_cast_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_293_p4),9));
    zext_ln34_4_cast_mid_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_1112),9));
    zext_ln34_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln40_1_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln40_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4),9));
    zext_ln40_2_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_1032),9));
    zext_ln40_3_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_reg_1377_pp0_iter2_reg),64));
    zext_ln40_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
