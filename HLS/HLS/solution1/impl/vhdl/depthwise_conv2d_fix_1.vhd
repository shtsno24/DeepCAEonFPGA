-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten48_reg_292 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_d_0_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_327 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_338 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_349 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_1222 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_354 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_358 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_363 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_reg_1222_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln42_fu_373_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_reg_1168 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_1_cast14_fu_377_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln42_1_cast14_reg_1174 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln51_fu_381_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln51_reg_1181 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln51_1_cast_fu_385_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln51_1_cast_reg_1187 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_389_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1192 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_405_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln4_reg_1197 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_411_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_1202 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1207 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln51_2_fu_425_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln51_2_reg_1212 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_2_cast_fu_456_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_2_cast_reg_1217 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln23_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_471_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1226 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln32_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_482_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_reg_1239 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln51_4_fu_490_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln51_4_reg_1244 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_8_fu_516_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln24_8_reg_1249 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln24_14_fu_555_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_14_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_562_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_1265 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_fu_574_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_reg_1270 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln42_2_cast_mid_fu_582_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln42_2_cast_mid_reg_1277 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_0_0_mid2_v_v_fu_592_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_0_0_mid2_v_v_reg_1282 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_2_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_2_reg_1289 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln24_19_fu_606_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln24_19_reg_1294 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_0_0_mid2_fu_634_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_0_0_mid2_reg_1314 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_1_0_mid2_fu_648_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_1_0_mid2_reg_1319 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_fu_653_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_reg_1326 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_reg_1326_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_667_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_1338 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln42_13_fu_672_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln42_13_reg_1343 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln51_fu_687_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln51_reg_1354 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp13_fu_691_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp13_reg_1359 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_fu_696_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_reg_1364 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_2_0_mid2_fu_731_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_2_0_mid2_reg_1379 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln42_15_fu_741_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln42_15_reg_1386 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp14_mid2_v_v_fu_813_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp14_mid2_v_v_reg_1412 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln_reg_1417 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_9_reg_1422 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_9_fu_892_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_9_reg_1447 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_fu_898_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_reg_1453 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln51_s_reg_1458 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_8_reg_1463 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln42_20_fu_947_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_20_reg_1478 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_14_fu_951_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_14_reg_1483 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln51_1_reg_1493 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_2_reg_1498 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_10_fu_999_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_10_reg_1508 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_3_reg_1513 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_4_reg_1518 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_12_fu_1046_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_12_reg_1523 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_13_fu_1052_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_13_reg_1528 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln51_5_reg_1533 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1155_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln51_reg_1538 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln51_17_fu_1090_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_17_reg_1543 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten48_phi_fu_296_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_308_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_320_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_331_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_342_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_10_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln24_11_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_12_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_14_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_12_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_13_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_16_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_17_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_14_fu_777_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_15_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_18_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_19_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_16_fu_877_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_17_fu_887_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_20_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_21_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_18_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_22_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln51_3_fu_1095_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_60_fu_393_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_405_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_405_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln27_fu_433_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_fu_429_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_437_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln42_fu_451_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln42_fu_451_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln42_fu_451_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln27_2_fu_498_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_4_fu_494_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln27_mid1_fu_502_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_2_fu_510_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln42_18_fu_529_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln42_18_fu_529_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln42_18_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_fu_460_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln33_2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_62_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_10_fu_534_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_mid1_fu_586_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_12_fu_542_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_fu_609_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_8_fu_620_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_0_0_mid2_fu_634_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp12_0_0_mid2_fu_634_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_1_0_mid2_v_v_fu_639_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_1_0_mid2_fu_648_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp12_1_0_mid2_fu_648_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_fu_656_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_12_fu_676_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln51_fu_687_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln51_fu_687_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_9_fu_702_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_10_fu_712_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_2_0_mid2_v_v_fu_722_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_2_0_mid2_fu_731_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp12_2_0_mid2_fu_731_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln42_13_fu_736_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_14_fu_745_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_15_fu_755_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_11_fu_772_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_12_fu_782_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln51_2_fu_792_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln51_2_fu_792_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln51_2_fu_792_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_11_fu_796_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp13_mid1_fu_808_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_13_fu_802_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln42_9_fu_1099_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_10_fu_1106_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln42_16_fu_846_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_17_fu_855_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_13_fu_872_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_14_fu_882_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln42_11_fu_1113_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_12_fu_1120_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln42_18_fu_929_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln42_19_fu_938_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln42_13_fu_1127_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_14_fu_1134_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_15_fu_1141_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln42_16_fu_1148_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln51_9_fu_1037_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_11_fu_1042_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln42_17_fu_1161_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln51_14_fu_1076_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_15_fu_1080_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln51_16_fu_1085_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1155_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1155_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1155_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1155_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln42_18_fu_529_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln42_fu_451_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln4_fu_405_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln4_fu_405_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_0_0_mid2_fu_634_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_1_0_mid2_fu_648_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_2_0_mid2_fu_731_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component network_mac_muladd_5ns_7ns_4ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_1_1_U62 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_363,
        din1 => reg_349,
        dout => mul_ln42_9_fu_1099_p2);

    network_mul_mul_16s_16s_30_1_1_U63 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_368,
        din1 => reg_354,
        dout => mul_ln42_10_fu_1106_p2);

    network_mul_mul_16s_16s_30_1_1_U64 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_363,
        din1 => reg_358,
        dout => mul_ln42_11_fu_1113_p2);

    network_mul_mul_16s_16s_30_1_1_U65 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_368,
        din1 => reg_349,
        dout => mul_ln42_12_fu_1120_p2);

    network_mul_mul_16s_16s_30_1_1_U66 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_363,
        din1 => reg_354,
        dout => mul_ln42_13_fu_1127_p2);

    network_mul_mul_16s_16s_30_1_1_U67 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_368,
        din1 => reg_349,
        dout => mul_ln42_14_fu_1134_p2);

    network_mul_mul_16s_16s_30_1_1_U68 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_363,
        din1 => reg_358,
        dout => mul_ln42_15_fu_1141_p2);

    network_mul_mul_16s_16s_30_1_1_U69 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_368,
        din1 => reg_349,
        dout => mul_ln42_16_fu_1148_p2);

    network_mac_muladd_5ns_7ns_4ns_11_1_1_U70 : component network_mac_muladd_5ns_7ns_4ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1155_p0,
        din1 => grp_fu_1155_p1,
        din2 => grp_fu_1155_p2,
        dout => grp_fu_1155_p3);

    network_mul_mul_16s_16s_30_1_1_U71 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_363,
        din1 => reg_354,
        dout => mul_ln42_17_fu_1161_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten48_reg_292 <= add_ln23_reg_1364;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten48_reg_292 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_316 <= select_ln32_14_reg_1483;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_316 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_304 <= select_ln24_9_reg_1447;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_304 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_327 <= select_ln32_reg_1453;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_327 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_338 <= out_w_reg_1338;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_338 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_349 <= kernel_q1;
            elsif (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_349 <= kernel_q0;
            end if; 
        end if;
    end process;

    reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                    reg_358 <= kernel_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                    reg_358 <= kernel_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_363 <= input_r_q1;
            elsif ((((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln23_reg_1222_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
                reg_363 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_368 <= input_r_q0;
            elsif (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                reg_368 <= input_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln23_reg_1364 <= add_ln23_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_466_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln32_2_reg_1289 <= add_ln32_2_fu_600_p2;
                icmp_ln32_reg_1231 <= icmp_ln32_fu_477_p2;
                out_d_reg_1226 <= out_d_fu_471_p2;
                out_h_reg_1265 <= out_h_fu_562_p2;
                out_w_0_mid2_reg_1270 <= out_w_0_mid2_fu_574_p3;
                select_ln24_14_reg_1259 <= select_ln24_14_fu_555_p3;
                select_ln24_8_reg_1249 <= select_ln24_8_fu_516_p3;
                select_ln24_reg_1239 <= select_ln24_fu_482_p3;
                tmp12_0_0_mid2_v_v_reg_1282 <= tmp12_0_0_mid2_v_v_fu_592_p3;
                    zext_ln42_2_cast_mid_reg_1277(3 downto 0) <= zext_ln42_2_cast_mid_fu_582_p1(3 downto 0);
                    zext_ln51_4_reg_1244(3 downto 0) <= zext_ln51_4_fu_490_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln42_20_reg_1478 <= add_ln42_20_fu_947_p2;
                trunc_ln51_8_reg_1463 <= mul_ln42_12_fu_1120_p2(29 downto 14);
                trunc_ln51_s_reg_1458 <= mul_ln42_11_fu_1113_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln51_10_reg_1508 <= add_ln51_10_fu_999_p2;
                trunc_ln51_1_reg_1493 <= mul_ln42_13_fu_1127_p2(29 downto 14);
                trunc_ln51_2_reg_1498 <= mul_ln42_14_fu_1134_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln51_12_reg_1523 <= add_ln51_12_fu_1046_p2;
                add_ln51_13_reg_1528 <= add_ln51_13_fu_1052_p2;
                trunc_ln51_3_reg_1513 <= mul_ln42_15_fu_1141_p2(29 downto 14);
                trunc_ln51_4_reg_1518 <= mul_ln42_16_fu_1148_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln51_17_reg_1543 <= add_ln51_17_fu_1090_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln51_reg_1538 <= grp_fu_1155_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1192 <= empty_fu_389_p1;
                icmp_ln33_reg_1207 <= icmp_ln33_fu_419_p2;
                mul_ln4_reg_1197 <= mul_ln4_fu_405_p2;
                    tmp_s_reg_1202(10 downto 3) <= tmp_s_fu_411_p3(10 downto 3);
                    zext_ln42_1_cast14_reg_1174(5 downto 0) <= zext_ln42_1_cast14_fu_377_p1(5 downto 0);
                    zext_ln42_reg_1168(5 downto 0) <= zext_ln42_fu_373_p1(5 downto 0);
                    zext_ln51_1_cast_reg_1187(4 downto 0) <= zext_ln51_1_cast_fu_385_p1(4 downto 0);
                    zext_ln51_reg_1181(4 downto 0) <= zext_ln51_fu_381_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln23_reg_1222 <= icmp_ln23_fu_466_p2;
                icmp_ln23_reg_1222_pp0_iter1_reg <= icmp_ln23_reg_1222;
                    zext_ln42_2_cast_reg_1217(3 downto 0) <= zext_ln42_2_cast_fu_456_p1(3 downto 0);
                    zext_ln51_2_reg_1212(3 downto 0) <= zext_ln51_2_fu_425_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul_ln51_reg_1354 <= mul_ln51_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                out_w_reg_1338 <= out_w_fu_667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_354 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln24_9_reg_1447 <= select_ln24_9_fu_892_p3;
                select_ln32_14_reg_1483 <= select_ln32_14_fu_951_p3;
                select_ln32_reg_1453 <= select_ln32_fu_898_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp12_0_0_mid2_reg_1314 <= tmp12_0_0_mid2_fu_634_p2;
                tmp12_1_0_mid2_reg_1319 <= tmp12_1_0_mid2_fu_648_p2;
                    zext_ln24_19_reg_1294(5 downto 0) <= zext_ln24_19_fu_606_p1(5 downto 0);
                    zext_ln40_reg_1326(3 downto 0) <= zext_ln40_fu_653_p1(3 downto 0);
                    zext_ln42_13_reg_1343(3 downto 0) <= zext_ln42_13_fu_672_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp12_2_0_mid2_reg_1379 <= tmp12_2_0_mid2_fu_731_p2;
                    zext_ln42_15_reg_1386(3 downto 0) <= zext_ln42_15_fu_741_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln24_14_reg_1259 = ap_const_lv1_0) and (icmp_ln32_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp13_reg_1359 <= tmp13_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp14_mid2_v_v_reg_1412 <= tmp14_mid2_v_v_fu_813_p3;
                trunc_ln51_9_reg_1422 <= mul_ln42_10_fu_1106_p2(29 downto 14);
                trunc_ln_reg_1417 <= mul_ln42_9_fu_1099_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1222_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                trunc_ln51_5_reg_1533 <= mul_ln42_17_fu_1161_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln40_reg_1326_pp0_iter1_reg(3 downto 0) <= zext_ln40_reg_1326(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln42_reg_1168(6) <= '0';
    zext_ln42_1_cast14_reg_1174(10 downto 6) <= "00000";
    zext_ln51_reg_1181(6 downto 5) <= "00";
    zext_ln51_1_cast_reg_1187(10 downto 5) <= "000000";
    tmp_s_reg_1202(2 downto 0) <= "000";
    zext_ln51_2_reg_1212(6 downto 4) <= "000";
    zext_ln42_2_cast_reg_1217(6 downto 4) <= "000";
    zext_ln51_4_reg_1244(6 downto 4) <= "000";
    zext_ln42_2_cast_mid_reg_1277(6 downto 4) <= "000";
    zext_ln24_19_reg_1294(6) <= '0';
    zext_ln40_reg_1326(10 downto 4) <= "0000000";
    zext_ln40_reg_1326_pp0_iter1_reg(10 downto 4) <= "0000000";
    zext_ln42_13_reg_1343(10 downto 4) <= "0000000";
    zext_ln42_15_reg_1386(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln23_reg_1222, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((icmp_ln23_reg_1222 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((icmp_ln23_reg_1222 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln23_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten48_reg_292));
    add_ln24_10_fu_712_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(zext_ln24_19_reg_1294));
    add_ln24_11_fu_772_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(zext_ln24_19_reg_1294));
    add_ln24_12_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) + unsigned(zext_ln24_19_reg_1294));
    add_ln24_13_fu_872_p2 <= std_logic_vector(unsigned(ap_const_lv7_7) + unsigned(zext_ln24_19_reg_1294));
    add_ln24_14_fu_882_p2 <= std_logic_vector(unsigned(ap_const_lv7_8) + unsigned(zext_ln24_19_reg_1294));
    add_ln24_8_fu_620_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(zext_ln24_19_fu_606_p1));
    add_ln24_9_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(zext_ln24_19_reg_1294));
    add_ln24_fu_609_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(zext_ln24_19_fu_606_p1));
    add_ln27_2_fu_510_p2 <= std_logic_vector(unsigned(zext_ln27_4_fu_494_p1) + unsigned(shl_ln27_mid1_fu_502_p3));
    add_ln27_fu_445_p2 <= std_logic_vector(unsigned(zext_ln27_fu_429_p1) + unsigned(shl_ln_fu_437_p3));
    add_ln32_2_fu_600_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_320_p4));
    add_ln42_12_fu_676_p2 <= std_logic_vector(unsigned(tmp12_0_0_mid2_fu_634_p2) + unsigned(zext_ln42_13_fu_672_p1));
    add_ln42_13_fu_736_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(out_w_0_mid2_reg_1270));
    add_ln42_14_fu_745_p2 <= std_logic_vector(unsigned(tmp12_0_0_mid2_reg_1314) + unsigned(zext_ln42_15_fu_741_p1));
    add_ln42_15_fu_755_p2 <= std_logic_vector(unsigned(zext_ln40_reg_1326) + unsigned(tmp12_1_0_mid2_reg_1319));
    add_ln42_16_fu_846_p2 <= std_logic_vector(unsigned(tmp12_1_0_mid2_reg_1319) + unsigned(zext_ln42_13_reg_1343));
    add_ln42_17_fu_855_p2 <= std_logic_vector(unsigned(tmp12_1_0_mid2_reg_1319) + unsigned(zext_ln42_15_reg_1386));
    add_ln42_18_fu_929_p2 <= std_logic_vector(unsigned(zext_ln40_reg_1326) + unsigned(tmp12_2_0_mid2_reg_1379));
    add_ln42_19_fu_938_p2 <= std_logic_vector(unsigned(tmp12_2_0_mid2_reg_1379) + unsigned(zext_ln42_13_reg_1343));
    add_ln42_20_fu_947_p2 <= std_logic_vector(unsigned(tmp12_2_0_mid2_reg_1379) + unsigned(zext_ln42_15_reg_1386));
    add_ln42_fu_656_p2 <= std_logic_vector(unsigned(zext_ln40_fu_653_p1) + unsigned(tmp12_0_0_mid2_fu_634_p2));
    add_ln51_10_fu_999_p2 <= std_logic_vector(unsigned(trunc_ln51_8_reg_1463) + unsigned(trunc_ln51_s_reg_1458));
    add_ln51_11_fu_1042_p2 <= std_logic_vector(unsigned(trunc_ln51_9_reg_1422) + unsigned(add_ln51_10_reg_1508));
    add_ln51_12_fu_1046_p2 <= std_logic_vector(unsigned(add_ln51_9_fu_1037_p2) + unsigned(add_ln51_11_fu_1042_p2));
    add_ln51_13_fu_1052_p2 <= std_logic_vector(unsigned(trunc_ln51_2_reg_1498) + unsigned(trunc_ln51_1_reg_1493));
    add_ln51_14_fu_1076_p2 <= std_logic_vector(unsigned(trunc_ln51_5_reg_1533) + unsigned(trunc_ln51_4_reg_1518));
    add_ln51_15_fu_1080_p2 <= std_logic_vector(unsigned(trunc_ln51_3_reg_1513) + unsigned(add_ln51_14_fu_1076_p2));
    add_ln51_16_fu_1085_p2 <= std_logic_vector(unsigned(add_ln51_13_reg_1528) + unsigned(add_ln51_15_fu_1080_p2));
    add_ln51_17_fu_1090_p2 <= std_logic_vector(unsigned(add_ln51_12_reg_1523) + unsigned(add_ln51_16_fu_1085_p2));
    add_ln51_9_fu_1037_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1417) + unsigned(bias_q0));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln23_reg_1222)
    begin
        if ((icmp_ln23_reg_1222 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten48_phi_fu_296_p4_assign_proc : process(indvar_flatten48_reg_292, icmp_ln23_reg_1222, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln23_reg_1364, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten48_phi_fu_296_p4 <= add_ln23_reg_1364;
        else 
            ap_phi_mux_indvar_flatten48_phi_fu_296_p4 <= indvar_flatten48_reg_292;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_320_p4_assign_proc : process(indvar_flatten_reg_316, icmp_ln23_reg_1222, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_14_reg_1483, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_320_p4 <= select_ln32_14_reg_1483;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_320_p4 <= indvar_flatten_reg_316;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_308_p4_assign_proc : process(out_d_0_reg_304, icmp_ln23_reg_1222, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln24_9_reg_1447, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_308_p4 <= select_ln24_9_reg_1447;
        else 
            ap_phi_mux_out_d_0_phi_fu_308_p4 <= out_d_0_reg_304;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_331_p4_assign_proc : process(out_h_0_reg_327, icmp_ln23_reg_1222, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_reg_1453, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_331_p4 <= select_ln32_reg_1453;
        else 
            ap_phi_mux_out_h_0_phi_fu_331_p4 <= out_h_0_reg_327;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_342_p4_assign_proc : process(out_w_0_reg_338, icmp_ln23_reg_1222, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1338, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1222 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_342_p4 <= out_w_reg_1338;
        else 
            ap_phi_mux_out_w_0_phi_fu_342_p4 <= out_w_0_reg_338;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln24_18_fu_965_p1(3 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_60_fu_393_p1 <= output_height(4 - 1 downto 0);
    empty_62_fu_568_p2 <= (select_ln24_14_fu_555_p3 or icmp_ln32_fu_477_p2);
    empty_fu_389_p1 <= output_width(4 - 1 downto 0);
    grp_fu_1155_p0 <= zext_ln51_1_cast_reg_1187(5 - 1 downto 0);
    grp_fu_1155_p1 <= grp_fu_1155_p10(7 - 1 downto 0);
    grp_fu_1155_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp14_mid2_v_v_reg_1412),11));
    grp_fu_1155_p2 <= zext_ln40_reg_1326_pp0_iter1_reg(4 - 1 downto 0);
    icmp_ln23_fu_466_p2 <= "1" when (ap_phi_mux_indvar_flatten48_phi_fu_296_p4 = tmp_s_reg_1202) else "0";
    icmp_ln32_fu_477_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_320_p4 = mul_ln4_reg_1197) else "0";
    icmp_ln33_2_fu_550_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_342_p4 = empty_reg_1192) else "0";
    icmp_ln33_fu_419_p2 <= "1" when (empty_fu_389_p1 = ap_const_lv4_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln42_12_fu_662_p1, ap_block_pp0_stage2, zext_ln42_17_fu_759_p1, ap_block_pp0_stage3, zext_ln42_19_fu_859_p1, ap_block_pp0_stage4, zext_ln42_21_fu_942_p1, zext_ln42_22_fu_995_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln42_22_fu_995_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln42_21_fu_942_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln42_19_fu_859_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln42_17_fu_759_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln42_12_fu_662_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln42_14_fu_682_p1, ap_block_pp0_stage2, zext_ln42_16_fu_750_p1, ap_block_pp0_stage3, zext_ln42_18_fu_850_p1, ap_block_pp0_stage4, zext_ln42_20_fu_933_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address1 <= zext_ln42_20_fu_933_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= zext_ln42_18_fu_850_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln42_16_fu_750_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln42_14_fu_682_p1(14 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln24_fu_524_p1, zext_ln24_10_fu_615_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln24_13_fu_717_p1, ap_block_pp0_stage3, zext_ln24_15_fu_787_p1, ap_block_pp0_stage4, zext_ln24_17_fu_887_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= zext_ln24_17_fu_887_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= zext_ln24_15_fu_787_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= zext_ln24_13_fu_717_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= zext_ln24_10_fu_615_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= zext_ln24_fu_524_p1(7 - 1 downto 0);
            else 
                kernel_address0 <= "XXXXXXX";
            end if;
        else 
            kernel_address0 <= "XXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln24_11_fu_626_p1, zext_ln24_12_fu_707_p1, ap_block_pp0_stage2, zext_ln24_14_fu_777_p1, ap_block_pp0_stage3, zext_ln24_16_fu_877_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address1 <= zext_ln24_16_fu_877_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= zext_ln24_14_fu_777_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= zext_ln24_12_fu_707_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= zext_ln24_11_fu_626_p1(7 - 1 downto 0);
            else 
                kernel_address1 <= "XXXXXXX";
            end if;
        else 
            kernel_address1 <= "XXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln42_18_fu_529_p0 <= mul_ln42_18_fu_529_p00(4 - 1 downto 0);
    mul_ln42_18_fu_529_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_471_p2),7));
    mul_ln42_18_fu_529_p1 <= zext_ln42_reg_1168(6 - 1 downto 0);
    mul_ln42_18_fu_529_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln42_18_fu_529_p0) * unsigned(mul_ln42_18_fu_529_p1), 7));
    mul_ln42_fu_451_p0 <= mul_ln42_fu_451_p00(4 - 1 downto 0);
    mul_ln42_fu_451_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_308_p4),7));
    mul_ln42_fu_451_p1 <= zext_ln42_reg_1168(6 - 1 downto 0);
    mul_ln42_fu_451_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln42_fu_451_p0) * unsigned(mul_ln42_fu_451_p1), 7));
    mul_ln4_fu_405_p0 <= mul_ln4_fu_405_p00(4 - 1 downto 0);
    mul_ln4_fu_405_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_60_fu_393_p1),8));
    mul_ln4_fu_405_p1 <= mul_ln4_fu_405_p10(4 - 1 downto 0);
    mul_ln4_fu_405_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_389_p1),8));
    mul_ln4_fu_405_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln4_fu_405_p0) * unsigned(mul_ln4_fu_405_p1), 8));
    mul_ln51_2_fu_792_p0 <= zext_ln51_4_reg_1244(4 - 1 downto 0);
    mul_ln51_2_fu_792_p1 <= zext_ln51_reg_1181(5 - 1 downto 0);
    mul_ln51_2_fu_792_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln51_2_fu_792_p0) * unsigned(mul_ln51_2_fu_792_p1), 7));
    mul_ln51_fu_687_p0 <= zext_ln51_2_reg_1212(4 - 1 downto 0);
    mul_ln51_fu_687_p1 <= zext_ln51_reg_1181(5 - 1 downto 0);
    mul_ln51_fu_687_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln51_fu_687_p0) * unsigned(mul_ln51_fu_687_p1), 7));
    out_d_fu_471_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_308_p4));
    out_h_fu_562_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln24_fu_482_p3));
    out_w_0_mid2_fu_574_p3 <= 
        ap_const_lv4_0 when (empty_62_fu_568_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_342_p4;
    out_w_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(out_w_0_mid2_reg_1270));
    output_r_address0 <= zext_ln51_3_fu_1095_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln51_17_reg_1543;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1222_pp0_iter1_reg)
    begin
        if (((icmp_ln23_reg_1222_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_10_fu_534_p3 <= 
        mul_ln42_18_fu_529_p2 when (icmp_ln32_fu_477_p2(0) = '1') else 
        mul_ln42_fu_451_p2;
    select_ln24_11_fu_796_p3 <= 
        mul_ln51_2_fu_792_p2 when (icmp_ln32_reg_1231(0) = '1') else 
        mul_ln51_reg_1354;
    select_ln24_12_fu_542_p3 <= 
        mul_ln42_18_fu_529_p2 when (icmp_ln32_fu_477_p2(0) = '1') else 
        tmp_0_0_fu_460_p2;
    select_ln24_13_fu_802_p3 <= 
        mul_ln51_2_fu_792_p2 when (icmp_ln32_reg_1231(0) = '1') else 
        tmp13_reg_1359;
    select_ln24_14_fu_555_p3 <= 
        icmp_ln33_reg_1207 when (icmp_ln32_fu_477_p2(0) = '1') else 
        icmp_ln33_2_fu_550_p2;
    select_ln24_8_fu_516_p3 <= 
        add_ln27_2_fu_510_p2 when (icmp_ln32_fu_477_p2(0) = '1') else 
        add_ln27_fu_445_p2;
    select_ln24_9_fu_892_p3 <= 
        out_d_reg_1226 when (icmp_ln32_reg_1231(0) = '1') else 
        out_d_0_reg_304;
    select_ln24_fu_482_p3 <= 
        ap_const_lv4_0 when (icmp_ln32_fu_477_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_331_p4;
    select_ln32_14_fu_951_p3 <= 
        ap_const_lv8_1 when (icmp_ln32_reg_1231(0) = '1') else 
        add_ln32_2_reg_1289;
    select_ln32_fu_898_p3 <= 
        out_h_reg_1265 when (select_ln24_14_reg_1259(0) = '1') else 
        select_ln24_reg_1239;
    shl_ln27_mid1_fu_502_p3 <= (trunc_ln27_2_fu_498_p1 & ap_const_lv3_0);
    shl_ln_fu_437_p3 <= (trunc_ln27_fu_433_p1 & ap_const_lv3_0);
    tmp12_0_0_mid2_fu_634_p0 <= zext_ln42_1_cast14_reg_1174(6 - 1 downto 0);
    tmp12_0_0_mid2_fu_634_p1 <= tmp12_0_0_mid2_fu_634_p10(7 - 1 downto 0);
    tmp12_0_0_mid2_fu_634_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_0_0_mid2_v_v_reg_1282),11));
    tmp12_0_0_mid2_fu_634_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_0_0_mid2_fu_634_p0) * unsigned(tmp12_0_0_mid2_fu_634_p1), 11));
    tmp12_0_0_mid2_v_v_fu_592_p3 <= 
        tmp_0_0_mid1_fu_586_p2 when (select_ln24_14_fu_555_p3(0) = '1') else 
        select_ln24_12_fu_542_p3;
    tmp12_1_0_mid2_fu_648_p0 <= zext_ln42_1_cast14_reg_1174(6 - 1 downto 0);
    tmp12_1_0_mid2_fu_648_p1 <= tmp12_1_0_mid2_fu_648_p10(7 - 1 downto 0);
    tmp12_1_0_mid2_fu_648_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_1_0_mid2_v_v_fu_639_p2),11));
    tmp12_1_0_mid2_fu_648_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_1_0_mid2_fu_648_p0) * unsigned(tmp12_1_0_mid2_fu_648_p1), 11));
    tmp12_1_0_mid2_v_v_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp12_0_0_mid2_v_v_reg_1282));
    tmp12_2_0_mid2_fu_731_p0 <= zext_ln42_1_cast14_reg_1174(6 - 1 downto 0);
    tmp12_2_0_mid2_fu_731_p1 <= tmp12_2_0_mid2_fu_731_p10(7 - 1 downto 0);
    tmp12_2_0_mid2_fu_731_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_2_0_mid2_v_v_fu_722_p2),11));
    tmp12_2_0_mid2_fu_731_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_2_0_mid2_fu_731_p0) * unsigned(tmp12_2_0_mid2_fu_731_p1), 11));
    tmp12_2_0_mid2_v_v_fu_722_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(tmp12_0_0_mid2_v_v_reg_1282));
    tmp13_fu_691_p2 <= std_logic_vector(unsigned(zext_ln42_2_cast_reg_1217) + unsigned(mul_ln51_fu_687_p2));
    tmp13_mid1_fu_808_p2 <= std_logic_vector(unsigned(zext_ln42_2_cast_mid_reg_1277) + unsigned(select_ln24_11_fu_796_p3));
    tmp14_mid2_v_v_fu_813_p3 <= 
        tmp13_mid1_fu_808_p2 when (select_ln24_14_reg_1259(0) = '1') else 
        select_ln24_13_fu_802_p3;
    tmp_0_0_fu_460_p2 <= std_logic_vector(unsigned(zext_ln42_2_cast_fu_456_p1) + unsigned(mul_ln42_fu_451_p2));
    tmp_0_0_mid1_fu_586_p2 <= std_logic_vector(unsigned(zext_ln42_2_cast_mid_fu_582_p1) + unsigned(select_ln24_10_fu_534_p3));
    tmp_s_fu_411_p3 <= (mul_ln4_fu_405_p2 & ap_const_lv3_0);
    trunc_ln27_2_fu_498_p1 <= out_d_fu_471_p2(3 - 1 downto 0);
    trunc_ln27_fu_433_p1 <= ap_phi_mux_out_d_0_phi_fu_308_p4(3 - 1 downto 0);
    zext_ln24_10_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_609_p2),64));
    zext_ln24_11_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_8_fu_620_p2),64));
    zext_ln24_12_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_9_fu_702_p2),64));
    zext_ln24_13_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_10_fu_712_p2),64));
    zext_ln24_14_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_11_fu_772_p2),64));
    zext_ln24_15_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_12_fu_782_p2),64));
    zext_ln24_16_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_13_fu_872_p2),64));
    zext_ln24_17_fu_887_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_14_fu_882_p2),64));
    zext_ln24_18_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_9_reg_1447),64));
    zext_ln24_19_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_8_reg_1249),7));
    zext_ln24_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_8_fu_516_p3),64));
    zext_ln27_4_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_471_p2),6));
    zext_ln27_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_308_p4),6));
    zext_ln40_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1270),11));
    zext_ln42_12_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_fu_656_p2),64));
    zext_ln42_13_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_667_p2),11));
    zext_ln42_14_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_12_fu_676_p2),64));
    zext_ln42_15_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_13_fu_736_p2),11));
    zext_ln42_16_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_14_fu_745_p2),64));
    zext_ln42_17_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_15_fu_755_p2),64));
    zext_ln42_18_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_16_fu_846_p2),64));
    zext_ln42_19_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_17_fu_855_p2),64));
    zext_ln42_1_cast14_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln42_20_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_18_fu_929_p2),64));
    zext_ln42_21_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_19_fu_938_p2),64));
    zext_ln42_22_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln42_20_reg_1478),64));
    zext_ln42_2_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_331_p4),7));
    zext_ln42_2_cast_mid_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_562_p2),7));
    zext_ln42_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln51_1_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln51_2_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_308_p4),7));
    zext_ln51_3_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_reg_1538),64));
    zext_ln51_4_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_471_p2),7));
    zext_ln51_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
end behav;
