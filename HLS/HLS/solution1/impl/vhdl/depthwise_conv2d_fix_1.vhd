-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_324 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_335 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_346 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_357 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln32_reg_1208 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state11_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state12_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state9_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln32_reg_1208_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_362 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln40_fu_367_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_reg_1008 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_1_cast23_fu_371_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_cast23_reg_1013 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_fu_375_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_reg_1020 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_1_cast_fu_379_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_1_cast_reg_1025 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_383_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1030 : STD_LOGIC_VECTOR (3 downto 0);
    signal bound_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_reg_1035 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_fu_405_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_reg_1040 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln23_3_fu_410_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_3_reg_1045 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_d_fu_421_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1053 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln27_fu_431_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_1058 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln23_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_443_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_reg_1063 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_19_fu_454_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_19_reg_1073 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_load_reg_1083 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_1_reg_1098 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kernel_load_2_reg_1103 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_3_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal kernel_load_4_reg_1123 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_5_reg_1138 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kernel_load_6_reg_1143 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln27_fu_539_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_reg_1158 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sext_ln27_8_fu_542_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_8_reg_1163 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_9_fu_545_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_9_reg_1168 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_10_fu_548_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_10_reg_1173 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_11_fu_551_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_11_reg_1178 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_12_fu_554_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_12_reg_1183 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_13_fu_557_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_13_reg_1188 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_14_fu_560_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln27_14_reg_1193 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln30_fu_564_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln30_reg_1198 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_568_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1203 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln32_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_reg_1212 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_w_0_mid2_fu_611_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_reg_1217 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp10_0_0_mid2_v_v_v_2_fu_619_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp10_0_0_mid2_v_v_v_2_reg_1224 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp10_0_0_mid2_v_v_fu_631_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_v_v_reg_1229 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_641_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid2_reg_1235 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_mid2_v_v_fu_646_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid2_v_v_reg_1242 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_661_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_reg_1247 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_fu_666_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_reg_1254 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_679_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_1266 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_15_fu_684_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_15_reg_1271 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_707_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_reg_1282 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_17_fu_720_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_17_reg_1289 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_948_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1305 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1305_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln_reg_1310 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_9_reg_1315 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_18_fu_787_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_18_reg_1330 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_19_fu_791_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_19_reg_1335 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_20_fu_795_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_20_reg_1340 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln48_s_reg_1345 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_8_reg_1350 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_9_fu_833_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_9_reg_1365 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_1_reg_1370 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_2_reg_1375 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_11_fu_871_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_11_reg_1385 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_3_reg_1390 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_4_reg_1395 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_5_reg_1400 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_16_fu_928_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_16_reg_1405 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal out_d_0_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal phi_mul_reg_300 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul5_reg_312 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_328_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_h_0_phi_fu_339_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_350_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln27_10_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_11_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_12_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_13_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_14_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_15_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_16_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_17_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_18_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_14_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln40_16_fu_693_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_18_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln40_19_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_20_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln40_21_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_22_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln40_23_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_24_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_2_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_61_fu_387_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bound_fu_399_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bound_fu_399_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln27_fu_427_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_435_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_1_fu_457_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_2_fu_468_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_3_fu_479_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_4_fu_489_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_5_fu_499_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_6_fu_509_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_7_fu_519_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_8_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln33_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_600_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp10_0_0_mid2_v_v_v_fu_627_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_641_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_641_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_1_0_mid2_v_v_fu_652_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_661_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_661_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln40_fu_669_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_12_fu_688_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_v_v_fu_698_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_fu_707_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_fu_707_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln40_13_fu_715_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln40_14_fu_724_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_15_fu_734_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln40_fu_954_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_9_fu_960_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln40_16_fu_769_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_17_fu_778_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln40_10_fu_966_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_11_fu_972_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_12_fu_978_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_13_fu_984_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_10_fu_867_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_14_fu_990_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_15_fu_996_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_16_fu_1002_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_14_fu_919_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_15_fu_923_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_13_fu_915_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_12_fu_934_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_948_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_948_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_948_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln40_fu_954_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_9_fu_960_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_10_fu_966_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_11_fu_972_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_12_fu_978_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_13_fu_984_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_14_fu_990_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_15_fu_996_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_16_fu_1002_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_399_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_399_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_948_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid2_fu_641_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_fu_661_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_707_p00 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mux_83_16_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mac_muladd_7ns_5ns_4ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mux_83_16_1_1_x_U65 : component network_mux_83_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_0,
        din1 => ap_const_lv16_0,
        din2 => ap_const_lv16_0,
        din3 => ap_const_lv16_0,
        din4 => ap_const_lv16_0,
        din5 => ap_const_lv16_0,
        din6 => ap_const_lv16_0,
        din7 => ap_const_lv16_0,
        din8 => trunc_ln27_reg_1058,
        dout => tmp_3_fu_568_p10);

    network_mac_muladd_7ns_5ns_4ns_11_1_1_U66 : component network_mac_muladd_7ns_5ns_4ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_948_p0,
        din1 => grp_fu_948_p1,
        din2 => grp_fu_948_p2,
        dout => grp_fu_948_p3);

    network_mul_mul_16s_16s_30_1_1_U67 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_fu_954_p0,
        din1 => reg_357,
        dout => mul_ln40_fu_954_p2);

    network_mul_mul_16s_16s_30_1_1_U68 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_9_fu_960_p0,
        din1 => reg_362,
        dout => mul_ln40_9_fu_960_p2);

    network_mul_mul_16s_16s_30_1_1_U69 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_10_fu_966_p0,
        din1 => reg_357,
        dout => mul_ln40_10_fu_966_p2);

    network_mul_mul_16s_16s_30_1_1_U70 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_11_fu_972_p0,
        din1 => reg_362,
        dout => mul_ln40_11_fu_972_p2);

    network_mul_mul_16s_16s_30_1_1_U71 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_12_fu_978_p0,
        din1 => reg_357,
        dout => mul_ln40_12_fu_978_p2);

    network_mul_mul_16s_16s_30_1_1_U72 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_13_fu_984_p0,
        din1 => reg_362,
        dout => mul_ln40_13_fu_984_p2);

    network_mul_mul_16s_16s_30_1_1_U73 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_14_fu_990_p0,
        din1 => reg_357,
        dout => mul_ln40_14_fu_990_p2);

    network_mul_mul_16s_16s_30_1_1_U74 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_15_fu_996_p0,
        din1 => reg_362,
        dout => mul_ln40_15_fu_996_p2);

    network_mul_mul_16s_16s_30_1_1_U75 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln40_16_fu_1002_p0,
        din1 => reg_357,
        dout => mul_ln40_16_fu_1002_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_324 <= add_ln32_reg_1212;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_324 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                out_d_0_reg_289 <= out_d_reg_1053;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_289 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_335 <= tmp10_0_0_mid2_v_v_v_2_reg_1224;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                out_h_0_reg_335 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_346 <= out_w_reg_1266;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                out_w_0_reg_346 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                phi_mul5_reg_312 <= add_ln23_reg_1040;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul5_reg_312 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                phi_mul_reg_300 <= add_ln23_3_reg_1045;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_300 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_357 <= input_r_q1;
            elsif ((((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln32_reg_1208_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
                reg_357 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_362 <= input_r_q0;
            elsif (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_362 <= input_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln23_3_reg_1045 <= add_ln23_3_fu_410_p2;
                add_ln23_reg_1040 <= add_ln23_fu_405_p2;
                out_d_reg_1053 <= out_d_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln27_reg_1063 <= add_ln27_fu_443_p2;
                trunc_ln27_reg_1058 <= trunc_ln27_fu_431_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln32_reg_1212 <= add_ln32_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln40_18_reg_1330 <= add_ln40_18_fu_787_p2;
                add_ln40_19_reg_1335 <= add_ln40_19_fu_791_p2;
                add_ln40_20_reg_1340 <= add_ln40_20_fu_795_p2;
                trunc_ln48_9_reg_1315 <= mul_ln40_9_fu_960_p2(29 downto 14);
                trunc_ln_reg_1310 <= mul_ln40_fu_954_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln48_11_reg_1385 <= add_ln48_11_fu_871_p2;
                trunc_ln48_1_reg_1370 <= mul_ln40_12_fu_978_p2(29 downto 14);
                trunc_ln48_2_reg_1375 <= mul_ln40_13_fu_984_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln32_reg_1208_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln48_16_reg_1405 <= add_ln48_16_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln48_9_reg_1365 <= add_ln48_9_fu_833_p2;
                trunc_ln48_8_reg_1350 <= mul_ln40_11_fu_972_p2(29 downto 14);
                trunc_ln48_s_reg_1345 <= mul_ln40_10_fu_966_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln48_reg_1305 <= grp_fu_948_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln48_reg_1305_pp0_iter1_reg <= add_ln48_reg_1305;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bound_reg_1035 <= bound_fu_399_p2;
                empty_reg_1030 <= empty_fu_383_p1;
                    zext_ln40_1_cast23_reg_1013(5 downto 0) <= zext_ln40_1_cast23_fu_371_p1(5 downto 0);
                    zext_ln40_reg_1008(5 downto 0) <= zext_ln40_fu_367_p1(5 downto 0);
                    zext_ln48_1_cast_reg_1025(4 downto 0) <= zext_ln48_1_cast_fu_379_p1(4 downto 0);
                    zext_ln48_reg_1020(4 downto 0) <= zext_ln48_fu_375_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln32_reg_1208 <= icmp_ln32_fu_589_p2;
                icmp_ln32_reg_1208_pp0_iter1_reg <= icmp_ln32_reg_1208;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kernel_load_1_reg_1098 <= kernel_q0;
                kernel_load_2_reg_1103 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kernel_load_3_reg_1118 <= kernel_q1;
                kernel_load_4_reg_1123 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                kernel_load_5_reg_1138 <= kernel_q1;
                kernel_load_6_reg_1143 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_load_reg_1083 <= kernel_q0;
                    zext_ln27_19_reg_1073(5 downto 0) <= zext_ln27_19_fu_454_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_589_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                out_w_0_mid2_reg_1217 <= out_w_0_mid2_fu_611_p3;
                tmp10_0_0_mid2_reg_1235 <= tmp10_0_0_mid2_fu_641_p2;
                tmp10_0_0_mid2_v_v_reg_1229 <= tmp10_0_0_mid2_v_v_fu_631_p2;
                tmp12_mid2_v_v_reg_1242 <= tmp12_mid2_v_v_fu_646_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                out_w_reg_1266 <= out_w_fu_679_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                sext_ln27_10_reg_1173 <= sext_ln27_10_fu_548_p1;
                sext_ln27_11_reg_1178 <= sext_ln27_11_fu_551_p1;
                sext_ln27_12_reg_1183 <= sext_ln27_12_fu_554_p1;
                sext_ln27_13_reg_1188 <= sext_ln27_13_fu_557_p1;
                sext_ln27_14_reg_1193 <= sext_ln27_14_fu_560_p1;
                sext_ln27_8_reg_1163 <= sext_ln27_8_fu_542_p1;
                sext_ln27_9_reg_1168 <= sext_ln27_9_fu_545_p1;
                sext_ln27_reg_1158 <= sext_ln27_fu_539_p1;
                sext_ln30_reg_1198 <= sext_ln30_fu_564_p1;
                tmp_3_reg_1203 <= tmp_3_fu_568_p10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_589_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp10_0_0_mid2_v_v_v_2_reg_1224 <= tmp10_0_0_mid2_v_v_v_2_fu_619_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp10_1_0_mid2_reg_1247 <= tmp10_1_0_mid2_fu_661_p2;
                    zext_ln40_13_reg_1254(3 downto 0) <= zext_ln40_13_fu_666_p1(3 downto 0);
                    zext_ln40_15_reg_1271(3 downto 0) <= zext_ln40_15_fu_684_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp10_2_0_mid2_reg_1282 <= tmp10_2_0_mid2_fu_707_p2;
                    zext_ln40_17_reg_1289(3 downto 0) <= zext_ln40_17_fu_720_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                trunc_ln48_3_reg_1390 <= mul_ln40_14_fu_990_p2(29 downto 14);
                trunc_ln48_4_reg_1395 <= mul_ln40_15_fu_996_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1208_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                trunc_ln48_5_reg_1400 <= mul_ln40_16_fu_1002_p2(29 downto 14);
            end if;
        end if;
    end process;
    zext_ln40_reg_1008(6) <= '0';
    zext_ln40_1_cast23_reg_1013(10 downto 6) <= "00000";
    zext_ln48_reg_1020(6 downto 5) <= "00";
    zext_ln48_1_cast_reg_1025(10 downto 5) <= "000000";
    zext_ln27_19_reg_1073(6) <= '0';
    zext_ln40_13_reg_1254(10 downto 4) <= "0000000";
    zext_ln40_15_reg_1271(10 downto 4) <= "0000000";
    zext_ln40_17_reg_1289(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, icmp_ln23_fu_415_p2, icmp_ln32_fu_589_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_415_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln32_fu_589_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln32_fu_589_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_3_fu_410_p2 <= std_logic_vector(unsigned(phi_mul_reg_300) + unsigned(zext_ln40_reg_1008));
    add_ln23_fu_405_p2 <= std_logic_vector(unsigned(phi_mul5_reg_312) + unsigned(zext_ln48_reg_1020));
    add_ln27_1_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(zext_ln27_19_fu_454_p1));
    add_ln27_2_fu_468_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(zext_ln27_19_fu_454_p1));
    add_ln27_3_fu_479_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(zext_ln27_19_reg_1073));
    add_ln27_4_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(zext_ln27_19_reg_1073));
    add_ln27_5_fu_499_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(zext_ln27_19_reg_1073));
    add_ln27_6_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) + unsigned(zext_ln27_19_reg_1073));
    add_ln27_7_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv7_7) + unsigned(zext_ln27_19_reg_1073));
    add_ln27_8_fu_529_p2 <= std_logic_vector(unsigned(ap_const_lv7_8) + unsigned(zext_ln27_19_reg_1073));
    add_ln27_fu_443_p2 <= std_logic_vector(unsigned(zext_ln27_fu_427_p1) + unsigned(shl_ln_fu_435_p3));
    add_ln32_fu_594_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_328_p4) + unsigned(ap_const_lv8_1));
    add_ln40_12_fu_688_p2 <= std_logic_vector(unsigned(zext_ln40_15_fu_684_p1) + unsigned(tmp10_0_0_mid2_reg_1235));
    add_ln40_13_fu_715_p2 <= std_logic_vector(unsigned(out_w_0_mid2_reg_1217) + unsigned(ap_const_lv4_2));
    add_ln40_14_fu_724_p2 <= std_logic_vector(unsigned(zext_ln40_17_fu_720_p1) + unsigned(tmp10_0_0_mid2_reg_1235));
    add_ln40_15_fu_734_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1247) + unsigned(zext_ln40_13_reg_1254));
    add_ln40_16_fu_769_p2 <= std_logic_vector(unsigned(zext_ln40_15_reg_1271) + unsigned(tmp10_1_0_mid2_reg_1247));
    add_ln40_17_fu_778_p2 <= std_logic_vector(unsigned(zext_ln40_17_reg_1289) + unsigned(tmp10_1_0_mid2_reg_1247));
    add_ln40_18_fu_787_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1282) + unsigned(zext_ln40_13_reg_1254));
    add_ln40_19_fu_791_p2 <= std_logic_vector(unsigned(zext_ln40_15_reg_1271) + unsigned(tmp10_2_0_mid2_reg_1282));
    add_ln40_20_fu_795_p2 <= std_logic_vector(unsigned(zext_ln40_17_reg_1289) + unsigned(tmp10_2_0_mid2_reg_1282));
    add_ln40_fu_669_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1235) + unsigned(zext_ln40_13_fu_666_p1));
    add_ln48_10_fu_867_p2 <= std_logic_vector(unsigned(trunc_ln48_s_reg_1345) + unsigned(trunc_ln48_8_reg_1350));
    add_ln48_11_fu_871_p2 <= std_logic_vector(unsigned(add_ln48_10_fu_867_p2) + unsigned(trunc_ln48_9_reg_1315));
    add_ln48_12_fu_934_p2 <= std_logic_vector(unsigned(add_ln48_11_reg_1385) + unsigned(add_ln48_9_reg_1365));
    add_ln48_13_fu_915_p2 <= std_logic_vector(unsigned(trunc_ln48_1_reg_1370) + unsigned(trunc_ln48_2_reg_1375));
    add_ln48_14_fu_919_p2 <= std_logic_vector(unsigned(trunc_ln48_4_reg_1395) + unsigned(trunc_ln48_5_reg_1400));
    add_ln48_15_fu_923_p2 <= std_logic_vector(unsigned(add_ln48_14_fu_919_p2) + unsigned(trunc_ln48_3_reg_1390));
    add_ln48_16_fu_928_p2 <= std_logic_vector(unsigned(add_ln48_15_fu_923_p2) + unsigned(add_ln48_13_fu_915_p2));
    add_ln48_9_fu_833_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1310) + unsigned(tmp_3_reg_1203));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(icmp_ln32_fu_589_p2)
    begin
        if ((icmp_ln32_fu_589_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_415_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_415_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_328_p4_assign_proc : process(indvar_flatten_reg_324, icmp_ln32_reg_1208, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln32_reg_1212, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_328_p4 <= add_ln32_reg_1212;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_328_p4 <= indvar_flatten_reg_324;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_339_p4_assign_proc : process(out_h_0_reg_335, icmp_ln32_reg_1208, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp10_0_0_mid2_v_v_v_2_reg_1224, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_339_p4 <= tmp10_0_0_mid2_v_v_v_2_reg_1224;
        else 
            ap_phi_mux_out_h_0_phi_fu_339_p4 <= out_h_0_reg_335;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_350_p4_assign_proc : process(out_w_0_reg_346, icmp_ln32_reg_1208, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1266, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1208 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_350_p4 <= out_w_reg_1266;
        else 
            ap_phi_mux_out_w_0_phi_fu_350_p4 <= out_w_0_reg_346;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_415_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_415_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_399_p0 <= bound_fu_399_p00(4 - 1 downto 0);
    bound_fu_399_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_383_p1),8));
    bound_fu_399_p1 <= bound_fu_399_p10(4 - 1 downto 0);
    bound_fu_399_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_61_fu_387_p1),8));
    bound_fu_399_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_399_p0) * unsigned(bound_fu_399_p1), 8));
    empty_61_fu_387_p1 <= output_height(4 - 1 downto 0);
    empty_fu_383_p1 <= output_width(4 - 1 downto 0);
    grp_fu_948_p0 <= grp_fu_948_p00(7 - 1 downto 0);
    grp_fu_948_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_mid2_v_v_reg_1242),11));
    grp_fu_948_p1 <= zext_ln48_1_cast_reg_1025(5 - 1 downto 0);
    grp_fu_948_p2 <= zext_ln40_13_reg_1254(4 - 1 downto 0);
    icmp_ln23_fu_415_p2 <= "1" when (out_d_0_reg_289 = ap_const_lv4_8) else "0";
    icmp_ln32_fu_589_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_328_p4 = bound_reg_1035) else "0";
    icmp_ln33_fu_606_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_350_p4 = empty_reg_1030) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln40_14_fu_674_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln40_19_fu_738_p1, ap_block_pp0_stage3, zext_ln40_21_fu_782_p1, ap_block_pp0_stage4, zext_ln40_23_fu_829_p1, zext_ln40_24_fu_863_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln40_24_fu_863_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln40_23_fu_829_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_21_fu_782_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln40_19_fu_738_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln40_14_fu_674_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln40_16_fu_693_p1, zext_ln40_18_fu_729_p1, ap_block_pp0_stage2, zext_ln40_20_fu_773_p1, ap_block_pp0_stage3, zext_ln40_22_fu_825_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address1 <= zext_ln40_22_fu_825_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= zext_ln40_20_fu_773_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln40_18_fu_729_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln40_16_fu_693_p1(14 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln27_10_fu_449_p1, zext_ln27_11_fu_463_p1, zext_ln27_14_fu_494_p1, zext_ln27_16_fu_514_p1, zext_ln27_18_fu_534_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_address0 <= zext_ln27_18_fu_534_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address0 <= zext_ln27_16_fu_514_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address0 <= zext_ln27_14_fu_494_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address0 <= zext_ln27_11_fu_463_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_address0 <= zext_ln27_10_fu_449_p1(7 - 1 downto 0);
        else 
            kernel_address0 <= "XXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln27_12_fu_474_p1, zext_ln27_13_fu_484_p1, zext_ln27_15_fu_504_p1, zext_ln27_17_fu_524_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_address1 <= zext_ln27_17_fu_524_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_address1 <= zext_ln27_15_fu_504_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            kernel_address1 <= zext_ln27_13_fu_484_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            kernel_address1 <= zext_ln27_12_fu_474_p1(7 - 1 downto 0);
        else 
            kernel_address1 <= "XXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln40_10_fu_966_p0 <= sext_ln27_9_reg_1168(16 - 1 downto 0);
    mul_ln40_11_fu_972_p0 <= sext_ln27_10_reg_1173(16 - 1 downto 0);
    mul_ln40_12_fu_978_p0 <= sext_ln27_11_reg_1178(16 - 1 downto 0);
    mul_ln40_13_fu_984_p0 <= sext_ln27_12_reg_1183(16 - 1 downto 0);
    mul_ln40_14_fu_990_p0 <= sext_ln27_13_reg_1188(16 - 1 downto 0);
    mul_ln40_15_fu_996_p0 <= sext_ln27_14_reg_1193(16 - 1 downto 0);
    mul_ln40_16_fu_1002_p0 <= sext_ln30_reg_1198(16 - 1 downto 0);
    mul_ln40_9_fu_960_p0 <= sext_ln27_8_reg_1163(16 - 1 downto 0);
    mul_ln40_fu_954_p0 <= sext_ln27_reg_1158(16 - 1 downto 0);
    out_d_fu_421_p2 <= std_logic_vector(unsigned(out_d_0_reg_289) + unsigned(ap_const_lv4_1));
    out_h_fu_600_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_h_0_phi_fu_339_p4) + unsigned(ap_const_lv4_1));
    out_w_0_mid2_fu_611_p3 <= 
        ap_const_lv4_0 when (icmp_ln33_fu_606_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_350_p4;
    out_w_fu_679_p2 <= std_logic_vector(unsigned(out_w_0_mid2_reg_1217) + unsigned(ap_const_lv4_1));
    output_r_address0 <= zext_ln48_2_fu_944_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(unsigned(add_ln48_16_reg_1405) + unsigned(add_ln48_12_fu_934_p2));

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1, icmp_ln32_reg_1208_pp0_iter1_reg)
    begin
        if (((icmp_ln32_reg_1208_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln27_10_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_3_reg_1118),30));

        sext_ln27_11_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_4_reg_1123),30));

        sext_ln27_12_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_5_reg_1138),30));

        sext_ln27_13_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_6_reg_1143),30));

        sext_ln27_14_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_q1),30));

        sext_ln27_8_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_1_reg_1098),30));

        sext_ln27_9_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_2_reg_1103),30));

        sext_ln27_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_load_reg_1083),30));

        sext_ln30_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_q0),30));

    shl_ln_fu_435_p3 <= (trunc_ln27_fu_431_p1 & ap_const_lv3_0);
    tmp10_0_0_mid2_fu_641_p0 <= tmp10_0_0_mid2_fu_641_p00(7 - 1 downto 0);
    tmp10_0_0_mid2_fu_641_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_fu_631_p2),11));
    tmp10_0_0_mid2_fu_641_p1 <= zext_ln40_1_cast23_reg_1013(6 - 1 downto 0);
    tmp10_0_0_mid2_fu_641_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_fu_641_p0) * unsigned(tmp10_0_0_mid2_fu_641_p1), 11));
    tmp10_0_0_mid2_v_v_fu_631_p2 <= std_logic_vector(unsigned(phi_mul_reg_300) + unsigned(tmp10_0_0_mid2_v_v_v_fu_627_p1));
    tmp10_0_0_mid2_v_v_v_2_fu_619_p3 <= 
        out_h_fu_600_p2 when (icmp_ln33_fu_606_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_339_p4;
    tmp10_0_0_mid2_v_v_v_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_v_2_fu_619_p3),7));
    tmp10_1_0_mid2_fu_661_p0 <= tmp10_1_0_mid2_fu_661_p00(7 - 1 downto 0);
    tmp10_1_0_mid2_fu_661_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_v_v_fu_652_p2),11));
    tmp10_1_0_mid2_fu_661_p1 <= zext_ln40_1_cast23_reg_1013(6 - 1 downto 0);
    tmp10_1_0_mid2_fu_661_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_fu_661_p0) * unsigned(tmp10_1_0_mid2_fu_661_p1), 11));
    tmp10_1_0_mid2_v_v_fu_652_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_v_v_reg_1229) + unsigned(ap_const_lv7_1));
    tmp10_2_0_mid2_fu_707_p0 <= tmp10_2_0_mid2_fu_707_p00(7 - 1 downto 0);
    tmp10_2_0_mid2_fu_707_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_v_v_fu_698_p2),11));
    tmp10_2_0_mid2_fu_707_p1 <= zext_ln40_1_cast23_reg_1013(6 - 1 downto 0);
    tmp10_2_0_mid2_fu_707_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_fu_707_p0) * unsigned(tmp10_2_0_mid2_fu_707_p1), 11));
    tmp10_2_0_mid2_v_v_fu_698_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_v_v_reg_1229) + unsigned(ap_const_lv7_2));
    tmp12_mid2_v_v_fu_646_p2 <= std_logic_vector(unsigned(phi_mul5_reg_312) + unsigned(tmp10_0_0_mid2_v_v_v_fu_627_p1));
    trunc_ln27_fu_431_p1 <= out_d_0_reg_289(3 - 1 downto 0);
    zext_ln27_10_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_fu_443_p2),64));
    zext_ln27_11_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_1_fu_457_p2),64));
    zext_ln27_12_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_2_fu_468_p2),64));
    zext_ln27_13_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_3_fu_479_p2),64));
    zext_ln27_14_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_4_fu_489_p2),64));
    zext_ln27_15_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_5_fu_499_p2),64));
    zext_ln27_16_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_6_fu_509_p2),64));
    zext_ln27_17_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_7_fu_519_p2),64));
    zext_ln27_18_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_8_fu_529_p2),64));
    zext_ln27_19_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln27_reg_1063),7));
    zext_ln27_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_289),6));
    zext_ln40_13_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1217),11));
    zext_ln40_14_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_669_p2),64));
    zext_ln40_15_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_679_p2),11));
    zext_ln40_16_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_12_fu_688_p2),64));
    zext_ln40_17_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_13_fu_715_p2),11));
    zext_ln40_18_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_14_fu_724_p2),64));
    zext_ln40_19_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_15_fu_734_p2),64));
    zext_ln40_1_cast23_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln40_20_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_16_fu_769_p2),64));
    zext_ln40_21_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_17_fu_778_p2),64));
    zext_ln40_22_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_18_reg_1330),64));
    zext_ln40_23_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_19_reg_1335),64));
    zext_ln40_24_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_20_reg_1340),64));
    zext_ln40_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln48_1_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln48_2_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1305_pp0_iter1_reg),64));
    zext_ln48_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
end behav;
