-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel1_ce0 : OUT STD_LOGIC;
    kernel1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel2_ce0 : OUT STD_LOGIC;
    kernel2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_287 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal reg_292 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln79_4_fu_296_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_4_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_fu_300_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_reg_839 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln103_fu_304_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_reg_844 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln103_2_cast_fu_308_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln103_2_cast_reg_850 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln103_3_fu_312_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln103_3_reg_855 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln103_1_cast_fu_316_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln103_1_cast_reg_860 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_320_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_865 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_64_fu_324_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_64_reg_870 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln20_fu_328_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln20_reg_875 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln20_5_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln20_5_reg_880 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_d_fu_344_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_888 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln41_1_fu_354_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln41_1_reg_893 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln20_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln41_fu_359_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln41_reg_900 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln47_fu_363_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_908 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln47_2_fu_368_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln47_2_reg_913 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln53_fu_373_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_reg_918 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln53_fu_378_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln53_reg_923 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln60_fu_383_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln60_reg_928 : STD_LOGIC_VECTOR (1 downto 0);
    signal next_mul_fu_388_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_933 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_h_fu_398_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_941 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln79_1_fu_408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln79_1_reg_947 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln21_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_414_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_952 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln41_6_fu_420_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_6_reg_957 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln60_4_fu_432_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln60_4_reg_964 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_6_fu_444_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_6_reg_971 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_fu_451_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_reg_978 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_461_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_986 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln41_fu_471_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_reg_991 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln22_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_1_fu_476_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_1_reg_997 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_4_fu_481_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_4_reg_1002 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_2_fu_486_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_2_reg_1009 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln103_fu_491_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln103_reg_1016 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln47_3_fu_500_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_3_reg_1026 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_fu_504_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_3_reg_1031 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln60_3_fu_516_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln60_3_reg_1046 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln66_fu_520_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln66_reg_1051 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_fu_524_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_reg_1056 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_fu_528_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_reg_1061 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln85_fu_532_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln85_reg_1066 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln91_fu_536_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln91_reg_1071 : STD_LOGIC_VECTOR (10 downto 0);
    signal input_load_2_reg_1076 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_load_reg_1091 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal kernel1_load_reg_1099 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel2_load_reg_1107 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_3_reg_1115 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_4_reg_1120 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_556_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1135 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_8_fu_564_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_1140 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_572_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1145 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_580_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1150 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_5_reg_1155 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_6_reg_1160 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln41_2_fu_600_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln41_2_reg_1175 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln41_fu_766_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln41_reg_1180 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln47_fu_772_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln47_reg_1185 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_fu_778_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_reg_1190 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln66_fu_784_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln66_reg_1195 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln72_fu_790_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln72_reg_1200 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln79_1_fu_796_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln79_1_reg_1205 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln60_1_fu_802_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln60_1_reg_1210 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal mul_ln85_fu_808_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln85_reg_1215 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln91_fu_814_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln91_reg_1220 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln4_reg_1225 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln8_reg_1230 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_9_fu_693_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_9_reg_1235 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_12_fu_699_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_12_reg_1240 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_11_fu_737_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_11_reg_1245 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln103_14_fu_748_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_14_reg_1250 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_2_fu_757_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_2_reg_1255 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal out_d_0_reg_219 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul2_reg_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul5_reg_241 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_0_reg_253 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_w_0_reg_276 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln41_8_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_3_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_3_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_5_fu_762_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln41_1_fu_354_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln41_1_fu_354_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln41_5_fu_404_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln60_fu_427_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln60_fu_427_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln60_fu_427_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln79_fu_439_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln79_fu_439_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln79_fu_439_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_fu_451_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp10_fu_451_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln41_7_fu_467_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln92_2_fu_648_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_639_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln7_fu_675_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln6_fu_666_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln5_fu_705_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_10_fu_732_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln101_2_fu_723_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln9_fu_714_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_13_fu_742_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_15_fu_753_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln41_fu_766_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln47_fu_772_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_2_fu_607_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_fu_778_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln53_2_fu_613_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln66_fu_784_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln72_fu_790_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln79_1_fu_796_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln60_1_fu_802_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln60_2_fu_628_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln85_fu_808_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln91_fu_814_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln41_1_fu_354_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln60_fu_427_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln79_fu_439_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_fu_451_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mux_32_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mux_32_16_1_1_U61 : component network_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1091,
        din1 => kernel1_load_reg_1099,
        din2 => kernel2_load_reg_1107,
        din3 => trunc_ln41_reg_900,
        dout => tmp_7_fu_556_p5);

    network_mux_32_16_1_1_U62 : component network_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1091,
        din1 => kernel1_load_reg_1099,
        din2 => kernel2_load_reg_1107,
        din3 => add_ln47_2_reg_913,
        dout => tmp_8_fu_564_p5);

    network_mux_32_16_1_1_U63 : component network_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1091,
        din1 => kernel1_load_reg_1099,
        din2 => kernel2_load_reg_1107,
        din3 => xor_ln53_reg_923,
        dout => tmp_9_fu_572_p5);

    network_mux_32_16_1_1_U64 : component network_mux_32_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1091,
        din1 => kernel1_load_reg_1099,
        din2 => kernel2_load_reg_1107,
        din3 => add_ln60_reg_928,
        dout => tmp_s_fu_580_p5);

    network_mul_mul_16s_16s_30_1_1_U65 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln41_fu_766_p0,
        din1 => reg_287,
        dout => mul_ln41_fu_766_p2);

    network_mul_mul_16s_16s_30_1_1_U66 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln47_fu_772_p0,
        din1 => reg_292,
        dout => mul_ln47_fu_772_p2);

    network_mul_mul_16s_16s_30_1_1_U67 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln53_fu_778_p0,
        din1 => input_load_2_reg_1076,
        dout => mul_ln53_fu_778_p2);

    network_mul_mul_16s_16s_30_1_1_U68 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln66_fu_784_p0,
        din1 => input_load_4_reg_1120,
        dout => mul_ln66_fu_784_p2);

    network_mul_mul_16s_16s_30_1_1_U69 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln72_fu_790_p0,
        din1 => input_load_5_reg_1155,
        dout => mul_ln72_fu_790_p2);

    network_mul_mul_16s_16s_30_1_1_U70 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln79_1_fu_796_p0,
        din1 => input_load_6_reg_1160,
        dout => mul_ln79_1_fu_796_p2);

    network_mul_mul_16s_16s_30_1_1_U71 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln60_1_fu_802_p0,
        din1 => input_load_3_reg_1115,
        dout => mul_ln60_1_fu_802_p2);

    network_mul_mul_16s_16s_30_1_1_U72 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln85_fu_808_p0,
        din1 => reg_287,
        dout => mul_ln85_fu_808_p2);

    network_mul_mul_16s_16s_30_1_1_U73 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => mul_ln91_fu_814_p0,
        din1 => reg_292,
        dout => mul_ln91_fu_814_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_393_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_219 <= out_d_reg_888;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_0_reg_219 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_456_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_253 <= out_h_reg_941;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_0_reg_253 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_w_0_reg_276 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                out_w_0_reg_276 <= out_w_reg_986;
            end if; 
        end if;
    end process;

    phi_mul2_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_393_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_230 <= add_ln20_5_reg_880;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_230 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_393_p2 = ap_const_lv1_1))) then 
                phi_mul5_reg_241 <= add_ln20_reg_875;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul5_reg_241 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_456_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_264 <= next_mul_reg_933;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_mul_reg_264 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_287 <= input_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_287 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln103_11_reg_1245 <= add_ln103_11_fu_737_p2;
                add_ln103_14_reg_1250 <= add_ln103_14_fu_748_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln103_12_reg_1240 <= add_ln103_12_fu_699_p2;
                add_ln103_9_reg_1235 <= add_ln103_9_fu_693_p2;
                mul_ln60_1_reg_1210 <= mul_ln60_1_fu_802_p2;
                mul_ln85_reg_1215 <= mul_ln85_fu_808_p2;
                mul_ln91_reg_1220 <= mul_ln91_fu_814_p2;
                trunc_ln4_reg_1225 <= mul_ln53_reg_1190(29 downto 14);
                trunc_ln8_reg_1230 <= mul_ln79_1_reg_1205(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln103_2_reg_1255 <= add_ln103_2_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_456_p2 = ap_const_lv1_0))) then
                add_ln103_reg_1016 <= add_ln103_fu_491_p2;
                add_ln41_1_reg_997 <= add_ln41_1_fu_476_p2;
                add_ln41_reg_991 <= add_ln41_fu_471_p2;
                add_ln47_4_reg_1002 <= add_ln47_4_fu_481_p2;
                add_ln53_2_reg_1009 <= add_ln53_2_fu_486_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln20_5_reg_880 <= add_ln20_5_fu_333_p2;
                add_ln20_reg_875 <= add_ln20_fu_328_p2;
                out_d_reg_888 <= out_d_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln47_2_reg_913 <= add_ln47_2_fu_368_p2;
                add_ln47_reg_908 <= add_ln47_fu_363_p2;
                add_ln53_reg_918 <= add_ln53_fu_373_p2;
                add_ln60_reg_928 <= add_ln60_fu_383_p2;
                xor_ln53_reg_923 <= xor_ln53_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln47_3_reg_1026 <= add_ln47_3_fu_500_p2;
                add_ln53_3_reg_1031 <= add_ln53_3_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln60_3_reg_1046 <= add_ln60_3_fu_516_p2;
                add_ln66_reg_1051 <= add_ln66_fu_520_p2;
                add_ln72_reg_1056 <= add_ln72_fu_524_p2;
                add_ln79_reg_1061 <= add_ln79_fu_528_p2;
                add_ln85_reg_1066 <= add_ln85_fu_532_p2;
                add_ln91_reg_1071 <= add_ln91_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_393_p2 = ap_const_lv1_0))) then
                add_ln79_1_reg_947 <= add_ln79_1_fu_408_p2;
                tmp_reg_952 <= tmp_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_64_reg_870 <= empty_64_fu_324_p1;
                empty_reg_865 <= empty_fu_320_p1;
                    zext_ln103_1_cast_reg_860(4 downto 0) <= zext_ln103_1_cast_fu_316_p1(4 downto 0);
                    zext_ln103_2_cast_reg_850(5 downto 0) <= zext_ln103_2_cast_fu_308_p1(5 downto 0);
                    zext_ln103_3_reg_855(4 downto 0) <= zext_ln103_3_fu_312_p1(4 downto 0);
                    zext_ln103_reg_844(5 downto 0) <= zext_ln103_fu_304_p1(5 downto 0);
                    zext_ln79_4_reg_834(5 downto 0) <= zext_ln79_4_fu_296_p1(5 downto 0);
                    zext_ln79_reg_839(5 downto 0) <= zext_ln79_fu_300_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_load_2_reg_1076 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_3_reg_1115 <= input_r_q1;
                input_load_4_reg_1120 <= input_r_q0;
                kernel1_load_reg_1099 <= kernel1_q0;
                kernel2_load_reg_1107 <= kernel2_q0;
                kernel_load_reg_1091 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_5_reg_1155 <= input_r_q1;
                input_load_6_reg_1160 <= input_r_q0;
                tmp_7_reg_1135 <= tmp_7_fu_556_p5;
                tmp_8_reg_1140 <= tmp_8_fu_564_p5;
                tmp_9_reg_1145 <= tmp_9_fu_572_p5;
                tmp_s_reg_1150 <= tmp_s_fu_580_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_338_p2 = ap_const_lv1_0))) then
                mul_ln41_1_reg_893 <= mul_ln41_1_fu_354_p2;
                trunc_ln41_reg_900 <= trunc_ln41_fu_359_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln41_reg_1180 <= mul_ln41_fu_766_p2;
                mul_ln47_reg_1185 <= mul_ln47_fu_772_p2;
                mul_ln53_reg_1190 <= mul_ln53_fu_778_p2;
                mul_ln66_reg_1195 <= mul_ln66_fu_784_p2;
                mul_ln72_reg_1200 <= mul_ln72_fu_790_p2;
                mul_ln79_1_reg_1205 <= mul_ln79_1_fu_796_p2;
                sext_ln41_2_reg_1175 <= sext_ln41_2_fu_600_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                next_mul_reg_933 <= next_mul_fu_388_p2;
                out_h_reg_941 <= out_h_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_w_reg_986 <= out_w_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_292 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp10_reg_978 <= tmp10_fu_451_p2;
                    zext_ln41_6_reg_957(7 downto 0) <= zext_ln41_6_fu_420_p1(7 downto 0);
                    zext_ln60_4_reg_964(9 downto 0) <= zext_ln60_4_fu_432_p1(9 downto 0);
                    zext_ln79_6_reg_971(9 downto 0) <= zext_ln79_6_fu_444_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln79_4_reg_834(7 downto 6) <= "00";
    zext_ln79_reg_839(10 downto 6) <= "00000";
    zext_ln103_reg_844(9 downto 6) <= "0000";
    zext_ln103_2_cast_reg_850(7 downto 6) <= "00";
    zext_ln103_3_reg_855(6 downto 5) <= "00";
    zext_ln103_1_cast_reg_860(10 downto 5) <= "000000";
    zext_ln41_6_reg_957(10 downto 8) <= "000";
    zext_ln60_4_reg_964(10) <= '0';
    zext_ln79_6_reg_971(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln20_fu_338_p2, ap_CS_fsm_state4, icmp_ln21_fu_393_p2, ap_CS_fsm_state6, icmp_ln22_fu_456_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_393_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_456_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln103_10_fu_732_p2 <= std_logic_vector(unsigned(trunc_ln5_fu_705_p4) + unsigned(trunc_ln4_reg_1225));
    add_ln103_11_fu_737_p2 <= std_logic_vector(unsigned(add_ln103_9_reg_1235) + unsigned(add_ln103_10_fu_732_p2));
    add_ln103_12_fu_699_p2 <= std_logic_vector(unsigned(trunc_ln7_fu_675_p4) + unsigned(trunc_ln6_fu_666_p4));
    add_ln103_13_fu_742_p2 <= std_logic_vector(unsigned(trunc_ln101_2_fu_723_p4) + unsigned(trunc_ln9_fu_714_p4));
    add_ln103_14_fu_748_p2 <= std_logic_vector(unsigned(trunc_ln8_reg_1230) + unsigned(add_ln103_13_fu_742_p2));
    add_ln103_15_fu_753_p2 <= std_logic_vector(unsigned(add_ln103_12_reg_1240) + unsigned(add_ln103_14_reg_1250));
    add_ln103_2_fu_757_p2 <= std_logic_vector(unsigned(add_ln103_11_reg_1245) + unsigned(add_ln103_15_fu_753_p2));
    add_ln103_9_fu_693_p2 <= std_logic_vector(unsigned(trunc_ln92_2_fu_648_p4) + unsigned(trunc_ln_fu_639_p4));
    add_ln103_fu_491_p2 <= std_logic_vector(unsigned(zext_ln41_7_fu_467_p1) + unsigned(tmp10_reg_978));
    add_ln20_5_fu_333_p2 <= std_logic_vector(unsigned(phi_mul2_reg_230) + unsigned(zext_ln79_4_reg_834));
    add_ln20_fu_328_p2 <= std_logic_vector(unsigned(phi_mul5_reg_241) + unsigned(zext_ln103_3_reg_855));
    add_ln41_1_fu_476_p2 <= std_logic_vector(unsigned(zext_ln41_6_reg_957) + unsigned(add_ln41_fu_471_p2));
    add_ln41_fu_471_p2 <= std_logic_vector(unsigned(zext_ln41_7_fu_467_p1) + unsigned(mul_ln41_1_reg_893));
    add_ln47_2_fu_368_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln41_reg_900));
    add_ln47_3_fu_500_p2 <= std_logic_vector(unsigned(zext_ln41_6_reg_957) + unsigned(add_ln47_4_reg_1002));
    add_ln47_4_fu_481_p2 <= std_logic_vector(unsigned(zext_ln41_7_fu_467_p1) + unsigned(add_ln47_reg_908));
    add_ln47_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(mul_ln41_1_reg_893));
    add_ln53_2_fu_486_p2 <= std_logic_vector(unsigned(zext_ln41_7_fu_467_p1) + unsigned(add_ln53_reg_918));
    add_ln53_3_fu_504_p2 <= std_logic_vector(unsigned(zext_ln41_6_reg_957) + unsigned(add_ln53_2_reg_1009));
    add_ln53_fu_373_p2 <= std_logic_vector(unsigned(ap_const_lv11_2) + unsigned(mul_ln41_1_reg_893));
    add_ln60_3_fu_516_p2 <= std_logic_vector(unsigned(zext_ln60_4_reg_964) + unsigned(add_ln41_reg_991));
    add_ln60_fu_383_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln41_reg_900));
    add_ln66_fu_520_p2 <= std_logic_vector(unsigned(zext_ln60_4_reg_964) + unsigned(add_ln47_4_reg_1002));
    add_ln72_fu_524_p2 <= std_logic_vector(unsigned(zext_ln60_4_reg_964) + unsigned(add_ln53_2_reg_1009));
    add_ln79_1_fu_408_p2 <= std_logic_vector(unsigned(out_h_0_reg_253) + unsigned(ap_const_lv4_2));
    add_ln79_fu_528_p2 <= std_logic_vector(unsigned(zext_ln79_6_reg_971) + unsigned(add_ln41_reg_991));
    add_ln85_fu_532_p2 <= std_logic_vector(unsigned(zext_ln79_6_reg_971) + unsigned(add_ln47_4_reg_1002));
    add_ln91_fu_536_p2 <= std_logic_vector(unsigned(zext_ln79_6_reg_971) + unsigned(add_ln53_2_reg_1009));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln20_fu_338_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_338_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln20_fu_338_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_338_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_64_fu_324_p1 <= output_height(4 - 1 downto 0);
    empty_fu_320_p1 <= output_width(4 - 1 downto 0);
    icmp_ln20_fu_338_p2 <= "1" when (out_d_0_reg_219 = ap_const_lv4_8) else "0";
    icmp_ln21_fu_393_p2 <= "1" when (out_h_0_reg_253 = empty_64_reg_870) else "0";
    icmp_ln22_fu_456_p2 <= "1" when (out_w_0_reg_276 = empty_reg_865) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln41_8_fu_496_p1, zext_ln47_fu_508_p1, zext_ln66_fu_544_p1, zext_ln79_3_fu_552_p1, zext_ln91_fu_592_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= zext_ln91_fu_592_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln79_3_fu_552_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= zext_ln66_fu_544_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln47_fu_508_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln41_8_fu_496_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, zext_ln53_fu_512_p1, zext_ln60_3_fu_540_p1, zext_ln72_fu_548_p1, zext_ln85_fu_588_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= zext_ln85_fu_588_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= zext_ln72_fu_548_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= zext_ln60_3_fu_540_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= zext_ln53_fu_512_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    kernel1_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel1_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel1_ce0 <= ap_const_logic_1;
        else 
            kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel2_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel2_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel2_ce0 <= ap_const_logic_1;
        else 
            kernel2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln41_1_fu_354_p0 <= mul_ln41_1_fu_354_p00(8 - 1 downto 0);
    mul_ln41_1_fu_354_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul2_reg_230),11));
    mul_ln41_1_fu_354_p1 <= zext_ln79_reg_839(6 - 1 downto 0);
    mul_ln41_1_fu_354_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln41_1_fu_354_p0) * unsigned(mul_ln41_1_fu_354_p1), 11));
    mul_ln41_fu_766_p0 <= sext_ln41_2_fu_600_p1(16 - 1 downto 0);
    mul_ln47_fu_772_p0 <= sext_ln47_2_fu_607_p1(16 - 1 downto 0);
    mul_ln53_fu_778_p0 <= sext_ln53_2_fu_613_p1(16 - 1 downto 0);
    mul_ln60_1_fu_802_p0 <= sext_ln60_2_fu_628_p1(16 - 1 downto 0);
    mul_ln60_fu_427_p0 <= zext_ln103_reg_844(6 - 1 downto 0);
    mul_ln60_fu_427_p1 <= mul_ln60_fu_427_p10(4 - 1 downto 0);
    mul_ln60_fu_427_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_941),10));
    mul_ln60_fu_427_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln60_fu_427_p0) * unsigned(mul_ln60_fu_427_p1), 10));
    mul_ln66_fu_784_p0 <= sext_ln41_2_fu_600_p1(16 - 1 downto 0);
    mul_ln72_fu_790_p0 <= sext_ln47_2_fu_607_p1(16 - 1 downto 0);
    mul_ln79_1_fu_796_p0 <= sext_ln53_2_fu_613_p1(16 - 1 downto 0);
    mul_ln79_fu_439_p0 <= zext_ln103_reg_844(6 - 1 downto 0);
    mul_ln79_fu_439_p1 <= mul_ln79_fu_439_p10(4 - 1 downto 0);
    mul_ln79_fu_439_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_reg_947),10));
    mul_ln79_fu_439_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln79_fu_439_p0) * unsigned(mul_ln79_fu_439_p1), 10));
    mul_ln85_fu_808_p0 <= sext_ln60_2_fu_628_p1(16 - 1 downto 0);
    mul_ln91_fu_814_p0 <= sext_ln41_2_reg_1175(16 - 1 downto 0);
    next_mul_fu_388_p2 <= std_logic_vector(unsigned(zext_ln103_2_cast_reg_850) + unsigned(phi_mul_reg_264));
    out_d_fu_344_p2 <= std_logic_vector(unsigned(out_d_0_reg_219) + unsigned(ap_const_lv4_1));
    out_h_fu_398_p2 <= std_logic_vector(unsigned(out_h_0_reg_253) + unsigned(ap_const_lv4_1));
    out_w_fu_461_p2 <= std_logic_vector(unsigned(out_w_0_reg_276) + unsigned(ap_const_lv4_1));
    output_r_address0 <= zext_ln103_5_fu_762_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln103_2_reg_1255;

    output_r_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln41_2_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_1135),30));

        sext_ln47_2_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_reg_1140),30));

        sext_ln53_2_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_1145),30));

        sext_ln60_2_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_1150),30));

    tmp10_fu_451_p0 <= zext_ln103_1_cast_reg_860(5 - 1 downto 0);
    tmp10_fu_451_p1 <= tmp10_fu_451_p10(7 - 1 downto 0);
    tmp10_fu_451_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_952),11));
    tmp10_fu_451_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_fu_451_p0) * unsigned(tmp10_fu_451_p1), 11));
    tmp_fu_414_p2 <= std_logic_vector(unsigned(zext_ln41_5_fu_404_p1) + unsigned(phi_mul5_reg_241));
    trunc_ln101_2_fu_723_p4 <= mul_ln91_reg_1220(29 downto 14);
    trunc_ln41_fu_359_p1 <= out_d_0_reg_219(2 - 1 downto 0);
    trunc_ln5_fu_705_p4 <= mul_ln60_1_reg_1210(29 downto 14);
    trunc_ln6_fu_666_p4 <= mul_ln66_reg_1195(29 downto 14);
    trunc_ln7_fu_675_p4 <= mul_ln72_reg_1200(29 downto 14);
    trunc_ln92_2_fu_648_p4 <= mul_ln41_reg_1180(29 downto 14);
    trunc_ln9_fu_714_p4 <= mul_ln85_reg_1215(29 downto 14);
    trunc_ln_fu_639_p4 <= mul_ln47_reg_1185(29 downto 14);
    xor_ln53_fu_378_p2 <= (trunc_ln41_reg_900 xor ap_const_lv2_2);
    zext_ln103_1_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln103_2_cast_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),8));
    zext_ln103_3_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
    zext_ln103_5_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln103_reg_1016),64));
    zext_ln103_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),10));
    zext_ln41_5_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_253),7));
    zext_ln41_6_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_264),11));
    zext_ln41_7_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_276),11));
    zext_ln41_8_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_1_reg_997),64));
    zext_ln47_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_3_reg_1026),64));
    zext_ln53_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_3_reg_1031),64));
    zext_ln60_3_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_3_reg_1046),64));
    zext_ln60_4_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln60_fu_427_p2),11));
    zext_ln66_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln66_reg_1051),64));
    zext_ln72_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_reg_1056),64));
    zext_ln79_3_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_reg_1061),64));
    zext_ln79_4_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),8));
    zext_ln79_6_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln79_fu_439_p2),11));
    zext_ln79_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln85_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_reg_1066),64));
    zext_ln91_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_reg_1071),64));
end behav;
