-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of max_pooling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten39_reg_174 : STD_LOGIC_VECTOR (12 downto 0);
    signal out_d_0_reg_186 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_0_reg_186_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal out_d_0_reg_186_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_0_reg_186_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_0_reg_186_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_209 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_0_reg_209_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal out_h_0_reg_209_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_0_reg_209_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_0_reg_209_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_221 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_233 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln18_reg_703 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_703_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state25_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln18_reg_703_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state26_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln18_reg_703_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal icmp_ln18_reg_703_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_239 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_250_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_652 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln9_fu_266_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln9_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_fu_282_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln28_reg_664 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln28_1_cast4_fu_286_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_1_cast4_reg_670 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_reg_676 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_1_cast_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln34_1_cast_reg_682 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln9_1_fu_309_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln9_1_reg_687 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln20_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln28_fu_324_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln28_reg_697 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln18_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_703_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_703_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_334_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_707 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_707_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_707_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_707_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_707_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln19_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_714 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_714_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_714_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_714_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_714_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_714_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln19_1_fu_345_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln19_1_reg_727 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_fu_351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln28_1_fu_361_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln28_1_reg_738 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln20_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_749 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_749_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_749_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_749_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_749_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_0_0_fu_388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_reg_756 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_fu_393_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln18_reg_761 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln34_12_fu_404_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_12_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_12_reg_766_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_12_reg_766_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_12_reg_766_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_12_reg_766_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_409_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln18_reg_774 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_0_0_mid1_fu_426_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_mid1_reg_779 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln19_1_fu_432_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln19_1_reg_784 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln28_fu_447_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_reg_789 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_reg_789_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_reg_789_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_reg_789_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_reg_789_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_1_fu_455_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_1_reg_796 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln28_1_reg_796_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln19_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_reg_802 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal mul_ln28_2_fu_469_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln28_2_reg_807 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_fu_474_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_813 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_7_fu_486_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_7_reg_818 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_7_reg_818_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_fu_490_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_reg_823 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_reg_823_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_9_fu_501_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_9_reg_829 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_9_reg_829_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_fu_505_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_reg_834 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_reg_834_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_4_fu_518_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln28_4_reg_850 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln28_3_fu_526_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln28_3_reg_855 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_531_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_reg_866 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_reg_866_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_2_fu_536_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_2_reg_872 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_2_reg_872_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_fu_540_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_reg_878 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_reg_878_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_reg_878_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln29_1_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_1_fu_552_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_1_reg_899 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_1_reg_899_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln34_1_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln34_1_reg_915 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln34_fu_577_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln34_reg_921 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln29_2_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp2_fu_586_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_reg_932 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_mid1_fu_599_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_mid1_reg_937 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln29_2_fu_605_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_2_reg_942 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln28_2_fu_615_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln28_2_reg_947 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_635_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln34_reg_957 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter5_state24 : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten39_phi_fu_178_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_190_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_202_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_213_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_225_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln28_8_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln28_10_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_11_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_19_fu_557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_12_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_20_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_9_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_250_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_42_fu_254_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_42_fu_254_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln9_fu_266_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln9_fu_266_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln9_fu_272_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln9_1_fu_275_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln9_2_fu_278_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln9_1_fu_275_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln9_fu_272_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_43_fu_298_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln9_1_fu_309_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln9_1_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_fu_324_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_fu_324_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln28_1_fu_361_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_1_fu_361_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_376_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_3_fu_384_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln28_mid1_fu_415_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_13_fu_422_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln34_8_fu_399_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln28_1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_10_fu_438_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln28_2_fu_469_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln28_2_fu_469_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln28_1_fu_479_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln28_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_3_fu_526_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln28_3_fu_526_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_1_fu_568_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln34_1_fu_568_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln34_fu_577_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln34_fu_577_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_2_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_6_fu_596_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_9_fu_591_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln34_11_fu_610_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_635_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_635_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_635_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_635_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_635_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln28_1_fu_361_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln28_2_fu_469_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln28_3_fu_526_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln28_fu_324_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_1_fu_568_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln34_fu_577_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln9_1_fu_309_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln9_1_fu_309_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln9_fu_266_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln9_fu_266_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component network_mac_muladd_6ns_8ns_4ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    network_mac_muladd_6ns_8ns_4ns_12_1_1_U32 : component network_mac_muladd_6ns_8ns_4ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 8,
        din2_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_635_p0,
        din1 => grp_fu_635_p1,
        din2 => grp_fu_635_p2,
        dout => grp_fu_635_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln18_reg_703 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter5_state24)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter5_state24) and (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter4;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten39_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then 
                indvar_flatten39_reg_174 <= add_ln18_reg_761;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten39_reg_174 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then 
                indvar_flatten_reg_198 <= select_ln19_1_reg_784;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_198 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then 
                out_d_0_reg_186 <= select_ln18_reg_774;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_d_0_reg_186 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703_pp0_iter1_reg = ap_const_lv1_0))) then 
                out_h_0_reg_209 <= select_ln19_reg_802;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_h_0_reg_209 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703_pp0_iter1_reg = ap_const_lv1_0))) then 
                out_w_0_reg_221 <= out_w_reg_813;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_w_0_reg_221 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln18_reg_703_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_703_pp0_iter4_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703_pp0_iter3_reg = ap_const_lv1_0)))) then 
                reg_233 <= input_r_q0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln18_reg_703_pp0_iter2_reg = ap_const_lv1_0))) then 
                reg_233 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_703_pp0_iter4_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703_pp0_iter3_reg = ap_const_lv1_0)))) then 
                reg_239 <= input_r_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln18_reg_703_pp0_iter2_reg = ap_const_lv1_0))) then 
                reg_239 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln18_reg_761 <= add_ln18_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_fu_329_p2 = ap_const_lv1_0))) then
                add_ln19_1_reg_727 <= add_ln19_1_fu_345_p2;
                icmp_ln19_reg_714 <= icmp_ln19_fu_340_p2;
                out_d_reg_707 <= out_d_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln28_1_reg_834 <= add_ln28_1_fu_505_p2;
                add_ln28_reg_823 <= add_ln28_fu_490_p2;
                    zext_ln28_7_reg_818(4 downto 1) <= zext_ln28_7_fu_486_p1(4 downto 1);
                    zext_ln28_9_reg_829(4 downto 1) <= zext_ln28_9_fu_501_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln28_1_reg_834_pp0_iter2_reg <= add_ln28_1_reg_834;
                add_ln28_reg_823_pp0_iter2_reg <= add_ln28_reg_823;
                out_h_reg_749_pp0_iter1_reg <= out_h_reg_749;
                out_h_reg_749_pp0_iter2_reg <= out_h_reg_749_pp0_iter1_reg;
                out_h_reg_749_pp0_iter3_reg <= out_h_reg_749_pp0_iter2_reg;
                out_h_reg_749_pp0_iter4_reg <= out_h_reg_749_pp0_iter3_reg;
                    zext_ln28_7_reg_818_pp0_iter2_reg(4 downto 1) <= zext_ln28_7_reg_818(4 downto 1);
                    zext_ln28_9_reg_829_pp0_iter2_reg(4 downto 1) <= zext_ln28_9_reg_829(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_703_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln28_2_reg_872 <= add_ln28_2_fu_536_p2;
                add_ln28_3_reg_878 <= add_ln28_3_fu_540_p2;
                select_ln29_reg_866 <= select_ln29_fu_531_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln28_2_reg_872_pp0_iter3_reg <= add_ln28_2_reg_872;
                add_ln28_3_reg_878_pp0_iter3_reg <= add_ln28_3_reg_878;
                add_ln28_3_reg_878_pp0_iter4_reg <= add_ln28_3_reg_878_pp0_iter3_reg;
                select_ln29_reg_866_pp0_iter3_reg <= select_ln29_reg_866;
                select_ln34_12_reg_766_pp0_iter1_reg <= select_ln34_12_reg_766;
                select_ln34_12_reg_766_pp0_iter2_reg <= select_ln34_12_reg_766_pp0_iter1_reg;
                select_ln34_12_reg_766_pp0_iter3_reg <= select_ln34_12_reg_766_pp0_iter2_reg;
                select_ln34_12_reg_766_pp0_iter4_reg <= select_ln34_12_reg_766_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_703_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln28_4_reg_850 <= add_ln28_4_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_703_pp0_iter5_reg = ap_const_lv1_0))) then
                add_ln34_reg_957 <= grp_fu_635_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_652 <= empty_fu_250_p1;
                mul_ln9_reg_658 <= mul_ln9_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln18_reg_703 <= icmp_ln18_fu_329_p2;
                icmp_ln18_reg_703_pp0_iter1_reg <= icmp_ln18_reg_703;
                icmp_ln18_reg_703_pp0_iter2_reg <= icmp_ln18_reg_703_pp0_iter1_reg;
                icmp_ln18_reg_703_pp0_iter3_reg <= icmp_ln18_reg_703_pp0_iter2_reg;
                icmp_ln18_reg_703_pp0_iter4_reg <= icmp_ln18_reg_703_pp0_iter3_reg;
                icmp_ln18_reg_703_pp0_iter5_reg <= icmp_ln18_reg_703_pp0_iter4_reg;
                icmp_ln18_reg_703_pp0_iter6_reg <= icmp_ln18_reg_703_pp0_iter5_reg;
                icmp_ln19_reg_714_pp0_iter1_reg <= icmp_ln19_reg_714;
                icmp_ln19_reg_714_pp0_iter2_reg <= icmp_ln19_reg_714_pp0_iter1_reg;
                icmp_ln19_reg_714_pp0_iter3_reg <= icmp_ln19_reg_714_pp0_iter2_reg;
                icmp_ln19_reg_714_pp0_iter4_reg <= icmp_ln19_reg_714_pp0_iter3_reg;
                icmp_ln19_reg_714_pp0_iter5_reg <= icmp_ln19_reg_714_pp0_iter4_reg;
                mul_ln28_reg_697 <= mul_ln28_fu_324_p2;
                mul_ln34_reg_921 <= mul_ln34_fu_577_p2;
                out_d_0_reg_186_pp0_iter1_reg <= out_d_0_reg_186;
                out_d_0_reg_186_pp0_iter2_reg <= out_d_0_reg_186_pp0_iter1_reg;
                out_d_0_reg_186_pp0_iter3_reg <= out_d_0_reg_186_pp0_iter2_reg;
                out_d_0_reg_186_pp0_iter4_reg <= out_d_0_reg_186_pp0_iter3_reg;
                out_d_reg_707_pp0_iter1_reg <= out_d_reg_707;
                out_d_reg_707_pp0_iter2_reg <= out_d_reg_707_pp0_iter1_reg;
                out_d_reg_707_pp0_iter3_reg <= out_d_reg_707_pp0_iter2_reg;
                out_d_reg_707_pp0_iter4_reg <= out_d_reg_707_pp0_iter3_reg;
                select_ln28_1_reg_796_pp0_iter2_reg <= select_ln28_1_reg_796;
                select_ln28_reg_789_pp0_iter2_reg <= select_ln28_reg_789;
                select_ln28_reg_789_pp0_iter3_reg <= select_ln28_reg_789_pp0_iter2_reg;
                select_ln28_reg_789_pp0_iter4_reg <= select_ln28_reg_789_pp0_iter3_reg;
                select_ln28_reg_789_pp0_iter5_reg <= select_ln28_reg_789_pp0_iter4_reg;
                select_ln29_1_reg_899_pp0_iter5_reg <= select_ln29_1_reg_899;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln19_reg_714 = ap_const_lv1_0) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then
                icmp_ln20_1_reg_744 <= icmp_ln20_1_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_ln20_reg_692 <= icmp_ln20_fu_315_p2;
                mul_ln9_1_reg_687 <= mul_ln9_1_fu_309_p2;
                    zext_ln28_1_cast4_reg_670(6 downto 0) <= zext_ln28_1_cast4_fu_286_p1(6 downto 0);
                    zext_ln28_reg_664(6 downto 0) <= zext_ln28_fu_282_p1(6 downto 0);
                    zext_ln34_1_cast_reg_682(5 downto 0) <= zext_ln34_1_cast_fu_294_p1(5 downto 0);
                    zext_ln34_reg_676(5 downto 0) <= zext_ln34_fu_290_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_703_pp0_iter3_reg = ap_const_lv1_0))) then
                icmp_ln29_1_reg_894 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln18_reg_703_pp0_iter4_reg = ap_const_lv1_0))) then
                icmp_ln29_2_reg_927 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703_pp0_iter2_reg = ap_const_lv1_0))) then
                icmp_ln29_reg_861 <= grp_fu_244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then
                mul_ln28_1_reg_738 <= mul_ln28_1_fu_361_p2;
                select_ln34_reg_732 <= select_ln34_fu_351_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_703_pp0_iter1_reg = ap_const_lv1_0))) then
                mul_ln28_2_reg_807 <= mul_ln28_2_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703_pp0_iter2_reg = ap_const_lv1_0))) then
                mul_ln28_3_reg_855 <= mul_ln28_3_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703_pp0_iter4_reg = ap_const_lv1_0))) then
                mul_ln34_1_reg_915 <= mul_ln34_1_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                out_h_0_reg_209_pp0_iter1_reg <= out_h_0_reg_209;
                out_h_0_reg_209_pp0_iter2_reg <= out_h_0_reg_209_pp0_iter1_reg;
                out_h_0_reg_209_pp0_iter3_reg <= out_h_0_reg_209_pp0_iter2_reg;
                out_h_0_reg_209_pp0_iter4_reg <= out_h_0_reg_209_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then
                out_h_reg_749 <= out_h_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703_pp0_iter1_reg = ap_const_lv1_0))) then
                out_w_reg_813 <= out_w_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then
                select_ln18_reg_774 <= select_ln18_fu_409_p3;
                select_ln19_1_reg_784 <= select_ln19_1_fu_432_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then
                select_ln19_reg_802 <= select_ln19_fu_461_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then
                select_ln28_1_reg_796 <= select_ln28_1_fu_455_p3;
                select_ln28_reg_789 <= select_ln28_fu_447_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_703_pp0_iter5_reg = ap_const_lv1_0))) then
                select_ln28_2_reg_947 <= select_ln28_2_fu_615_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_703_pp0_iter3_reg = ap_const_lv1_0))) then
                select_ln29_1_reg_899 <= select_ln29_1_fu_552_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_703_pp0_iter5_reg = ap_const_lv1_0))) then
                select_ln29_2_reg_942 <= select_ln29_2_fu_605_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then
                select_ln34_12_reg_766 <= select_ln34_12_fu_404_p3;
                tmp_0_0_mid1_reg_779 <= tmp_0_0_mid1_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln34_12_reg_766_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_703_pp0_iter5_reg = ap_const_lv1_0))) then
                tmp2_mid1_reg_937 <= tmp2_mid1_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (select_ln34_12_reg_766_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln19_reg_714_pp0_iter5_reg = ap_const_lv1_0))) then
                tmp2_reg_932 <= tmp2_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln19_reg_714 = ap_const_lv1_0))) then
                tmp_0_0_reg_756 <= tmp_0_0_fu_388_p2;
            end if;
        end if;
    end process;
    zext_ln28_reg_664(8 downto 7) <= "00";
    zext_ln28_1_cast4_reg_670(13 downto 7) <= "0000000";
    zext_ln34_reg_676(7 downto 6) <= "00";
    zext_ln34_1_cast_reg_682(11 downto 6) <= "000000";
    zext_ln28_7_reg_818(0) <= '0';
    zext_ln28_7_reg_818(13 downto 5) <= "000000000";
    zext_ln28_7_reg_818_pp0_iter2_reg(0) <= '0';
    zext_ln28_7_reg_818_pp0_iter2_reg(13 downto 5) <= "000000000";
    zext_ln28_9_reg_829(0) <= '1';
    zext_ln28_9_reg_829(13 downto 5) <= "000000000";
    zext_ln28_9_reg_829_pp0_iter2_reg(0) <= '1';
    zext_ln28_9_reg_829_pp0_iter2_reg(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln18_fu_393_p2 <= std_logic_vector(unsigned(indvar_flatten39_reg_174) + unsigned(ap_const_lv13_1));
    add_ln19_1_fu_345_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_202_p4) + unsigned(ap_const_lv8_1));
    add_ln28_1_fu_505_p2 <= std_logic_vector(unsigned(mul_ln28_2_reg_807) + unsigned(zext_ln28_9_fu_501_p1));
    add_ln28_2_fu_536_p2 <= std_logic_vector(unsigned(mul_ln28_3_reg_855) + unsigned(zext_ln28_7_reg_818_pp0_iter2_reg));
    add_ln28_3_fu_540_p2 <= std_logic_vector(unsigned(mul_ln28_3_reg_855) + unsigned(zext_ln28_9_reg_829_pp0_iter2_reg));
    add_ln28_4_fu_518_p2 <= std_logic_vector(unsigned(select_ln28_1_reg_796_pp0_iter2_reg) + unsigned(ap_const_lv9_1));
    add_ln28_fu_490_p2 <= std_logic_vector(unsigned(mul_ln28_2_reg_807) + unsigned(zext_ln28_7_fu_486_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state29 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter5_state24_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter5_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter5_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten39_phi_fu_178_p4_assign_proc : process(indvar_flatten39_reg_174, ap_CS_fsm_pp0_stage0, icmp_ln18_reg_703, add_ln18_reg_761, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten39_phi_fu_178_p4 <= add_ln18_reg_761;
        else 
            ap_phi_mux_indvar_flatten39_phi_fu_178_p4 <= indvar_flatten39_reg_174;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_202_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, indvar_flatten_reg_198, icmp_ln18_reg_703, select_ln19_1_reg_784, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_202_p4 <= select_ln19_1_reg_784;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_202_p4 <= indvar_flatten_reg_198;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_190_p4_assign_proc : process(out_d_0_reg_186, ap_CS_fsm_pp0_stage0, icmp_ln18_reg_703, select_ln18_reg_774, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703 = ap_const_lv1_0))) then 
            ap_phi_mux_out_d_0_phi_fu_190_p4 <= select_ln18_reg_774;
        else 
            ap_phi_mux_out_d_0_phi_fu_190_p4 <= out_d_0_reg_186;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_213_p4_assign_proc : process(out_h_0_reg_209, ap_CS_fsm_pp0_stage1, icmp_ln18_reg_703_pp0_iter1_reg, select_ln19_reg_802, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_703_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_out_h_0_phi_fu_213_p4 <= select_ln19_reg_802;
        else 
            ap_phi_mux_out_h_0_phi_fu_213_p4 <= out_h_0_reg_209;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_225_p4_assign_proc : process(out_w_0_reg_221, ap_CS_fsm_pp0_stage2, icmp_ln18_reg_703_pp0_iter1_reg, ap_enable_reg_pp0_iter1, out_w_reg_813, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln18_reg_703_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_out_w_0_phi_fu_225_p4 <= out_w_reg_813;
        else 
            ap_phi_mux_out_w_0_phi_fu_225_p4 <= out_w_0_reg_221;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_42_fu_254_p0 <= output_height;
    empty_42_fu_254_p1 <= empty_42_fu_254_p0(4 - 1 downto 0);
    empty_43_fu_298_p1 <= output_depth(5 - 1 downto 0);
    empty_fu_250_p0 <= output_width;
    empty_fu_250_p1 <= empty_fu_250_p0(4 - 1 downto 0);
    grp_fu_244_p2 <= "1" when (signed(reg_233) < signed(reg_239)) else "0";
    grp_fu_635_p0 <= zext_ln34_1_cast_reg_682(6 - 1 downto 0);
    grp_fu_635_p1 <= grp_fu_635_p10(8 - 1 downto 0);
    grp_fu_635_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_2_reg_947),12));
    grp_fu_635_p2 <= grp_fu_635_p20(4 - 1 downto 0);
    grp_fu_635_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_reg_789_pp0_iter5_reg),12));
    icmp_ln18_fu_329_p2 <= "1" when (ap_phi_mux_indvar_flatten39_phi_fu_178_p4 = mul_ln9_1_reg_687) else "0";
    icmp_ln19_fu_340_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_202_p4 = mul_ln9_reg_658) else "0";
    icmp_ln20_1_fu_366_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_225_p4 = empty_reg_652) else "0";
    icmp_ln20_fu_315_p2 <= "1" when (empty_reg_652 = ap_const_lv4_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, zext_ln28_10_fu_514_p1, zext_ln29_fu_544_p1, zext_ln29_19_fu_557_p1, zext_ln29_20_fu_621_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln29_20_fu_621_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln29_19_fu_557_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln29_fu_544_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln28_10_fu_514_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln28_8_fu_510_p1, ap_block_pp0_stage3, zext_ln28_11_fu_548_p1, zext_ln28_12_fu_561_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln28_12_fu_561_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln28_11_fu_548_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln28_8_fu_510_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_1_fu_361_p0 <= mul_ln28_1_fu_361_p00(5 - 1 downto 0);
    mul_ln28_1_fu_361_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_707),9));
    mul_ln28_1_fu_361_p1 <= zext_ln28_reg_664(7 - 1 downto 0);
    mul_ln28_1_fu_361_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln28_1_fu_361_p0) * unsigned(mul_ln28_1_fu_361_p1), 9));
    mul_ln28_2_fu_469_p0 <= zext_ln28_1_cast4_reg_670(7 - 1 downto 0);
    mul_ln28_2_fu_469_p1 <= mul_ln28_2_fu_469_p10(9 - 1 downto 0);
    mul_ln28_2_fu_469_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_reg_796),14));
    mul_ln28_2_fu_469_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln28_2_fu_469_p0) * unsigned(mul_ln28_2_fu_469_p1), 14));
    mul_ln28_3_fu_526_p0 <= zext_ln28_1_cast4_reg_670(7 - 1 downto 0);
    mul_ln28_3_fu_526_p1 <= mul_ln28_3_fu_526_p10(9 - 1 downto 0);
    mul_ln28_3_fu_526_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_4_reg_850),14));
    mul_ln28_3_fu_526_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln28_3_fu_526_p0) * unsigned(mul_ln28_3_fu_526_p1), 14));
    mul_ln28_fu_324_p0 <= mul_ln28_fu_324_p00(5 - 1 downto 0);
    mul_ln28_fu_324_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_190_p4),9));
    mul_ln28_fu_324_p1 <= zext_ln28_reg_664(7 - 1 downto 0);
    mul_ln28_fu_324_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln28_fu_324_p0) * unsigned(mul_ln28_fu_324_p1), 9));
    mul_ln34_1_fu_568_p0 <= mul_ln34_1_fu_568_p00(5 - 1 downto 0);
    mul_ln34_1_fu_568_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_707_pp0_iter4_reg),8));
    mul_ln34_1_fu_568_p1 <= zext_ln34_reg_676(6 - 1 downto 0);
    mul_ln34_1_fu_568_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln34_1_fu_568_p0) * unsigned(mul_ln34_1_fu_568_p1), 8));
    mul_ln34_fu_577_p0 <= mul_ln34_fu_577_p00(5 - 1 downto 0);
    mul_ln34_fu_577_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_186_pp0_iter4_reg),8));
    mul_ln34_fu_577_p1 <= zext_ln34_reg_676(6 - 1 downto 0);
    mul_ln34_fu_577_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln34_fu_577_p0) * unsigned(mul_ln34_fu_577_p1), 8));
    mul_ln9_1_fu_309_p0 <= mul_ln9_1_fu_309_p00(5 - 1 downto 0);
    mul_ln9_1_fu_309_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_43_fu_298_p1),13));
    mul_ln9_1_fu_309_p1 <= mul_ln9_1_fu_309_p10(8 - 1 downto 0);
    mul_ln9_1_fu_309_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln9_reg_658),13));
    mul_ln9_1_fu_309_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln9_1_fu_309_p0) * unsigned(mul_ln9_1_fu_309_p1), 13));
    mul_ln9_fu_266_p0 <= mul_ln9_fu_266_p00(4 - 1 downto 0);
    mul_ln9_fu_266_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_42_fu_254_p1),8));
    mul_ln9_fu_266_p1 <= mul_ln9_fu_266_p10(4 - 1 downto 0);
    mul_ln9_fu_266_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_250_p1),8));
    mul_ln9_fu_266_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln9_fu_266_p0) * unsigned(mul_ln9_fu_266_p1), 8));
    or_ln28_1_fu_443_p2 <= (select_ln34_12_reg_766 or icmp_ln19_reg_714);
    or_ln28_fu_495_p2 <= (shl_ln28_1_fu_479_p3 or ap_const_lv5_1);
    out_d_fu_334_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_d_0_phi_fu_190_p4) + unsigned(ap_const_lv5_1));
    out_h_fu_371_p2 <= std_logic_vector(unsigned(select_ln34_reg_732) + unsigned(ap_const_lv4_1));
    out_w_fu_474_p2 <= std_logic_vector(unsigned(select_ln28_reg_789) + unsigned(ap_const_lv4_1));
    output_r_address0 <= zext_ln34_9_fu_631_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= reg_233;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter6, icmp_ln18_reg_703_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln18_reg_703_pp0_iter6_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln18_fu_409_p3 <= 
        out_d_reg_707 when (icmp_ln19_reg_714(0) = '1') else 
        out_d_0_reg_186;
    select_ln19_1_fu_432_p3 <= 
        ap_const_lv8_1 when (icmp_ln19_reg_714(0) = '1') else 
        add_ln19_1_reg_727;
    select_ln19_fu_461_p3 <= 
        out_h_reg_749 when (select_ln34_12_reg_766(0) = '1') else 
        select_ln34_reg_732;
    select_ln28_1_fu_455_p3 <= 
        tmp_0_0_mid1_reg_779 when (select_ln34_12_reg_766(0) = '1') else 
        select_ln34_10_fu_438_p3;
    select_ln28_2_fu_615_p3 <= 
        tmp2_mid1_reg_937 when (select_ln34_12_reg_766_pp0_iter4_reg(0) = '1') else 
        select_ln34_11_fu_610_p3;
    select_ln28_fu_447_p3 <= 
        ap_const_lv4_0 when (or_ln28_1_fu_443_p2(0) = '1') else 
        out_w_0_reg_221;
    select_ln29_1_fu_552_p3 <= 
        add_ln28_2_reg_872_pp0_iter3_reg when (icmp_ln29_1_reg_894(0) = '1') else 
        select_ln29_reg_866_pp0_iter3_reg;
    select_ln29_2_fu_605_p3 <= 
        add_ln28_3_reg_878_pp0_iter4_reg when (icmp_ln29_2_reg_927(0) = '1') else 
        select_ln29_1_reg_899_pp0_iter5_reg;
    select_ln29_fu_531_p3 <= 
        add_ln28_1_reg_834_pp0_iter2_reg when (icmp_ln29_reg_861(0) = '1') else 
        add_ln28_reg_823_pp0_iter2_reg;
    select_ln34_10_fu_438_p3 <= 
        mul_ln28_1_reg_738 when (icmp_ln19_reg_714(0) = '1') else 
        tmp_0_0_reg_756;
    select_ln34_11_fu_610_p3 <= 
        mul_ln34_1_reg_915 when (icmp_ln19_reg_714_pp0_iter5_reg(0) = '1') else 
        tmp2_reg_932;
    select_ln34_12_fu_404_p3 <= 
        icmp_ln20_reg_692 when (icmp_ln19_reg_714(0) = '1') else 
        icmp_ln20_1_reg_744;
    select_ln34_8_fu_399_p3 <= 
        mul_ln28_1_reg_738 when (icmp_ln19_reg_714(0) = '1') else 
        mul_ln28_reg_697;
    select_ln34_9_fu_591_p3 <= 
        mul_ln34_1_reg_915 when (icmp_ln19_reg_714_pp0_iter5_reg(0) = '1') else 
        mul_ln34_reg_921;
    select_ln34_fu_351_p3 <= 
        ap_const_lv4_0 when (icmp_ln19_reg_714(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_213_p4;
    sext_ln9_1_fu_275_p0 <= output_height;
        sext_ln9_1_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_1_fu_275_p0),6));

        sext_ln9_2_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    sext_ln9_fu_272_p0 <= output_width;
        sext_ln9_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_fu_272_p0),6));

    shl_ln28_1_fu_479_p3 <= (select_ln28_reg_789 & ap_const_lv1_0);
    shl_ln28_mid1_fu_415_p3 <= (out_h_reg_749 & ap_const_lv1_0);
    shl_ln_fu_376_p3 <= (out_h_0_reg_209 & ap_const_lv1_0);
    tmp2_fu_586_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_582_p1) + unsigned(mul_ln34_reg_921));
    tmp2_mid1_fu_599_p2 <= std_logic_vector(unsigned(zext_ln28_6_fu_596_p1) + unsigned(select_ln34_9_fu_591_p3));
    tmp_0_0_fu_388_p2 <= std_logic_vector(unsigned(zext_ln28_3_fu_384_p1) + unsigned(mul_ln28_reg_697));
    tmp_0_0_mid1_fu_426_p2 <= std_logic_vector(unsigned(zext_ln28_13_fu_422_p1) + unsigned(select_ln34_8_fu_399_p3));
    zext_ln28_10_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_reg_834),64));
    zext_ln28_11_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_reg_872),64));
    zext_ln28_12_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_reg_878_pp0_iter3_reg),64));
    zext_ln28_13_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_mid1_fu_415_p3),9));
    zext_ln28_1_cast4_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln9_2_fu_278_p1),14));
    zext_ln28_2_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_209_pp0_iter4_reg),8));
    zext_ln28_3_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_376_p3),9));
    zext_ln28_6_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_749_pp0_iter4_reg),8));
    zext_ln28_7_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_1_fu_479_p3),14));
    zext_ln28_8_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_reg_823),64));
    zext_ln28_9_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln28_fu_495_p2),14));
    zext_ln28_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln29_19_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_1_reg_899),64));
    zext_ln29_20_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_2_reg_942),64));
    zext_ln29_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_reg_866),64));
    zext_ln34_1_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln9_fu_272_p1),12));
    zext_ln34_9_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_reg_957),64));
    zext_ln34_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln9_1_fu_275_p1),8));
end behav;
