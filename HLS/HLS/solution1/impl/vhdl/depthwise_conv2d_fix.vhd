-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv30_3FFFCEF6 : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111100111011110110";
    constant ap_const_lv30_3FFFCE73 : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111100111001110011";
    constant ap_const_lv28_78D : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000011110001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_177 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_182 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_fu_193_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_677 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln79_fu_199_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln79_reg_684 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln41_fu_229_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln41_reg_690 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln60_fu_257_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln60_reg_695 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln79_fu_281_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln79_reg_700 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_fu_299_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_reg_705 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_713 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln41_fu_325_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_reg_718 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln22_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_1_fu_330_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_1_reg_724 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln60_1_fu_336_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln60_1_reg_729 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_1_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln79_1_reg_736 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln103_fu_346_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln103_reg_743 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln53_1_fu_367_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln53_1_reg_758 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln66_fu_388_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln66_reg_773 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_fu_393_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln72_reg_778 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln41_fu_632_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln41_reg_783 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln47_fu_638_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln47_reg_788 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln53_fu_644_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln53_reg_803 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln85_fu_440_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln85_reg_813 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln91_fu_445_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln91_reg_818 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_823 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln103_2_fu_478_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_2_reg_828 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln66_fu_650_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln66_reg_833 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln72_fu_656_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln72_reg_838 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln103_4_fu_522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_4_reg_853 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln79_fu_662_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln79_reg_858 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln103_5_fu_549_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_5_reg_863 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln91_fu_668_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln91_reg_868 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_8_reg_873 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_reg_878 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln103_7_fu_609_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_7_reg_883 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln103_1_fu_619_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_1_reg_888 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal out_h_0_reg_154 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_166 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln41_3_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln53_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln66_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_205_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln41_1_fu_217_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln41_4_fu_213_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_5_fu_225_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1_fu_235_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln60_1_fu_246_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln60_3_fu_242_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln60_4_fu_253_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln79_1_fu_270_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln2_fu_263_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln79_3_fu_277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_fu_287_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl9_cast_fu_295_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_7_fu_321_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_6_fu_317_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln41_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln47_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln53_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln60_1_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln66_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln72_fu_414_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln60_fu_426_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln60_1_fu_430_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln_fu_450_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln92_1_fu_459_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_500_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln97_fu_513_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln93_fu_509_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_3_fu_516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln11_fu_540_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln10_fu_531_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln85_fu_555_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln85_fu_559_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln101_1_fu_594_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln101_fu_591_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln94_fu_588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_6_fu_603_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln103_8_fu_615_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln103_fu_624_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_632_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln47_fu_638_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln53_fu_644_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln66_fu_650_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln72_fu_656_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln79_fu_662_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln91_fu_668_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component network_mul_mul_16s_15s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component network_mul_mul_16s_12ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;



begin
    network_mul_mul_16s_15s_30_1_1_U6 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_177,
        din1 => mul_ln41_fu_632_p1,
        dout => mul_ln41_fu_632_p2);

    network_mul_mul_16s_15s_30_1_1_U7 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_182,
        din1 => mul_ln47_fu_638_p1,
        dout => mul_ln47_fu_638_p2);

    network_mul_mul_16s_12ns_28_1_1_U8 : component network_mul_mul_16s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => reg_177,
        din1 => mul_ln53_fu_644_p1,
        dout => mul_ln53_fu_644_p2);

    network_mul_mul_16s_15s_30_1_1_U9 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_177,
        din1 => mul_ln66_fu_650_p1,
        dout => mul_ln66_fu_650_p2);

    network_mul_mul_16s_15s_30_1_1_U10 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_182,
        din1 => mul_ln72_fu_656_p1,
        dout => mul_ln72_fu_656_p2);

    network_mul_mul_16s_12ns_28_1_1_U11 : component network_mul_mul_16s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => reg_177,
        din1 => mul_ln79_fu_662_p1,
        dout => mul_ln79_fu_662_p2);

    network_mul_mul_16s_15s_30_1_1_U12 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_182,
        din1 => mul_ln91_fu_668_p1,
        dout => mul_ln91_fu_668_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_h_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln22_fu_305_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_154 <= out_h_reg_677;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_154 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_w_0_reg_166 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                out_w_0_reg_166 <= out_w_reg_713;
            end if; 
        end if;
    end process;

    reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_177 <= input_r_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_177 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_182 <= input_r_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_182 <= input_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln103_1_reg_888 <= add_ln103_1_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln103_2_reg_828 <= add_ln103_2_fu_478_p2;
                add_ln85_reg_813 <= add_ln85_fu_440_p2;
                add_ln91_reg_818 <= add_ln91_fu_445_p2;
                mul_ln53_reg_803 <= mul_ln53_fu_644_p2;
                tmp_7_reg_823 <= sub_ln60_1_fu_430_p2(16 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln103_4_reg_853 <= add_ln103_4_fu_522_p2;
                mul_ln66_reg_833 <= mul_ln66_fu_650_p2;
                mul_ln72_reg_838 <= mul_ln72_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln103_5_reg_863 <= add_ln103_5_fu_549_p2;
                mul_ln79_reg_858 <= mul_ln79_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln103_7_reg_883 <= add_ln103_7_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln103_reg_743 <= add_ln103_fu_346_p2;
                add_ln41_reg_718 <= add_ln41_fu_325_p2;
                add_ln47_1_reg_724 <= add_ln47_1_fu_330_p2;
                add_ln60_1_reg_729 <= add_ln60_1_fu_336_p2;
                add_ln79_1_reg_736 <= add_ln79_1_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln53_1_reg_758 <= add_ln53_1_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln66_reg_773 <= add_ln66_fu_388_p2;
                add_ln72_reg_778 <= add_ln72_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln79_reg_684 <= add_ln79_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln41_reg_783 <= mul_ln41_fu_632_p2;
                mul_ln47_reg_788 <= mul_ln47_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln91_reg_868 <= mul_ln91_fu_668_p2;
                tmp_8_reg_873 <= mul_ln79_reg_858(27 downto 14);
                tmp_9_reg_878 <= sub_ln85_fu_559_p2(16 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                out_h_reg_677 <= out_h_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_reg_713 <= out_w_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    sub_ln41_reg_690(10 downto 1) <= sub_ln41_fu_229_p2(10 downto 1);
                    sub_ln60_reg_695(10 downto 1) <= sub_ln60_fu_257_p2(10 downto 1);
                    sub_ln79_reg_700(9 downto 1) <= sub_ln79_fu_281_p2(9 downto 1);
                    tmp10_reg_705(10 downto 2) <= tmp10_fu_299_p2(10 downto 2);
            end if;
        end if;
    end process;
    sub_ln41_reg_690(0) <= '0';
    sub_ln60_reg_695(0) <= '0';
    sub_ln79_reg_700(0) <= '0';
    tmp10_reg_705(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln21_fu_187_p2, ap_CS_fsm_state4, icmp_ln22_fu_305_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln21_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln22_fu_305_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln103_1_fu_619_p2 <= std_logic_vector(unsigned(add_ln103_4_reg_853) + unsigned(add_ln103_8_fu_615_p2));
    add_ln103_2_fu_478_p2 <= std_logic_vector(unsigned(trunc_ln_fu_450_p4) + unsigned(trunc_ln92_1_fu_459_p4));
    add_ln103_3_fu_516_p2 <= std_logic_vector(signed(sext_ln97_fu_513_p1) + signed(sext_ln93_fu_509_p1));
    add_ln103_4_fu_522_p2 <= std_logic_vector(unsigned(add_ln103_2_reg_828) + unsigned(add_ln103_3_fu_516_p2));
    add_ln103_5_fu_549_p2 <= std_logic_vector(unsigned(trunc_ln11_fu_540_p4) + unsigned(trunc_ln10_fu_531_p4));
    add_ln103_6_fu_603_p2 <= std_logic_vector(unsigned(trunc_ln101_1_fu_594_p4) + unsigned(sext_ln101_fu_591_p1));
    add_ln103_7_fu_609_p2 <= std_logic_vector(signed(sext_ln94_fu_588_p1) + signed(add_ln103_6_fu_603_p2));
    add_ln103_8_fu_615_p2 <= std_logic_vector(unsigned(add_ln103_5_reg_863) + unsigned(add_ln103_7_reg_883));
    add_ln103_fu_346_p2 <= std_logic_vector(unsigned(zext_ln41_7_fu_321_p1) + unsigned(tmp10_reg_705));
    add_ln41_fu_325_p2 <= std_logic_vector(unsigned(zext_ln41_7_fu_321_p1) + unsigned(sub_ln41_reg_690));
    add_ln47_1_fu_330_p2 <= std_logic_vector(signed(add_ln41_fu_325_p2) + signed(ap_const_lv11_1));
    add_ln53_1_fu_367_p2 <= std_logic_vector(signed(add_ln41_reg_718) + signed(ap_const_lv11_2));
    add_ln60_1_fu_336_p2 <= std_logic_vector(unsigned(zext_ln41_7_fu_321_p1) + unsigned(sub_ln60_reg_695));
    add_ln66_fu_388_p2 <= std_logic_vector(signed(add_ln60_1_reg_729) + signed(ap_const_lv11_1));
    add_ln72_fu_393_p2 <= std_logic_vector(signed(add_ln60_1_reg_729) + signed(ap_const_lv11_2));
    add_ln79_1_fu_341_p2 <= std_logic_vector(unsigned(zext_ln41_6_fu_317_p1) + unsigned(sub_ln79_reg_700));
    add_ln79_fu_199_p2 <= std_logic_vector(unsigned(out_h_0_reg_154) + unsigned(ap_const_lv5_2));
    add_ln85_fu_440_p2 <= std_logic_vector(unsigned(add_ln79_1_reg_736) + unsigned(ap_const_lv10_1));
    add_ln91_fu_445_p2 <= std_logic_vector(unsigned(add_ln79_1_reg_736) + unsigned(ap_const_lv10_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln21_fu_187_p2)
    begin
        if ((((icmp_ln21_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln21_fu_187_p2)
    begin
        if (((icmp_ln21_fu_187_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln21_fu_187_p2 <= "1" when (out_h_0_reg_154 = ap_const_lv5_1C) else "0";
    icmp_ln22_fu_305_p2 <= "1" when (out_w_0_reg_166 = ap_const_lv5_1C) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state5, zext_ln41_3_fu_354_p1, zext_ln53_fu_375_p1, zext_ln66_fu_409_p1, zext_ln79_fu_436_p1, zext_ln91_fu_496_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= zext_ln91_fu_496_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= zext_ln79_fu_436_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln66_fu_409_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln53_fu_375_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= zext_ln41_3_fu_354_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state5, zext_ln47_fu_362_p1, zext_ln60_fu_383_p1, zext_ln72_fu_417_p1, zext_ln85_fu_492_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= zext_ln85_fu_492_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address1 <= zext_ln72_fu_417_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address1 <= zext_ln60_fu_383_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address1 <= zext_ln47_fu_362_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln41_fu_632_p1 <= ap_const_lv30_3FFFCEF6(15 - 1 downto 0);
    mul_ln47_fu_638_p1 <= ap_const_lv30_3FFFCE73(15 - 1 downto 0);
    mul_ln53_fu_644_p1 <= ap_const_lv28_78D(12 - 1 downto 0);
    mul_ln66_fu_650_p1 <= ap_const_lv30_3FFFCEF6(15 - 1 downto 0);
    mul_ln72_fu_656_p1 <= ap_const_lv30_3FFFCE73(15 - 1 downto 0);
    mul_ln79_fu_662_p1 <= ap_const_lv28_78D(12 - 1 downto 0);
    mul_ln91_fu_668_p1 <= ap_const_lv30_3FFFCEF6(15 - 1 downto 0);
    out_h_fu_193_p2 <= std_logic_vector(unsigned(out_h_0_reg_154) + unsigned(ap_const_lv5_1));
    out_w_fu_311_p2 <= std_logic_vector(unsigned(out_w_0_reg_166) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln103_fu_627_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln103_1_reg_888;

    output_r_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl9_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_287_p3),11));
    p_shl9_fu_287_p3 <= (out_h_0_reg_154 & ap_const_lv2_0);
        sext_ln101_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_878),16));

        sext_ln103_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln103_reg_743),32));

        sext_ln41_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln41_reg_718),32));

        sext_ln47_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_1_reg_724),32));

        sext_ln53_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln53_1_reg_758),32));

        sext_ln60_1_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_1_reg_729),32));

        sext_ln60_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_182),17));

        sext_ln66_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln66_reg_773),32));

        sext_ln72_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln72_reg_778),32));

        sext_ln85_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_177),17));

        sext_ln93_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_500_p4),16));

        sext_ln94_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_reg_873),16));

        sext_ln97_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_823),16));

    shl_ln1_fu_235_p3 <= (out_h_reg_677 & ap_const_lv5_0);
    shl_ln2_fu_263_p3 <= (add_ln79_reg_684 & ap_const_lv5_0);
    shl_ln41_1_fu_217_p3 <= (out_h_0_reg_154 & ap_const_lv1_0);
    shl_ln60_1_fu_246_p3 <= (out_h_reg_677 & ap_const_lv1_0);
    shl_ln79_1_fu_270_p3 <= (add_ln79_reg_684 & ap_const_lv1_0);
    shl_ln_fu_205_p3 <= (out_h_0_reg_154 & ap_const_lv5_0);
    sub_ln41_fu_229_p2 <= std_logic_vector(unsigned(zext_ln41_4_fu_213_p1) - unsigned(zext_ln41_5_fu_225_p1));
    sub_ln60_1_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln60_fu_426_p1));
    sub_ln60_fu_257_p2 <= std_logic_vector(unsigned(zext_ln60_3_fu_242_p1) - unsigned(zext_ln60_4_fu_253_p1));
    sub_ln79_fu_281_p2 <= std_logic_vector(unsigned(shl_ln2_fu_263_p3) - unsigned(zext_ln79_3_fu_277_p1));
    sub_ln85_fu_559_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln85_fu_555_p1));
    tmp10_fu_299_p2 <= std_logic_vector(unsigned(zext_ln41_4_fu_213_p1) - unsigned(p_shl9_cast_fu_295_p1));
    tmp_fu_500_p4 <= mul_ln53_reg_803(27 downto 14);
    trunc_ln101_1_fu_594_p4 <= mul_ln91_reg_868(29 downto 14);
    trunc_ln10_fu_531_p4 <= mul_ln66_reg_833(29 downto 14);
    trunc_ln11_fu_540_p4 <= mul_ln72_reg_838(29 downto 14);
    trunc_ln92_1_fu_459_p4 <= mul_ln41_reg_783(29 downto 14);
    trunc_ln_fu_450_p4 <= mul_ln47_reg_788(29 downto 14);
    zext_ln103_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln103_fu_624_p1),64));
    zext_ln41_3_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln41_fu_351_p1),64));
    zext_ln41_4_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_205_p3),11));
    zext_ln41_5_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_1_fu_217_p3),11));
    zext_ln41_6_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_166),10));
    zext_ln41_7_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_166),11));
    zext_ln47_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_fu_359_p1),64));
    zext_ln53_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln53_fu_372_p1),64));
    zext_ln60_3_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_235_p3),11));
    zext_ln60_4_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln60_1_fu_246_p3),11));
    zext_ln60_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln60_1_fu_380_p1),64));
    zext_ln66_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln66_fu_406_p1),64));
    zext_ln72_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln72_fu_414_p1),64));
    zext_ln79_3_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln79_1_fu_270_p3),10));
    zext_ln79_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_reg_736),64));
    zext_ln85_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_reg_813),64));
    zext_ln91_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln91_reg_818),64));
end behav;
