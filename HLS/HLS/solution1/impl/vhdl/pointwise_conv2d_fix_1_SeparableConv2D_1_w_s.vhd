-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity pointwise_conv2d_fix_1_SeparableConv2D_1_w_s_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of pointwise_conv2d_fix_1_SeparableConv2D_1_w_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "001111011100110", 1 => "000011011010111", 2 => "000001000111011", 
    3 => "001010010101100", 4 => "111001011100010", 5 => "000001100100001", 
    6 => "010001101001111", 7 => "111010110111010", 8 => "111110110000100", 
    9 => "101010111110111", 10 => "111001110100100", 11 => "111011010001101", 
    12 => "111110010111101", 13 => "111110101111100", 14 => "111010000111011", 
    15 => "111111111101011", 16 => "111101011110110", 17 => "000010101100110", 
    18 => "110101111100010", 19 => "001010111001110", 20 => "111101001110100", 
    21 => "000000001000100", 22 => "111011111111111", 23 => "000101001110000", 
    24 => "111000011101011", 25 => "111010000111011", 26 => "000111000101011", 
    27 => "111110000100001", 28 => "110100100101111", 29 => "111110110101100", 
    30 => "111011000101101", 31 => "000111000110010", 32 => "101111010011010", 
    33 => "000001010101001", 34 => "000010111100001", 35 => "001011001001101", 
    36 => "000101110110010", 37 => "111100110010100", 38 => "001100110001010", 
    39 => "000100100110001", 40 => "111010111110010", 41 => "111101101101110", 
    42 => "110110111001011", 43 => "111111011000011", 44 => "111110111011101", 
    45 => "000100100101111", 46 => "000000010110001", 47 => "000010010111011", 
    48 => "111101111110011", 49 => "000010111100101", 50 => "111110001000011", 
    51 => "000011001110010", 52 => "101111111001010", 53 => "000100111111010", 
    54 => "111110001111011", 55 => "111001110011010", 56 => "111011101110000", 
    57 => "111101001100100", 58 => "110101001110000", 59 => "000101000000010", 
    60 => "111110111000101", 61 => "111000100000100", 62 => "111100001100111", 
    63 => "000101110010001", 64 => "111010111100010", 65 => "000011001011111", 
    66 => "111110101011101", 67 => "000000111010101", 68 => "000100100001010", 
    69 => "111110110000101", 70 => "110011111110011", 71 => "000101001110011", 
    72 => "111001100111111", 73 => "111110011011110", 74 => "110111110111010", 
    75 => "000111011000100", 76 => "111101111101110", 77 => "000011011001000", 
    78 => "000100100010010", 79 => "111010011101101", 80 => "111111110011111", 
    81 => "000100001100111", 82 => "000011000011110", 83 => "111000111001001", 
    84 => "000001010010100", 85 => "001100011011001", 86 => "000001010000010", 
    87 => "000011100100111", 88 => "111000101001101", 89 => "111110100110101", 
    90 => "111111101100100", 91 => "111111101110110", 92 => "101011101000010", 
    93 => "111101010010100", 94 => "000111100100110", 95 => "111100100110010", 
    96 => "111111100101000", 97 => "000100100001111", 98 => "000001011110001", 
    99 => "111010111011010", 100 => "111101101110110", 101 => "111110110110010", 
    102 => "000111111101011", 103 => "000101101001110", 104 => "000011101110011", 
    105 => "001000101100001", 106 => "001001000101111", 107 => "000001010110111", 
    108 => "000100101101010", 109 => "000111101111100", 110 => "111010100111111", 
    111 => "111001000010010", 112 => "111110111111110", 113 => "000111000001011", 
    114 => "001101000110111", 115 => "010001111111111", 116 => "000001111101010", 
    117 => "111111001001010", 118 => "000100010110111", 119 => "000000010111111", 
    120 => "110011110011110", 121 => "000011011001111", 122 => "111000111000001", 
    123 => "000111110101011", 124 => "000010110100110", 125 => "000110011101110", 
    126 => "101110000010011", 127 => "111111000111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity pointwise_conv2d_fix_1_SeparableConv2D_1_w_s is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of pointwise_conv2d_fix_1_SeparableConv2D_1_w_s is
    component pointwise_conv2d_fix_1_SeparableConv2D_1_w_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    pointwise_conv2d_fix_1_SeparableConv2D_1_w_s_rom_U :  component pointwise_conv2d_fix_1_SeparableConv2D_1_w_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


