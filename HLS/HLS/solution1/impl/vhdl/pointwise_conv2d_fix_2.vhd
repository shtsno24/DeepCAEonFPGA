-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_31 : STD_LOGIC_VECTOR (8 downto 0) := "000110001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_2A92 : STD_LOGIC_VECTOR (15 downto 0) := "0010101010010010";
    constant ap_const_lv16_18D9 : STD_LOGIC_VECTOR (15 downto 0) := "0001100011011001";
    constant ap_const_lv16_F240 : STD_LOGIC_VECTOR (15 downto 0) := "1111001001000000";
    constant ap_const_lv16_DF5 : STD_LOGIC_VECTOR (15 downto 0) := "0000110111110101";
    constant ap_const_lv16_E1AB : STD_LOGIC_VECTOR (15 downto 0) := "1110000110101011";
    constant ap_const_lv16_FF67 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101100111";
    constant ap_const_lv16_273B : STD_LOGIC_VECTOR (15 downto 0) := "0010011100111011";
    constant ap_const_lv16_1B40 : STD_LOGIC_VECTOR (15 downto 0) := "0001101101000000";
    constant ap_const_lv16_23D : STD_LOGIC_VECTOR (15 downto 0) := "0000001000111101";
    constant ap_const_lv16_E3EC : STD_LOGIC_VECTOR (15 downto 0) := "1110001111101100";
    constant ap_const_lv16_18CC : STD_LOGIC_VECTOR (15 downto 0) := "0001100011001100";
    constant ap_const_lv16_DB60 : STD_LOGIC_VECTOR (15 downto 0) := "1101101101100000";
    constant ap_const_lv16_DC1A : STD_LOGIC_VECTOR (15 downto 0) := "1101110000011010";
    constant ap_const_lv16_EADB : STD_LOGIC_VECTOR (15 downto 0) := "1110101011011011";
    constant ap_const_lv16_FC94 : STD_LOGIC_VECTOR (15 downto 0) := "1111110010010100";
    constant ap_const_lv16_FFD8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111011000";
    constant ap_const_lv16_DF7C : STD_LOGIC_VECTOR (15 downto 0) := "1101111101111100";
    constant ap_const_lv16_831 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000110001";
    constant ap_const_lv16_DAF1 : STD_LOGIC_VECTOR (15 downto 0) := "1101101011110001";
    constant ap_const_lv16_E615 : STD_LOGIC_VECTOR (15 downto 0) := "1110011000010101";
    constant ap_const_lv16_25F : STD_LOGIC_VECTOR (15 downto 0) := "0000001001011111";
    constant ap_const_lv16_E06F : STD_LOGIC_VECTOR (15 downto 0) := "1110000001101111";
    constant ap_const_lv16_1EBB : STD_LOGIC_VECTOR (15 downto 0) := "0001111010111011";
    constant ap_const_lv16_EAA6 : STD_LOGIC_VECTOR (15 downto 0) := "1110101010100110";
    constant ap_const_lv16_2D1B : STD_LOGIC_VECTOR (15 downto 0) := "0010110100011011";
    constant ap_const_lv16_20DD : STD_LOGIC_VECTOR (15 downto 0) := "0010000011011101";
    constant ap_const_lv16_F939 : STD_LOGIC_VECTOR (15 downto 0) := "1111100100111001";
    constant ap_const_lv16_2125 : STD_LOGIC_VECTOR (15 downto 0) := "0010000100100101";
    constant ap_const_lv16_A69 : STD_LOGIC_VECTOR (15 downto 0) := "0000101001101001";
    constant ap_const_lv16_D5F : STD_LOGIC_VECTOR (15 downto 0) := "0000110101011111";
    constant ap_const_lv16_FC6E : STD_LOGIC_VECTOR (15 downto 0) := "1111110001101110";
    constant ap_const_lv16_11D0 : STD_LOGIC_VECTOR (15 downto 0) := "0001000111010000";
    constant ap_const_lv16_E860 : STD_LOGIC_VECTOR (15 downto 0) := "1110100001100000";
    constant ap_const_lv16_1B74 : STD_LOGIC_VECTOR (15 downto 0) := "0001101101110100";
    constant ap_const_lv16_E946 : STD_LOGIC_VECTOR (15 downto 0) := "1110100101000110";
    constant ap_const_lv16_24BD : STD_LOGIC_VECTOR (15 downto 0) := "0010010010111101";
    constant ap_const_lv16_19BA : STD_LOGIC_VECTOR (15 downto 0) := "0001100110111010";
    constant ap_const_lv16_1350 : STD_LOGIC_VECTOR (15 downto 0) := "0001001101010000";
    constant ap_const_lv16_1D74 : STD_LOGIC_VECTOR (15 downto 0) := "0001110101110100";
    constant ap_const_lv16_21B5 : STD_LOGIC_VECTOR (15 downto 0) := "0010000110110101";
    constant ap_const_lv16_19A4 : STD_LOGIC_VECTOR (15 downto 0) := "0001100110100100";
    constant ap_const_lv16_D684 : STD_LOGIC_VECTOR (15 downto 0) := "1101011010000100";
    constant ap_const_lv16_F909 : STD_LOGIC_VECTOR (15 downto 0) := "1111100100001001";
    constant ap_const_lv16_170B : STD_LOGIC_VECTOR (15 downto 0) := "0001011100001011";
    constant ap_const_lv16_DFAC : STD_LOGIC_VECTOR (15 downto 0) := "1101111110101100";
    constant ap_const_lv16_2F75 : STD_LOGIC_VECTOR (15 downto 0) := "0010111101110101";
    constant ap_const_lv16_B43 : STD_LOGIC_VECTOR (15 downto 0) := "0000101101000011";
    constant ap_const_lv16_ED88 : STD_LOGIC_VECTOR (15 downto 0) := "1110110110001000";
    constant ap_const_lv16_259C : STD_LOGIC_VECTOR (15 downto 0) := "0010010110011100";
    constant ap_const_lv16_1F9D : STD_LOGIC_VECTOR (15 downto 0) := "0001111110011101";
    constant ap_const_lv16_2DD : STD_LOGIC_VECTOR (15 downto 0) := "0000001011011101";
    constant ap_const_lv16_2357 : STD_LOGIC_VECTOR (15 downto 0) := "0010001101010111";
    constant ap_const_lv16_EF4E : STD_LOGIC_VECTOR (15 downto 0) := "1110111101001110";
    constant ap_const_lv16_FB37 : STD_LOGIC_VECTOR (15 downto 0) := "1111101100110111";
    constant ap_const_lv16_E619 : STD_LOGIC_VECTOR (15 downto 0) := "1110011000011001";
    constant ap_const_lv16_F172 : STD_LOGIC_VECTOR (15 downto 0) := "1111000101110010";
    constant ap_const_lv16_6B8 : STD_LOGIC_VECTOR (15 downto 0) := "0000011010111000";
    constant ap_const_lv16_867 : STD_LOGIC_VECTOR (15 downto 0) := "0000100001100111";
    constant ap_const_lv16_F876 : STD_LOGIC_VECTOR (15 downto 0) := "1111100001110110";
    constant ap_const_lv16_13D9 : STD_LOGIC_VECTOR (15 downto 0) := "0001001111011001";
    constant ap_const_lv16_FE67 : STD_LOGIC_VECTOR (15 downto 0) := "1111111001100111";
    constant ap_const_lv16_E8FC : STD_LOGIC_VECTOR (15 downto 0) := "1110100011111100";
    constant ap_const_lv16_F03B : STD_LOGIC_VECTOR (15 downto 0) := "1111000000111011";
    constant ap_const_lv16_7A4 : STD_LOGIC_VECTOR (15 downto 0) := "0000011110100100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_2_b_s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SeparableConv2D_2_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_2_b_s_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln18_fu_293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln18_reg_646 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln18_fu_297_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_reg_651 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_659 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln18_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln27_fu_320_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_reg_669 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln27_fu_324_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln27_reg_674 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal shl_ln_fu_328_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_679 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_h_fu_341_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_h_reg_687 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln27_fu_363_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln27_reg_692 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln19_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_375_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_w_reg_700 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln27_8_fu_390_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln27_8_reg_705 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln20_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_d_fu_404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_d_reg_714 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln27_6_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln27_6_reg_719 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln22_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_1_fu_416_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln27_1_reg_724 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln27_5_fu_425_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_5_reg_729 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln32_fu_456_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln32_reg_734 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_fu_462_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_reg_739 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_load_reg_749 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal merge_i_fu_474_p66 : STD_LOGIC_VECTOR (15 downto 0);
    signal merge_i_reg_754 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln27_fu_640_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln27_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal buffer_fu_626_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal out_d_0_reg_217 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul1_reg_228 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_0_reg_239 : STD_LOGIC_VECTOR (2 downto 0);
    signal out_w_0_reg_250 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buffer_0_reg_261 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_d_0_reg_271 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_282 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_7_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln27_4_fu_351_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln27_6_fu_359_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_347_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln22_fu_381_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln27_fu_385_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln22_3_fu_394_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln27_8_fu_421_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_448_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln31_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln27_9_fu_466_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln3_fu_613_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln27_10_fu_622_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln32_fu_632_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component network_mux_646_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pointwise_conv2d_fix_2_SeparableConv2D_2_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    SeparableConv2D_2_b_s_U : component pointwise_conv2d_fix_2_SeparableConv2D_2_b_s
    generic map (
        DataWidth => 13,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_2_b_s_address0,
        ce0 => SeparableConv2D_2_b_s_ce0,
        q0 => SeparableConv2D_2_b_s_q0);

    network_mux_646_16_1_1_U83 : component network_mux_646_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_2A92,
        din1 => ap_const_lv16_18D9,
        din2 => ap_const_lv16_F240,
        din3 => ap_const_lv16_DF5,
        din4 => ap_const_lv16_E1AB,
        din5 => ap_const_lv16_FF67,
        din6 => ap_const_lv16_273B,
        din7 => ap_const_lv16_1B40,
        din8 => ap_const_lv16_23D,
        din9 => ap_const_lv16_E3EC,
        din10 => ap_const_lv16_18CC,
        din11 => ap_const_lv16_DB60,
        din12 => ap_const_lv16_DC1A,
        din13 => ap_const_lv16_EADB,
        din14 => ap_const_lv16_FC94,
        din15 => ap_const_lv16_FFD8,
        din16 => ap_const_lv16_DF7C,
        din17 => ap_const_lv16_831,
        din18 => ap_const_lv16_DAF1,
        din19 => ap_const_lv16_E615,
        din20 => ap_const_lv16_25F,
        din21 => ap_const_lv16_E06F,
        din22 => ap_const_lv16_1EBB,
        din23 => ap_const_lv16_EAA6,
        din24 => ap_const_lv16_2D1B,
        din25 => ap_const_lv16_20DD,
        din26 => ap_const_lv16_F939,
        din27 => ap_const_lv16_2125,
        din28 => ap_const_lv16_A69,
        din29 => ap_const_lv16_D5F,
        din30 => ap_const_lv16_FC6E,
        din31 => ap_const_lv16_11D0,
        din32 => ap_const_lv16_E860,
        din33 => ap_const_lv16_1B74,
        din34 => ap_const_lv16_E946,
        din35 => ap_const_lv16_24BD,
        din36 => ap_const_lv16_19BA,
        din37 => ap_const_lv16_1350,
        din38 => ap_const_lv16_1D74,
        din39 => ap_const_lv16_21B5,
        din40 => ap_const_lv16_19A4,
        din41 => ap_const_lv16_D684,
        din42 => ap_const_lv16_F909,
        din43 => ap_const_lv16_170B,
        din44 => ap_const_lv16_DFAC,
        din45 => ap_const_lv16_2F75,
        din46 => ap_const_lv16_B43,
        din47 => ap_const_lv16_ED88,
        din48 => ap_const_lv16_259C,
        din49 => ap_const_lv16_1F9D,
        din50 => ap_const_lv16_2DD,
        din51 => ap_const_lv16_2357,
        din52 => ap_const_lv16_EF4E,
        din53 => ap_const_lv16_FB37,
        din54 => ap_const_lv16_E619,
        din55 => ap_const_lv16_F172,
        din56 => ap_const_lv16_6B8,
        din57 => ap_const_lv16_867,
        din58 => ap_const_lv16_F876,
        din59 => ap_const_lv16_13D9,
        din60 => ap_const_lv16_FE67,
        din61 => ap_const_lv16_E8FC,
        din62 => ap_const_lv16_F03B,
        din63 => ap_const_lv16_7A4,
        din64 => add_ln27_5_reg_729,
        dout => merge_i_fu_474_p66);

    network_mul_mul_16s_16s_32_1_1_U84 : component network_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => merge_i_reg_754,
        din1 => input_load_reg_749,
        dout => mul_ln27_fu_640_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                buffer_0_reg_261 <= buffer_fu_626_p2;
            elsif (((icmp_ln20_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buffer_0_reg_261 <= sext_ln27_reg_674;
            end if; 
        end if;
    end process;

    in_d_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                in_d_0_reg_271 <= in_d_reg_714;
            elsif (((icmp_ln20_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_d_0_reg_271 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_d_0_reg_217 <= out_d_reg_659;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_217 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_369_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_239 <= out_h_reg_687;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_0_reg_239 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_w_0_reg_250 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                out_w_0_reg_250 <= out_w_reg_700;
            end if; 
        end if;
    end process;

    phi_mul1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul1_reg_228 <= add_ln18_reg_651;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_228 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_mul_reg_282 <= add_ln27_6_reg_719;
            elsif (((icmp_ln20_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul_reg_282 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln18_reg_651 <= add_ln18_fu_297_p2;
                out_d_reg_659 <= out_d_fu_309_p2;
                    zext_ln18_reg_646(8 downto 0) <= zext_ln18_fu_293_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_398_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln27_1_reg_724 <= add_ln27_1_fu_416_p2;
                add_ln27_5_reg_729 <= add_ln27_5_fu_425_p2;
                add_ln27_6_reg_719 <= add_ln27_6_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_398_p2 = ap_const_lv1_1))) then
                add_ln32_reg_739 <= add_ln32_fu_462_p2;
                and_ln32_reg_734 <= and_ln32_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_d_reg_714 <= in_d_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_load_reg_749 <= input_r_q0;
                merge_i_reg_754 <= merge_i_fu_474_p66;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln27_reg_759 <= mul_ln27_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_reg_687 <= out_h_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_reg_700 <= out_w_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sext_ln27_8_reg_705 <= sext_ln27_8_fu_390_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln27_reg_674 <= sext_ln27_fu_324_p1;
                    shl_ln_reg_679(5 downto 3) <= shl_ln_fu_328_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                sub_ln27_reg_692 <= sub_ln27_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln27_reg_669 <= trunc_ln27_fu_320_p1;
            end if;
        end if;
    end process;
    zext_ln18_reg_646(9) <= '0';
    shl_ln_reg_679(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_303_p2, ap_CS_fsm_state4, icmp_ln19_fu_335_p2, ap_CS_fsm_state5, icmp_ln20_fu_369_p2, ap_CS_fsm_state6, icmp_ln22_fu_398_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln19_fu_335_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_369_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln22_fu_398_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    SeparableConv2D_2_b_s_address0 <= zext_ln21_fu_315_p1(3 - 1 downto 0);

    SeparableConv2D_2_b_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_2_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_2_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln18_fu_297_p2 <= std_logic_vector(unsigned(phi_mul1_reg_228) + unsigned(ap_const_lv9_31));
    add_ln27_1_fu_416_p2 <= std_logic_vector(signed(sext_ln27_8_reg_705) + signed(zext_ln22_3_fu_394_p1));
    add_ln27_5_fu_425_p2 <= std_logic_vector(unsigned(zext_ln27_8_fu_421_p1) + unsigned(shl_ln_reg_679));
    add_ln27_6_fu_410_p2 <= std_logic_vector(unsigned(phi_mul_reg_282) + unsigned(ap_const_lv9_31));
    add_ln27_fu_385_p2 <= std_logic_vector(unsigned(sub_ln27_reg_692) + unsigned(zext_ln22_fu_381_p1));
    add_ln32_fu_462_p2 <= std_logic_vector(unsigned(zext_ln18_reg_646) + unsigned(sext_ln27_8_reg_705));
    and_ln32_fu_456_p2 <= (trunc_ln31_fu_438_p1 and select_ln31_fu_448_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_303_p2)
    begin
        if ((((icmp_ln18_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_303_p2)
    begin
        if (((icmp_ln18_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_626_p2 <= std_logic_vector(signed(sext_ln27_10_fu_622_p1) + signed(buffer_0_reg_261));
    icmp_ln18_fu_303_p2 <= "1" when (out_d_0_reg_217 = ap_const_lv4_8) else "0";
    icmp_ln19_fu_335_p2 <= "1" when (out_h_0_reg_239 = ap_const_lv3_7) else "0";
    icmp_ln20_fu_369_p2 <= "1" when (out_w_0_reg_250 = ap_const_lv3_7) else "0";
    icmp_ln22_fu_398_p2 <= "1" when (in_d_0_reg_271 = ap_const_lv4_8) else "0";
    in_d_fu_404_p2 <= std_logic_vector(unsigned(in_d_0_reg_271) + unsigned(ap_const_lv4_1));
    input_r_address0 <= zext_ln27_7_fu_469_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_d_fu_309_p2 <= std_logic_vector(unsigned(out_d_0_reg_217) + unsigned(ap_const_lv4_1));
    out_h_fu_341_p2 <= std_logic_vector(unsigned(out_h_0_reg_239) + unsigned(ap_const_lv3_1));
    out_w_fu_375_p2 <= std_logic_vector(unsigned(out_w_0_reg_250) + unsigned(ap_const_lv3_1));
    output_r_address0 <= zext_ln32_fu_635_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= and_ln32_reg_734;

    output_r_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln31_fu_448_p3 <= 
        ap_const_lv16_FFFF when (xor_ln31_fu_442_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln27_10_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_613_p4),22));

        sext_ln27_8_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln27_fu_385_p2),10));

        sext_ln27_9_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln27_1_reg_724),32));

        sext_ln27_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_2_b_s_q0),22));

        sext_ln32_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln32_reg_739),32));

    shl_ln27_4_fu_351_p3 <= (out_h_0_reg_239 & ap_const_lv3_0);
    shl_ln_fu_328_p3 <= (trunc_ln27_reg_669 & ap_const_lv3_0);
    sub_ln27_fu_363_p2 <= std_logic_vector(unsigned(zext_ln27_6_fu_359_p1) - unsigned(zext_ln27_fu_347_p1));
    tmp_fu_430_p3 <= buffer_0_reg_261(21 downto 21);
    trunc_ln27_fu_320_p1 <= out_d_0_reg_217(3 - 1 downto 0);
    trunc_ln31_fu_438_p1 <= buffer_0_reg_261(16 - 1 downto 0);
    trunc_ln3_fu_613_p4 <= mul_ln27_reg_759(31 downto 14);
    xor_ln31_fu_442_p2 <= (tmp_fu_430_p3 xor ap_const_lv1_1);
    zext_ln18_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_228),10));
    zext_ln21_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_217),64));
    zext_ln22_3_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_282),10));
    zext_ln22_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_250),7));
    zext_ln27_6_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln27_4_fu_351_p3),7));
    zext_ln27_7_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln27_9_fu_466_p1),64));
    zext_ln27_8_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_0_reg_271),6));
    zext_ln27_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_239),7));
    zext_ln32_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln32_fu_632_p1),64));
end behav;
