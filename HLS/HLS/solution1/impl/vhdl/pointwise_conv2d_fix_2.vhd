-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv9_31 : STD_LOGIC_VECTOR (8 downto 0) := "000110001";
    constant ap_const_lv16_2A92 : STD_LOGIC_VECTOR (15 downto 0) := "0010101010010010";
    constant ap_const_lv16_18D9 : STD_LOGIC_VECTOR (15 downto 0) := "0001100011011001";
    constant ap_const_lv16_F240 : STD_LOGIC_VECTOR (15 downto 0) := "1111001001000000";
    constant ap_const_lv16_DF5 : STD_LOGIC_VECTOR (15 downto 0) := "0000110111110101";
    constant ap_const_lv16_E1AB : STD_LOGIC_VECTOR (15 downto 0) := "1110000110101011";
    constant ap_const_lv16_FF67 : STD_LOGIC_VECTOR (15 downto 0) := "1111111101100111";
    constant ap_const_lv16_273B : STD_LOGIC_VECTOR (15 downto 0) := "0010011100111011";
    constant ap_const_lv16_1B40 : STD_LOGIC_VECTOR (15 downto 0) := "0001101101000000";
    constant ap_const_lv16_23D : STD_LOGIC_VECTOR (15 downto 0) := "0000001000111101";
    constant ap_const_lv16_E3EC : STD_LOGIC_VECTOR (15 downto 0) := "1110001111101100";
    constant ap_const_lv16_18CC : STD_LOGIC_VECTOR (15 downto 0) := "0001100011001100";
    constant ap_const_lv16_DB60 : STD_LOGIC_VECTOR (15 downto 0) := "1101101101100000";
    constant ap_const_lv16_DC1A : STD_LOGIC_VECTOR (15 downto 0) := "1101110000011010";
    constant ap_const_lv16_EADB : STD_LOGIC_VECTOR (15 downto 0) := "1110101011011011";
    constant ap_const_lv16_FC94 : STD_LOGIC_VECTOR (15 downto 0) := "1111110010010100";
    constant ap_const_lv16_FFD8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111011000";
    constant ap_const_lv16_DF7C : STD_LOGIC_VECTOR (15 downto 0) := "1101111101111100";
    constant ap_const_lv16_831 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000110001";
    constant ap_const_lv16_DAF1 : STD_LOGIC_VECTOR (15 downto 0) := "1101101011110001";
    constant ap_const_lv16_E615 : STD_LOGIC_VECTOR (15 downto 0) := "1110011000010101";
    constant ap_const_lv16_25F : STD_LOGIC_VECTOR (15 downto 0) := "0000001001011111";
    constant ap_const_lv16_E06F : STD_LOGIC_VECTOR (15 downto 0) := "1110000001101111";
    constant ap_const_lv16_1EBB : STD_LOGIC_VECTOR (15 downto 0) := "0001111010111011";
    constant ap_const_lv16_EAA6 : STD_LOGIC_VECTOR (15 downto 0) := "1110101010100110";
    constant ap_const_lv16_2D1B : STD_LOGIC_VECTOR (15 downto 0) := "0010110100011011";
    constant ap_const_lv16_20DD : STD_LOGIC_VECTOR (15 downto 0) := "0010000011011101";
    constant ap_const_lv16_F939 : STD_LOGIC_VECTOR (15 downto 0) := "1111100100111001";
    constant ap_const_lv16_2125 : STD_LOGIC_VECTOR (15 downto 0) := "0010000100100101";
    constant ap_const_lv16_A69 : STD_LOGIC_VECTOR (15 downto 0) := "0000101001101001";
    constant ap_const_lv16_D5F : STD_LOGIC_VECTOR (15 downto 0) := "0000110101011111";
    constant ap_const_lv16_FC6E : STD_LOGIC_VECTOR (15 downto 0) := "1111110001101110";
    constant ap_const_lv16_11D0 : STD_LOGIC_VECTOR (15 downto 0) := "0001000111010000";
    constant ap_const_lv16_E860 : STD_LOGIC_VECTOR (15 downto 0) := "1110100001100000";
    constant ap_const_lv16_1B74 : STD_LOGIC_VECTOR (15 downto 0) := "0001101101110100";
    constant ap_const_lv16_E946 : STD_LOGIC_VECTOR (15 downto 0) := "1110100101000110";
    constant ap_const_lv16_24BD : STD_LOGIC_VECTOR (15 downto 0) := "0010010010111101";
    constant ap_const_lv16_19BA : STD_LOGIC_VECTOR (15 downto 0) := "0001100110111010";
    constant ap_const_lv16_1350 : STD_LOGIC_VECTOR (15 downto 0) := "0001001101010000";
    constant ap_const_lv16_1D74 : STD_LOGIC_VECTOR (15 downto 0) := "0001110101110100";
    constant ap_const_lv16_21B5 : STD_LOGIC_VECTOR (15 downto 0) := "0010000110110101";
    constant ap_const_lv16_19A4 : STD_LOGIC_VECTOR (15 downto 0) := "0001100110100100";
    constant ap_const_lv16_D684 : STD_LOGIC_VECTOR (15 downto 0) := "1101011010000100";
    constant ap_const_lv16_F909 : STD_LOGIC_VECTOR (15 downto 0) := "1111100100001001";
    constant ap_const_lv16_170B : STD_LOGIC_VECTOR (15 downto 0) := "0001011100001011";
    constant ap_const_lv16_DFAC : STD_LOGIC_VECTOR (15 downto 0) := "1101111110101100";
    constant ap_const_lv16_2F75 : STD_LOGIC_VECTOR (15 downto 0) := "0010111101110101";
    constant ap_const_lv16_B43 : STD_LOGIC_VECTOR (15 downto 0) := "0000101101000011";
    constant ap_const_lv16_ED88 : STD_LOGIC_VECTOR (15 downto 0) := "1110110110001000";
    constant ap_const_lv16_259C : STD_LOGIC_VECTOR (15 downto 0) := "0010010110011100";
    constant ap_const_lv16_1F9D : STD_LOGIC_VECTOR (15 downto 0) := "0001111110011101";
    constant ap_const_lv16_2DD : STD_LOGIC_VECTOR (15 downto 0) := "0000001011011101";
    constant ap_const_lv16_2357 : STD_LOGIC_VECTOR (15 downto 0) := "0010001101010111";
    constant ap_const_lv16_EF4E : STD_LOGIC_VECTOR (15 downto 0) := "1110111101001110";
    constant ap_const_lv16_FB37 : STD_LOGIC_VECTOR (15 downto 0) := "1111101100110111";
    constant ap_const_lv16_E619 : STD_LOGIC_VECTOR (15 downto 0) := "1110011000011001";
    constant ap_const_lv16_F172 : STD_LOGIC_VECTOR (15 downto 0) := "1111000101110010";
    constant ap_const_lv16_6B8 : STD_LOGIC_VECTOR (15 downto 0) := "0000011010111000";
    constant ap_const_lv16_867 : STD_LOGIC_VECTOR (15 downto 0) := "0000100001100111";
    constant ap_const_lv16_F876 : STD_LOGIC_VECTOR (15 downto 0) := "1111100001110110";
    constant ap_const_lv16_13D9 : STD_LOGIC_VECTOR (15 downto 0) := "0001001111011001";
    constant ap_const_lv16_FE67 : STD_LOGIC_VECTOR (15 downto 0) := "1111111001100111";
    constant ap_const_lv16_E8FC : STD_LOGIC_VECTOR (15 downto 0) := "1110100011111100";
    constant ap_const_lv16_F03B : STD_LOGIC_VECTOR (15 downto 0) := "1111000000111011";
    constant ap_const_lv16_7A4 : STD_LOGIC_VECTOR (15 downto 0) := "0000011110100100";
    constant ap_const_lv9_188 : STD_LOGIC_VECTOR (8 downto 0) := "110001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_31 : STD_LOGIC_VECTOR (9 downto 0) := "0000110001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_2_b_s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SeparableConv2D_2_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_2_b_s_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten18_reg_365 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_0_reg_376 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_387 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_w_0_reg_398 : STD_LOGIC_VECTOR (2 downto 0);
    signal buffer_0_reg_409 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_d_0_reg_419 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln22_fu_430_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_reg_1198 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln22_fu_434_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln22_reg_1203 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln22_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_446_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1212 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_456_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_reg_1217 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_fu_470_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln28_fu_703_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln28_reg_1235 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln30_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1242 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln30_reg_1242_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1242_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_1242_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_745_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln31_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1251 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1251_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1251_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_1251_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_7_fu_793_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln37_7_reg_1256 : STD_LOGIC_VECTOR (6 downto 0);
    signal and_ln37_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_1261 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_1261_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_1261_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_reg_1261_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_827_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_7_fu_847_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_7_reg_1271 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_7_reg_1271_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_8_fu_859_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_8_reg_1277 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln32_9_fu_873_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln32_9_reg_1283 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_d_fu_881_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_d_reg_1288 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln31_fu_893_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln34_3_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_3_reg_1304 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_3_reg_1304_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_3_reg_1304_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_1_fu_932_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln44_1_reg_1308 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln44_1_reg_1308_pp1_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln44_1_reg_1308_pp1_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal input_load_reg_1313 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_982_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_1022_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_reg_1323 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_fu_1052_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal out_d_0_reg_331 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal phi_mul_reg_343 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_i_0_phi_fu_358_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_354 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln24_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_402_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_in_d_0_phi_fu_423_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_5_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_buffer_15_fu_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_0_fu_619_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_31_fu_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_32_fu_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_33_fu_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_34_fu_248 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_35_fu_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_36_fu_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_37_fu_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_38_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_39_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_40_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_41_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_42_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_43_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_016_fu_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln26_fu_452_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln26_fu_476_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal merge_i_fu_485_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal merge_i_fu_485_p66 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln2_fu_711_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln37_11_fu_719_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln37_fu_707_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln37_fu_723_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_fu_729_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_fu_751_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln37_mid1_fu_775_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln37_14_fu_783_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln37_13_fu_771_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln37_3_fu_787_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_fu_733_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln34_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_763_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln32_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_835_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln34_3_fu_855_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln37_6_fu_867_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln37_8_fu_801_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln31_fu_887_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1099_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln37_fu_910_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_fu_901_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln44_fu_923_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln44_fu_928_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln37_fu_1022_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln37_6_fu_1027_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln_fu_1039_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln37_4_fu_1048_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal select_ln32_fu_1033_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_fu_1058_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln43_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln43_fu_1076_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln43_fu_1066_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln44_2_fu_1091_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1099_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1099_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_1099_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component network_mux_646_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        din17 : IN STD_LOGIC_VECTOR (15 downto 0);
        din18 : IN STD_LOGIC_VECTOR (15 downto 0);
        din19 : IN STD_LOGIC_VECTOR (15 downto 0);
        din20 : IN STD_LOGIC_VECTOR (15 downto 0);
        din21 : IN STD_LOGIC_VECTOR (15 downto 0);
        din22 : IN STD_LOGIC_VECTOR (15 downto 0);
        din23 : IN STD_LOGIC_VECTOR (15 downto 0);
        din24 : IN STD_LOGIC_VECTOR (15 downto 0);
        din25 : IN STD_LOGIC_VECTOR (15 downto 0);
        din26 : IN STD_LOGIC_VECTOR (15 downto 0);
        din27 : IN STD_LOGIC_VECTOR (15 downto 0);
        din28 : IN STD_LOGIC_VECTOR (15 downto 0);
        din29 : IN STD_LOGIC_VECTOR (15 downto 0);
        din30 : IN STD_LOGIC_VECTOR (15 downto 0);
        din31 : IN STD_LOGIC_VECTOR (15 downto 0);
        din32 : IN STD_LOGIC_VECTOR (15 downto 0);
        din33 : IN STD_LOGIC_VECTOR (15 downto 0);
        din34 : IN STD_LOGIC_VECTOR (15 downto 0);
        din35 : IN STD_LOGIC_VECTOR (15 downto 0);
        din36 : IN STD_LOGIC_VECTOR (15 downto 0);
        din37 : IN STD_LOGIC_VECTOR (15 downto 0);
        din38 : IN STD_LOGIC_VECTOR (15 downto 0);
        din39 : IN STD_LOGIC_VECTOR (15 downto 0);
        din40 : IN STD_LOGIC_VECTOR (15 downto 0);
        din41 : IN STD_LOGIC_VECTOR (15 downto 0);
        din42 : IN STD_LOGIC_VECTOR (15 downto 0);
        din43 : IN STD_LOGIC_VECTOR (15 downto 0);
        din44 : IN STD_LOGIC_VECTOR (15 downto 0);
        din45 : IN STD_LOGIC_VECTOR (15 downto 0);
        din46 : IN STD_LOGIC_VECTOR (15 downto 0);
        din47 : IN STD_LOGIC_VECTOR (15 downto 0);
        din48 : IN STD_LOGIC_VECTOR (15 downto 0);
        din49 : IN STD_LOGIC_VECTOR (15 downto 0);
        din50 : IN STD_LOGIC_VECTOR (15 downto 0);
        din51 : IN STD_LOGIC_VECTOR (15 downto 0);
        din52 : IN STD_LOGIC_VECTOR (15 downto 0);
        din53 : IN STD_LOGIC_VECTOR (15 downto 0);
        din54 : IN STD_LOGIC_VECTOR (15 downto 0);
        din55 : IN STD_LOGIC_VECTOR (15 downto 0);
        din56 : IN STD_LOGIC_VECTOR (15 downto 0);
        din57 : IN STD_LOGIC_VECTOR (15 downto 0);
        din58 : IN STD_LOGIC_VECTOR (15 downto 0);
        din59 : IN STD_LOGIC_VECTOR (15 downto 0);
        din60 : IN STD_LOGIC_VECTOR (15 downto 0);
        din61 : IN STD_LOGIC_VECTOR (15 downto 0);
        din62 : IN STD_LOGIC_VECTOR (15 downto 0);
        din63 : IN STD_LOGIC_VECTOR (15 downto 0);
        din64 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_mac_muladd_4ns_7ns_7s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component pointwise_conv2d_fix_2_SeparableConv2D_2_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    SeparableConv2D_2_b_s_U : component pointwise_conv2d_fix_2_SeparableConv2D_2_b_s
    generic map (
        DataWidth => 13,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_2_b_s_address0,
        ce0 => SeparableConv2D_2_b_s_ce0,
        q0 => SeparableConv2D_2_b_s_q0);

    network_mux_646_16_1_1_U81 : component network_mux_646_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 16,
        din17_WIDTH => 16,
        din18_WIDTH => 16,
        din19_WIDTH => 16,
        din20_WIDTH => 16,
        din21_WIDTH => 16,
        din22_WIDTH => 16,
        din23_WIDTH => 16,
        din24_WIDTH => 16,
        din25_WIDTH => 16,
        din26_WIDTH => 16,
        din27_WIDTH => 16,
        din28_WIDTH => 16,
        din29_WIDTH => 16,
        din30_WIDTH => 16,
        din31_WIDTH => 16,
        din32_WIDTH => 16,
        din33_WIDTH => 16,
        din34_WIDTH => 16,
        din35_WIDTH => 16,
        din36_WIDTH => 16,
        din37_WIDTH => 16,
        din38_WIDTH => 16,
        din39_WIDTH => 16,
        din40_WIDTH => 16,
        din41_WIDTH => 16,
        din42_WIDTH => 16,
        din43_WIDTH => 16,
        din44_WIDTH => 16,
        din45_WIDTH => 16,
        din46_WIDTH => 16,
        din47_WIDTH => 16,
        din48_WIDTH => 16,
        din49_WIDTH => 16,
        din50_WIDTH => 16,
        din51_WIDTH => 16,
        din52_WIDTH => 16,
        din53_WIDTH => 16,
        din54_WIDTH => 16,
        din55_WIDTH => 16,
        din56_WIDTH => 16,
        din57_WIDTH => 16,
        din58_WIDTH => 16,
        din59_WIDTH => 16,
        din60_WIDTH => 16,
        din61_WIDTH => 16,
        din62_WIDTH => 16,
        din63_WIDTH => 16,
        din64_WIDTH => 6,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_2A92,
        din1 => ap_const_lv16_18D9,
        din2 => ap_const_lv16_F240,
        din3 => ap_const_lv16_DF5,
        din4 => ap_const_lv16_E1AB,
        din5 => ap_const_lv16_FF67,
        din6 => ap_const_lv16_273B,
        din7 => ap_const_lv16_1B40,
        din8 => ap_const_lv16_23D,
        din9 => ap_const_lv16_E3EC,
        din10 => ap_const_lv16_18CC,
        din11 => ap_const_lv16_DB60,
        din12 => ap_const_lv16_DC1A,
        din13 => ap_const_lv16_EADB,
        din14 => ap_const_lv16_FC94,
        din15 => ap_const_lv16_FFD8,
        din16 => ap_const_lv16_DF7C,
        din17 => ap_const_lv16_831,
        din18 => ap_const_lv16_DAF1,
        din19 => ap_const_lv16_E615,
        din20 => ap_const_lv16_25F,
        din21 => ap_const_lv16_E06F,
        din22 => ap_const_lv16_1EBB,
        din23 => ap_const_lv16_EAA6,
        din24 => ap_const_lv16_2D1B,
        din25 => ap_const_lv16_20DD,
        din26 => ap_const_lv16_F939,
        din27 => ap_const_lv16_2125,
        din28 => ap_const_lv16_A69,
        din29 => ap_const_lv16_D5F,
        din30 => ap_const_lv16_FC6E,
        din31 => ap_const_lv16_11D0,
        din32 => ap_const_lv16_E860,
        din33 => ap_const_lv16_1B74,
        din34 => ap_const_lv16_E946,
        din35 => ap_const_lv16_24BD,
        din36 => ap_const_lv16_19BA,
        din37 => ap_const_lv16_1350,
        din38 => ap_const_lv16_1D74,
        din39 => ap_const_lv16_21B5,
        din40 => ap_const_lv16_19A4,
        din41 => ap_const_lv16_D684,
        din42 => ap_const_lv16_F909,
        din43 => ap_const_lv16_170B,
        din44 => ap_const_lv16_DFAC,
        din45 => ap_const_lv16_2F75,
        din46 => ap_const_lv16_B43,
        din47 => ap_const_lv16_ED88,
        din48 => ap_const_lv16_259C,
        din49 => ap_const_lv16_1F9D,
        din50 => ap_const_lv16_2DD,
        din51 => ap_const_lv16_2357,
        din52 => ap_const_lv16_EF4E,
        din53 => ap_const_lv16_FB37,
        din54 => ap_const_lv16_E619,
        din55 => ap_const_lv16_F172,
        din56 => ap_const_lv16_6B8,
        din57 => ap_const_lv16_867,
        din58 => ap_const_lv16_F876,
        din59 => ap_const_lv16_13D9,
        din60 => ap_const_lv16_FE67,
        din61 => ap_const_lv16_E8FC,
        din62 => ap_const_lv16_F03B,
        din63 => ap_const_lv16_7A4,
        din64 => merge_i_fu_485_p65,
        dout => merge_i_fu_485_p66);

    network_mux_164_32_1_1_U82 : component network_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => kernel_buffer_15_fu_232,
        din1 => kernel_buffer_15_31_fu_236,
        din2 => kernel_buffer_15_32_fu_240,
        din3 => kernel_buffer_15_33_fu_244,
        din4 => kernel_buffer_15_34_fu_248,
        din5 => kernel_buffer_15_35_fu_252,
        din6 => kernel_buffer_15_36_fu_256,
        din7 => kernel_buffer_15_37_fu_260,
        din8 => ap_const_lv32_0,
        din9 => kernel_buffer_15_38_fu_264,
        din10 => kernel_buffer_15_39_fu_268,
        din11 => kernel_buffer_15_40_fu_272,
        din12 => kernel_buffer_15_41_fu_276,
        din13 => kernel_buffer_15_42_fu_280,
        din14 => kernel_buffer_15_43_fu_284,
        din15 => kernel_buffer_15_016_fu_288,
        din16 => select_ln32_7_reg_1271_pp1_iter1_reg,
        dout => tmp_5_fu_982_p18);

    network_mac_muladd_4ns_7ns_7s_10_1_1_U83 : component network_mac_muladd_4ns_7ns_7s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_1099_p0,
        din1 => grp_fu_1099_p1,
        din2 => select_ln32_9_reg_1283,
        dout => grp_fu_1099_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_1242_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                buffer_0_reg_409 <= buffer_fu_1052_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                buffer_0_reg_409 <= sext_ln28_fu_703_p1;
            end if; 
        end if;
    end process;

    i_0_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_354 <= i_fu_470_p2;
            elsif (((icmp_ln22_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_354 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    in_d_0_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_1242 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                in_d_0_reg_419 <= in_d_reg_1288;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                in_d_0_reg_419 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_739_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten18_reg_365 <= add_ln30_fu_745_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten18_reg_365 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_739_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten_reg_387 <= select_ln31_fu_893_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten_reg_387 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                out_d_0_reg_331 <= out_d_reg_1212;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_331 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_739_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                out_h_0_reg_376 <= select_ln30_fu_827_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_h_0_reg_376 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_1242 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                out_w_0_reg_398 <= select_ln32_8_reg_1277;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_w_0_reg_398 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul_reg_343 <= add_ln22_reg_1203;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_343 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln22_reg_1203 <= add_ln22_fu_434_p2;
                out_d_reg_1212 <= out_d_fu_446_p2;
                    zext_ln22_reg_1198(8 downto 0) <= zext_ln22_fu_430_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln34_3_fu_918_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln44_1_reg_1308 <= add_ln44_1_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln44_1_reg_1308_pp1_iter2_reg <= add_ln44_1_reg_1308;
                add_ln44_1_reg_1308_pp1_iter3_reg <= add_ln44_1_reg_1308_pp1_iter2_reg;
                and_ln37_reg_1261_pp1_iter2_reg <= and_ln37_reg_1261_pp1_iter1_reg;
                and_ln37_reg_1261_pp1_iter3_reg <= and_ln37_reg_1261_pp1_iter2_reg;
                icmp_ln30_reg_1242_pp1_iter2_reg <= icmp_ln30_reg_1242_pp1_iter1_reg;
                icmp_ln30_reg_1242_pp1_iter3_reg <= icmp_ln30_reg_1242_pp1_iter2_reg;
                icmp_ln31_reg_1251_pp1_iter2_reg <= icmp_ln31_reg_1251_pp1_iter1_reg;
                icmp_ln31_reg_1251_pp1_iter3_reg <= icmp_ln31_reg_1251_pp1_iter2_reg;
                icmp_ln34_3_reg_1304_pp1_iter2_reg <= icmp_ln34_3_reg_1304;
                icmp_ln34_3_reg_1304_pp1_iter3_reg <= icmp_ln34_3_reg_1304_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                and_ln37_reg_1261 <= and_ln37_fu_821_p2;
                icmp_ln31_reg_1251 <= icmp_ln31_fu_757_p2;
                select_ln32_7_reg_1271 <= select_ln32_7_fu_847_p3;
                select_ln32_9_reg_1283 <= select_ln32_9_fu_873_p3;
                select_ln37_7_reg_1256 <= select_ln37_7_fu_793_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                and_ln37_reg_1261_pp1_iter1_reg <= and_ln37_reg_1261;
                icmp_ln30_reg_1242 <= icmp_ln30_fu_739_p2;
                icmp_ln30_reg_1242_pp1_iter1_reg <= icmp_ln30_reg_1242;
                icmp_ln31_reg_1251_pp1_iter1_reg <= icmp_ln31_reg_1251;
                select_ln32_7_reg_1271_pp1_iter1_reg <= select_ln32_7_reg_1271;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_1242 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln34_3_reg_1304 <= icmp_ln34_3_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_fu_739_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                in_d_reg_1288 <= in_d_fu_881_p2;
                select_ln32_8_reg_1277 <= select_ln32_8_fu_859_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_1242_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                input_load_reg_1313 <= input_r_q0;
                tmp_5_reg_1318 <= tmp_5_fu_982_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_8)) or ((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_F))))) then
                kernel_buffer_15_016_fu_288 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_31_fu_236 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_32_fu_240 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_33_fu_244 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_34_fu_248 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_35_fu_252 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_36_fu_256 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_37_fu_260 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_9) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_38_fu_264 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_A) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_39_fu_268 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_B) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_40_fu_272 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_C) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_41_fu_276 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_D) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_42_fu_280 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_E) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_43_fu_284 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_phi_mux_i_0_phi_fu_358_p4 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                kernel_buffer_15_fu_232 <= kernel_buffer_0_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_1242_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_ln37_reg_1323 <= mul_ln37_fu_1022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_ln28_reg_1235 <= sext_ln28_fu_703_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_440_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln_reg_1217(5 downto 3) <= shl_ln_fu_456_p3(5 downto 3);
            end if;
        end if;
    end process;
    zext_ln22_reg_1198(9) <= '0';
    shl_ln_reg_1217(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_440_p2, ap_CS_fsm_state3, icmp_ln30_fu_739_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, icmp_ln24_fu_464_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln22_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln24_fu_464_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln30_fu_739_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((icmp_ln30_fu_739_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    SeparableConv2D_2_b_s_address0 <= zext_ln28_fu_698_p1(3 - 1 downto 0);

    SeparableConv2D_2_b_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            SeparableConv2D_2_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_2_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln22_fu_434_p2 <= std_logic_vector(unsigned(phi_mul_reg_343) + unsigned(ap_const_lv9_31));
    add_ln30_fu_745_p2 <= std_logic_vector(unsigned(indvar_flatten18_reg_365) + unsigned(ap_const_lv9_1));
    add_ln31_fu_887_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_387) + unsigned(ap_const_lv7_1));
    add_ln37_6_fu_867_p2 <= std_logic_vector(unsigned(select_ln37_7_fu_793_p3) + unsigned(zext_ln34_3_fu_855_p1));
    add_ln37_fu_733_p2 <= std_logic_vector(unsigned(sub_ln37_fu_723_p2) + unsigned(zext_ln34_fu_729_p1));
    add_ln44_1_fu_932_p2 <= std_logic_vector(unsigned(zext_ln22_reg_1198) + unsigned(sext_ln44_fu_928_p1));
    add_ln44_fu_923_p2 <= std_logic_vector(unsigned(zext_ln32_fu_901_p1) + unsigned(select_ln37_7_reg_1256));
    and_ln37_fu_821_p2 <= (xor_ln37_fu_809_p2 and icmp_ln34_fu_815_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state6_assign_proc : process(icmp_ln30_fu_739_p2)
    begin
        if ((icmp_ln30_fu_739_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln22_fu_440_p2)
    begin
        if ((((icmp_ln22_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_0_phi_fu_358_p4 <= i_0_reg_354;

    ap_phi_mux_in_d_0_phi_fu_423_p4_assign_proc : process(in_d_0_reg_419, icmp_ln30_reg_1242, ap_CS_fsm_pp1_stage0, in_d_reg_1288, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln30_reg_1242 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_in_d_0_phi_fu_423_p4 <= in_d_reg_1288;
        else 
            ap_phi_mux_in_d_0_phi_fu_423_p4 <= in_d_0_reg_419;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_402_p4_assign_proc : process(out_w_0_reg_398, icmp_ln30_reg_1242, ap_CS_fsm_pp1_stage0, select_ln32_8_reg_1277, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln30_reg_1242 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_402_p4 <= select_ln32_8_reg_1277;
        else 
            ap_phi_mux_out_w_0_phi_fu_402_p4 <= out_w_0_reg_398;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln22_fu_440_p2)
    begin
        if (((icmp_ln22_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_1052_p2 <= std_logic_vector(signed(sext_ln37_4_fu_1048_p1) + signed(select_ln32_fu_1033_p3));
    grp_fu_1099_p0 <= grp_fu_1099_p00(4 - 1 downto 0);
    grp_fu_1099_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_7_reg_1271),10));
    grp_fu_1099_p1 <= ap_const_lv10_31(7 - 1 downto 0);
    i_fu_470_p2 <= std_logic_vector(unsigned(i_0_reg_354) + unsigned(ap_const_lv4_1));
    icmp_ln22_fu_440_p2 <= "1" when (out_d_0_reg_331 = ap_const_lv4_8) else "0";
    icmp_ln24_fu_464_p2 <= "1" when (i_0_reg_354 = ap_const_lv4_8) else "0";
    icmp_ln30_fu_739_p2 <= "1" when (indvar_flatten18_reg_365 = ap_const_lv9_188) else "0";
    icmp_ln31_fu_757_p2 <= "1" when (indvar_flatten_reg_387 = ap_const_lv7_38) else "0";
    icmp_ln34_3_fu_918_p2 <= "1" when (in_d_reg_1288 = ap_const_lv4_8) else "0";
    icmp_ln34_fu_815_p2 <= "1" when (ap_phi_mux_in_d_0_phi_fu_423_p4 = ap_const_lv4_8) else "0";
    in_d_fu_881_p2 <= std_logic_vector(unsigned(select_ln32_7_fu_847_p3) + unsigned(ap_const_lv4_1));
    input_r_address0 <= zext_ln37_5_fu_913_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        kernel_buffer_0_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(merge_i_fu_485_p66),32));

    merge_i_fu_485_p65 <= std_logic_vector(unsigned(shl_ln_reg_1217) + unsigned(zext_ln26_fu_476_p1));
    mul_ln37_fu_1022_p1 <= input_load_reg_1313;
    mul_ln37_fu_1022_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_5_reg_1318) * signed(mul_ln37_fu_1022_p1))), 32));
    or_ln32_fu_841_p2 <= (icmp_ln31_fu_757_p2 or and_ln37_fu_821_p2);
    out_d_fu_446_p2 <= std_logic_vector(unsigned(out_d_0_reg_331) + unsigned(ap_const_lv4_1));
    out_h_fu_751_p2 <= std_logic_vector(unsigned(out_h_0_reg_376) + unsigned(ap_const_lv3_1));
    out_w_fu_835_p2 <= std_logic_vector(unsigned(select_ln37_fu_763_p3) + unsigned(ap_const_lv3_1));
    output_r_address0 <= zext_ln44_fu_1094_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln43_fu_1066_p1 and select_ln43_fu_1076_p3);

    output_r_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln34_3_reg_1304_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (icmp_ln34_3_reg_1304_pp1_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln30_fu_827_p3 <= 
        out_h_fu_751_p2 when (icmp_ln31_fu_757_p2(0) = '1') else 
        out_h_0_reg_376;
    select_ln31_fu_893_p3 <= 
        ap_const_lv7_1 when (icmp_ln31_fu_757_p2(0) = '1') else 
        add_ln31_fu_887_p2;
    select_ln32_7_fu_847_p3 <= 
        ap_const_lv4_0 when (or_ln32_fu_841_p2(0) = '1') else 
        ap_phi_mux_in_d_0_phi_fu_423_p4;
    select_ln32_8_fu_859_p3 <= 
        out_w_fu_835_p2 when (and_ln37_fu_821_p2(0) = '1') else 
        select_ln37_fu_763_p3;
    select_ln32_9_fu_873_p3 <= 
        add_ln37_6_fu_867_p2 when (and_ln37_fu_821_p2(0) = '1') else 
        select_ln37_8_fu_801_p3;
    select_ln32_fu_1033_p3 <= 
        sext_ln28_reg_1235 when (and_ln37_reg_1261_pp1_iter3_reg(0) = '1') else 
        select_ln37_6_fu_1027_p3;
    select_ln37_6_fu_1027_p3 <= 
        sext_ln28_reg_1235 when (icmp_ln31_reg_1251_pp1_iter3_reg(0) = '1') else 
        buffer_0_reg_409;
    select_ln37_7_fu_793_p3 <= 
        sub_ln37_3_fu_787_p2 when (icmp_ln31_fu_757_p2(0) = '1') else 
        sub_ln37_fu_723_p2;
    select_ln37_8_fu_801_p3 <= 
        sub_ln37_3_fu_787_p2 when (icmp_ln31_fu_757_p2(0) = '1') else 
        add_ln37_fu_733_p2;
    select_ln37_fu_763_p3 <= 
        ap_const_lv3_0 when (icmp_ln31_fu_757_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_402_p4;
    select_ln43_fu_1076_p3 <= 
        ap_const_lv16_FFFF when (xor_ln43_fu_1070_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln28_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_2_b_s_q0),22));

        sext_ln37_4_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1039_p4),22));

        sext_ln37_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1099_p3),32));

        sext_ln44_2_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln44_1_reg_1308_pp1_iter3_reg),32));

        sext_ln44_fu_928_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln44_fu_923_p2),10));

    shl_ln2_fu_711_p3 <= (out_h_0_reg_376 & ap_const_lv3_0);
    shl_ln37_mid1_fu_775_p3 <= (out_h_fu_751_p2 & ap_const_lv3_0);
    shl_ln_fu_456_p3 <= (trunc_ln26_fu_452_p1 & ap_const_lv3_0);
    sub_ln37_3_fu_787_p2 <= std_logic_vector(unsigned(zext_ln37_14_fu_783_p1) - unsigned(zext_ln37_13_fu_771_p1));
    sub_ln37_fu_723_p2 <= std_logic_vector(unsigned(zext_ln37_11_fu_719_p1) - unsigned(zext_ln37_fu_707_p1));
    tmp_3_fu_1058_p3 <= buffer_fu_1052_p2(21 downto 21);
    trunc_ln26_fu_452_p1 <= out_d_0_reg_331(3 - 1 downto 0);
    trunc_ln43_fu_1066_p1 <= buffer_fu_1052_p2(16 - 1 downto 0);
    trunc_ln_fu_1039_p4 <= mul_ln37_reg_1323(31 downto 14);
    xor_ln37_fu_809_p2 <= (icmp_ln31_fu_757_p2 xor ap_const_lv1_1);
    xor_ln43_fu_1070_p2 <= (tmp_3_fu_1058_p3 xor ap_const_lv1_1);
    zext_ln22_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_343),10));
    zext_ln26_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_354),6));
    zext_ln28_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_331),64));
    zext_ln32_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_8_reg_1277),7));
    zext_ln34_3_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_835_p2),7));
    zext_ln34_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_w_0_phi_fu_402_p4),7));
    zext_ln37_11_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_711_p3),7));
    zext_ln37_13_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_751_p2),7));
    zext_ln37_14_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln37_mid1_fu_775_p3),7));
    zext_ln37_5_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_fu_910_p1),64));
    zext_ln37_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_376),7));
    zext_ln44_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln44_2_fu_1091_p1),64));
end behav;
