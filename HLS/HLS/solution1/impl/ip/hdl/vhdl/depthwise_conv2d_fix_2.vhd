-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten48_reg_304 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_0_reg_316 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_328 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_339 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_350 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_361 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_1243 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_366 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_374 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_379 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_reg_1243_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_384 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln40_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_reg_1189 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_1_cast14_fu_397_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_cast14_reg_1195 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln48_fu_401_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_reg_1202 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_cast_fu_405_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln48_1_cast_reg_1208 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_409_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1213 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_425_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln4_reg_1218 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_431_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_reg_1223 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln33_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln48_1_fu_445_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_reg_1233 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_reg_1233_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_2_cast_fu_480_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_2_cast_reg_1238 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_2_cast_reg_1238_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln23_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1247 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln32_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1252 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1252_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_506_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_reg_1260 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln48_2_fu_514_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_2_reg_1265 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_1_fu_544_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_1_reg_1270 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_7_fu_583_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_7_reg_1287 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_7_reg_1287_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_590_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1293 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_fu_602_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1298 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_2_cast_mid_fu_610_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_2_cast_mid_reg_1305 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_2_cast_mid_reg_1305_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_v_v_fu_620_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_v_v_reg_1310 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln32_1_fu_628_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_1_reg_1317 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_0_0_mid2_fu_657_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_0_0_mid2_reg_1332 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_fu_671_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_reg_1339 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_fu_705_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_reg_1356 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_fu_710_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_reg_1363 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_1_reg_1363_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_fu_723_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1375 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_3_fu_728_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_3_reg_1380 : STD_LOGIC_VECTOR (13 downto 0);
    signal kernel_load_4_reg_1391 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln48_1_fu_762_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln48_1_reg_1406 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln40_5_fu_771_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln40_5_reg_1412 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_fu_794_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_reg_1428 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln24_2_fu_828_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_2_reg_1443 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_fu_834_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_reg_1449 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_reg_1454 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_s_reg_1459 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_13_fu_883_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_13_reg_1474 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln48_1_reg_1484 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_2_reg_1489 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_10_fu_945_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_10_reg_1504 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln48_3_reg_1509 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_4_reg_1514 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_4_fu_1000_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_4_reg_1524 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_mid2_v_v_fu_1040_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_mid2_v_v_reg_1529 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln48_5_reg_1534 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_6_reg_1539 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_5_fu_1073_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_5_reg_1544 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_7_reg_1549 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1176_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln48_reg_1554 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln48_9_fu_1111_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_9_reg_1559 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten48_phi_fu_308_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_320_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_332_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_343_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_354_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln24_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln24_2_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_3_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_4_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_2_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_4_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_6_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_6_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_7_fu_789_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_7_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_8_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_8_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_9_fu_878_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_9_fu_897_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_10_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_11_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_12_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_1116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4_fu_389_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_54_fu_413_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_425_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_425_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_fu_453_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_457_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_1_fu_465_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_fu_475_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_fu_475_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_fu_475_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln27_1_fu_522_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln27_mid1_fu_526_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_2_fu_518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_3_fu_534_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_4_fu_538_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_fu_469_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_1_fu_557_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_1_fu_557_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_1_fu_557_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_fu_484_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln33_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_3_fu_562_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_mid1_fu_614_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_5_fu_570_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln24_fu_634_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_3_fu_644_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_0_0_mid2_fu_657_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_657_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_v_v_fu_662_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_fu_671_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_671_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln24_4_fu_676_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_5_fu_686_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_2_0_mid2_v_v_fu_696_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_2_0_mid2_fu_705_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_fu_705_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln40_fu_713_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_2_fu_732_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_6_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_7_fu_752_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln48_1_fu_762_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln48_1_fu_762_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln40_3_fu_766_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_4_fu_775_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_5_fu_785_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_8_fu_808_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_9_fu_818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln40_2_fu_1120_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_3_fu_1127_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln40_6_fu_865_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_7_fu_874_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln40_4_fu_1134_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_5_fu_1141_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln40_8_fu_927_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln40_9_fu_936_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln40_6_fu_1148_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_7_fu_1155_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln48_2_fu_991_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_1_fu_986_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_3_fu_995_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln48_fu_1006_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln48_fu_1006_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln48_fu_1006_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_fu_1010_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_4_fu_1023_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_mid1_fu_1035_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_6_fu_1029_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_8_fu_1162_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_9_fu_1169_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_10_fu_1182_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln48_6_fu_1097_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_7_fu_1101_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_8_fu_1106_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1176_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1176_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1176_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1176_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln40_1_fu_557_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln40_fu_475_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln4_fu_425_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln4_fu_425_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_0_0_mid2_fu_657_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_fu_671_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_fu_705_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_condition_150 : BOOLEAN;
    signal ap_condition_135 : BOOLEAN;

    component network_mul_mul_16s_16s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component network_mac_muladd_6ns_9ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_29_1_1_U34 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_379,
        din1 => reg_361,
        dout => mul_ln40_2_fu_1120_p2);

    network_mul_mul_16s_16s_29_1_1_U35 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_384,
        din1 => reg_366,
        dout => mul_ln40_3_fu_1127_p2);

    network_mul_mul_16s_16s_29_1_1_U36 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_379,
        din1 => reg_370,
        dout => mul_ln40_4_fu_1134_p2);

    network_mul_mul_16s_16s_29_1_1_U37 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_384,
        din1 => reg_374,
        dout => mul_ln40_5_fu_1141_p2);

    network_mul_mul_16s_16s_29_1_1_U38 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_379,
        din1 => kernel_load_4_reg_1391,
        dout => mul_ln40_6_fu_1148_p2);

    network_mul_mul_16s_16s_29_1_1_U39 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_384,
        din1 => reg_361,
        dout => mul_ln40_7_fu_1155_p2);

    network_mul_mul_16s_16s_29_1_1_U40 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_379,
        din1 => reg_366,
        dout => mul_ln40_8_fu_1162_p2);

    network_mul_mul_16s_16s_29_1_1_U41 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_384,
        din1 => reg_370,
        dout => mul_ln40_9_fu_1169_p2);

    network_mac_muladd_6ns_9ns_5ns_14_1_1_U42 : component network_mac_muladd_6ns_9ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1176_p0,
        din1 => grp_fu_1176_p1,
        din2 => grp_fu_1176_p2,
        dout => grp_fu_1176_p3);

    network_mul_mul_16s_16s_29_1_1_U43 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_379,
        din1 => reg_374,
        dout => mul_ln40_10_fu_1182_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln23_reg_1243 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state9) and (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten48_reg_304 <= add_ln23_reg_1428;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten48_reg_304 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_328 <= select_ln32_13_reg_1474;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_328 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_316 <= select_ln24_2_reg_1443;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_316 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_339 <= select_ln32_reg_1449;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_339 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_350 <= out_w_reg_1375;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_350 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                    reg_361 <= kernel_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_361 <= kernel_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln23_reg_1243 = ap_const_lv1_0)) then
                if ((ap_const_boolean_1 = ap_condition_135)) then 
                    reg_374 <= kernel_q0;
                elsif ((ap_const_boolean_1 = ap_condition_150)) then 
                    reg_374 <= kernel_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
                reg_379 <= input_r_q0;
            elsif ((((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_379 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                reg_384 <= input_r_q1;
            elsif ((((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_384 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln23_reg_1428 <= add_ln23_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln32_1_reg_1317 <= add_ln32_1_fu_628_p2;
                icmp_ln32_reg_1252 <= icmp_ln32_fu_501_p2;
                out_d_reg_1247 <= out_d_fu_495_p2;
                out_h_reg_1293 <= out_h_fu_590_p2;
                out_w_0_mid2_reg_1298 <= out_w_0_mid2_fu_602_p3;
                select_ln24_1_reg_1270 <= select_ln24_1_fu_544_p3;
                select_ln24_7_reg_1287 <= select_ln24_7_fu_583_p3;
                select_ln24_reg_1260 <= select_ln24_fu_506_p3;
                tmp10_0_0_mid2_v_v_reg_1310 <= tmp10_0_0_mid2_v_v_fu_620_p3;
                    zext_ln40_2_cast_mid_reg_1305(4 downto 0) <= zext_ln40_2_cast_mid_fu_610_p1(4 downto 0);
                    zext_ln48_2_reg_1265(4 downto 0) <= zext_ln48_2_fu_514_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln40_10_reg_1504 <= add_ln40_10_fu_945_p2;
                trunc_ln48_1_reg_1484 <= mul_ln40_4_fu_1134_p2(28 downto 13);
                trunc_ln48_2_reg_1489 <= mul_ln40_5_fu_1141_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_4_reg_1524 <= add_ln48_4_fu_1000_p2;
                trunc_ln48_3_reg_1509 <= mul_ln40_6_fu_1148_p2(28 downto 13);
                trunc_ln48_4_reg_1514 <= mul_ln40_7_fu_1155_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln48_5_reg_1544 <= add_ln48_5_fu_1073_p2;
                tmp12_mid2_v_v_reg_1529 <= tmp12_mid2_v_v_fu_1040_p3;
                trunc_ln48_5_reg_1534 <= mul_ln40_8_fu_1162_p2(28 downto 13);
                trunc_ln48_6_reg_1539 <= mul_ln40_9_fu_1169_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln48_9_reg_1559 <= add_ln48_9_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln48_reg_1554 <= grp_fu_1176_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1213 <= empty_fu_409_p1;
                icmp_ln33_reg_1228 <= icmp_ln33_fu_439_p2;
                mul_ln4_reg_1218 <= mul_ln4_fu_425_p2;
                    tmp_1_reg_1223(13 downto 4) <= tmp_1_fu_431_p3(13 downto 4);
                    zext_ln40_1_cast14_reg_1195(6 downto 0) <= zext_ln40_1_cast14_fu_397_p1(6 downto 0);
                    zext_ln40_reg_1189(6 downto 0) <= zext_ln40_fu_393_p1(6 downto 0);
                    zext_ln48_1_cast_reg_1208(5 downto 0) <= zext_ln48_1_cast_fu_405_p1(5 downto 0);
                    zext_ln48_reg_1202(5 downto 0) <= zext_ln48_fu_401_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln23_reg_1243 <= icmp_ln23_fu_490_p2;
                icmp_ln23_reg_1243_pp0_iter1_reg <= icmp_ln23_reg_1243;
                icmp_ln32_reg_1252_pp0_iter1_reg <= icmp_ln32_reg_1252;
                select_ln24_7_reg_1287_pp0_iter1_reg <= select_ln24_7_reg_1287;
                    zext_ln40_2_cast_mid_reg_1305_pp0_iter1_reg(4 downto 0) <= zext_ln40_2_cast_mid_reg_1305(4 downto 0);
                    zext_ln40_2_cast_reg_1238(4 downto 0) <= zext_ln40_2_cast_fu_480_p1(4 downto 0);
                    zext_ln40_2_cast_reg_1238_pp0_iter1_reg(4 downto 0) <= zext_ln40_2_cast_reg_1238(4 downto 0);
                    zext_ln48_1_reg_1233(4 downto 0) <= zext_ln48_1_fu_445_p1(4 downto 0);
                    zext_ln48_1_reg_1233_pp0_iter1_reg(4 downto 0) <= zext_ln48_1_reg_1233(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                kernel_load_4_reg_1391 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_ln48_1_reg_1406 <= mul_ln48_1_fu_762_p2;
                    zext_ln40_5_reg_1412(4 downto 0) <= zext_ln40_5_fu_771_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_w_reg_1375 <= out_w_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_366 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_370 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln24_2_reg_1443 <= select_ln24_2_fu_828_p3;
                select_ln32_13_reg_1474 <= select_ln32_13_fu_883_p3;
                select_ln32_reg_1449 <= select_ln32_fu_834_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp10_0_0_mid2_reg_1332 <= tmp10_0_0_mid2_fu_657_p2;
                tmp10_1_0_mid2_reg_1339 <= tmp10_1_0_mid2_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp10_2_0_mid2_reg_1356 <= tmp10_2_0_mid2_fu_705_p2;
                    zext_ln40_1_reg_1363(4 downto 0) <= zext_ln40_1_fu_710_p1(4 downto 0);
                    zext_ln40_3_reg_1380(4 downto 0) <= zext_ln40_3_fu_728_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                trunc_ln48_7_reg_1549 <= mul_ln40_10_fu_1182_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                trunc_ln48_s_reg_1459 <= mul_ln40_3_fu_1127_p2(28 downto 13);
                trunc_ln_reg_1454 <= mul_ln40_2_fu_1120_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                    zext_ln40_1_reg_1363_pp0_iter1_reg(4 downto 0) <= zext_ln40_1_reg_1363(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln40_reg_1189(8 downto 7) <= "00";
    zext_ln40_1_cast14_reg_1195(13 downto 7) <= "0000000";
    zext_ln48_reg_1202(8 downto 6) <= "000";
    zext_ln48_1_cast_reg_1208(13 downto 6) <= "00000000";
    tmp_1_reg_1223(3 downto 0) <= "0000";
    zext_ln48_1_reg_1233(8 downto 5) <= "0000";
    zext_ln48_1_reg_1233_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln40_2_cast_reg_1238(8 downto 5) <= "0000";
    zext_ln40_2_cast_reg_1238_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln48_2_reg_1265(8 downto 5) <= "0000";
    zext_ln40_2_cast_mid_reg_1305(8 downto 5) <= "0000";
    zext_ln40_2_cast_mid_reg_1305_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln40_1_reg_1363(13 downto 5) <= "000000000";
    zext_ln40_1_reg_1363_pp0_iter1_reg(13 downto 5) <= "000000000";
    zext_ln40_3_reg_1380(13 downto 5) <= "000000000";
    zext_ln40_5_reg_1412(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln23_fu_794_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(indvar_flatten48_reg_304));
    add_ln24_3_fu_644_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(select_ln24_1_reg_1270));
    add_ln24_4_fu_676_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(select_ln24_1_reg_1270));
    add_ln24_5_fu_686_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(select_ln24_1_reg_1270));
    add_ln24_6_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(select_ln24_1_reg_1270));
    add_ln24_7_fu_752_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(select_ln24_1_reg_1270));
    add_ln24_8_fu_808_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(select_ln24_1_reg_1270));
    add_ln24_9_fu_818_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(select_ln24_1_reg_1270));
    add_ln24_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln24_1_reg_1270));
    add_ln27_4_fu_538_p2 <= std_logic_vector(unsigned(zext_ln27_2_fu_518_p1) + unsigned(zext_ln27_3_fu_534_p1));
    add_ln27_fu_469_p2 <= std_logic_vector(unsigned(zext_ln27_fu_449_p1) + unsigned(zext_ln27_1_fu_465_p1));
    add_ln32_1_fu_628_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_332_p4));
    add_ln40_10_fu_945_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1356) + unsigned(zext_ln40_5_reg_1412));
    add_ln40_2_fu_732_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1332) + unsigned(zext_ln40_3_fu_728_p1));
    add_ln40_3_fu_766_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(out_w_0_mid2_reg_1298));
    add_ln40_4_fu_775_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1332) + unsigned(zext_ln40_5_fu_771_p1));
    add_ln40_5_fu_785_p2 <= std_logic_vector(unsigned(zext_ln40_1_reg_1363) + unsigned(tmp10_1_0_mid2_reg_1339));
    add_ln40_6_fu_865_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1339) + unsigned(zext_ln40_3_reg_1380));
    add_ln40_7_fu_874_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1339) + unsigned(zext_ln40_5_reg_1412));
    add_ln40_8_fu_927_p2 <= std_logic_vector(unsigned(zext_ln40_1_reg_1363) + unsigned(tmp10_2_0_mid2_reg_1356));
    add_ln40_9_fu_936_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1356) + unsigned(zext_ln40_3_reg_1380));
    add_ln40_fu_713_p2 <= std_logic_vector(unsigned(zext_ln40_1_fu_710_p1) + unsigned(tmp10_0_0_mid2_reg_1332));
    add_ln48_1_fu_986_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1454) + unsigned(bias_q0));
    add_ln48_2_fu_991_p2 <= std_logic_vector(unsigned(trunc_ln48_2_reg_1489) + unsigned(trunc_ln48_1_reg_1484));
    add_ln48_3_fu_995_p2 <= std_logic_vector(unsigned(trunc_ln48_s_reg_1459) + unsigned(add_ln48_2_fu_991_p2));
    add_ln48_4_fu_1000_p2 <= std_logic_vector(unsigned(add_ln48_1_fu_986_p2) + unsigned(add_ln48_3_fu_995_p2));
    add_ln48_5_fu_1073_p2 <= std_logic_vector(unsigned(trunc_ln48_4_reg_1514) + unsigned(trunc_ln48_3_reg_1509));
    add_ln48_6_fu_1097_p2 <= std_logic_vector(unsigned(trunc_ln48_7_reg_1549) + unsigned(trunc_ln48_6_reg_1539));
    add_ln48_7_fu_1101_p2 <= std_logic_vector(unsigned(trunc_ln48_5_reg_1534) + unsigned(add_ln48_6_fu_1097_p2));
    add_ln48_8_fu_1106_p2 <= std_logic_vector(unsigned(add_ln48_5_reg_1544) + unsigned(add_ln48_7_fu_1101_p2));
    add_ln48_9_fu_1111_p2 <= std_logic_vector(unsigned(add_ln48_4_reg_1524) + unsigned(add_ln48_8_fu_1106_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_135_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_135 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_150_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
                ap_condition_150 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001));
    end process;


    ap_condition_pp0_exit_iter1_state9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten48_phi_fu_308_p4_assign_proc : process(indvar_flatten48_reg_304, icmp_ln23_reg_1243, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln23_reg_1428, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten48_phi_fu_308_p4 <= add_ln23_reg_1428;
        else 
            ap_phi_mux_indvar_flatten48_phi_fu_308_p4 <= indvar_flatten48_reg_304;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_332_p4_assign_proc : process(indvar_flatten_reg_328, icmp_ln23_reg_1243, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_13_reg_1474, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= select_ln32_13_reg_1474;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= indvar_flatten_reg_328;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_320_p4_assign_proc : process(out_d_0_reg_316, icmp_ln23_reg_1243, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln24_2_reg_1443, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_320_p4 <= select_ln24_2_reg_1443;
        else 
            ap_phi_mux_out_d_0_phi_fu_320_p4 <= out_d_0_reg_316;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_343_p4_assign_proc : process(out_h_0_reg_339, icmp_ln23_reg_1243, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_reg_1449, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_343_p4 <= select_ln32_reg_1449;
        else 
            ap_phi_mux_out_h_0_phi_fu_343_p4 <= out_h_0_reg_339;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_354_p4_assign_proc : process(out_w_0_reg_350, icmp_ln23_reg_1243, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1375, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1243 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_354_p4 <= out_w_reg_1375;
        else 
            ap_phi_mux_out_w_0_phi_fu_354_p4 <= out_w_0_reg_350;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln24_9_fu_897_p1(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_54_fu_413_p1 <= output_height(5 - 1 downto 0);
    empty_56_fu_596_p2 <= (select_ln24_7_fu_583_p3 or icmp_ln32_fu_501_p2);
    empty_fu_409_p1 <= output_width(5 - 1 downto 0);
    grp_fu_1176_p0 <= zext_ln48_1_cast_reg_1208(6 - 1 downto 0);
    grp_fu_1176_p1 <= grp_fu_1176_p10(9 - 1 downto 0);
    grp_fu_1176_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_mid2_v_v_reg_1529),14));
    grp_fu_1176_p2 <= zext_ln40_1_reg_1363_pp0_iter1_reg(5 - 1 downto 0);
    icmp_ln23_fu_490_p2 <= "1" when (ap_phi_mux_indvar_flatten48_phi_fu_308_p4 = tmp_1_reg_1223) else "0";
    icmp_ln32_fu_501_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_332_p4 = mul_ln4_reg_1218) else "0";
    icmp_ln33_1_fu_578_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_354_p4 = empty_reg_1213) else "0";
    icmp_ln33_fu_439_p2 <= "1" when (empty_fu_409_p1 = ap_const_lv5_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln40_4_fu_737_p1, ap_block_pp0_stage3, zext_ln40_7_fu_789_p1, ap_block_pp0_stage4, zext_ln40_9_fu_878_p1, zext_ln40_10_fu_931_p1, zext_ln40_12_fu_982_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_12_fu_982_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln40_10_fu_931_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_9_fu_878_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln40_7_fu_789_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln40_4_fu_737_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln40_2_fu_718_p1, ap_block_pp0_stage3, zext_ln40_6_fu_780_p1, ap_block_pp0_stage4, zext_ln40_8_fu_869_p1, zext_ln40_11_fu_940_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln40_11_fu_940_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln40_8_fu_869_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln40_6_fu_780_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln40_2_fu_718_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln24_fu_552_p1, zext_ln24_1_fu_639_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln24_4_fu_691_p1, ap_block_pp0_stage3, zext_ln24_6_fu_757_p1, ap_block_pp0_stage4, zext_ln24_8_fu_823_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= zext_ln24_8_fu_823_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= zext_ln24_6_fu_757_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= zext_ln24_4_fu_691_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= zext_ln24_1_fu_639_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= zext_ln24_fu_552_p1(8 - 1 downto 0);
            else 
                kernel_address0 <= "XXXXXXXX";
            end if;
        else 
            kernel_address0 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, zext_ln24_2_fu_649_p1, zext_ln24_3_fu_681_p1, ap_block_pp0_stage2, zext_ln24_5_fu_747_p1, ap_block_pp0_stage3, zext_ln24_7_fu_813_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address1 <= zext_ln24_7_fu_813_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= zext_ln24_5_fu_747_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= zext_ln24_3_fu_681_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= zext_ln24_2_fu_649_p1(8 - 1 downto 0);
            else 
                kernel_address1 <= "XXXXXXXX";
            end if;
        else 
            kernel_address1 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln40_1_fu_557_p0 <= mul_ln40_1_fu_557_p00(5 - 1 downto 0);
    mul_ln40_1_fu_557_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_495_p2),9));
    mul_ln40_1_fu_557_p1 <= zext_ln40_reg_1189(7 - 1 downto 0);
    mul_ln40_1_fu_557_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_1_fu_557_p0) * unsigned(mul_ln40_1_fu_557_p1), 9));
    mul_ln40_fu_475_p0 <= mul_ln40_fu_475_p00(5 - 1 downto 0);
    mul_ln40_fu_475_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4),9));
    mul_ln40_fu_475_p1 <= zext_ln40_reg_1189(7 - 1 downto 0);
    mul_ln40_fu_475_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_fu_475_p0) * unsigned(mul_ln40_fu_475_p1), 9));
    mul_ln48_1_fu_762_p0 <= zext_ln48_2_reg_1265(5 - 1 downto 0);
    mul_ln48_1_fu_762_p1 <= zext_ln48_reg_1202(6 - 1 downto 0);
    mul_ln48_1_fu_762_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_1_fu_762_p0) * unsigned(mul_ln48_1_fu_762_p1), 9));
    mul_ln48_fu_1006_p0 <= zext_ln48_1_reg_1233_pp0_iter1_reg(5 - 1 downto 0);
    mul_ln48_fu_1006_p1 <= zext_ln48_reg_1202(6 - 1 downto 0);
    mul_ln48_fu_1006_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_fu_1006_p0) * unsigned(mul_ln48_fu_1006_p1), 9));
    mul_ln4_fu_425_p0 <= mul_ln4_fu_425_p00(5 - 1 downto 0);
    mul_ln4_fu_425_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_54_fu_413_p1),10));
    mul_ln4_fu_425_p1 <= mul_ln4_fu_425_p10(5 - 1 downto 0);
    mul_ln4_fu_425_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_409_p1),10));
    mul_ln4_fu_425_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln4_fu_425_p0) * unsigned(mul_ln4_fu_425_p1), 10));
    out_d_fu_495_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4));
    out_h_fu_590_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln24_fu_506_p3));
    out_w_0_mid2_fu_602_p3 <= 
        ap_const_lv5_0 when (empty_56_fu_596_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_354_p4;
    out_w_fu_723_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(out_w_0_mid2_reg_1298));
    output_r_address0 <= zext_ln48_3_fu_1116_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln48_9_reg_1559;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln23_reg_1243_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln23_reg_1243_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_1_fu_544_p3 <= 
        add_ln27_4_fu_538_p2 when (icmp_ln32_fu_501_p2(0) = '1') else 
        add_ln27_fu_469_p2;
    select_ln24_2_fu_828_p3 <= 
        out_d_reg_1247 when (icmp_ln32_reg_1252(0) = '1') else 
        out_d_0_reg_316;
    select_ln24_3_fu_562_p3 <= 
        mul_ln40_1_fu_557_p2 when (icmp_ln32_fu_501_p2(0) = '1') else 
        mul_ln40_fu_475_p2;
    select_ln24_4_fu_1023_p3 <= 
        mul_ln48_1_reg_1406 when (icmp_ln32_reg_1252_pp0_iter1_reg(0) = '1') else 
        mul_ln48_fu_1006_p2;
    select_ln24_5_fu_570_p3 <= 
        mul_ln40_1_fu_557_p2 when (icmp_ln32_fu_501_p2(0) = '1') else 
        tmp_0_0_fu_484_p2;
    select_ln24_6_fu_1029_p3 <= 
        mul_ln48_1_reg_1406 when (icmp_ln32_reg_1252_pp0_iter1_reg(0) = '1') else 
        tmp11_fu_1010_p2;
    select_ln24_7_fu_583_p3 <= 
        icmp_ln33_reg_1228 when (icmp_ln32_fu_501_p2(0) = '1') else 
        icmp_ln33_1_fu_578_p2;
    select_ln24_fu_506_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_fu_501_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_343_p4;
    select_ln32_13_fu_883_p3 <= 
        ap_const_lv10_1 when (icmp_ln32_reg_1252(0) = '1') else 
        add_ln32_1_reg_1317;
    select_ln32_fu_834_p3 <= 
        out_h_reg_1293 when (select_ln24_7_reg_1287(0) = '1') else 
        select_ln24_reg_1260;
        sext_ln4_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    shl_ln27_mid1_fu_526_p3 <= (trunc_ln27_1_fu_522_p1 & ap_const_lv3_0);
    shl_ln_fu_457_p3 <= (trunc_ln27_fu_453_p1 & ap_const_lv3_0);
    tmp10_0_0_mid2_fu_657_p0 <= zext_ln40_1_cast14_reg_1195(7 - 1 downto 0);
    tmp10_0_0_mid2_fu_657_p1 <= tmp10_0_0_mid2_fu_657_p10(9 - 1 downto 0);
    tmp10_0_0_mid2_fu_657_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_reg_1310),14));
    tmp10_0_0_mid2_fu_657_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_fu_657_p0) * unsigned(tmp10_0_0_mid2_fu_657_p1), 14));
    tmp10_0_0_mid2_v_v_fu_620_p3 <= 
        tmp_0_0_mid1_fu_614_p2 when (select_ln24_7_fu_583_p3(0) = '1') else 
        select_ln24_5_fu_570_p3;
    tmp10_1_0_mid2_fu_671_p0 <= zext_ln40_1_cast14_reg_1195(7 - 1 downto 0);
    tmp10_1_0_mid2_fu_671_p1 <= tmp10_1_0_mid2_fu_671_p10(9 - 1 downto 0);
    tmp10_1_0_mid2_fu_671_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_v_v_fu_662_p2),14));
    tmp10_1_0_mid2_fu_671_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_fu_671_p0) * unsigned(tmp10_1_0_mid2_fu_671_p1), 14));
    tmp10_1_0_mid2_v_v_fu_662_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp10_0_0_mid2_v_v_reg_1310));
    tmp10_2_0_mid2_fu_705_p0 <= zext_ln40_1_cast14_reg_1195(7 - 1 downto 0);
    tmp10_2_0_mid2_fu_705_p1 <= tmp10_2_0_mid2_fu_705_p10(9 - 1 downto 0);
    tmp10_2_0_mid2_fu_705_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_v_v_fu_696_p2),14));
    tmp10_2_0_mid2_fu_705_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_fu_705_p0) * unsigned(tmp10_2_0_mid2_fu_705_p1), 14));
    tmp10_2_0_mid2_v_v_fu_696_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(tmp10_0_0_mid2_v_v_reg_1310));
    tmp11_fu_1010_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_reg_1238_pp0_iter1_reg) + unsigned(mul_ln48_fu_1006_p2));
    tmp11_mid1_fu_1035_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_reg_1305_pp0_iter1_reg) + unsigned(select_ln24_4_fu_1023_p3));
    tmp12_mid2_v_v_fu_1040_p3 <= 
        tmp11_mid1_fu_1035_p2 when (select_ln24_7_reg_1287_pp0_iter1_reg(0) = '1') else 
        select_ln24_6_fu_1029_p3;
    tmp_0_0_fu_484_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_fu_480_p1) + unsigned(mul_ln40_fu_475_p2));
    tmp_0_0_mid1_fu_614_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_fu_610_p1) + unsigned(select_ln24_3_fu_562_p3));
    tmp_1_fu_431_p3 <= (mul_ln4_fu_425_p2 & ap_const_lv4_0);
    trunc_ln27_1_fu_522_p1 <= out_d_fu_495_p2(4 - 1 downto 0);
    trunc_ln27_fu_453_p1 <= ap_phi_mux_out_d_0_phi_fu_320_p4(4 - 1 downto 0);
    zext_ln24_1_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_634_p2),64));
    zext_ln24_2_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_3_fu_644_p2),64));
    zext_ln24_3_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_4_fu_676_p2),64));
    zext_ln24_4_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_5_fu_686_p2),64));
    zext_ln24_5_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_6_fu_742_p2),64));
    zext_ln24_6_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_7_fu_752_p2),64));
    zext_ln24_7_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_8_fu_808_p2),64));
    zext_ln24_8_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_9_fu_818_p2),64));
    zext_ln24_9_fu_897_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_2_reg_1443),64));
    zext_ln24_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_fu_544_p3),64));
    zext_ln27_1_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_457_p3),8));
    zext_ln27_2_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_495_p2),8));
    zext_ln27_3_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln27_mid1_fu_526_p3),8));
    zext_ln27_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4),8));
    zext_ln40_10_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_8_fu_927_p2),64));
    zext_ln40_11_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_9_fu_936_p2),64));
    zext_ln40_12_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_10_reg_1504),64));
    zext_ln40_1_cast14_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln4_fu_389_p1),14));
    zext_ln40_1_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1298),14));
    zext_ln40_2_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_343_p4),9));
    zext_ln40_2_cast_mid_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_590_p2),9));
    zext_ln40_2_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_713_p2),64));
    zext_ln40_3_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_723_p2),14));
    zext_ln40_4_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_2_fu_732_p2),64));
    zext_ln40_5_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_3_fu_766_p2),14));
    zext_ln40_6_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_4_fu_775_p2),64));
    zext_ln40_7_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_5_fu_785_p2),64));
    zext_ln40_8_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_6_fu_865_p2),64));
    zext_ln40_9_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_7_fu_874_p2),64));
    zext_ln40_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln48_1_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln48_1_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4),9));
    zext_ln48_2_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_495_p2),9));
    zext_ln48_3_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1554),64));
    zext_ln48_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
