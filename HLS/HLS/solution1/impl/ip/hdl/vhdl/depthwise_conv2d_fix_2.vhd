-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten48_reg_304 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_0_reg_316 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_328 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_340 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_352 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_364 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_1239 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_369 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_373 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_377 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_382 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_reg_1239_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_387 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln38_fu_396_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_reg_1184 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_1_cast14_fu_400_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln38_1_cast14_reg_1190 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln46_fu_404_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_reg_1197 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_1_cast_fu_408_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln46_1_cast_reg_1203 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_412_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1208 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_428_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln4_reg_1213 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_434_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_reg_1218 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln33_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1223 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_1_fu_448_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_1_reg_1228 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_1_reg_1228_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln38_fu_478_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln38_reg_1233 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln23_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_488_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_1243 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln32_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1248 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1248_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_499_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_reg_1260 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln46_2_fu_507_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_2_reg_1265 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_1_fu_537_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln24_1_reg_1270 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_1_fu_550_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln38_1_reg_1287 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln33_1_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_reg_1293 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_560_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1298 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_2_cast_fu_566_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_2_cast_reg_1304 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_2_cast_reg_1304_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_7_fu_606_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_7_reg_1319 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_7_reg_1319_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_0_mid2_fu_616_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1325 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_2_cast_mid_fu_624_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_2_cast_mid_reg_1332 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_2_cast_mid_reg_1332_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_v_v_fu_633_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_v_v_reg_1337 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_fu_645_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_0_0_mid2_reg_1342 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_fu_660_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_reg_1349 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_1_fu_665_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_1_reg_1356 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_2_0_mid2_fu_700_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_reg_1371 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln38_1_fu_705_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln38_1_reg_1378 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln38_1_reg_1378_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_fu_718_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1390 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_3_fu_723_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln38_3_reg_1395 : STD_LOGIC_VECTOR (13 downto 0);
    signal kernel_load_4_reg_1406 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln46_1_fu_757_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln46_1_reg_1421 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_5_fu_766_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln38_5_reg_1427 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_fu_789_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln23_reg_1443 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln24_2_fu_823_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_2_reg_1458 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_fu_829_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_reg_1464 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln_reg_1469 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_s_reg_1474 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_1_fu_878_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_1_reg_1489 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln46_1_reg_1499 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_2_reg_1504 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln38_10_fu_940_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln38_10_reg_1519 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln46_3_reg_1524 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_4_reg_1529 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_4_fu_995_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_4_reg_1539 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_mid2_v_v_fu_1035_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_mid2_v_v_reg_1544 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln46_5_reg_1549 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_6_reg_1554 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_5_fu_1068_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_5_reg_1559 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_7_reg_1564 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1171_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln46_reg_1569 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln46_9_fu_1106_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_9_reg_1574 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten48_phi_fu_308_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_320_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_332_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_344_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_356_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln24_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln24_2_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_3_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_4_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_2_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_4_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_5_fu_742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_6_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_6_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_7_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_7_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_8_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_8_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_9_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_9_fu_892_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_10_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_11_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_12_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_3_fu_1111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln4_fu_392_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_58_fu_416_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_428_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln4_fu_428_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln27_fu_456_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_460_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_452_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_1_fu_468_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_fu_478_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln38_fu_478_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln27_1_fu_515_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln27_mid1_fu_519_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_2_fu_511_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_3_fu_527_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_1_fu_531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_fu_472_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_1_fu_550_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln38_1_fu_550_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_1_fu_585_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_0_0_fu_570_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_60_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_3_fu_595_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_0_mid1_fu_627_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_5_fu_600_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_0_0_mid2_fu_645_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_645_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_v_v_fu_650_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_1_0_mid2_fu_660_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_660_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln24_2_fu_671_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_3_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_2_0_mid2_v_v_fu_691_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp10_2_0_mid2_fu_700_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_fu_700_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_fu_708_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln38_2_fu_727_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_4_fu_737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_5_fu_747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln46_1_fu_757_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln46_1_fu_757_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln38_3_fu_761_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln38_4_fu_770_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln38_5_fu_780_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_6_fu_803_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_7_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_2_fu_1115_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_3_fu_1122_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln38_6_fu_860_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln38_7_fu_869_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln38_4_fu_1129_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_5_fu_1136_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln38_8_fu_922_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln38_9_fu_931_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln38_6_fu_1143_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_7_fu_1150_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln46_2_fu_986_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_1_fu_981_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_3_fu_990_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln46_fu_1001_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln46_fu_1001_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln46_fu_1001_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_fu_1005_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_4_fu_1018_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp11_mid1_fu_1030_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln24_6_fu_1024_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln38_8_fu_1157_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_9_fu_1164_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_10_fu_1177_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln46_6_fu_1092_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_7_fu_1096_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_8_fu_1101_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1171_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1171_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1171_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1171_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln38_1_fu_550_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln38_fu_478_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln4_fu_428_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln4_fu_428_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_0_0_mid2_fu_645_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_1_0_mid2_fu_660_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_2_0_mid2_fu_700_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_condition_150 : BOOLEAN;
    signal ap_condition_135 : BOOLEAN;

    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component network_mac_muladd_6ns_9ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_1_1_U34 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_382,
        din1 => reg_364,
        dout => mul_ln38_2_fu_1115_p2);

    network_mul_mul_16s_16s_30_1_1_U35 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_387,
        din1 => reg_369,
        dout => mul_ln38_3_fu_1122_p2);

    network_mul_mul_16s_16s_30_1_1_U36 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_382,
        din1 => reg_373,
        dout => mul_ln38_4_fu_1129_p2);

    network_mul_mul_16s_16s_30_1_1_U37 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_387,
        din1 => reg_377,
        dout => mul_ln38_5_fu_1136_p2);

    network_mul_mul_16s_16s_30_1_1_U38 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_382,
        din1 => kernel_load_4_reg_1406,
        dout => mul_ln38_6_fu_1143_p2);

    network_mul_mul_16s_16s_30_1_1_U39 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_387,
        din1 => reg_364,
        dout => mul_ln38_7_fu_1150_p2);

    network_mul_mul_16s_16s_30_1_1_U40 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_382,
        din1 => reg_369,
        dout => mul_ln38_8_fu_1157_p2);

    network_mul_mul_16s_16s_30_1_1_U41 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_387,
        din1 => reg_373,
        dout => mul_ln38_9_fu_1164_p2);

    network_mac_muladd_6ns_9ns_5ns_14_1_1_U42 : component network_mac_muladd_6ns_9ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 9,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_1171_p0,
        din1 => grp_fu_1171_p1,
        din2 => grp_fu_1171_p2,
        dout => grp_fu_1171_p3);

    network_mul_mul_16s_16s_30_1_1_U43 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_382,
        din1 => reg_377,
        dout => mul_ln38_10_fu_1177_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln23_reg_1239 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state9) and (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten48_reg_304 <= add_ln23_reg_1443;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten48_reg_304 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_328 <= select_ln32_1_reg_1489;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_328 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_316 <= select_ln24_2_reg_1458;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_316 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_340 <= select_ln32_reg_1464;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_340 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_352 <= out_w_reg_1390;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_352 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                    reg_364 <= kernel_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    reg_364 <= kernel_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((icmp_ln23_reg_1239 = ap_const_lv1_0)) then
                if ((ap_const_boolean_1 = ap_condition_135)) then 
                    reg_377 <= kernel_q0;
                elsif ((ap_const_boolean_1 = ap_condition_150)) then 
                    reg_377 <= kernel_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
                reg_382 <= input_r_q0;
            elsif ((((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_382 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                reg_387 <= input_r_q1;
            elsif ((((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_387 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln23_reg_1443 <= add_ln23_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1248 = ap_const_lv1_0) and (icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln32_1_reg_1356 <= add_ln32_1_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln38_10_reg_1519 <= add_ln38_10_fu_940_p2;
                trunc_ln46_1_reg_1499 <= mul_ln38_4_fu_1129_p2(29 downto 14);
                trunc_ln46_2_reg_1504 <= mul_ln38_5_fu_1136_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln46_4_reg_1539 <= add_ln46_4_fu_995_p2;
                trunc_ln46_3_reg_1524 <= mul_ln38_6_fu_1143_p2(29 downto 14);
                trunc_ln46_4_reg_1529 <= mul_ln38_7_fu_1150_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln46_5_reg_1559 <= add_ln46_5_fu_1068_p2;
                tmp12_mid2_v_v_reg_1544 <= tmp12_mid2_v_v_fu_1035_p3;
                trunc_ln46_5_reg_1549 <= mul_ln38_8_fu_1157_p2(29 downto 14);
                trunc_ln46_6_reg_1554 <= mul_ln38_9_fu_1164_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln46_9_reg_1574 <= add_ln46_9_fu_1106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln46_reg_1569 <= grp_fu_1171_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1208 <= empty_fu_412_p1;
                icmp_ln33_reg_1223 <= icmp_ln33_fu_442_p2;
                mul_ln4_reg_1213 <= mul_ln4_fu_428_p2;
                    tmp_1_reg_1218(13 downto 4) <= tmp_1_fu_434_p3(13 downto 4);
                    zext_ln38_1_cast14_reg_1190(6 downto 0) <= zext_ln38_1_cast14_fu_400_p1(6 downto 0);
                    zext_ln38_reg_1184(6 downto 0) <= zext_ln38_fu_396_p1(6 downto 0);
                    zext_ln46_1_cast_reg_1203(5 downto 0) <= zext_ln46_1_cast_fu_408_p1(5 downto 0);
                    zext_ln46_reg_1197(5 downto 0) <= zext_ln46_fu_404_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln23_reg_1239 <= icmp_ln23_fu_483_p2;
                icmp_ln23_reg_1239_pp0_iter1_reg <= icmp_ln23_reg_1239;
                icmp_ln32_reg_1248_pp0_iter1_reg <= icmp_ln32_reg_1248;
                mul_ln38_reg_1233 <= mul_ln38_fu_478_p2;
                    zext_ln46_1_reg_1228(4 downto 0) <= zext_ln46_1_fu_448_p1(4 downto 0);
                    zext_ln46_1_reg_1228_pp0_iter1_reg(4 downto 0) <= zext_ln46_1_reg_1228(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_483_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln32_reg_1248 <= icmp_ln32_fu_494_p2;
                icmp_ln33_1_reg_1293 <= icmp_ln33_1_fu_555_p2;
                mul_ln38_1_reg_1287 <= mul_ln38_1_fu_550_p2;
                out_d_reg_1243 <= out_d_fu_488_p2;
                out_h_reg_1298 <= out_h_fu_560_p2;
                select_ln24_1_reg_1270 <= select_ln24_1_fu_537_p3;
                select_ln24_reg_1260 <= select_ln24_fu_499_p3;
                    zext_ln46_2_reg_1265(4 downto 0) <= zext_ln46_2_fu_507_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                kernel_load_4_reg_1406 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_ln46_1_reg_1421 <= mul_ln46_1_fu_757_p2;
                    zext_ln38_5_reg_1427(4 downto 0) <= zext_ln38_5_fu_766_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                out_w_0_mid2_reg_1325 <= out_w_0_mid2_fu_616_p3;
                select_ln24_7_reg_1319 <= select_ln24_7_fu_606_p3;
                tmp10_0_0_mid2_reg_1342 <= tmp10_0_0_mid2_fu_645_p2;
                tmp10_0_0_mid2_v_v_reg_1337 <= tmp10_0_0_mid2_v_v_fu_633_p3;
                tmp10_1_0_mid2_reg_1349 <= tmp10_1_0_mid2_fu_660_p2;
                    zext_ln38_2_cast_mid_reg_1332(4 downto 0) <= zext_ln38_2_cast_mid_fu_624_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_w_reg_1390 <= out_w_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_369 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_373 <= kernel_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln24_2_reg_1458 <= select_ln24_2_fu_823_p3;
                select_ln32_1_reg_1489 <= select_ln32_1_fu_878_p3;
                select_ln32_reg_1464 <= select_ln32_fu_829_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                select_ln24_7_reg_1319_pp0_iter1_reg <= select_ln24_7_reg_1319;
                    zext_ln38_2_cast_mid_reg_1332_pp0_iter1_reg(4 downto 0) <= zext_ln38_2_cast_mid_reg_1332(4 downto 0);
                    zext_ln38_2_cast_reg_1304(4 downto 0) <= zext_ln38_2_cast_fu_566_p1(4 downto 0);
                    zext_ln38_2_cast_reg_1304_pp0_iter1_reg(4 downto 0) <= zext_ln38_2_cast_reg_1304(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp10_2_0_mid2_reg_1371 <= tmp10_2_0_mid2_fu_700_p2;
                    zext_ln38_1_reg_1378(4 downto 0) <= zext_ln38_1_fu_705_p1(4 downto 0);
                    zext_ln38_3_reg_1395(4 downto 0) <= zext_ln38_3_fu_723_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                trunc_ln46_7_reg_1564 <= mul_ln38_10_fu_1177_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                trunc_ln46_s_reg_1474 <= mul_ln38_3_fu_1122_p2(29 downto 14);
                trunc_ln_reg_1469 <= mul_ln38_2_fu_1115_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                    zext_ln38_1_reg_1378_pp0_iter1_reg(4 downto 0) <= zext_ln38_1_reg_1378(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln38_reg_1184(8 downto 7) <= "00";
    zext_ln38_1_cast14_reg_1190(13 downto 7) <= "0000000";
    zext_ln46_reg_1197(8 downto 6) <= "000";
    zext_ln46_1_cast_reg_1203(13 downto 6) <= "00000000";
    tmp_1_reg_1218(3 downto 0) <= "0000";
    zext_ln46_1_reg_1228(8 downto 5) <= "0000";
    zext_ln46_1_reg_1228_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln46_2_reg_1265(8 downto 5) <= "0000";
    zext_ln38_2_cast_reg_1304(8 downto 5) <= "0000";
    zext_ln38_2_cast_reg_1304_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln38_2_cast_mid_reg_1332(8 downto 5) <= "0000";
    zext_ln38_2_cast_mid_reg_1332_pp0_iter1_reg(8 downto 5) <= "0000";
    zext_ln38_1_reg_1378(13 downto 5) <= "000000000";
    zext_ln38_1_reg_1378_pp0_iter1_reg(13 downto 5) <= "000000000";
    zext_ln38_3_reg_1395(13 downto 5) <= "000000000";
    zext_ln38_5_reg_1427(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln23_fu_789_p2 <= std_logic_vector(unsigned(ap_const_lv14_1) + unsigned(indvar_flatten48_reg_304));
    add_ln24_1_fu_585_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(select_ln24_1_reg_1270));
    add_ln24_2_fu_671_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(select_ln24_1_reg_1270));
    add_ln24_3_fu_681_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(select_ln24_1_reg_1270));
    add_ln24_4_fu_737_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(select_ln24_1_reg_1270));
    add_ln24_5_fu_747_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(select_ln24_1_reg_1270));
    add_ln24_6_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(select_ln24_1_reg_1270));
    add_ln24_7_fu_813_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(select_ln24_1_reg_1270));
    add_ln24_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(select_ln24_1_reg_1270));
    add_ln27_1_fu_531_p2 <= std_logic_vector(unsigned(zext_ln27_2_fu_511_p1) + unsigned(zext_ln27_3_fu_527_p1));
    add_ln27_fu_472_p2 <= std_logic_vector(unsigned(zext_ln27_fu_452_p1) + unsigned(zext_ln27_1_fu_468_p1));
    add_ln32_1_fu_665_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(indvar_flatten_reg_328));
    add_ln38_10_fu_940_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1371) + unsigned(zext_ln38_5_reg_1427));
    add_ln38_2_fu_727_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1342) + unsigned(zext_ln38_3_fu_723_p1));
    add_ln38_3_fu_761_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(out_w_0_mid2_reg_1325));
    add_ln38_4_fu_770_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1342) + unsigned(zext_ln38_5_fu_766_p1));
    add_ln38_5_fu_780_p2 <= std_logic_vector(unsigned(zext_ln38_1_reg_1378) + unsigned(tmp10_1_0_mid2_reg_1349));
    add_ln38_6_fu_860_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1349) + unsigned(zext_ln38_3_reg_1395));
    add_ln38_7_fu_869_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1349) + unsigned(zext_ln38_5_reg_1427));
    add_ln38_8_fu_922_p2 <= std_logic_vector(unsigned(zext_ln38_1_reg_1378) + unsigned(tmp10_2_0_mid2_reg_1371));
    add_ln38_9_fu_931_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1371) + unsigned(zext_ln38_3_reg_1395));
    add_ln38_fu_708_p2 <= std_logic_vector(unsigned(zext_ln38_1_fu_705_p1) + unsigned(tmp10_0_0_mid2_reg_1342));
    add_ln46_1_fu_981_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1469) + unsigned(bias_q0));
    add_ln46_2_fu_986_p2 <= std_logic_vector(unsigned(trunc_ln46_2_reg_1504) + unsigned(trunc_ln46_1_reg_1499));
    add_ln46_3_fu_990_p2 <= std_logic_vector(unsigned(trunc_ln46_s_reg_1474) + unsigned(add_ln46_2_fu_986_p2));
    add_ln46_4_fu_995_p2 <= std_logic_vector(unsigned(add_ln46_1_fu_981_p2) + unsigned(add_ln46_3_fu_990_p2));
    add_ln46_5_fu_1068_p2 <= std_logic_vector(unsigned(trunc_ln46_4_reg_1529) + unsigned(trunc_ln46_3_reg_1524));
    add_ln46_6_fu_1092_p2 <= std_logic_vector(unsigned(trunc_ln46_7_reg_1564) + unsigned(trunc_ln46_6_reg_1554));
    add_ln46_7_fu_1096_p2 <= std_logic_vector(unsigned(trunc_ln46_5_reg_1549) + unsigned(add_ln46_6_fu_1092_p2));
    add_ln46_8_fu_1101_p2 <= std_logic_vector(unsigned(add_ln46_5_reg_1559) + unsigned(add_ln46_7_fu_1096_p2));
    add_ln46_9_fu_1106_p2 <= std_logic_vector(unsigned(add_ln46_4_reg_1539) + unsigned(add_ln46_8_fu_1101_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_135_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_135 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_150_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
                ap_condition_150 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001));
    end process;


    ap_condition_pp0_exit_iter1_state9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten48_phi_fu_308_p4_assign_proc : process(indvar_flatten48_reg_304, icmp_ln23_reg_1239, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln23_reg_1443, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten48_phi_fu_308_p4 <= add_ln23_reg_1443;
        else 
            ap_phi_mux_indvar_flatten48_phi_fu_308_p4 <= indvar_flatten48_reg_304;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_332_p4_assign_proc : process(indvar_flatten_reg_328, icmp_ln23_reg_1239, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_1_reg_1489, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= select_ln32_1_reg_1489;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_332_p4 <= indvar_flatten_reg_328;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_320_p4_assign_proc : process(out_d_0_reg_316, icmp_ln23_reg_1239, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln24_2_reg_1458, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_320_p4 <= select_ln24_2_reg_1458;
        else 
            ap_phi_mux_out_d_0_phi_fu_320_p4 <= out_d_0_reg_316;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_344_p4_assign_proc : process(out_h_0_reg_340, icmp_ln23_reg_1239, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_reg_1464, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_344_p4 <= select_ln32_reg_1464;
        else 
            ap_phi_mux_out_h_0_phi_fu_344_p4 <= out_h_0_reg_340;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_356_p4_assign_proc : process(out_w_0_reg_352, icmp_ln23_reg_1239, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1390, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1239 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_356_p4 <= out_w_reg_1390;
        else 
            ap_phi_mux_out_w_0_phi_fu_356_p4 <= out_w_0_reg_352;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln24_9_fu_892_p1(4 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_58_fu_416_p1 <= output_height(5 - 1 downto 0);
    empty_60_fu_611_p2 <= (select_ln24_7_fu_606_p3 or icmp_ln32_reg_1248);
    empty_fu_412_p1 <= output_width(5 - 1 downto 0);
    grp_fu_1171_p0 <= zext_ln46_1_cast_reg_1203(6 - 1 downto 0);
    grp_fu_1171_p1 <= grp_fu_1171_p10(9 - 1 downto 0);
    grp_fu_1171_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_mid2_v_v_reg_1544),14));
    grp_fu_1171_p2 <= zext_ln38_1_reg_1378_pp0_iter1_reg(5 - 1 downto 0);
    icmp_ln23_fu_483_p2 <= "1" when (ap_phi_mux_indvar_flatten48_phi_fu_308_p4 = tmp_1_reg_1218) else "0";
    icmp_ln32_fu_494_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_332_p4 = mul_ln4_reg_1213) else "0";
    icmp_ln33_1_fu_555_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_356_p4 = empty_reg_1208) else "0";
    icmp_ln33_fu_442_p2 <= "1" when (empty_fu_412_p1 = ap_const_lv5_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln38_4_fu_732_p1, ap_block_pp0_stage3, zext_ln38_7_fu_784_p1, ap_block_pp0_stage4, zext_ln38_9_fu_873_p1, zext_ln38_10_fu_926_p1, zext_ln38_12_fu_977_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln38_12_fu_977_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln38_10_fu_926_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln38_9_fu_873_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln38_7_fu_784_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln38_4_fu_732_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln38_2_fu_713_p1, ap_block_pp0_stage3, zext_ln38_6_fu_775_p1, ap_block_pp0_stage4, zext_ln38_8_fu_864_p1, zext_ln38_11_fu_935_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln38_11_fu_935_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln38_8_fu_864_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln38_6_fu_775_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln38_2_fu_713_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln24_fu_545_p1, zext_ln24_1_fu_580_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln24_4_fu_686_p1, ap_block_pp0_stage3, zext_ln24_6_fu_752_p1, ap_block_pp0_stage4, zext_ln24_8_fu_818_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= zext_ln24_8_fu_818_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= zext_ln24_6_fu_752_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= zext_ln24_4_fu_686_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= zext_ln24_1_fu_580_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= zext_ln24_fu_545_p1(8 - 1 downto 0);
            else 
                kernel_address0 <= "XXXXXXXX";
            end if;
        else 
            kernel_address0 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, zext_ln24_2_fu_590_p1, zext_ln24_3_fu_676_p1, ap_block_pp0_stage2, zext_ln24_5_fu_742_p1, ap_block_pp0_stage3, zext_ln24_7_fu_808_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address1 <= zext_ln24_7_fu_808_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= zext_ln24_5_fu_742_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= zext_ln24_3_fu_676_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= zext_ln24_2_fu_590_p1(8 - 1 downto 0);
            else 
                kernel_address1 <= "XXXXXXXX";
            end if;
        else 
            kernel_address1 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln38_1_fu_550_p0 <= mul_ln38_1_fu_550_p00(5 - 1 downto 0);
    mul_ln38_1_fu_550_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_488_p2),9));
    mul_ln38_1_fu_550_p1 <= zext_ln38_reg_1184(7 - 1 downto 0);
    mul_ln38_1_fu_550_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln38_1_fu_550_p0) * unsigned(mul_ln38_1_fu_550_p1), 9));
    mul_ln38_fu_478_p0 <= mul_ln38_fu_478_p00(5 - 1 downto 0);
    mul_ln38_fu_478_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4),9));
    mul_ln38_fu_478_p1 <= zext_ln38_reg_1184(7 - 1 downto 0);
    mul_ln38_fu_478_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln38_fu_478_p0) * unsigned(mul_ln38_fu_478_p1), 9));
    mul_ln46_1_fu_757_p0 <= zext_ln46_2_reg_1265(5 - 1 downto 0);
    mul_ln46_1_fu_757_p1 <= zext_ln46_reg_1197(6 - 1 downto 0);
    mul_ln46_1_fu_757_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln46_1_fu_757_p0) * unsigned(mul_ln46_1_fu_757_p1), 9));
    mul_ln46_fu_1001_p0 <= zext_ln46_1_reg_1228_pp0_iter1_reg(5 - 1 downto 0);
    mul_ln46_fu_1001_p1 <= zext_ln46_reg_1197(6 - 1 downto 0);
    mul_ln46_fu_1001_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln46_fu_1001_p0) * unsigned(mul_ln46_fu_1001_p1), 9));
    mul_ln4_fu_428_p0 <= mul_ln4_fu_428_p00(5 - 1 downto 0);
    mul_ln4_fu_428_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_58_fu_416_p1),10));
    mul_ln4_fu_428_p1 <= mul_ln4_fu_428_p10(5 - 1 downto 0);
    mul_ln4_fu_428_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_412_p1),10));
    mul_ln4_fu_428_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln4_fu_428_p0) * unsigned(mul_ln4_fu_428_p1), 10));
    out_d_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4));
    out_h_fu_560_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln24_fu_499_p3));
    out_w_0_mid2_fu_616_p3 <= 
        ap_const_lv5_0 when (empty_60_fu_611_p2(0) = '1') else 
        out_w_0_reg_352;
    out_w_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(out_w_0_mid2_reg_1325));
    output_r_address0 <= zext_ln46_3_fu_1111_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln46_9_reg_1574;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln23_reg_1239_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln23_reg_1239_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_1_fu_537_p3 <= 
        add_ln27_1_fu_531_p2 when (icmp_ln32_fu_494_p2(0) = '1') else 
        add_ln27_fu_472_p2;
    select_ln24_2_fu_823_p3 <= 
        out_d_reg_1243 when (icmp_ln32_reg_1248(0) = '1') else 
        out_d_0_reg_316;
    select_ln24_3_fu_595_p3 <= 
        mul_ln38_1_reg_1287 when (icmp_ln32_reg_1248(0) = '1') else 
        mul_ln38_reg_1233;
    select_ln24_4_fu_1018_p3 <= 
        mul_ln46_1_reg_1421 when (icmp_ln32_reg_1248_pp0_iter1_reg(0) = '1') else 
        mul_ln46_fu_1001_p2;
    select_ln24_5_fu_600_p3 <= 
        mul_ln38_1_reg_1287 when (icmp_ln32_reg_1248(0) = '1') else 
        tmp_0_0_fu_570_p2;
    select_ln24_6_fu_1024_p3 <= 
        mul_ln46_1_reg_1421 when (icmp_ln32_reg_1248_pp0_iter1_reg(0) = '1') else 
        tmp11_fu_1005_p2;
    select_ln24_7_fu_606_p3 <= 
        icmp_ln33_reg_1223 when (icmp_ln32_reg_1248(0) = '1') else 
        icmp_ln33_1_reg_1293;
    select_ln24_fu_499_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_fu_494_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_344_p4;
    select_ln32_1_fu_878_p3 <= 
        ap_const_lv10_1 when (icmp_ln32_reg_1248(0) = '1') else 
        add_ln32_1_reg_1356;
    select_ln32_fu_829_p3 <= 
        out_h_reg_1298 when (select_ln24_7_reg_1319(0) = '1') else 
        select_ln24_reg_1260;
        sext_ln4_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    shl_ln27_mid1_fu_519_p3 <= (trunc_ln27_1_fu_515_p1 & ap_const_lv3_0);
    shl_ln_fu_460_p3 <= (trunc_ln27_fu_456_p1 & ap_const_lv3_0);
    tmp10_0_0_mid2_fu_645_p0 <= zext_ln38_1_cast14_reg_1190(7 - 1 downto 0);
    tmp10_0_0_mid2_fu_645_p1 <= tmp10_0_0_mid2_fu_645_p10(9 - 1 downto 0);
    tmp10_0_0_mid2_fu_645_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_fu_633_p3),14));
    tmp10_0_0_mid2_fu_645_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_fu_645_p0) * unsigned(tmp10_0_0_mid2_fu_645_p1), 14));
    tmp10_0_0_mid2_v_v_fu_633_p3 <= 
        tmp_0_0_mid1_fu_627_p2 when (select_ln24_7_fu_606_p3(0) = '1') else 
        select_ln24_5_fu_600_p3;
    tmp10_1_0_mid2_fu_660_p0 <= zext_ln38_1_cast14_reg_1190(7 - 1 downto 0);
    tmp10_1_0_mid2_fu_660_p1 <= tmp10_1_0_mid2_fu_660_p10(9 - 1 downto 0);
    tmp10_1_0_mid2_fu_660_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_v_v_fu_650_p2),14));
    tmp10_1_0_mid2_fu_660_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_fu_660_p0) * unsigned(tmp10_1_0_mid2_fu_660_p1), 14));
    tmp10_1_0_mid2_v_v_fu_650_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp10_0_0_mid2_v_v_fu_633_p3));
    tmp10_2_0_mid2_fu_700_p0 <= zext_ln38_1_cast14_reg_1190(7 - 1 downto 0);
    tmp10_2_0_mid2_fu_700_p1 <= tmp10_2_0_mid2_fu_700_p10(9 - 1 downto 0);
    tmp10_2_0_mid2_fu_700_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_v_v_fu_691_p2),14));
    tmp10_2_0_mid2_fu_700_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_fu_700_p0) * unsigned(tmp10_2_0_mid2_fu_700_p1), 14));
    tmp10_2_0_mid2_v_v_fu_691_p2 <= std_logic_vector(unsigned(ap_const_lv9_2) + unsigned(tmp10_0_0_mid2_v_v_reg_1337));
    tmp11_fu_1005_p2 <= std_logic_vector(unsigned(zext_ln38_2_cast_reg_1304_pp0_iter1_reg) + unsigned(mul_ln46_fu_1001_p2));
    tmp11_mid1_fu_1030_p2 <= std_logic_vector(unsigned(zext_ln38_2_cast_mid_reg_1332_pp0_iter1_reg) + unsigned(select_ln24_4_fu_1018_p3));
    tmp12_mid2_v_v_fu_1035_p3 <= 
        tmp11_mid1_fu_1030_p2 when (select_ln24_7_reg_1319_pp0_iter1_reg(0) = '1') else 
        select_ln24_6_fu_1024_p3;
    tmp_0_0_fu_570_p2 <= std_logic_vector(unsigned(zext_ln38_2_cast_fu_566_p1) + unsigned(mul_ln38_reg_1233));
    tmp_0_0_mid1_fu_627_p2 <= std_logic_vector(unsigned(zext_ln38_2_cast_mid_fu_624_p1) + unsigned(select_ln24_3_fu_595_p3));
    tmp_1_fu_434_p3 <= (mul_ln4_fu_428_p2 & ap_const_lv4_0);
    trunc_ln27_1_fu_515_p1 <= out_d_fu_488_p2(4 - 1 downto 0);
    trunc_ln27_fu_456_p1 <= ap_phi_mux_out_d_0_phi_fu_320_p4(4 - 1 downto 0);
    zext_ln24_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_575_p2),64));
    zext_ln24_2_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_1_fu_585_p2),64));
    zext_ln24_3_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_2_fu_671_p2),64));
    zext_ln24_4_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_3_fu_681_p2),64));
    zext_ln24_5_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_4_fu_737_p2),64));
    zext_ln24_6_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_5_fu_747_p2),64));
    zext_ln24_7_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_6_fu_803_p2),64));
    zext_ln24_8_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_7_fu_813_p2),64));
    zext_ln24_9_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_2_reg_1458),64));
    zext_ln24_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_fu_537_p3),64));
    zext_ln27_1_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_460_p3),8));
    zext_ln27_2_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_488_p2),8));
    zext_ln27_3_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln27_mid1_fu_519_p3),8));
    zext_ln27_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4),8));
    zext_ln38_10_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_8_fu_922_p2),64));
    zext_ln38_11_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_9_fu_931_p2),64));
    zext_ln38_12_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_10_reg_1519),64));
    zext_ln38_1_cast14_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln4_fu_392_p1),14));
    zext_ln38_1_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1325),14));
    zext_ln38_2_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_340),9));
    zext_ln38_2_cast_mid_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_1298),9));
    zext_ln38_2_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_708_p2),64));
    zext_ln38_3_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_718_p2),14));
    zext_ln38_4_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_2_fu_727_p2),64));
    zext_ln38_5_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_3_fu_761_p2),14));
    zext_ln38_6_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_4_fu_770_p2),64));
    zext_ln38_7_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_5_fu_780_p2),64));
    zext_ln38_8_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_6_fu_860_p2),64));
    zext_ln38_9_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_7_fu_869_p2),64));
    zext_ln38_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln46_1_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln46_1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_320_p4),9));
    zext_ln46_2_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_488_p2),9));
    zext_ln46_3_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_reg_1569),64));
    zext_ln46_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
