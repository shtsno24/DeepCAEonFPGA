-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln28_fu_242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln28_reg_518 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln28_1_cast_fu_246_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_1_cast_reg_523 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln36_fu_250_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_reg_528 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_1_cast_fu_254_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln36_1_cast_reg_533 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_fu_258_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_538 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_51_fu_262_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_51_reg_543 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln19_fu_266_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_reg_548 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln19_2_fu_271_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_2_reg_553 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_561 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_addr_reg_566 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln28_1_fu_305_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln28_1_reg_571 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_fu_314_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_579 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp3_fu_334_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_reg_584 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln20_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_592 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln24_fu_350_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln24_reg_602 : STD_LOGIC_VECTOR (13 downto 0);
    signal k_h_fu_360_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_h_reg_610 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp1_fu_412_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_reg_615 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln24_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_1_fu_417_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln28_1_reg_620 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_w_fu_437_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_reg_628 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln26_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_643 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal kernel_0_load_reg_648 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_653 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal buffer_6_fu_506_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal out_d_0_reg_133 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_145 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_157 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_0_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_0_reg_181 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_reg_193 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_h_0_reg_204 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_1_reg_215 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_w_0_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln23_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_6_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_8_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln5_fu_238_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln28_fu_293_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_297_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_3_cast_fu_320_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_324_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_334_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_334_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln28_2_fu_370_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_3_fu_378_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_2_fu_366_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln28_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp4_fu_392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp4_cast_fu_398_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_402_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_412_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_412_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln28_1_fu_388_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln36_fu_422_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_4_fu_443_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_fu_447_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_5_fu_453_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_2_fu_457_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_fu_467_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_7_fu_473_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln28_4_fu_477_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln28_2_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_fu_511_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_412_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_334_p00 : STD_LOGIC_VECTOR (13 downto 0);

    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_1_1_U23 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_reg_648,
        din1 => input_load_reg_643,
        dout => mul_ln28_fu_511_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln26_fu_431_p2 = ap_const_lv1_1))) then 
                buffer_0_reg_193 <= buffer_1_reg_215;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                buffer_0_reg_193 <= bias_q0;
            end if; 
        end if;
    end process;

    buffer_1_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buffer_1_reg_215 <= buffer_0_reg_193;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                buffer_1_reg_215 <= buffer_6_fu_506_p2;
            end if; 
        end if;
    end process;

    k_h_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln26_fu_431_p2 = ap_const_lv1_1))) then 
                k_h_0_reg_204 <= k_h_reg_610;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_h_0_reg_204 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_w_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_w_0_reg_227 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_w_0_reg_227 <= k_w_reg_628;
            end if; 
        end if;
    end process;

    out_d_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_309_p2 = ap_const_lv1_1))) then 
                out_d_0_reg_133 <= out_d_reg_561;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_133 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_339_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_169 <= out_h_reg_579;
            elsif (((icmp_ln19_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_0_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_0_reg_181 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_354_p2 = ap_const_lv1_1))) then 
                out_w_0_reg_181 <= out_w_reg_592;
            end if; 
        end if;
    end process;

    phi_mul2_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_309_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_157 <= add_ln19_reg_548;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_157 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_309_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_145 <= add_ln19_2_reg_553;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_145 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln19_2_reg_553 <= add_ln19_2_fu_271_p2;
                add_ln19_reg_548 <= add_ln19_fu_266_p2;
                out_d_reg_561 <= out_d_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln28_1_reg_620 <= add_ln28_1_fu_417_p2;
                tmp1_reg_615 <= tmp1_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bias_addr_reg_566 <= zext_ln23_fu_288_p1(4 - 1 downto 0);
                    zext_ln28_1_reg_571(6 downto 3) <= zext_ln28_1_fu_305_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_51_reg_543 <= empty_51_fu_262_p1;
                empty_reg_538 <= empty_fu_258_p1;
                    zext_ln28_1_cast_reg_523(6 downto 0) <= zext_ln28_1_cast_fu_246_p1(6 downto 0);
                    zext_ln28_reg_518(6 downto 0) <= zext_ln28_fu_242_p1(6 downto 0);
                    zext_ln36_1_cast_reg_533(5 downto 0) <= zext_ln36_1_cast_fu_254_p1(5 downto 0);
                    zext_ln36_reg_528(5 downto 0) <= zext_ln36_fu_250_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_load_reg_643 <= input_r_q0;
                kernel_0_load_reg_648 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_h_reg_610 <= k_h_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_w_reg_628 <= k_w_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_reg_579 <= out_h_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_reg_592 <= out_w_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp3_reg_584 <= tmp3_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                trunc_ln_reg_653 <= mul_ln28_fu_511_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    zext_ln24_reg_602(4 downto 0) <= zext_ln24_fu_350_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln28_reg_518(8 downto 7) <= "00";
    zext_ln28_1_cast_reg_523(13 downto 7) <= "0000000";
    zext_ln36_reg_528(8 downto 6) <= "000";
    zext_ln36_1_cast_reg_533(13 downto 6) <= "00000000";
    zext_ln28_1_reg_571(2 downto 0) <= "000";
    zext_ln28_1_reg_571(8 downto 7) <= "00";
    zext_ln24_reg_602(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_276_p2, ap_CS_fsm_state3, icmp_ln20_fu_309_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, icmp_ln24_fu_354_p2, ap_CS_fsm_state7, icmp_ln26_fu_431_p2, icmp_ln21_fu_339_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln19_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln20_fu_309_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln21_fu_339_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_354_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln26_fu_431_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln19_2_fu_271_p2 <= std_logic_vector(unsigned(phi_mul_reg_145) + unsigned(zext_ln28_reg_518));
    add_ln19_fu_266_p2 <= std_logic_vector(unsigned(phi_mul2_reg_157) + unsigned(zext_ln36_reg_528));
    add_ln28_1_fu_417_p2 <= std_logic_vector(signed(sext_ln28_1_fu_388_p1) + signed(zext_ln28_1_reg_571));
    add_ln28_2_fu_457_p2 <= std_logic_vector(unsigned(zext_ln28_5_fu_453_p1) + unsigned(tmp1_reg_615));
    add_ln28_3_fu_467_p2 <= std_logic_vector(unsigned(out_d_0_reg_133) + unsigned(zext_ln28_4_fu_443_p1));
    add_ln28_4_fu_477_p2 <= std_logic_vector(unsigned(zext_ln28_7_fu_473_p1) + unsigned(add_ln28_1_reg_620));
    add_ln28_fu_447_p2 <= std_logic_vector(unsigned(zext_ln28_4_fu_443_p1) + unsigned(out_w_0_reg_181));
    add_ln36_fu_422_p2 <= std_logic_vector(unsigned(tmp3_reg_584) + unsigned(zext_ln24_reg_602));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln19_fu_276_p2)
    begin
        if ((((icmp_ln19_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_276_p2)
    begin
        if (((icmp_ln19_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_566;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_fu_506_p2 <= std_logic_vector(unsigned(trunc_ln_reg_653) + unsigned(buffer_1_reg_215));
    empty_51_fu_262_p1 <= output_height(5 - 1 downto 0);
    empty_fu_258_p1 <= output_width(5 - 1 downto 0);
    icmp_ln19_fu_276_p2 <= "1" when (out_d_0_reg_133 = ap_const_lv5_10) else "0";
    icmp_ln20_fu_309_p2 <= "1" when (out_h_0_reg_169 = empty_51_reg_543) else "0";
    icmp_ln21_fu_339_p2 <= "1" when (out_w_0_reg_181 = empty_reg_538) else "0";
    icmp_ln24_fu_354_p2 <= "1" when (k_h_0_reg_204 = ap_const_lv2_3) else "0";
    icmp_ln26_fu_431_p2 <= "1" when (k_w_0_reg_227 = ap_const_lv2_3) else "0";
    input_r_address0 <= zext_ln28_6_fu_462_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_h_fu_360_p2 <= std_logic_vector(unsigned(k_h_0_reg_204) + unsigned(ap_const_lv2_1));
    k_w_fu_437_p2 <= std_logic_vector(unsigned(k_w_0_reg_227) + unsigned(ap_const_lv2_1));
    kernel_0_address0 <= zext_ln28_8_fu_486_p1(8 - 1 downto 0);

    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_d_fu_282_p2 <= std_logic_vector(unsigned(out_d_0_reg_133) + unsigned(ap_const_lv5_1));
    out_h_fu_314_p2 <= std_logic_vector(unsigned(out_h_0_reg_169) + unsigned(ap_const_lv5_1));
    out_w_fu_344_p2 <= std_logic_vector(unsigned(out_w_0_reg_181) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln36_1_fu_426_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer_0_reg_193;

    output_r_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln24_fu_354_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_354_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln28_1_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln28_fu_382_p2),9));

        sext_ln28_2_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln28_4_fu_477_p2),32));

        sext_ln5_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    shl_ln28_2_fu_370_p3 <= (k_h_0_reg_204 & ap_const_lv2_0);
    shl_ln_fu_297_p3 <= (trunc_ln28_fu_293_p1 & ap_const_lv3_0);
    sub_ln28_fu_382_p2 <= std_logic_vector(unsigned(zext_ln28_3_fu_378_p1) - unsigned(zext_ln28_2_fu_366_p1));
    tmp1_fu_412_p0 <= zext_ln28_1_cast_reg_523(7 - 1 downto 0);
    tmp1_fu_412_p1 <= tmp1_fu_412_p10(9 - 1 downto 0);
    tmp1_fu_412_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_402_p2),14));
    tmp1_fu_412_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_412_p0) * unsigned(tmp1_fu_412_p1), 14));
    tmp2_fu_324_p2 <= std_logic_vector(unsigned(phi_mul2_reg_157) + unsigned(zext_ln28_3_cast_fu_320_p1));
    tmp3_fu_334_p0 <= tmp3_fu_334_p00(9 - 1 downto 0);
    tmp3_fu_334_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_324_p2),14));
    tmp3_fu_334_p1 <= zext_ln36_1_cast_reg_533(6 - 1 downto 0);
    tmp3_fu_334_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_334_p0) * unsigned(tmp3_fu_334_p1), 14));
    tmp4_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_392_p2),9));
    tmp4_fu_392_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_366_p1) + unsigned(out_h_0_reg_169));
    tmp_fu_402_p2 <= std_logic_vector(unsigned(phi_mul_reg_145) + unsigned(tmp4_cast_fu_398_p1));
    trunc_ln28_fu_293_p1 <= out_d_0_reg_133(4 - 1 downto 0);
    zext_ln23_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_133),64));
    zext_ln24_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_181),14));
    zext_ln28_1_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_238_p1),14));
    zext_ln28_1_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_297_p3),9));
    zext_ln28_2_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_0_reg_204),5));
    zext_ln28_3_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_169),9));
    zext_ln28_3_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln28_2_fu_370_p3),5));
    zext_ln28_4_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_0_reg_227),5));
    zext_ln28_5_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_447_p2),14));
    zext_ln28_6_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_2_fu_457_p2),64));
    zext_ln28_7_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_467_p2),9));
    zext_ln28_8_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln28_2_fu_482_p1),64));
    zext_ln28_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln36_1_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln36_1_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_422_p2),64));
    zext_ln36_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
end behav;
