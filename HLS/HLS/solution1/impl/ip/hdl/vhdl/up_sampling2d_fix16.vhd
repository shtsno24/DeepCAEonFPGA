-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity up_sampling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (4 downto 0);
    input_width : IN STD_LOGIC_VECTOR (4 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of up_sampling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten31_reg_115 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_d_0_reg_126 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_137 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_148 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_170_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_525 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln6_fu_186_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln6_reg_531 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_fu_192_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_reg_537 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln21_1_fu_196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_1_reg_543 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_3_cast_fu_199_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln21_3_cast_reg_549 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_11_fu_206_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_11_reg_554 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln6_1_fu_494_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln6_1_reg_559 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln17_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_569 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln14_reg_569_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_275_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln14_fu_362_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_6_fu_382_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_6_reg_583 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_7_fu_414_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_7_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_8_fu_428_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln21_8_reg_593 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_fu_436_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln21_1_reg_603 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_fu_454_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln15_1_fu_466_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_508_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_1_reg_623 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln21_6_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln21_8_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_9_fu_174_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln6_fu_186_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln6_fu_186_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_10_fu_202_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_fu_230_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_fu_230_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_1_fu_235_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_1_fu_235_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_fu_240_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln21_fu_230_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_4_fu_250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_1_fu_235_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_6_cast_fu_254_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln15_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_2_fu_308_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_2_fu_308_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_2_fu_308_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_3_fu_321_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln21_3_fu_321_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln21_3_fu_321_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_258_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_264_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln17_1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_292_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_5_fu_355_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_370_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln21_mid1_fu_390_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_1_fu_313_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_11_fu_400_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid1_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_3_fu_334_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_2_fu_326_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_6_cast_mid_fu_404_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_mid1_fu_422_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln21_4_fu_342_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_1_fu_460_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_500_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln6_1_fu_494_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln6_1_fu_494_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_500_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_508_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_508_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_508_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_500_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_500_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_508_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_508_p20 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln21_1_fu_235_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln21_2_fu_308_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln21_3_fu_321_p00 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln21_fu_230_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln6_1_fu_494_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln6_1_fu_494_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln6_fu_186_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln6_fu_186_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component network_mul_mul_10ns_5ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component network_mac_muladd_8ns_5ns_4ns_12_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component network_mac_muladd_9ns_6ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    network_mul_mul_10ns_5ns_15_1_1_U108 : component network_mul_mul_10ns_5ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 5,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln6_1_fu_494_p0,
        din1 => mul_ln6_1_fu_494_p1,
        dout => mul_ln6_1_fu_494_p2);

    network_mac_muladd_8ns_5ns_4ns_12_1_1_U109 : component network_mac_muladd_8ns_5ns_4ns_12_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_500_p0,
        din1 => grp_fu_500_p1,
        din2 => grp_fu_500_p2,
        dout => grp_fu_500_p3);

    network_mac_muladd_9ns_6ns_5ns_14_1_1_U110 : component network_mac_muladd_9ns_6ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_508_p0,
        din1 => grp_fu_508_p1,
        din2 => grp_fu_508_p2,
        dout => grp_fu_508_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten31_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten31_reg_115 <= add_ln14_fu_275_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten31_reg_115 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_137 <= select_ln15_1_fu_466_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_137 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_d_0_reg_126 <= select_ln14_fu_362_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_d_0_reg_126 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_h_0_reg_148 <= select_ln15_fu_436_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_h_0_reg_148 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                out_w_0_reg_159 <= out_w_fu_454_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                out_w_0_reg_159 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_569 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln21_1_reg_623 <= grp_fu_508_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    empty_11_reg_554(4 downto 0) <= empty_11_fu_206_p1(4 downto 0);
                icmp_ln17_reg_564 <= icmp_ln17_fu_217_p2;
                mul_ln6_1_reg_559 <= mul_ln6_1_fu_494_p2;
                    zext_ln21_1_reg_543(5 downto 0) <= zext_ln21_1_fu_196_p1(5 downto 0);
                    zext_ln21_3_cast_reg_549(5 downto 0) <= zext_ln21_3_cast_fu_199_p1(5 downto 0);
                    zext_ln21_reg_537(4 downto 0) <= zext_ln21_fu_192_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_525 <= empty_fu_170_p1;
                mul_ln6_reg_531 <= mul_ln6_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln14_reg_569 <= icmp_ln14_fu_270_p2;
                icmp_ln14_reg_569_pp0_iter1_reg <= icmp_ln14_reg_569;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_270_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln21_1_reg_603 <= select_ln21_6_fu_382_p3(4 downto 1);
                select_ln21_6_reg_583 <= select_ln21_6_fu_382_p3;
                select_ln21_7_reg_588 <= select_ln21_7_fu_414_p3;
                select_ln21_8_reg_593 <= select_ln21_8_fu_428_p3;
            end if;
        end if;
    end process;
    zext_ln21_reg_537(7 downto 5) <= "000";
    zext_ln21_1_reg_543(8 downto 6) <= "000";
    zext_ln21_3_cast_reg_549(13 downto 6) <= "00000000";
    empty_11_reg_554(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln14_fu_270_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln14_fu_270_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln14_fu_270_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln14_fu_275_p2 <= std_logic_vector(unsigned(indvar_flatten31_reg_115) + unsigned(ap_const_lv15_1));
    add_ln15_1_fu_460_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_137) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln14_fu_270_p2)
    begin
        if ((icmp_ln14_fu_270_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_202_p1 <= output_depth(5 - 1 downto 0);
    empty_11_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),12));
    empty_9_fu_174_p1 <= output_height(5 - 1 downto 0);
    empty_fu_170_p1 <= output_width(5 - 1 downto 0);
    grp_fu_500_p0 <= grp_fu_500_p00(8 - 1 downto 0);
    grp_fu_500_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_7_reg_588),12));
    grp_fu_500_p1 <= empty_11_reg_554(5 - 1 downto 0);
    grp_fu_500_p2 <= grp_fu_500_p20(4 - 1 downto 0);
    grp_fu_500_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln21_1_reg_603),12));
    grp_fu_508_p0 <= grp_fu_508_p00(9 - 1 downto 0);
    grp_fu_508_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_8_reg_593),14));
    grp_fu_508_p1 <= zext_ln21_3_cast_reg_549(6 - 1 downto 0);
    grp_fu_508_p2 <= grp_fu_508_p20(5 - 1 downto 0);
    grp_fu_508_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_6_reg_583),14));
    icmp_ln14_fu_270_p2 <= "1" when (indvar_flatten31_reg_115 = mul_ln6_1_reg_559) else "0";
    icmp_ln15_fu_287_p2 <= "1" when (indvar_flatten_reg_137 = mul_ln6_reg_531) else "0";
    icmp_ln17_1_fu_350_p2 <= "1" when (out_w_0_reg_159 = empty_reg_525) else "0";
    icmp_ln17_fu_217_p2 <= "1" when (empty_reg_525 = ap_const_lv5_0) else "0";
    input_r_address0 <= zext_ln21_6_fu_483_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln21_mid1_fu_390_p4 <= out_h_fu_370_p2(4 downto 1);
    lshr_ln_fu_240_p4 <= out_h_0_reg_148(4 downto 1);
    mul_ln21_1_fu_235_p0 <= mul_ln21_1_fu_235_p00(5 - 1 downto 0);
    mul_ln21_1_fu_235_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_126),9));
    mul_ln21_1_fu_235_p1 <= zext_ln21_1_reg_543(6 - 1 downto 0);
    mul_ln21_1_fu_235_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln21_1_fu_235_p0) * unsigned(mul_ln21_1_fu_235_p1), 9));
    mul_ln21_2_fu_308_p0 <= mul_ln21_2_fu_308_p00(5 - 1 downto 0);
    mul_ln21_2_fu_308_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_281_p2),8));
    mul_ln21_2_fu_308_p1 <= zext_ln21_reg_537(5 - 1 downto 0);
    mul_ln21_2_fu_308_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln21_2_fu_308_p0) * unsigned(mul_ln21_2_fu_308_p1), 8));
    mul_ln21_3_fu_321_p0 <= mul_ln21_3_fu_321_p00(5 - 1 downto 0);
    mul_ln21_3_fu_321_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_281_p2),9));
    mul_ln21_3_fu_321_p1 <= zext_ln21_1_reg_543(6 - 1 downto 0);
    mul_ln21_3_fu_321_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln21_3_fu_321_p0) * unsigned(mul_ln21_3_fu_321_p1), 9));
    mul_ln21_fu_230_p0 <= mul_ln21_fu_230_p00(5 - 1 downto 0);
    mul_ln21_fu_230_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_126),8));
    mul_ln21_fu_230_p1 <= zext_ln21_reg_537(5 - 1 downto 0);
    mul_ln21_fu_230_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln21_fu_230_p0) * unsigned(mul_ln21_fu_230_p1), 8));
    mul_ln6_1_fu_494_p0 <= mul_ln6_1_fu_494_p00(10 - 1 downto 0);
    mul_ln6_1_fu_494_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln6_reg_531),15));
    mul_ln6_1_fu_494_p1 <= mul_ln6_1_fu_494_p10(5 - 1 downto 0);
    mul_ln6_1_fu_494_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_10_fu_202_p1),15));
    mul_ln6_fu_186_p0 <= mul_ln6_fu_186_p00(5 - 1 downto 0);
    mul_ln6_fu_186_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_170_p1),10));
    mul_ln6_fu_186_p1 <= mul_ln6_fu_186_p10(5 - 1 downto 0);
    mul_ln6_fu_186_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_9_fu_174_p1),10));
    mul_ln6_fu_186_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln6_fu_186_p0) * unsigned(mul_ln6_fu_186_p1), 10));
    or_ln21_fu_376_p2 <= (select_ln21_5_fu_355_p3 or icmp_ln15_fu_287_p2);
    out_d_fu_281_p2 <= std_logic_vector(unsigned(out_d_0_reg_126) + unsigned(ap_const_lv5_1));
    out_h_fu_370_p2 <= std_logic_vector(unsigned(select_ln21_fu_292_p3) + unsigned(ap_const_lv5_1));
    out_w_fu_454_p2 <= std_logic_vector(unsigned(select_ln21_6_fu_382_p3) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln21_8_fu_490_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= input_r_q0;

    output_r_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln14_reg_569_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln14_reg_569_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_fu_362_p3 <= 
        out_d_fu_281_p2 when (icmp_ln15_fu_287_p2(0) = '1') else 
        out_d_0_reg_126;
    select_ln15_1_fu_466_p3 <= 
        ap_const_lv10_1 when (icmp_ln15_fu_287_p2(0) = '1') else 
        add_ln15_1_fu_460_p2;
    select_ln15_fu_436_p3 <= 
        out_h_fu_370_p2 when (select_ln21_5_fu_355_p3(0) = '1') else 
        select_ln21_fu_292_p3;
    select_ln21_1_fu_313_p3 <= 
        mul_ln21_2_fu_308_p2 when (icmp_ln15_fu_287_p2(0) = '1') else 
        mul_ln21_fu_230_p2;
    select_ln21_2_fu_326_p3 <= 
        mul_ln21_3_fu_321_p2 when (icmp_ln15_fu_287_p2(0) = '1') else 
        mul_ln21_1_fu_235_p2;
    select_ln21_3_fu_334_p3 <= 
        mul_ln21_2_fu_308_p2 when (icmp_ln15_fu_287_p2(0) = '1') else 
        tmp_fu_258_p2;
    select_ln21_4_fu_342_p3 <= 
        mul_ln21_3_fu_321_p2 when (icmp_ln15_fu_287_p2(0) = '1') else 
        tmp2_fu_264_p2;
    select_ln21_5_fu_355_p3 <= 
        icmp_ln17_reg_564 when (icmp_ln15_fu_287_p2(0) = '1') else 
        icmp_ln17_1_fu_350_p2;
    select_ln21_6_fu_382_p3 <= 
        ap_const_lv5_0 when (or_ln21_fu_376_p2(0) = '1') else 
        out_w_0_reg_159;
    select_ln21_7_fu_414_p3 <= 
        tmp_mid1_fu_408_p2 when (select_ln21_5_fu_355_p3(0) = '1') else 
        select_ln21_3_fu_334_p3;
    select_ln21_8_fu_428_p3 <= 
        tmp2_mid1_fu_422_p2 when (select_ln21_5_fu_355_p3(0) = '1') else 
        select_ln21_4_fu_342_p3;
    select_ln21_fu_292_p3 <= 
        ap_const_lv5_0 when (icmp_ln15_fu_287_p2(0) = '1') else 
        out_h_0_reg_148;
    tmp2_fu_264_p2 <= std_logic_vector(unsigned(mul_ln21_1_fu_235_p2) + unsigned(zext_ln21_6_cast_fu_254_p1));
    tmp2_mid1_fu_422_p2 <= std_logic_vector(unsigned(select_ln21_2_fu_326_p3) + unsigned(zext_ln21_6_cast_mid_fu_404_p1));
    tmp_fu_258_p2 <= std_logic_vector(unsigned(mul_ln21_fu_230_p2) + unsigned(zext_ln21_4_fu_250_p1));
    tmp_mid1_fu_408_p2 <= std_logic_vector(unsigned(select_ln21_1_fu_313_p3) + unsigned(zext_ln21_11_fu_400_p1));
    zext_ln21_11_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln21_mid1_fu_390_p4),8));
    zext_ln21_1_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
    zext_ln21_3_cast_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    zext_ln21_4_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_240_p4),8));
    zext_ln21_6_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_148),9));
    zext_ln21_6_cast_mid_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_370_p2),9));
    zext_ln21_6_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_500_p3),64));
    zext_ln21_8_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_1_reg_623),64));
    zext_ln21_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),8));
end behav;
