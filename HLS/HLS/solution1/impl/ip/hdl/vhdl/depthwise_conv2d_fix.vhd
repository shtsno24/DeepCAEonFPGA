-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_1E : STD_LOGIC_VECTOR (10 downto 0) := "00000011110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv10_3C : STD_LOGIC_VECTOR (9 downto 0) := "0000111100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_0_w_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_0_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_0_w_s_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_0_w_s_ce1 : STD_LOGIC;
    signal SeparableConv2D_0_w_s_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten80_reg_265 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_d_0_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_288 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_300 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_311 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_323 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln24_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_327 : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_331 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_335 : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_339 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln24_reg_1404_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln27_1_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_1_reg_1357 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_d_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_reg_1363 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln27_2_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_2_reg_1373 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln27_fu_363_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln27_reg_1379 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp10_0_0_fu_399_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_reg_1384 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_fu_435_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_reg_1389 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_fu_467_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_2_0_reg_1394 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp12_fu_503_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_reg_1399 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_1404_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln24_reg_1408 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln32_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1413 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_527_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_reg_1432 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1440 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_2_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_2_reg_1455 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_1461 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_580_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1469 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_fu_590_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1475 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp10_0_0_mid2_fu_628_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid2_reg_1482 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_636_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1489 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_17_fu_657_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln24_17_reg_1496 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln24_23_fu_677_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_23_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp10_1_0_mid2_fu_728_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_reg_1516 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp11_mid1_fu_735_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp11_mid1_reg_1523 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln40_1_fu_740_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_reg_1529 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_12_fu_757_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_12_reg_1540 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_4_fu_774_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_4_reg_1550 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_7_fu_928_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_7_reg_1576 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_8_fu_932_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_8_reg_1581 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_fu_937_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1586 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1586_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_1003_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_2_0_mid2_reg_1601 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_fu_1010_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_reg_1608 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_fu_1303_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_reg_1613 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_1_fu_1309_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_1_reg_1618 : STD_LOGIC_VECTOR (29 downto 0);
    signal select_ln32_15_fu_1045_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_15_reg_1633 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln40_2_fu_1315_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_2_reg_1643 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_3_fu_1321_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_3_reg_1648 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln40_11_fu_1142_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_11_reg_1663 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_1_fu_1147_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_1_reg_1668 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_0_w_18_reg_1673 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln40_4_fu_1327_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_4_reg_1678 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_5_fu_1333_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_5_reg_1683 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_3_fu_1197_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_3_reg_1693 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_6_fu_1339_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_6_reg_1698 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_7_fu_1345_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_7_reg_1703 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_4_fu_1236_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_4_reg_1708 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_6_reg_1713 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_7_reg_1718 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_8_fu_1351_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln40_8_reg_1723 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln48_6_fu_1281_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_6_reg_1728 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_8_fu_1290_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_8_reg_1733 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten80_phi_fu_269_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_280_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_292_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_304_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_315_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_15_fu_541_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal select_ln24_16_fu_547_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal select_ln24_18_fu_669_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_2_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_3_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_19_fu_801_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_22_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_4_fu_910_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_5_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_20_fu_953_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal select_ln24_21_fu_958_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_6_fu_1026_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_7_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_21_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_8_fu_1127_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_9_fu_1137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_10_fu_1187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_1298_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_375_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_387_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl19_cast_fu_383_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl20_cast_fu_395_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_0_fu_405_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_411_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_423_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl17_cast_fu_419_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl18_cast_fu_431_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_0_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl5_fu_455_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_fu_447_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl16_cast_fu_463_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln48_1_fu_371_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp11_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_fu_479_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_fu_491_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl13_cast_fu_487_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_cast_fu_499_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln24_1_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_63_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl19_mid1_fu_598_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl20_mid1_fu_610_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl19_cast_mid1_fu_606_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl20_cast_mid1_fu_618_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid1_fu_622_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_24_fu_564_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln27_mid1_fu_642_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_fu_649_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_0_mid1_fu_693_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl17_mid1_fu_698_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl18_mid1_fu_710_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl17_cast_mid1_fu_706_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl18_cast_mid1_fu_718_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid1_fu_722_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_25_fu_687_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln24_23_fu_683_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_fu_743_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln40_1_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_3_fu_760_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln40_3_fu_765_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln27_1_mid1_fu_779_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln27_s_fu_786_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln24_19_fu_794_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln27_1_fu_806_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln24_20_fu_814_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_825_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_836_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl13_cast_mid170_c_fu_832_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl14_cast_mid174_c_fu_843_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid176_fu_847_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid176_cast_fu_853_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl13_mid1_fu_863_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_mid1_fu_874_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl13_cast_mid1_fu_870_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_cast_mid1_fu_881_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_mid1_fu_885_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_27_fu_857_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_14_fu_898_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_5_fu_901_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln40_5_fu_906_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln40_6_fu_915_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln40_7_fu_919_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_mid2_fu_891_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln24_20_fu_950_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_0_mid1_fu_972_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl16_mid1_fu_985_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl15_mid1_fu_977_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl16_cast_mid1_fu_993_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_2_0_mid1_fu_997_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln24_26_fu_966_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln40_9_fu_1023_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln40_11_fu_1031_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_3_fu_1039_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln27_3_mid1_fu_1060_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln27_1_fu_1067_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_22_fu_1075_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_fu_1087_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_9_fu_1122_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln40_11_fu_1099_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln40_10_fu_1132_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln40_13_fu_1111_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_fu_1090_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_1_fu_1102_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_3_fu_1170_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_2_fu_1161_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_2_fu_1191_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_5_fu_1219_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_4_fu_1210_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_8_fu_1267_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_5_fu_1276_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_7_fu_1286_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln48_fu_1295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component network_mul_mul_16s_15s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component depthwise_conv2d_fix_SeparableConv2D_0_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_0_w_s_U : component depthwise_conv2d_fix_SeparableConv2D_0_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_0_w_s_address0,
        ce0 => SeparableConv2D_0_w_s_ce0,
        q0 => SeparableConv2D_0_w_s_q0,
        address1 => SeparableConv2D_0_w_s_address1,
        ce1 => SeparableConv2D_0_w_s_ce1,
        q1 => SeparableConv2D_0_w_s_q1);

    network_mul_mul_16s_15s_30_1_1_U6 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => reg_323,
        dout => mul_ln40_fu_1303_p2);

    network_mul_mul_16s_15s_30_1_1_U7 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_344,
        din1 => reg_327,
        dout => mul_ln40_1_fu_1309_p2);

    network_mul_mul_16s_15s_30_1_1_U8 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => reg_331,
        dout => mul_ln40_2_fu_1315_p2);

    network_mul_mul_16s_15s_30_1_1_U9 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_344,
        din1 => reg_335,
        dout => mul_ln40_3_fu_1321_p2);

    network_mul_mul_16s_15s_30_1_1_U10 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => reg_323,
        dout => mul_ln40_4_fu_1327_p2);

    network_mul_mul_16s_15s_30_1_1_U11 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_344,
        din1 => reg_327,
        dout => mul_ln40_5_fu_1333_p2);

    network_mul_mul_16s_15s_30_1_1_U12 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => reg_331,
        dout => mul_ln40_6_fu_1339_p2);

    network_mul_mul_16s_15s_30_1_1_U13 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_344,
        din1 => reg_335,
        dout => mul_ln40_7_fu_1345_p2);

    network_mul_mul_16s_15s_30_1_1_U14 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => SeparableConv2D_0_w_18_reg_1673,
        dout => mul_ln40_8_fu_1351_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten80_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten80_reg_265 <= add_ln24_reg_1408;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten80_reg_265 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_288 <= select_ln32_15_reg_1633;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_288 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_276 <= select_ln24_23_reg_1511;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_276 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_300 <= select_ln32_reg_1608;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_300 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_311 <= out_w_reg_1489;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_311 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
                reg_339 <= input_r_q0;
            elsif ((((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_339 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                reg_344 <= input_r_q1;
            elsif ((((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_344 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                SeparableConv2D_0_w_18_reg_1673 <= SeparableConv2D_0_w_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln24_reg_1408 <= add_ln24_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln40_11_reg_1663 <= add_ln40_11_fu_1142_p2;
                add_ln48_1_reg_1668 <= add_ln48_1_fu_1147_p2;
                mul_ln40_2_reg_1643 <= mul_ln40_2_fu_1315_p2;
                mul_ln40_3_reg_1648 <= mul_ln40_3_fu_1321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln40_4_reg_1550 <= add_ln40_4_fu_774_p2;
                    select_ln24_17_reg_1496(0) <= select_ln24_17_fu_657_p3(0);
                    tmp10_1_0_mid2_reg_1516(10 downto 1) <= tmp10_1_0_mid2_fu_728_p3(10 downto 1);
                    zext_ln40_12_reg_1540(4 downto 0) <= zext_ln40_12_fu_757_p1(4 downto 0);
                    zext_ln40_1_reg_1529(4 downto 0) <= zext_ln40_1_fu_740_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln40_7_reg_1576 <= add_ln40_7_fu_928_p2;
                add_ln40_8_reg_1581 <= add_ln40_8_fu_932_p2;
                add_ln48_reg_1586 <= add_ln48_fu_937_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln48_3_reg_1693 <= add_ln48_3_fu_1197_p2;
                mul_ln40_4_reg_1678 <= mul_ln40_4_fu_1327_p2;
                mul_ln40_5_reg_1683 <= mul_ln40_5_fu_1333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln48_4_reg_1708 <= add_ln48_4_fu_1236_p2;
                mul_ln40_6_reg_1698 <= mul_ln40_6_fu_1339_p2;
                mul_ln40_7_reg_1703 <= mul_ln40_7_fu_1345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln48_6_reg_1728 <= add_ln48_6_fu_1281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln48_8_reg_1733 <= add_ln48_8_fu_1290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln48_reg_1586_pp0_iter1_reg <= add_ln48_reg_1586;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                and_ln24_reg_1461 <= and_ln24_fu_575_p2;
                out_h_reg_1469 <= out_h_fu_580_p2;
                out_w_0_mid2_reg_1475 <= out_w_0_mid2_fu_590_p3;
                    tmp10_0_0_mid2_reg_1482(10 downto 1) <= tmp10_0_0_mid2_fu_628_p3(10 downto 1);
                xor_ln24_2_reg_1455 <= xor_ln24_2_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln24_reg_1404 <= icmp_ln24_fu_509_p2;
                icmp_ln24_reg_1404_pp0_iter1_reg <= icmp_ln24_reg_1404;
                icmp_ln24_reg_1404_pp0_iter2_reg <= icmp_ln24_reg_1404_pp0_iter1_reg;
                out_d_reg_1363 <= out_d_fu_353_p2;
                    select_ln27_reg_1379(1 downto 0) <= select_ln27_fu_363_p3(1 downto 0);
                    tmp10_0_0_reg_1384(10 downto 1) <= tmp10_0_0_fu_399_p2(10 downto 1);
                    tmp10_1_0_reg_1389(10 downto 1) <= tmp10_1_0_fu_435_p2(10 downto 1);
                    tmp10_2_0_reg_1394(9 downto 1) <= tmp10_2_0_fu_467_p2(9 downto 1);
                    tmp12_reg_1399(10 downto 2) <= tmp12_fu_503_p2(10 downto 2);
                    zext_ln27_1_reg_1357(0) <= zext_ln27_1_fu_349_p1(0);
                    zext_ln27_2_reg_1373(0) <= zext_ln27_2_fu_359_p1(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_509_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln32_reg_1413 <= icmp_ln32_fu_521_p2;
                icmp_ln33_reg_1440 <= icmp_ln33_fu_535_p2;
                select_ln24_reg_1432 <= select_ln24_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_ln40_1_reg_1618 <= mul_ln40_1_fu_1309_p2;
                mul_ln40_reg_1613 <= mul_ln40_fu_1303_p2;
                    tmp10_2_0_mid2_reg_1601(9 downto 1) <= tmp10_2_0_mid2_fu_1003_p3(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_ln40_8_reg_1723 <= mul_ln40_8_fu_1351_p2;
                trunc_ln48_6_reg_1713 <= mul_ln40_6_reg_1698(29 downto 14);
                trunc_ln48_7_reg_1718 <= mul_ln40_7_reg_1703(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                out_w_reg_1489 <= out_w_fu_636_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then
                reg_323 <= SeparableConv2D_0_w_s_q0;
                reg_327 <= SeparableConv2D_0_w_s_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_331 <= SeparableConv2D_0_w_s_q0;
                reg_335 <= SeparableConv2D_0_w_s_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                select_ln24_23_reg_1511 <= select_ln24_23_fu_677_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln32_15_reg_1633 <= select_ln32_15_fu_1045_p3;
                select_ln32_reg_1608 <= select_ln32_fu_1010_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_1 = and_ln24_reg_1461))) then
                tmp11_mid1_reg_1523 <= tmp11_mid1_fu_735_p2;
            end if;
        end if;
    end process;
    zext_ln27_1_reg_1357(63 downto 1) <= "000000000000000000000000000000000000000000000000000000000000000";
    zext_ln27_2_reg_1373(63 downto 1) <= "000000000000000000000000000000000000000000000000000000000000000";
    select_ln27_reg_1379(2) <= '1';
    tmp10_0_0_reg_1384(0) <= '0';
    tmp10_1_0_reg_1389(0) <= '0';
    tmp10_2_0_reg_1394(0) <= '0';
    tmp12_reg_1399(1 downto 0) <= "00";
    tmp10_0_0_mid2_reg_1482(0) <= '0';
    select_ln24_17_reg_1496(1) <= '1';
    tmp10_1_0_mid2_reg_1516(0) <= '0';
    zext_ln40_1_reg_1529(10 downto 5) <= "000000";
    zext_ln40_12_reg_1540(10 downto 5) <= "000000";
    tmp10_2_0_mid2_reg_1601(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln24_fu_509_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln24_fu_509_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln24_fu_509_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    SeparableConv2D_0_w_s_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, select_ln24_15_fu_541_p3, ap_block_pp0_stage1, zext_ln24_fu_664_p1, ap_block_pp0_stage2, zext_ln24_19_fu_801_p1, ap_block_pp0_stage3, zext_ln24_20_fu_953_p1, ap_block_pp0_stage4, zext_ln24_21_fu_1082_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            SeparableConv2D_0_w_s_address0 <= zext_ln24_21_fu_1082_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            SeparableConv2D_0_w_s_address0 <= zext_ln24_20_fu_953_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            SeparableConv2D_0_w_s_address0 <= zext_ln24_19_fu_801_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            SeparableConv2D_0_w_s_address0 <= zext_ln24_fu_664_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            SeparableConv2D_0_w_s_address0 <= select_ln24_15_fu_541_p3(4 - 1 downto 0);
        else 
            SeparableConv2D_0_w_s_address0 <= "XXXX";
        end if; 
    end process;


    SeparableConv2D_0_w_s_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, select_ln24_16_fu_547_p3, ap_block_pp0_stage2, select_ln24_18_fu_669_p3, ap_block_pp0_stage3, zext_ln24_22_fu_820_p1, ap_block_pp0_stage4, select_ln24_21_fu_958_p3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                SeparableConv2D_0_w_s_address1 <= select_ln24_21_fu_958_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                SeparableConv2D_0_w_s_address1 <= zext_ln24_22_fu_820_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                SeparableConv2D_0_w_s_address1 <= select_ln24_18_fu_669_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SeparableConv2D_0_w_s_address1 <= select_ln24_16_fu_547_p3(4 - 1 downto 0);
            else 
                SeparableConv2D_0_w_s_address1 <= "XXXX";
            end if;
        else 
            SeparableConv2D_0_w_s_address1 <= "XXXX";
        end if; 
    end process;


    SeparableConv2D_0_w_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            SeparableConv2D_0_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_0_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_w_s_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            SeparableConv2D_0_w_s_ce1 <= ap_const_logic_1;
        else 
            SeparableConv2D_0_w_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_fu_515_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten80_phi_fu_269_p4) + unsigned(ap_const_lv10_1));
    add_ln32_3_fu_1039_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_288) + unsigned(ap_const_lv10_1));
    add_ln40_10_fu_1132_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1601) + unsigned(zext_ln40_11_fu_1099_p1));
    add_ln40_11_fu_1142_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1601) + unsigned(zext_ln40_13_fu_1111_p1));
    add_ln40_3_fu_760_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1482) + unsigned(zext_ln40_12_fu_757_p1));
    add_ln40_4_fu_774_p2 <= std_logic_vector(unsigned(out_w_0_mid2_reg_1475) + unsigned(ap_const_lv5_2));
    add_ln40_5_fu_901_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1482) + unsigned(zext_ln40_14_fu_898_p1));
    add_ln40_6_fu_915_p2 <= std_logic_vector(unsigned(zext_ln40_1_reg_1529) + unsigned(tmp10_1_0_mid2_reg_1516));
    add_ln40_7_fu_928_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1516) + unsigned(zext_ln40_12_reg_1540));
    add_ln40_8_fu_932_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1516) + unsigned(zext_ln40_14_fu_898_p1));
    add_ln40_9_fu_1122_p2 <= std_logic_vector(unsigned(zext_ln40_fu_1087_p1) + unsigned(tmp10_2_0_mid2_reg_1601));
    add_ln40_fu_743_p2 <= std_logic_vector(unsigned(zext_ln40_1_fu_740_p1) + unsigned(tmp10_0_0_mid2_reg_1482));
    add_ln48_1_fu_1147_p2 <= std_logic_vector(unsigned(trunc_ln_fu_1090_p4) + unsigned(trunc_ln48_1_fu_1102_p4));
    add_ln48_2_fu_1191_p2 <= std_logic_vector(unsigned(trunc_ln48_3_fu_1170_p4) + unsigned(trunc_ln48_2_fu_1161_p4));
    add_ln48_3_fu_1197_p2 <= std_logic_vector(unsigned(add_ln48_1_reg_1668) + unsigned(add_ln48_2_fu_1191_p2));
    add_ln48_4_fu_1236_p2 <= std_logic_vector(unsigned(trunc_ln48_5_fu_1219_p4) + unsigned(trunc_ln48_4_fu_1210_p4));
    add_ln48_5_fu_1276_p2 <= std_logic_vector(unsigned(trunc_ln48_8_fu_1267_p4) + unsigned(trunc_ln48_7_reg_1718));
    add_ln48_6_fu_1281_p2 <= std_logic_vector(unsigned(trunc_ln48_6_reg_1713) + unsigned(add_ln48_5_fu_1276_p2));
    add_ln48_7_fu_1286_p2 <= std_logic_vector(unsigned(add_ln48_4_reg_1708) + unsigned(add_ln48_6_reg_1728));
    add_ln48_8_fu_1290_p2 <= std_logic_vector(unsigned(add_ln48_3_reg_1693) + unsigned(add_ln48_7_fu_1286_p2));
    add_ln48_fu_937_p2 <= std_logic_vector(unsigned(zext_ln40_1_reg_1529) + unsigned(tmp12_mid2_fu_891_p3));
    and_ln24_fu_575_p2 <= (xor_ln24_fu_570_p2 and icmp_ln33_reg_1440);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln24_fu_509_p2)
    begin
        if ((icmp_ln24_fu_509_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten80_phi_fu_269_p4_assign_proc : process(indvar_flatten80_reg_265, icmp_ln24_reg_1404, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln24_reg_1408, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten80_phi_fu_269_p4 <= add_ln24_reg_1408;
        else 
            ap_phi_mux_indvar_flatten80_phi_fu_269_p4 <= indvar_flatten80_reg_265;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_292_p4_assign_proc : process(indvar_flatten_reg_288, icmp_ln24_reg_1404, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_15_reg_1633, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_292_p4 <= select_ln32_15_reg_1633;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_292_p4 <= indvar_flatten_reg_288;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_280_p4_assign_proc : process(out_d_0_reg_276, icmp_ln24_reg_1404, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln24_23_reg_1511, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_280_p4 <= select_ln24_23_reg_1511;
        else 
            ap_phi_mux_out_d_0_phi_fu_280_p4 <= out_d_0_reg_276;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_304_p4_assign_proc : process(out_h_0_reg_300, icmp_ln24_reg_1404, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_reg_1608, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_304_p4 <= select_ln32_reg_1608;
        else 
            ap_phi_mux_out_h_0_phi_fu_304_p4 <= out_h_0_reg_300;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_315_p4_assign_proc : process(out_w_0_reg_311, icmp_ln24_reg_1404, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1489, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1404 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_315_p4 <= out_w_reg_1489;
        else 
            ap_phi_mux_out_w_0_phi_fu_315_p4 <= out_w_0_reg_311;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_63_fu_585_p2 <= (icmp_ln32_reg_1413 or and_ln24_fu_575_p2);
    icmp_ln24_fu_509_p2 <= "1" when (ap_phi_mux_indvar_flatten80_phi_fu_269_p4 = ap_const_lv10_310) else "0";
    icmp_ln32_fu_521_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_292_p4 = ap_const_lv10_310) else "0";
    icmp_ln33_fu_535_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_315_p4 = ap_const_lv5_1C) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln40_3_fu_769_p1, ap_block_pp0_stage3, zext_ln40_5_fu_923_p1, ap_block_pp0_stage4, zext_ln40_7_fu_1034_p1, zext_ln40_8_fu_1127_p1, zext_ln40_10_fu_1187_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_10_fu_1187_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln40_8_fu_1127_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_7_fu_1034_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln40_5_fu_923_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln40_3_fu_769_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, zext_ln40_2_fu_752_p1, ap_block_pp0_stage3, zext_ln40_4_fu_910_p1, ap_block_pp0_stage4, zext_ln40_6_fu_1026_p1, zext_ln40_9_fu_1137_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln40_9_fu_1137_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address1 <= zext_ln40_6_fu_1026_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln40_4_fu_910_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln40_2_fu_752_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln27_1_fu_1067_p3 <= (ap_const_lv3_4 & out_d_0_reg_276);
    or_ln27_1_mid1_fu_779_p3 <= (ap_const_lv2_2 & out_d_reg_1363);
    or_ln27_3_mid1_fu_1060_p3 <= (ap_const_lv3_4 & out_d_reg_1363);
    or_ln27_mid1_fu_642_p3 <= (ap_const_lv1_1 & out_d_reg_1363);
    or_ln27_s_fu_786_p3 <= (ap_const_lv2_2 & out_d_0_reg_276);
    or_ln_fu_649_p3 <= (ap_const_lv1_1 & out_d_0_reg_276);
    out_d_fu_353_p2 <= (ap_phi_mux_out_d_0_phi_fu_280_p4 xor ap_const_lv1_1);
    out_h_fu_580_p2 <= std_logic_vector(unsigned(select_ln24_reg_1432) + unsigned(ap_const_lv5_1));
    out_w_0_mid2_fu_590_p3 <= 
        ap_const_lv5_0 when (empty_63_fu_585_p2(0) = '1') else 
        out_w_0_reg_311;
    out_w_fu_636_p2 <= std_logic_vector(unsigned(out_w_0_mid2_fu_590_p3) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln48_fu_1298_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln48_8_reg_1733;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln24_reg_1404_pp0_iter2_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln24_reg_1404_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl13_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_479_p3),11));
    p_shl13_cast_mid170_c_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_825_p3),7));
    p_shl13_cast_mid1_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl13_mid1_fu_863_p3),11));
    p_shl13_mid1_fu_863_p3 <= (tmp11_mid1_reg_1523 & ap_const_lv5_0);
    p_shl14_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_491_p3),11));
    p_shl14_cast_mid174_c_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_836_p3),7));
    p_shl14_cast_mid1_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_mid1_fu_874_p3),11));
    p_shl14_mid1_fu_874_p3 <= (tmp11_mid1_reg_1523 & ap_const_lv2_0);
    p_shl15_mid1_fu_977_p3 <= (tmp_2_0_mid1_fu_972_p2 & ap_const_lv5_0);
    p_shl16_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_455_p3),10));
    p_shl16_cast_mid1_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl16_mid1_fu_985_p3),10));
    p_shl16_mid1_fu_985_p3 <= (tmp_2_0_mid1_fu_972_p2 & ap_const_lv1_0);
    p_shl17_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_411_p3),11));
    p_shl17_cast_mid1_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl17_mid1_fu_698_p3),11));
    p_shl17_mid1_fu_698_p3 <= (tmp_1_0_mid1_fu_693_p2 & ap_const_lv5_0);
    p_shl18_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_423_p3),11));
    p_shl18_cast_mid1_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_mid1_fu_710_p3),11));
    p_shl18_mid1_fu_710_p3 <= (tmp_1_0_mid1_fu_693_p2 & ap_const_lv1_0);
    p_shl19_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_375_p3),11));
    p_shl19_cast_mid1_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_mid1_fu_598_p3),11));
    p_shl19_mid1_fu_598_p3 <= (out_h_fu_580_p2 & ap_const_lv5_0);
    p_shl1_fu_387_p3 <= (ap_phi_mux_out_h_0_phi_fu_304_p4 & ap_const_lv1_0);
    p_shl20_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_387_p3),11));
    p_shl20_cast_mid1_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl20_mid1_fu_610_p3),11));
    p_shl20_mid1_fu_610_p3 <= (out_h_fu_580_p2 & ap_const_lv1_0);
    p_shl2_fu_411_p3 <= (tmp_1_0_fu_405_p2 & ap_const_lv5_0);
    p_shl3_fu_423_p3 <= (tmp_1_0_fu_405_p2 & ap_const_lv1_0);
    p_shl4_fu_447_p3 <= (tmp_2_0_fu_441_p2 & ap_const_lv5_0);
    p_shl5_fu_455_p3 <= (tmp_2_0_fu_441_p2 & ap_const_lv1_0);
    p_shl6_fu_479_p3 <= (tmp11_fu_473_p2 & ap_const_lv5_0);
    p_shl7_fu_491_p3 <= (tmp11_fu_473_p2 & ap_const_lv2_0);
    p_shl_fu_375_p3 <= (ap_phi_mux_out_h_0_phi_fu_304_p4 & ap_const_lv5_0);
    select_ln24_15_fu_541_p3 <= 
        zext_ln27_2_reg_1373 when (icmp_ln32_reg_1413(0) = '1') else 
        zext_ln27_1_reg_1357;
    select_ln24_16_fu_547_p3 <= 
        zext_ln27_1_reg_1357 when (icmp_ln32_reg_1413(0) = '1') else 
        zext_ln27_2_reg_1373;
    select_ln24_17_fu_657_p3 <= 
        or_ln27_mid1_fu_642_p3 when (icmp_ln32_reg_1413(0) = '1') else 
        or_ln_fu_649_p3;
    select_ln24_18_fu_669_p3 <= 
        ap_const_lv64_3 when (xor_ln24_2_reg_1455(0) = '1') else 
        ap_const_lv64_0;
    select_ln24_19_fu_794_p3 <= 
        or_ln27_1_mid1_fu_779_p3 when (icmp_ln32_reg_1413(0) = '1') else 
        or_ln27_s_fu_786_p3;
    select_ln24_20_fu_814_p3 <= 
        select_ln27_1_fu_806_p3 when (icmp_ln32_reg_1413(0) = '1') else 
        select_ln27_reg_1379;
    select_ln24_21_fu_958_p3 <= 
        ap_const_lv64_7 when (xor_ln24_2_reg_1455(0) = '1') else 
        ap_const_lv64_0;
    select_ln24_22_fu_1075_p3 <= 
        or_ln27_3_mid1_fu_1060_p3 when (icmp_ln32_reg_1413(0) = '1') else 
        or_ln27_1_fu_1067_p3;
    select_ln24_23_fu_677_p3 <= 
        out_d_reg_1363 when (icmp_ln32_reg_1413(0) = '1') else 
        out_d_0_reg_276;
    select_ln24_24_fu_564_p3 <= 
        ap_const_lv11_0 when (icmp_ln32_reg_1413(0) = '1') else 
        tmp10_0_0_reg_1384;
    select_ln24_25_fu_687_p3 <= 
        ap_const_lv11_1E when (icmp_ln32_reg_1413(0) = '1') else 
        tmp10_1_0_reg_1389;
    select_ln24_26_fu_966_p3 <= 
        ap_const_lv10_3C when (icmp_ln32_reg_1413(0) = '1') else 
        tmp10_2_0_reg_1394;
    select_ln24_27_fu_857_p3 <= 
        tmp12_mid176_cast_fu_853_p1 when (icmp_ln32_reg_1413(0) = '1') else 
        tmp12_reg_1399;
    select_ln24_fu_527_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_fu_521_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_304_p4;
    select_ln27_1_fu_806_p3 <= 
        ap_const_lv3_5 when (out_d_0_reg_276(0) = '1') else 
        ap_const_lv3_6;
    select_ln27_fu_363_p3 <= 
        ap_const_lv3_6 when (ap_phi_mux_out_d_0_phi_fu_280_p4(0) = '1') else 
        ap_const_lv3_5;
    select_ln32_15_fu_1045_p3 <= 
        ap_const_lv10_1 when (icmp_ln32_reg_1413(0) = '1') else 
        add_ln32_3_fu_1039_p2;
    select_ln32_fu_1010_p3 <= 
        out_h_reg_1469 when (and_ln24_reg_1461(0) = '1') else 
        select_ln24_reg_1432;
        sext_ln24_20_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln24_17_reg_1496),3));

        sext_ln40_11_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_8_reg_1581),32));

        sext_ln40_1_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_fu_743_p2),32));

        sext_ln40_3_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_3_fu_760_p2),32));

        sext_ln40_5_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_5_fu_901_p2),32));

        sext_ln40_7_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_6_fu_915_p2),32));

        sext_ln40_9_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln40_7_reg_1576),32));

        sext_ln48_fu_1295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln48_reg_1586_pp0_iter1_reg),32));

    tmp10_0_0_fu_399_p2 <= std_logic_vector(unsigned(p_shl19_cast_fu_383_p1) - unsigned(p_shl20_cast_fu_395_p1));
    tmp10_0_0_mid1_fu_622_p2 <= std_logic_vector(unsigned(p_shl19_cast_mid1_fu_606_p1) - unsigned(p_shl20_cast_mid1_fu_618_p1));
    tmp10_0_0_mid2_fu_628_p3 <= 
        tmp10_0_0_mid1_fu_622_p2 when (and_ln24_fu_575_p2(0) = '1') else 
        select_ln24_24_fu_564_p3;
    tmp10_1_0_fu_435_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_419_p1) - unsigned(p_shl18_cast_fu_431_p1));
    tmp10_1_0_mid1_fu_722_p2 <= std_logic_vector(unsigned(p_shl17_cast_mid1_fu_706_p1) - unsigned(p_shl18_cast_mid1_fu_718_p1));
    tmp10_1_0_mid2_fu_728_p3 <= 
        tmp10_1_0_mid1_fu_722_p2 when (and_ln24_reg_1461(0) = '1') else 
        select_ln24_25_fu_687_p3;
    tmp10_2_0_fu_467_p2 <= std_logic_vector(unsigned(p_shl4_fu_447_p3) - unsigned(p_shl16_cast_fu_463_p1));
    tmp10_2_0_mid1_fu_997_p2 <= std_logic_vector(unsigned(p_shl15_mid1_fu_977_p3) - unsigned(p_shl16_cast_mid1_fu_993_p1));
    tmp10_2_0_mid2_fu_1003_p3 <= 
        tmp10_2_0_mid1_fu_997_p2 when (and_ln24_reg_1461(0) = '1') else 
        select_ln24_26_fu_966_p3;
    tmp11_fu_473_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_h_0_phi_fu_304_p4) + unsigned(zext_ln48_1_fu_371_p1));
    tmp11_mid1_fu_735_p2 <= std_logic_vector(unsigned(out_h_reg_1469) + unsigned(zext_ln24_23_fu_683_p1));
    tmp12_fu_503_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_487_p1) - unsigned(p_shl14_cast_fu_499_p1));
        tmp12_mid176_cast_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_mid176_fu_847_p2),11));

    tmp12_mid176_fu_847_p2 <= std_logic_vector(unsigned(p_shl13_cast_mid170_c_fu_832_p1) - unsigned(p_shl14_cast_mid174_c_fu_843_p1));
    tmp12_mid1_fu_885_p2 <= std_logic_vector(unsigned(p_shl13_cast_mid1_fu_870_p1) - unsigned(p_shl14_cast_mid1_fu_881_p1));
    tmp12_mid2_fu_891_p3 <= 
        tmp12_mid1_fu_885_p2 when (and_ln24_reg_1461(0) = '1') else 
        select_ln24_27_fu_857_p3;
    tmp_1_0_fu_405_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_h_0_phi_fu_304_p4) + unsigned(ap_const_lv5_1));
    tmp_1_0_mid1_fu_693_p2 <= std_logic_vector(unsigned(select_ln24_reg_1432) + unsigned(ap_const_lv5_2));
    tmp_2_0_fu_441_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_h_0_phi_fu_304_p4) + unsigned(ap_const_lv5_2));
    tmp_2_0_mid1_fu_972_p2 <= std_logic_vector(unsigned(select_ln24_reg_1432) + unsigned(ap_const_lv5_3));
    tmp_3_fu_836_p3 <= (out_d_reg_1363 & ap_const_lv2_0);
    tmp_fu_825_p3 <= (out_d_reg_1363 & ap_const_lv5_0);
    trunc_ln48_1_fu_1102_p4 <= mul_ln40_1_reg_1618(29 downto 14);
    trunc_ln48_2_fu_1161_p4 <= mul_ln40_2_reg_1643(29 downto 14);
    trunc_ln48_3_fu_1170_p4 <= mul_ln40_3_reg_1648(29 downto 14);
    trunc_ln48_4_fu_1210_p4 <= mul_ln40_4_reg_1678(29 downto 14);
    trunc_ln48_5_fu_1219_p4 <= mul_ln40_5_reg_1683(29 downto 14);
    trunc_ln48_8_fu_1267_p4 <= mul_ln40_8_reg_1723(29 downto 14);
    trunc_ln_fu_1090_p4 <= mul_ln40_reg_1613(29 downto 14);
    xor_ln24_1_fu_553_p2 <= (icmp_ln32_reg_1413 xor ap_const_lv1_1);
    xor_ln24_2_fu_558_p2 <= (xor_ln24_1_fu_553_p2 xor out_d_0_reg_276);
    xor_ln24_fu_570_p2 <= (icmp_ln32_reg_1413 xor ap_const_lv1_1);
    zext_ln24_19_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_19_fu_794_p3),64));
    zext_ln24_20_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln24_20_fu_950_p1),64));
    zext_ln24_21_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_22_fu_1075_p3),64));
    zext_ln24_22_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_20_fu_814_p3),64));
    zext_ln24_23_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_23_fu_677_p3),5));
    zext_ln24_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_17_fu_657_p3),64));
    zext_ln27_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_280_p4),64));
    zext_ln27_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_353_p2),64));
    zext_ln40_10_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_11_reg_1663),64));
    zext_ln40_11_fu_1099_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_1489),10));
    zext_ln40_12_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_1489),11));
    zext_ln40_13_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_4_reg_1550),10));
    zext_ln40_14_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_4_reg_1550),11));
    zext_ln40_1_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1475),11));
    zext_ln40_2_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln40_1_fu_748_p1),64));
    zext_ln40_3_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln40_3_fu_765_p1),64));
    zext_ln40_4_fu_910_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln40_5_fu_906_p1),64));
    zext_ln40_5_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln40_7_fu_919_p1),64));
    zext_ln40_6_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln40_9_fu_1023_p1),64));
    zext_ln40_7_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln40_11_fu_1031_p1),64));
    zext_ln40_8_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_9_fu_1122_p2),64));
    zext_ln40_9_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_10_fu_1132_p2),64));
    zext_ln40_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1475),10));
    zext_ln48_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_280_p4),5));
    zext_ln48_fu_1298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln48_fu_1295_p1),64));
end behav;
