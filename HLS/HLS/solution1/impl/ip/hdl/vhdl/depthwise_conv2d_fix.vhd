-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_ce0 : STD_LOGIC;
    signal empty_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_fu_180_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_h_fu_192_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp8_fu_222_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp8_reg_433 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln31_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_234_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_441 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln35_fu_240_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_reg_446 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln32_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_h_fu_250_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_h_reg_454 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln37_fu_272_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln37_reg_459 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln35_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_308_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_reg_464 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_w_fu_338_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_reg_472 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln36_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_487 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal empty_79_reg_492 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_7_reg_497 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal buffer_fu_404_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_0_reg_93 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln24_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_0_reg_104 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_h_0_reg_140 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_1_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_w_0_reg_163 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln45_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_9_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_8_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl8_fu_198_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl9_fu_210_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl8_cast_fu_206_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_218_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_260_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln37_22_fu_268_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln37_fu_256_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_278_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_fu_284_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_fu_296_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_cast_fu_292_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_304_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln45_fu_319_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln45_fu_323_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln37_23_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln37_fu_348_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln37_24_fu_354_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln37_4_fu_358_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln37_12_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_5_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln37_13_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_410_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln37_2_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component network_mul_mul_16s_13s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component depthwise_conv2d_fix_empty IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    empty_U : component depthwise_conv2d_fix_empty
    generic map (
        DataWidth => 13,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => empty_address0,
        ce0 => empty_ce0,
        q0 => empty_q0);

    network_mul_mul_16s_13s_30_1_1_U6 : component network_mul_mul_16s_13s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 30)
    port map (
        din0 => input_load_reg_487,
        din1 => empty_79_reg_492,
        dout => mul_ln37_fu_410_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln36_fu_332_p2 = ap_const_lv1_1))) then 
                buffer_0_reg_128 <= buffer_1_reg_151;
            elsif (((icmp_ln32_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buffer_0_reg_128 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    buffer_1_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buffer_1_reg_151 <= buffer_0_reg_128;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                buffer_1_reg_151 <= buffer_fu_404_p2;
            end if; 
        end if;
    end process;

    i_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_93 <= i_fu_180_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_93 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_h_0_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln36_fu_332_p2 = ap_const_lv1_1))) then 
                k_h_0_reg_140 <= k_h_reg_454;
            elsif (((icmp_ln32_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_h_0_reg_140 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_w_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_w_0_reg_163 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_w_0_reg_163 <= k_w_reg_472;
            end if; 
        end if;
    end process;

    out_h_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_174_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_104 <= ap_const_lv5_0;
            elsif (((icmp_ln32_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_h_0_reg_104 <= out_h_reg_428;
            end if; 
        end if;
    end process;

    out_w_0_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_0_reg_116 <= ap_const_lv5_0;
            elsif (((icmp_ln35_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                out_w_0_reg_116 <= out_w_reg_441;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                empty_79_reg_492 <= empty_q0;
                input_load_reg_487 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_h_reg_454 <= k_h_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_w_reg_472 <= k_w_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_reg_428 <= out_h_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_reg_441 <= out_w_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_244_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sub_ln37_reg_459 <= sub_ln37_fu_272_p2;
                    tmp6_reg_464(10 downto 1) <= tmp6_fu_308_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp8_reg_433(10 downto 2) <= tmp8_fu_222_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_7_reg_497 <= mul_ln37_fu_410_p2(29 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln35_reg_446(4 downto 0) <= zext_ln35_fu_240_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp8_reg_433(1 downto 0) <= "00";
    zext_ln35_reg_446(10 downto 5) <= "000000";
    tmp6_reg_464(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln31_fu_186_p2, ap_CS_fsm_state4, icmp_ln32_fu_228_p2, ap_CS_fsm_state5, icmp_ln35_fu_244_p2, ap_CS_fsm_state6, icmp_ln36_fu_332_p2, icmp_ln24_fu_174_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln24_fu_174_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln31_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln32_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln35_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln36_fu_332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln37_4_fu_358_p2 <= std_logic_vector(unsigned(tmp6_reg_464) + unsigned(zext_ln37_24_fu_354_p1));
    add_ln37_5_fu_372_p2 <= std_logic_vector(unsigned(zext_ln37_23_fu_344_p1) + unsigned(sub_ln37_reg_459));
    add_ln37_fu_348_p2 <= std_logic_vector(unsigned(out_w_0_reg_116) + unsigned(zext_ln37_23_fu_344_p1));
    add_ln45_fu_319_p2 <= std_logic_vector(unsigned(tmp8_reg_433) + unsigned(zext_ln35_reg_446));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_186_p2)
    begin
        if ((((icmp_ln31_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln31_fu_186_p2)
    begin
        if (((icmp_ln31_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_404_p2 <= std_logic_vector(unsigned(buffer_1_reg_151) + unsigned(sext_ln37_2_fu_401_p1));
    empty_address0 <= zext_ln37_8_fu_381_p1(4 - 1 downto 0);

    empty_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            empty_ce0 <= ap_const_logic_1;
        else 
            empty_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_180_p2 <= std_logic_vector(unsigned(i_0_reg_93) + unsigned(ap_const_lv4_1));
    icmp_ln24_fu_174_p2 <= "1" when (i_0_reg_93 = ap_const_lv4_9) else "0";
    icmp_ln31_fu_186_p2 <= "1" when (out_h_0_reg_104 = ap_const_lv5_1C) else "0";
    icmp_ln32_fu_228_p2 <= "1" when (out_w_0_reg_116 = ap_const_lv5_1C) else "0";
    icmp_ln35_fu_244_p2 <= "1" when (k_h_0_reg_140 = ap_const_lv2_3) else "0";
    icmp_ln36_fu_332_p2 <= "1" when (k_w_0_reg_163 = ap_const_lv2_3) else "0";
    input_r_address0 <= zext_ln37_9_fu_367_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_h_fu_250_p2 <= std_logic_vector(unsigned(k_h_0_reg_140) + unsigned(ap_const_lv2_1));
    k_w_fu_338_p2 <= std_logic_vector(unsigned(k_w_0_reg_163) + unsigned(ap_const_lv2_1));
    out_h_fu_192_p2 <= std_logic_vector(unsigned(out_h_0_reg_104) + unsigned(ap_const_lv5_1));
    out_w_fu_234_p2 <= std_logic_vector(unsigned(out_w_0_reg_116) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln45_fu_327_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer_0_reg_128(16 - 1 downto 0);

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln35_fu_244_p2)
    begin
        if (((icmp_ln35_fu_244_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl6_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_284_p3),11));
    p_shl6_fu_284_p3 <= (tmp_fu_278_p2 & ap_const_lv5_0);
    p_shl7_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_296_p3),11));
    p_shl7_fu_296_p3 <= (tmp_fu_278_p2 & ap_const_lv1_0);
    p_shl8_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_198_p3),11));
    p_shl8_fu_198_p3 <= (out_h_0_reg_104 & ap_const_lv5_0);
    p_shl9_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_210_p3),11));
    p_shl9_fu_210_p3 <= (out_h_0_reg_104 & ap_const_lv2_0);
        sext_ln37_12_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_4_fu_358_p2),32));

        sext_ln37_13_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_5_fu_372_p2),32));

        sext_ln37_2_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_reg_497),32));

        sext_ln45_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln45_fu_319_p2),32));

    shl_ln_fu_260_p3 <= (k_h_0_reg_140 & ap_const_lv2_0);
    sub_ln37_fu_272_p2 <= std_logic_vector(unsigned(zext_ln37_22_fu_268_p1) - unsigned(zext_ln37_fu_256_p1));
    tmp6_fu_308_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_292_p1) - unsigned(p_shl7_cast_fu_304_p1));
    tmp8_fu_222_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_206_p1) - unsigned(p_shl9_cast_fu_218_p1));
    tmp_fu_278_p2 <= std_logic_vector(unsigned(zext_ln37_fu_256_p1) + unsigned(out_h_0_reg_104));
    zext_ln35_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_116),11));
    zext_ln37_22_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_260_p3),5));
    zext_ln37_23_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_0_reg_163),5));
    zext_ln37_24_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_fu_348_p2),11));
    zext_ln37_8_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_13_fu_377_p1),64));
    zext_ln37_9_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_12_fu_363_p1),64));
    zext_ln37_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_0_reg_140),5));
    zext_ln45_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln45_fu_323_p1),64));
end behav;
