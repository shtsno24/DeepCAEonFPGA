-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1E : STD_LOGIC_VECTOR (10 downto 0) := "00000011110";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv10_3C : STD_LOGIC_VECTOR (9 downto 0) := "0000111100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_0_w_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_0_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_0_w_s_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_0_w_s_ce1 : STD_LOGIC;
    signal SeparableConv2D_0_w_s_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten80_reg_265 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_d_0_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_288 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_300 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_311 : STD_LOGIC_VECTOR (4 downto 0);
    signal reg_323 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln24_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_327 : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_331 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_335 : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_339 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_reg_1408_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_reg_1373 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_fu_363_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln27_reg_1383 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp10_0_0_fu_399_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_reg_1388 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_fu_435_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_reg_1393 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_fu_467_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_2_0_reg_1398 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp12_fu_503_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_reg_1403 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_515_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln24_reg_1412 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln32_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1417 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_527_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_reg_1434 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1451 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_559_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_1456 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_17_fu_580_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln24_17_reg_1464 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln24_2_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_2_reg_1474 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_reg_1484 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_0_mid2_fu_639_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_mid2_reg_1491 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp10_0_0_mid2_fu_675_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid2_reg_1497 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_fu_718_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_reg_1502 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln38_1_fu_726_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln38_1_reg_1509 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_745_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_1520 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_12_fu_751_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln38_12_reg_1526 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_23_fu_816_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_23_reg_1546 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_3_fu_906_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln38_3_reg_1551 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln38_6_fu_942_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln38_6_reg_1566 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln38_7_fu_946_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln38_7_reg_1571 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln46_fu_951_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln46_reg_1576 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln46_reg_1576_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_1017_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_2_0_mid2_reg_1591 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_reg_1598 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_1_reg_1603 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln32_3_fu_1066_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln32_3_reg_1618 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_fu_1107_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_reg_1628 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln46_2_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_3_reg_1638 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln38_10_fu_1167_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_10_reg_1653 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln46_1_fu_1172_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_1_reg_1658 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln32_3_fu_1176_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln32_3_reg_1663 : STD_LOGIC_VECTOR (9 downto 0);
    signal SeparableConv2D_0_w_18_reg_1668 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln46_4_reg_1673 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_5_reg_1678 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_3_fu_1224_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_3_reg_1688 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_6_reg_1693 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_7_reg_1698 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_4_fu_1263_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_4_reg_1703 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_8_reg_1708 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_8_fu_1297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_8_reg_1713 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten80_phi_fu_269_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_280_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_292_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_304_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_315_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_15_fu_535_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln24_16_fu_544_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal select_ln24_18_fu_603_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_2_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_3_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_19_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_22_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_4_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_5_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_20_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal select_ln24_21_fu_972_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_6_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_7_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_21_fu_1102_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln38_8_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_9_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_10_fu_1216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_1305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_375_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_387_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl19_cast_fu_383_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl20_cast_fu_395_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_0_fu_405_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_fu_411_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_fu_423_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl17_cast_fu_419_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl18_cast_fu_431_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_0_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl5_fu_455_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl4_fu_447_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl16_cast_fu_463_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_1_fu_371_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp11_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl6_fu_479_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl7_fu_491_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl13_cast_fu_487_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_cast_fu_499_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln27_2_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_1_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln27_mid1_fu_565_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_fu_572_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln24_1_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_66_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl19_mid1_fu_647_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl20_mid1_fu_658_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl19_cast_mid1_fu_654_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl20_cast_mid1_fu_665_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid1_fu_669_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_24_fu_612_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_0_mid1_fu_683_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl17_mid1_fu_688_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl18_mid1_fu_700_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl17_cast_mid1_fu_696_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl18_cast_mid1_fu_708_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid1_fu_712_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_25_fu_618_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln38_fu_730_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln38_1_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_2_fu_755_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln38_3_fu_761_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln27_1_mid1_fu_770_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln27_s_fu_777_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln24_19_fu_785_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln27_1_fu_797_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln24_20_fu_805_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_826_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_837_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl13_cast_mid170_c_fu_833_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl14_cast_mid174_c_fu_844_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid176_fu_848_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid176_cast_fu_854_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln24_23_fu_822_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp11_mid1_fu_864_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl13_mid1_fu_869_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl14_mid1_fu_881_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl13_cast_mid1_fu_877_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl14_cast_mid1_fu_889_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_mid1_fu_893_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_27_fu_858_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln38_14_fu_911_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln38_4_fu_915_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln38_5_fu_920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_5_fu_929_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln38_7_fu_933_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_mid2_fu_899_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln24_20_fu_964_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_0_mid1_fu_986_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl16_mid1_fu_999_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl15_mid1_fu_991_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl16_cast_mid1_fu_1007_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp10_2_0_mid1_fu_1011_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln24_26_fu_980_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln38_fu_1310_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_1_fu_1317_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln38_9_fu_1050_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln38_11_fu_1058_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln27_3_mid1_fu_1080_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln27_1_fu_1087_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_22_fu_1095_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln38_2_fu_1324_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_3_fu_1331_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln38_fu_1112_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_8_fu_1147_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_11_fu_1115_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_9_fu_1157_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_13_fu_1118_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln38_4_fu_1338_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_5_fu_1345_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln46_2_fu_1220_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln38_6_fu_1352_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_7_fu_1359_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln38_8_fu_1366_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln46_5_fu_1283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_6_fu_1287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln46_7_fu_1292_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln46_fu_1302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component network_mul_mul_16s_15s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component depthwise_conv2d_fix_SeparableConv2D_0_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_0_w_s_U : component depthwise_conv2d_fix_SeparableConv2D_0_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_0_w_s_address0,
        ce0 => SeparableConv2D_0_w_s_ce0,
        q0 => SeparableConv2D_0_w_s_q0,
        address1 => SeparableConv2D_0_w_s_address1,
        ce1 => SeparableConv2D_0_w_s_ce1,
        q1 => SeparableConv2D_0_w_s_q1);

    network_mul_mul_16s_15s_30_1_1_U6 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => reg_323,
        dout => mul_ln38_fu_1310_p2);

    network_mul_mul_16s_15s_30_1_1_U7 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_344,
        din1 => reg_327,
        dout => mul_ln38_1_fu_1317_p2);

    network_mul_mul_16s_15s_30_1_1_U8 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => reg_331,
        dout => mul_ln38_2_fu_1324_p2);

    network_mul_mul_16s_15s_30_1_1_U9 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_344,
        din1 => reg_335,
        dout => mul_ln38_3_fu_1331_p2);

    network_mul_mul_16s_15s_30_1_1_U10 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => reg_323,
        dout => mul_ln38_4_fu_1338_p2);

    network_mul_mul_16s_15s_30_1_1_U11 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_344,
        din1 => reg_327,
        dout => mul_ln38_5_fu_1345_p2);

    network_mul_mul_16s_15s_30_1_1_U12 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => reg_331,
        dout => mul_ln38_6_fu_1352_p2);

    network_mul_mul_16s_15s_30_1_1_U13 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_344,
        din1 => reg_335,
        dout => mul_ln38_7_fu_1359_p2);

    network_mul_mul_16s_15s_30_1_1_U14 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => reg_339,
        din1 => SeparableConv2D_0_w_18_reg_1668,
        dout => mul_ln38_8_fu_1366_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten80_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten80_reg_265 <= add_ln24_reg_1412;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten80_reg_265 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_288 <= select_ln32_3_reg_1663;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_288 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_276 <= select_ln24_23_reg_1546;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_276 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_300 <= select_ln32_reg_1628;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_300 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_311 <= out_w_reg_1520;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_311 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_339 <= input_r_q1;
            elsif ((((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln24_reg_1408_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
                reg_339 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_344 <= input_r_q0;
            elsif (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                reg_344 <= input_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                SeparableConv2D_0_w_18_reg_1668 <= SeparableConv2D_0_w_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln24_reg_1412 <= add_ln24_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln32_reg_1417 = ap_const_lv1_0) and (icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln32_3_reg_1618 <= add_ln32_3_fu_1066_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln38_10_reg_1653 <= add_ln38_10_fu_1167_p2;
                add_ln46_1_reg_1658 <= add_ln46_1_fu_1172_p2;
                trunc_ln46_2_reg_1633 <= mul_ln38_2_fu_1324_p2(29 downto 14);
                trunc_ln46_3_reg_1638 <= mul_ln38_3_fu_1331_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln38_3_reg_1551 <= add_ln38_3_fu_906_p2;
                add_ln38_6_reg_1566 <= add_ln38_6_fu_942_p2;
                add_ln38_7_reg_1571 <= add_ln38_7_fu_946_p2;
                add_ln46_reg_1576 <= add_ln46_fu_951_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln46_3_reg_1688 <= add_ln46_3_fu_1224_p2;
                trunc_ln46_4_reg_1673 <= mul_ln38_4_fu_1338_p2(29 downto 14);
                trunc_ln46_5_reg_1678 <= mul_ln38_5_fu_1345_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln46_4_reg_1703 <= add_ln46_4_fu_1263_p2;
                trunc_ln46_6_reg_1693 <= mul_ln38_6_fu_1352_p2(29 downto 14);
                trunc_ln46_7_reg_1698 <= mul_ln38_7_fu_1359_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln24_reg_1408_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln46_8_reg_1713 <= add_ln46_8_fu_1297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln46_reg_1576_pp0_iter1_reg <= add_ln46_reg_1576;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln24_reg_1484 <= and_ln24_fu_629_p2;
                out_w_0_mid2_reg_1491 <= out_w_0_mid2_fu_639_p3;
                    select_ln24_17_reg_1464(0) <= select_ln24_17_fu_580_p3(0);
                    tmp10_0_0_mid2_reg_1497(10 downto 1) <= tmp10_0_0_mid2_fu_675_p3(10 downto 1);
                    tmp10_1_0_mid2_reg_1502(10 downto 1) <= tmp10_1_0_mid2_fu_718_p3(10 downto 1);
                xor_ln24_2_reg_1474 <= xor_ln24_2_fu_597_p2;
                    zext_ln38_12_reg_1526(4 downto 0) <= zext_ln38_12_fu_751_p1(4 downto 0);
                    zext_ln38_1_reg_1509(4 downto 0) <= zext_ln38_1_fu_726_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln24_reg_1408 <= icmp_ln24_fu_509_p2;
                icmp_ln24_reg_1408_pp0_iter1_reg <= icmp_ln24_reg_1408;
                out_d_reg_1373 <= out_d_fu_353_p2;
                    select_ln27_reg_1383(1 downto 0) <= select_ln27_fu_363_p3(1 downto 0);
                    tmp10_0_0_reg_1388(10 downto 1) <= tmp10_0_0_fu_399_p2(10 downto 1);
                    tmp10_1_0_reg_1393(10 downto 1) <= tmp10_1_0_fu_435_p2(10 downto 1);
                    tmp10_2_0_reg_1398(9 downto 1) <= tmp10_2_0_fu_467_p2(9 downto 1);
                    tmp12_reg_1403(10 downto 2) <= tmp12_fu_503_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_509_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln32_reg_1417 <= icmp_ln32_fu_521_p2;
                icmp_ln33_reg_1451 <= icmp_ln33_fu_553_p2;
                out_h_reg_1456 <= out_h_fu_559_p2;
                select_ln24_reg_1434 <= select_ln24_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                out_w_reg_1520 <= out_w_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_323 <= SeparableConv2D_0_w_s_q0;
                reg_327 <= SeparableConv2D_0_w_s_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_331 <= SeparableConv2D_0_w_s_q0;
                reg_335 <= SeparableConv2D_0_w_s_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                select_ln24_23_reg_1546 <= select_ln24_23_fu_816_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln32_3_reg_1663 <= select_ln32_3_fu_1176_p3;
                select_ln32_reg_1628 <= select_ln32_fu_1107_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    tmp10_2_0_mid2_reg_1591(9 downto 1) <= tmp10_2_0_mid2_fu_1017_p3(9 downto 1);
                trunc_ln46_1_reg_1603 <= mul_ln38_1_fu_1317_p2(29 downto 14);
                trunc_ln_reg_1598 <= mul_ln38_fu_1310_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_1408_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                trunc_ln46_8_reg_1708 <= mul_ln38_8_fu_1366_p2(29 downto 14);
            end if;
        end if;
    end process;
    select_ln27_reg_1383(2) <= '1';
    tmp10_0_0_reg_1388(0) <= '0';
    tmp10_1_0_reg_1393(0) <= '0';
    tmp10_2_0_reg_1398(0) <= '0';
    tmp12_reg_1403(1 downto 0) <= "00";
    select_ln24_17_reg_1464(1) <= '1';
    tmp10_0_0_mid2_reg_1497(0) <= '0';
    tmp10_1_0_mid2_reg_1502(0) <= '0';
    zext_ln38_1_reg_1509(10 downto 5) <= "000000";
    zext_ln38_12_reg_1526(10 downto 5) <= "000000";
    tmp10_2_0_mid2_reg_1591(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, icmp_ln24_fu_509_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln24_fu_509_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln24_fu_509_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    SeparableConv2D_0_w_s_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, select_ln24_15_fu_535_p3, zext_ln24_fu_587_p1, ap_block_pp0_stage1, zext_ln24_19_fu_792_p1, ap_block_pp0_stage2, zext_ln24_20_fu_967_p1, ap_block_pp0_stage3, zext_ln24_21_fu_1102_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                SeparableConv2D_0_w_s_address0 <= zext_ln24_21_fu_1102_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                SeparableConv2D_0_w_s_address0 <= zext_ln24_20_fu_967_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                SeparableConv2D_0_w_s_address0 <= zext_ln24_19_fu_792_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SeparableConv2D_0_w_s_address0 <= zext_ln24_fu_587_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                SeparableConv2D_0_w_s_address0 <= select_ln24_15_fu_535_p3(4 - 1 downto 0);
            else 
                SeparableConv2D_0_w_s_address0 <= "XXXX";
            end if;
        else 
            SeparableConv2D_0_w_s_address0 <= "XXXX";
        end if; 
    end process;


    SeparableConv2D_0_w_s_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, select_ln24_16_fu_544_p3, ap_block_pp0_stage1, select_ln24_18_fu_603_p3, ap_block_pp0_stage2, zext_ln24_22_fu_811_p1, ap_block_pp0_stage3, select_ln24_21_fu_972_p3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                SeparableConv2D_0_w_s_address1 <= select_ln24_21_fu_972_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                SeparableConv2D_0_w_s_address1 <= zext_ln24_22_fu_811_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                SeparableConv2D_0_w_s_address1 <= select_ln24_18_fu_603_p3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                SeparableConv2D_0_w_s_address1 <= select_ln24_16_fu_544_p3(4 - 1 downto 0);
            else 
                SeparableConv2D_0_w_s_address1 <= "XXXX";
            end if;
        else 
            SeparableConv2D_0_w_s_address1 <= "XXXX";
        end if; 
    end process;


    SeparableConv2D_0_w_s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            SeparableConv2D_0_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_0_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_w_s_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            SeparableConv2D_0_w_s_ce1 <= ap_const_logic_1;
        else 
            SeparableConv2D_0_w_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_fu_515_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten80_phi_fu_269_p4) + unsigned(ap_const_lv10_1));
    add_ln32_3_fu_1066_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_288) + unsigned(ap_const_lv10_1));
    add_ln38_10_fu_1167_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1591) + unsigned(zext_ln38_13_fu_1118_p1));
    add_ln38_2_fu_755_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_fu_675_p3) + unsigned(zext_ln38_12_fu_751_p1));
    add_ln38_3_fu_906_p2 <= std_logic_vector(unsigned(out_w_0_mid2_reg_1491) + unsigned(ap_const_lv5_2));
    add_ln38_4_fu_915_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1497) + unsigned(zext_ln38_14_fu_911_p1));
    add_ln38_5_fu_929_p2 <= std_logic_vector(unsigned(zext_ln38_1_reg_1509) + unsigned(tmp10_1_0_mid2_reg_1502));
    add_ln38_6_fu_942_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1502) + unsigned(zext_ln38_12_reg_1526));
    add_ln38_7_fu_946_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1502) + unsigned(zext_ln38_14_fu_911_p1));
    add_ln38_8_fu_1147_p2 <= std_logic_vector(unsigned(zext_ln38_fu_1112_p1) + unsigned(tmp10_2_0_mid2_reg_1591));
    add_ln38_9_fu_1157_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1591) + unsigned(zext_ln38_11_fu_1115_p1));
    add_ln38_fu_730_p2 <= std_logic_vector(unsigned(zext_ln38_1_fu_726_p1) + unsigned(tmp10_0_0_mid2_fu_675_p3));
    add_ln46_1_fu_1172_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1598) + unsigned(trunc_ln46_1_reg_1603));
    add_ln46_2_fu_1220_p2 <= std_logic_vector(unsigned(trunc_ln46_3_reg_1638) + unsigned(trunc_ln46_2_reg_1633));
    add_ln46_3_fu_1224_p2 <= std_logic_vector(unsigned(add_ln46_1_reg_1658) + unsigned(add_ln46_2_fu_1220_p2));
    add_ln46_4_fu_1263_p2 <= std_logic_vector(unsigned(trunc_ln46_5_reg_1678) + unsigned(trunc_ln46_4_reg_1673));
    add_ln46_5_fu_1283_p2 <= std_logic_vector(unsigned(trunc_ln46_8_reg_1708) + unsigned(trunc_ln46_7_reg_1698));
    add_ln46_6_fu_1287_p2 <= std_logic_vector(unsigned(trunc_ln46_6_reg_1693) + unsigned(add_ln46_5_fu_1283_p2));
    add_ln46_7_fu_1292_p2 <= std_logic_vector(unsigned(add_ln46_4_reg_1703) + unsigned(add_ln46_6_fu_1287_p2));
    add_ln46_8_fu_1297_p2 <= std_logic_vector(unsigned(add_ln46_3_reg_1688) + unsigned(add_ln46_7_fu_1292_p2));
    add_ln46_fu_951_p2 <= std_logic_vector(unsigned(zext_ln38_1_reg_1509) + unsigned(tmp12_mid2_fu_899_p3));
    and_ln24_fu_629_p2 <= (xor_ln24_fu_624_p2 and icmp_ln33_reg_1451);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln24_fu_509_p2)
    begin
        if ((icmp_ln24_fu_509_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten80_phi_fu_269_p4_assign_proc : process(indvar_flatten80_reg_265, icmp_ln24_reg_1408, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln24_reg_1412, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten80_phi_fu_269_p4 <= add_ln24_reg_1412;
        else 
            ap_phi_mux_indvar_flatten80_phi_fu_269_p4 <= indvar_flatten80_reg_265;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_292_p4_assign_proc : process(indvar_flatten_reg_288, icmp_ln24_reg_1408, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_3_reg_1663, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_292_p4 <= select_ln32_3_reg_1663;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_292_p4 <= indvar_flatten_reg_288;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_280_p4_assign_proc : process(out_d_0_reg_276, icmp_ln24_reg_1408, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln24_23_reg_1546, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_280_p4 <= select_ln24_23_reg_1546;
        else 
            ap_phi_mux_out_d_0_phi_fu_280_p4 <= out_d_0_reg_276;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_304_p4_assign_proc : process(out_h_0_reg_300, icmp_ln24_reg_1408, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_reg_1628, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_304_p4 <= select_ln32_reg_1628;
        else 
            ap_phi_mux_out_h_0_phi_fu_304_p4 <= out_h_0_reg_300;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_315_p4_assign_proc : process(out_w_0_reg_311, icmp_ln24_reg_1408, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1520, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_1408 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_315_p4 <= out_w_reg_1520;
        else 
            ap_phi_mux_out_w_0_phi_fu_315_p4 <= out_w_0_reg_311;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_66_fu_634_p2 <= (icmp_ln32_reg_1417 or and_ln24_fu_629_p2);
    icmp_ln24_fu_509_p2 <= "1" when (ap_phi_mux_indvar_flatten80_phi_fu_269_p4 = ap_const_lv10_310) else "0";
    icmp_ln32_fu_521_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_292_p4 = ap_const_lv10_310) else "0";
    icmp_ln33_fu_553_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_315_p4 = ap_const_lv5_1C) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln38_2_fu_740_p1, ap_block_pp0_stage2, zext_ln38_5_fu_937_p1, ap_block_pp0_stage3, zext_ln38_7_fu_1061_p1, ap_block_pp0_stage4, zext_ln38_9_fu_1162_p1, zext_ln38_10_fu_1216_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln38_10_fu_1216_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln38_9_fu_1162_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln38_7_fu_1061_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln38_5_fu_937_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln38_2_fu_740_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage1, zext_ln38_3_fu_765_p1, ap_block_pp0_stage2, zext_ln38_4_fu_924_p1, ap_block_pp0_stage3, zext_ln38_6_fu_1053_p1, ap_block_pp0_stage4, zext_ln38_8_fu_1152_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address1 <= zext_ln38_8_fu_1152_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= zext_ln38_6_fu_1053_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln38_4_fu_924_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln38_3_fu_765_p1(14 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln27_1_fu_1087_p3 <= (ap_const_lv3_4 & out_d_0_reg_276);
    or_ln27_1_mid1_fu_770_p3 <= (ap_const_lv2_2 & out_d_reg_1373);
    or_ln27_3_mid1_fu_1080_p3 <= (ap_const_lv3_4 & out_d_reg_1373);
    or_ln27_mid1_fu_565_p3 <= (ap_const_lv1_1 & out_d_reg_1373);
    or_ln27_s_fu_777_p3 <= (ap_const_lv2_2 & out_d_0_reg_276);
    or_ln_fu_572_p3 <= (ap_const_lv1_1 & out_d_0_reg_276);
    out_d_fu_353_p2 <= (ap_phi_mux_out_d_0_phi_fu_280_p4 xor ap_const_lv1_1);
    out_h_fu_559_p2 <= std_logic_vector(unsigned(select_ln24_fu_527_p3) + unsigned(ap_const_lv5_1));
    out_w_0_mid2_fu_639_p3 <= 
        ap_const_lv5_0 when (empty_66_fu_634_p2(0) = '1') else 
        out_w_0_reg_311;
    out_w_fu_745_p2 <= std_logic_vector(unsigned(out_w_0_mid2_fu_639_p3) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln46_fu_1305_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln46_8_reg_1713;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1, icmp_ln24_reg_1408_pp0_iter1_reg)
    begin
        if (((icmp_ln24_reg_1408_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl13_cast_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl6_fu_479_p3),11));
    p_shl13_cast_mid170_c_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_826_p3),7));
    p_shl13_cast_mid1_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl13_mid1_fu_869_p3),11));
    p_shl13_mid1_fu_869_p3 <= (tmp11_mid1_fu_864_p2 & ap_const_lv5_0);
    p_shl14_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_491_p3),11));
    p_shl14_cast_mid174_c_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_837_p3),7));
    p_shl14_cast_mid1_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl14_mid1_fu_881_p3),11));
    p_shl14_mid1_fu_881_p3 <= (tmp11_mid1_fu_864_p2 & ap_const_lv2_0);
    p_shl15_mid1_fu_991_p3 <= (tmp_2_0_mid1_fu_986_p2 & ap_const_lv5_0);
    p_shl16_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_455_p3),10));
    p_shl16_cast_mid1_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl16_mid1_fu_999_p3),10));
    p_shl16_mid1_fu_999_p3 <= (tmp_2_0_mid1_fu_986_p2 & ap_const_lv1_0);
    p_shl17_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_411_p3),11));
    p_shl17_cast_mid1_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl17_mid1_fu_688_p3),11));
    p_shl17_mid1_fu_688_p3 <= (tmp_1_0_mid1_fu_683_p2 & ap_const_lv5_0);
    p_shl18_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_423_p3),11));
    p_shl18_cast_mid1_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl18_mid1_fu_700_p3),11));
    p_shl18_mid1_fu_700_p3 <= (tmp_1_0_mid1_fu_683_p2 & ap_const_lv1_0);
    p_shl19_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_375_p3),11));
    p_shl19_cast_mid1_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl19_mid1_fu_647_p3),11));
    p_shl19_mid1_fu_647_p3 <= (out_h_reg_1456 & ap_const_lv5_0);
    p_shl1_fu_387_p3 <= (ap_phi_mux_out_h_0_phi_fu_304_p4 & ap_const_lv1_0);
    p_shl20_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_387_p3),11));
    p_shl20_cast_mid1_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl20_mid1_fu_658_p3),11));
    p_shl20_mid1_fu_658_p3 <= (out_h_reg_1456 & ap_const_lv1_0);
    p_shl2_fu_411_p3 <= (tmp_1_0_fu_405_p2 & ap_const_lv5_0);
    p_shl3_fu_423_p3 <= (tmp_1_0_fu_405_p2 & ap_const_lv1_0);
    p_shl4_fu_447_p3 <= (tmp_2_0_fu_441_p2 & ap_const_lv5_0);
    p_shl5_fu_455_p3 <= (tmp_2_0_fu_441_p2 & ap_const_lv1_0);
    p_shl6_fu_479_p3 <= (tmp11_fu_473_p2 & ap_const_lv5_0);
    p_shl7_fu_491_p3 <= (tmp11_fu_473_p2 & ap_const_lv2_0);
    p_shl_fu_375_p3 <= (ap_phi_mux_out_h_0_phi_fu_304_p4 & ap_const_lv5_0);
    select_ln24_15_fu_535_p3 <= 
        zext_ln27_2_fu_359_p1 when (icmp_ln32_fu_521_p2(0) = '1') else 
        zext_ln27_1_fu_349_p1;
    select_ln24_16_fu_544_p3 <= 
        zext_ln27_1_fu_349_p1 when (icmp_ln32_fu_521_p2(0) = '1') else 
        zext_ln27_2_fu_359_p1;
    select_ln24_17_fu_580_p3 <= 
        or_ln27_mid1_fu_565_p3 when (icmp_ln32_reg_1417(0) = '1') else 
        or_ln_fu_572_p3;
    select_ln24_18_fu_603_p3 <= 
        ap_const_lv64_3 when (xor_ln24_2_fu_597_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln24_19_fu_785_p3 <= 
        or_ln27_1_mid1_fu_770_p3 when (icmp_ln32_reg_1417(0) = '1') else 
        or_ln27_s_fu_777_p3;
    select_ln24_20_fu_805_p3 <= 
        select_ln27_1_fu_797_p3 when (icmp_ln32_reg_1417(0) = '1') else 
        select_ln27_reg_1383;
    select_ln24_21_fu_972_p3 <= 
        ap_const_lv64_7 when (xor_ln24_2_reg_1474(0) = '1') else 
        ap_const_lv64_0;
    select_ln24_22_fu_1095_p3 <= 
        or_ln27_3_mid1_fu_1080_p3 when (icmp_ln32_reg_1417(0) = '1') else 
        or_ln27_1_fu_1087_p3;
    select_ln24_23_fu_816_p3 <= 
        out_d_reg_1373 when (icmp_ln32_reg_1417(0) = '1') else 
        out_d_0_reg_276;
    select_ln24_24_fu_612_p3 <= 
        ap_const_lv11_0 when (icmp_ln32_reg_1417(0) = '1') else 
        tmp10_0_0_reg_1388;
    select_ln24_25_fu_618_p3 <= 
        ap_const_lv11_1E when (icmp_ln32_reg_1417(0) = '1') else 
        tmp10_1_0_reg_1393;
    select_ln24_26_fu_980_p3 <= 
        ap_const_lv10_3C when (icmp_ln32_reg_1417(0) = '1') else 
        tmp10_2_0_reg_1398;
    select_ln24_27_fu_858_p3 <= 
        tmp12_mid176_cast_fu_854_p1 when (icmp_ln32_reg_1417(0) = '1') else 
        tmp12_reg_1403;
    select_ln24_fu_527_p3 <= 
        ap_const_lv5_0 when (icmp_ln32_fu_521_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_304_p4;
    select_ln27_1_fu_797_p3 <= 
        ap_const_lv3_5 when (out_d_0_reg_276(0) = '1') else 
        ap_const_lv3_6;
    select_ln27_fu_363_p3 <= 
        ap_const_lv3_6 when (ap_phi_mux_out_d_0_phi_fu_280_p4(0) = '1') else 
        ap_const_lv3_5;
    select_ln32_3_fu_1176_p3 <= 
        ap_const_lv10_1 when (icmp_ln32_reg_1417(0) = '1') else 
        add_ln32_3_reg_1618;
    select_ln32_fu_1107_p3 <= 
        out_h_reg_1456 when (and_ln24_reg_1484(0) = '1') else 
        select_ln24_reg_1434;
        sext_ln24_20_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln24_17_reg_1464),3));

        sext_ln38_11_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_7_reg_1571),32));

        sext_ln38_1_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_fu_730_p2),32));

        sext_ln38_3_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_2_fu_755_p2),32));

        sext_ln38_5_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_4_fu_915_p2),32));

        sext_ln38_7_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_5_fu_929_p2),32));

        sext_ln38_9_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln38_6_reg_1566),32));

        sext_ln46_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln46_reg_1576_pp0_iter1_reg),32));

    tmp10_0_0_fu_399_p2 <= std_logic_vector(unsigned(p_shl19_cast_fu_383_p1) - unsigned(p_shl20_cast_fu_395_p1));
    tmp10_0_0_mid1_fu_669_p2 <= std_logic_vector(unsigned(p_shl19_cast_mid1_fu_654_p1) - unsigned(p_shl20_cast_mid1_fu_665_p1));
    tmp10_0_0_mid2_fu_675_p3 <= 
        tmp10_0_0_mid1_fu_669_p2 when (and_ln24_fu_629_p2(0) = '1') else 
        select_ln24_24_fu_612_p3;
    tmp10_1_0_fu_435_p2 <= std_logic_vector(unsigned(p_shl17_cast_fu_419_p1) - unsigned(p_shl18_cast_fu_431_p1));
    tmp10_1_0_mid1_fu_712_p2 <= std_logic_vector(unsigned(p_shl17_cast_mid1_fu_696_p1) - unsigned(p_shl18_cast_mid1_fu_708_p1));
    tmp10_1_0_mid2_fu_718_p3 <= 
        tmp10_1_0_mid1_fu_712_p2 when (and_ln24_fu_629_p2(0) = '1') else 
        select_ln24_25_fu_618_p3;
    tmp10_2_0_fu_467_p2 <= std_logic_vector(unsigned(p_shl4_fu_447_p3) - unsigned(p_shl16_cast_fu_463_p1));
    tmp10_2_0_mid1_fu_1011_p2 <= std_logic_vector(unsigned(p_shl15_mid1_fu_991_p3) - unsigned(p_shl16_cast_mid1_fu_1007_p1));
    tmp10_2_0_mid2_fu_1017_p3 <= 
        tmp10_2_0_mid1_fu_1011_p2 when (and_ln24_reg_1484(0) = '1') else 
        select_ln24_26_fu_980_p3;
    tmp11_fu_473_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_h_0_phi_fu_304_p4) + unsigned(zext_ln46_1_fu_371_p1));
    tmp11_mid1_fu_864_p2 <= std_logic_vector(unsigned(out_h_reg_1456) + unsigned(zext_ln24_23_fu_822_p1));
    tmp12_fu_503_p2 <= std_logic_vector(unsigned(p_shl13_cast_fu_487_p1) - unsigned(p_shl14_cast_fu_499_p1));
        tmp12_mid176_cast_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_mid176_fu_848_p2),11));

    tmp12_mid176_fu_848_p2 <= std_logic_vector(unsigned(p_shl13_cast_mid170_c_fu_833_p1) - unsigned(p_shl14_cast_mid174_c_fu_844_p1));
    tmp12_mid1_fu_893_p2 <= std_logic_vector(unsigned(p_shl13_cast_mid1_fu_877_p1) - unsigned(p_shl14_cast_mid1_fu_889_p1));
    tmp12_mid2_fu_899_p3 <= 
        tmp12_mid1_fu_893_p2 when (and_ln24_reg_1484(0) = '1') else 
        select_ln24_27_fu_858_p3;
    tmp_1_0_fu_405_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_h_0_phi_fu_304_p4) + unsigned(ap_const_lv5_1));
    tmp_1_0_mid1_fu_683_p2 <= std_logic_vector(unsigned(select_ln24_reg_1434) + unsigned(ap_const_lv5_2));
    tmp_2_0_fu_441_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_h_0_phi_fu_304_p4) + unsigned(ap_const_lv5_2));
    tmp_2_0_mid1_fu_986_p2 <= std_logic_vector(unsigned(select_ln24_reg_1434) + unsigned(ap_const_lv5_3));
    tmp_3_fu_837_p3 <= (out_d_reg_1373 & ap_const_lv2_0);
    tmp_fu_826_p3 <= (out_d_reg_1373 & ap_const_lv5_0);
    xor_ln24_1_fu_592_p2 <= (icmp_ln32_reg_1417 xor ap_const_lv1_1);
    xor_ln24_2_fu_597_p2 <= (xor_ln24_1_fu_592_p2 xor out_d_0_reg_276);
    xor_ln24_fu_624_p2 <= (icmp_ln32_reg_1417 xor ap_const_lv1_1);
    zext_ln24_19_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_19_fu_785_p3),64));
    zext_ln24_20_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln24_20_fu_964_p1),64));
    zext_ln24_21_fu_1102_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_22_fu_1095_p3),64));
    zext_ln24_22_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_20_fu_805_p3),64));
    zext_ln24_23_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_23_fu_816_p3),5));
    zext_ln24_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_17_fu_580_p3),64));
    zext_ln27_1_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_280_p4),64));
    zext_ln27_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_353_p2),64));
    zext_ln38_10_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_10_reg_1653),64));
    zext_ln38_11_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_1520),10));
    zext_ln38_12_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_745_p2),11));
    zext_ln38_13_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_3_reg_1551),10));
    zext_ln38_14_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_3_fu_906_p2),11));
    zext_ln38_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_fu_639_p3),11));
    zext_ln38_2_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln38_1_fu_736_p1),64));
    zext_ln38_3_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln38_3_fu_761_p1),64));
    zext_ln38_4_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln38_5_fu_920_p1),64));
    zext_ln38_5_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln38_7_fu_933_p1),64));
    zext_ln38_6_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln38_9_fu_1050_p1),64));
    zext_ln38_7_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln38_11_fu_1058_p1),64));
    zext_ln38_8_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_8_fu_1147_p2),64));
    zext_ln38_9_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_9_fu_1157_p2),64));
    zext_ln38_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1491),10));
    zext_ln46_1_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_280_p4),5));
    zext_ln46_fu_1305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln46_fu_1302_p1),64));
end behav;
