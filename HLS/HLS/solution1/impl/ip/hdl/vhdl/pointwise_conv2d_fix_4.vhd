-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv23_7FD60D : STD_LOGIC_VECTOR (22 downto 0) := "11111111101011000001101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_E69A : STD_LOGIC_VECTOR (15 downto 0) := "1110011010011010";
    constant ap_const_lv16_C003 : STD_LOGIC_VECTOR (15 downto 0) := "1100000000000011";
    constant ap_const_lv16_1C17 : STD_LOGIC_VECTOR (15 downto 0) := "0001110000010111";
    constant ap_const_lv16_F91C : STD_LOGIC_VECTOR (15 downto 0) := "1111100100011100";
    constant ap_const_lv16_D6A : STD_LOGIC_VECTOR (15 downto 0) := "0000110101101010";
    constant ap_const_lv16_F46C : STD_LOGIC_VECTOR (15 downto 0) := "1111010001101100";
    constant ap_const_lv16_FFDC : STD_LOGIC_VECTOR (15 downto 0) := "1111111111011100";
    constant ap_const_lv16_FE22 : STD_LOGIC_VECTOR (15 downto 0) := "1111111000100010";
    constant ap_const_lv16_2EC : STD_LOGIC_VECTOR (15 downto 0) := "0000001011101100";
    constant ap_const_lv16_1B7E : STD_LOGIC_VECTOR (15 downto 0) := "0001101101111110";
    constant ap_const_lv16_1ECE : STD_LOGIC_VECTOR (15 downto 0) := "0001111011001110";
    constant ap_const_lv16_ED6 : STD_LOGIC_VECTOR (15 downto 0) := "0000111011010110";
    constant ap_const_lv16_D2BE : STD_LOGIC_VECTOR (15 downto 0) := "1101001010111110";
    constant ap_const_lv16_15C7 : STD_LOGIC_VECTOR (15 downto 0) := "0001010111000111";
    constant ap_const_lv16_E34D : STD_LOGIC_VECTOR (15 downto 0) := "1110001101001101";
    constant ap_const_lv16_DA7B : STD_LOGIC_VECTOR (15 downto 0) := "1101101001111011";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv10_1C0 : STD_LOGIC_VECTOR (9 downto 0) := "0111000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_310 : STD_LOGIC_VECTOR (14 downto 0) := "000001100010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten18_reg_243 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_h_0_reg_254 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_266 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_w_0_reg_277 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_reg_288 : STD_LOGIC_VECTOR (22 downto 0);
    signal in_d_0_reg_300 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_317_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln31_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state13_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter10 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter11 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_953_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_953_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_455_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal out_h_fu_461_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_962 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln33_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_968_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_473_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln31_reg_977 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_fu_487_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_fu_529_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_reg_987 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln39_1_fu_564_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln39_1_reg_992 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_1_fu_570_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_1_reg_997 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln32_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_reg_1002 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_reg_1007_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_1_fu_605_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_1_reg_1012 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_2_fu_617_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_2_reg_1018 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal add_ln39_2_fu_625_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln39_2_reg_1024 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln39_fu_631_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_reg_1029 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_reg_1029_pp1_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln39_reg_1029_pp1_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_838_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln39_1_reg_1034 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal in_d_fu_656_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln36_1_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044_pp1_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_1044_pp1_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_fu_667_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048_pp1_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048_pp1_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048_pp1_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048_pp1_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048_pp1_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048_pp1_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048_pp1_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_reg_1048_pp1_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal input_load_reg_1058 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_728_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln39_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_fu_793_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal buffer_reg_1078 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp1_iter10 : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter1_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter11 : STD_LOGIC := '0';
    signal i_0_reg_232 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln26_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_258_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_281_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_buffer_0_phi_fu_292_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_phi_mux_in_d_0_phi_fu_304_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln39_5_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_833_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kernel_buffer_15_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_0_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln28_fu_323_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_buffer_15_1_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_2_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_3_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_4_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_5_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_6_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_7_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_8_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_9_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_10_fu_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_11_fu_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_12_fu_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_13_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_14_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_buffer_15_15_fu_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_327_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_327_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33_fu_481_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_495_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln39_4_fu_507_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_fu_503_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln39_1_fu_515_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln39_fu_519_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_fu_525_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln39_mid1_fu_542_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln39_4_mid1_fu_553_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln39_2_fu_549_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln39_3_fu_560_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln36_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_535_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_fu_594_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_1_fu_613_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_2_fu_635_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln36_3_fu_643_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_2_fu_640_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln39_fu_672_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln39_2_fu_780_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln36_fu_773_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln39_2_fu_789_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_fu_799_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln46_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_fu_815_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln46_fu_806_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln47_fu_830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_838_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_838_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_838_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component network_mux_164_16_1_1_x0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_mul_16s_32s_32_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_mac_muladd_11ns_5ns_11s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    network_mux_164_16_1_1_x0_U120 : component network_mux_164_16_1_1_x0
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => ap_const_lv16_E69A,
        din1 => ap_const_lv16_C003,
        din2 => ap_const_lv16_1C17,
        din3 => ap_const_lv16_F91C,
        din4 => ap_const_lv16_D6A,
        din5 => ap_const_lv16_F46C,
        din6 => ap_const_lv16_FFDC,
        din7 => ap_const_lv16_FE22,
        din8 => ap_const_lv16_2EC,
        din9 => ap_const_lv16_1B7E,
        din10 => ap_const_lv16_1ECE,
        din11 => ap_const_lv16_ED6,
        din12 => ap_const_lv16_D2BE,
        din13 => ap_const_lv16_15C7,
        din14 => ap_const_lv16_E34D,
        din15 => ap_const_lv16_DA7B,
        din16 => tmp_s_fu_327_p17,
        dout => tmp_s_fu_327_p18);

    network_mux_164_32_1_1_U121 : component network_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => kernel_buffer_15_fu_142,
        din1 => kernel_buffer_15_1_fu_146,
        din2 => kernel_buffer_15_2_fu_150,
        din3 => kernel_buffer_15_3_fu_154,
        din4 => kernel_buffer_15_4_fu_158,
        din5 => kernel_buffer_15_5_fu_162,
        din6 => kernel_buffer_15_6_fu_166,
        din7 => kernel_buffer_15_7_fu_170,
        din8 => kernel_buffer_15_8_fu_174,
        din9 => kernel_buffer_15_9_fu_178,
        din10 => kernel_buffer_15_10_fu_182,
        din11 => kernel_buffer_15_11_fu_186,
        din12 => kernel_buffer_15_12_fu_190,
        din13 => kernel_buffer_15_13_fu_194,
        din14 => kernel_buffer_15_14_fu_198,
        din15 => kernel_buffer_15_15_fu_202,
        din16 => trunc_ln39_reg_1029_pp1_iter3_reg,
        dout => tmp_2_fu_728_p18);

    network_mul_16s_32s_32_5_1_U122 : component network_mul_16s_32s_32_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_load_reg_1058,
        din1 => tmp_2_reg_1063,
        ce => ap_const_logic_1,
        dout => grp_fu_768_p2);

    network_mac_muladd_11ns_5ns_11s_15_1_1_U123 : component network_mac_muladd_11ns_5ns_11s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 5,
        din2_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_838_p0,
        din1 => grp_fu_838_p1,
        din2 => select_ln36_3_fu_643_p3,
        dout => grp_fu_838_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((icmp_ln31_fu_449_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter1_state5)) then 
                        ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                buffer_0_reg_288 <= ap_const_lv23_7FD60D;
            elsif (((icmp_ln31_reg_953_pp1_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1))) then 
                buffer_0_reg_288 <= buffer_reg_1078;
            end if; 
        end if;
    end process;

    i_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_232 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then 
                i_0_reg_232 <= i_fu_317_p2;
            end if; 
        end if;
    end process;

    in_d_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                in_d_0_reg_300 <= ap_const_lv5_0;
            elsif (((icmp_ln31_reg_953_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                in_d_0_reg_300 <= in_d_fu_656_p2;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten18_reg_243 <= ap_const_lv14_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_449_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten18_reg_243 <= add_ln31_fu_455_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_266 <= ap_const_lv10_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_449_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                indvar_flatten_reg_266 <= select_ln33_fu_487_p3;
            end if; 
        end if;
    end process;

    out_h_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_0_reg_254 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_953 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
                out_h_0_reg_254 <= select_ln31_reg_977;
            end if; 
        end if;
    end process;

    out_w_0_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_w_0_reg_277 <= ap_const_lv5_0;
            elsif (((icmp_ln31_reg_953_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
                out_w_0_reg_277 <= select_ln36_2_reg_1018;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_953_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then
                add_ln39_1_reg_1034 <= grp_fu_838_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_953 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln39_2_reg_1024 <= add_ln39_2_fu_625_p2;
                and_ln32_reg_1002 <= and_ln32_fu_588_p2;
                or_ln36_reg_1007 <= or_ln36_fu_600_p2;
                    select_ln32_1_reg_997(10 downto 2) <= select_ln32_1_fu_570_p3(10 downto 2);
                select_ln36_1_reg_1012 <= select_ln36_1_fu_605_p3;
                    sub_ln39_1_reg_992(10 downto 2) <= sub_ln39_1_fu_564_p2(10 downto 2);
                trunc_ln39_reg_1029 <= trunc_ln39_fu_631_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln33_reg_968 = ap_const_lv1_0))) then
                add_ln39_reg_987 <= add_ln39_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln36_1_fu_661_p2 = ap_const_lv1_1))) then
                add_ln47_reg_1048 <= add_ln47_fu_667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                add_ln47_reg_1048_pp1_iter10_reg <= add_ln47_reg_1048_pp1_iter9_reg;
                add_ln47_reg_1048_pp1_iter3_reg <= add_ln47_reg_1048;
                add_ln47_reg_1048_pp1_iter4_reg <= add_ln47_reg_1048_pp1_iter3_reg;
                add_ln47_reg_1048_pp1_iter5_reg <= add_ln47_reg_1048_pp1_iter4_reg;
                add_ln47_reg_1048_pp1_iter6_reg <= add_ln47_reg_1048_pp1_iter5_reg;
                add_ln47_reg_1048_pp1_iter7_reg <= add_ln47_reg_1048_pp1_iter6_reg;
                add_ln47_reg_1048_pp1_iter8_reg <= add_ln47_reg_1048_pp1_iter7_reg;
                add_ln47_reg_1048_pp1_iter9_reg <= add_ln47_reg_1048_pp1_iter8_reg;
                icmp_ln31_reg_953_pp1_iter10_reg <= icmp_ln31_reg_953_pp1_iter9_reg;
                icmp_ln31_reg_953_pp1_iter2_reg <= icmp_ln31_reg_953_pp1_iter1_reg;
                icmp_ln31_reg_953_pp1_iter3_reg <= icmp_ln31_reg_953_pp1_iter2_reg;
                icmp_ln31_reg_953_pp1_iter4_reg <= icmp_ln31_reg_953_pp1_iter3_reg;
                icmp_ln31_reg_953_pp1_iter5_reg <= icmp_ln31_reg_953_pp1_iter4_reg;
                icmp_ln31_reg_953_pp1_iter6_reg <= icmp_ln31_reg_953_pp1_iter5_reg;
                icmp_ln31_reg_953_pp1_iter7_reg <= icmp_ln31_reg_953_pp1_iter6_reg;
                icmp_ln31_reg_953_pp1_iter8_reg <= icmp_ln31_reg_953_pp1_iter7_reg;
                icmp_ln31_reg_953_pp1_iter9_reg <= icmp_ln31_reg_953_pp1_iter8_reg;
                icmp_ln36_1_reg_1044_pp1_iter10_reg <= icmp_ln36_1_reg_1044_pp1_iter9_reg;
                icmp_ln36_1_reg_1044_pp1_iter3_reg <= icmp_ln36_1_reg_1044;
                icmp_ln36_1_reg_1044_pp1_iter4_reg <= icmp_ln36_1_reg_1044_pp1_iter3_reg;
                icmp_ln36_1_reg_1044_pp1_iter5_reg <= icmp_ln36_1_reg_1044_pp1_iter4_reg;
                icmp_ln36_1_reg_1044_pp1_iter6_reg <= icmp_ln36_1_reg_1044_pp1_iter5_reg;
                icmp_ln36_1_reg_1044_pp1_iter7_reg <= icmp_ln36_1_reg_1044_pp1_iter6_reg;
                icmp_ln36_1_reg_1044_pp1_iter8_reg <= icmp_ln36_1_reg_1044_pp1_iter7_reg;
                icmp_ln36_1_reg_1044_pp1_iter9_reg <= icmp_ln36_1_reg_1044_pp1_iter8_reg;
                or_ln36_reg_1007_pp1_iter2_reg <= or_ln36_reg_1007;
                or_ln36_reg_1007_pp1_iter3_reg <= or_ln36_reg_1007_pp1_iter2_reg;
                or_ln36_reg_1007_pp1_iter4_reg <= or_ln36_reg_1007_pp1_iter3_reg;
                or_ln36_reg_1007_pp1_iter5_reg <= or_ln36_reg_1007_pp1_iter4_reg;
                or_ln36_reg_1007_pp1_iter6_reg <= or_ln36_reg_1007_pp1_iter5_reg;
                or_ln36_reg_1007_pp1_iter7_reg <= or_ln36_reg_1007_pp1_iter6_reg;
                or_ln36_reg_1007_pp1_iter8_reg <= or_ln36_reg_1007_pp1_iter7_reg;
                or_ln36_reg_1007_pp1_iter9_reg <= or_ln36_reg_1007_pp1_iter8_reg;
                trunc_ln39_reg_1029_pp1_iter2_reg <= trunc_ln39_reg_1029;
                trunc_ln39_reg_1029_pp1_iter3_reg <= trunc_ln39_reg_1029_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_953_pp1_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter10 = ap_const_logic_1))) then
                buffer_reg_1078 <= buffer_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln31_reg_953 <= icmp_ln31_fu_449_p2;
                icmp_ln31_reg_953_pp1_iter1_reg <= icmp_ln31_reg_953;
                icmp_ln33_reg_968_pp1_iter1_reg <= icmp_ln33_reg_968;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_449_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln33_reg_968 <= icmp_ln33_fu_467_p2;
                out_h_reg_962 <= out_h_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_953_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln36_1_reg_1044 <= icmp_ln36_1_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_953_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                input_load_reg_1058 <= input_r_q0;
                tmp_2_reg_1063 <= tmp_2_fu_728_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_A) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_10_fu_182 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_B) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_11_fu_186 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_C) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_12_fu_190 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_D) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_13_fu_194 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_E) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_14_fu_198 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_F) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_15_fu_202 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_1_fu_146 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_2_fu_150 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_3_fu_154 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_4_fu_158 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_5_fu_162 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_6_fu_166 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_7_fu_170 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_8_fu_174 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_9) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_9_fu_178 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln28_fu_323_p1 = ap_const_lv4_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                kernel_buffer_15_fu_142 <= kernel_buffer_0_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_953_pp1_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                mul_ln39_reg_1073 <= grp_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_fu_449_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                select_ln31_reg_977 <= select_ln31_fu_473_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln31_reg_953 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then
                select_ln36_2_reg_1018 <= select_ln36_2_fu_617_p3;
            end if;
        end if;
    end process;
    sub_ln39_1_reg_992(1 downto 0) <= "00";
    select_ln32_1_reg_997(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter10, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter11, icmp_ln26_fu_311_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_311_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln31_fu_455_p2 <= std_logic_vector(unsigned(indvar_flatten18_reg_243) + unsigned(ap_const_lv14_1));
    add_ln33_fu_481_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_266) + unsigned(ap_const_lv10_1));
    add_ln39_2_fu_625_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_613_p1) + unsigned(select_ln32_1_fu_570_p3));
    add_ln39_fu_529_p2 <= std_logic_vector(unsigned(sub_ln39_fu_519_p2) + unsigned(zext_ln36_fu_525_p1));
    add_ln47_fu_667_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_640_p1) + unsigned(select_ln32_1_reg_997));
    and_ln32_fu_588_p2 <= (xor_ln32_fu_577_p2 and icmp_ln36_fu_582_p2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter1_state5_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_condition_pp1_exit_iter1_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter1_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter10, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter11)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter10 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_buffer_0_phi_fu_292_p4_assign_proc : process(buffer_0_reg_288, icmp_ln31_reg_953_pp1_iter10_reg, buffer_reg_1078, ap_enable_reg_pp1_iter11, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_953_pp1_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1))) then 
            ap_phi_mux_buffer_0_phi_fu_292_p4 <= buffer_reg_1078;
        else 
            ap_phi_mux_buffer_0_phi_fu_292_p4 <= buffer_0_reg_288;
        end if; 
    end process;


    ap_phi_mux_in_d_0_phi_fu_304_p4_assign_proc : process(in_d_0_reg_300, icmp_ln31_reg_953_pp1_iter1_reg, ap_enable_reg_pp1_iter2, in_d_fu_656_p2, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_953_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_in_d_0_phi_fu_304_p4 <= in_d_fu_656_p2;
        else 
            ap_phi_mux_in_d_0_phi_fu_304_p4 <= in_d_0_reg_300;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_258_p4_assign_proc : process(out_h_0_reg_254, icmp_ln31_reg_953, ap_CS_fsm_pp1_stage0, select_ln31_reg_977, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_953 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_out_h_0_phi_fu_258_p4 <= select_ln31_reg_977;
        else 
            ap_phi_mux_out_h_0_phi_fu_258_p4 <= out_h_0_reg_254;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_281_p4_assign_proc : process(out_w_0_reg_277, icmp_ln31_reg_953_pp1_iter1_reg, select_ln36_2_reg_1018, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0)
    begin
        if (((icmp_ln31_reg_953_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_out_w_0_phi_fu_281_p4 <= select_ln36_2_reg_1018;
        else 
            ap_phi_mux_out_w_0_phi_fu_281_p4 <= out_w_0_reg_277;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_793_p2 <= std_logic_vector(unsigned(select_ln36_fu_773_p3) + unsigned(sext_ln39_2_fu_789_p1));
    grp_fu_838_p0 <= ap_const_lv15_310(11 - 1 downto 0);
    grp_fu_838_p1 <= grp_fu_838_p10(5 - 1 downto 0);
    grp_fu_838_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_reg_1012),15));
    i_fu_317_p2 <= std_logic_vector(unsigned(i_0_reg_232) + unsigned(ap_const_lv5_1));
    icmp_ln26_fu_311_p2 <= "1" when (i_0_reg_232 = ap_const_lv5_10) else "0";
    icmp_ln31_fu_449_p2 <= "1" when (indvar_flatten18_reg_243 = ap_const_lv14_3100) else "0";
    icmp_ln33_fu_467_p2 <= "1" when (indvar_flatten_reg_266 = ap_const_lv10_1C0) else "0";
    icmp_ln36_1_fu_661_p2 <= "1" when (in_d_fu_656_p2 = ap_const_lv5_10) else "0";
    icmp_ln36_fu_582_p2 <= "1" when (ap_phi_mux_in_d_0_phi_fu_304_p4 = ap_const_lv5_10) else "0";
    in_d_fu_656_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln36_1_reg_1012));
    input_r_address0 <= zext_ln39_5_fu_675_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        kernel_buffer_0_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_327_p18),32));

    or_ln36_fu_600_p2 <= (icmp_ln33_reg_968 or and_ln32_fu_588_p2);
    out_h_fu_461_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_out_h_0_phi_fu_258_p4));
    out_w_fu_594_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln32_fu_535_p3));
    output_r_address0 <= zext_ln47_fu_833_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln46_fu_806_p1 and select_ln46_fu_815_p3);

    output_r_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln36_1_reg_1044_pp1_iter10_reg, ap_enable_reg_pp1_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter11 = ap_const_logic_1) and (icmp_ln36_1_reg_1044_pp1_iter10_reg = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln31_fu_473_p3 <= 
        out_h_fu_461_p2 when (icmp_ln33_fu_467_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_258_p4;
    select_ln32_1_fu_570_p3 <= 
        sub_ln39_1_fu_564_p2 when (icmp_ln33_reg_968(0) = '1') else 
        sub_ln39_fu_519_p2;
    select_ln32_2_fu_635_p3 <= 
        sub_ln39_1_reg_992 when (icmp_ln33_reg_968_pp1_iter1_reg(0) = '1') else 
        add_ln39_reg_987;
    select_ln32_fu_535_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_reg_968(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_281_p4;
    select_ln33_fu_487_p3 <= 
        ap_const_lv10_1 when (icmp_ln33_fu_467_p2(0) = '1') else 
        add_ln33_fu_481_p2;
    select_ln36_1_fu_605_p3 <= 
        ap_const_lv5_0 when (or_ln36_fu_600_p2(0) = '1') else 
        ap_phi_mux_in_d_0_phi_fu_304_p4;
    select_ln36_2_fu_617_p3 <= 
        out_w_fu_594_p2 when (and_ln32_fu_588_p2(0) = '1') else 
        select_ln32_fu_535_p3;
    select_ln36_3_fu_643_p3 <= 
        add_ln39_2_reg_1024 when (and_ln32_reg_1002(0) = '1') else 
        select_ln32_2_fu_635_p3;
    select_ln36_fu_773_p3 <= 
        ap_const_lv23_7FD60D when (or_ln36_reg_1007_pp1_iter9_reg(0) = '1') else 
        ap_phi_mux_buffer_0_phi_fu_292_p4;
    select_ln46_fu_815_p3 <= 
        ap_const_lv16_FFFF when (xor_ln46_fu_809_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln39_2_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln39_2_fu_780_p4),23));

        sext_ln39_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln39_1_reg_1034),32));

        sext_ln47_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln47_reg_1048_pp1_iter10_reg),32));

    shl_ln39_4_fu_507_p3 <= (out_h_0_reg_254 & ap_const_lv2_0);
    shl_ln39_4_mid1_fu_553_p3 <= (out_h_reg_962 & ap_const_lv2_0);
    shl_ln39_mid1_fu_542_p3 <= (out_h_reg_962 & ap_const_lv5_0);
    shl_ln_fu_495_p3 <= (out_h_0_reg_254 & ap_const_lv5_0);
    sub_ln39_1_fu_564_p2 <= std_logic_vector(unsigned(zext_ln39_2_fu_549_p1) - unsigned(zext_ln39_3_fu_560_p1));
    sub_ln39_fu_519_p2 <= std_logic_vector(unsigned(zext_ln39_fu_503_p1) - unsigned(zext_ln39_1_fu_515_p1));
    tmp_3_fu_799_p3 <= buffer_reg_1078(22 downto 22);
    tmp_s_fu_327_p17 <= i_0_reg_232(4 - 1 downto 0);
    trunc_ln28_fu_323_p1 <= i_0_reg_232(4 - 1 downto 0);
    trunc_ln39_2_fu_780_p4 <= mul_ln39_reg_1073(31 downto 14);
    trunc_ln39_fu_631_p1 <= select_ln36_1_fu_605_p3(4 - 1 downto 0);
    trunc_ln46_fu_806_p1 <= buffer_reg_1078(16 - 1 downto 0);
    xor_ln32_fu_577_p2 <= (icmp_ln33_reg_968 xor ap_const_lv1_1);
    xor_ln46_fu_809_p2 <= (tmp_3_fu_799_p3 xor ap_const_lv1_1);
    zext_ln36_1_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_594_p2),11));
    zext_ln36_2_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_2_reg_1018),11));
    zext_ln36_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_w_0_phi_fu_281_p4),11));
    zext_ln39_1_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_4_fu_507_p3),11));
    zext_ln39_2_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_mid1_fu_542_p3),11));
    zext_ln39_3_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln39_4_mid1_fu_553_p3),11));
    zext_ln39_5_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln39_fu_672_p1),64));
    zext_ln39_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_495_p3),11));
    zext_ln47_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln47_fu_830_p1),64));
end behav;
