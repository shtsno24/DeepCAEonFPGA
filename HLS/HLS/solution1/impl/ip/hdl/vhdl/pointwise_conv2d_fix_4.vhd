-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv24_FFE6BA : STD_LOGIC_VECTOR (23 downto 0) := "111111111110011010111010";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_310 : STD_LOGIC_VECTOR (13 downto 0) := "00001100010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal kernel_buffer_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_buffer_ce0 : STD_LOGIC;
    signal kernel_buffer_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_fu_166_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_h_fu_178_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_363 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln37_fu_208_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln37_reg_368 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln31_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_220_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_376 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln37_fu_230_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln37_reg_381 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln37_fu_235_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln37_reg_386 : STD_LOGIC_VECTOR (14 downto 0);
    signal in_d_fu_249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_reg_394 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln37_2_fu_255_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln37_2_reg_399 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln35_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_414 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal kernel_buffer_load_reg_419 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_reg_424 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal buffer_fu_339_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_0_reg_93 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln26_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_0_reg_104 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_115 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_reg_126 : STD_LOGIC_VECTOR (23 downto 0);
    signal in_d_0_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_149 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln37_3_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_184_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln37_4_fu_196_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln37_1_fu_192_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln37_2_fu_204_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_fu_226_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_1_fu_239_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln37_1_fu_261_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln37_1_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_280_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln42_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_298_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_fu_288_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_345_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln37_4_fu_336_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component network_mul_mul_16s_15s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component pointwise_conv2d_fix_4_kernel_buffer IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    kernel_buffer_U : component pointwise_conv2d_fix_4_kernel_buffer
    generic map (
        DataWidth => 15,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kernel_buffer_address0,
        ce0 => kernel_buffer_ce0,
        q0 => kernel_buffer_q0);

    network_mul_mul_16s_15s_31_1_1_U69 : component network_mul_mul_16s_15s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        din0 => input_load_reg_414,
        din1 => kernel_buffer_load_reg_419,
        dout => mul_ln37_fu_345_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buffer_0_reg_126 <= ap_const_lv24_FFE6BA;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buffer_0_reg_126 <= buffer_fu_339_p2;
            end if; 
        end if;
    end process;

    i_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_93 <= i_fu_166_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_93 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    in_d_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                in_d_0_reg_138 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                in_d_0_reg_138 <= in_d_reg_394;
            end if; 
        end if;
    end process;

    out_h_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_160_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_104 <= ap_const_lv5_0;
            elsif (((icmp_ln33_fu_214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_h_0_reg_104 <= out_h_reg_363;
            end if; 
        end if;
    end process;

    out_w_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_0_reg_115 <= ap_const_lv5_0;
            elsif (((icmp_ln35_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                out_w_0_reg_115 <= out_w_reg_376;
            end if; 
        end if;
    end process;

    phi_mul_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_149 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul_reg_149 <= add_ln37_2_reg_399;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln37_2_reg_399 <= add_ln37_2_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                add_ln37_reg_381 <= add_ln37_fu_230_p2;
                sext_ln37_reg_386 <= sext_ln37_fu_235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                in_d_reg_394 <= in_d_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_load_reg_414 <= input_r_q0;
                kernel_buffer_load_reg_419 <= kernel_buffer_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_reg_363 <= out_h_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_reg_376 <= out_w_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_172_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln37_reg_368(10 downto 2) <= sub_ln37_fu_208_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_1_reg_424 <= mul_ln37_fu_345_p2(30 downto 13);
            end if;
        end if;
    end process;
    sub_ln37_reg_368(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln31_fu_172_p2, ap_CS_fsm_state4, icmp_ln33_fu_214_p2, ap_CS_fsm_state5, icmp_ln35_fu_243_p2, icmp_ln26_fu_160_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln26_fu_160_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln31_fu_172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln33_fu_214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln35_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln37_1_fu_261_p2 <= std_logic_vector(unsigned(zext_ln35_1_fu_239_p1) + unsigned(sext_ln37_reg_386));
    add_ln37_2_fu_255_p2 <= std_logic_vector(unsigned(phi_mul_reg_149) + unsigned(ap_const_lv14_310));
    add_ln37_fu_230_p2 <= std_logic_vector(unsigned(sub_ln37_reg_368) + unsigned(zext_ln35_fu_226_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln31_fu_172_p2)
    begin
        if ((((icmp_ln31_fu_172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln31_fu_172_p2)
    begin
        if (((icmp_ln31_fu_172_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_339_p2 <= std_logic_vector(unsigned(buffer_0_reg_126) + unsigned(sext_ln37_4_fu_336_p1));
    i_fu_166_p2 <= std_logic_vector(unsigned(i_0_reg_93) + unsigned(ap_const_lv5_1));
    icmp_ln26_fu_160_p2 <= "1" when (i_0_reg_93 = ap_const_lv5_10) else "0";
    icmp_ln31_fu_172_p2 <= "1" when (out_h_0_reg_104 = ap_const_lv5_1C) else "0";
    icmp_ln33_fu_214_p2 <= "1" when (out_w_0_reg_115 = ap_const_lv5_1C) else "0";
    icmp_ln35_fu_243_p2 <= "1" when (in_d_0_reg_138 = ap_const_lv5_10) else "0";
    in_d_fu_249_p2 <= std_logic_vector(unsigned(in_d_0_reg_138) + unsigned(ap_const_lv5_1));
    input_r_address0 <= zext_ln37_3_fu_270_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_buffer_address0 <= zext_ln37_fu_275_p1(4 - 1 downto 0);

    kernel_buffer_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            kernel_buffer_ce0 <= ap_const_logic_1;
        else 
            kernel_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_h_fu_178_p2 <= std_logic_vector(unsigned(out_h_0_reg_104) + unsigned(ap_const_lv5_1));
    out_w_fu_220_p2 <= std_logic_vector(unsigned(out_w_0_reg_115) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln43_fu_316_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln42_fu_288_p1 and select_ln42_fu_298_p3);

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln35_fu_243_p2)
    begin
        if (((icmp_ln35_fu_243_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln42_fu_298_p3 <= 
        ap_const_lv16_FFFF when (xor_ln42_fu_292_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln37_1_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_1_fu_261_p2),32));

        sext_ln37_4_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_reg_424),24));

        sext_ln37_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_fu_230_p2),15));

        sext_ln43_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_reg_381),32));

    shl_ln37_4_fu_196_p3 <= (out_h_0_reg_104 & ap_const_lv2_0);
    shl_ln_fu_184_p3 <= (out_h_0_reg_104 & ap_const_lv5_0);
    sub_ln37_fu_208_p2 <= std_logic_vector(unsigned(zext_ln37_1_fu_192_p1) - unsigned(zext_ln37_2_fu_204_p1));
    tmp_fu_280_p3 <= buffer_0_reg_126(23 downto 23);
    trunc_ln42_fu_288_p1 <= buffer_0_reg_126(16 - 1 downto 0);
    xor_ln42_fu_292_p2 <= (tmp_fu_280_p3 xor ap_const_lv1_1);
    zext_ln35_1_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_149),15));
    zext_ln35_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_115),11));
    zext_ln37_1_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_184_p3),11));
    zext_ln37_2_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln37_4_fu_196_p3),11));
    zext_ln37_3_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_1_fu_266_p1),64));
    zext_ln37_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_0_reg_138),64));
    zext_ln43_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln43_fu_313_p1),64));
end behav;
