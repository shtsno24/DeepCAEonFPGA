-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv23_7FD60D : STD_LOGIC_VECTOR (22 downto 0) := "11111111101011000001101";
    constant ap_const_lv14_3100 : STD_LOGIC_VECTOR (13 downto 0) := "11000100000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv10_1C0 : STD_LOGIC_VECTOR (9 downto 0) := "0111000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv16_E69A : STD_LOGIC_VECTOR (15 downto 0) := "1110011010011010";
    constant ap_const_lv16_C003 : STD_LOGIC_VECTOR (15 downto 0) := "1100000000000011";
    constant ap_const_lv16_1C17 : STD_LOGIC_VECTOR (15 downto 0) := "0001110000010111";
    constant ap_const_lv16_F91C : STD_LOGIC_VECTOR (15 downto 0) := "1111100100011100";
    constant ap_const_lv16_D6A : STD_LOGIC_VECTOR (15 downto 0) := "0000110101101010";
    constant ap_const_lv16_F46C : STD_LOGIC_VECTOR (15 downto 0) := "1111010001101100";
    constant ap_const_lv16_FFDC : STD_LOGIC_VECTOR (15 downto 0) := "1111111111011100";
    constant ap_const_lv16_FE22 : STD_LOGIC_VECTOR (15 downto 0) := "1111111000100010";
    constant ap_const_lv16_2EC : STD_LOGIC_VECTOR (15 downto 0) := "0000001011101100";
    constant ap_const_lv16_1B7E : STD_LOGIC_VECTOR (15 downto 0) := "0001101101111110";
    constant ap_const_lv16_1ECE : STD_LOGIC_VECTOR (15 downto 0) := "0001111011001110";
    constant ap_const_lv16_ED6 : STD_LOGIC_VECTOR (15 downto 0) := "0000111011010110";
    constant ap_const_lv16_D2BE : STD_LOGIC_VECTOR (15 downto 0) := "1101001010111110";
    constant ap_const_lv16_15C7 : STD_LOGIC_VECTOR (15 downto 0) := "0001010111000111";
    constant ap_const_lv16_E34D : STD_LOGIC_VECTOR (15 downto 0) := "1110001101001101";
    constant ap_const_lv16_DA7B : STD_LOGIC_VECTOR (15 downto 0) := "1101101001111011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_310 : STD_LOGIC_VECTOR (14 downto 0) := "000001100010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten59_reg_134 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten18_reg_146 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvar_flatten_reg_157 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_h_0_reg_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_0_reg_179 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_0_reg_191 : STD_LOGIC_VECTOR (4 downto 0);
    signal buffer_0_reg_203 : STD_LOGIC_VECTOR (22 downto 0);
    signal in_d_0_reg_215 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln34_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_665 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln34_reg_665_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_665_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_665_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_669_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_1_fu_239_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_1_reg_683 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln34_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_reg_688 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln21_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_694 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_fu_256_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln21_reg_700 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln29_fu_286_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln29_reg_705 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln34_fu_292_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_reg_711 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln34_2_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_2_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_2_reg_717_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_fu_307_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln29_reg_726 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln34_2_fu_312_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_2_reg_731 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln24_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_741 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln29_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_1_fu_333_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln20_1_reg_754 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_fu_343_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_reg_759 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln29_1_fu_372_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln29_1_reg_765 : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln29_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_394_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln20_reg_778 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln21_9_fu_399_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln21_9_reg_783 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln29_1_fu_411_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_1_reg_788 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_794 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln24_1_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_1_reg_800_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_1_fu_431_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln24_1_reg_806 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln29_2_fu_441_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln29_2_reg_812 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln21_fu_446_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_reg_817 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln29_fu_451_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln29_reg_823 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_3_fu_477_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_3_reg_828 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_0_mid2_fu_490_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_0_mid2_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_2_fu_503_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln24_2_reg_838 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_d_fu_509_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_reg_843 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_651_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln29_1_reg_849 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln24_1_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_reg_854 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_reg_854_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_reg_854_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_525_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_reg_858 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_1_fu_577_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_1_reg_868 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_1_reg_868_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal input_load_reg_873 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_fu_582_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln24_reg_878 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_537_p18 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_883 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln29_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_608_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal buffer_reg_898 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal and_ln34_fu_637_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln34_reg_905 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten59_phi_fu_138_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten18_phi_fu_150_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_161_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_out_h_0_phi_fu_172_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_183_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_195_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_buffer_0_phi_fu_207_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_phi_mux_in_d_0_phi_fu_219_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_5_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_262_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln29_7_fu_274_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln29_fu_270_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln29_1_fu_282_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln24_fu_303_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln29_mid1_fu_350_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln29_7_mid1_fu_361_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln29_2_fu_357_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln29_3_fu_368_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln29_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_1_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_4_fu_405_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln24_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_1_fu_438_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln34_1_fu_461_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_2_fu_469_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_5_fu_484_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_2_fu_497_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln29_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_1_fu_574_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln29_2_fu_595_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_608_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_fu_613_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln33_fu_629_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln33_fu_620_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_fu_643_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_651_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_651_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_651_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component network_mux_164_16_4_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (15 downto 0);
        din9 : IN STD_LOGIC_VECTOR (15 downto 0);
        din10 : IN STD_LOGIC_VECTOR (15 downto 0);
        din11 : IN STD_LOGIC_VECTOR (15 downto 0);
        din12 : IN STD_LOGIC_VECTOR (15 downto 0);
        din13 : IN STD_LOGIC_VECTOR (15 downto 0);
        din14 : IN STD_LOGIC_VECTOR (15 downto 0);
        din15 : IN STD_LOGIC_VECTOR (15 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_add_23ns_23s_23_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component network_mac_muladd_11ns_5ns_11s_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component network_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    network_mux_164_16_4_1_x_U134 : component network_mux_164_16_4_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 16,
        din9_WIDTH => 16,
        din10_WIDTH => 16,
        din11_WIDTH => 16,
        din12_WIDTH => 16,
        din13_WIDTH => 16,
        din14_WIDTH => 16,
        din15_WIDTH => 16,
        din16_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv16_E69A,
        din1 => ap_const_lv16_C003,
        din2 => ap_const_lv16_1C17,
        din3 => ap_const_lv16_F91C,
        din4 => ap_const_lv16_D6A,
        din5 => ap_const_lv16_F46C,
        din6 => ap_const_lv16_FFDC,
        din7 => ap_const_lv16_FE22,
        din8 => ap_const_lv16_2EC,
        din9 => ap_const_lv16_1B7E,
        din10 => ap_const_lv16_1ECE,
        din11 => ap_const_lv16_ED6,
        din12 => ap_const_lv16_D2BE,
        din13 => ap_const_lv16_15C7,
        din14 => ap_const_lv16_E34D,
        din15 => ap_const_lv16_DA7B,
        din16 => trunc_ln29_reg_823,
        ce => ap_const_logic_1,
        dout => grp_fu_537_p18);

    network_add_23ns_23s_23_2_1_U135 : component network_add_23ns_23s_23_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 23,
        din1_WIDTH => 23,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln24_reg_878,
        din1 => grp_fu_608_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_608_p2);

    network_mac_muladd_11ns_5ns_11s_15_1_1_U136 : component network_mac_muladd_11ns_5ns_11s_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 5,
        din2_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_651_p0,
        din1 => grp_fu_651_p1,
        din2 => select_ln24_2_reg_838,
        dout => grp_fu_651_p3);

    network_mul_mul_16s_16s_32_1_1_U137 : component network_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => input_load_reg_873,
        din1 => tmp_4_reg_883,
        dout => mul_ln29_fu_659_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buffer_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                buffer_0_reg_203 <= buffer_reg_898;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                buffer_0_reg_203 <= ap_const_lv23_7FD60D;
            end if; 
        end if;
    end process;

    in_d_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                in_d_0_reg_215 <= in_d_fu_509_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                in_d_0_reg_215 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten18_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten18_reg_146 <= select_ln20_1_reg_754;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten18_reg_146 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten59_reg_134 <= add_ln34_2_reg_731;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten59_reg_134 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_157 <= select_ln21_9_reg_783;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_157 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                out_d_0_reg_179 <= out_d_0_mid2_reg_833;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_179 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                out_h_0_reg_168 <= select_ln20_reg_778;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_168 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                out_w_0_reg_191 <= select_ln21_reg_817;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_191 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln20_1_reg_683 <= add_ln20_1_fu_239_p2;
                icmp_ln20_reg_669 <= icmp_ln20_fu_233_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln21_reg_700 <= add_ln21_fu_256_p2;
                icmp_ln21_reg_694 <= icmp_ln21_fu_250_p2;
                xor_ln34_reg_688 <= xor_ln34_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                add_ln29_1_reg_849 <= grp_fu_651_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_lv1_1 = and_ln29_reg_771) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln29_2_reg_812 <= add_ln29_2_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln34_2_reg_717) and (icmp_ln20_reg_669 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln29_reg_726 <= add_ln29_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_1_reg_854 = ap_const_lv1_1))) then
                add_ln34_1_reg_868 <= add_ln34_1_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln34_1_reg_868_pp0_iter3_reg <= add_ln34_1_reg_868;
                or_ln24_1_reg_800_pp0_iter2_reg <= or_ln24_1_reg_800;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln34_2_reg_731 <= add_ln34_2_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_1_fu_520_p2 = ap_const_lv1_1))) then
                add_ln34_reg_858 <= add_ln34_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln29_reg_771 <= and_ln29_fu_388_p2;
                select_ln29_reg_759 <= select_ln29_fu_343_p3;
                    sub_ln29_1_reg_765(10 downto 2) <= sub_ln29_1_fu_372_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                and_ln34_2_reg_717 <= and_ln34_2_fu_299_p2;
                select_ln34_reg_711 <= select_ln34_fu_292_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                and_ln34_2_reg_717_pp0_iter1_reg <= and_ln34_2_reg_717;
                    sub_ln29_reg_705(10 downto 2) <= sub_ln29_fu_286_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_1_reg_854_pp0_iter3_reg = ap_const_lv1_1))) then
                and_ln34_reg_905 <= and_ln34_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                buffer_reg_898 <= grp_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_669_pp0_iter1_reg <= icmp_ln20_reg_669;
                icmp_ln24_1_reg_854_pp0_iter3_reg <= icmp_ln24_1_reg_854;
                icmp_ln24_1_reg_854_pp0_iter4_reg <= icmp_ln24_1_reg_854_pp0_iter3_reg;
                icmp_ln34_reg_665 <= icmp_ln34_fu_227_p2;
                icmp_ln34_reg_665_pp0_iter1_reg <= icmp_ln34_reg_665;
                icmp_ln34_reg_665_pp0_iter2_reg <= icmp_ln34_reg_665_pp0_iter1_reg;
                icmp_ln34_reg_665_pp0_iter3_reg <= icmp_ln34_reg_665_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln24_1_reg_854 <= icmp_ln24_1_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                icmp_ln24_reg_736 <= icmp_ln24_fu_318_p2;
                or_ln29_reg_748 <= or_ln29_fu_329_p2;
                out_h_reg_741 <= out_h_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                in_d_reg_843 <= in_d_fu_509_p2;
                out_d_0_mid2_reg_833 <= out_d_0_mid2_fu_490_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                input_load_reg_873 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln34_reg_665_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_ln29_reg_888 <= mul_ln29_fu_659_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                or_ln24_1_reg_800 <= or_ln24_1_fu_426_p2;
                out_w_reg_794 <= out_w_fu_417_p2;
                    select_ln29_1_reg_788(10 downto 2) <= select_ln29_1_fu_411_p3(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                select_ln20_1_reg_754 <= select_ln20_1_fu_333_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln20_reg_778 <= select_ln20_fu_394_p3;
                select_ln21_9_reg_783 <= select_ln21_9_fu_399_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                select_ln21_reg_817 <= select_ln21_fu_446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                select_ln24_1_reg_806 <= select_ln24_1_fu_431_p3;
                trunc_ln29_reg_823 <= trunc_ln29_fu_451_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                select_ln24_2_reg_838 <= select_ln24_2_fu_503_p3;
                    select_ln34_3_reg_828(4) <= select_ln34_3_fu_477_p3(4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_665_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln24_reg_878 <= select_ln24_fu_582_p3;
                tmp_4_reg_883 <= grp_fu_537_p18;
            end if;
        end if;
    end process;
    sub_ln29_reg_705(1 downto 0) <= "00";
    sub_ln29_1_reg_765(1 downto 0) <= "00";
    select_ln29_1_reg_788(1 downto 0) <= "00";
    select_ln34_3_reg_828(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln34_reg_665, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((icmp_ln34_reg_665 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln34_reg_665 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln20_1_fu_239_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten18_phi_fu_150_p4) + unsigned(ap_const_lv14_1));
    add_ln21_fu_256_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_161_p4) + unsigned(ap_const_lv10_1));
    add_ln29_2_fu_441_p2 <= std_logic_vector(unsigned(zext_ln24_1_fu_438_p1) + unsigned(select_ln29_1_reg_788));
    add_ln29_fu_307_p2 <= std_logic_vector(unsigned(sub_ln29_reg_705) + unsigned(zext_ln24_fu_303_p1));
    add_ln34_1_fu_577_p2 <= std_logic_vector(unsigned(zext_ln34_1_fu_574_p1) + unsigned(select_ln29_1_reg_788));
    add_ln34_2_fu_312_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_134) + unsigned(ap_const_lv14_1));
    add_ln34_fu_525_p2 <= std_logic_vector(unsigned(select_ln34_3_reg_828) + unsigned(select_ln21_reg_817));
    and_ln29_fu_388_p2 <= (or_ln29_1_fu_383_p2 and and_ln34_1_fu_339_p2);
    and_ln34_1_fu_339_p2 <= (xor_ln34_reg_688 and icmp_ln24_reg_736);
    and_ln34_2_fu_299_p2 <= (xor_ln34_reg_688 and icmp_ln21_reg_694);
    and_ln34_fu_637_p2 <= (trunc_ln33_fu_620_p1 and select_ln33_fu_629_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln34_reg_665)
    begin
        if ((icmp_ln34_reg_665 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_buffer_0_phi_fu_207_p4_assign_proc : process(buffer_0_reg_203, ap_CS_fsm_pp0_stage0, icmp_ln34_reg_665_pp0_iter3_reg, buffer_reg_898, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_665_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_buffer_0_phi_fu_207_p4 <= buffer_reg_898;
        else 
            ap_phi_mux_buffer_0_phi_fu_207_p4 <= buffer_0_reg_203;
        end if; 
    end process;


    ap_phi_mux_in_d_0_phi_fu_219_p4_assign_proc : process(in_d_0_reg_215, icmp_ln34_reg_665_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, in_d_fu_509_p2, ap_block_pp0_stage3)
    begin
        if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_phi_mux_in_d_0_phi_fu_219_p4 <= in_d_fu_509_p2;
        else 
            ap_phi_mux_in_d_0_phi_fu_219_p4 <= in_d_0_reg_215;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten18_phi_fu_150_p4_assign_proc : process(indvar_flatten18_reg_146, icmp_ln34_reg_665, ap_CS_fsm_pp0_stage0, select_ln20_1_reg_754, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten18_phi_fu_150_p4 <= select_ln20_1_reg_754;
        else 
            ap_phi_mux_indvar_flatten18_phi_fu_150_p4 <= indvar_flatten18_reg_146;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten59_phi_fu_138_p4_assign_proc : process(indvar_flatten59_reg_134, icmp_ln34_reg_665, ap_CS_fsm_pp0_stage0, add_ln34_2_reg_731, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln34_reg_665 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten59_phi_fu_138_p4 <= add_ln34_2_reg_731;
        else 
            ap_phi_mux_indvar_flatten59_phi_fu_138_p4 <= indvar_flatten59_reg_134;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_161_p4_assign_proc : process(indvar_flatten_reg_157, icmp_ln34_reg_665_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, select_ln21_9_reg_783, ap_block_pp0_stage1)
    begin
        if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_161_p4 <= select_ln21_9_reg_783;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_161_p4 <= indvar_flatten_reg_157;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_183_p4_assign_proc : process(out_d_0_reg_179, icmp_ln34_reg_665_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, out_d_0_mid2_reg_833, ap_enable_reg_pp0_iter2, ap_block_pp0_stage3)
    begin
        if (((icmp_ln34_reg_665_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_phi_mux_out_d_0_phi_fu_183_p4 <= out_d_0_mid2_reg_833;
        else 
            ap_phi_mux_out_d_0_phi_fu_183_p4 <= out_d_0_reg_179;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_172_p4_assign_proc : process(out_h_0_reg_168, icmp_ln34_reg_665_pp0_iter1_reg, ap_CS_fsm_pp0_stage2, select_ln20_reg_778, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2)
    begin
        if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_phi_mux_out_h_0_phi_fu_172_p4 <= select_ln20_reg_778;
        else 
            ap_phi_mux_out_h_0_phi_fu_172_p4 <= out_h_0_reg_168;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_195_p4_assign_proc : process(out_w_0_reg_191, icmp_ln34_reg_665_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, select_ln21_reg_817, ap_block_pp0_stage3)
    begin
        if (((icmp_ln34_reg_665_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_phi_mux_out_w_0_phi_fu_195_p4 <= select_ln21_reg_817;
        else 
            ap_phi_mux_out_w_0_phi_fu_195_p4 <= out_w_0_reg_191;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln29_2_fu_595_p4),23));

    grp_fu_651_p0 <= ap_const_lv15_310(11 - 1 downto 0);
    grp_fu_651_p1 <= grp_fu_651_p10(5 - 1 downto 0);
    grp_fu_651_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_reg_806),15));
    icmp_ln20_fu_233_p2 <= "1" when (ap_phi_mux_indvar_flatten18_phi_fu_150_p4 = ap_const_lv14_3100) else "0";
    icmp_ln21_fu_250_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_161_p4 = ap_const_lv10_1C0) else "0";
    icmp_ln24_1_fu_520_p2 <= "1" when (in_d_reg_843 = ap_const_lv5_10) else "0";
    icmp_ln24_fu_318_p2 <= "1" when (ap_phi_mux_in_d_0_phi_fu_219_p4 = ap_const_lv5_10) else "0";
    icmp_ln34_fu_227_p2 <= "1" when (ap_phi_mux_indvar_flatten59_phi_fu_138_p4 = ap_const_lv14_3100) else "0";
    in_d_fu_509_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln24_1_reg_806));
    input_r_address0 <= zext_ln29_5_fu_532_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln24_1_fu_426_p2 <= (or_ln24_fu_422_p2 or icmp_ln20_reg_669_pp0_iter1_reg);
    or_ln24_fu_422_p2 <= (and_ln34_2_reg_717 or and_ln29_reg_771);
    or_ln29_1_fu_383_p2 <= (xor_ln29_fu_378_p2 or icmp_ln20_reg_669);
    or_ln29_fu_329_p2 <= (icmp_ln20_reg_669 or and_ln34_2_reg_717);
    out_d_0_mid2_fu_490_p3 <= 
        out_d_fu_455_p2 when (icmp_ln20_reg_669_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_out_d_0_phi_fu_183_p4;
    out_d_fu_455_p2 <= (ap_phi_mux_out_d_0_phi_fu_183_p4 xor ap_const_lv1_1);
    out_h_fu_324_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln34_reg_711));
    out_w_fu_417_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln29_reg_759));
    output_r_address0 <= zext_ln34_fu_646_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= and_ln34_reg_905;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln24_1_reg_854_pp0_iter4_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln24_1_reg_854_pp0_iter4_reg = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln20_1_fu_333_p3 <= 
        ap_const_lv14_1 when (icmp_ln20_reg_669(0) = '1') else 
        add_ln20_1_reg_683;
    select_ln20_fu_394_p3 <= 
        out_h_reg_741 when (and_ln34_2_reg_717(0) = '1') else 
        select_ln34_reg_711;
    select_ln21_9_fu_399_p3 <= 
        ap_const_lv10_1 when (or_ln29_reg_748(0) = '1') else 
        add_ln21_reg_700;
    select_ln21_fu_446_p3 <= 
        out_w_reg_794 when (and_ln29_reg_771(0) = '1') else 
        select_ln29_reg_759;
    select_ln24_1_fu_431_p3 <= 
        ap_const_lv5_0 when (or_ln24_1_reg_800(0) = '1') else 
        in_d_0_reg_215;
    select_ln24_2_fu_503_p3 <= 
        add_ln29_2_reg_812 when (and_ln29_reg_771(0) = '1') else 
        select_ln29_2_fu_497_p3;
    select_ln24_fu_582_p3 <= 
        ap_const_lv23_7FD60D when (or_ln24_1_reg_800_pp0_iter2_reg(0) = '1') else 
        ap_phi_mux_buffer_0_phi_fu_207_p4;
    select_ln29_1_fu_411_p3 <= 
        sub_ln29_1_reg_765 when (and_ln34_2_reg_717(0) = '1') else 
        select_ln34_4_fu_405_p3;
    select_ln29_2_fu_497_p3 <= 
        sub_ln29_1_reg_765 when (and_ln34_2_reg_717_pp0_iter1_reg(0) = '1') else 
        select_ln34_5_fu_484_p3;
    select_ln29_fu_343_p3 <= 
        ap_const_lv5_0 when (or_ln29_reg_748(0) = '1') else 
        out_w_0_reg_191;
    select_ln33_fu_629_p3 <= 
        ap_const_lv16_FFFF when (xor_ln33_fu_623_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln34_1_fu_461_p3 <= 
        ap_const_lv5_0 when (ap_phi_mux_out_d_0_phi_fu_183_p4(0) = '1') else 
        ap_const_lv5_10;
    select_ln34_2_fu_469_p3 <= 
        ap_const_lv5_10 when (ap_phi_mux_out_d_0_phi_fu_183_p4(0) = '1') else 
        ap_const_lv5_0;
    select_ln34_3_fu_477_p3 <= 
        select_ln34_1_fu_461_p3 when (icmp_ln20_reg_669_pp0_iter1_reg(0) = '1') else 
        select_ln34_2_fu_469_p3;
    select_ln34_4_fu_405_p3 <= 
        ap_const_lv11_0 when (icmp_ln20_reg_669_pp0_iter1_reg(0) = '1') else 
        sub_ln29_reg_705;
    select_ln34_5_fu_484_p3 <= 
        ap_const_lv11_0 when (icmp_ln20_reg_669_pp0_iter1_reg(0) = '1') else 
        add_ln29_reg_726;
    select_ln34_fu_292_p3 <= 
        ap_const_lv5_0 when (icmp_ln20_reg_669(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_172_p4;
        sext_ln29_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln29_1_reg_849),32));

        sext_ln34_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_1_reg_868_pp0_iter3_reg),32));

    shl_ln29_7_fu_274_p3 <= (ap_phi_mux_out_h_0_phi_fu_172_p4 & ap_const_lv2_0);
    shl_ln29_7_mid1_fu_361_p3 <= (out_h_reg_741 & ap_const_lv2_0);
    shl_ln29_mid1_fu_350_p3 <= (out_h_reg_741 & ap_const_lv5_0);
    shl_ln_fu_262_p3 <= (ap_phi_mux_out_h_0_phi_fu_172_p4 & ap_const_lv5_0);
    sub_ln29_1_fu_372_p2 <= std_logic_vector(unsigned(zext_ln29_2_fu_357_p1) - unsigned(zext_ln29_3_fu_368_p1));
    sub_ln29_fu_286_p2 <= std_logic_vector(unsigned(zext_ln29_fu_270_p1) - unsigned(zext_ln29_1_fu_282_p1));
    tmp_1_fu_613_p3 <= buffer_reg_898(15 downto 15);
    trunc_ln29_2_fu_595_p4 <= mul_ln29_reg_888(31 downto 14);
    trunc_ln29_fu_451_p1 <= select_ln24_1_fu_431_p3(4 - 1 downto 0);
    trunc_ln33_fu_620_p1 <= buffer_reg_898(16 - 1 downto 0);
    xor_ln29_fu_378_p2 <= (icmp_ln21_reg_694 xor ap_const_lv1_1);
    xor_ln33_fu_623_p2 <= (tmp_1_fu_613_p3 xor ap_const_lv1_1);
    xor_ln34_fu_245_p2 <= (icmp_ln20_reg_669 xor ap_const_lv1_1);
    zext_ln24_1_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_794),11));
    zext_ln24_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_w_0_phi_fu_195_p4),11));
    zext_ln29_1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln29_7_fu_274_p3),11));
    zext_ln29_2_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln29_mid1_fu_350_p3),11));
    zext_ln29_3_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln29_7_mid1_fu_361_p3),11));
    zext_ln29_5_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln29_fu_529_p1),64));
    zext_ln29_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_262_p3),11));
    zext_ln34_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_reg_858),11));
    zext_ln34_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln34_fu_643_p1),64));
end behav;
