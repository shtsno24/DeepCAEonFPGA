-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (6 downto 0);
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln5_1_fu_328_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln5_1_reg_684 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln13_fu_332_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_reg_689 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_fu_336_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_reg_695 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln13_1_fu_350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_reg_700 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_356_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_705 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_30_fu_360_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_30_reg_711 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_1_fu_366_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_1_reg_721 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_32_fu_370_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_32_reg_726 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_fu_377_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_reg_731 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_2_fu_380_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_2_reg_738 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_387_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_reg_743 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_5_fu_393_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_5_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast8_fu_396_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast8_reg_753 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast5_fu_405_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast4_fu_413_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast4_reg_763 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_6_fu_432_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_6_reg_768 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_7_fu_441_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_9_fu_460_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_12_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_13_fu_479_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_13_reg_789 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_33_fu_485_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_33_reg_795 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_10_fu_500_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_10_reg_800 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_fu_509_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth_reg_808 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln18_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln15_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_fu_536_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_reg_821 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_1_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_1_reg_826 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_fu_556_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_reg_835 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln26_fu_562_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln26_reg_840 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln21_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln18_1_reg_845 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln23_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_1_fu_582_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln26_1_reg_858 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_2_fu_588_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln18_2_reg_863 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_7_fu_598_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal o_count_8_fu_615_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln30_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_3_fu_621_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_4_fu_626_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_6_fu_646_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln37_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_6_fu_652_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_7_fu_657_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_10_fu_662_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_15_fu_667_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_16_fu_672_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv2_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_reg_148 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv1_reg_158 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_ln13_reg_168 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv10_reg_178 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_0_reg_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_count_0_reg_200 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_0_reg_212 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_1_reg_223 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln13_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln13_1_reg_233 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_reg_244 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_2_reg_255 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_1_reg_266 : STD_LOGIC_VECTOR (13 downto 0);
    signal height_0_reg_277 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_3_reg_288 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_2_reg_299 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_4_reg_309 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_5_reg_319 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_1_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln5_1_fu_328_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln13_fu_332_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln13_1_fu_350_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln13_1_fu_350_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_32_fu_370_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_374_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_374_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_387_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_387_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_31_fu_408_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast6_fu_402_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_1_fu_421_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast3_fu_417_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_2_fu_426_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast7_fu_399_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_fu_436_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_fu_436_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln13_fu_445_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln13_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_4_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_5_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_11_fu_468_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_8_fu_450_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_8_fu_489_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_9_fu_494_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln15_fu_515_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_fu_541_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln37_fu_631_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln13_1_fu_350_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_fu_350_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_fu_387_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_387_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    depth_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                depth_0_reg_212 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then 
                depth_0_reg_212 <= depth_reg_808;
            end if; 
        end if;
    end process;

    height_0_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_1))) then 
                height_0_reg_277 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln30_fu_604_p2 = ap_const_lv1_1))) then 
                height_0_reg_277 <= height_reg_835;
            end if; 
        end if;
    end process;

    i_count_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_count_0_reg_200 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then 
                i_count_0_reg_200 <= i_count_reg_821;
            end if; 
        end if;
    end process;

    i_count_1_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_1))) then 
                i_count_1_reg_266 <= i_count_0_reg_200;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln30_fu_604_p2 = ap_const_lv1_1))) then 
                i_count_1_reg_266 <= add_ln26_reg_840;
            end if; 
        end if;
    end process;

    i_count_2_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_count_2_reg_299 <= add_ln26_1_reg_858;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_551_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_299 <= i_count_1_reg_266;
            end if; 
        end if;
    end process;

    indvars_iv10_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv10_reg_178 <= p_cast5_fu_405_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then 
                indvars_iv10_reg_178 <= add_ln13_6_fu_652_p2;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv1_reg_158 <= zext_ln13_9_fu_460_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then 
                indvars_iv1_reg_158 <= add_ln13_10_fu_662_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv2_reg_138 <= empty_30_reg_711;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then 
                indvars_iv2_reg_138 <= add_ln13_16_fu_672_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv_reg_148 <= add_ln13_12_fu_473_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_148 <= add_ln13_15_fu_667_p2;
            end if; 
        end if;
    end process;

    o_count_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                o_count_0_reg_188 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then 
                o_count_0_reg_188 <= add_ln18_1_reg_845;
            end if; 
        end if;
    end process;

    o_count_1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_504_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_223 <= o_count_0_reg_188;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_223 <= add_ln18_fu_530_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_1))) then 
                o_count_2_reg_255 <= indvars_iv10_reg_178;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln30_fu_604_p2 = ap_const_lv1_1))) then 
                o_count_2_reg_255 <= add_ln18_2_reg_863;
            end if; 
        end if;
    end process;

    o_count_3_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                o_count_3_reg_288 <= o_count_7_fu_598_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_551_p2 = ap_const_lv1_0))) then 
                o_count_3_reg_288 <= o_count_2_reg_255;
            end if; 
        end if;
    end process;

    o_count_4_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln30_fu_604_p2 = ap_const_lv1_0))) then 
                o_count_4_reg_309 <= o_count_8_fu_615_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_571_p2 = ap_const_lv1_1))) then 
                o_count_4_reg_309 <= o_count_reg_244;
            end if; 
        end if;
    end process;

    o_count_5_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_0))) then 
                o_count_5_reg_319 <= o_count_6_fu_646_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_551_p2 = ap_const_lv1_1))) then 
                o_count_5_reg_319 <= add_ln21_1_reg_826;
            end if; 
        end if;
    end process;

    o_count_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_1))) then 
                o_count_reg_244 <= phi_ln13_reg_168;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln30_fu_604_p2 = ap_const_lv1_1))) then 
                o_count_reg_244 <= add_ln21_3_fu_621_p2;
            end if; 
        end if;
    end process;

    phi_ln13_1_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_1))) then 
                phi_ln13_1_reg_233 <= indvars_iv1_reg_158;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln30_fu_604_p2 = ap_const_lv1_1))) then 
                phi_ln13_1_reg_233 <= add_ln21_4_fu_626_p2;
            end if; 
        end if;
    end process;

    phi_ln13_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                phi_ln13_reg_168 <= zext_ln13_7_fu_441_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then 
                phi_ln13_reg_168 <= add_ln13_7_fu_657_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln13_13_reg_789 <= add_ln13_13_fu_479_p2;
                empty_33_reg_795 <= empty_33_fu_485_p1;
                mul_ln13_reg_743 <= mul_ln13_fu_387_p2;
                    p_cast4_reg_763(4 downto 0) <= p_cast4_fu_413_p1(4 downto 0);
                    p_cast8_reg_753(4 downto 0) <= p_cast8_fu_396_p1(4 downto 0);
                    zext_ln13_10_reg_800(9 downto 0) <= zext_ln13_10_fu_500_p1(9 downto 0);
                    zext_ln13_2_reg_738(6 downto 0) <= zext_ln13_2_fu_380_p1(6 downto 0);
                    zext_ln13_5_reg_748(11 downto 0) <= zext_ln13_5_fu_393_p1(11 downto 0);
                    zext_ln13_6_reg_768(9 downto 0) <= zext_ln13_6_fu_432_p1(9 downto 0);
                    zext_ln13_reg_731(4 downto 0) <= zext_ln13_fu_377_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln13_reg_695 <= add_ln13_fu_336_p2;
                empty_30_reg_711 <= empty_30_fu_360_p2;
                empty_32_reg_726 <= empty_32_fu_370_p1;
                empty_reg_705 <= empty_fu_356_p1;
                mul_ln13_1_reg_700 <= mul_ln13_1_fu_350_p2;
                sext_ln5_1_reg_684 <= sext_ln5_1_fu_328_p1;
                trunc_ln13_1_reg_721 <= trunc_ln13_1_fu_366_p1;
                trunc_ln13_reg_689 <= trunc_ln13_fu_332_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_551_p2 = ap_const_lv1_1))) then
                add_ln18_1_reg_845 <= add_ln18_1_fu_567_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_571_p2 = ap_const_lv1_1))) then
                add_ln18_2_reg_863 <= add_ln18_2_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_1))) then
                add_ln21_1_reg_826 <= add_ln21_1_fu_546_p2;
                i_count_reg_821 <= i_count_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_571_p2 = ap_const_lv1_0))) then
                add_ln26_1_reg_858 <= add_ln26_1_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_551_p2 = ap_const_lv1_0))) then
                add_ln26_reg_840 <= add_ln26_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                depth_reg_808 <= depth_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                height_reg_835 <= height_fu_556_p2;
            end if;
        end if;
    end process;
    zext_ln13_reg_731(13 downto 5) <= "000000000";
    zext_ln13_2_reg_738(13 downto 7) <= "0000000";
    zext_ln13_5_reg_748(15 downto 12) <= "0000";
    p_cast8_reg_753(15 downto 5) <= "00000000000";
    p_cast4_reg_763(15 downto 5) <= "00000000000";
    zext_ln13_6_reg_768(13 downto 10) <= "0000";
    zext_ln13_10_reg_800(13 downto 10) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln15_fu_519_p2, ap_CS_fsm_state5, icmp_ln21_fu_551_p2, ap_CS_fsm_state6, icmp_ln23_fu_571_p2, ap_CS_fsm_state8, icmp_ln30_fu_604_p2, ap_CS_fsm_state9, icmp_ln37_fu_635_p2, icmp_ln13_fu_504_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_504_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln21_fu_551_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_571_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln30_fu_604_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln13_10_fu_662_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_158) + unsigned(zext_ln13_10_reg_800));
    add_ln13_11_fu_468_p2 <= std_logic_vector(unsigned(trunc_ln13_reg_689) + unsigned(add_ln13_5_fu_464_p2));
    add_ln13_12_fu_473_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(add_ln13_11_fu_468_p2));
    add_ln13_13_fu_479_p2 <= std_logic_vector(unsigned(add_ln13_5_fu_464_p2) + unsigned(empty_31_fu_408_p2));
    add_ln13_15_fu_667_p2 <= std_logic_vector(unsigned(add_ln13_13_reg_789) + unsigned(indvars_iv_reg_148));
    add_ln13_16_fu_672_p2 <= std_logic_vector(unsigned(add_ln13_13_reg_789) + unsigned(indvars_iv2_reg_138));
    add_ln13_1_fu_421_p2 <= std_logic_vector(unsigned(p_cast6_fu_402_p1) + unsigned(empty_reg_705));
    add_ln13_2_fu_426_p2 <= std_logic_vector(unsigned(add_ln13_1_fu_421_p2) + unsigned(p_cast3_fu_417_p1));
    add_ln13_3_fu_436_p1 <= input_width;
    add_ln13_3_fu_436_p2 <= std_logic_vector(unsigned(p_cast7_fu_399_p1) + unsigned(add_ln13_3_fu_436_p1));
    add_ln13_4_fu_454_p2 <= std_logic_vector(unsigned(ap_const_lv6_5) + unsigned(shl_ln13_fu_445_p2));
    add_ln13_5_fu_464_p2 <= std_logic_vector(unsigned(trunc_ln13_1_reg_721) + unsigned(empty_30_reg_711));
    add_ln13_6_fu_652_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_768) + unsigned(indvars_iv10_reg_178));
    add_ln13_7_fu_657_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_768) + unsigned(phi_ln13_reg_168));
    add_ln13_8_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(empty_reg_705));
    add_ln13_9_fu_494_p2 <= std_logic_vector(unsigned(zext_ln13_8_fu_450_p1) + unsigned(add_ln13_8_fu_489_p2));
    add_ln13_fu_336_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln13_fu_332_p1));
    add_ln18_1_fu_567_p2 <= std_logic_vector(unsigned(add_ln21_1_reg_826) + unsigned(p_cast4_reg_763));
    add_ln18_2_fu_588_p2 <= std_logic_vector(unsigned(zext_ln13_reg_731) + unsigned(o_count_2_reg_255));
    add_ln18_fu_530_p2 <= std_logic_vector(unsigned(o_count_1_reg_223) + unsigned(ap_const_lv16_1));
    add_ln21_1_fu_546_p2 <= std_logic_vector(unsigned(add_ln21_fu_541_p2) + unsigned(zext_ln13_5_reg_748));
    add_ln21_3_fu_621_p2 <= std_logic_vector(unsigned(zext_ln13_reg_731) + unsigned(o_count_reg_244));
    add_ln21_4_fu_626_p2 <= std_logic_vector(unsigned(zext_ln13_reg_731) + unsigned(phi_ln13_1_reg_233));
    add_ln21_fu_541_p2 <= std_logic_vector(unsigned(p_cast8_reg_753) + unsigned(o_count_0_reg_188));
    add_ln26_1_fu_582_p2 <= std_logic_vector(unsigned(i_count_2_reg_299) + unsigned(ap_const_lv14_1));
    add_ln26_fu_562_p2 <= std_logic_vector(unsigned(zext_ln13_2_reg_738) + unsigned(i_count_1_reg_266));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln13_fu_504_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_504_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln13_fu_504_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_504_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_fu_509_p2 <= std_logic_vector(unsigned(depth_0_reg_212) + unsigned(ap_const_lv5_1));
    empty_30_fu_360_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(trunc_ln13_fu_332_p1));
    empty_31_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(trunc_ln13_reg_689));
    empty_32_fu_370_p0 <= input_height;
    empty_32_fu_370_p1 <= empty_32_fu_370_p0(5 - 1 downto 0);
    empty_33_fu_485_p1 <= input_depth(5 - 1 downto 0);
    empty_fu_356_p1 <= mul_ln13_1_fu_350_p2(10 - 1 downto 0);
    height_fu_556_p2 <= std_logic_vector(unsigned(height_0_reg_277) + unsigned(ap_const_lv5_1));
    i_count_fu_536_p2 <= std_logic_vector(unsigned(mul_ln13_reg_743) + unsigned(i_count_0_reg_200));
    icmp_ln13_fu_504_p2 <= "1" when (depth_0_reg_212 = empty_33_reg_795) else "0";
    icmp_ln15_fu_519_p2 <= "1" when (trunc_ln15_fu_515_p1 = indvars_iv2_reg_138) else "0";
    icmp_ln21_fu_551_p2 <= "1" when (height_0_reg_277 = empty_32_reg_726) else "0";
    icmp_ln23_fu_571_p2 <= "1" when (o_count_3_reg_288 = o_count_reg_244) else "0";
    icmp_ln30_fu_604_p2 <= "1" when (o_count_4_reg_309 = phi_ln13_1_reg_233) else "0";
    icmp_ln37_fu_635_p2 <= "1" when (trunc_ln37_fu_631_p1 = indvars_iv_reg_148) else "0";
    input_r_address0 <= zext_ln25_fu_577_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln13_1_fu_350_p0 <= mul_ln13_1_fu_350_p00(5 - 1 downto 0);
    mul_ln13_1_fu_350_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_336_p2),12));
    mul_ln13_1_fu_350_p1 <= mul_ln13_1_fu_350_p10(7 - 1 downto 0);
    mul_ln13_1_fu_350_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_fu_328_p1),12));
    mul_ln13_1_fu_350_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_fu_350_p0) * unsigned(mul_ln13_1_fu_350_p1), 12));
    mul_ln13_fu_387_p0 <= mul_ln13_fu_387_p00(7 - 1 downto 0);
    mul_ln13_fu_387_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_374_p1),14));
    mul_ln13_fu_387_p1 <= mul_ln13_fu_387_p10(7 - 1 downto 0);
    mul_ln13_fu_387_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_reg_684),14));
    mul_ln13_fu_387_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_fu_387_p0) * unsigned(mul_ln13_fu_387_p1), 14));
    o_count_6_fu_646_p2 <= std_logic_vector(unsigned(o_count_5_reg_319) + unsigned(ap_const_lv16_1));
    o_count_7_fu_598_p2 <= std_logic_vector(unsigned(o_count_3_reg_288) + unsigned(ap_const_lv14_1));
    o_count_8_fu_615_p2 <= std_logic_vector(unsigned(o_count_4_reg_309) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln17_fu_525_p1, zext_ln25_1_fu_593_p1, zext_ln32_fu_610_p1, zext_ln39_fu_641_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= zext_ln39_fu_641_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= zext_ln32_fu_610_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= zext_ln25_1_fu_593_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= zext_ln17_fu_525_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_d0 <= input_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln15_fu_519_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln30_fu_604_p2, ap_CS_fsm_state9, icmp_ln37_fu_635_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln37_fu_635_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln30_fu_604_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_519_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast3_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_31_fu_408_p2),10));
    p_cast4_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_31_fu_408_p2),16));
    p_cast5_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_30_reg_711),14));
    p_cast6_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_30_reg_711),10));
    p_cast7_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_30_reg_711),6));
    p_cast8_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_30_reg_711),16));
    sext_ln5_1_fu_328_p0 <= input_height;
        sext_ln5_1_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_1_fu_328_p0),7));

    sext_ln5_fu_374_p0 <= input_width;
        sext_ln5_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_fu_374_p0),7));

    shl_ln13_fu_445_p0 <= input_width;
    shl_ln13_fu_445_p2 <= std_logic_vector(shift_left(unsigned(shl_ln13_fu_445_p0),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    trunc_ln13_1_fu_366_p1 <= mul_ln13_1_fu_350_p2(5 - 1 downto 0);
    trunc_ln13_fu_332_p0 <= input_width;
    trunc_ln13_fu_332_p1 <= trunc_ln13_fu_332_p0(5 - 1 downto 0);
    trunc_ln15_fu_515_p1 <= o_count_1_reg_223(5 - 1 downto 0);
    trunc_ln37_fu_631_p1 <= o_count_5_reg_319(5 - 1 downto 0);
    zext_ln13_10_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_9_fu_494_p2),14));
    zext_ln13_2_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_374_p1),14));
    zext_ln13_5_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_reg_700),16));
    zext_ln13_6_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_2_fu_426_p2),14));
    zext_ln13_7_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_3_fu_436_p2),14));
    zext_ln13_8_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln13_fu_445_p2),10));
    zext_ln13_9_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_4_fu_454_p2),14));
    zext_ln13_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_695),14));
    zext_ln17_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_223),64));
    zext_ln25_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_288),64));
    zext_ln25_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_299),64));
    zext_ln32_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_4_reg_309),64));
    zext_ln39_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_319),64));
end behav;
