-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (6 downto 0);
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln5_1_fu_318_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln5_1_reg_678 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln11_fu_322_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln11_reg_683 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_fu_326_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_reg_690 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_1_fu_340_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln11_1_reg_695 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_346_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_700 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln11_1_fu_350_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln11_1_reg_706 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_39_fu_354_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_39_reg_711 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln11_fu_361_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln11_reg_716 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln11_2_fu_364_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln11_2_reg_723 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln11_fu_371_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln11_reg_728 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln11_5_fu_377_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln11_5_reg_733 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_37_fu_380_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast8_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast8_reg_743 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast5_fu_397_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast4_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast4_reg_753 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln11_6_fu_425_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln11_6_reg_758 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln11_7_fu_434_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln11_9_fu_453_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln11_12_fu_467_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_13_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_13_reg_779 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_40_fu_479_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_40_reg_785 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln11_10_fu_494_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln11_10_reg_790 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_fu_503_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth_reg_798 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln17_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln13_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_fu_530_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_reg_811 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_1_fu_540_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_1_reg_816 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_fu_550_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_reg_825 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln27_fu_556_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln27_reg_830 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln20_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln17_2_fu_561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln17_2_reg_835 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln23_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_1_fu_576_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln27_1_reg_848 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln17_3_fu_582_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln17_3_reg_853 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_7_fu_592_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal o_count_8_fu_609_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln31_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_3_fu_615_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_4_fu_620_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_6_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln39_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_6_fu_646_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln11_7_fu_651_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln11_10_fu_656_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln11_15_fu_661_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_16_fu_666_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv2_reg_128 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv1_reg_148 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_ln11_reg_158 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv10_reg_168 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_0_reg_178 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_count_0_reg_190 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_0_reg_202 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_1_reg_213 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln11_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln11_1_reg_223 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_reg_234 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_2_reg_245 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_1_reg_256 : STD_LOGIC_VECTOR (13 downto 0);
    signal height_0_reg_267 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_3_reg_278 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_2_reg_289 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_4_reg_299 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_5_reg_309 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln16_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_1_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln5_1_fu_318_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln11_fu_322_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln11_1_fu_340_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_1_fu_340_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_39_fu_354_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_358_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_358_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln11_fu_371_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln11_fu_371_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_38_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast6_fu_393_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln11_1_fu_414_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast3_fu_410_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln11_2_fu_419_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast7_fu_389_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln11_3_fu_429_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln11_3_fu_429_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln11_fu_438_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln11_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln11_4_fu_447_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln11_5_fu_457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_11_fu_462_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln11_8_fu_443_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln11_8_fu_483_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln11_9_fu_488_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln13_fu_509_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_fu_535_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln39_fu_625_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln11_1_fu_340_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln11_1_fu_340_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln11_fu_371_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln11_fu_371_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    depth_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                depth_0_reg_202 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then 
                depth_0_reg_202 <= depth_reg_798;
            end if; 
        end if;
    end process;

    height_0_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_1))) then 
                height_0_reg_267 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln31_fu_598_p2 = ap_const_lv1_1))) then 
                height_0_reg_267 <= height_reg_825;
            end if; 
        end if;
    end process;

    i_count_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_count_0_reg_190 <= ap_const_lv14_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then 
                i_count_0_reg_190 <= i_count_reg_811;
            end if; 
        end if;
    end process;

    i_count_1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_1))) then 
                i_count_1_reg_256 <= i_count_0_reg_190;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln31_fu_598_p2 = ap_const_lv1_1))) then 
                i_count_1_reg_256 <= add_ln27_reg_830;
            end if; 
        end if;
    end process;

    i_count_2_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_count_2_reg_289 <= add_ln27_1_reg_848;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_545_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_289 <= i_count_1_reg_256;
            end if; 
        end if;
    end process;

    indvars_iv10_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv10_reg_168 <= p_cast5_fu_397_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then 
                indvars_iv10_reg_168 <= add_ln11_6_fu_646_p2;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv1_reg_148 <= zext_ln11_9_fu_453_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then 
                indvars_iv1_reg_148 <= add_ln11_10_fu_656_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv2_reg_128 <= empty_37_fu_380_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then 
                indvars_iv2_reg_128 <= add_ln11_16_fu_666_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv_reg_138 <= add_ln11_12_fu_467_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then 
                indvars_iv_reg_138 <= add_ln11_15_fu_661_p2;
            end if; 
        end if;
    end process;

    o_count_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                o_count_0_reg_178 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then 
                o_count_0_reg_178 <= add_ln17_2_reg_835;
            end if; 
        end if;
    end process;

    o_count_1_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_498_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_213 <= o_count_0_reg_178;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_213 <= add_ln17_fu_524_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_1))) then 
                o_count_2_reg_245 <= indvars_iv10_reg_168;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln31_fu_598_p2 = ap_const_lv1_1))) then 
                o_count_2_reg_245 <= add_ln17_3_reg_853;
            end if; 
        end if;
    end process;

    o_count_3_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                o_count_3_reg_278 <= o_count_7_fu_592_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_545_p2 = ap_const_lv1_0))) then 
                o_count_3_reg_278 <= o_count_2_reg_245;
            end if; 
        end if;
    end process;

    o_count_4_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln31_fu_598_p2 = ap_const_lv1_0))) then 
                o_count_4_reg_299 <= o_count_8_fu_609_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_565_p2 = ap_const_lv1_1))) then 
                o_count_4_reg_299 <= o_count_reg_234;
            end if; 
        end if;
    end process;

    o_count_5_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_0))) then 
                o_count_5_reg_309 <= o_count_6_fu_640_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_545_p2 = ap_const_lv1_1))) then 
                o_count_5_reg_309 <= add_ln20_1_reg_816;
            end if; 
        end if;
    end process;

    o_count_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_1))) then 
                o_count_reg_234 <= phi_ln11_reg_158;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln31_fu_598_p2 = ap_const_lv1_1))) then 
                o_count_reg_234 <= add_ln20_3_fu_615_p2;
            end if; 
        end if;
    end process;

    phi_ln11_1_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_1))) then 
                phi_ln11_1_reg_223 <= indvars_iv1_reg_148;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln31_fu_598_p2 = ap_const_lv1_1))) then 
                phi_ln11_1_reg_223 <= add_ln20_4_fu_620_p2;
            end if; 
        end if;
    end process;

    phi_ln11_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                phi_ln11_reg_158 <= zext_ln11_7_fu_434_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then 
                phi_ln11_reg_158 <= add_ln11_7_fu_651_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln11_13_reg_779 <= add_ln11_13_fu_473_p2;
                empty_40_reg_785 <= empty_40_fu_479_p1;
                mul_ln11_reg_728 <= mul_ln11_fu_371_p2;
                    p_cast4_reg_753(4 downto 0) <= p_cast4_fu_406_p1(4 downto 0);
                    p_cast8_reg_743(4 downto 0) <= p_cast8_fu_385_p1(4 downto 0);
                    zext_ln11_10_reg_790(9 downto 0) <= zext_ln11_10_fu_494_p1(9 downto 0);
                    zext_ln11_2_reg_723(6 downto 0) <= zext_ln11_2_fu_364_p1(6 downto 0);
                    zext_ln11_5_reg_733(11 downto 0) <= zext_ln11_5_fu_377_p1(11 downto 0);
                    zext_ln11_6_reg_758(9 downto 0) <= zext_ln11_6_fu_425_p1(9 downto 0);
                    zext_ln11_reg_716(4 downto 0) <= zext_ln11_fu_361_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln11_reg_690 <= add_ln11_fu_326_p2;
                empty_39_reg_711 <= empty_39_fu_354_p1;
                empty_reg_700 <= empty_fu_346_p1;
                mul_ln11_1_reg_695 <= mul_ln11_1_fu_340_p2;
                sext_ln5_1_reg_678 <= sext_ln5_1_fu_318_p1;
                trunc_ln11_1_reg_706 <= trunc_ln11_1_fu_350_p1;
                trunc_ln11_reg_683 <= trunc_ln11_fu_322_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_545_p2 = ap_const_lv1_1))) then
                add_ln17_2_reg_835 <= add_ln17_2_fu_561_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_565_p2 = ap_const_lv1_1))) then
                add_ln17_3_reg_853 <= add_ln17_3_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_1))) then
                add_ln20_1_reg_816 <= add_ln20_1_fu_540_p2;
                i_count_reg_811 <= i_count_fu_530_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_565_p2 = ap_const_lv1_0))) then
                add_ln27_1_reg_848 <= add_ln27_1_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_545_p2 = ap_const_lv1_0))) then
                add_ln27_reg_830 <= add_ln27_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                depth_reg_798 <= depth_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                height_reg_825 <= height_fu_550_p2;
            end if;
        end if;
    end process;
    zext_ln11_reg_716(13 downto 5) <= "000000000";
    zext_ln11_2_reg_723(13 downto 7) <= "0000000";
    zext_ln11_5_reg_733(15 downto 12) <= "0000";
    p_cast8_reg_743(15 downto 5) <= "00000000000";
    p_cast4_reg_753(15 downto 5) <= "00000000000";
    zext_ln11_6_reg_758(13 downto 10) <= "0000";
    zext_ln11_10_reg_790(13 downto 10) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln13_fu_513_p2, ap_CS_fsm_state5, icmp_ln20_fu_545_p2, ap_CS_fsm_state6, icmp_ln23_fu_565_p2, ap_CS_fsm_state8, icmp_ln31_fu_598_p2, ap_CS_fsm_state9, icmp_ln39_fu_629_p2, icmp_ln11_fu_498_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_498_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_545_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_565_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln31_fu_598_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln11_10_fu_656_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_148) + unsigned(zext_ln11_10_reg_790));
    add_ln11_11_fu_462_p2 <= std_logic_vector(unsigned(trunc_ln11_reg_683) + unsigned(add_ln11_5_fu_457_p2));
    add_ln11_12_fu_467_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(add_ln11_11_fu_462_p2));
    add_ln11_13_fu_473_p2 <= std_logic_vector(unsigned(add_ln11_5_fu_457_p2) + unsigned(empty_38_fu_401_p2));
    add_ln11_15_fu_661_p2 <= std_logic_vector(unsigned(add_ln11_13_reg_779) + unsigned(indvars_iv_reg_138));
    add_ln11_16_fu_666_p2 <= std_logic_vector(unsigned(add_ln11_13_reg_779) + unsigned(indvars_iv2_reg_128));
    add_ln11_1_fu_414_p2 <= std_logic_vector(unsigned(p_cast6_fu_393_p1) + unsigned(empty_reg_700));
    add_ln11_2_fu_419_p2 <= std_logic_vector(unsigned(add_ln11_1_fu_414_p2) + unsigned(p_cast3_fu_410_p1));
    add_ln11_3_fu_429_p1 <= input_width;
    add_ln11_3_fu_429_p2 <= std_logic_vector(unsigned(p_cast7_fu_389_p1) + unsigned(add_ln11_3_fu_429_p1));
    add_ln11_4_fu_447_p2 <= std_logic_vector(unsigned(ap_const_lv6_5) + unsigned(shl_ln11_fu_438_p2));
    add_ln11_5_fu_457_p2 <= std_logic_vector(unsigned(trunc_ln11_1_reg_706) + unsigned(empty_37_fu_380_p2));
    add_ln11_6_fu_646_p2 <= std_logic_vector(unsigned(zext_ln11_6_reg_758) + unsigned(indvars_iv10_reg_168));
    add_ln11_7_fu_651_p2 <= std_logic_vector(unsigned(zext_ln11_6_reg_758) + unsigned(phi_ln11_reg_158));
    add_ln11_8_fu_483_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(empty_reg_700));
    add_ln11_9_fu_488_p2 <= std_logic_vector(unsigned(zext_ln11_8_fu_443_p1) + unsigned(add_ln11_8_fu_483_p2));
    add_ln11_fu_326_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln11_fu_322_p1));
    add_ln17_2_fu_561_p2 <= std_logic_vector(unsigned(add_ln20_1_reg_816) + unsigned(p_cast4_reg_753));
    add_ln17_3_fu_582_p2 <= std_logic_vector(unsigned(zext_ln11_reg_716) + unsigned(o_count_2_reg_245));
    add_ln17_fu_524_p2 <= std_logic_vector(unsigned(o_count_1_reg_213) + unsigned(ap_const_lv16_1));
    add_ln20_1_fu_540_p2 <= std_logic_vector(unsigned(add_ln20_fu_535_p2) + unsigned(zext_ln11_5_reg_733));
    add_ln20_3_fu_615_p2 <= std_logic_vector(unsigned(zext_ln11_reg_716) + unsigned(o_count_reg_234));
    add_ln20_4_fu_620_p2 <= std_logic_vector(unsigned(zext_ln11_reg_716) + unsigned(phi_ln11_1_reg_223));
    add_ln20_fu_535_p2 <= std_logic_vector(unsigned(p_cast8_reg_743) + unsigned(o_count_0_reg_178));
    add_ln27_1_fu_576_p2 <= std_logic_vector(unsigned(i_count_2_reg_289) + unsigned(ap_const_lv14_1));
    add_ln27_fu_556_p2 <= std_logic_vector(unsigned(zext_ln11_2_reg_723) + unsigned(i_count_1_reg_256));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln11_fu_498_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_498_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln11_fu_498_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_498_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_fu_503_p2 <= std_logic_vector(unsigned(depth_0_reg_202) + unsigned(ap_const_lv5_1));
    empty_37_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(trunc_ln11_reg_683));
    empty_38_fu_401_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(trunc_ln11_reg_683));
    empty_39_fu_354_p0 <= input_height;
    empty_39_fu_354_p1 <= empty_39_fu_354_p0(5 - 1 downto 0);
    empty_40_fu_479_p1 <= input_depth(5 - 1 downto 0);
    empty_fu_346_p1 <= mul_ln11_1_fu_340_p2(10 - 1 downto 0);
    height_fu_550_p2 <= std_logic_vector(unsigned(height_0_reg_267) + unsigned(ap_const_lv5_1));
    i_count_fu_530_p2 <= std_logic_vector(unsigned(mul_ln11_reg_728) + unsigned(i_count_0_reg_190));
    icmp_ln11_fu_498_p2 <= "1" when (depth_0_reg_202 = empty_40_reg_785) else "0";
    icmp_ln13_fu_513_p2 <= "1" when (trunc_ln13_fu_509_p1 = indvars_iv2_reg_128) else "0";
    icmp_ln20_fu_545_p2 <= "1" when (height_0_reg_267 = empty_39_reg_711) else "0";
    icmp_ln23_fu_565_p2 <= "1" when (o_count_3_reg_278 = o_count_reg_234) else "0";
    icmp_ln31_fu_598_p2 <= "1" when (o_count_4_reg_299 = phi_ln11_1_reg_223) else "0";
    icmp_ln39_fu_629_p2 <= "1" when (trunc_ln39_fu_625_p1 = indvars_iv_reg_138) else "0";
    input_r_address0 <= zext_ln26_fu_571_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln11_1_fu_340_p0 <= mul_ln11_1_fu_340_p00(5 - 1 downto 0);
    mul_ln11_1_fu_340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_fu_326_p2),12));
    mul_ln11_1_fu_340_p1 <= mul_ln11_1_fu_340_p10(7 - 1 downto 0);
    mul_ln11_1_fu_340_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_fu_318_p1),12));
    mul_ln11_1_fu_340_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln11_1_fu_340_p0) * unsigned(mul_ln11_1_fu_340_p1), 12));
    mul_ln11_fu_371_p0 <= mul_ln11_fu_371_p00(7 - 1 downto 0);
    mul_ln11_fu_371_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_358_p1),14));
    mul_ln11_fu_371_p1 <= mul_ln11_fu_371_p10(7 - 1 downto 0);
    mul_ln11_fu_371_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_reg_678),14));
    mul_ln11_fu_371_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln11_fu_371_p0) * unsigned(mul_ln11_fu_371_p1), 14));
    o_count_6_fu_640_p2 <= std_logic_vector(unsigned(o_count_5_reg_309) + unsigned(ap_const_lv16_1));
    o_count_7_fu_592_p2 <= std_logic_vector(unsigned(o_count_3_reg_278) + unsigned(ap_const_lv14_1));
    o_count_8_fu_609_p2 <= std_logic_vector(unsigned(o_count_4_reg_299) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, zext_ln16_fu_519_p1, zext_ln26_1_fu_587_p1, zext_ln34_fu_604_p1, zext_ln42_fu_635_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= zext_ln42_fu_635_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= zext_ln34_fu_604_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= zext_ln26_1_fu_587_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= zext_ln16_fu_519_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_d0 <= input_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln13_fu_513_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln31_fu_598_p2, ap_CS_fsm_state9, icmp_ln39_fu_629_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln39_fu_629_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln31_fu_598_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln13_fu_513_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast3_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_38_fu_401_p2),10));
    p_cast4_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_38_fu_401_p2),16));
    p_cast5_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_fu_380_p2),14));
    p_cast6_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_fu_380_p2),10));
    p_cast7_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_fu_380_p2),6));
    p_cast8_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_37_fu_380_p2),16));
    sext_ln5_1_fu_318_p0 <= input_height;
        sext_ln5_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_1_fu_318_p0),7));

    sext_ln5_fu_358_p0 <= input_width;
        sext_ln5_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_fu_358_p0),7));

    shl_ln11_fu_438_p0 <= input_width;
    shl_ln11_fu_438_p2 <= std_logic_vector(shift_left(unsigned(shl_ln11_fu_438_p0),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    trunc_ln11_1_fu_350_p1 <= mul_ln11_1_fu_340_p2(5 - 1 downto 0);
    trunc_ln11_fu_322_p0 <= input_width;
    trunc_ln11_fu_322_p1 <= trunc_ln11_fu_322_p0(5 - 1 downto 0);
    trunc_ln13_fu_509_p1 <= o_count_1_reg_213(5 - 1 downto 0);
    trunc_ln39_fu_625_p1 <= o_count_5_reg_309(5 - 1 downto 0);
    zext_ln11_10_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_9_fu_488_p2),14));
    zext_ln11_2_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_358_p1),14));
    zext_ln11_5_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln11_1_reg_695),16));
    zext_ln11_6_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_2_fu_419_p2),14));
    zext_ln11_7_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_3_fu_429_p2),14));
    zext_ln11_8_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln11_fu_438_p2),10));
    zext_ln11_9_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_4_fu_447_p2),14));
    zext_ln11_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_reg_690),14));
    zext_ln16_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_213),64));
    zext_ln26_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_278),64));
    zext_ln26_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_289),64));
    zext_ln34_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_4_reg_299),64));
    zext_ln42_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_309),64));
end behav;
