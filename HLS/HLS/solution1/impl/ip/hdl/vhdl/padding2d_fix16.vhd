-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (6 downto 0);
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal o_count_3_reg_300 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_2_reg_311 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln5_1_fu_340_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln5_1_reg_700 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln13_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_reg_705 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_fu_348_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_reg_712 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln13_1_fu_362_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_reg_717 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_368_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_722 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln13_1_fu_372_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln13_1_reg_728 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_37_fu_376_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_37_reg_733 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_fu_383_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_reg_738 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_2_fu_386_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_2_reg_745 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_393_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_reg_750 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_5_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_5_reg_755 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_35_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast9_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast9_reg_765 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast6_fu_419_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_cast5_fu_428_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_cast5_reg_775 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln13_6_fu_447_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_6_reg_780 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_7_fu_456_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_9_fu_475_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_12_fu_489_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_13_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_13_reg_801 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_38_fu_501_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_38_reg_807 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_10_fu_516_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln13_10_reg_812 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln13_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal depth_fu_525_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth_reg_821 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln15_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_fu_552_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_reg_834 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln23_1_fu_562_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_1_reg_839 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal height_fu_572_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_reg_849 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln30_fu_578_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln30_reg_854 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_1_fu_583_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln20_1_reg_859 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln25_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_864 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state7_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln30_1_fu_598_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal o_count_7_fu_604_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_7_reg_878 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_2_fu_615_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln20_2_reg_883 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal o_count_8_fu_631_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln34_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_3_fu_637_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln23_4_fu_642_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_6_fu_662_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln43_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_6_fu_668_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln13_7_fu_673_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_10_fu_678_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln13_15_fu_683_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_16_fu_688_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal indvars_iv2_reg_150 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv_reg_160 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv1_reg_170 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_ln13_reg_180 : STD_LOGIC_VECTOR (13 downto 0);
    signal indvars_iv10_reg_190 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_0_reg_200 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_count_0_reg_212 : STD_LOGIC_VECTOR (13 downto 0);
    signal depth_0_reg_224 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_1_reg_235 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln13_1_reg_245 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_reg_256 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_2_reg_267 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_count_1_reg_278 : STD_LOGIC_VECTOR (13 downto 0);
    signal height_0_reg_289 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_o_count_3_phi_fu_303_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal o_count_4_reg_321 : STD_LOGIC_VECTOR (13 downto 0);
    signal o_count_5_reg_331 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln19_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln5_1_fu_340_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln13_fu_344_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln13_1_fu_362_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln13_1_fu_362_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_37_fu_376_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_380_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln5_fu_380_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_393_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln13_fu_393_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_36_fu_423_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast7_fu_415_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_1_fu_436_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast4_fu_432_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_2_fu_441_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast8_fu_411_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_fu_451_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_fu_451_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln13_fu_460_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln13_fu_460_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_4_fu_469_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_5_fu_479_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_11_fu_484_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln13_8_fu_465_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_8_fu_505_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln13_9_fu_510_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln15_fu_531_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_557_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln43_fu_647_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal mul_ln13_1_fu_362_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_1_fu_362_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln13_fu_393_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln13_fu_393_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_567_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state7))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state7);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_567_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    depth_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                depth_0_reg_224 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                depth_0_reg_224 <= depth_reg_821;
            end if; 
        end if;
    end process;

    height_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                height_0_reg_289 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                height_0_reg_289 <= height_reg_849;
            end if; 
        end if;
    end process;

    i_count_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_count_0_reg_212 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_count_0_reg_212 <= i_count_reg_834;
            end if; 
        end if;
    end process;

    i_count_1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_count_1_reg_278 <= i_count_0_reg_212;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_count_1_reg_278 <= add_ln30_reg_854;
            end if; 
        end if;
    end process;

    i_count_2_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln25_fu_587_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_311 <= add_ln30_1_fu_598_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_567_p2 = ap_const_lv1_0))) then 
                i_count_2_reg_311 <= i_count_1_reg_278;
            end if; 
        end if;
    end process;

    indvars_iv10_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv10_reg_190 <= p_cast6_fu_419_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv10_reg_190 <= add_ln13_6_fu_668_p2;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv1_reg_170 <= zext_ln13_9_fu_475_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv1_reg_170 <= add_ln13_10_fu_678_p2;
            end if; 
        end if;
    end process;

    indvars_iv2_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv2_reg_150 <= empty_35_fu_402_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv2_reg_150 <= add_ln13_16_fu_688_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvars_iv_reg_160 <= add_ln13_12_fu_489_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvars_iv_reg_160 <= add_ln13_15_fu_683_p2;
            end if; 
        end if;
    end process;

    o_count_0_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                o_count_0_reg_200 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                o_count_0_reg_200 <= add_ln20_1_reg_859;
            end if; 
        end if;
    end process;

    o_count_1_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_520_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_235 <= o_count_0_reg_200;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_535_p2 = ap_const_lv1_0))) then 
                o_count_1_reg_235 <= add_ln20_fu_546_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                o_count_2_reg_267 <= indvars_iv10_reg_190;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                o_count_2_reg_267 <= add_ln20_2_reg_883;
            end if; 
        end if;
    end process;

    o_count_3_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln25_reg_864 = ap_const_lv1_0))) then 
                o_count_3_reg_300 <= o_count_7_reg_878;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_567_p2 = ap_const_lv1_0))) then 
                o_count_3_reg_300 <= o_count_2_reg_267;
            end if; 
        end if;
    end process;

    o_count_4_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln34_fu_620_p2 = ap_const_lv1_0))) then 
                o_count_4_reg_321 <= o_count_8_fu_631_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                o_count_4_reg_321 <= o_count_reg_256;
            end if; 
        end if;
    end process;

    o_count_5_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln43_fu_651_p2 = ap_const_lv1_0))) then 
                o_count_5_reg_331 <= o_count_6_fu_662_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_567_p2 = ap_const_lv1_1))) then 
                o_count_5_reg_331 <= add_ln23_1_reg_839;
            end if; 
        end if;
    end process;

    o_count_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                o_count_reg_256 <= phi_ln13_reg_180;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                o_count_reg_256 <= add_ln23_3_fu_637_p2;
            end if; 
        end if;
    end process;

    phi_ln13_1_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_ln13_1_reg_245 <= indvars_iv1_reg_170;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_ln13_1_reg_245 <= add_ln23_4_fu_642_p2;
            end if; 
        end if;
    end process;

    phi_ln13_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                phi_ln13_reg_180 <= zext_ln13_7_fu_456_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                phi_ln13_reg_180 <= add_ln13_7_fu_673_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln13_13_reg_801 <= add_ln13_13_fu_495_p2;
                empty_38_reg_807 <= empty_38_fu_501_p1;
                mul_ln13_reg_750 <= mul_ln13_fu_393_p2;
                    p_cast5_reg_775(4 downto 0) <= p_cast5_fu_428_p1(4 downto 0);
                    p_cast9_reg_765(4 downto 0) <= p_cast9_fu_407_p1(4 downto 0);
                    zext_ln13_10_reg_812(9 downto 0) <= zext_ln13_10_fu_516_p1(9 downto 0);
                    zext_ln13_2_reg_745(6 downto 0) <= zext_ln13_2_fu_386_p1(6 downto 0);
                    zext_ln13_5_reg_755(11 downto 0) <= zext_ln13_5_fu_399_p1(11 downto 0);
                    zext_ln13_6_reg_780(9 downto 0) <= zext_ln13_6_fu_447_p1(9 downto 0);
                    zext_ln13_reg_738(4 downto 0) <= zext_ln13_fu_383_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                add_ln13_reg_712 <= add_ln13_fu_348_p2;
                empty_37_reg_733 <= empty_37_fu_376_p1;
                empty_reg_722 <= empty_fu_368_p1;
                mul_ln13_1_reg_717 <= mul_ln13_1_fu_362_p2;
                sext_ln5_1_reg_700 <= sext_ln5_1_fu_340_p1;
                trunc_ln13_1_reg_728 <= trunc_ln13_1_fu_372_p1;
                trunc_ln13_reg_705 <= trunc_ln13_fu_344_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_567_p2 = ap_const_lv1_1))) then
                add_ln20_1_reg_859 <= add_ln20_1_fu_583_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln20_2_reg_883 <= add_ln20_2_fu_615_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln23_1_reg_839 <= add_ln23_1_fu_562_p2;
                i_count_reg_834 <= i_count_fu_552_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_567_p2 = ap_const_lv1_0))) then
                add_ln30_reg_854 <= add_ln30_fu_578_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                depth_reg_821 <= depth_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                height_reg_849 <= height_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln25_reg_864 <= icmp_ln25_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln25_fu_587_p2 = ap_const_lv1_0))) then
                o_count_7_reg_878 <= o_count_7_fu_604_p2;
            end if;
        end if;
    end process;
    zext_ln13_reg_738(13 downto 5) <= "000000000";
    zext_ln13_2_reg_745(13 downto 7) <= "0000000";
    zext_ln13_5_reg_755(15 downto 12) <= "0000";
    p_cast9_reg_765(15 downto 5) <= "00000000000";
    p_cast5_reg_775(15 downto 5) <= "00000000000";
    zext_ln13_6_reg_780(13 downto 10) <= "0000";
    zext_ln13_10_reg_812(13 downto 10) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln13_fu_520_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln15_fu_535_p2, icmp_ln23_fu_567_p2, ap_CS_fsm_state6, icmp_ln25_fu_587_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state10, icmp_ln34_fu_620_p2, ap_CS_fsm_state12, icmp_ln43_fu_651_p2, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_520_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_535_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_567_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_fu_587_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln25_fu_587_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln34_fu_620_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln43_fu_651_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln13_10_fu_678_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_170) + unsigned(zext_ln13_10_reg_812));
    add_ln13_11_fu_484_p2 <= std_logic_vector(unsigned(trunc_ln13_reg_705) + unsigned(add_ln13_5_fu_479_p2));
    add_ln13_12_fu_489_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(add_ln13_11_fu_484_p2));
    add_ln13_13_fu_495_p2 <= std_logic_vector(unsigned(add_ln13_5_fu_479_p2) + unsigned(empty_36_fu_423_p2));
    add_ln13_15_fu_683_p2 <= std_logic_vector(unsigned(add_ln13_13_reg_801) + unsigned(indvars_iv_reg_160));
    add_ln13_16_fu_688_p2 <= std_logic_vector(unsigned(add_ln13_13_reg_801) + unsigned(indvars_iv2_reg_150));
    add_ln13_1_fu_436_p2 <= std_logic_vector(unsigned(p_cast7_fu_415_p1) + unsigned(empty_reg_722));
    add_ln13_2_fu_441_p2 <= std_logic_vector(unsigned(add_ln13_1_fu_436_p2) + unsigned(p_cast4_fu_432_p1));
    add_ln13_3_fu_451_p1 <= input_width;
    add_ln13_3_fu_451_p2 <= std_logic_vector(unsigned(p_cast8_fu_411_p1) + unsigned(add_ln13_3_fu_451_p1));
    add_ln13_4_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv6_5) + unsigned(shl_ln13_fu_460_p2));
    add_ln13_5_fu_479_p2 <= std_logic_vector(unsigned(trunc_ln13_1_reg_728) + unsigned(empty_35_fu_402_p2));
    add_ln13_6_fu_668_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_780) + unsigned(indvars_iv10_reg_190));
    add_ln13_7_fu_673_p2 <= std_logic_vector(unsigned(zext_ln13_6_reg_780) + unsigned(phi_ln13_reg_180));
    add_ln13_8_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv10_4) + unsigned(empty_reg_722));
    add_ln13_9_fu_510_p2 <= std_logic_vector(unsigned(zext_ln13_8_fu_465_p1) + unsigned(add_ln13_8_fu_505_p2));
    add_ln13_fu_348_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(trunc_ln13_fu_344_p1));
    add_ln20_1_fu_583_p2 <= std_logic_vector(unsigned(add_ln23_1_reg_839) + unsigned(p_cast5_reg_775));
    add_ln20_2_fu_615_p2 <= std_logic_vector(unsigned(zext_ln13_reg_738) + unsigned(o_count_2_reg_267));
    add_ln20_fu_546_p2 <= std_logic_vector(unsigned(o_count_1_reg_235) + unsigned(ap_const_lv16_1));
    add_ln23_1_fu_562_p2 <= std_logic_vector(unsigned(add_ln23_fu_557_p2) + unsigned(zext_ln13_5_reg_755));
    add_ln23_3_fu_637_p2 <= std_logic_vector(unsigned(zext_ln13_reg_738) + unsigned(o_count_reg_256));
    add_ln23_4_fu_642_p2 <= std_logic_vector(unsigned(zext_ln13_reg_738) + unsigned(phi_ln13_1_reg_245));
    add_ln23_fu_557_p2 <= std_logic_vector(unsigned(p_cast9_reg_765) + unsigned(o_count_0_reg_200));
    add_ln30_1_fu_598_p2 <= std_logic_vector(unsigned(i_count_2_reg_311) + unsigned(ap_const_lv14_1));
    add_ln30_fu_578_p2 <= std_logic_vector(unsigned(zext_ln13_2_reg_745) + unsigned(i_count_1_reg_278));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state7_assign_proc : process(icmp_ln25_fu_587_p2)
    begin
        if ((icmp_ln25_fu_587_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln13_fu_520_p2, ap_CS_fsm_state3)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_520_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_o_count_3_phi_fu_303_p4_assign_proc : process(o_count_3_reg_300, icmp_ln25_reg_864, ap_CS_fsm_pp1_stage0, o_count_7_reg_878, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln25_reg_864 = ap_const_lv1_0))) then 
            ap_phi_mux_o_count_3_phi_fu_303_p4 <= o_count_7_reg_878;
        else 
            ap_phi_mux_o_count_3_phi_fu_303_p4 <= o_count_3_reg_300;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln13_fu_520_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_520_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_fu_525_p2 <= std_logic_vector(unsigned(depth_0_reg_224) + unsigned(ap_const_lv5_1));
    empty_35_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(trunc_ln13_reg_705));
    empty_36_fu_423_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(trunc_ln13_reg_705));
    empty_37_fu_376_p0 <= input_height;
    empty_37_fu_376_p1 <= empty_37_fu_376_p0(5 - 1 downto 0);
    empty_38_fu_501_p1 <= input_depth(5 - 1 downto 0);
    empty_fu_368_p1 <= mul_ln13_1_fu_362_p2(10 - 1 downto 0);
    height_fu_572_p2 <= std_logic_vector(unsigned(height_0_reg_289) + unsigned(ap_const_lv5_1));
    i_count_fu_552_p2 <= std_logic_vector(unsigned(mul_ln13_reg_750) + unsigned(i_count_0_reg_212));
    icmp_ln13_fu_520_p2 <= "1" when (depth_0_reg_224 = empty_38_reg_807) else "0";
    icmp_ln15_fu_535_p2 <= "1" when (trunc_ln15_fu_531_p1 = indvars_iv2_reg_150) else "0";
    icmp_ln23_fu_567_p2 <= "1" when (height_0_reg_289 = empty_37_reg_733) else "0";
    icmp_ln25_fu_587_p2 <= "1" when (ap_phi_mux_o_count_3_phi_fu_303_p4 = o_count_reg_256) else "0";
    icmp_ln34_fu_620_p2 <= "1" when (o_count_4_reg_321 = phi_ln13_1_reg_245) else "0";
    icmp_ln43_fu_651_p2 <= "1" when (trunc_ln43_fu_647_p1 = indvars_iv_reg_160) else "0";
    input_r_address0 <= zext_ln29_fu_593_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln13_1_fu_362_p0 <= mul_ln13_1_fu_362_p00(5 - 1 downto 0);
    mul_ln13_1_fu_362_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_fu_348_p2),12));
    mul_ln13_1_fu_362_p1 <= mul_ln13_1_fu_362_p10(7 - 1 downto 0);
    mul_ln13_1_fu_362_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_fu_340_p1),12));
    mul_ln13_1_fu_362_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_fu_362_p0) * unsigned(mul_ln13_1_fu_362_p1), 12));
    mul_ln13_fu_393_p0 <= mul_ln13_fu_393_p00(7 - 1 downto 0);
    mul_ln13_fu_393_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_380_p1),14));
    mul_ln13_fu_393_p1 <= mul_ln13_fu_393_p10(7 - 1 downto 0);
    mul_ln13_fu_393_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_1_reg_700),14));
    mul_ln13_fu_393_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_fu_393_p0) * unsigned(mul_ln13_fu_393_p1), 14));
    o_count_6_fu_662_p2 <= std_logic_vector(unsigned(o_count_5_reg_331) + unsigned(ap_const_lv16_1));
    o_count_7_fu_604_p2 <= std_logic_vector(unsigned(ap_phi_mux_o_count_3_phi_fu_303_p4) + unsigned(ap_const_lv14_1));
    o_count_8_fu_631_p2 <= std_logic_vector(unsigned(o_count_4_reg_321) + unsigned(ap_const_lv14_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, zext_ln19_fu_541_p1, zext_ln29_1_fu_610_p1, zext_ln38_fu_626_p1, zext_ln47_fu_657_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_address0 <= zext_ln47_fu_657_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address0 <= zext_ln38_fu_626_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_r_address0 <= zext_ln29_1_fu_610_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= zext_ln19_fu_541_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state4, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            output_r_d0 <= input_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln15_fu_535_p2, icmp_ln25_reg_864, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state10, icmp_ln34_fu_620_p2, ap_CS_fsm_state12, icmp_ln43_fu_651_p2, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln43_fu_651_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln34_fu_620_p2 = ap_const_lv1_0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln25_reg_864 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_535_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast4_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_423_p2),10));
    p_cast5_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_36_fu_423_p2),16));
    p_cast6_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_402_p2),14));
    p_cast7_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_402_p2),10));
    p_cast8_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_402_p2),6));
    p_cast9_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_35_fu_402_p2),16));
    sext_ln5_1_fu_340_p0 <= input_height;
        sext_ln5_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_1_fu_340_p0),7));

    sext_ln5_fu_380_p0 <= input_width;
        sext_ln5_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln5_fu_380_p0),7));

    shl_ln13_fu_460_p0 <= input_width;
    shl_ln13_fu_460_p2 <= std_logic_vector(shift_left(unsigned(shl_ln13_fu_460_p0),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    trunc_ln13_1_fu_372_p1 <= mul_ln13_1_fu_362_p2(5 - 1 downto 0);
    trunc_ln13_fu_344_p0 <= input_width;
    trunc_ln13_fu_344_p1 <= trunc_ln13_fu_344_p0(5 - 1 downto 0);
    trunc_ln15_fu_531_p1 <= o_count_1_reg_235(5 - 1 downto 0);
    trunc_ln43_fu_647_p1 <= o_count_5_reg_331(5 - 1 downto 0);
    zext_ln13_10_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_9_fu_510_p2),14));
    zext_ln13_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln5_fu_380_p1),14));
    zext_ln13_5_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_1_reg_717),16));
    zext_ln13_6_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_2_fu_441_p2),14));
    zext_ln13_7_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_3_fu_451_p2),14));
    zext_ln13_8_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln13_fu_460_p2),10));
    zext_ln13_9_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_4_fu_469_p2),14));
    zext_ln13_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln13_reg_712),14));
    zext_ln19_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_235),64));
    zext_ln29_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_300),64));
    zext_ln29_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_311),64));
    zext_ln38_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_4_reg_321),64));
    zext_ln47_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_331),64));
end behav;
