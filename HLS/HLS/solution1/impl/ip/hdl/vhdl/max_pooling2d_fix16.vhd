-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of max_pooling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln26_fu_225_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln26_reg_468 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln26_1_cast_fu_229_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln26_1_cast_reg_473 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln32_fu_233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_reg_478 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln32_1_cast_fu_237_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln32_1_cast_reg_483 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_241_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_488 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_44_fu_245_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_44_reg_493 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_45_fu_249_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_45_reg_498 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_mul5_fu_253_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul5_reg_503 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_258_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_508 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_fu_268_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_516 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_524 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln26_2_fu_297_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln26_2_reg_529 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln19_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_311_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_reg_534 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_w_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_542 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_3_fu_327_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_3_reg_547 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln20_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_4_fu_339_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln26_4_reg_552 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln22_fu_343_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln22_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal in_h_fu_353_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_h_reg_565 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_378_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_reg_570 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln22_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_fu_392_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_w_fu_402_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_reg_583 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln24_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_0_reg_130 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_141 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul4_reg_153 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln18_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_0_reg_176 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_h_0_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_0_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln32_1_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_6_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_01_fu_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_5_fu_449_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln9_fu_213_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln9_1_fu_217_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln9_2_fu_221_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln9_1_fu_217_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln9_fu_213_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_241_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_44_fu_245_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_289_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_301_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_311_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln26_1_fu_331_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_5_cast_fu_359_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_363_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_369_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_378_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_378_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_fu_383_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_5_fu_408_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln26_fu_412_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln26_3_fu_417_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln27_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln27_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_1_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_378_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_311_p10 : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_h_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_396_p2 = ap_const_lv1_1))) then 
                in_h_0_reg_187 <= in_h_reg_565;
            elsif (((icmp_ln20_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                in_h_0_reg_187 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    in_w_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_w_0_reg_198 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                in_w_0_reg_198 <= in_w_reg_583;
            end if; 
        end if;
    end process;

    out_d_0_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_0_reg_130 <= out_d_reg_516;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_130 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_0_reg_165 <= ap_const_lv4_0;
            elsif (((icmp_ln20_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_h_0_reg_165 <= out_h_reg_524;
            end if; 
        end if;
    end process;

    out_w_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_0_reg_176 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln22_fu_347_p2 = ap_const_lv1_1))) then 
                out_w_0_reg_176 <= out_w_reg_542;
            end if; 
        end if;
    end process;

    phi_mul4_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul4_reg_153 <= next_mul5_reg_503;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul4_reg_153 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_141 <= next_mul_reg_508;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_141 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                buffer_01_fu_70 <= buffer_5_fu_449_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_44_reg_493 <= empty_44_fu_245_p1;
                empty_45_reg_498 <= empty_45_fu_249_p1;
                empty_reg_488 <= empty_fu_241_p1;
                    zext_ln26_1_cast_reg_473(6 downto 0) <= zext_ln26_1_cast_fu_229_p1(6 downto 0);
                    zext_ln26_reg_468(6 downto 0) <= zext_ln26_fu_225_p1(6 downto 0);
                    zext_ln32_1_cast_reg_483(5 downto 0) <= zext_ln32_1_cast_fu_237_p1(5 downto 0);
                    zext_ln32_reg_478(5 downto 0) <= zext_ln32_fu_233_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                in_h_reg_565 <= in_h_fu_353_p2;
                trunc_ln22_reg_557 <= trunc_ln22_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_w_reg_583 <= in_w_fu_402_p2;
                trunc_ln24_reg_575 <= trunc_ln24_fu_392_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul5_reg_503 <= next_mul5_fu_253_p2;
                next_mul_reg_508 <= next_mul_fu_258_p2;
                out_d_reg_516 <= out_d_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_reg_524 <= out_h_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_reg_542 <= out_w_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp1_reg_570 <= tmp1_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_274_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp3_reg_534 <= tmp3_fu_311_p2;
                    zext_ln26_2_reg_529(4 downto 1) <= zext_ln26_2_fu_297_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln26_3_reg_547(3 downto 0) <= zext_ln26_3_fu_327_p1(3 downto 0);
                    zext_ln26_4_reg_552(4 downto 1) <= zext_ln26_4_fu_339_p1(4 downto 1);
            end if;
        end if;
    end process;
    zext_ln26_reg_468(8 downto 7) <= "00";
    zext_ln26_1_cast_reg_473(13 downto 7) <= "0000000";
    zext_ln32_reg_478(7 downto 6) <= "00";
    zext_ln32_1_cast_reg_483(11 downto 6) <= "000000";
    zext_ln26_2_reg_529(0) <= '0';
    zext_ln26_2_reg_529(8 downto 5) <= "0000";
    zext_ln26_3_reg_547(11 downto 4) <= "00000000";
    zext_ln26_4_reg_552(0) <= '0';
    zext_ln26_4_reg_552(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln19_fu_274_p2, ap_CS_fsm_state4, icmp_ln20_fu_316_p2, ap_CS_fsm_state5, icmp_ln22_fu_347_p2, ap_CS_fsm_state6, icmp_ln24_fu_396_p2, icmp_ln18_fu_263_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln19_fu_274_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln20_fu_316_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln22_fu_347_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_396_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln26_3_fu_417_p2 <= std_logic_vector(unsigned(add_ln26_fu_412_p2) + unsigned(zext_ln26_4_reg_552));
    add_ln26_fu_412_p2 <= std_logic_vector(unsigned(tmp1_reg_570) + unsigned(zext_ln26_5_fu_408_p1));
    add_ln32_fu_383_p2 <= std_logic_vector(unsigned(tmp3_reg_534) + unsigned(zext_ln26_3_reg_547));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_263_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_263_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_263_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln18_fu_263_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_fu_449_p3 <= 
        input_r_q0 when (or_ln27_1_fu_443_p2(0) = '1') else 
        buffer_01_fu_70;
    empty_44_fu_245_p0 <= output_height;
    empty_44_fu_245_p1 <= empty_44_fu_245_p0(4 - 1 downto 0);
    empty_45_fu_249_p1 <= output_depth(5 - 1 downto 0);
    empty_fu_241_p0 <= output_width;
    empty_fu_241_p1 <= empty_fu_241_p0(4 - 1 downto 0);
    icmp_ln18_fu_263_p2 <= "1" when (out_d_0_reg_130 = empty_45_reg_498) else "0";
    icmp_ln19_fu_274_p2 <= "1" when (out_h_0_reg_165 = empty_44_reg_493) else "0";
    icmp_ln20_fu_316_p2 <= "1" when (out_w_0_reg_176 = empty_reg_488) else "0";
    icmp_ln22_fu_347_p2 <= "1" when (in_h_0_reg_187 = ap_const_lv2_2) else "0";
    icmp_ln24_fu_396_p2 <= "1" when (in_w_0_reg_198 = ap_const_lv2_2) else "0";
    icmp_ln27_fu_437_p2 <= "1" when (signed(buffer_01_fu_70) < signed(input_r_q0)) else "0";
    in_h_fu_353_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_h_0_reg_187));
    in_w_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_w_0_reg_198));
    input_r_address0 <= zext_ln26_6_fu_422_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul5_fu_253_p2 <= std_logic_vector(unsigned(phi_mul4_reg_153) + unsigned(zext_ln32_reg_478));
    next_mul_fu_258_p2 <= std_logic_vector(unsigned(phi_mul_reg_141) + unsigned(zext_ln26_reg_468));
    or_ln27_1_fu_443_p2 <= (xor_ln27_fu_431_p2 or icmp_ln27_fu_437_p2);
    or_ln27_fu_427_p2 <= (trunc_ln24_reg_575 or trunc_ln22_reg_557);
    out_d_fu_268_p2 <= std_logic_vector(unsigned(out_d_0_reg_130) + unsigned(ap_const_lv5_1));
    out_h_fu_279_p2 <= std_logic_vector(unsigned(out_h_0_reg_165) + unsigned(ap_const_lv4_1));
    out_w_fu_321_p2 <= std_logic_vector(unsigned(out_w_0_reg_176) + unsigned(ap_const_lv4_1));
    output_r_address0 <= zext_ln32_1_fu_387_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer_01_fu_70;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln22_fu_347_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln22_fu_347_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln9_1_fu_217_p0 <= output_height;
        sext_ln9_1_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_1_fu_217_p0),6));

        sext_ln9_2_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    sext_ln9_fu_213_p0 <= output_width;
        sext_ln9_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_fu_213_p0),6));

    shl_ln26_1_fu_331_p3 <= (out_w_0_reg_176 & ap_const_lv1_0);
    shl_ln_fu_289_p3 <= (out_h_0_reg_165 & ap_const_lv1_0);
    tmp1_fu_378_p0 <= tmp1_fu_378_p00(9 - 1 downto 0);
    tmp1_fu_378_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_369_p2),14));
    tmp1_fu_378_p1 <= zext_ln26_1_cast_reg_473(7 - 1 downto 0);
    tmp1_fu_378_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_378_p0) * unsigned(tmp1_fu_378_p1), 14));
    tmp2_fu_301_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_285_p1) + unsigned(phi_mul4_reg_153));
    tmp3_fu_311_p0 <= zext_ln32_1_cast_reg_483(6 - 1 downto 0);
    tmp3_fu_311_p1 <= tmp3_fu_311_p10(8 - 1 downto 0);
    tmp3_fu_311_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_301_p2),12));
    tmp3_fu_311_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_311_p0) * unsigned(tmp3_fu_311_p1), 12));
    tmp4_fu_363_p2 <= std_logic_vector(unsigned(phi_mul_reg_141) + unsigned(zext_ln26_5_cast_fu_359_p1));
    tmp_fu_369_p2 <= std_logic_vector(unsigned(tmp4_fu_363_p2) + unsigned(zext_ln26_2_reg_529));
    trunc_ln22_fu_343_p1 <= in_h_0_reg_187(1 - 1 downto 0);
    trunc_ln24_fu_392_p1 <= in_w_0_reg_198(1 - 1 downto 0);
    xor_ln27_fu_431_p2 <= (or_ln27_fu_427_p2 xor ap_const_lv1_1);
    zext_ln26_1_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln9_2_fu_221_p1),14));
    zext_ln26_1_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_0_reg_165),8));
    zext_ln26_2_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_289_p3),9));
    zext_ln26_3_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_176),12));
    zext_ln26_4_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln26_1_fu_331_p3),14));
    zext_ln26_5_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_h_0_reg_187),9));
    zext_ln26_5_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_0_reg_198),14));
    zext_ln26_6_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_417_p2),64));
    zext_ln26_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    zext_ln32_1_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln9_fu_213_p1),12));
    zext_ln32_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_383_p2),64));
    zext_ln32_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln9_1_fu_217_p1),8));
end behav;
