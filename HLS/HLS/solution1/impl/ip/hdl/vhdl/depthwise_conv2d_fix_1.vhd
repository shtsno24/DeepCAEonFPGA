-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel1_ce0 : OUT STD_LOGIC;
    kernel1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel2_ce0 : OUT STD_LOGIC;
    kernel2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten39_reg_254 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_d_0_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_278 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_312 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal icmp_ln21_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1024_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln21_reg_1024_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_317 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_fu_322_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_reg_969 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_2_cast14_fu_326_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln34_2_cast14_reg_975 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_fu_330_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_reg_982 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_1_cast_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_cast_reg_988 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_338_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_993 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln5_fu_354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln5_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_360_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_reg_1003 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln23_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1008 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln40_2_fu_374_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_2_reg_1013 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln34_fu_378_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln34_reg_1018 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1024_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_388_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1028 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln22_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_1034 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_2_fu_399_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln22_2_reg_1047 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_4_cast_fu_405_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_4_cast_reg_1052 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_fu_409_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_reg_1058 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_9_fu_416_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_9_reg_1064 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_9_reg_1064_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_9_reg_1064_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_4_fu_422_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_4_reg_1070 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln34_18_fu_425_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln34_18_reg_1075 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln28_fu_430_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln28_reg_1081 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln28_reg_1081_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln23_2_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_2_reg_1089 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln40_fu_439_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_reg_1094 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_14_fu_443_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_14_reg_1100 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_448_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_1108 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_0_0_fu_453_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_reg_1114 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_fu_457_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_reg_1119 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln21_fu_461_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln21_reg_1124 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln40_2_fu_472_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_2_reg_1129 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_w_0_mid2_fu_480_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_reg_1135 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_4_cast_mid_fu_488_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln34_4_cast_mid_reg_1142 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_mid1_fu_491_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_mid1_reg_1147 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln22_fu_497_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln22_reg_1152 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp5_0_0_mid2_v_v_fu_512_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_mid2_v_v_reg_1157 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_mid1_fu_518_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_mid1_reg_1164 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln22_2_fu_523_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln22_2_reg_1169 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_0_0_mid2_fu_537_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_0_0_mid2_reg_1174 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_2_0_mid2_v_v_fu_542_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_2_0_mid2_v_v_reg_1181 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_mid2_v_v_fu_547_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_mid2_v_v_reg_1186 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_w_fu_553_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_1191 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_558_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_reg_1197 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln28_fu_563_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal xor_ln28_reg_1202 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_6_fu_568_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_6_reg_1207 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp5_1_0_mid2_v_v_fu_573_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_1_0_mid2_v_v_reg_1212 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_2_0_mid2_fu_581_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_2_0_mid2_reg_1217 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln34_21_fu_586_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln34_21_reg_1224 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_fu_589_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_reg_1231 : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_load_reg_1236 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel1_load_reg_1244 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel2_load_reg_1252 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_23_fu_594_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln34_23_reg_1260 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_14_fu_597_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_14_reg_1266 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_1_0_mid2_fu_605_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_1_0_mid2_reg_1271 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_15_fu_634_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_15_reg_1288 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_20_fu_655_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_20_reg_1293 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_21_fu_659_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_21_reg_1298 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln34_25_fu_663_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln34_25_reg_1303 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_16_fu_666_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_16_reg_1308 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_22_fu_679_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_22_reg_1323 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_614_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1328 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_626_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_1333 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_639_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1343 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_17_fu_691_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_17_reg_1348 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_647_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1353 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln34_18_fu_695_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_18_reg_1358 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_19_fu_699_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_19_reg_1363 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_899_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_reg_1373 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_reg_1373_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln34_14_fu_711_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_14_reg_1378 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_9_fu_905_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_9_reg_1384 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_16_fu_718_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_16_reg_1389 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_10_fu_911_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_10_reg_1394 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_reg_1409 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_9_reg_1414 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_18_fu_747_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_18_reg_1419 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_20_fu_750_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln34_20_reg_1424 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_15_fu_917_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_15_reg_1434 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_16_fu_923_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_16_reg_1439 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_11_fu_929_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_11_reg_1449 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln40_3_reg_1454 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_4_reg_1459 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_17_fu_934_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_17_reg_1464 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_load_reg_1469 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_s_reg_1474 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_12_fu_939_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_12_reg_1479 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_13_fu_944_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_13_reg_1484 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln40_15_fu_826_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_15_reg_1489 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_1_reg_1494 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_14_fu_949_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln34_14_reg_1499 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln40_9_fu_853_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_9_reg_1504 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_11_fu_862_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_11_reg_1509 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_16_fu_881_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_16_reg_1514 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_17_fu_890_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_17_reg_1519 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten39_phi_fu_258_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_270_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_293_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_out_w_0_phi_fu_304_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln34_22_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln34_24_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_30_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln34_31_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_26_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln34_32_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_27_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_28_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_29_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_3_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_50_fu_342_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln5_fu_354_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln5_fu_354_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln34_fu_378_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln34_fu_378_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln34_18_fu_425_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln34_18_fu_425_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln40_fu_439_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln40_fu_439_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_2_fu_472_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln40_2_fu_472_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_52_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_10_fu_467_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_12_fu_507_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_11_fu_502_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_mid2_fu_537_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_0_mid2_fu_537_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_13_fu_529_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_2_0_mid2_fu_581_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_2_0_mid2_fu_581_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_1_0_mid2_fu_605_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_1_0_mid2_fu_605_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln40_5_fu_812_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_14_fu_821_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_8_fu_831_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_10_fu_857_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln40_2_fu_867_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_13_fu_876_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_12_fu_886_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_899_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_899_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_899_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln34_11_fu_929_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_17_fu_934_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_12_fu_939_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_13_fu_944_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln34_14_fu_949_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_899_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln34_18_fu_425_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln34_fu_378_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln5_fu_354_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln5_fu_354_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_0_0_mid2_fu_537_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_1_0_mid2_fu_605_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_2_0_mid2_fu_581_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mux_32_16_3_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mac_muladd_5ns_7ns_4ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mux_32_16_3_1_x_U77 : component network_mux_32_16_3_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_load_reg_1236,
        din1 => kernel1_load_reg_1244,
        din2 => kernel2_load_reg_1252,
        din3 => trunc_ln28_reg_1081_pp0_iter1_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_614_p5);

    network_mux_32_16_3_1_x_U78 : component network_mux_32_16_3_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_load_reg_1236,
        din1 => kernel1_load_reg_1244,
        din2 => kernel2_load_reg_1252,
        din3 => add_ln28_reg_1197,
        ce => ap_const_logic_1,
        dout => grp_fu_626_p5);

    network_mux_32_16_3_1_x_U79 : component network_mux_32_16_3_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_load_reg_1236,
        din1 => kernel1_load_reg_1244,
        din2 => kernel2_load_reg_1252,
        din3 => xor_ln28_reg_1202,
        ce => ap_const_logic_1,
        dout => grp_fu_639_p5);

    network_mux_32_16_3_1_x_U80 : component network_mux_32_16_3_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_load_reg_1236,
        din1 => kernel1_load_reg_1244,
        din2 => kernel2_load_reg_1252,
        din3 => add_ln28_6_reg_1207,
        ce => ap_const_logic_1,
        dout => grp_fu_647_p5);

    network_mac_muladd_5ns_7ns_4ns_11_1_1_U81 : component network_mac_muladd_5ns_7ns_4ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_899_p0,
        din1 => grp_fu_899_p1,
        din2 => grp_fu_899_p2,
        dout => grp_fu_899_p3);

    network_mul_mul_16s_16s_30_1_1_U82 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => tmp_9_reg_1328,
        dout => mul_ln34_9_fu_905_p2);

    network_mul_mul_16s_16s_30_1_1_U83 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_317,
        din1 => tmp_s_reg_1333,
        dout => mul_ln34_10_fu_911_p2);

    network_mul_mul_16s_16s_30_1_1_U84 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => tmp_4_reg_1343,
        dout => mul_ln34_15_fu_917_p2);

    network_mul_mul_16s_16s_30_1_1_U85 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_317,
        din1 => tmp_5_reg_1353,
        dout => mul_ln34_16_fu_923_p2);

    network_mul_mul_16s_16s_30_1_1_U86 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => mul_ln34_11_fu_929_p1,
        dout => mul_ln34_11_fu_929_p2);

    network_mul_mul_16s_16s_30_1_1_U87 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_317,
        din1 => mul_ln34_17_fu_934_p1,
        dout => mul_ln34_17_fu_934_p2);

    network_mul_mul_16s_16s_30_1_1_U88 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => mul_ln34_12_fu_939_p1,
        dout => mul_ln34_12_fu_939_p2);

    network_mul_mul_16s_16s_30_1_1_U89 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_317,
        din1 => mul_ln34_13_fu_944_p1,
        dout => mul_ln34_13_fu_944_p2);

    network_mul_mul_16s_16s_30_1_1_U90 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_312,
        din1 => mul_ln34_14_fu_949_p1,
        dout => mul_ln34_14_fu_949_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten39_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten39_reg_254 <= add_ln21_reg_1124;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten39_reg_254 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_278 <= select_ln22_2_reg_1169;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_278 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_266 <= select_ln28_9_reg_1064;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_266 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                out_h_0_reg_289 <= select_ln22_reg_1152;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_289 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                out_w_0_reg_300 <= out_w_reg_1191;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_300 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0)))) then 
                reg_312 <= input_r_q0;
            elsif ((((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0)) or ((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                reg_312 <= input_r_q1;
            end if; 
        end if;
    end process;

    reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0))) then 
                reg_317 <= input_r_q1;
            elsif ((((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0)) or ((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                reg_317 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln21_reg_1124 <= add_ln21_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_fu_383_p2 = ap_const_lv1_0))) then
                add_ln22_2_reg_1047 <= add_ln22_2_fu_399_p2;
                icmp_ln22_reg_1034 <= icmp_ln22_fu_394_p2;
                out_d_reg_1028 <= out_d_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln28_6_reg_1207 <= add_ln28_6_fu_568_p2;
                add_ln28_reg_1197 <= add_ln28_fu_558_p2;
                add_ln34_14_reg_1266 <= add_ln34_14_fu_597_p2;
                add_ln34_reg_1231 <= add_ln34_fu_589_p2;
                kernel1_load_reg_1244 <= kernel1_q0;
                kernel2_load_reg_1252 <= kernel2_q0;
                kernel_load_reg_1236 <= kernel_q0;
                tmp5_1_0_mid2_v_v_reg_1212 <= tmp5_1_0_mid2_v_v_fu_573_p2;
                tmp5_2_0_mid2_reg_1217 <= tmp5_2_0_mid2_fu_581_p2;
                xor_ln28_reg_1202 <= xor_ln28_fu_563_p2;
                    zext_ln34_21_reg_1224(3 downto 0) <= zext_ln34_21_fu_586_p1(3 downto 0);
                    zext_ln34_23_reg_1260(3 downto 0) <= zext_ln34_23_fu_594_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln34_15_reg_1288 <= add_ln34_15_fu_634_p2;
                add_ln34_20_reg_1293 <= add_ln34_20_fu_655_p2;
                add_ln34_21_reg_1298 <= add_ln34_21_fu_659_p2;
                tmp5_1_0_mid2_reg_1271 <= tmp5_1_0_mid2_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln34_16_reg_1308 <= add_ln34_16_fu_666_p2;
                add_ln34_22_reg_1323 <= add_ln34_22_fu_679_p2;
                    zext_ln34_25_reg_1303(3 downto 0) <= zext_ln34_25_fu_663_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln34_17_reg_1348 <= add_ln34_17_fu_691_p2;
                add_ln34_18_reg_1358 <= add_ln34_18_fu_695_p2;
                add_ln34_19_reg_1363 <= add_ln34_19_fu_699_p2;
                tmp_4_reg_1343 <= grp_fu_639_p5;
                tmp_5_reg_1353 <= grp_fu_647_p5;
                tmp_9_reg_1328 <= grp_fu_614_p5;
                tmp_s_reg_1333 <= grp_fu_626_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln40_11_reg_1509 <= add_ln40_11_fu_862_p2;
                add_ln40_9_reg_1504 <= add_ln40_9_fu_853_p2;
                mul_ln34_14_reg_1499 <= mul_ln34_14_fu_949_p2;
                trunc_ln40_1_reg_1494 <= mul_ln34_13_reg_1484(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln40_15_reg_1489 <= add_ln40_15_fu_826_p2;
                bias_load_reg_1469 <= bias_q0;
                mul_ln34_12_reg_1479 <= mul_ln34_12_fu_939_p2;
                mul_ln34_13_reg_1484 <= mul_ln34_13_fu_944_p2;
                trunc_ln40_s_reg_1474 <= mul_ln34_11_reg_1449(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln40_16_reg_1514 <= add_ln40_16_fu_881_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln21_reg_1024_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln40_17_reg_1519 <= add_ln40_17_fu_890_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln40_reg_1373 <= grp_fu_899_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln40_reg_1373_pp0_iter2_reg <= add_ln40_reg_1373;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_993 <= empty_fu_338_p1;
                icmp_ln23_reg_1008 <= icmp_ln23_fu_368_p2;
                mul_ln5_reg_998 <= mul_ln5_fu_354_p2;
                    tmp_6_reg_1003(10 downto 3) <= tmp_6_fu_360_p3(10 downto 3);
                    zext_ln34_2_cast14_reg_975(5 downto 0) <= zext_ln34_2_cast14_fu_326_p1(5 downto 0);
                    zext_ln34_reg_969(5 downto 0) <= zext_ln34_fu_322_p1(5 downto 0);
                    zext_ln40_1_cast_reg_988(4 downto 0) <= zext_ln40_1_cast_fu_334_p1(4 downto 0);
                    zext_ln40_reg_982(4 downto 0) <= zext_ln40_fu_330_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln21_reg_1024 <= icmp_ln21_fu_383_p2;
                icmp_ln21_reg_1024_pp0_iter1_reg <= icmp_ln21_reg_1024;
                icmp_ln21_reg_1024_pp0_iter2_reg <= icmp_ln21_reg_1024_pp0_iter1_reg;
                icmp_ln21_reg_1024_pp0_iter3_reg <= icmp_ln21_reg_1024_pp0_iter2_reg;
                mul_ln34_reg_1018 <= mul_ln34_fu_378_p2;
                    zext_ln40_2_reg_1013(3 downto 0) <= zext_ln40_2_fu_374_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln22_reg_1034 = ap_const_lv1_0))) then
                icmp_ln23_2_reg_1089 <= icmp_ln23_2_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln34_10_reg_1394 <= mul_ln34_10_fu_911_p2;
                mul_ln34_9_reg_1384 <= mul_ln34_9_fu_905_p2;
                sext_ln34_14_reg_1378 <= sext_ln34_14_fu_711_p1;
                sext_ln34_16_reg_1389 <= sext_ln34_16_fu_718_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0))) then
                mul_ln34_11_reg_1449 <= mul_ln34_11_fu_929_p2;
                mul_ln34_17_reg_1464 <= mul_ln34_17_fu_934_p2;
                trunc_ln40_3_reg_1454 <= mul_ln34_15_reg_1434(29 downto 14);
                trunc_ln40_4_reg_1459 <= mul_ln34_16_reg_1439(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln21_reg_1024_pp0_iter2_reg = ap_const_lv1_0))) then
                mul_ln34_15_reg_1434 <= mul_ln34_15_fu_917_p2;
                mul_ln34_16_reg_1439 <= mul_ln34_16_fu_923_p2;
                sext_ln34_18_reg_1419 <= sext_ln34_18_fu_747_p1;
                sext_ln34_20_reg_1424 <= sext_ln34_20_fu_750_p1;
                trunc_ln40_9_reg_1414 <= mul_ln34_10_reg_1394(29 downto 14);
                trunc_ln_reg_1409 <= mul_ln34_9_reg_1384(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                mul_ln34_18_reg_1075 <= mul_ln34_18_fu_425_p2;
                select_ln28_reg_1058 <= select_ln28_fu_409_p3;
                trunc_ln28_reg_1081 <= trunc_ln28_fu_430_p1;
                    zext_ln40_4_reg_1070(3 downto 0) <= zext_ln40_4_fu_422_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                mul_ln40_2_reg_1129 <= mul_ln40_2_fu_472_p2;
                out_w_0_mid2_reg_1135 <= out_w_0_mid2_fu_480_p3;
                    zext_ln34_4_cast_mid_reg_1142(3 downto 0) <= zext_ln34_4_cast_mid_fu_488_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul_ln40_reg_1094 <= mul_ln40_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                out_h_reg_1108 <= out_h_fu_448_p2;
                select_ln28_14_reg_1100 <= select_ln28_14_fu_443_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                out_w_reg_1191 <= out_w_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln22_2_reg_1169 <= select_ln22_2_fu_523_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                select_ln22_reg_1152 <= select_ln22_fu_497_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_9_reg_1064 <= select_ln28_9_fu_416_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_9_reg_1064_pp0_iter1_reg <= select_ln28_9_reg_1064;
                select_ln28_9_reg_1064_pp0_iter2_reg <= select_ln28_9_reg_1064_pp0_iter1_reg;
                trunc_ln28_reg_1081_pp0_iter1_reg <= trunc_ln28_reg_1081;
                    zext_ln34_4_cast_reg_1052(3 downto 0) <= zext_ln34_4_cast_fu_405_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp5_0_0_mid2_reg_1174 <= tmp5_0_0_mid2_fu_537_p2;
                tmp5_2_0_mid2_v_v_reg_1181 <= tmp5_2_0_mid2_v_v_fu_542_p2;
                tmp7_mid2_v_v_reg_1186 <= tmp7_mid2_v_v_fu_547_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp5_0_0_mid2_v_v_reg_1157 <= tmp5_0_0_mid2_v_v_fu_512_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (select_ln28_14_reg_1100 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp6_mid1_reg_1164 <= tmp6_mid1_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (select_ln28_14_reg_1100 = ap_const_lv1_0) and (icmp_ln22_reg_1034 = ap_const_lv1_0))) then
                tmp6_reg_1119 <= tmp6_fu_457_p2;
                tmp_0_0_reg_1114 <= tmp_0_0_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (select_ln28_14_reg_1100 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_0_0_mid1_reg_1147 <= tmp_0_0_mid1_fu_491_p2;
            end if;
        end if;
    end process;
    zext_ln34_reg_969(6) <= '0';
    zext_ln34_2_cast14_reg_975(10 downto 6) <= "00000";
    zext_ln40_reg_982(6 downto 5) <= "00";
    zext_ln40_1_cast_reg_988(10 downto 5) <= "000000";
    tmp_6_reg_1003(2 downto 0) <= "000";
    zext_ln40_2_reg_1013(6 downto 4) <= "000";
    zext_ln34_4_cast_reg_1052(6 downto 4) <= "000";
    zext_ln40_4_reg_1070(6 downto 4) <= "000";
    zext_ln34_4_cast_mid_reg_1142(6 downto 4) <= "000";
    zext_ln34_21_reg_1224(10 downto 4) <= "0000000";
    zext_ln34_23_reg_1260(10 downto 4) <= "0000000";
    zext_ln34_25_reg_1303(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1024, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((icmp_ln21_reg_1024 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((icmp_ln21_reg_1024 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln21_fu_461_p2 <= std_logic_vector(unsigned(indvar_flatten39_reg_254) + unsigned(ap_const_lv11_1));
    add_ln22_2_fu_399_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_282_p4));
    add_ln28_6_fu_568_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln28_reg_1081));
    add_ln28_fu_558_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln28_reg_1081));
    add_ln34_14_fu_597_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1174) + unsigned(zext_ln34_23_fu_594_p1));
    add_ln34_15_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(out_w_0_mid2_reg_1135));
    add_ln34_16_fu_666_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1174) + unsigned(zext_ln34_25_fu_663_p1));
    add_ln34_17_fu_691_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1271) + unsigned(zext_ln34_21_reg_1224));
    add_ln34_18_fu_695_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1271) + unsigned(zext_ln34_23_reg_1260));
    add_ln34_19_fu_699_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1271) + unsigned(zext_ln34_25_reg_1303));
    add_ln34_20_fu_655_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1217) + unsigned(zext_ln34_21_reg_1224));
    add_ln34_21_fu_659_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1217) + unsigned(zext_ln34_23_reg_1260));
    add_ln34_22_fu_679_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1217) + unsigned(zext_ln34_25_fu_663_p1));
    add_ln34_fu_589_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1174) + unsigned(zext_ln34_21_fu_586_p1));
    add_ln40_10_fu_857_p2 <= std_logic_vector(unsigned(trunc_ln40_s_reg_1474) + unsigned(trunc_ln40_8_fu_831_p4));
    add_ln40_11_fu_862_p2 <= std_logic_vector(unsigned(add_ln40_10_fu_857_p2) + unsigned(trunc_ln40_9_reg_1414));
    add_ln40_12_fu_886_p2 <= std_logic_vector(unsigned(add_ln40_11_reg_1509) + unsigned(add_ln40_9_reg_1504));
    add_ln40_13_fu_876_p2 <= std_logic_vector(unsigned(trunc_ln40_1_reg_1494) + unsigned(trunc_ln40_2_fu_867_p4));
    add_ln40_14_fu_821_p2 <= std_logic_vector(unsigned(trunc_ln40_4_reg_1459) + unsigned(trunc_ln40_5_fu_812_p4));
    add_ln40_15_fu_826_p2 <= std_logic_vector(unsigned(add_ln40_14_fu_821_p2) + unsigned(trunc_ln40_3_reg_1454));
    add_ln40_16_fu_881_p2 <= std_logic_vector(unsigned(add_ln40_15_reg_1489) + unsigned(add_ln40_13_fu_876_p2));
    add_ln40_17_fu_890_p2 <= std_logic_vector(unsigned(add_ln40_16_reg_1514) + unsigned(add_ln40_12_fu_886_p2));
    add_ln40_9_fu_853_p2 <= std_logic_vector(unsigned(bias_load_reg_1469) + unsigned(trunc_ln_reg_1409));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln21_reg_1024)
    begin
        if ((icmp_ln21_reg_1024 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten39_phi_fu_258_p4_assign_proc : process(indvar_flatten39_reg_254, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1024, ap_CS_fsm_pp0_stage0, add_ln21_reg_1124, ap_block_pp0_stage0)
    begin
        if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten39_phi_fu_258_p4 <= add_ln21_reg_1124;
        else 
            ap_phi_mux_indvar_flatten39_phi_fu_258_p4 <= indvar_flatten39_reg_254;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_282_p4_assign_proc : process(indvar_flatten_reg_278, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1024, ap_CS_fsm_pp0_stage0, select_ln22_2_reg_1169, ap_block_pp0_stage0)
    begin
        if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_282_p4 <= select_ln22_2_reg_1169;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_282_p4 <= indvar_flatten_reg_278;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_270_p4_assign_proc : process(out_d_0_reg_266, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1024, ap_CS_fsm_pp0_stage0, select_ln28_9_reg_1064, ap_block_pp0_stage0)
    begin
        if (((icmp_ln21_reg_1024 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_270_p4 <= select_ln28_9_reg_1064;
        else 
            ap_phi_mux_out_d_0_phi_fu_270_p4 <= out_d_0_reg_266;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_293_p4_assign_proc : process(out_h_0_reg_289, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1024_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln22_reg_1152, ap_block_pp0_stage1)
    begin
        if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_out_h_0_phi_fu_293_p4 <= select_ln22_reg_1152;
        else 
            ap_phi_mux_out_h_0_phi_fu_293_p4 <= out_h_0_reg_289;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_304_p4_assign_proc : process(out_w_0_reg_300, ap_enable_reg_pp0_iter1, icmp_ln21_reg_1024_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, out_w_reg_1191, ap_block_pp0_stage1)
    begin
        if (((icmp_ln21_reg_1024_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_out_w_0_phi_fu_304_p4 <= out_w_reg_1191;
        else 
            ap_phi_mux_out_w_0_phi_fu_304_p4 <= out_w_0_reg_300;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln28_fu_765_p1(3 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_50_fu_342_p1 <= output_height(4 - 1 downto 0);
    empty_52_fu_476_p2 <= (select_ln28_14_reg_1100 or icmp_ln22_reg_1034);
    empty_fu_338_p1 <= output_width(4 - 1 downto 0);
    grp_fu_899_p0 <= zext_ln40_1_cast_reg_988(5 - 1 downto 0);
    grp_fu_899_p1 <= grp_fu_899_p10(7 - 1 downto 0);
    grp_fu_899_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_mid2_v_v_reg_1186),11));
    grp_fu_899_p2 <= zext_ln34_21_reg_1224(4 - 1 downto 0);
    icmp_ln21_fu_383_p2 <= "1" when (ap_phi_mux_indvar_flatten39_phi_fu_258_p4 = tmp_6_reg_1003) else "0";
    icmp_ln22_fu_394_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_282_p4 = mul_ln5_reg_998) else "0";
    icmp_ln23_2_fu_434_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_304_p4 = empty_reg_993) else "0";
    icmp_ln23_fu_368_p2 <= "1" when (empty_fu_338_p1 = ap_const_lv4_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln34_24_fu_622_p1, ap_block_pp0_stage3, zext_ln34_31_fu_675_p1, ap_block_pp0_stage4, zext_ln34_32_fu_703_p1, zext_ln34_27_fu_721_p1, zext_ln34_29_fu_753_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln34_29_fu_753_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln34_27_fu_721_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln34_32_fu_703_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln34_31_fu_675_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln34_24_fu_622_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, zext_ln34_22_fu_610_p1, ap_block_pp0_stage2, zext_ln34_30_fu_671_p1, ap_block_pp0_stage3, zext_ln34_26_fu_687_p1, ap_block_pp0_stage4, zext_ln34_28_fu_725_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address1 <= zext_ln34_28_fu_725_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address1 <= zext_ln34_26_fu_687_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address1 <= zext_ln34_30_fu_671_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address1 <= zext_ln34_22_fu_610_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    kernel1_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel1_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel1_ce0 <= ap_const_logic_1;
        else 
            kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel2_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel2_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel2_ce0 <= ap_const_logic_1;
        else 
            kernel2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln34_11_fu_929_p1 <= sext_ln34_18_reg_1419(16 - 1 downto 0);
    mul_ln34_12_fu_939_p1 <= sext_ln34_20_reg_1424(16 - 1 downto 0);
    mul_ln34_13_fu_944_p1 <= sext_ln34_14_reg_1378(16 - 1 downto 0);
    mul_ln34_14_fu_949_p1 <= sext_ln34_16_reg_1389(16 - 1 downto 0);
    mul_ln34_17_fu_934_p1 <= sext_ln34_14_reg_1378(16 - 1 downto 0);
    mul_ln34_18_fu_425_p0 <= zext_ln34_reg_969(6 - 1 downto 0);
    mul_ln34_18_fu_425_p1 <= mul_ln34_18_fu_425_p10(4 - 1 downto 0);
    mul_ln34_18_fu_425_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_1028),7));
    mul_ln34_18_fu_425_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln34_18_fu_425_p0) * unsigned(mul_ln34_18_fu_425_p1), 7));
    mul_ln34_fu_378_p0 <= mul_ln34_fu_378_p00(4 - 1 downto 0);
    mul_ln34_fu_378_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4),7));
    mul_ln34_fu_378_p1 <= zext_ln34_reg_969(6 - 1 downto 0);
    mul_ln34_fu_378_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln34_fu_378_p0) * unsigned(mul_ln34_fu_378_p1), 7));
    mul_ln40_2_fu_472_p0 <= zext_ln40_reg_982(5 - 1 downto 0);
    mul_ln40_2_fu_472_p1 <= zext_ln40_4_reg_1070(4 - 1 downto 0);
    mul_ln40_2_fu_472_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_2_fu_472_p0) * unsigned(mul_ln40_2_fu_472_p1), 7));
    mul_ln40_fu_439_p0 <= zext_ln40_2_reg_1013(4 - 1 downto 0);
    mul_ln40_fu_439_p1 <= zext_ln40_reg_982(5 - 1 downto 0);
    mul_ln40_fu_439_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_fu_439_p0) * unsigned(mul_ln40_fu_439_p1), 7));
    mul_ln5_fu_354_p0 <= mul_ln5_fu_354_p00(4 - 1 downto 0);
    mul_ln5_fu_354_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_50_fu_342_p1),8));
    mul_ln5_fu_354_p1 <= mul_ln5_fu_354_p10(4 - 1 downto 0);
    mul_ln5_fu_354_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_338_p1),8));
    mul_ln5_fu_354_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln5_fu_354_p0) * unsigned(mul_ln5_fu_354_p1), 8));
    out_d_fu_388_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4));
    out_h_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln28_reg_1058));
    out_w_0_mid2_fu_480_p3 <= 
        ap_const_lv4_0 when (empty_52_fu_476_p2(0) = '1') else 
        out_w_0_reg_300;
    out_w_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(out_w_0_mid2_reg_1135));
    output_r_address0 <= zext_ln40_3_fu_895_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln40_17_reg_1519;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln21_reg_1024_pp0_iter3_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_1024_pp0_iter3_reg = ap_const_lv1_0))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln22_2_fu_523_p3 <= 
        ap_const_lv8_1 when (icmp_ln22_reg_1034(0) = '1') else 
        add_ln22_2_reg_1047;
    select_ln22_fu_497_p3 <= 
        out_h_reg_1108 when (select_ln28_14_reg_1100(0) = '1') else 
        select_ln28_reg_1058;
    select_ln28_10_fu_467_p3 <= 
        mul_ln34_18_reg_1075 when (icmp_ln22_reg_1034(0) = '1') else 
        mul_ln34_reg_1018;
    select_ln28_11_fu_502_p3 <= 
        mul_ln40_2_reg_1129 when (icmp_ln22_reg_1034(0) = '1') else 
        mul_ln40_reg_1094;
    select_ln28_12_fu_507_p3 <= 
        mul_ln34_18_reg_1075 when (icmp_ln22_reg_1034(0) = '1') else 
        tmp_0_0_reg_1114;
    select_ln28_13_fu_529_p3 <= 
        mul_ln40_2_reg_1129 when (icmp_ln22_reg_1034(0) = '1') else 
        tmp6_reg_1119;
    select_ln28_14_fu_443_p3 <= 
        icmp_ln23_reg_1008 when (icmp_ln22_reg_1034(0) = '1') else 
        icmp_ln23_2_reg_1089;
    select_ln28_9_fu_416_p3 <= 
        out_d_reg_1028 when (icmp_ln22_reg_1034(0) = '1') else 
        out_d_0_reg_266;
    select_ln28_fu_409_p3 <= 
        ap_const_lv4_0 when (icmp_ln22_reg_1034(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_293_p4;
        sext_ln34_14_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_1328),30));

        sext_ln34_16_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_1333),30));

        sext_ln34_18_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1343),30));

        sext_ln34_20_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1353),30));

    tmp5_0_0_mid2_fu_537_p0 <= zext_ln34_2_cast14_reg_975(6 - 1 downto 0);
    tmp5_0_0_mid2_fu_537_p1 <= tmp5_0_0_mid2_fu_537_p10(7 - 1 downto 0);
    tmp5_0_0_mid2_fu_537_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_mid2_v_v_reg_1157),11));
    tmp5_0_0_mid2_fu_537_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_mid2_fu_537_p0) * unsigned(tmp5_0_0_mid2_fu_537_p1), 11));
    tmp5_0_0_mid2_v_v_fu_512_p3 <= 
        tmp_0_0_mid1_reg_1147 when (select_ln28_14_reg_1100(0) = '1') else 
        select_ln28_12_fu_507_p3;
    tmp5_1_0_mid2_fu_605_p0 <= zext_ln34_2_cast14_reg_975(6 - 1 downto 0);
    tmp5_1_0_mid2_fu_605_p1 <= tmp5_1_0_mid2_fu_605_p10(7 - 1 downto 0);
    tmp5_1_0_mid2_fu_605_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_1_0_mid2_v_v_reg_1212),11));
    tmp5_1_0_mid2_fu_605_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_1_0_mid2_fu_605_p0) * unsigned(tmp5_1_0_mid2_fu_605_p1), 11));
    tmp5_1_0_mid2_v_v_fu_573_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp5_0_0_mid2_v_v_reg_1157));
    tmp5_2_0_mid2_fu_581_p0 <= zext_ln34_2_cast14_reg_975(6 - 1 downto 0);
    tmp5_2_0_mid2_fu_581_p1 <= tmp5_2_0_mid2_fu_581_p10(7 - 1 downto 0);
    tmp5_2_0_mid2_fu_581_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_2_0_mid2_v_v_reg_1181),11));
    tmp5_2_0_mid2_fu_581_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_2_0_mid2_fu_581_p0) * unsigned(tmp5_2_0_mid2_fu_581_p1), 11));
    tmp5_2_0_mid2_v_v_fu_542_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(tmp5_0_0_mid2_v_v_reg_1157));
    tmp6_fu_457_p2 <= std_logic_vector(unsigned(mul_ln40_reg_1094) + unsigned(zext_ln34_4_cast_reg_1052));
    tmp6_mid1_fu_518_p2 <= std_logic_vector(unsigned(zext_ln34_4_cast_mid_reg_1142) + unsigned(select_ln28_11_fu_502_p3));
    tmp7_mid2_v_v_fu_547_p3 <= 
        tmp6_mid1_reg_1164 when (select_ln28_14_reg_1100(0) = '1') else 
        select_ln28_13_fu_529_p3;
    tmp_0_0_fu_453_p2 <= std_logic_vector(unsigned(mul_ln34_reg_1018) + unsigned(zext_ln34_4_cast_reg_1052));
    tmp_0_0_mid1_fu_491_p2 <= std_logic_vector(unsigned(zext_ln34_4_cast_mid_fu_488_p1) + unsigned(select_ln28_10_fu_467_p3));
    tmp_6_fu_360_p3 <= (mul_ln5_fu_354_p2 & ap_const_lv3_0);
    trunc_ln28_fu_430_p1 <= select_ln28_9_fu_416_p3(2 - 1 downto 0);
    trunc_ln40_2_fu_867_p4 <= mul_ln34_14_reg_1499(29 downto 14);
    trunc_ln40_5_fu_812_p4 <= mul_ln34_17_reg_1464(29 downto 14);
    trunc_ln40_8_fu_831_p4 <= mul_ln34_12_reg_1479(29 downto 14);
    xor_ln28_fu_563_p2 <= (trunc_ln28_reg_1081 xor ap_const_lv2_2);
    zext_ln28_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_9_reg_1064_pp0_iter2_reg),64));
    zext_ln34_21_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1135),11));
    zext_ln34_22_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_reg_1231),64));
    zext_ln34_23_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_1191),11));
    zext_ln34_24_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_14_reg_1266),64));
    zext_ln34_25_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_15_reg_1288),11));
    zext_ln34_26_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_16_reg_1308),64));
    zext_ln34_27_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_17_reg_1348),64));
    zext_ln34_28_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_18_reg_1358),64));
    zext_ln34_29_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_19_reg_1363),64));
    zext_ln34_2_cast14_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln34_30_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_20_reg_1293),64));
    zext_ln34_31_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_21_reg_1298),64));
    zext_ln34_32_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_22_reg_1323),64));
    zext_ln34_4_cast_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_293_p4),7));
    zext_ln34_4_cast_mid_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_1108),7));
    zext_ln34_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln40_1_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln40_2_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4),7));
    zext_ln40_3_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_reg_1373_pp0_iter2_reg),64));
    zext_ln40_4_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_1028),7));
    zext_ln40_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
end behav;
