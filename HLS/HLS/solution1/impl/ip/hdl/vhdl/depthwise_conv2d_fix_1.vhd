-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel1_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel1_ce0 : OUT STD_LOGIC;
    kernel1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    kernel2_ce0 : OUT STD_LOGIC;
    kernel2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten39_reg_254 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_d_0_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_278 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_300 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln22_reg_1071 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln22_reg_1071_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_316 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_fu_321_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln35_reg_1017 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln35_1_cast14_fu_325_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_1_cast14_reg_1023 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_fu_329_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln41_reg_1030 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln41_1_cast_fu_333_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln41_1_cast_reg_1036 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_337_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1041 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln5_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln5_reg_1046 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_359_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_reg_1051 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln41_2_fu_373_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln41_2_reg_1061 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln35_3_cast_fu_382_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln35_3_cast_reg_1066 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln22_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_397_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1075 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln23_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_408_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_reg_1088 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln41_4_fu_416_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln41_4_reg_1093 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln29_24_fu_446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_24_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_453_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_1104 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_fu_465_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_reg_1109 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_3_cast_mid_fu_473_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln35_3_cast_mid_reg_1116 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_mid2_v_v_fu_483_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_mid2_v_v_reg_1121 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_6_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_6_reg_1128 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_0_0_mid2_fu_500_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_0_0_mid2_reg_1133 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_1_0_mid2_fu_514_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_1_0_mid2_reg_1138 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_13_fu_519_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_13_reg_1145 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_13_reg_1145_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal kernel_load_reg_1157 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel1_load_reg_1165 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel2_load_reg_1173 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_fu_533_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_1181 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_15_fu_538_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_15_reg_1186 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln41_fu_553_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln41_reg_1197 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_fu_557_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_reg_1202 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_fu_562_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln22_reg_1207 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_19_fu_568_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_19_reg_1212 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln29_fu_574_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln29_reg_1218 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln29_fu_578_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln29_reg_1225 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp5_2_0_mid2_fu_593_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_2_0_mid2_reg_1230 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_17_fu_603_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_17_reg_1237 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_mid2_v_v_fu_657_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_mid2_v_v_reg_1253 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln35_13_fu_676_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln35_13_reg_1258 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_reg_1264 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_15_fu_701_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln35_15_reg_1269 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln41_9_reg_1274 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_714_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1279 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_723_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1284 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln23_fu_750_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_reg_1299 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln35_17_fu_759_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln35_17_reg_1304 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln41_s_reg_1309 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_19_fu_775_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln35_19_reg_1314 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln41_8_reg_1319 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_20_fu_805_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_20_reg_1334 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln23_2_fu_809_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln23_2_reg_1339 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_1_reg_1349 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_2_reg_1354 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_11_fu_853_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_11_reg_1364 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_3_reg_1369 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_4_reg_1374 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_9_fu_884_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_9_reg_1379 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln41_5_reg_1384 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_990_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_reg_1389 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln41_16_fu_918_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_16_reg_1394 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten39_phi_fu_258_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_270_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_293_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_304_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_14_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln35_16_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_18_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln35_19_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_20_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln35_21_fu_745_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_22_fu_791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln35_23_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_24_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_3_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_50_fu_341_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln5_fu_353_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln5_fu_353_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln35_fu_377_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln35_fu_377_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln35_fu_377_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln35_18_fu_420_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln35_18_fu_420_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln35_18_fu_420_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_fu_386_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln24_5_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_52_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_20_fu_425_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_mid1_fu_477_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln29_22_fu_433_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_0_mid2_fu_500_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_0_mid2_fu_500_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_1_0_mid2_v_v_fu_505_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_1_0_mid2_fu_514_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_1_0_mid2_fu_514_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_522_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_12_fu_542_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln41_fu_553_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln41_fu_553_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_2_0_mid2_v_v_fu_584_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_2_0_mid2_fu_593_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_2_0_mid2_fu_593_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_13_fu_598_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln35_14_fu_607_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_15_fu_617_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln41_2_fu_626_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln41_2_fu_626_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln41_2_fu_626_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln29_21_fu_630_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_mid1_fu_652_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln29_23_fu_646_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_668_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_9_fu_938_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_693_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_10_fu_945_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_714_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_723_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln35_16_fu_732_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_17_fu_741_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln35_11_fu_952_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln35_12_fu_959_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln35_18_fu_787_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln35_19_fu_796_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln35_13_fu_966_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln35_14_fu_972_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln41_10_fu_849_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_15_fu_978_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln35_16_fu_984_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln35_17_fu_996_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln41_14_fu_909_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_15_fu_913_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_13_fu_905_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_12_fu_924_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_13_fu_966_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_14_fu_972_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_15_fu_978_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln35_16_fu_984_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_990_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_990_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_990_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln35_17_fu_996_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_990_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln35_18_fu_420_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln35_fu_377_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln5_fu_353_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln5_fu_353_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp5_0_0_mid2_fu_500_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_1_0_mid2_fu_514_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_2_0_mid2_fu_593_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mux_32_16_1_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component network_mac_muladd_5ns_7ns_4ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    network_mux_32_16_1_1_x_U75 : component network_mux_32_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1157,
        din1 => kernel1_load_reg_1165,
        din2 => kernel2_load_reg_1173,
        din3 => trunc_ln29_reg_1218,
        dout => tmp_9_fu_668_p5);

    network_mux_32_16_1_1_x_U76 : component network_mux_32_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1157,
        din1 => kernel1_load_reg_1165,
        din2 => kernel2_load_reg_1173,
        din3 => add_ln29_reg_1225,
        dout => tmp_s_fu_693_p5);

    network_mux_32_16_1_1_x_U77 : component network_mux_32_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1157,
        din1 => kernel1_load_reg_1165,
        din2 => kernel2_load_reg_1173,
        din3 => tmp_4_fu_714_p4,
        dout => tmp_4_fu_714_p5);

    network_mux_32_16_1_1_x_U78 : component network_mux_32_16_1_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => kernel_load_reg_1157,
        din1 => kernel1_load_reg_1165,
        din2 => kernel2_load_reg_1173,
        din3 => tmp_5_fu_723_p4,
        dout => tmp_5_fu_723_p5);

    network_mul_mul_16s_16s_30_1_1_U79 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => tmp_9_fu_668_p5,
        dout => mul_ln35_9_fu_938_p2);

    network_mul_mul_16s_16s_30_1_1_U80 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_316,
        din1 => tmp_s_fu_693_p5,
        dout => mul_ln35_10_fu_945_p2);

    network_mul_mul_16s_16s_30_1_1_U81 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => tmp_4_reg_1279,
        dout => mul_ln35_11_fu_952_p2);

    network_mul_mul_16s_16s_30_1_1_U82 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_316,
        din1 => tmp_5_reg_1284,
        dout => mul_ln35_12_fu_959_p2);

    network_mul_mul_16s_16s_30_1_1_U83 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => mul_ln35_13_fu_966_p1,
        dout => mul_ln35_13_fu_966_p2);

    network_mul_mul_16s_16s_30_1_1_U84 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_316,
        din1 => mul_ln35_14_fu_972_p1,
        dout => mul_ln35_14_fu_972_p2);

    network_mul_mul_16s_16s_30_1_1_U85 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => mul_ln35_15_fu_978_p1,
        dout => mul_ln35_15_fu_978_p2);

    network_mul_mul_16s_16s_30_1_1_U86 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_316,
        din1 => mul_ln35_16_fu_984_p1,
        dout => mul_ln35_16_fu_984_p2);

    network_mac_muladd_5ns_7ns_4ns_11_1_1_U87 : component network_mac_muladd_5ns_7ns_4ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_990_p0,
        din1 => grp_fu_990_p1,
        din2 => grp_fu_990_p2,
        dout => grp_fu_990_p3);

    network_mul_mul_16s_16s_30_1_1_U88 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => reg_311,
        din1 => mul_ln35_17_fu_996_p1,
        dout => mul_ln35_17_fu_996_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten39_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten39_reg_254 <= add_ln22_reg_1207;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten39_reg_254 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_278 <= select_ln23_2_reg_1339;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_278 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_266 <= select_ln29_19_reg_1212;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_266 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_289 <= select_ln23_reg_1299;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_289 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_300 <= out_w_reg_1181;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_300 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_311 <= input_r_q1;
            elsif ((((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln22_reg_1071_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
                reg_311 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
                reg_316 <= input_r_q0;
            elsif (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_316 <= input_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln22_reg_1207 <= add_ln22_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_392_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln23_6_reg_1128 <= add_ln23_6_fu_491_p2;
                icmp_ln23_reg_1080 <= icmp_ln23_fu_403_p2;
                out_d_reg_1075 <= out_d_fu_397_p2;
                out_h_reg_1104 <= out_h_fu_453_p2;
                out_w_0_mid2_reg_1109 <= out_w_0_mid2_fu_465_p3;
                select_ln29_24_reg_1098 <= select_ln29_24_fu_446_p3;
                select_ln29_reg_1088 <= select_ln29_fu_408_p3;
                tmp5_0_0_mid2_v_v_reg_1121 <= tmp5_0_0_mid2_v_v_fu_483_p3;
                    zext_ln35_3_cast_mid_reg_1116(3 downto 0) <= zext_ln35_3_cast_mid_fu_473_p1(3 downto 0);
                    zext_ln41_4_reg_1093(3 downto 0) <= zext_ln41_4_fu_416_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln29_reg_1225 <= add_ln29_fu_578_p2;
                tmp5_2_0_mid2_reg_1230 <= tmp5_2_0_mid2_fu_593_p2;
                trunc_ln29_reg_1218 <= trunc_ln29_fu_574_p1;
                    zext_ln35_17_reg_1237(3 downto 0) <= zext_ln35_17_fu_603_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln35_20_reg_1334 <= add_ln35_20_fu_805_p2;
                sext_ln35_17_reg_1304 <= sext_ln35_17_fu_759_p1;
                sext_ln35_19_reg_1314 <= sext_ln35_19_fu_775_p1;
                trunc_ln41_8_reg_1319 <= mul_ln35_12_fu_959_p2(29 downto 14);
                trunc_ln41_s_reg_1309 <= mul_ln35_11_fu_952_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln41_11_reg_1364 <= add_ln41_11_fu_853_p2;
                trunc_ln41_1_reg_1349 <= mul_ln35_13_fu_966_p2(29 downto 14);
                trunc_ln41_2_reg_1354 <= mul_ln35_14_fu_972_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln41_16_reg_1394 <= add_ln41_16_fu_918_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln41_9_reg_1379 <= add_ln41_9_fu_884_p2;
                trunc_ln41_3_reg_1369 <= mul_ln35_15_fu_978_p2(29 downto 14);
                trunc_ln41_4_reg_1374 <= mul_ln35_16_fu_984_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                add_ln41_reg_1389 <= grp_fu_990_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1041 <= empty_fu_337_p1;
                icmp_ln24_reg_1056 <= icmp_ln24_fu_367_p2;
                mul_ln5_reg_1046 <= mul_ln5_fu_353_p2;
                    tmp_6_reg_1051(10 downto 3) <= tmp_6_fu_359_p3(10 downto 3);
                    zext_ln35_1_cast14_reg_1023(5 downto 0) <= zext_ln35_1_cast14_fu_325_p1(5 downto 0);
                    zext_ln35_reg_1017(5 downto 0) <= zext_ln35_fu_321_p1(5 downto 0);
                    zext_ln41_1_cast_reg_1036(4 downto 0) <= zext_ln41_1_cast_fu_333_p1(4 downto 0);
                    zext_ln41_reg_1030(4 downto 0) <= zext_ln41_fu_329_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln22_reg_1071 <= icmp_ln22_fu_392_p2;
                icmp_ln22_reg_1071_pp0_iter1_reg <= icmp_ln22_reg_1071;
                    zext_ln35_3_cast_reg_1066(3 downto 0) <= zext_ln35_3_cast_fu_382_p1(3 downto 0);
                    zext_ln41_2_reg_1061(3 downto 0) <= zext_ln41_2_fu_373_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                kernel1_load_reg_1165 <= kernel1_q0;
                kernel2_load_reg_1173 <= kernel2_q0;
                kernel_load_reg_1157 <= kernel_q0;
                tmp5_0_0_mid2_reg_1133 <= tmp5_0_0_mid2_fu_500_p2;
                tmp5_1_0_mid2_reg_1138 <= tmp5_1_0_mid2_fu_514_p2;
                    zext_ln35_13_reg_1145(3 downto 0) <= zext_ln35_13_fu_519_p1(3 downto 0);
                    zext_ln35_15_reg_1186(3 downto 0) <= zext_ln35_15_fu_538_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_ln41_reg_1197 <= mul_ln41_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                out_w_reg_1181 <= out_w_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln23_2_reg_1339 <= select_ln23_2_fu_809_p3;
                select_ln23_reg_1299 <= select_ln23_fu_750_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                select_ln29_19_reg_1212 <= select_ln29_19_fu_568_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                sext_ln35_13_reg_1258 <= sext_ln35_13_fu_676_p1;
                sext_ln35_15_reg_1269 <= sext_ln35_15_fu_701_p1;
                tmp7_mid2_v_v_reg_1253 <= tmp7_mid2_v_v_fu_657_p3;
                tmp_4_reg_1279 <= tmp_4_fu_714_p5;
                tmp_5_reg_1284 <= tmp_5_fu_723_p5;
                trunc_ln41_9_reg_1274 <= mul_ln35_10_fu_945_p2(29 downto 14);
                trunc_ln_reg_1264 <= mul_ln35_9_fu_938_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln29_24_reg_1098 = ap_const_lv1_0) and (icmp_ln23_reg_1080 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp6_reg_1202 <= tmp6_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_1071_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                trunc_ln41_5_reg_1384 <= mul_ln35_17_fu_996_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    zext_ln35_13_reg_1145_pp0_iter1_reg(3 downto 0) <= zext_ln35_13_reg_1145(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln35_reg_1017(6) <= '0';
    zext_ln35_1_cast14_reg_1023(10 downto 6) <= "00000";
    zext_ln41_reg_1030(6 downto 5) <= "00";
    zext_ln41_1_cast_reg_1036(10 downto 5) <= "000000";
    tmp_6_reg_1051(2 downto 0) <= "000";
    zext_ln41_2_reg_1061(6 downto 4) <= "000";
    zext_ln35_3_cast_reg_1066(6 downto 4) <= "000";
    zext_ln41_4_reg_1093(6 downto 4) <= "000";
    zext_ln35_3_cast_mid_reg_1116(6 downto 4) <= "000";
    zext_ln35_13_reg_1145(10 downto 4) <= "0000000";
    zext_ln35_13_reg_1145_pp0_iter1_reg(10 downto 4) <= "0000000";
    zext_ln35_15_reg_1186(10 downto 4) <= "0000000";
    zext_ln35_17_reg_1237(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln22_reg_1071, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((icmp_ln22_reg_1071 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((icmp_ln22_reg_1071 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln22_fu_562_p2 <= std_logic_vector(unsigned(indvar_flatten39_reg_254) + unsigned(ap_const_lv11_1));
    add_ln23_6_fu_491_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_282_p4));
    add_ln29_fu_578_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln29_fu_574_p1));
    add_ln35_12_fu_542_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_fu_500_p2) + unsigned(zext_ln35_15_fu_538_p1));
    add_ln35_13_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(out_w_0_mid2_reg_1109));
    add_ln35_14_fu_607_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_reg_1133) + unsigned(zext_ln35_17_fu_603_p1));
    add_ln35_15_fu_617_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1138) + unsigned(zext_ln35_13_reg_1145));
    add_ln35_16_fu_732_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1138) + unsigned(zext_ln35_15_reg_1186));
    add_ln35_17_fu_741_p2 <= std_logic_vector(unsigned(tmp5_1_0_mid2_reg_1138) + unsigned(zext_ln35_17_reg_1237));
    add_ln35_18_fu_787_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1230) + unsigned(zext_ln35_13_reg_1145));
    add_ln35_19_fu_796_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1230) + unsigned(zext_ln35_15_reg_1186));
    add_ln35_20_fu_805_p2 <= std_logic_vector(unsigned(tmp5_2_0_mid2_reg_1230) + unsigned(zext_ln35_17_reg_1237));
    add_ln35_fu_522_p2 <= std_logic_vector(unsigned(tmp5_0_0_mid2_fu_500_p2) + unsigned(zext_ln35_13_fu_519_p1));
    add_ln41_10_fu_849_p2 <= std_logic_vector(unsigned(trunc_ln41_s_reg_1309) + unsigned(trunc_ln41_8_reg_1319));
    add_ln41_11_fu_853_p2 <= std_logic_vector(unsigned(add_ln41_10_fu_849_p2) + unsigned(trunc_ln41_9_reg_1274));
    add_ln41_12_fu_924_p2 <= std_logic_vector(unsigned(add_ln41_11_reg_1364) + unsigned(add_ln41_9_reg_1379));
    add_ln41_13_fu_905_p2 <= std_logic_vector(unsigned(trunc_ln41_1_reg_1349) + unsigned(trunc_ln41_2_reg_1354));
    add_ln41_14_fu_909_p2 <= std_logic_vector(unsigned(trunc_ln41_4_reg_1374) + unsigned(trunc_ln41_5_reg_1384));
    add_ln41_15_fu_913_p2 <= std_logic_vector(unsigned(add_ln41_14_fu_909_p2) + unsigned(trunc_ln41_3_reg_1369));
    add_ln41_16_fu_918_p2 <= std_logic_vector(unsigned(add_ln41_15_fu_913_p2) + unsigned(add_ln41_13_fu_905_p2));
    add_ln41_9_fu_884_p2 <= std_logic_vector(unsigned(bias_q0) + unsigned(trunc_ln_reg_1264));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln22_reg_1071)
    begin
        if ((icmp_ln22_reg_1071 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten39_phi_fu_258_p4_assign_proc : process(indvar_flatten39_reg_254, icmp_ln22_reg_1071, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln22_reg_1207, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten39_phi_fu_258_p4 <= add_ln22_reg_1207;
        else 
            ap_phi_mux_indvar_flatten39_phi_fu_258_p4 <= indvar_flatten39_reg_254;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_282_p4_assign_proc : process(indvar_flatten_reg_278, icmp_ln22_reg_1071, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln23_2_reg_1339, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_282_p4 <= select_ln23_2_reg_1339;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_282_p4 <= indvar_flatten_reg_278;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_270_p4_assign_proc : process(out_d_0_reg_266, icmp_ln22_reg_1071, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln29_19_reg_1212, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_270_p4 <= select_ln29_19_reg_1212;
        else 
            ap_phi_mux_out_d_0_phi_fu_270_p4 <= out_d_0_reg_266;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_293_p4_assign_proc : process(out_h_0_reg_289, icmp_ln22_reg_1071, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln23_reg_1299, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_293_p4 <= select_ln23_reg_1299;
        else 
            ap_phi_mux_out_h_0_phi_fu_293_p4 <= out_h_0_reg_289;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_304_p4_assign_proc : process(out_w_0_reg_300, icmp_ln22_reg_1071, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1181, ap_block_pp0_stage0)
    begin
        if (((icmp_ln22_reg_1071 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_304_p4 <= out_w_reg_1181;
        else 
            ap_phi_mux_out_w_0_phi_fu_304_p4 <= out_w_0_reg_300;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln29_fu_815_p1(3 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_50_fu_341_p1 <= output_height(4 - 1 downto 0);
    empty_52_fu_459_p2 <= (select_ln29_24_fu_446_p3 or icmp_ln23_fu_403_p2);
    empty_fu_337_p1 <= output_width(4 - 1 downto 0);
    grp_fu_990_p0 <= zext_ln41_1_cast_reg_1036(5 - 1 downto 0);
    grp_fu_990_p1 <= grp_fu_990_p10(7 - 1 downto 0);
    grp_fu_990_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_mid2_v_v_reg_1253),11));
    grp_fu_990_p2 <= zext_ln35_13_reg_1145_pp0_iter1_reg(4 - 1 downto 0);
    icmp_ln22_fu_392_p2 <= "1" when (ap_phi_mux_indvar_flatten39_phi_fu_258_p4 = tmp_6_reg_1051) else "0";
    icmp_ln23_fu_403_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_282_p4 = mul_ln5_reg_1046) else "0";
    icmp_ln24_5_fu_441_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_304_p4 = empty_reg_1041) else "0";
    icmp_ln24_fu_367_p2 <= "1" when (empty_fu_337_p1 = ap_const_lv4_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln35_14_fu_528_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln35_19_fu_621_p1, ap_block_pp0_stage3, zext_ln35_21_fu_745_p1, ap_block_pp0_stage4, zext_ln35_23_fu_800_p1, zext_ln35_24_fu_845_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln35_24_fu_845_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln35_23_fu_800_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            input_r_address0 <= zext_ln35_21_fu_745_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln35_19_fu_621_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln35_14_fu_528_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, zext_ln35_16_fu_548_p1, zext_ln35_18_fu_612_p1, ap_block_pp0_stage2, zext_ln35_20_fu_736_p1, ap_block_pp0_stage3, zext_ln35_22_fu_791_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address1 <= zext_ln35_22_fu_791_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= zext_ln35_20_fu_736_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln35_18_fu_612_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln35_16_fu_548_p1(14 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    kernel1_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel1_ce0 <= ap_const_logic_1;
        else 
            kernel1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel2_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel2_ce0 <= ap_const_logic_1;
        else 
            kernel2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kernel_address0 <= ap_const_lv64_0(5 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln35_13_fu_966_p1 <= sext_ln35_13_reg_1258(16 - 1 downto 0);
    mul_ln35_14_fu_972_p1 <= sext_ln35_15_reg_1269(16 - 1 downto 0);
    mul_ln35_15_fu_978_p1 <= sext_ln35_17_reg_1304(16 - 1 downto 0);
    mul_ln35_16_fu_984_p1 <= sext_ln35_19_reg_1314(16 - 1 downto 0);
    mul_ln35_17_fu_996_p1 <= sext_ln35_13_reg_1258(16 - 1 downto 0);
    mul_ln35_18_fu_420_p0 <= zext_ln35_reg_1017(6 - 1 downto 0);
    mul_ln35_18_fu_420_p1 <= mul_ln35_18_fu_420_p10(4 - 1 downto 0);
    mul_ln35_18_fu_420_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_397_p2),7));
    mul_ln35_18_fu_420_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln35_18_fu_420_p0) * unsigned(mul_ln35_18_fu_420_p1), 7));
    mul_ln35_fu_377_p0 <= mul_ln35_fu_377_p00(4 - 1 downto 0);
    mul_ln35_fu_377_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4),7));
    mul_ln35_fu_377_p1 <= zext_ln35_reg_1017(6 - 1 downto 0);
    mul_ln35_fu_377_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln35_fu_377_p0) * unsigned(mul_ln35_fu_377_p1), 7));
    mul_ln41_2_fu_626_p0 <= zext_ln41_reg_1030(5 - 1 downto 0);
    mul_ln41_2_fu_626_p1 <= zext_ln41_4_reg_1093(4 - 1 downto 0);
    mul_ln41_2_fu_626_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln41_2_fu_626_p0) * unsigned(mul_ln41_2_fu_626_p1), 7));
    mul_ln41_fu_553_p0 <= zext_ln41_2_reg_1061(4 - 1 downto 0);
    mul_ln41_fu_553_p1 <= zext_ln41_reg_1030(5 - 1 downto 0);
    mul_ln41_fu_553_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln41_fu_553_p0) * unsigned(mul_ln41_fu_553_p1), 7));
    mul_ln5_fu_353_p0 <= mul_ln5_fu_353_p00(4 - 1 downto 0);
    mul_ln5_fu_353_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_50_fu_341_p1),8));
    mul_ln5_fu_353_p1 <= mul_ln5_fu_353_p10(4 - 1 downto 0);
    mul_ln5_fu_353_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_337_p1),8));
    mul_ln5_fu_353_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln5_fu_353_p0) * unsigned(mul_ln5_fu_353_p1), 8));
    out_d_fu_397_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4));
    out_h_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln29_fu_408_p3));
    out_w_0_mid2_fu_465_p3 <= 
        ap_const_lv4_0 when (empty_52_fu_459_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_304_p4;
    out_w_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(out_w_0_mid2_reg_1109));
    output_r_address0 <= zext_ln41_3_fu_934_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(unsigned(add_ln41_16_reg_1394) + unsigned(add_ln41_12_fu_924_p2));

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1, icmp_ln22_reg_1071_pp0_iter1_reg)
    begin
        if (((icmp_ln22_reg_1071_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln23_2_fu_809_p3 <= 
        ap_const_lv8_1 when (icmp_ln23_reg_1080(0) = '1') else 
        add_ln23_6_reg_1128;
    select_ln23_fu_750_p3 <= 
        out_h_reg_1104 when (select_ln29_24_reg_1098(0) = '1') else 
        select_ln29_reg_1088;
    select_ln29_19_fu_568_p3 <= 
        out_d_reg_1075 when (icmp_ln23_reg_1080(0) = '1') else 
        out_d_0_reg_266;
    select_ln29_20_fu_425_p3 <= 
        mul_ln35_18_fu_420_p2 when (icmp_ln23_fu_403_p2(0) = '1') else 
        mul_ln35_fu_377_p2;
    select_ln29_21_fu_630_p3 <= 
        mul_ln41_2_fu_626_p2 when (icmp_ln23_reg_1080(0) = '1') else 
        mul_ln41_reg_1197;
    select_ln29_22_fu_433_p3 <= 
        mul_ln35_18_fu_420_p2 when (icmp_ln23_fu_403_p2(0) = '1') else 
        tmp_0_0_fu_386_p2;
    select_ln29_23_fu_646_p3 <= 
        mul_ln41_2_fu_626_p2 when (icmp_ln23_reg_1080(0) = '1') else 
        tmp6_reg_1202;
    select_ln29_24_fu_446_p3 <= 
        icmp_ln24_reg_1056 when (icmp_ln23_fu_403_p2(0) = '1') else 
        icmp_ln24_5_fu_441_p2;
    select_ln29_fu_408_p3 <= 
        ap_const_lv4_0 when (icmp_ln23_fu_403_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_293_p4;
        sext_ln35_13_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_668_p5),30));

        sext_ln35_15_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_fu_693_p5),30));

        sext_ln35_17_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_1279),30));

        sext_ln35_19_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_reg_1284),30));

    tmp5_0_0_mid2_fu_500_p0 <= zext_ln35_1_cast14_reg_1023(6 - 1 downto 0);
    tmp5_0_0_mid2_fu_500_p1 <= tmp5_0_0_mid2_fu_500_p10(7 - 1 downto 0);
    tmp5_0_0_mid2_fu_500_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_mid2_v_v_reg_1121),11));
    tmp5_0_0_mid2_fu_500_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_0_mid2_fu_500_p0) * unsigned(tmp5_0_0_mid2_fu_500_p1), 11));
    tmp5_0_0_mid2_v_v_fu_483_p3 <= 
        tmp_0_0_mid1_fu_477_p2 when (select_ln29_24_fu_446_p3(0) = '1') else 
        select_ln29_22_fu_433_p3;
    tmp5_1_0_mid2_fu_514_p0 <= zext_ln35_1_cast14_reg_1023(6 - 1 downto 0);
    tmp5_1_0_mid2_fu_514_p1 <= tmp5_1_0_mid2_fu_514_p10(7 - 1 downto 0);
    tmp5_1_0_mid2_fu_514_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_1_0_mid2_v_v_fu_505_p2),11));
    tmp5_1_0_mid2_fu_514_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_1_0_mid2_fu_514_p0) * unsigned(tmp5_1_0_mid2_fu_514_p1), 11));
    tmp5_1_0_mid2_v_v_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp5_0_0_mid2_v_v_reg_1121));
    tmp5_2_0_mid2_fu_593_p0 <= zext_ln35_1_cast14_reg_1023(6 - 1 downto 0);
    tmp5_2_0_mid2_fu_593_p1 <= tmp5_2_0_mid2_fu_593_p10(7 - 1 downto 0);
    tmp5_2_0_mid2_fu_593_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_2_0_mid2_v_v_fu_584_p2),11));
    tmp5_2_0_mid2_fu_593_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_2_0_mid2_fu_593_p0) * unsigned(tmp5_2_0_mid2_fu_593_p1), 11));
    tmp5_2_0_mid2_v_v_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(tmp5_0_0_mid2_v_v_reg_1121));
    tmp6_fu_557_p2 <= std_logic_vector(unsigned(mul_ln41_fu_553_p2) + unsigned(zext_ln35_3_cast_reg_1066));
    tmp6_mid1_fu_652_p2 <= std_logic_vector(unsigned(zext_ln35_3_cast_mid_reg_1116) + unsigned(select_ln29_21_fu_630_p3));
    tmp7_mid2_v_v_fu_657_p3 <= 
        tmp6_mid1_fu_652_p2 when (select_ln29_24_reg_1098(0) = '1') else 
        select_ln29_23_fu_646_p3;
    tmp_0_0_fu_386_p2 <= std_logic_vector(unsigned(mul_ln35_fu_377_p2) + unsigned(zext_ln35_3_cast_fu_382_p1));
    tmp_0_0_mid1_fu_477_p2 <= std_logic_vector(unsigned(zext_ln35_3_cast_mid_fu_473_p1) + unsigned(select_ln29_20_fu_425_p3));
    tmp_4_fu_714_p4 <= (trunc_ln29_reg_1218 xor ap_const_lv2_2);
    tmp_5_fu_723_p4 <= std_logic_vector(signed(ap_const_lv2_3) + signed(trunc_ln29_reg_1218));
    tmp_6_fu_359_p3 <= (mul_ln5_fu_353_p2 & ap_const_lv3_0);
    trunc_ln29_fu_574_p1 <= select_ln29_19_fu_568_p3(2 - 1 downto 0);
    zext_ln29_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_19_reg_1212),64));
    zext_ln35_13_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1109),11));
    zext_ln35_14_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_522_p2),64));
    zext_ln35_15_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_533_p2),11));
    zext_ln35_16_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_12_fu_542_p2),64));
    zext_ln35_17_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_13_fu_598_p2),11));
    zext_ln35_18_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_14_fu_607_p2),64));
    zext_ln35_19_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_15_fu_617_p2),64));
    zext_ln35_1_cast14_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln35_20_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_16_fu_732_p2),64));
    zext_ln35_21_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_17_fu_741_p2),64));
    zext_ln35_22_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_18_fu_787_p2),64));
    zext_ln35_23_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_19_fu_796_p2),64));
    zext_ln35_24_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_20_reg_1334),64));
    zext_ln35_3_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_293_p4),7));
    zext_ln35_3_cast_mid_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_453_p2),7));
    zext_ln35_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln41_1_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln41_2_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_270_p4),7));
    zext_ln41_3_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_reg_1389),64));
    zext_ln41_4_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_397_p2),7));
    zext_ln41_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
end behav;
