-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce1 : OUT STD_LOGIC;
    kernel_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten48_reg_298 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_d_0_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_0_reg_333 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_355 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln23_reg_1228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal reg_360 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_364 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_369 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln23_reg_1228_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_374 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln40_fu_379_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_reg_1174 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_1_cast14_fu_383_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_1_cast14_reg_1180 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_fu_387_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_reg_1187 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_1_cast_fu_391_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln48_1_cast_reg_1193 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_395_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_reg_1198 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_411_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln4_reg_1203 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_417_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_reg_1208 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1213 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln48_2_fu_431_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_2_reg_1218 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_2_cast_fu_462_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_2_cast_reg_1223 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln23_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_fu_477_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_reg_1232 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln32_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_488_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_reg_1245 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_4_fu_496_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln48_4_reg_1250 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_8_fu_522_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln24_8_reg_1255 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln24_14_fu_561_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_14_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_h_fu_568_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_reg_1271 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_fu_580_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_0_mid2_reg_1276 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_2_cast_mid_fu_588_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln40_2_cast_mid_reg_1283 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_v_v_fu_598_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_v_v_reg_1288 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln32_2_fu_606_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln32_2_reg_1295 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln24_19_fu_612_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln24_19_reg_1300 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_640_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_0_0_mid2_reg_1320 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_fu_654_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_reg_1325 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_fu_659_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_reg_1332 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_13_reg_1332_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal out_w_fu_673_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_1344 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln40_15_fu_678_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_15_reg_1349 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_fu_693_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_reg_1360 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_fu_697_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_reg_1365 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_fu_702_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_reg_1370 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_737_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_reg_1385 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_17_fu_747_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln40_17_reg_1392 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp12_mid2_v_v_fu_819_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp12_mid2_v_v_reg_1418 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln_reg_1423 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_9_reg_1428 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_9_fu_898_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln24_9_reg_1453 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_fu_904_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_reg_1459 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln48_s_reg_1464 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_8_reg_1469 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln40_20_fu_953_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_20_reg_1484 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln32_14_fu_957_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln32_14_reg_1489 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln48_1_reg_1499 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_2_reg_1504 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_10_fu_1005_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_10_reg_1514 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_3_reg_1519 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_4_reg_1524 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_12_fu_1052_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_12_reg_1529 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_13_fu_1058_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_13_reg_1534 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln48_5_reg_1539 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1161_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_reg_1544 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln48_17_fu_1096_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_17_reg_1549 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten48_phi_fu_302_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_d_0_phi_fu_314_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_326_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_out_h_0_phi_fu_337_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_out_w_0_phi_fu_348_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln24_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_10_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln24_11_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_14_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_16_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_12_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln24_13_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_18_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_19_fu_765_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_14_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln24_15_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_20_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_21_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_16_fu_883_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln24_17_fu_893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_22_fu_939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_23_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_18_fu_971_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln40_24_fu_1001_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_3_fu_1101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_58_fu_399_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_411_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln4_fu_411_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln27_fu_439_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_fu_435_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln_fu_443_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_fu_457_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln40_fu_457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_fu_457_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln27_2_fu_504_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln27_4_fu_500_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln27_mid1_fu_508_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_5_fu_516_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_fu_451_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_18_fu_535_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln40_18_fu_535_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln40_18_fu_535_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_fu_466_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln33_2_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_60_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_10_fu_540_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_0_mid1_fu_592_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_12_fu_548_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_fu_615_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_10_fu_626_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_0_0_mid2_fu_640_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_0_0_mid2_fu_640_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_v_v_fu_645_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_1_0_mid2_fu_654_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_1_0_mid2_fu_654_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_fu_662_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_12_fu_682_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln48_fu_693_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln48_fu_693_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_11_fu_708_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_12_fu_718_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_v_v_fu_728_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp10_2_0_mid2_fu_737_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp10_2_0_mid2_fu_737_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln40_13_fu_742_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln40_14_fu_751_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_15_fu_761_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_13_fu_778_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_14_fu_788_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln48_2_fu_798_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln48_2_fu_798_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln48_2_fu_798_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_11_fu_802_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp11_mid1_fu_814_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln24_13_fu_808_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_9_fu_1105_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_10_fu_1112_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln40_16_fu_852_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_17_fu_861_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_15_fu_878_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln24_16_fu_888_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_11_fu_1119_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_12_fu_1126_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln40_18_fu_935_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln40_19_fu_944_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln40_13_fu_1133_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_14_fu_1140_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_15_fu_1147_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal mul_ln40_16_fu_1154_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln48_9_fu_1043_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_11_fu_1048_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln40_17_fu_1167_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln48_14_fu_1082_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_15_fu_1086_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_16_fu_1091_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1161_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1161_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_1161_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1161_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln40_18_fu_535_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln40_fu_457_p00 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln4_fu_411_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln4_fu_411_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_0_0_mid2_fu_640_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_1_0_mid2_fu_654_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_2_0_mid2_fu_737_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mul_mul_16s_16s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component network_mac_muladd_5ns_7ns_4ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_29_1_1_U64 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_369,
        din1 => reg_355,
        dout => mul_ln40_9_fu_1105_p2);

    network_mul_mul_16s_16s_29_1_1_U65 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_374,
        din1 => reg_360,
        dout => mul_ln40_10_fu_1112_p2);

    network_mul_mul_16s_16s_29_1_1_U66 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_369,
        din1 => reg_364,
        dout => mul_ln40_11_fu_1119_p2);

    network_mul_mul_16s_16s_29_1_1_U67 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_374,
        din1 => reg_355,
        dout => mul_ln40_12_fu_1126_p2);

    network_mul_mul_16s_16s_29_1_1_U68 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_369,
        din1 => reg_360,
        dout => mul_ln40_13_fu_1133_p2);

    network_mul_mul_16s_16s_29_1_1_U69 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_374,
        din1 => reg_355,
        dout => mul_ln40_14_fu_1140_p2);

    network_mul_mul_16s_16s_29_1_1_U70 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_369,
        din1 => reg_364,
        dout => mul_ln40_15_fu_1147_p2);

    network_mul_mul_16s_16s_29_1_1_U71 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_374,
        din1 => reg_355,
        dout => mul_ln40_16_fu_1154_p2);

    network_mac_muladd_5ns_7ns_4ns_11_1_1_U72 : component network_mac_muladd_5ns_7ns_4ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        din2_WIDTH => 4,
        dout_WIDTH => 11)
    port map (
        din0 => grp_fu_1161_p0,
        din1 => grp_fu_1161_p1,
        din2 => grp_fu_1161_p2,
        dout => grp_fu_1161_p3);

    network_mul_mul_16s_16s_29_1_1_U73 : component network_mul_mul_16s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_369,
        din1 => reg_360,
        dout => mul_ln40_17_fu_1167_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten48_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten48_reg_298 <= add_ln23_reg_1370;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten48_reg_298 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_322 <= select_ln32_14_reg_1489;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_322 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    out_d_0_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_d_0_reg_310 <= select_ln24_9_reg_1453;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_310 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_h_0_reg_333 <= select_ln32_reg_1459;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_0_reg_333 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_w_0_reg_344 <= out_w_reg_1344;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_w_0_reg_344 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_355 <= kernel_q1;
            elsif (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_355 <= kernel_q0;
            end if; 
        end if;
    end process;

    reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                    reg_364 <= kernel_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                    reg_364 <= kernel_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_369 <= input_r_q1;
            elsif ((((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln23_reg_1228_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
                reg_369 <= input_r_q0;
            end if; 
        end if;
    end process;

    reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
                reg_374 <= input_r_q0;
            elsif (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                reg_374 <= input_r_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln23_reg_1370 <= add_ln23_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln32_2_reg_1295 <= add_ln32_2_fu_606_p2;
                icmp_ln32_reg_1237 <= icmp_ln32_fu_483_p2;
                out_d_reg_1232 <= out_d_fu_477_p2;
                out_h_reg_1271 <= out_h_fu_568_p2;
                out_w_0_mid2_reg_1276 <= out_w_0_mid2_fu_580_p3;
                select_ln24_14_reg_1265 <= select_ln24_14_fu_561_p3;
                select_ln24_8_reg_1255 <= select_ln24_8_fu_522_p3;
                select_ln24_reg_1245 <= select_ln24_fu_488_p3;
                tmp10_0_0_mid2_v_v_reg_1288 <= tmp10_0_0_mid2_v_v_fu_598_p3;
                    zext_ln40_2_cast_mid_reg_1283(3 downto 0) <= zext_ln40_2_cast_mid_fu_588_p1(3 downto 0);
                    zext_ln48_4_reg_1250(3 downto 0) <= zext_ln48_4_fu_496_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln40_20_reg_1484 <= add_ln40_20_fu_953_p2;
                trunc_ln48_8_reg_1469 <= mul_ln40_12_fu_1126_p2(28 downto 13);
                trunc_ln48_s_reg_1464 <= mul_ln40_11_fu_1119_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln48_10_reg_1514 <= add_ln48_10_fu_1005_p2;
                trunc_ln48_1_reg_1499 <= mul_ln40_13_fu_1133_p2(28 downto 13);
                trunc_ln48_2_reg_1504 <= mul_ln40_14_fu_1140_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln48_12_reg_1529 <= add_ln48_12_fu_1052_p2;
                add_ln48_13_reg_1534 <= add_ln48_13_fu_1058_p2;
                trunc_ln48_3_reg_1519 <= mul_ln40_15_fu_1147_p2(28 downto 13);
                trunc_ln48_4_reg_1524 <= mul_ln40_16_fu_1154_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln48_17_reg_1549 <= add_ln48_17_fu_1096_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln48_reg_1544 <= grp_fu_1161_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                empty_reg_1198 <= empty_fu_395_p1;
                icmp_ln33_reg_1213 <= icmp_ln33_fu_425_p2;
                mul_ln4_reg_1203 <= mul_ln4_fu_411_p2;
                    tmp_2_reg_1208(10 downto 3) <= tmp_2_fu_417_p3(10 downto 3);
                    zext_ln40_1_cast14_reg_1180(5 downto 0) <= zext_ln40_1_cast14_fu_383_p1(5 downto 0);
                    zext_ln40_reg_1174(5 downto 0) <= zext_ln40_fu_379_p1(5 downto 0);
                    zext_ln48_1_cast_reg_1193(4 downto 0) <= zext_ln48_1_cast_fu_391_p1(4 downto 0);
                    zext_ln48_reg_1187(4 downto 0) <= zext_ln48_fu_387_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln23_reg_1228 <= icmp_ln23_fu_472_p2;
                icmp_ln23_reg_1228_pp0_iter1_reg <= icmp_ln23_reg_1228;
                    zext_ln40_2_cast_reg_1223(3 downto 0) <= zext_ln40_2_cast_fu_462_p1(3 downto 0);
                    zext_ln48_2_reg_1218(3 downto 0) <= zext_ln48_2_fu_431_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                mul_ln48_reg_1360 <= mul_ln48_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                out_w_reg_1344 <= out_w_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_360 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln24_9_reg_1453 <= select_ln24_9_fu_898_p3;
                select_ln32_14_reg_1489 <= select_ln32_14_fu_957_p3;
                select_ln32_reg_1459 <= select_ln32_fu_904_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp10_0_0_mid2_reg_1320 <= tmp10_0_0_mid2_fu_640_p2;
                tmp10_1_0_mid2_reg_1325 <= tmp10_1_0_mid2_fu_654_p2;
                    zext_ln24_19_reg_1300(5 downto 0) <= zext_ln24_19_fu_612_p1(5 downto 0);
                    zext_ln40_13_reg_1332(3 downto 0) <= zext_ln40_13_fu_659_p1(3 downto 0);
                    zext_ln40_15_reg_1349(3 downto 0) <= zext_ln40_15_fu_678_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp10_2_0_mid2_reg_1385 <= tmp10_2_0_mid2_fu_737_p2;
                    zext_ln40_17_reg_1392(3 downto 0) <= zext_ln40_17_fu_747_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((select_ln24_14_reg_1265 = ap_const_lv1_0) and (icmp_ln32_reg_1237 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp11_reg_1365 <= tmp11_fu_697_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp12_mid2_v_v_reg_1418 <= tmp12_mid2_v_v_fu_819_p3;
                trunc_ln48_9_reg_1428 <= mul_ln40_10_fu_1112_p2(28 downto 13);
                trunc_ln_reg_1423 <= mul_ln40_9_fu_1105_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1228_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                trunc_ln48_5_reg_1539 <= mul_ln40_17_fu_1167_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln40_13_reg_1332_pp0_iter1_reg(3 downto 0) <= zext_ln40_13_reg_1332(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln40_reg_1174(6) <= '0';
    zext_ln40_1_cast14_reg_1180(10 downto 6) <= "00000";
    zext_ln48_reg_1187(6 downto 5) <= "00";
    zext_ln48_1_cast_reg_1193(10 downto 5) <= "000000";
    tmp_2_reg_1208(2 downto 0) <= "000";
    zext_ln48_2_reg_1218(6 downto 4) <= "000";
    zext_ln40_2_cast_reg_1223(6 downto 4) <= "000";
    zext_ln48_4_reg_1250(6 downto 4) <= "000";
    zext_ln40_2_cast_mid_reg_1283(6 downto 4) <= "000";
    zext_ln24_19_reg_1300(6) <= '0';
    zext_ln40_13_reg_1332(10 downto 4) <= "0000000";
    zext_ln40_13_reg_1332_pp0_iter1_reg(10 downto 4) <= "0000000";
    zext_ln40_15_reg_1349(10 downto 4) <= "0000000";
    zext_ln40_17_reg_1392(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln23_reg_1228, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((icmp_ln23_reg_1228 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((icmp_ln23_reg_1228 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln23_fu_702_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten48_reg_298));
    add_ln24_10_fu_626_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(zext_ln24_19_fu_612_p1));
    add_ln24_11_fu_708_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(zext_ln24_19_reg_1300));
    add_ln24_12_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(zext_ln24_19_reg_1300));
    add_ln24_13_fu_778_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(zext_ln24_19_reg_1300));
    add_ln24_14_fu_788_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) + unsigned(zext_ln24_19_reg_1300));
    add_ln24_15_fu_878_p2 <= std_logic_vector(unsigned(ap_const_lv7_7) + unsigned(zext_ln24_19_reg_1300));
    add_ln24_16_fu_888_p2 <= std_logic_vector(unsigned(ap_const_lv7_8) + unsigned(zext_ln24_19_reg_1300));
    add_ln24_fu_615_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(zext_ln24_19_fu_612_p1));
    add_ln27_5_fu_516_p2 <= std_logic_vector(unsigned(zext_ln27_4_fu_500_p1) + unsigned(shl_ln27_mid1_fu_508_p3));
    add_ln27_fu_451_p2 <= std_logic_vector(unsigned(zext_ln27_fu_435_p1) + unsigned(shl_ln_fu_443_p3));
    add_ln32_2_fu_606_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_326_p4));
    add_ln40_12_fu_682_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_fu_640_p2) + unsigned(zext_ln40_15_fu_678_p1));
    add_ln40_13_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(out_w_0_mid2_reg_1276));
    add_ln40_14_fu_751_p2 <= std_logic_vector(unsigned(tmp10_0_0_mid2_reg_1320) + unsigned(zext_ln40_17_fu_747_p1));
    add_ln40_15_fu_761_p2 <= std_logic_vector(unsigned(zext_ln40_13_reg_1332) + unsigned(tmp10_1_0_mid2_reg_1325));
    add_ln40_16_fu_852_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1325) + unsigned(zext_ln40_15_reg_1349));
    add_ln40_17_fu_861_p2 <= std_logic_vector(unsigned(tmp10_1_0_mid2_reg_1325) + unsigned(zext_ln40_17_reg_1392));
    add_ln40_18_fu_935_p2 <= std_logic_vector(unsigned(zext_ln40_13_reg_1332) + unsigned(tmp10_2_0_mid2_reg_1385));
    add_ln40_19_fu_944_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1385) + unsigned(zext_ln40_15_reg_1349));
    add_ln40_20_fu_953_p2 <= std_logic_vector(unsigned(tmp10_2_0_mid2_reg_1385) + unsigned(zext_ln40_17_reg_1392));
    add_ln40_fu_662_p2 <= std_logic_vector(unsigned(zext_ln40_13_fu_659_p1) + unsigned(tmp10_0_0_mid2_fu_640_p2));
    add_ln48_10_fu_1005_p2 <= std_logic_vector(unsigned(trunc_ln48_8_reg_1469) + unsigned(trunc_ln48_s_reg_1464));
    add_ln48_11_fu_1048_p2 <= std_logic_vector(unsigned(trunc_ln48_9_reg_1428) + unsigned(add_ln48_10_reg_1514));
    add_ln48_12_fu_1052_p2 <= std_logic_vector(unsigned(add_ln48_9_fu_1043_p2) + unsigned(add_ln48_11_fu_1048_p2));
    add_ln48_13_fu_1058_p2 <= std_logic_vector(unsigned(trunc_ln48_2_reg_1504) + unsigned(trunc_ln48_1_reg_1499));
    add_ln48_14_fu_1082_p2 <= std_logic_vector(unsigned(trunc_ln48_5_reg_1539) + unsigned(trunc_ln48_4_reg_1524));
    add_ln48_15_fu_1086_p2 <= std_logic_vector(unsigned(trunc_ln48_3_reg_1519) + unsigned(add_ln48_14_fu_1082_p2));
    add_ln48_16_fu_1091_p2 <= std_logic_vector(unsigned(add_ln48_13_reg_1534) + unsigned(add_ln48_15_fu_1086_p2));
    add_ln48_17_fu_1096_p2 <= std_logic_vector(unsigned(add_ln48_12_reg_1529) + unsigned(add_ln48_16_fu_1091_p2));
    add_ln48_9_fu_1043_p2 <= std_logic_vector(unsigned(trunc_ln_reg_1423) + unsigned(bias_q0));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln23_reg_1228)
    begin
        if ((icmp_ln23_reg_1228 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten48_phi_fu_302_p4_assign_proc : process(indvar_flatten48_reg_298, icmp_ln23_reg_1228, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln23_reg_1370, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten48_phi_fu_302_p4 <= add_ln23_reg_1370;
        else 
            ap_phi_mux_indvar_flatten48_phi_fu_302_p4 <= indvar_flatten48_reg_298;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_326_p4_assign_proc : process(indvar_flatten_reg_322, icmp_ln23_reg_1228, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_14_reg_1489, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_326_p4 <= select_ln32_14_reg_1489;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_326_p4 <= indvar_flatten_reg_322;
        end if; 
    end process;


    ap_phi_mux_out_d_0_phi_fu_314_p4_assign_proc : process(out_d_0_reg_310, icmp_ln23_reg_1228, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln24_9_reg_1453, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_d_0_phi_fu_314_p4 <= select_ln24_9_reg_1453;
        else 
            ap_phi_mux_out_d_0_phi_fu_314_p4 <= out_d_0_reg_310;
        end if; 
    end process;


    ap_phi_mux_out_h_0_phi_fu_337_p4_assign_proc : process(out_h_0_reg_333, icmp_ln23_reg_1228, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln32_reg_1459, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_h_0_phi_fu_337_p4 <= select_ln32_reg_1459;
        else 
            ap_phi_mux_out_h_0_phi_fu_337_p4 <= out_h_0_reg_333;
        end if; 
    end process;


    ap_phi_mux_out_w_0_phi_fu_348_p4_assign_proc : process(out_w_0_reg_344, icmp_ln23_reg_1228, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, out_w_reg_1344, ap_block_pp0_stage0)
    begin
        if (((icmp_ln23_reg_1228 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_out_w_0_phi_fu_348_p4 <= out_w_reg_1344;
        else 
            ap_phi_mux_out_w_0_phi_fu_348_p4 <= out_w_0_reg_344;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= zext_ln24_18_fu_971_p1(3 - 1 downto 0);

    bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_58_fu_399_p1 <= output_height(4 - 1 downto 0);
    empty_60_fu_574_p2 <= (select_ln24_14_fu_561_p3 or icmp_ln32_fu_483_p2);
    empty_fu_395_p1 <= output_width(4 - 1 downto 0);
    grp_fu_1161_p0 <= zext_ln48_1_cast_reg_1193(5 - 1 downto 0);
    grp_fu_1161_p1 <= grp_fu_1161_p10(7 - 1 downto 0);
    grp_fu_1161_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp12_mid2_v_v_reg_1418),11));
    grp_fu_1161_p2 <= zext_ln40_13_reg_1332_pp0_iter1_reg(4 - 1 downto 0);
    icmp_ln23_fu_472_p2 <= "1" when (ap_phi_mux_indvar_flatten48_phi_fu_302_p4 = tmp_2_reg_1208) else "0";
    icmp_ln32_fu_483_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_326_p4 = mul_ln4_reg_1203) else "0";
    icmp_ln33_2_fu_556_p2 <= "1" when (ap_phi_mux_out_w_0_phi_fu_348_p4 = empty_reg_1198) else "0";
    icmp_ln33_fu_425_p2 <= "1" when (empty_fu_395_p1 = ap_const_lv4_0) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln40_14_fu_668_p1, ap_block_pp0_stage2, zext_ln40_19_fu_765_p1, ap_block_pp0_stage3, zext_ln40_21_fu_865_p1, ap_block_pp0_stage4, zext_ln40_23_fu_948_p1, zext_ln40_24_fu_1001_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_address0 <= zext_ln40_24_fu_1001_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            input_r_address0 <= zext_ln40_23_fu_948_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_r_address0 <= zext_ln40_21_fu_865_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_r_address0 <= zext_ln40_19_fu_765_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_r_address0 <= zext_ln40_14_fu_668_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln40_16_fu_688_p1, ap_block_pp0_stage2, zext_ln40_18_fu_756_p1, ap_block_pp0_stage3, zext_ln40_20_fu_856_p1, ap_block_pp0_stage4, zext_ln40_22_fu_939_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address1 <= zext_ln40_22_fu_939_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= zext_ln40_20_fu_856_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln40_18_fu_756_p1(14 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln40_16_fu_688_p1(14 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, zext_ln24_fu_530_p1, zext_ln24_10_fu_621_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln24_13_fu_723_p1, ap_block_pp0_stage3, zext_ln24_15_fu_793_p1, ap_block_pp0_stage4, zext_ln24_17_fu_893_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address0 <= zext_ln24_17_fu_893_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address0 <= zext_ln24_15_fu_793_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address0 <= zext_ln24_13_fu_723_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address0 <= zext_ln24_10_fu_621_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                kernel_address0 <= zext_ln24_fu_530_p1(7 - 1 downto 0);
            else 
                kernel_address0 <= "XXXXXXX";
            end if;
        else 
            kernel_address0 <= "XXXXXXX";
        end if; 
    end process;


    kernel_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln24_11_fu_632_p1, zext_ln24_12_fu_713_p1, ap_block_pp0_stage2, zext_ln24_14_fu_783_p1, ap_block_pp0_stage3, zext_ln24_16_fu_883_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                kernel_address1 <= zext_ln24_16_fu_883_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                kernel_address1 <= zext_ln24_14_fu_783_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                kernel_address1 <= zext_ln24_12_fu_713_p1(7 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                kernel_address1 <= zext_ln24_11_fu_632_p1(7 - 1 downto 0);
            else 
                kernel_address1 <= "XXXXXXX";
            end if;
        else 
            kernel_address1 <= "XXXXXXX";
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            kernel_ce1 <= ap_const_logic_1;
        else 
            kernel_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln40_18_fu_535_p0 <= mul_ln40_18_fu_535_p00(4 - 1 downto 0);
    mul_ln40_18_fu_535_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_477_p2),7));
    mul_ln40_18_fu_535_p1 <= zext_ln40_reg_1174(6 - 1 downto 0);
    mul_ln40_18_fu_535_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_18_fu_535_p0) * unsigned(mul_ln40_18_fu_535_p1), 7));
    mul_ln40_fu_457_p0 <= mul_ln40_fu_457_p00(4 - 1 downto 0);
    mul_ln40_fu_457_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),7));
    mul_ln40_fu_457_p1 <= zext_ln40_reg_1174(6 - 1 downto 0);
    mul_ln40_fu_457_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln40_fu_457_p0) * unsigned(mul_ln40_fu_457_p1), 7));
    mul_ln48_2_fu_798_p0 <= zext_ln48_4_reg_1250(4 - 1 downto 0);
    mul_ln48_2_fu_798_p1 <= zext_ln48_reg_1187(5 - 1 downto 0);
    mul_ln48_2_fu_798_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_2_fu_798_p0) * unsigned(mul_ln48_2_fu_798_p1), 7));
    mul_ln48_fu_693_p0 <= zext_ln48_2_reg_1218(4 - 1 downto 0);
    mul_ln48_fu_693_p1 <= zext_ln48_reg_1187(5 - 1 downto 0);
    mul_ln48_fu_693_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_fu_693_p0) * unsigned(mul_ln48_fu_693_p1), 7));
    mul_ln4_fu_411_p0 <= mul_ln4_fu_411_p00(4 - 1 downto 0);
    mul_ln4_fu_411_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_58_fu_399_p1),8));
    mul_ln4_fu_411_p1 <= mul_ln4_fu_411_p10(4 - 1 downto 0);
    mul_ln4_fu_411_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_395_p1),8));
    mul_ln4_fu_411_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln4_fu_411_p0) * unsigned(mul_ln4_fu_411_p1), 8));
    out_d_fu_477_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4));
    out_h_fu_568_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln24_fu_488_p3));
    out_w_0_mid2_fu_580_p3 <= 
        ap_const_lv4_0 when (empty_60_fu_574_p2(0) = '1') else 
        ap_phi_mux_out_w_0_phi_fu_348_p4;
    out_w_fu_673_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(out_w_0_mid2_reg_1276));
    output_r_address0 <= zext_ln48_3_fu_1101_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= add_ln48_17_reg_1549;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1, icmp_ln23_reg_1228_pp0_iter1_reg)
    begin
        if (((icmp_ln23_reg_1228_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln24_10_fu_540_p3 <= 
        mul_ln40_18_fu_535_p2 when (icmp_ln32_fu_483_p2(0) = '1') else 
        mul_ln40_fu_457_p2;
    select_ln24_11_fu_802_p3 <= 
        mul_ln48_2_fu_798_p2 when (icmp_ln32_reg_1237(0) = '1') else 
        mul_ln48_reg_1360;
    select_ln24_12_fu_548_p3 <= 
        mul_ln40_18_fu_535_p2 when (icmp_ln32_fu_483_p2(0) = '1') else 
        tmp_0_0_fu_466_p2;
    select_ln24_13_fu_808_p3 <= 
        mul_ln48_2_fu_798_p2 when (icmp_ln32_reg_1237(0) = '1') else 
        tmp11_reg_1365;
    select_ln24_14_fu_561_p3 <= 
        icmp_ln33_reg_1213 when (icmp_ln32_fu_483_p2(0) = '1') else 
        icmp_ln33_2_fu_556_p2;
    select_ln24_8_fu_522_p3 <= 
        add_ln27_5_fu_516_p2 when (icmp_ln32_fu_483_p2(0) = '1') else 
        add_ln27_fu_451_p2;
    select_ln24_9_fu_898_p3 <= 
        out_d_reg_1232 when (icmp_ln32_reg_1237(0) = '1') else 
        out_d_0_reg_310;
    select_ln24_fu_488_p3 <= 
        ap_const_lv4_0 when (icmp_ln32_fu_483_p2(0) = '1') else 
        ap_phi_mux_out_h_0_phi_fu_337_p4;
    select_ln32_14_fu_957_p3 <= 
        ap_const_lv8_1 when (icmp_ln32_reg_1237(0) = '1') else 
        add_ln32_2_reg_1295;
    select_ln32_fu_904_p3 <= 
        out_h_reg_1271 when (select_ln24_14_reg_1265(0) = '1') else 
        select_ln24_reg_1245;
    shl_ln27_mid1_fu_508_p3 <= (trunc_ln27_2_fu_504_p1 & ap_const_lv3_0);
    shl_ln_fu_443_p3 <= (trunc_ln27_fu_439_p1 & ap_const_lv3_0);
    tmp10_0_0_mid2_fu_640_p0 <= zext_ln40_1_cast14_reg_1180(6 - 1 downto 0);
    tmp10_0_0_mid2_fu_640_p1 <= tmp10_0_0_mid2_fu_640_p10(7 - 1 downto 0);
    tmp10_0_0_mid2_fu_640_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_v_v_reg_1288),11));
    tmp10_0_0_mid2_fu_640_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_0_0_mid2_fu_640_p0) * unsigned(tmp10_0_0_mid2_fu_640_p1), 11));
    tmp10_0_0_mid2_v_v_fu_598_p3 <= 
        tmp_0_0_mid1_fu_592_p2 when (select_ln24_14_fu_561_p3(0) = '1') else 
        select_ln24_12_fu_548_p3;
    tmp10_1_0_mid2_fu_654_p0 <= zext_ln40_1_cast14_reg_1180(6 - 1 downto 0);
    tmp10_1_0_mid2_fu_654_p1 <= tmp10_1_0_mid2_fu_654_p10(7 - 1 downto 0);
    tmp10_1_0_mid2_fu_654_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_v_v_fu_645_p2),11));
    tmp10_1_0_mid2_fu_654_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_1_0_mid2_fu_654_p0) * unsigned(tmp10_1_0_mid2_fu_654_p1), 11));
    tmp10_1_0_mid2_v_v_fu_645_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp10_0_0_mid2_v_v_reg_1288));
    tmp10_2_0_mid2_fu_737_p0 <= zext_ln40_1_cast14_reg_1180(6 - 1 downto 0);
    tmp10_2_0_mid2_fu_737_p1 <= tmp10_2_0_mid2_fu_737_p10(7 - 1 downto 0);
    tmp10_2_0_mid2_fu_737_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_v_v_fu_728_p2),11));
    tmp10_2_0_mid2_fu_737_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_2_0_mid2_fu_737_p0) * unsigned(tmp10_2_0_mid2_fu_737_p1), 11));
    tmp10_2_0_mid2_v_v_fu_728_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(tmp10_0_0_mid2_v_v_reg_1288));
    tmp11_fu_697_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_reg_1223) + unsigned(mul_ln48_fu_693_p2));
    tmp11_mid1_fu_814_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_reg_1283) + unsigned(select_ln24_11_fu_802_p3));
    tmp12_mid2_v_v_fu_819_p3 <= 
        tmp11_mid1_fu_814_p2 when (select_ln24_14_reg_1265(0) = '1') else 
        select_ln24_13_fu_808_p3;
    tmp_0_0_fu_466_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_fu_462_p1) + unsigned(mul_ln40_fu_457_p2));
    tmp_0_0_mid1_fu_592_p2 <= std_logic_vector(unsigned(zext_ln40_2_cast_mid_fu_588_p1) + unsigned(select_ln24_10_fu_540_p3));
    tmp_2_fu_417_p3 <= (mul_ln4_fu_411_p2 & ap_const_lv3_0);
    trunc_ln27_2_fu_504_p1 <= out_d_fu_477_p2(3 - 1 downto 0);
    trunc_ln27_fu_439_p1 <= ap_phi_mux_out_d_0_phi_fu_314_p4(3 - 1 downto 0);
    zext_ln24_10_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_fu_615_p2),64));
    zext_ln24_11_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_10_fu_626_p2),64));
    zext_ln24_12_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_11_fu_708_p2),64));
    zext_ln24_13_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_12_fu_718_p2),64));
    zext_ln24_14_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_13_fu_778_p2),64));
    zext_ln24_15_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_14_fu_788_p2),64));
    zext_ln24_16_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_15_fu_878_p2),64));
    zext_ln24_17_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_16_fu_888_p2),64));
    zext_ln24_18_fu_971_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_9_reg_1453),64));
    zext_ln24_19_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_8_reg_1255),7));
    zext_ln24_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_8_fu_522_p3),64));
    zext_ln27_4_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_477_p2),6));
    zext_ln27_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),6));
    zext_ln40_13_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_mid2_reg_1276),11));
    zext_ln40_14_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_fu_662_p2),64));
    zext_ln40_15_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_fu_673_p2),11));
    zext_ln40_16_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_12_fu_682_p2),64));
    zext_ln40_17_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_13_fu_742_p2),11));
    zext_ln40_18_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_14_fu_751_p2),64));
    zext_ln40_19_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_15_fu_761_p2),64));
    zext_ln40_1_cast14_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    zext_ln40_20_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_16_fu_852_p2),64));
    zext_ln40_21_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_17_fu_861_p2),64));
    zext_ln40_22_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_18_fu_935_p2),64));
    zext_ln40_23_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_19_fu_944_p2),64));
    zext_ln40_24_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_20_reg_1484),64));
    zext_ln40_2_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_h_0_phi_fu_337_p4),7));
    zext_ln40_2_cast_mid_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_fu_568_p2),7));
    zext_ln40_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    zext_ln48_1_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    zext_ln48_2_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_out_d_0_phi_fu_314_p4),7));
    zext_ln48_3_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_reg_1544),64));
    zext_ln48_4_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_fu_477_p2),7));
    zext_ln48_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
end behav;
