-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv14_310 : STD_LOGIC_VECTOR (13 downto 0) := "00001100010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_0_b_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_0_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_b_s_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_0_w_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_0_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_w_s_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln24_fu_146_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln24_reg_338 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln24_fu_150_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln24_reg_343 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_d_fu_162_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln37_2_cast_fu_182_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln37_2_cast_reg_366 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln31_fu_186_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln31_reg_371 : STD_LOGIC_VECTOR (18 downto 0);
    signal out_h_fu_196_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_reg_379 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_ln37_fu_226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln37_reg_384 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln31_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_fu_238_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_392 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln33_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_fu_266_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln43_reg_402 : STD_LOGIC_VECTOR (14 downto 0);
    signal input_load_reg_407 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_reg_412 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal out_d_0_reg_102 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_113 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_h_0_reg_124 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_0_reg_135 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln25_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_4_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln26_fu_173_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_202_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln37_1_fu_214_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln37_2_fu_210_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln37_5_fu_222_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_fu_244_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln37_fu_248_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln37_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln43_fu_262_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln37_fu_332_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln37_14_fu_283_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal buffer_fu_286_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln42_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln42_fu_309_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln42_fu_299_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln43_1_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_fu_332_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component network_mul_mul_16s_14s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component pointwise_conv2d_fix_SeparableConv2D_0_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component pointwise_conv2d_fix_SeparableConv2D_0_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    SeparableConv2D_0_b_s_U : component pointwise_conv2d_fix_SeparableConv2D_0_b_s
    generic map (
        DataWidth => 14,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_0_b_s_address0,
        ce0 => SeparableConv2D_0_b_s_ce0,
        q0 => SeparableConv2D_0_b_s_q0);

    SeparableConv2D_0_w_s_U : component pointwise_conv2d_fix_SeparableConv2D_0_w_s
    generic map (
        DataWidth => 14,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_0_w_s_address0,
        ce0 => SeparableConv2D_0_w_s_ce0,
        q0 => SeparableConv2D_0_w_s_q0);

    network_mul_mul_16s_14s_30_1_1_U11 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => input_load_reg_407,
        din1 => mul_ln37_fu_332_p1,
        dout => mul_ln37_fu_332_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_d_0_reg_102 <= out_d_reg_351;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_0_reg_102 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_0_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln33_fu_232_p2 = ap_const_lv1_1))) then 
                out_h_0_reg_124 <= out_h_reg_379;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_0_reg_124 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_0_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_w_0_reg_135 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                out_w_0_reg_135 <= out_w_reg_392;
            end if; 
        end if;
    end process;

    phi_mul_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_113 <= add_ln24_reg_343;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_113 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln24_reg_343 <= add_ln24_fu_150_p2;
                out_d_reg_351 <= out_d_fu_162_p2;
                    zext_ln24_reg_338(13 downto 0) <= zext_ln24_fu_146_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln43_reg_402 <= add_ln43_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_load_reg_407 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_reg_379 <= out_h_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_reg_392 <= out_w_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sext_ln31_reg_371 <= sext_ln31_fu_186_p1;
                sext_ln37_2_cast_reg_366 <= sext_ln37_2_cast_fu_182_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    sub_ln37_reg_384(10 downto 2) <= sub_ln37_fu_226_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_reg_412 <= mul_ln37_fu_332_p2(29 downto 13);
            end if;
        end if;
    end process;
    zext_ln24_reg_338(14) <= '0';
    sub_ln37_reg_384(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_156_p2, ap_CS_fsm_state4, icmp_ln31_fu_190_p2, ap_CS_fsm_state5, icmp_ln33_fu_232_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln24_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln31_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln33_fu_232_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    SeparableConv2D_0_b_s_address0 <= zext_ln25_fu_168_p1(4 - 1 downto 0);

    SeparableConv2D_0_b_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_0_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_0_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SeparableConv2D_0_w_s_address0 <= zext_ln28_1_fu_177_p1(4 - 1 downto 0);

    SeparableConv2D_0_w_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_0_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_0_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln24_fu_150_p2 <= std_logic_vector(unsigned(phi_mul_reg_113) + unsigned(ap_const_lv14_310));
    add_ln37_fu_248_p2 <= std_logic_vector(unsigned(zext_ln35_fu_244_p1) + unsigned(sub_ln37_reg_384));
    add_ln43_fu_266_p2 <= std_logic_vector(unsigned(zext_ln24_reg_338) + unsigned(sext_ln43_fu_262_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln24_fu_156_p2)
    begin
        if ((((icmp_ln24_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln24_fu_156_p2)
    begin
        if (((icmp_ln24_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_fu_286_p2 <= std_logic_vector(signed(sext_ln37_14_fu_283_p1) + signed(sext_ln31_reg_371));
    icmp_ln24_fu_156_p2 <= "1" when (out_d_0_reg_102 = ap_const_lv5_10) else "0";
    icmp_ln31_fu_190_p2 <= "1" when (out_h_0_reg_124 = ap_const_lv5_1C) else "0";
    icmp_ln33_fu_232_p2 <= "1" when (out_w_0_reg_135 = ap_const_lv5_1C) else "0";
    input_r_address0 <= zext_ln37_4_fu_257_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln37_fu_332_p1 <= sext_ln37_2_cast_reg_366(14 - 1 downto 0);
    out_d_fu_162_p2 <= std_logic_vector(unsigned(out_d_0_reg_102) + unsigned(ap_const_lv5_1));
    out_h_fu_196_p2 <= std_logic_vector(unsigned(out_h_0_reg_124) + unsigned(ap_const_lv5_1));
    out_w_fu_238_p2 <= std_logic_vector(unsigned(out_w_0_reg_135) + unsigned(ap_const_lv5_1));
    output_r_address0 <= zext_ln43_fu_327_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= (trunc_ln42_fu_299_p1 and select_ln42_fu_309_p3);

    output_r_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln42_fu_309_p3 <= 
        ap_const_lv16_FFFF when (xor_ln42_fu_303_p2(0) = '1') else 
        ap_const_lv16_0;
        sext_ln31_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_0_b_s_q0),19));

        sext_ln37_14_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_412),19));

        sext_ln37_2_cast_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_0_w_s_q0),30));

        sext_ln37_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_fu_248_p2),32));

        sext_ln43_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln43_reg_402),32));

        sext_ln43_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln37_fu_248_p2),15));

    shl_ln37_1_fu_214_p3 <= (out_h_0_reg_124 & ap_const_lv2_0);
    shl_ln_fu_202_p3 <= (out_h_0_reg_124 & ap_const_lv5_0);
    sub_ln37_fu_226_p2 <= std_logic_vector(unsigned(zext_ln37_2_fu_210_p1) - unsigned(zext_ln37_5_fu_222_p1));
    tmp_4_fu_291_p3 <= buffer_fu_286_p2(18 downto 18);
    trunc_ln26_fu_173_p1 <= out_d_0_reg_102(4 - 1 downto 0);
    trunc_ln42_fu_299_p1 <= buffer_fu_286_p2(16 - 1 downto 0);
    xor_ln42_fu_303_p2 <= (tmp_4_fu_291_p3 xor ap_const_lv1_1);
    zext_ln24_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_113),15));
    zext_ln25_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_0_reg_102),64));
    zext_ln28_1_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln26_fu_173_p1),64));
    zext_ln35_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_0_reg_135),11));
    zext_ln37_2_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_202_p3),11));
    zext_ln37_4_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln37_fu_253_p1),64));
    zext_ln37_5_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln37_1_fu_214_p3),11));
    zext_ln43_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln43_1_fu_324_p1),64));
end behav;
