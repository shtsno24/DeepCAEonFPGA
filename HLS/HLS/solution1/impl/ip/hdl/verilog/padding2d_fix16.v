// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_pp1_stage0 = 10'd64;
parameter    ap_ST_fsm_state9 = 10'd128;
parameter    ap_ST_fsm_state10 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [13:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [15:0] output_r_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;
reg[13:0] output_r_address1;
reg output_r_ce1;
reg output_r_we1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] o_count_3_reg_286;
reg   [13:0] i_count_2_reg_297;
wire  signed [6:0] sext_ln5_1_fu_316_p1;
reg  signed [6:0] sext_ln5_1_reg_630;
wire   [4:0] trunc_ln13_fu_320_p1;
reg   [4:0] trunc_ln13_reg_635;
wire   [4:0] add_ln13_fu_324_p2;
reg   [4:0] add_ln13_reg_642;
wire   [11:0] mul_ln13_1_fu_338_p2;
reg   [11:0] mul_ln13_1_reg_647;
wire   [9:0] empty_fu_344_p1;
reg   [9:0] empty_reg_652;
wire   [4:0] trunc_ln13_1_fu_348_p1;
reg   [4:0] trunc_ln13_1_reg_657;
wire   [4:0] trunc_ln24_fu_352_p1;
reg   [4:0] trunc_ln24_reg_662;
wire   [13:0] zext_ln13_fu_359_p1;
reg   [13:0] zext_ln13_reg_667;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln13_2_fu_362_p1;
reg   [13:0] zext_ln13_2_reg_673;
wire   [13:0] mul_ln13_fu_369_p2;
reg   [13:0] mul_ln13_reg_678;
wire   [15:0] zext_ln13_5_fu_375_p1;
reg   [15:0] zext_ln13_5_reg_683;
wire   [4:0] empty_35_fu_378_p2;
wire   [15:0] p_cast9_fu_383_p1;
reg   [15:0] p_cast9_reg_693;
wire   [13:0] p_cast6_fu_395_p1;
wire   [15:0] p_cast5_fu_404_p1;
reg   [15:0] p_cast5_reg_703;
wire   [13:0] zext_ln13_6_fu_423_p1;
reg   [13:0] zext_ln13_6_reg_708;
wire   [13:0] zext_ln13_7_fu_432_p1;
wire   [4:0] add_ln13_8_fu_446_p2;
wire   [4:0] add_ln13_9_fu_452_p2;
reg   [4:0] add_ln13_9_reg_724;
wire   [4:0] trunc_ln13_2_fu_458_p1;
reg   [4:0] trunc_ln13_2_reg_730;
wire   [0:0] icmp_ln13_fu_462_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] depth_fu_467_p2;
reg   [4:0] depth_reg_739;
wire   [15:0] add_ln21_fu_488_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln16_fu_477_p2;
wire   [13:0] i_count_fu_494_p2;
reg   [13:0] i_count_reg_752;
wire    ap_CS_fsm_state5;
wire   [15:0] add_ln24_1_fu_504_p2;
reg   [15:0] add_ln24_1_reg_757;
wire   [0:0] icmp_ln24_fu_509_p2;
wire    ap_CS_fsm_state6;
wire   [4:0] height_fu_514_p2;
reg   [4:0] height_reg_767;
wire   [13:0] add_ln32_fu_520_p2;
reg   [13:0] add_ln32_reg_772;
wire   [15:0] add_ln21_1_fu_525_p2;
reg   [15:0] add_ln21_1_reg_777;
wire   [0:0] icmp_ln27_fu_529_p2;
reg   [0:0] icmp_ln27_reg_782;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [13:0] add_ln32_1_fu_540_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [13:0] o_count_6_fu_546_p2;
reg   [13:0] o_count_6_reg_796;
wire   [13:0] add_ln21_2_fu_557_p2;
wire    ap_CS_fsm_state9;
wire   [13:0] add_ln24_3_fu_578_p2;
wire   [15:0] o_count_4_fu_598_p2;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln45_fu_587_p2;
wire   [13:0] add_ln13_6_fu_604_p2;
wire    ap_CS_fsm_state11;
wire   [13:0] add_ln13_7_fu_609_p2;
wire   [4:0] add_ln13_11_fu_614_p2;
wire   [4:0] add_ln13_12_fu_619_p2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
reg    ap_enable_reg_pp1_iter1;
reg   [4:0] indvars_iv2_reg_157;
reg   [4:0] indvars_iv_reg_167;
reg   [13:0] phi_ln13_reg_177;
reg   [13:0] indvars_iv10_reg_187;
reg   [15:0] o_count_0_reg_197;
reg   [13:0] i_count_0_reg_209;
reg   [4:0] depth_0_reg_221;
reg   [15:0] o_count_1_reg_232;
reg   [13:0] o_count_reg_242;
reg   [13:0] o_count_2_reg_253;
reg   [13:0] i_count_1_reg_264;
reg   [4:0] height_0_reg_275;
reg   [13:0] ap_phi_mux_o_count_3_phi_fu_289_p4;
wire    ap_block_pp1_stage0;
reg   [15:0] o_count_5_reg_307;
wire   [63:0] zext_ln20_fu_483_p1;
wire   [63:0] zext_ln31_fu_535_p1;
wire   [63:0] zext_ln31_1_fu_552_p1;
wire   [63:0] zext_ln40_fu_562_p1;
wire   [63:0] zext_ln40_1_fu_573_p1;
wire   [63:0] zext_ln49_fu_593_p1;
wire  signed [5:0] sext_ln5_1_fu_316_p0;
wire  signed [5:0] trunc_ln13_fu_320_p0;
wire   [6:0] mul_ln13_1_fu_338_p0;
wire   [4:0] mul_ln13_1_fu_338_p1;
wire  signed [5:0] trunc_ln24_fu_352_p0;
wire  signed [5:0] sext_ln5_fu_356_p0;
wire  signed [6:0] sext_ln5_fu_356_p1;
wire   [6:0] mul_ln13_fu_369_p0;
wire   [6:0] mul_ln13_fu_369_p1;
wire   [4:0] empty_36_fu_399_p2;
wire   [9:0] p_cast7_fu_391_p1;
wire   [9:0] p_cast4_fu_408_p1;
wire   [9:0] add_ln13_1_fu_412_p2;
wire   [9:0] add_ln13_2_fu_417_p2;
wire  signed [5:0] add_ln13_3_fu_427_p0;
wire   [5:0] p_cast8_fu_387_p1;
wire   [5:0] add_ln13_3_fu_427_p2;
wire   [4:0] add_ln13_4_fu_436_p2;
wire   [4:0] add_ln13_5_fu_441_p2;
wire   [4:0] trunc_ln16_fu_473_p1;
wire   [15:0] add_ln24_fu_499_p2;
wire   [13:0] add_ln41_fu_567_p2;
wire   [4:0] trunc_ln45_fu_583_p1;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [11:0] mul_ln13_1_fu_338_p00;
wire   [11:0] mul_ln13_1_fu_338_p10;
wire   [13:0] mul_ln13_fu_369_p00;
wire   [13:0] mul_ln13_fu_369_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_509_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state7))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_509_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_0_reg_221 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        depth_0_reg_221 <= depth_reg_739;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        height_0_reg_275 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        height_0_reg_275 <= height_reg_767;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_0_reg_209 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_count_0_reg_209 <= i_count_reg_752;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_count_1_reg_264 <= i_count_0_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_count_1_reg_264 <= add_ln32_reg_772;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln27_fu_529_p2 == 1'd0))) begin
        i_count_2_reg_297 <= add_ln32_1_fu_540_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_509_p2 == 1'd0))) begin
        i_count_2_reg_297 <= i_count_1_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv10_reg_187 <= p_cast6_fu_395_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvars_iv10_reg_187 <= add_ln13_6_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv2_reg_157 <= empty_35_fu_378_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvars_iv2_reg_157 <= add_ln13_12_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_167 <= add_ln13_8_fu_446_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        indvars_iv_reg_167 <= add_ln13_11_fu_614_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_count_0_reg_197 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        o_count_0_reg_197 <= add_ln21_1_reg_777;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_477_p2 == 1'd0))) begin
        o_count_1_reg_232 <= add_ln21_fu_488_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_462_p2 == 1'd0))) begin
        o_count_1_reg_232 <= o_count_0_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o_count_2_reg_253 <= indvars_iv10_reg_187;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        o_count_2_reg_253 <= add_ln21_2_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln27_reg_782 == 1'd0))) begin
        o_count_3_reg_286 <= o_count_6_reg_796;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_509_p2 == 1'd0))) begin
        o_count_3_reg_286 <= o_count_2_reg_253;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln45_fu_587_p2 == 1'd0))) begin
        o_count_5_reg_307 <= o_count_4_fu_598_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_509_p2 == 1'd1))) begin
        o_count_5_reg_307 <= add_ln24_1_reg_757;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o_count_reg_242 <= phi_ln13_reg_177;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        o_count_reg_242 <= add_ln24_3_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln13_reg_177 <= zext_ln13_7_fu_432_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_ln13_reg_177 <= add_ln13_7_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln13_9_reg_724 <= add_ln13_9_fu_452_p2;
        mul_ln13_reg_678 <= mul_ln13_fu_369_p2;
        p_cast5_reg_703[4 : 0] <= p_cast5_fu_404_p1[4 : 0];
        p_cast9_reg_693[4 : 0] <= p_cast9_fu_383_p1[4 : 0];
        trunc_ln13_2_reg_730 <= trunc_ln13_2_fu_458_p1;
        zext_ln13_2_reg_673[6 : 0] <= zext_ln13_2_fu_362_p1[6 : 0];
        zext_ln13_5_reg_683[11 : 0] <= zext_ln13_5_fu_375_p1[11 : 0];
        zext_ln13_6_reg_708[9 : 0] <= zext_ln13_6_fu_423_p1[9 : 0];
        zext_ln13_reg_667[4 : 0] <= zext_ln13_fu_359_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln13_reg_642 <= add_ln13_fu_324_p2;
        empty_reg_652 <= empty_fu_344_p1;
        mul_ln13_1_reg_647 <= mul_ln13_1_fu_338_p2;
        sext_ln5_1_reg_630 <= sext_ln5_1_fu_316_p1;
        trunc_ln13_1_reg_657 <= trunc_ln13_1_fu_348_p1;
        trunc_ln13_reg_635 <= trunc_ln13_fu_320_p1;
        trunc_ln24_reg_662 <= trunc_ln24_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_509_p2 == 1'd1))) begin
        add_ln21_1_reg_777 <= add_ln21_1_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln24_1_reg_757 <= add_ln24_1_fu_504_p2;
        i_count_reg_752 <= i_count_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_509_p2 == 1'd0))) begin
        add_ln32_reg_772 <= add_ln32_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_reg_739 <= depth_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        height_reg_767 <= height_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln27_reg_782 <= icmp_ln27_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln27_fu_529_p2 == 1'd0))) begin
        o_count_6_reg_796 <= o_count_6_fu_546_p2;
    end
end

always @ (*) begin
    if ((icmp_ln27_fu_529_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_462_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln27_reg_782 == 1'd0))) begin
        ap_phi_mux_o_count_3_phi_fu_289_p4 = o_count_6_reg_796;
    end else begin
        ap_phi_mux_o_count_3_phi_fu_289_p4 = o_count_3_reg_286;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_462_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = zext_ln40_fu_562_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_r_address0 = zext_ln31_1_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = zext_ln20_fu_483_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_address1 = zext_ln49_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address1 = zext_ln40_1_fu_573_p1;
    end else begin
        output_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_ce1 = 1'b1;
    end else begin
        output_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln27_reg_782 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_477_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (icmp_ln45_fu_587_p2 == 1'd0)))) begin
        output_r_we1 = 1'b1;
    end else begin
        output_r_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_462_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_477_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_509_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln27_fu_529_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln27_fu_529_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln45_fu_587_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_11_fu_614_p2 = (add_ln13_9_reg_724 + indvars_iv_reg_167);

assign add_ln13_12_fu_619_p2 = (add_ln13_9_reg_724 + indvars_iv2_reg_157);

assign add_ln13_1_fu_412_p2 = (empty_reg_652 + p_cast7_fu_391_p1);

assign add_ln13_2_fu_417_p2 = (p_cast4_fu_408_p1 + add_ln13_1_fu_412_p2);

assign add_ln13_3_fu_427_p0 = input_width;

assign add_ln13_3_fu_427_p2 = ($signed(add_ln13_3_fu_427_p0) + $signed(p_cast8_fu_387_p1));

assign add_ln13_4_fu_436_p2 = (empty_35_fu_378_p2 + trunc_ln13_1_reg_657);

assign add_ln13_5_fu_441_p2 = (add_ln13_4_fu_436_p2 + trunc_ln13_reg_635);

assign add_ln13_6_fu_604_p2 = (zext_ln13_6_reg_708 + indvars_iv10_reg_187);

assign add_ln13_7_fu_609_p2 = (zext_ln13_6_reg_708 + phi_ln13_reg_177);

assign add_ln13_8_fu_446_p2 = (5'd1 + add_ln13_5_fu_441_p2);

assign add_ln13_9_fu_452_p2 = (empty_36_fu_399_p2 + add_ln13_4_fu_436_p2);

assign add_ln13_fu_324_p2 = (5'd2 + trunc_ln13_fu_320_p1);

assign add_ln21_1_fu_525_p2 = (add_ln24_1_reg_757 + p_cast5_reg_703);

assign add_ln21_2_fu_557_p2 = (zext_ln13_reg_667 + o_count_2_reg_253);

assign add_ln21_fu_488_p2 = (o_count_1_reg_232 + 16'd1);

assign add_ln24_1_fu_504_p2 = (add_ln24_fu_499_p2 + zext_ln13_5_reg_683);

assign add_ln24_3_fu_578_p2 = (zext_ln13_reg_667 + o_count_reg_242);

assign add_ln24_fu_499_p2 = (p_cast9_reg_693 + o_count_0_reg_197);

assign add_ln32_1_fu_540_p2 = (i_count_2_reg_297 + 14'd1);

assign add_ln32_fu_520_p2 = (zext_ln13_2_reg_673 + i_count_1_reg_264);

assign add_ln41_fu_567_p2 = (o_count_reg_242 + 14'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign depth_fu_467_p2 = (depth_0_reg_221 + 5'd1);

assign empty_35_fu_378_p2 = (5'd3 + trunc_ln13_reg_635);

assign empty_36_fu_399_p2 = (5'd1 + trunc_ln13_reg_635);

assign empty_fu_344_p1 = mul_ln13_1_fu_338_p2[9:0];

assign height_fu_514_p2 = (height_0_reg_275 + 5'd1);

assign i_count_fu_494_p2 = (mul_ln13_reg_678 + i_count_0_reg_209);

assign icmp_ln13_fu_462_p2 = ((depth_0_reg_221 == trunc_ln13_2_reg_730) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_477_p2 = ((trunc_ln16_fu_473_p1 == indvars_iv2_reg_157) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_509_p2 = ((height_0_reg_275 == trunc_ln24_reg_662) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_529_p2 = ((ap_phi_mux_o_count_3_phi_fu_289_p4 == o_count_reg_242) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_587_p2 = ((trunc_ln45_fu_583_p1 == indvars_iv_reg_167) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln31_fu_535_p1;

assign mul_ln13_1_fu_338_p0 = mul_ln13_1_fu_338_p00;

assign mul_ln13_1_fu_338_p00 = $unsigned(sext_ln5_1_fu_316_p1);

assign mul_ln13_1_fu_338_p1 = mul_ln13_1_fu_338_p10;

assign mul_ln13_1_fu_338_p10 = add_ln13_fu_324_p2;

assign mul_ln13_1_fu_338_p2 = (mul_ln13_1_fu_338_p0 * mul_ln13_1_fu_338_p1);

assign mul_ln13_fu_369_p0 = mul_ln13_fu_369_p00;

assign mul_ln13_fu_369_p00 = $unsigned(sext_ln5_1_reg_630);

assign mul_ln13_fu_369_p1 = mul_ln13_fu_369_p10;

assign mul_ln13_fu_369_p10 = $unsigned(sext_ln5_fu_356_p1);

assign mul_ln13_fu_369_p2 = (mul_ln13_fu_369_p0 * mul_ln13_fu_369_p1);

assign o_count_4_fu_598_p2 = (o_count_5_reg_307 + 16'd1);

assign o_count_6_fu_546_p2 = (ap_phi_mux_o_count_3_phi_fu_289_p4 + 14'd1);

assign output_r_d1 = 16'd0;

assign p_cast4_fu_408_p1 = empty_36_fu_399_p2;

assign p_cast5_fu_404_p1 = empty_36_fu_399_p2;

assign p_cast6_fu_395_p1 = empty_35_fu_378_p2;

assign p_cast7_fu_391_p1 = empty_35_fu_378_p2;

assign p_cast8_fu_387_p1 = empty_35_fu_378_p2;

assign p_cast9_fu_383_p1 = empty_35_fu_378_p2;

assign sext_ln5_1_fu_316_p0 = input_height;

assign sext_ln5_1_fu_316_p1 = sext_ln5_1_fu_316_p0;

assign sext_ln5_fu_356_p0 = input_width;

assign sext_ln5_fu_356_p1 = sext_ln5_fu_356_p0;

assign trunc_ln13_1_fu_348_p1 = mul_ln13_1_fu_338_p2[4:0];

assign trunc_ln13_2_fu_458_p1 = input_depth[4:0];

assign trunc_ln13_fu_320_p0 = input_width;

assign trunc_ln13_fu_320_p1 = trunc_ln13_fu_320_p0[4:0];

assign trunc_ln16_fu_473_p1 = o_count_1_reg_232[4:0];

assign trunc_ln24_fu_352_p0 = input_height;

assign trunc_ln24_fu_352_p1 = trunc_ln24_fu_352_p0[4:0];

assign trunc_ln45_fu_583_p1 = o_count_5_reg_307[4:0];

assign zext_ln13_2_fu_362_p1 = $unsigned(sext_ln5_fu_356_p1);

assign zext_ln13_5_fu_375_p1 = mul_ln13_1_reg_647;

assign zext_ln13_6_fu_423_p1 = add_ln13_2_fu_417_p2;

assign zext_ln13_7_fu_432_p1 = add_ln13_3_fu_427_p2;

assign zext_ln13_fu_359_p1 = add_ln13_reg_642;

assign zext_ln20_fu_483_p1 = o_count_1_reg_232;

assign zext_ln31_1_fu_552_p1 = o_count_3_reg_286;

assign zext_ln31_fu_535_p1 = i_count_2_reg_297;

assign zext_ln40_1_fu_573_p1 = add_ln41_fu_567_p2;

assign zext_ln40_fu_562_p1 = o_count_reg_242;

assign zext_ln49_fu_593_p1 = o_count_5_reg_307;

always @ (posedge ap_clk) begin
    zext_ln13_reg_667[13:5] <= 9'b000000000;
    zext_ln13_2_reg_673[13:7] <= 7'b0000000;
    zext_ln13_5_reg_683[15:12] <= 4'b0000;
    p_cast9_reg_693[15:5] <= 11'b00000000000;
    p_cast5_reg_703[15:5] <= 11'b00000000000;
    zext_ln13_6_reg_708[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
