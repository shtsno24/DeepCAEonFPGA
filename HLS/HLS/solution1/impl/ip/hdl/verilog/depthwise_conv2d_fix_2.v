// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_0_address0,
        kernel_0_ce0,
        kernel_0_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [7:0] kernel_0_address0;
output   kernel_0_ce0;
input  [15:0] kernel_0_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg kernel_0_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] zext_ln28_fu_242_p1;
reg   [8:0] zext_ln28_reg_518;
wire   [13:0] zext_ln28_1_cast_fu_246_p1;
reg   [13:0] zext_ln28_1_cast_reg_523;
wire   [8:0] zext_ln36_fu_250_p1;
reg   [8:0] zext_ln36_reg_528;
wire   [13:0] zext_ln36_1_cast_fu_254_p1;
reg   [13:0] zext_ln36_1_cast_reg_533;
wire   [4:0] empty_fu_258_p1;
reg   [4:0] empty_reg_538;
wire   [4:0] empty_51_fu_262_p1;
reg   [4:0] empty_51_reg_543;
wire   [8:0] add_ln19_fu_266_p2;
reg   [8:0] add_ln19_reg_548;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln19_2_fu_271_p2;
reg   [8:0] add_ln19_2_reg_553;
wire   [4:0] out_d_fu_282_p2;
reg   [4:0] out_d_reg_561;
reg   [3:0] bias_addr_reg_566;
wire   [0:0] icmp_ln19_fu_276_p2;
wire   [8:0] zext_ln28_1_fu_305_p1;
reg   [8:0] zext_ln28_1_reg_571;
wire   [4:0] out_h_fu_314_p2;
reg   [4:0] out_h_reg_579;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp3_fu_334_p2;
reg   [13:0] tmp3_reg_584;
wire   [0:0] icmp_ln20_fu_309_p2;
wire   [4:0] out_w_fu_344_p2;
reg   [4:0] out_w_reg_592;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [13:0] zext_ln24_fu_350_p1;
reg   [13:0] zext_ln24_reg_602;
wire   [1:0] k_h_fu_360_p2;
reg   [1:0] k_h_reg_610;
wire    ap_CS_fsm_state6;
wire   [13:0] tmp1_fu_412_p2;
reg   [13:0] tmp1_reg_615;
wire   [0:0] icmp_ln24_fu_354_p2;
wire   [8:0] add_ln28_1_fu_417_p2;
reg   [8:0] add_ln28_1_reg_620;
wire   [1:0] k_w_fu_437_p2;
reg   [1:0] k_w_reg_628;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln26_fu_431_p2;
reg  signed [15:0] input_load_reg_643;
wire    ap_CS_fsm_state8;
reg  signed [15:0] kernel_0_load_reg_648;
reg   [15:0] trunc_ln_reg_653;
wire    ap_CS_fsm_state9;
wire   [15:0] buffer_6_fu_506_p2;
wire    ap_CS_fsm_state10;
reg   [4:0] out_d_0_reg_133;
reg   [8:0] phi_mul_reg_145;
reg   [8:0] phi_mul2_reg_157;
reg   [4:0] out_h_0_reg_169;
wire   [0:0] icmp_ln21_fu_339_p2;
reg   [4:0] out_w_0_reg_181;
reg   [15:0] buffer_0_reg_193;
reg   [1:0] k_h_0_reg_204;
reg   [15:0] buffer_1_reg_215;
reg   [1:0] k_w_0_reg_227;
wire   [63:0] zext_ln23_fu_288_p1;
wire   [63:0] zext_ln36_1_fu_426_p1;
wire   [63:0] zext_ln28_6_fu_462_p1;
wire   [63:0] zext_ln28_8_fu_486_p1;
wire  signed [6:0] sext_ln5_fu_238_p1;
wire   [3:0] trunc_ln28_fu_293_p1;
wire   [6:0] shl_ln_fu_297_p3;
wire   [8:0] zext_ln28_3_cast_fu_320_p1;
wire   [8:0] tmp2_fu_324_p2;
wire   [8:0] tmp3_fu_334_p0;
wire   [5:0] tmp3_fu_334_p1;
wire   [3:0] shl_ln28_2_fu_370_p3;
wire   [4:0] zext_ln28_3_fu_378_p1;
wire   [4:0] zext_ln28_2_fu_366_p1;
wire   [4:0] sub_ln28_fu_382_p2;
wire   [4:0] tmp4_fu_392_p2;
wire   [8:0] tmp4_cast_fu_398_p1;
wire   [8:0] tmp_fu_402_p2;
wire   [6:0] tmp1_fu_412_p0;
wire   [8:0] tmp1_fu_412_p1;
wire  signed [8:0] sext_ln28_1_fu_388_p1;
wire   [13:0] add_ln36_fu_422_p2;
wire   [4:0] zext_ln28_4_fu_443_p1;
wire   [4:0] add_ln28_fu_447_p2;
wire   [13:0] zext_ln28_5_fu_453_p1;
wire   [13:0] add_ln28_2_fu_457_p2;
wire   [4:0] add_ln28_3_fu_467_p2;
wire   [8:0] zext_ln28_7_fu_473_p1;
wire   [8:0] add_ln28_4_fu_477_p2;
wire  signed [31:0] sext_ln28_2_fu_482_p1;
wire  signed [29:0] mul_ln28_fu_511_p2;
reg   [9:0] ap_NS_fsm;
wire   [13:0] tmp1_fu_412_p10;
wire   [13:0] tmp3_fu_334_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U23(
    .din0(kernel_0_load_reg_648),
    .din1(input_load_reg_643),
    .dout(mul_ln28_fu_511_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln26_fu_431_p2 == 1'd1))) begin
        buffer_0_reg_193 <= buffer_1_reg_215;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_0_reg_193 <= bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        buffer_1_reg_215 <= buffer_0_reg_193;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buffer_1_reg_215 <= buffer_6_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln26_fu_431_p2 == 1'd1))) begin
        k_h_0_reg_204 <= k_h_reg_610;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_h_0_reg_204 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k_w_0_reg_227 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        k_w_0_reg_227 <= k_w_reg_628;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_309_p2 == 1'd1))) begin
        out_d_0_reg_133 <= out_d_reg_561;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_133 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_339_p2 == 1'd1))) begin
        out_h_0_reg_169 <= out_h_reg_579;
    end else if (((icmp_ln19_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_h_0_reg_169 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_w_0_reg_181 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_354_p2 == 1'd1))) begin
        out_w_0_reg_181 <= out_w_reg_592;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_309_p2 == 1'd1))) begin
        phi_mul2_reg_157 <= add_ln19_reg_548;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_157 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_309_p2 == 1'd1))) begin
        phi_mul_reg_145 <= add_ln19_2_reg_553;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_145 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln19_2_reg_553 <= add_ln19_2_fu_271_p2;
        add_ln19_reg_548 <= add_ln19_fu_266_p2;
        out_d_reg_561 <= out_d_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln28_1_reg_620 <= add_ln28_1_fu_417_p2;
        tmp1_reg_615 <= tmp1_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bias_addr_reg_566 <= zext_ln23_fu_288_p1;
        zext_ln28_1_reg_571[6 : 3] <= zext_ln28_1_fu_305_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_51_reg_543 <= empty_51_fu_262_p1;
        empty_reg_538 <= empty_fu_258_p1;
        zext_ln28_1_cast_reg_523[6 : 0] <= zext_ln28_1_cast_fu_246_p1[6 : 0];
        zext_ln28_reg_518[6 : 0] <= zext_ln28_fu_242_p1[6 : 0];
        zext_ln36_1_cast_reg_533[5 : 0] <= zext_ln36_1_cast_fu_254_p1[5 : 0];
        zext_ln36_reg_528[5 : 0] <= zext_ln36_fu_250_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_load_reg_643 <= input_r_q0;
        kernel_0_load_reg_648 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_h_reg_610 <= k_h_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_w_reg_628 <= k_w_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_579 <= out_h_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_592 <= out_w_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp3_reg_584 <= tmp3_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        trunc_ln_reg_653 <= {{mul_ln28_fu_511_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        zext_ln24_reg_602[4 : 0] <= zext_ln24_fu_350_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln19_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_0_ce0 = 1'b1;
    end else begin
        kernel_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_354_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_309_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_339_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln26_fu_431_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_2_fu_271_p2 = (phi_mul_reg_145 + zext_ln28_reg_518);

assign add_ln19_fu_266_p2 = (phi_mul2_reg_157 + zext_ln36_reg_528);

assign add_ln28_1_fu_417_p2 = ($signed(sext_ln28_1_fu_388_p1) + $signed(zext_ln28_1_reg_571));

assign add_ln28_2_fu_457_p2 = (zext_ln28_5_fu_453_p1 + tmp1_reg_615);

assign add_ln28_3_fu_467_p2 = (out_d_0_reg_133 + zext_ln28_4_fu_443_p1);

assign add_ln28_4_fu_477_p2 = (zext_ln28_7_fu_473_p1 + add_ln28_1_reg_620);

assign add_ln28_fu_447_p2 = (zext_ln28_4_fu_443_p1 + out_w_0_reg_181);

assign add_ln36_fu_422_p2 = (tmp3_reg_584 + zext_ln24_reg_602);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_566;

assign buffer_6_fu_506_p2 = (trunc_ln_reg_653 + buffer_1_reg_215);

assign empty_51_fu_262_p1 = output_height[4:0];

assign empty_fu_258_p1 = output_width[4:0];

assign icmp_ln19_fu_276_p2 = ((out_d_0_reg_133 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_309_p2 = ((out_h_0_reg_169 == empty_51_reg_543) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_339_p2 = ((out_w_0_reg_181 == empty_reg_538) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_354_p2 = ((k_h_0_reg_204 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_431_p2 = ((k_w_0_reg_227 == 2'd3) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln28_6_fu_462_p1;

assign k_h_fu_360_p2 = (k_h_0_reg_204 + 2'd1);

assign k_w_fu_437_p2 = (k_w_0_reg_227 + 2'd1);

assign kernel_0_address0 = zext_ln28_8_fu_486_p1;

assign out_d_fu_282_p2 = (out_d_0_reg_133 + 5'd1);

assign out_h_fu_314_p2 = (out_h_0_reg_169 + 5'd1);

assign out_w_fu_344_p2 = (out_w_0_reg_181 + 5'd1);

assign output_r_address0 = zext_ln36_1_fu_426_p1;

assign output_r_d0 = buffer_0_reg_193;

assign sext_ln28_1_fu_388_p1 = $signed(sub_ln28_fu_382_p2);

assign sext_ln28_2_fu_482_p1 = $signed(add_ln28_4_fu_477_p2);

assign sext_ln5_fu_238_p1 = $signed(input_width);

assign shl_ln28_2_fu_370_p3 = {{k_h_0_reg_204}, {2'd0}};

assign shl_ln_fu_297_p3 = {{trunc_ln28_fu_293_p1}, {3'd0}};

assign sub_ln28_fu_382_p2 = (zext_ln28_3_fu_378_p1 - zext_ln28_2_fu_366_p1);

assign tmp1_fu_412_p0 = zext_ln28_1_cast_reg_523;

assign tmp1_fu_412_p1 = tmp1_fu_412_p10;

assign tmp1_fu_412_p10 = tmp_fu_402_p2;

assign tmp1_fu_412_p2 = (tmp1_fu_412_p0 * tmp1_fu_412_p1);

assign tmp2_fu_324_p2 = (phi_mul2_reg_157 + zext_ln28_3_cast_fu_320_p1);

assign tmp3_fu_334_p0 = tmp3_fu_334_p00;

assign tmp3_fu_334_p00 = tmp2_fu_324_p2;

assign tmp3_fu_334_p1 = zext_ln36_1_cast_reg_533;

assign tmp3_fu_334_p2 = (tmp3_fu_334_p0 * tmp3_fu_334_p1);

assign tmp4_cast_fu_398_p1 = tmp4_fu_392_p2;

assign tmp4_fu_392_p2 = (zext_ln28_2_fu_366_p1 + out_h_0_reg_169);

assign tmp_fu_402_p2 = (phi_mul_reg_145 + tmp4_cast_fu_398_p1);

assign trunc_ln28_fu_293_p1 = out_d_0_reg_133[3:0];

assign zext_ln23_fu_288_p1 = out_d_0_reg_133;

assign zext_ln24_fu_350_p1 = out_w_0_reg_181;

assign zext_ln28_1_cast_fu_246_p1 = $unsigned(sext_ln5_fu_238_p1);

assign zext_ln28_1_fu_305_p1 = shl_ln_fu_297_p3;

assign zext_ln28_2_fu_366_p1 = k_h_0_reg_204;

assign zext_ln28_3_cast_fu_320_p1 = out_h_0_reg_169;

assign zext_ln28_3_fu_378_p1 = shl_ln28_2_fu_370_p3;

assign zext_ln28_4_fu_443_p1 = k_w_0_reg_227;

assign zext_ln28_5_fu_453_p1 = add_ln28_fu_447_p2;

assign zext_ln28_6_fu_462_p1 = add_ln28_2_fu_457_p2;

assign zext_ln28_7_fu_473_p1 = add_ln28_3_fu_467_p2;

assign zext_ln28_8_fu_486_p1 = $unsigned(sext_ln28_2_fu_482_p1);

assign zext_ln28_fu_242_p1 = input_height;

assign zext_ln36_1_cast_fu_254_p1 = output_width;

assign zext_ln36_1_fu_426_p1 = add_ln36_fu_422_p2;

assign zext_ln36_fu_250_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln28_reg_518[8:7] <= 2'b00;
    zext_ln28_1_cast_reg_523[13:7] <= 7'b0000000;
    zext_ln36_reg_528[8:6] <= 3'b000;
    zext_ln36_1_cast_reg_533[13:6] <= 8'b00000000;
    zext_ln28_1_reg_571[2:0] <= 3'b000;
    zext_ln28_1_reg_571[8:7] <= 2'b00;
    zext_ln24_reg_602[13:5] <= 9'b000000000;
end

endmodule //depthwise_conv2d_fix_2
