// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state16 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [2:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [6:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [6:0] kernel_address1;
output   kernel_ce1;
input  [15:0] kernel_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg[6:0] kernel_address0;
reg kernel_ce0;
reg[6:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten48_reg_298;
reg   [3:0] out_d_0_reg_310;
reg   [7:0] indvar_flatten_reg_322;
reg   [3:0] out_h_0_reg_334;
reg   [3:0] out_w_0_reg_345;
reg  signed [15:0] reg_356;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln23_reg_1174;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln23_reg_1174_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg  signed [15:0] reg_361;
wire   [6:0] zext_ln40_fu_366_p1;
reg   [6:0] zext_ln40_reg_1118;
wire   [10:0] zext_ln40_1_cast14_fu_370_p1;
reg   [10:0] zext_ln40_1_cast14_reg_1124;
wire   [6:0] zext_ln48_fu_374_p1;
reg   [6:0] zext_ln48_reg_1131;
wire   [10:0] zext_ln48_1_cast_fu_378_p1;
reg   [10:0] zext_ln48_1_cast_reg_1137;
wire   [3:0] empty_fu_382_p1;
reg   [3:0] empty_reg_1142;
wire   [7:0] mul_ln4_fu_398_p2;
reg   [7:0] mul_ln4_reg_1147;
wire   [10:0] tmp_2_fu_404_p3;
reg   [10:0] tmp_2_reg_1152;
wire   [0:0] icmp_ln33_fu_412_p2;
reg   [0:0] icmp_ln33_reg_1157;
wire   [6:0] mul_ln40_fu_444_p2;
reg   [6:0] mul_ln40_reg_1162;
wire   [6:0] mul_ln48_fu_449_p2;
reg   [6:0] mul_ln48_reg_1168;
wire   [0:0] icmp_ln23_fu_454_p2;
reg   [0:0] icmp_ln23_reg_1174_pp0_iter2_reg;
wire   [3:0] out_d_fu_459_p2;
reg   [3:0] out_d_reg_1178;
wire   [0:0] icmp_ln32_fu_465_p2;
reg   [0:0] icmp_ln32_reg_1184;
wire   [5:0] select_ln24_8_fu_492_p3;
reg   [5:0] select_ln24_8_reg_1197;
wire   [6:0] tmp_0_0_fu_504_p2;
reg   [6:0] tmp_0_0_reg_1203;
wire   [6:0] tmp11_fu_509_p2;
reg   [6:0] tmp11_reg_1208;
wire   [10:0] add_ln23_fu_514_p2;
reg   [10:0] add_ln23_reg_1213;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] select_ln24_fu_520_p3;
reg   [3:0] select_ln24_reg_1218;
wire   [6:0] zext_ln24_19_fu_534_p1;
reg   [6:0] zext_ln24_19_reg_1228;
wire   [6:0] add_ln24_8_fu_537_p2;
reg   [6:0] add_ln24_8_reg_1238;
wire   [6:0] add_ln24_9_fu_543_p2;
reg   [6:0] add_ln24_9_reg_1243;
wire   [6:0] mul_ln40_18_fu_549_p2;
reg   [6:0] mul_ln40_18_reg_1248;
wire   [6:0] mul_ln48_2_fu_554_p2;
reg   [6:0] mul_ln48_2_reg_1254;
wire   [0:0] select_ln24_14_fu_564_p3;
reg   [0:0] select_ln24_14_reg_1260;
wire   [3:0] out_h_fu_570_p2;
reg   [3:0] out_h_reg_1267;
wire   [3:0] out_w_0_mid2_fu_581_p3;
reg   [3:0] out_w_0_mid2_reg_1273;
wire   [7:0] add_ln32_2_fu_589_p2;
reg   [7:0] add_ln32_2_reg_1280;
reg  signed [15:0] kernel_load_reg_1285;
wire   [6:0] add_ln24_fu_595_p2;
reg   [6:0] add_ln24_reg_1290;
wire   [6:0] add_ln24_10_fu_608_p2;
reg   [6:0] add_ln24_10_reg_1305;
wire   [6:0] tmp10_0_0_mid2_v_v_fu_642_p3;
reg   [6:0] tmp10_0_0_mid2_v_v_reg_1310;
wire   [6:0] tmp10_1_0_mid2_v_v_fu_649_p2;
reg   [6:0] tmp10_1_0_mid2_v_v_reg_1316;
wire   [6:0] tmp12_mid2_v_v_fu_661_p3;
reg   [6:0] tmp12_mid2_v_v_reg_1321;
reg  signed [15:0] kernel_load_10_reg_1331;
reg  signed [15:0] kernel_load_11_reg_1336;
wire   [6:0] add_ln24_11_fu_676_p2;
reg   [6:0] add_ln24_11_reg_1346;
wire   [6:0] add_ln24_12_fu_681_p2;
reg   [6:0] add_ln24_12_reg_1351;
wire   [10:0] tmp10_0_0_mid2_fu_689_p2;
reg   [10:0] tmp10_0_0_mid2_reg_1356;
wire   [10:0] tmp10_1_0_mid2_fu_697_p2;
reg   [10:0] tmp10_1_0_mid2_reg_1363;
wire   [6:0] tmp10_2_0_mid2_v_v_fu_702_p2;
reg   [6:0] tmp10_2_0_mid2_v_v_reg_1370;
wire   [3:0] add_ln40_13_fu_707_p2;
reg   [3:0] add_ln40_13_reg_1375;
reg  signed [15:0] kernel_load_9_reg_1380;
reg  signed [15:0] kernel_load_12_reg_1385;
wire   [6:0] add_ln24_13_fu_720_p2;
reg   [6:0] add_ln24_13_reg_1400;
wire   [6:0] add_ln24_14_fu_725_p2;
reg   [6:0] add_ln24_14_reg_1405;
wire   [3:0] select_ln24_9_fu_730_p3;
reg   [3:0] select_ln24_9_reg_1410;
wire   [10:0] tmp10_2_0_mid2_fu_739_p2;
reg   [10:0] tmp10_2_0_mid2_reg_1416;
wire   [10:0] zext_ln40_13_fu_744_p1;
reg   [10:0] zext_ln40_13_reg_1423;
wire   [3:0] out_w_fu_757_p2;
reg   [3:0] out_w_reg_1435;
wire   [10:0] zext_ln40_17_fu_762_p1;
reg   [10:0] zext_ln40_17_reg_1441;
wire   [7:0] select_ln32_14_fu_775_p3;
reg   [7:0] select_ln32_14_reg_1452;
reg  signed [15:0] kernel_load_13_reg_1457;
reg  signed [15:0] kernel_load_14_reg_1462;
wire   [3:0] select_ln32_fu_792_p3;
reg   [3:0] select_ln32_reg_1477;
wire   [10:0] zext_ln40_15_fu_797_p1;
reg   [10:0] zext_ln40_15_reg_1482;
wire   [10:0] grp_fu_1058_p3;
reg   [10:0] add_ln48_reg_1498;
reg   [10:0] add_ln48_reg_1498_pp0_iter2_reg;
reg  signed [15:0] kernel_load_15_reg_1503;
reg  signed [15:0] kernel_load_16_reg_1508;
wire  signed [29:0] mul_ln40_9_fu_1064_p2;
reg  signed [29:0] mul_ln40_9_reg_1518;
wire  signed [29:0] mul_ln40_11_fu_1070_p2;
reg  signed [29:0] mul_ln40_11_reg_1523;
wire   [10:0] add_ln40_18_fu_855_p2;
reg   [10:0] add_ln40_18_reg_1538;
wire   [10:0] add_ln40_19_fu_859_p2;
reg   [10:0] add_ln40_19_reg_1543;
wire   [10:0] add_ln40_20_fu_863_p2;
reg   [10:0] add_ln40_20_reg_1548;
wire  signed [29:0] mul_ln40_10_fu_1076_p2;
reg  signed [29:0] mul_ln40_10_reg_1553;
reg   [15:0] trunc_ln48_s_reg_1558;
wire  signed [29:0] mul_ln40_12_fu_1082_p2;
reg  signed [29:0] mul_ln40_12_reg_1563;
wire   [15:0] add_ln48_9_fu_907_p2;
reg   [15:0] add_ln48_9_reg_1578;
reg   [15:0] trunc_ln48_9_reg_1583;
wire  signed [29:0] mul_ln40_13_fu_1088_p2;
reg  signed [29:0] mul_ln40_13_reg_1588;
wire  signed [29:0] mul_ln40_14_fu_1094_p2;
reg  signed [29:0] mul_ln40_14_reg_1593;
wire   [15:0] add_ln48_10_fu_949_p2;
reg   [15:0] add_ln48_10_reg_1603;
wire  signed [29:0] mul_ln40_15_fu_1100_p2;
reg  signed [29:0] mul_ln40_15_reg_1608;
wire  signed [29:0] mul_ln40_16_fu_1106_p2;
reg  signed [29:0] mul_ln40_16_reg_1613;
wire   [15:0] add_ln48_12_fu_990_p2;
reg   [15:0] add_ln48_12_reg_1618;
wire   [15:0] add_ln48_13_fu_995_p2;
reg   [15:0] add_ln48_13_reg_1623;
reg   [15:0] trunc_ln48_3_reg_1628;
reg   [15:0] trunc_ln48_4_reg_1633;
wire  signed [29:0] mul_ln40_17_fu_1112_p2;
reg  signed [29:0] mul_ln40_17_reg_1638;
wire   [15:0] add_ln48_15_fu_1040_p2;
reg   [15:0] add_ln48_15_reg_1643;
wire   [15:0] add_ln48_17_fu_1049_p2;
reg   [15:0] add_ln48_17_reg_1648;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [10:0] ap_phi_mux_indvar_flatten48_phi_fu_302_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_out_d_0_phi_fu_314_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_326_p4;
reg   [3:0] ap_phi_mux_out_h_0_phi_fu_338_p4;
wire    ap_block_pp0_stage1;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_349_p4;
wire   [63:0] zext_ln24_fu_530_p1;
wire   [63:0] zext_ln24_11_fu_600_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln24_12_fu_604_p1;
wire   [63:0] zext_ln24_10_fu_668_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln24_13_fu_672_p1;
wire   [63:0] zext_ln24_14_fu_712_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln24_15_fu_716_p1;
wire   [63:0] zext_ln40_14_fu_752_p1;
wire   [63:0] zext_ln40_18_fu_770_p1;
wire   [63:0] zext_ln24_16_fu_781_p1;
wire   [63:0] zext_ln24_17_fu_785_p1;
wire   [63:0] zext_ln40_16_fu_805_p1;
wire   [63:0] zext_ln40_19_fu_814_p1;
wire   [63:0] zext_ln24_18_fu_825_p1;
wire   [63:0] zext_ln40_20_fu_841_p1;
wire   [63:0] zext_ln40_21_fu_850_p1;
wire   [63:0] zext_ln40_22_fu_899_p1;
wire   [63:0] zext_ln40_23_fu_903_p1;
wire   [63:0] zext_ln40_24_fu_945_p1;
wire   [63:0] zext_ln48_3_fu_1054_p1;
wire   [3:0] empty_59_fu_386_p1;
wire   [3:0] mul_ln4_fu_398_p0;
wire   [3:0] mul_ln4_fu_398_p1;
wire   [2:0] trunc_ln27_fu_426_p1;
wire   [5:0] zext_ln27_fu_422_p1;
wire   [5:0] shl_ln_fu_430_p3;
wire   [3:0] mul_ln40_fu_444_p0;
wire   [6:0] zext_ln48_2_fu_418_p1;
wire   [5:0] mul_ln40_fu_444_p1;
wire   [3:0] mul_ln48_fu_449_p0;
wire   [4:0] mul_ln48_fu_449_p1;
wire   [2:0] trunc_ln27_2_fu_474_p1;
wire   [5:0] zext_ln27_4_fu_470_p1;
wire   [5:0] shl_ln27_mid1_fu_478_p3;
wire   [5:0] add_ln27_2_fu_486_p2;
wire   [5:0] add_ln27_fu_438_p2;
wire   [6:0] zext_ln40_2_cast_fu_500_p1;
wire   [3:0] mul_ln40_18_fu_549_p0;
wire   [6:0] zext_ln48_4_fu_527_p1;
wire   [5:0] mul_ln40_18_fu_549_p1;
wire   [3:0] mul_ln48_2_fu_554_p0;
wire   [4:0] mul_ln48_2_fu_554_p1;
wire   [0:0] icmp_ln33_2_fu_559_p2;
wire   [0:0] empty_61_fu_576_p2;
wire   [6:0] zext_ln40_2_cast_mid_fu_633_p1;
wire   [6:0] select_ln24_10_fu_613_p3;
wire   [6:0] tmp_0_0_mid1_fu_636_p2;
wire   [6:0] select_ln24_12_fu_623_p3;
wire   [6:0] select_ln24_11_fu_618_p3;
wire   [6:0] tmp11_mid1_fu_655_p2;
wire   [6:0] select_ln24_13_fu_628_p3;
wire   [5:0] tmp10_0_0_mid2_fu_689_p0;
wire   [6:0] tmp10_0_0_mid2_fu_689_p1;
wire   [5:0] tmp10_1_0_mid2_fu_697_p0;
wire   [6:0] tmp10_1_0_mid2_fu_697_p1;
wire   [5:0] tmp10_2_0_mid2_fu_739_p0;
wire   [6:0] tmp10_2_0_mid2_fu_739_p1;
wire   [10:0] add_ln40_fu_747_p2;
wire   [10:0] add_ln40_14_fu_765_p2;
wire   [10:0] add_ln40_12_fu_800_p2;
wire   [10:0] add_ln40_15_fu_810_p2;
wire   [10:0] add_ln40_16_fu_837_p2;
wire   [10:0] add_ln40_17_fu_846_p2;
wire   [15:0] trunc_ln_fu_873_p4;
wire   [15:0] trunc_ln48_8_fu_928_p4;
wire   [15:0] add_ln48_11_fu_986_p2;
wire   [15:0] trunc_ln48_2_fu_969_p4;
wire   [15:0] trunc_ln48_1_fu_960_p4;
wire   [15:0] trunc_ln48_5_fu_1026_p4;
wire   [15:0] add_ln48_14_fu_1035_p2;
wire   [15:0] add_ln48_16_fu_1045_p2;
wire   [4:0] grp_fu_1058_p0;
wire   [6:0] grp_fu_1058_p1;
wire   [3:0] grp_fu_1058_p2;
wire    ap_CS_fsm_state16;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [10:0] grp_fu_1058_p10;
wire   [7:0] mul_ln4_fu_398_p00;
wire   [7:0] mul_ln4_fu_398_p10;
wire   [10:0] tmp10_0_0_mid2_fu_689_p10;
wire   [10:0] tmp10_1_0_mid2_fu_697_p10;
wire   [10:0] tmp10_2_0_mid2_fu_739_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

network_mac_muladd_5ns_7ns_4ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 11 ))
network_mac_muladd_5ns_7ns_4ns_11_1_1_U68(
    .din0(grp_fu_1058_p0),
    .din1(grp_fu_1058_p1),
    .din2(grp_fu_1058_p2),
    .dout(grp_fu_1058_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U69(
    .din0(reg_356),
    .din1(kernel_load_reg_1285),
    .dout(mul_ln40_9_fu_1064_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U70(
    .din0(reg_361),
    .din1(kernel_load_10_reg_1331),
    .dout(mul_ln40_11_fu_1070_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U71(
    .din0(reg_356),
    .din1(kernel_load_9_reg_1380),
    .dout(mul_ln40_10_fu_1076_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U72(
    .din0(reg_361),
    .din1(kernel_load_11_reg_1336),
    .dout(mul_ln40_12_fu_1082_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U73(
    .din0(reg_356),
    .din1(kernel_load_12_reg_1385),
    .dout(mul_ln40_13_fu_1088_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U74(
    .din0(reg_361),
    .din1(kernel_load_13_reg_1457),
    .dout(mul_ln40_14_fu_1094_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U75(
    .din0(reg_356),
    .din1(kernel_load_14_reg_1462),
    .dout(mul_ln40_15_fu_1100_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U76(
    .din0(reg_361),
    .din1(kernel_load_15_reg_1503),
    .dout(mul_ln40_16_fu_1106_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U77(
    .din0(reg_356),
    .din1(kernel_load_16_reg_1508),
    .dout(mul_ln40_17_fu_1112_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten48_reg_298 <= add_ln23_reg_1213;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten48_reg_298 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_322 <= select_ln32_14_reg_1452;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_322 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_d_0_reg_310 <= select_ln24_9_reg_1410;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_310 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_h_0_reg_334 <= select_ln32_reg_1477;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_334 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_w_0_reg_345 <= out_w_reg_1435;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_345 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_356 <= input_r_q0;
    end else if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_356 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_361 <= input_r_q1;
    end else if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_361 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln23_reg_1213 <= add_ln23_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln24_10_reg_1305 <= add_ln24_10_fu_608_p2;
        add_ln24_reg_1290 <= add_ln24_fu_595_p2;
        tmp10_0_0_mid2_v_v_reg_1310 <= tmp10_0_0_mid2_v_v_fu_642_p3;
        tmp10_1_0_mid2_v_v_reg_1316 <= tmp10_1_0_mid2_v_v_fu_649_p2;
        tmp12_mid2_v_v_reg_1321 <= tmp12_mid2_v_v_fu_661_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln24_11_reg_1346 <= add_ln24_11_fu_676_p2;
        add_ln24_12_reg_1351 <= add_ln24_12_fu_681_p2;
        add_ln40_13_reg_1375 <= add_ln40_13_fu_707_p2;
        tmp10_0_0_mid2_reg_1356 <= tmp10_0_0_mid2_fu_689_p2;
        tmp10_1_0_mid2_reg_1363 <= tmp10_1_0_mid2_fu_697_p2;
        tmp10_2_0_mid2_v_v_reg_1370 <= tmp10_2_0_mid2_v_v_fu_702_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln24_13_reg_1400 <= add_ln24_13_fu_720_p2;
        add_ln24_14_reg_1405 <= add_ln24_14_fu_725_p2;
        tmp10_2_0_mid2_reg_1416 <= tmp10_2_0_mid2_fu_739_p2;
        zext_ln40_13_reg_1423[3 : 0] <= zext_ln40_13_fu_744_p1[3 : 0];
        zext_ln40_17_reg_1441[3 : 0] <= zext_ln40_17_fu_762_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln24_8_reg_1238 <= add_ln24_8_fu_537_p2;
        add_ln24_9_reg_1243 <= add_ln24_9_fu_543_p2;
        mul_ln40_18_reg_1248 <= mul_ln40_18_fu_549_p2;
        mul_ln48_2_reg_1254 <= mul_ln48_2_fu_554_p2;
        out_h_reg_1267 <= out_h_fu_570_p2;
        out_w_0_mid2_reg_1273 <= out_w_0_mid2_fu_581_p3;
        select_ln24_14_reg_1260 <= select_ln24_14_fu_564_p3;
        select_ln24_reg_1218 <= select_ln24_fu_520_p3;
        zext_ln24_19_reg_1228[5 : 0] <= zext_ln24_19_fu_534_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1184 == 1'd0) & (icmp_ln23_reg_1174 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln32_2_reg_1280 <= add_ln32_2_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln40_18_reg_1538 <= add_ln40_18_fu_855_p2;
        add_ln40_19_reg_1543 <= add_ln40_19_fu_859_p2;
        add_ln40_20_reg_1548 <= add_ln40_20_fu_863_p2;
        mul_ln40_11_reg_1523 <= mul_ln40_11_fu_1070_p2;
        mul_ln40_9_reg_1518 <= mul_ln40_9_fu_1064_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln48_10_reg_1603 <= add_ln48_10_fu_949_p2;
        mul_ln40_13_reg_1588 <= mul_ln40_13_fu_1088_p2;
        mul_ln40_14_reg_1593 <= mul_ln40_14_fu_1094_p2;
        trunc_ln48_9_reg_1583 <= {{mul_ln40_10_reg_1553[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln48_12_reg_1618 <= add_ln48_12_fu_990_p2;
        add_ln48_13_reg_1623 <= add_ln48_13_fu_995_p2;
        mul_ln40_15_reg_1608 <= mul_ln40_15_fu_1100_p2;
        mul_ln40_16_reg_1613 <= mul_ln40_16_fu_1106_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln48_15_reg_1643 <= add_ln48_15_fu_1040_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln48_17_reg_1648 <= add_ln48_17_fu_1049_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln48_9_reg_1578 <= add_ln48_9_fu_907_p2;
        mul_ln40_10_reg_1553 <= mul_ln40_10_fu_1076_p2;
        mul_ln40_12_reg_1563 <= mul_ln40_12_fu_1082_p2;
        trunc_ln48_s_reg_1558 <= {{mul_ln40_11_reg_1523[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln48_reg_1498 <= grp_fu_1058_p3;
        kernel_load_13_reg_1457 <= kernel_q1;
        kernel_load_14_reg_1462 <= kernel_q0;
        select_ln32_reg_1477 <= select_ln32_fu_792_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln48_reg_1498_pp0_iter2_reg <= add_ln48_reg_1498;
        icmp_ln23_reg_1174 <= icmp_ln23_fu_454_p2;
        icmp_ln23_reg_1174_pp0_iter1_reg <= icmp_ln23_reg_1174;
        icmp_ln23_reg_1174_pp0_iter2_reg <= icmp_ln23_reg_1174_pp0_iter1_reg;
        mul_ln40_reg_1162 <= mul_ln40_fu_444_p2;
        mul_ln48_reg_1168 <= mul_ln48_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_1142 <= empty_fu_382_p1;
        icmp_ln33_reg_1157 <= icmp_ln33_fu_412_p2;
        mul_ln4_reg_1147 <= mul_ln4_fu_398_p2;
        tmp_2_reg_1152[10 : 3] <= tmp_2_fu_404_p3[10 : 3];
        zext_ln40_1_cast14_reg_1124[5 : 0] <= zext_ln40_1_cast14_fu_370_p1[5 : 0];
        zext_ln40_reg_1118[5 : 0] <= zext_ln40_fu_366_p1[5 : 0];
        zext_ln48_1_cast_reg_1137[4 : 0] <= zext_ln48_1_cast_fu_378_p1[4 : 0];
        zext_ln48_reg_1131[4 : 0] <= zext_ln48_fu_374_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_454_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln32_reg_1184 <= icmp_ln32_fu_465_p2;
        out_d_reg_1178 <= out_d_fu_459_p2;
        select_ln24_8_reg_1197 <= select_ln24_8_fu_492_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        kernel_load_10_reg_1331 <= kernel_q1;
        kernel_load_11_reg_1336 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        kernel_load_12_reg_1385 <= kernel_q0;
        kernel_load_9_reg_1380 <= kernel_q1;
        out_w_reg_1435 <= out_w_fu_757_p2;
        select_ln24_9_reg_1410 <= select_ln24_9_fu_730_p3;
        select_ln32_14_reg_1452 <= select_ln32_14_fu_775_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        kernel_load_15_reg_1503 <= kernel_q0;
        kernel_load_16_reg_1508 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        kernel_load_reg_1285 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln40_17_reg_1638 <= mul_ln40_17_fu_1112_p2;
        trunc_ln48_3_reg_1628 <= {{mul_ln40_15_reg_1608[29:14]}};
        trunc_ln48_4_reg_1633 <= {{mul_ln40_16_reg_1613[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1184 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp11_reg_1208 <= tmp11_fu_509_p2;
        tmp_0_0_reg_1203 <= tmp_0_0_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln40_15_reg_1482[3 : 0] <= zext_ln40_15_fu_797_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln23_reg_1174 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten48_phi_fu_302_p4 = add_ln23_reg_1213;
    end else begin
        ap_phi_mux_indvar_flatten48_phi_fu_302_p4 = indvar_flatten48_reg_298;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_326_p4 = select_ln32_14_reg_1452;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_326_p4 = indvar_flatten_reg_322;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1174 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_314_p4 = select_ln24_9_reg_1410;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_314_p4 = out_d_0_reg_310;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_out_h_0_phi_fu_338_p4 = select_ln32_reg_1477;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_338_p4 = out_h_0_reg_334;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1174_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_out_w_0_phi_fu_349_p4 = out_w_reg_1435;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_349_p4 = out_w_0_reg_345;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln40_24_fu_945_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln40_22_fu_899_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_address0 = zext_ln40_20_fu_841_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln40_16_fu_805_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address0 = zext_ln40_18_fu_770_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address1 = zext_ln40_23_fu_903_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_address1 = zext_ln40_21_fu_850_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln40_19_fu_814_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address1 = zext_ln40_14_fu_752_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_address0 = zext_ln24_16_fu_781_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        kernel_address0 = zext_ln24_15_fu_716_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_address0 = zext_ln24_13_fu_672_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        kernel_address0 = zext_ln24_12_fu_604_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_address0 = zext_ln24_fu_530_p1;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_address1 = zext_ln24_17_fu_785_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        kernel_address1 = zext_ln24_14_fu_712_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_address1 = zext_ln24_10_fu_668_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        kernel_address1 = zext_ln24_11_fu_600_p1;
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1174_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((icmp_ln23_reg_1174 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((icmp_ln23_reg_1174 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_514_p2 = (11'd1 + indvar_flatten48_reg_298);

assign add_ln24_10_fu_608_p2 = (7'd4 + zext_ln24_19_reg_1228);

assign add_ln24_11_fu_676_p2 = (7'd5 + zext_ln24_19_reg_1228);

assign add_ln24_12_fu_681_p2 = (7'd6 + zext_ln24_19_reg_1228);

assign add_ln24_13_fu_720_p2 = (7'd7 + zext_ln24_19_reg_1228);

assign add_ln24_14_fu_725_p2 = (7'd8 + zext_ln24_19_reg_1228);

assign add_ln24_8_fu_537_p2 = (7'd2 + zext_ln24_19_fu_534_p1);

assign add_ln24_9_fu_543_p2 = (7'd3 + zext_ln24_19_fu_534_p1);

assign add_ln24_fu_595_p2 = (7'd1 + zext_ln24_19_reg_1228);

assign add_ln27_2_fu_486_p2 = (zext_ln27_4_fu_470_p1 + shl_ln27_mid1_fu_478_p3);

assign add_ln27_fu_438_p2 = (zext_ln27_fu_422_p1 + shl_ln_fu_430_p3);

assign add_ln32_2_fu_589_p2 = (8'd1 + indvar_flatten_reg_322);

assign add_ln40_12_fu_800_p2 = (tmp10_0_0_mid2_reg_1356 + zext_ln40_15_fu_797_p1);

assign add_ln40_13_fu_707_p2 = (4'd2 + out_w_0_mid2_reg_1273);

assign add_ln40_14_fu_765_p2 = (tmp10_0_0_mid2_reg_1356 + zext_ln40_17_fu_762_p1);

assign add_ln40_15_fu_810_p2 = (zext_ln40_13_reg_1423 + tmp10_1_0_mid2_reg_1363);

assign add_ln40_16_fu_837_p2 = (tmp10_1_0_mid2_reg_1363 + zext_ln40_15_reg_1482);

assign add_ln40_17_fu_846_p2 = (tmp10_1_0_mid2_reg_1363 + zext_ln40_17_reg_1441);

assign add_ln40_18_fu_855_p2 = (zext_ln40_13_reg_1423 + tmp10_2_0_mid2_reg_1416);

assign add_ln40_19_fu_859_p2 = (tmp10_2_0_mid2_reg_1416 + zext_ln40_15_reg_1482);

assign add_ln40_20_fu_863_p2 = (tmp10_2_0_mid2_reg_1416 + zext_ln40_17_reg_1441);

assign add_ln40_fu_747_p2 = (zext_ln40_13_fu_744_p1 + tmp10_0_0_mid2_reg_1356);

assign add_ln48_10_fu_949_p2 = (trunc_ln48_8_fu_928_p4 + trunc_ln48_s_reg_1558);

assign add_ln48_11_fu_986_p2 = (trunc_ln48_9_reg_1583 + add_ln48_10_reg_1603);

assign add_ln48_12_fu_990_p2 = (add_ln48_9_reg_1578 + add_ln48_11_fu_986_p2);

assign add_ln48_13_fu_995_p2 = (trunc_ln48_2_fu_969_p4 + trunc_ln48_1_fu_960_p4);

assign add_ln48_14_fu_1035_p2 = (trunc_ln48_5_fu_1026_p4 + trunc_ln48_4_reg_1633);

assign add_ln48_15_fu_1040_p2 = (trunc_ln48_3_reg_1628 + add_ln48_14_fu_1035_p2);

assign add_ln48_16_fu_1045_p2 = (add_ln48_13_reg_1623 + add_ln48_15_reg_1643);

assign add_ln48_17_fu_1049_p2 = (add_ln48_12_reg_1618 + add_ln48_16_fu_1045_p2);

assign add_ln48_9_fu_907_p2 = (trunc_ln_fu_873_p4 + bias_q0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_address0 = zext_ln24_18_fu_825_p1;

assign empty_59_fu_386_p1 = output_height[3:0];

assign empty_61_fu_576_p2 = (select_ln24_14_fu_564_p3 | icmp_ln32_reg_1184);

assign empty_fu_382_p1 = output_width[3:0];

assign grp_fu_1058_p0 = zext_ln48_1_cast_reg_1137;

assign grp_fu_1058_p1 = grp_fu_1058_p10;

assign grp_fu_1058_p10 = tmp12_mid2_v_v_reg_1321;

assign grp_fu_1058_p2 = zext_ln40_13_reg_1423;

assign icmp_ln23_fu_454_p2 = ((ap_phi_mux_indvar_flatten48_phi_fu_302_p4 == tmp_2_reg_1152) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_465_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_326_p4 == mul_ln4_reg_1147) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_559_p2 = ((ap_phi_mux_out_w_0_phi_fu_349_p4 == empty_reg_1142) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_412_p2 = ((empty_fu_382_p1 == 4'd0) ? 1'b1 : 1'b0);

assign mul_ln40_18_fu_549_p0 = zext_ln48_4_fu_527_p1;

assign mul_ln40_18_fu_549_p1 = zext_ln40_reg_1118;

assign mul_ln40_18_fu_549_p2 = (mul_ln40_18_fu_549_p0 * mul_ln40_18_fu_549_p1);

assign mul_ln40_fu_444_p0 = zext_ln48_2_fu_418_p1;

assign mul_ln40_fu_444_p1 = zext_ln40_reg_1118;

assign mul_ln40_fu_444_p2 = (mul_ln40_fu_444_p0 * mul_ln40_fu_444_p1);

assign mul_ln48_2_fu_554_p0 = zext_ln48_4_fu_527_p1;

assign mul_ln48_2_fu_554_p1 = zext_ln48_reg_1131;

assign mul_ln48_2_fu_554_p2 = (mul_ln48_2_fu_554_p0 * mul_ln48_2_fu_554_p1);

assign mul_ln48_fu_449_p0 = zext_ln48_2_fu_418_p1;

assign mul_ln48_fu_449_p1 = zext_ln48_reg_1131;

assign mul_ln48_fu_449_p2 = (mul_ln48_fu_449_p0 * mul_ln48_fu_449_p1);

assign mul_ln4_fu_398_p0 = mul_ln4_fu_398_p00;

assign mul_ln4_fu_398_p00 = empty_59_fu_386_p1;

assign mul_ln4_fu_398_p1 = mul_ln4_fu_398_p10;

assign mul_ln4_fu_398_p10 = empty_fu_382_p1;

assign mul_ln4_fu_398_p2 = (mul_ln4_fu_398_p0 * mul_ln4_fu_398_p1);

assign out_d_fu_459_p2 = (4'd1 + ap_phi_mux_out_d_0_phi_fu_314_p4);

assign out_h_fu_570_p2 = (4'd1 + select_ln24_fu_520_p3);

assign out_w_0_mid2_fu_581_p3 = ((empty_61_fu_576_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_w_0_phi_fu_349_p4);

assign out_w_fu_757_p2 = (4'd1 + out_w_0_mid2_reg_1273);

assign output_r_address0 = zext_ln48_3_fu_1054_p1;

assign output_r_d0 = add_ln48_17_reg_1648;

assign select_ln24_10_fu_613_p3 = ((icmp_ln32_reg_1184[0:0] === 1'b1) ? mul_ln40_18_reg_1248 : mul_ln40_reg_1162);

assign select_ln24_11_fu_618_p3 = ((icmp_ln32_reg_1184[0:0] === 1'b1) ? mul_ln48_2_reg_1254 : mul_ln48_reg_1168);

assign select_ln24_12_fu_623_p3 = ((icmp_ln32_reg_1184[0:0] === 1'b1) ? mul_ln40_18_reg_1248 : tmp_0_0_reg_1203);

assign select_ln24_13_fu_628_p3 = ((icmp_ln32_reg_1184[0:0] === 1'b1) ? mul_ln48_2_reg_1254 : tmp11_reg_1208);

assign select_ln24_14_fu_564_p3 = ((icmp_ln32_reg_1184[0:0] === 1'b1) ? icmp_ln33_reg_1157 : icmp_ln33_2_fu_559_p2);

assign select_ln24_8_fu_492_p3 = ((icmp_ln32_fu_465_p2[0:0] === 1'b1) ? add_ln27_2_fu_486_p2 : add_ln27_fu_438_p2);

assign select_ln24_9_fu_730_p3 = ((icmp_ln32_reg_1184[0:0] === 1'b1) ? out_d_reg_1178 : out_d_0_reg_310);

assign select_ln24_fu_520_p3 = ((icmp_ln32_reg_1184[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_h_0_phi_fu_338_p4);

assign select_ln32_14_fu_775_p3 = ((icmp_ln32_reg_1184[0:0] === 1'b1) ? 8'd1 : add_ln32_2_reg_1280);

assign select_ln32_fu_792_p3 = ((select_ln24_14_reg_1260[0:0] === 1'b1) ? out_h_reg_1267 : select_ln24_reg_1218);

assign shl_ln27_mid1_fu_478_p3 = {{trunc_ln27_2_fu_474_p1}, {3'd0}};

assign shl_ln_fu_430_p3 = {{trunc_ln27_fu_426_p1}, {3'd0}};

assign tmp10_0_0_mid2_fu_689_p0 = zext_ln40_1_cast14_reg_1124;

assign tmp10_0_0_mid2_fu_689_p1 = tmp10_0_0_mid2_fu_689_p10;

assign tmp10_0_0_mid2_fu_689_p10 = tmp10_0_0_mid2_v_v_reg_1310;

assign tmp10_0_0_mid2_fu_689_p2 = (tmp10_0_0_mid2_fu_689_p0 * tmp10_0_0_mid2_fu_689_p1);

assign tmp10_0_0_mid2_v_v_fu_642_p3 = ((select_ln24_14_reg_1260[0:0] === 1'b1) ? tmp_0_0_mid1_fu_636_p2 : select_ln24_12_fu_623_p3);

assign tmp10_1_0_mid2_fu_697_p0 = zext_ln40_1_cast14_reg_1124;

assign tmp10_1_0_mid2_fu_697_p1 = tmp10_1_0_mid2_fu_697_p10;

assign tmp10_1_0_mid2_fu_697_p10 = tmp10_1_0_mid2_v_v_reg_1316;

assign tmp10_1_0_mid2_fu_697_p2 = (tmp10_1_0_mid2_fu_697_p0 * tmp10_1_0_mid2_fu_697_p1);

assign tmp10_1_0_mid2_v_v_fu_649_p2 = (7'd1 + tmp10_0_0_mid2_v_v_fu_642_p3);

assign tmp10_2_0_mid2_fu_739_p0 = zext_ln40_1_cast14_reg_1124;

assign tmp10_2_0_mid2_fu_739_p1 = tmp10_2_0_mid2_fu_739_p10;

assign tmp10_2_0_mid2_fu_739_p10 = tmp10_2_0_mid2_v_v_reg_1370;

assign tmp10_2_0_mid2_fu_739_p2 = (tmp10_2_0_mid2_fu_739_p0 * tmp10_2_0_mid2_fu_739_p1);

assign tmp10_2_0_mid2_v_v_fu_702_p2 = (7'd2 + tmp10_0_0_mid2_v_v_reg_1310);

assign tmp11_fu_509_p2 = (zext_ln40_2_cast_fu_500_p1 + mul_ln48_reg_1168);

assign tmp11_mid1_fu_655_p2 = (zext_ln40_2_cast_mid_fu_633_p1 + select_ln24_11_fu_618_p3);

assign tmp12_mid2_v_v_fu_661_p3 = ((select_ln24_14_reg_1260[0:0] === 1'b1) ? tmp11_mid1_fu_655_p2 : select_ln24_13_fu_628_p3);

assign tmp_0_0_fu_504_p2 = (zext_ln40_2_cast_fu_500_p1 + mul_ln40_reg_1162);

assign tmp_0_0_mid1_fu_636_p2 = (zext_ln40_2_cast_mid_fu_633_p1 + select_ln24_10_fu_613_p3);

assign tmp_2_fu_404_p3 = {{mul_ln4_fu_398_p2}, {3'd0}};

assign trunc_ln27_2_fu_474_p1 = out_d_fu_459_p2[2:0];

assign trunc_ln27_fu_426_p1 = ap_phi_mux_out_d_0_phi_fu_314_p4[2:0];

assign trunc_ln48_1_fu_960_p4 = {{mul_ln40_13_reg_1588[29:14]}};

assign trunc_ln48_2_fu_969_p4 = {{mul_ln40_14_reg_1593[29:14]}};

assign trunc_ln48_5_fu_1026_p4 = {{mul_ln40_17_reg_1638[29:14]}};

assign trunc_ln48_8_fu_928_p4 = {{mul_ln40_12_reg_1563[29:14]}};

assign trunc_ln_fu_873_p4 = {{mul_ln40_9_reg_1518[29:14]}};

assign zext_ln24_10_fu_668_p1 = add_ln24_reg_1290;

assign zext_ln24_11_fu_600_p1 = add_ln24_8_reg_1238;

assign zext_ln24_12_fu_604_p1 = add_ln24_9_reg_1243;

assign zext_ln24_13_fu_672_p1 = add_ln24_10_reg_1305;

assign zext_ln24_14_fu_712_p1 = add_ln24_11_reg_1346;

assign zext_ln24_15_fu_716_p1 = add_ln24_12_reg_1351;

assign zext_ln24_16_fu_781_p1 = add_ln24_13_reg_1400;

assign zext_ln24_17_fu_785_p1 = add_ln24_14_reg_1405;

assign zext_ln24_18_fu_825_p1 = select_ln24_9_reg_1410;

assign zext_ln24_19_fu_534_p1 = select_ln24_8_reg_1197;

assign zext_ln24_fu_530_p1 = select_ln24_8_reg_1197;

assign zext_ln27_4_fu_470_p1 = out_d_fu_459_p2;

assign zext_ln27_fu_422_p1 = ap_phi_mux_out_d_0_phi_fu_314_p4;

assign zext_ln40_13_fu_744_p1 = out_w_0_mid2_reg_1273;

assign zext_ln40_14_fu_752_p1 = add_ln40_fu_747_p2;

assign zext_ln40_15_fu_797_p1 = out_w_reg_1435;

assign zext_ln40_16_fu_805_p1 = add_ln40_12_fu_800_p2;

assign zext_ln40_17_fu_762_p1 = add_ln40_13_reg_1375;

assign zext_ln40_18_fu_770_p1 = add_ln40_14_fu_765_p2;

assign zext_ln40_19_fu_814_p1 = add_ln40_15_fu_810_p2;

assign zext_ln40_1_cast14_fu_370_p1 = input_width;

assign zext_ln40_20_fu_841_p1 = add_ln40_16_fu_837_p2;

assign zext_ln40_21_fu_850_p1 = add_ln40_17_fu_846_p2;

assign zext_ln40_22_fu_899_p1 = add_ln40_18_reg_1538;

assign zext_ln40_23_fu_903_p1 = add_ln40_19_reg_1543;

assign zext_ln40_24_fu_945_p1 = add_ln40_20_reg_1548;

assign zext_ln40_2_cast_fu_500_p1 = ap_phi_mux_out_h_0_phi_fu_338_p4;

assign zext_ln40_2_cast_mid_fu_633_p1 = out_h_reg_1267;

assign zext_ln40_fu_366_p1 = input_height;

assign zext_ln48_1_cast_fu_378_p1 = output_width;

assign zext_ln48_2_fu_418_p1 = ap_phi_mux_out_d_0_phi_fu_314_p4;

assign zext_ln48_3_fu_1054_p1 = add_ln48_reg_1498_pp0_iter2_reg;

assign zext_ln48_4_fu_527_p1 = out_d_reg_1178;

assign zext_ln48_fu_374_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln40_reg_1118[6] <= 1'b0;
    zext_ln40_1_cast14_reg_1124[10:6] <= 5'b00000;
    zext_ln48_reg_1131[6:5] <= 2'b00;
    zext_ln48_1_cast_reg_1137[10:5] <= 6'b000000;
    tmp_2_reg_1152[2:0] <= 3'b000;
    zext_ln24_19_reg_1228[6] <= 1'b0;
    zext_ln40_13_reg_1423[10:4] <= 7'b0000000;
    zext_ln40_17_reg_1441[10:4] <= 7'b0000000;
    zext_ln40_15_reg_1482[10:4] <= 7'b0000000;
end

endmodule //depthwise_conv2d_fix_1
