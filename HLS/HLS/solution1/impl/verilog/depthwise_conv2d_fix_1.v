// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel1_address0,
        kernel1_ce0,
        kernel1_q0,
        kernel2_address0,
        kernel2_ce0,
        kernel2_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [4:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [4:0] kernel1_address0;
output   kernel1_ce0;
input  [15:0] kernel1_q0;
output  [4:0] kernel2_address0;
output   kernel2_ce0;
input  [15:0] kernel2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg kernel_ce0;
reg kernel1_ce0;
reg kernel2_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] reg_287;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
reg  signed [15:0] reg_292;
wire    ap_CS_fsm_state9;
wire   [7:0] zext_ln79_4_fu_296_p1;
reg   [7:0] zext_ln79_4_reg_834;
wire   [10:0] zext_ln79_fu_300_p1;
reg   [10:0] zext_ln79_reg_839;
wire   [9:0] zext_ln103_fu_304_p1;
reg   [9:0] zext_ln103_reg_844;
wire   [7:0] zext_ln103_2_cast_fu_308_p1;
reg   [7:0] zext_ln103_2_cast_reg_850;
wire   [6:0] zext_ln103_3_fu_312_p1;
reg   [6:0] zext_ln103_3_reg_855;
wire   [10:0] zext_ln103_1_cast_fu_316_p1;
reg   [10:0] zext_ln103_1_cast_reg_860;
wire   [3:0] empty_fu_320_p1;
reg   [3:0] empty_reg_865;
wire   [3:0] empty_64_fu_324_p1;
reg   [3:0] empty_64_reg_870;
wire   [6:0] add_ln20_fu_328_p2;
reg   [6:0] add_ln20_reg_875;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln20_5_fu_333_p2;
reg   [7:0] add_ln20_5_reg_880;
wire   [3:0] out_d_fu_344_p2;
reg   [3:0] out_d_reg_888;
wire   [10:0] mul_ln41_1_fu_354_p2;
reg   [10:0] mul_ln41_1_reg_893;
wire   [0:0] icmp_ln20_fu_338_p2;
wire   [1:0] trunc_ln41_fu_359_p1;
reg   [1:0] trunc_ln41_reg_900;
wire   [10:0] add_ln47_fu_363_p2;
reg   [10:0] add_ln47_reg_908;
wire    ap_CS_fsm_state3;
wire   [1:0] add_ln47_2_fu_368_p2;
reg   [1:0] add_ln47_2_reg_913;
wire   [10:0] add_ln53_fu_373_p2;
reg   [10:0] add_ln53_reg_918;
wire   [1:0] xor_ln53_fu_378_p2;
reg   [1:0] xor_ln53_reg_923;
wire   [1:0] add_ln60_fu_383_p2;
reg   [1:0] add_ln60_reg_928;
wire   [7:0] next_mul_fu_388_p2;
reg   [7:0] next_mul_reg_933;
wire    ap_CS_fsm_state4;
wire   [3:0] out_h_fu_398_p2;
reg   [3:0] out_h_reg_941;
wire   [3:0] add_ln79_1_fu_408_p2;
reg   [3:0] add_ln79_1_reg_947;
wire   [0:0] icmp_ln21_fu_393_p2;
wire   [6:0] tmp_fu_414_p2;
reg   [6:0] tmp_reg_952;
wire   [10:0] zext_ln41_6_fu_420_p1;
reg   [10:0] zext_ln41_6_reg_957;
wire    ap_CS_fsm_state5;
wire   [10:0] zext_ln60_4_fu_432_p1;
reg   [10:0] zext_ln60_4_reg_964;
wire   [10:0] zext_ln79_6_fu_444_p1;
reg   [10:0] zext_ln79_6_reg_971;
wire   [10:0] tmp10_fu_451_p2;
reg   [10:0] tmp10_reg_978;
wire   [3:0] out_w_fu_461_p2;
reg   [3:0] out_w_reg_986;
wire    ap_CS_fsm_state6;
wire   [10:0] add_ln41_fu_471_p2;
reg   [10:0] add_ln41_reg_991;
wire   [0:0] icmp_ln22_fu_456_p2;
wire   [10:0] add_ln41_1_fu_476_p2;
reg   [10:0] add_ln41_1_reg_997;
wire   [10:0] add_ln47_4_fu_481_p2;
reg   [10:0] add_ln47_4_reg_1002;
wire   [10:0] add_ln53_2_fu_486_p2;
reg   [10:0] add_ln53_2_reg_1009;
wire   [10:0] add_ln103_fu_491_p2;
reg   [10:0] add_ln103_reg_1016;
wire    ap_CS_fsm_state7;
wire   [10:0] add_ln47_3_fu_500_p2;
reg   [10:0] add_ln47_3_reg_1026;
wire   [10:0] add_ln53_3_fu_504_p2;
reg   [10:0] add_ln53_3_reg_1031;
wire   [10:0] add_ln60_3_fu_516_p2;
reg   [10:0] add_ln60_3_reg_1046;
wire   [10:0] add_ln66_fu_520_p2;
reg   [10:0] add_ln66_reg_1051;
wire   [10:0] add_ln72_fu_524_p2;
reg   [10:0] add_ln72_reg_1056;
wire   [10:0] add_ln79_fu_528_p2;
reg   [10:0] add_ln79_reg_1061;
wire   [10:0] add_ln85_fu_532_p2;
reg   [10:0] add_ln85_reg_1066;
wire   [10:0] add_ln91_fu_536_p2;
reg   [10:0] add_ln91_reg_1071;
reg  signed [15:0] input_load_2_reg_1076;
reg   [15:0] kernel_load_reg_1091;
wire    ap_CS_fsm_state10;
reg   [15:0] kernel1_load_reg_1099;
reg   [15:0] kernel2_load_reg_1107;
reg  signed [15:0] input_load_3_reg_1115;
reg  signed [15:0] input_load_4_reg_1120;
wire   [15:0] tmp_7_fu_556_p5;
reg   [15:0] tmp_7_reg_1135;
wire    ap_CS_fsm_state11;
wire   [15:0] tmp_8_fu_564_p5;
reg   [15:0] tmp_8_reg_1140;
wire   [15:0] tmp_9_fu_572_p5;
reg   [15:0] tmp_9_reg_1145;
wire   [15:0] tmp_s_fu_580_p5;
reg   [15:0] tmp_s_reg_1150;
reg  signed [15:0] input_load_5_reg_1155;
reg  signed [15:0] input_load_6_reg_1160;
wire  signed [29:0] sext_ln41_2_fu_600_p1;
reg  signed [29:0] sext_ln41_2_reg_1175;
wire  signed [29:0] mul_ln41_fu_766_p2;
reg  signed [29:0] mul_ln41_reg_1180;
wire  signed [29:0] mul_ln47_fu_772_p2;
reg  signed [29:0] mul_ln47_reg_1185;
wire  signed [29:0] mul_ln53_fu_778_p2;
reg  signed [29:0] mul_ln53_reg_1190;
wire  signed [29:0] mul_ln66_fu_784_p2;
reg  signed [29:0] mul_ln66_reg_1195;
wire  signed [29:0] mul_ln72_fu_790_p2;
reg  signed [29:0] mul_ln72_reg_1200;
wire  signed [29:0] mul_ln79_1_fu_796_p2;
reg  signed [29:0] mul_ln79_1_reg_1205;
wire  signed [29:0] mul_ln60_1_fu_802_p2;
reg  signed [29:0] mul_ln60_1_reg_1210;
wire    ap_CS_fsm_state13;
wire  signed [29:0] mul_ln85_fu_808_p2;
reg  signed [29:0] mul_ln85_reg_1215;
wire  signed [29:0] mul_ln91_fu_814_p2;
reg  signed [29:0] mul_ln91_reg_1220;
reg   [15:0] trunc_ln4_reg_1225;
reg   [15:0] trunc_ln8_reg_1230;
wire   [15:0] add_ln103_9_fu_693_p2;
reg   [15:0] add_ln103_9_reg_1235;
wire   [15:0] add_ln103_12_fu_699_p2;
reg   [15:0] add_ln103_12_reg_1240;
wire   [15:0] add_ln103_11_fu_737_p2;
reg   [15:0] add_ln103_11_reg_1245;
wire    ap_CS_fsm_state14;
wire   [15:0] add_ln103_14_fu_748_p2;
reg   [15:0] add_ln103_14_reg_1250;
wire   [15:0] add_ln103_2_fu_757_p2;
reg   [15:0] add_ln103_2_reg_1255;
wire    ap_CS_fsm_state15;
reg   [3:0] out_d_0_reg_219;
reg   [7:0] phi_mul2_reg_230;
reg   [6:0] phi_mul5_reg_241;
reg   [3:0] out_h_0_reg_253;
reg   [7:0] phi_mul_reg_264;
reg   [3:0] out_w_0_reg_276;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln41_8_fu_496_p1;
wire   [63:0] zext_ln47_fu_508_p1;
wire   [63:0] zext_ln53_fu_512_p1;
wire   [63:0] zext_ln60_3_fu_540_p1;
wire   [63:0] zext_ln66_fu_544_p1;
wire   [63:0] zext_ln72_fu_548_p1;
wire   [63:0] zext_ln79_3_fu_552_p1;
wire   [63:0] zext_ln85_fu_588_p1;
wire   [63:0] zext_ln91_fu_592_p1;
wire   [63:0] zext_ln103_5_fu_762_p1;
wire   [7:0] mul_ln41_1_fu_354_p0;
wire   [5:0] mul_ln41_1_fu_354_p1;
wire   [6:0] zext_ln41_5_fu_404_p1;
wire   [5:0] mul_ln60_fu_427_p0;
wire   [3:0] mul_ln60_fu_427_p1;
wire   [9:0] mul_ln60_fu_427_p2;
wire   [5:0] mul_ln79_fu_439_p0;
wire   [3:0] mul_ln79_fu_439_p1;
wire   [9:0] mul_ln79_fu_439_p2;
wire   [4:0] tmp10_fu_451_p0;
wire   [6:0] tmp10_fu_451_p1;
wire   [10:0] zext_ln41_7_fu_467_p1;
wire   [15:0] trunc_ln92_2_fu_648_p4;
wire   [15:0] trunc_ln_fu_639_p4;
wire   [15:0] trunc_ln7_fu_675_p4;
wire   [15:0] trunc_ln6_fu_666_p4;
wire   [15:0] trunc_ln5_fu_705_p4;
wire   [15:0] add_ln103_10_fu_732_p2;
wire   [15:0] trunc_ln101_2_fu_723_p4;
wire   [15:0] trunc_ln9_fu_714_p4;
wire   [15:0] add_ln103_13_fu_742_p2;
wire   [15:0] add_ln103_15_fu_753_p2;
wire  signed [15:0] mul_ln41_fu_766_p0;
wire  signed [15:0] mul_ln47_fu_772_p0;
wire  signed [29:0] sext_ln47_2_fu_607_p1;
wire  signed [15:0] mul_ln53_fu_778_p0;
wire  signed [29:0] sext_ln53_2_fu_613_p1;
wire  signed [15:0] mul_ln66_fu_784_p0;
wire  signed [15:0] mul_ln72_fu_790_p0;
wire  signed [15:0] mul_ln79_1_fu_796_p0;
wire  signed [15:0] mul_ln60_1_fu_802_p0;
wire  signed [29:0] sext_ln60_2_fu_628_p1;
wire  signed [15:0] mul_ln85_fu_808_p0;
wire  signed [15:0] mul_ln91_fu_814_p0;
reg   [15:0] ap_NS_fsm;
wire   [10:0] mul_ln41_1_fu_354_p00;
wire   [9:0] mul_ln60_fu_427_p10;
wire   [9:0] mul_ln79_fu_439_p10;
wire   [10:0] tmp10_fu_451_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U61(
    .din0(kernel_load_reg_1091),
    .din1(kernel1_load_reg_1099),
    .din2(kernel2_load_reg_1107),
    .din3(trunc_ln41_reg_900),
    .dout(tmp_7_fu_556_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U62(
    .din0(kernel_load_reg_1091),
    .din1(kernel1_load_reg_1099),
    .din2(kernel2_load_reg_1107),
    .din3(add_ln47_2_reg_913),
    .dout(tmp_8_fu_564_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U63(
    .din0(kernel_load_reg_1091),
    .din1(kernel1_load_reg_1099),
    .din2(kernel2_load_reg_1107),
    .din3(xor_ln53_reg_923),
    .dout(tmp_9_fu_572_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U64(
    .din0(kernel_load_reg_1091),
    .din1(kernel1_load_reg_1099),
    .din2(kernel2_load_reg_1107),
    .din3(add_ln60_reg_928),
    .dout(tmp_s_fu_580_p5)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U65(
    .din0(mul_ln41_fu_766_p0),
    .din1(reg_287),
    .dout(mul_ln41_fu_766_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U66(
    .din0(mul_ln47_fu_772_p0),
    .din1(reg_292),
    .dout(mul_ln47_fu_772_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U67(
    .din0(mul_ln53_fu_778_p0),
    .din1(input_load_2_reg_1076),
    .dout(mul_ln53_fu_778_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U68(
    .din0(mul_ln66_fu_784_p0),
    .din1(input_load_4_reg_1120),
    .dout(mul_ln66_fu_784_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U69(
    .din0(mul_ln72_fu_790_p0),
    .din1(input_load_5_reg_1155),
    .dout(mul_ln72_fu_790_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U70(
    .din0(mul_ln79_1_fu_796_p0),
    .din1(input_load_6_reg_1160),
    .dout(mul_ln79_1_fu_796_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U71(
    .din0(mul_ln60_1_fu_802_p0),
    .din1(input_load_3_reg_1115),
    .dout(mul_ln60_1_fu_802_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U72(
    .din0(mul_ln85_fu_808_p0),
    .din1(reg_287),
    .dout(mul_ln85_fu_808_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U73(
    .din0(mul_ln91_fu_814_p0),
    .din1(reg_292),
    .dout(mul_ln91_fu_814_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_393_p2 == 1'd1))) begin
        out_d_0_reg_219 <= out_d_reg_888;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_d_0_reg_219 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_456_p2 == 1'd1))) begin
        out_h_0_reg_253 <= out_h_reg_941;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_253 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_0_reg_276 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_w_0_reg_276 <= out_w_reg_986;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_393_p2 == 1'd1))) begin
        phi_mul2_reg_230 <= add_ln20_5_reg_880;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul2_reg_230 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_393_p2 == 1'd1))) begin
        phi_mul5_reg_241 <= add_ln20_reg_875;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul5_reg_241 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_456_p2 == 1'd1))) begin
        phi_mul_reg_264 <= next_mul_reg_933;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        phi_mul_reg_264 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_287 <= input_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_287 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln103_11_reg_1245 <= add_ln103_11_fu_737_p2;
        add_ln103_14_reg_1250 <= add_ln103_14_fu_748_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln103_12_reg_1240 <= add_ln103_12_fu_699_p2;
        add_ln103_9_reg_1235 <= add_ln103_9_fu_693_p2;
        mul_ln60_1_reg_1210 <= mul_ln60_1_fu_802_p2;
        mul_ln85_reg_1215 <= mul_ln85_fu_808_p2;
        mul_ln91_reg_1220 <= mul_ln91_fu_814_p2;
        trunc_ln4_reg_1225 <= {{mul_ln53_reg_1190[29:14]}};
        trunc_ln8_reg_1230 <= {{mul_ln79_1_reg_1205[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln103_2_reg_1255 <= add_ln103_2_fu_757_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_456_p2 == 1'd0))) begin
        add_ln103_reg_1016 <= add_ln103_fu_491_p2;
        add_ln41_1_reg_997 <= add_ln41_1_fu_476_p2;
        add_ln41_reg_991 <= add_ln41_fu_471_p2;
        add_ln47_4_reg_1002 <= add_ln47_4_fu_481_p2;
        add_ln53_2_reg_1009 <= add_ln53_2_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln20_5_reg_880 <= add_ln20_5_fu_333_p2;
        add_ln20_reg_875 <= add_ln20_fu_328_p2;
        out_d_reg_888 <= out_d_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln47_2_reg_913 <= add_ln47_2_fu_368_p2;
        add_ln47_reg_908 <= add_ln47_fu_363_p2;
        add_ln53_reg_918 <= add_ln53_fu_373_p2;
        add_ln60_reg_928 <= add_ln60_fu_383_p2;
        xor_ln53_reg_923 <= xor_ln53_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln47_3_reg_1026 <= add_ln47_3_fu_500_p2;
        add_ln53_3_reg_1031 <= add_ln53_3_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln60_3_reg_1046 <= add_ln60_3_fu_516_p2;
        add_ln66_reg_1051 <= add_ln66_fu_520_p2;
        add_ln72_reg_1056 <= add_ln72_fu_524_p2;
        add_ln79_reg_1061 <= add_ln79_fu_528_p2;
        add_ln85_reg_1066 <= add_ln85_fu_532_p2;
        add_ln91_reg_1071 <= add_ln91_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_393_p2 == 1'd0))) begin
        add_ln79_1_reg_947 <= add_ln79_1_fu_408_p2;
        tmp_reg_952 <= tmp_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_64_reg_870 <= empty_64_fu_324_p1;
        empty_reg_865 <= empty_fu_320_p1;
        zext_ln103_1_cast_reg_860[4 : 0] <= zext_ln103_1_cast_fu_316_p1[4 : 0];
        zext_ln103_2_cast_reg_850[5 : 0] <= zext_ln103_2_cast_fu_308_p1[5 : 0];
        zext_ln103_3_reg_855[4 : 0] <= zext_ln103_3_fu_312_p1[4 : 0];
        zext_ln103_reg_844[5 : 0] <= zext_ln103_fu_304_p1[5 : 0];
        zext_ln79_4_reg_834[5 : 0] <= zext_ln79_4_fu_296_p1[5 : 0];
        zext_ln79_reg_839[5 : 0] <= zext_ln79_fu_300_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_load_2_reg_1076 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_load_3_reg_1115 <= input_r_q1;
        input_load_4_reg_1120 <= input_r_q0;
        kernel1_load_reg_1099 <= kernel1_q0;
        kernel2_load_reg_1107 <= kernel2_q0;
        kernel_load_reg_1091 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_load_5_reg_1155 <= input_r_q1;
        input_load_6_reg_1160 <= input_r_q0;
        tmp_7_reg_1135 <= tmp_7_fu_556_p5;
        tmp_8_reg_1140 <= tmp_8_fu_564_p5;
        tmp_9_reg_1145 <= tmp_9_fu_572_p5;
        tmp_s_reg_1150 <= tmp_s_fu_580_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_338_p2 == 1'd0))) begin
        mul_ln41_1_reg_893 <= mul_ln41_1_fu_354_p2;
        trunc_ln41_reg_900 <= trunc_ln41_fu_359_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln41_reg_1180 <= mul_ln41_fu_766_p2;
        mul_ln47_reg_1185 <= mul_ln47_fu_772_p2;
        mul_ln53_reg_1190 <= mul_ln53_fu_778_p2;
        mul_ln66_reg_1195 <= mul_ln66_fu_784_p2;
        mul_ln72_reg_1200 <= mul_ln72_fu_790_p2;
        mul_ln79_1_reg_1205 <= mul_ln79_1_fu_796_p2;
        sext_ln41_2_reg_1175 <= sext_ln41_2_fu_600_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        next_mul_reg_933 <= next_mul_fu_388_p2;
        out_h_reg_941 <= out_h_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_w_reg_986 <= out_w_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_292 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp10_reg_978 <= tmp10_fu_451_p2;
        zext_ln41_6_reg_957[7 : 0] <= zext_ln41_6_fu_420_p1[7 : 0];
        zext_ln60_4_reg_964[9 : 0] <= zext_ln60_4_fu_432_p1[9 : 0];
        zext_ln79_6_reg_971[9 : 0] <= zext_ln79_6_fu_444_p1[9 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_338_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_338_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = zext_ln91_fu_592_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = zext_ln79_3_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = zext_ln66_fu_544_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = zext_ln47_fu_508_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = zext_ln41_8_fu_496_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address1 = zext_ln85_fu_588_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address1 = zext_ln72_fu_548_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address1 = zext_ln60_3_fu_540_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address1 = zext_ln53_fu_512_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel1_ce0 = 1'b1;
    end else begin
        kernel1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel2_ce0 = 1'b1;
    end else begin
        kernel2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_338_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln21_fu_393_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_456_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_10_fu_732_p2 = (trunc_ln5_fu_705_p4 + trunc_ln4_reg_1225);

assign add_ln103_11_fu_737_p2 = (add_ln103_9_reg_1235 + add_ln103_10_fu_732_p2);

assign add_ln103_12_fu_699_p2 = (trunc_ln7_fu_675_p4 + trunc_ln6_fu_666_p4);

assign add_ln103_13_fu_742_p2 = (trunc_ln101_2_fu_723_p4 + trunc_ln9_fu_714_p4);

assign add_ln103_14_fu_748_p2 = (trunc_ln8_reg_1230 + add_ln103_13_fu_742_p2);

assign add_ln103_15_fu_753_p2 = (add_ln103_12_reg_1240 + add_ln103_14_reg_1250);

assign add_ln103_2_fu_757_p2 = (add_ln103_11_reg_1245 + add_ln103_15_fu_753_p2);

assign add_ln103_9_fu_693_p2 = (trunc_ln92_2_fu_648_p4 + trunc_ln_fu_639_p4);

assign add_ln103_fu_491_p2 = (zext_ln41_7_fu_467_p1 + tmp10_reg_978);

assign add_ln20_5_fu_333_p2 = (phi_mul2_reg_230 + zext_ln79_4_reg_834);

assign add_ln20_fu_328_p2 = (phi_mul5_reg_241 + zext_ln103_3_reg_855);

assign add_ln41_1_fu_476_p2 = (zext_ln41_6_reg_957 + add_ln41_fu_471_p2);

assign add_ln41_fu_471_p2 = (zext_ln41_7_fu_467_p1 + mul_ln41_1_reg_893);

assign add_ln47_2_fu_368_p2 = (2'd1 + trunc_ln41_reg_900);

assign add_ln47_3_fu_500_p2 = (zext_ln41_6_reg_957 + add_ln47_4_reg_1002);

assign add_ln47_4_fu_481_p2 = (zext_ln41_7_fu_467_p1 + add_ln47_reg_908);

assign add_ln47_fu_363_p2 = (11'd1 + mul_ln41_1_reg_893);

assign add_ln53_2_fu_486_p2 = (zext_ln41_7_fu_467_p1 + add_ln53_reg_918);

assign add_ln53_3_fu_504_p2 = (zext_ln41_6_reg_957 + add_ln53_2_reg_1009);

assign add_ln53_fu_373_p2 = (11'd2 + mul_ln41_1_reg_893);

assign add_ln60_3_fu_516_p2 = (zext_ln60_4_reg_964 + add_ln41_reg_991);

assign add_ln60_fu_383_p2 = ($signed(2'd3) + $signed(trunc_ln41_reg_900));

assign add_ln66_fu_520_p2 = (zext_ln60_4_reg_964 + add_ln47_4_reg_1002);

assign add_ln72_fu_524_p2 = (zext_ln60_4_reg_964 + add_ln53_2_reg_1009);

assign add_ln79_1_fu_408_p2 = (out_h_0_reg_253 + 4'd2);

assign add_ln79_fu_528_p2 = (zext_ln79_6_reg_971 + add_ln41_reg_991);

assign add_ln85_fu_532_p2 = (zext_ln79_6_reg_971 + add_ln47_4_reg_1002);

assign add_ln91_fu_536_p2 = (zext_ln79_6_reg_971 + add_ln53_2_reg_1009);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign empty_64_fu_324_p1 = output_height[3:0];

assign empty_fu_320_p1 = output_width[3:0];

assign icmp_ln20_fu_338_p2 = ((out_d_0_reg_219 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_393_p2 = ((out_h_0_reg_253 == empty_64_reg_870) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_456_p2 = ((out_w_0_reg_276 == empty_reg_865) ? 1'b1 : 1'b0);

assign kernel1_address0 = 64'd0;

assign kernel2_address0 = 64'd0;

assign kernel_address0 = 64'd0;

assign mul_ln41_1_fu_354_p0 = mul_ln41_1_fu_354_p00;

assign mul_ln41_1_fu_354_p00 = phi_mul2_reg_230;

assign mul_ln41_1_fu_354_p1 = zext_ln79_reg_839;

assign mul_ln41_1_fu_354_p2 = (mul_ln41_1_fu_354_p0 * mul_ln41_1_fu_354_p1);

assign mul_ln41_fu_766_p0 = sext_ln41_2_fu_600_p1;

assign mul_ln47_fu_772_p0 = sext_ln47_2_fu_607_p1;

assign mul_ln53_fu_778_p0 = sext_ln53_2_fu_613_p1;

assign mul_ln60_1_fu_802_p0 = sext_ln60_2_fu_628_p1;

assign mul_ln60_fu_427_p0 = zext_ln103_reg_844;

assign mul_ln60_fu_427_p1 = mul_ln60_fu_427_p10;

assign mul_ln60_fu_427_p10 = out_h_reg_941;

assign mul_ln60_fu_427_p2 = (mul_ln60_fu_427_p0 * mul_ln60_fu_427_p1);

assign mul_ln66_fu_784_p0 = sext_ln41_2_fu_600_p1;

assign mul_ln72_fu_790_p0 = sext_ln47_2_fu_607_p1;

assign mul_ln79_1_fu_796_p0 = sext_ln53_2_fu_613_p1;

assign mul_ln79_fu_439_p0 = zext_ln103_reg_844;

assign mul_ln79_fu_439_p1 = mul_ln79_fu_439_p10;

assign mul_ln79_fu_439_p10 = add_ln79_1_reg_947;

assign mul_ln79_fu_439_p2 = (mul_ln79_fu_439_p0 * mul_ln79_fu_439_p1);

assign mul_ln85_fu_808_p0 = sext_ln60_2_fu_628_p1;

assign mul_ln91_fu_814_p0 = sext_ln41_2_reg_1175;

assign next_mul_fu_388_p2 = (zext_ln103_2_cast_reg_850 + phi_mul_reg_264);

assign out_d_fu_344_p2 = (out_d_0_reg_219 + 4'd1);

assign out_h_fu_398_p2 = (out_h_0_reg_253 + 4'd1);

assign out_w_fu_461_p2 = (out_w_0_reg_276 + 4'd1);

assign output_r_address0 = zext_ln103_5_fu_762_p1;

assign output_r_d0 = add_ln103_2_reg_1255;

assign sext_ln41_2_fu_600_p1 = $signed(tmp_7_reg_1135);

assign sext_ln47_2_fu_607_p1 = $signed(tmp_8_reg_1140);

assign sext_ln53_2_fu_613_p1 = $signed(tmp_9_reg_1145);

assign sext_ln60_2_fu_628_p1 = $signed(tmp_s_reg_1150);

assign tmp10_fu_451_p0 = zext_ln103_1_cast_reg_860;

assign tmp10_fu_451_p1 = tmp10_fu_451_p10;

assign tmp10_fu_451_p10 = tmp_reg_952;

assign tmp10_fu_451_p2 = (tmp10_fu_451_p0 * tmp10_fu_451_p1);

assign tmp_fu_414_p2 = (zext_ln41_5_fu_404_p1 + phi_mul5_reg_241);

assign trunc_ln101_2_fu_723_p4 = {{mul_ln91_reg_1220[29:14]}};

assign trunc_ln41_fu_359_p1 = out_d_0_reg_219[1:0];

assign trunc_ln5_fu_705_p4 = {{mul_ln60_1_reg_1210[29:14]}};

assign trunc_ln6_fu_666_p4 = {{mul_ln66_reg_1195[29:14]}};

assign trunc_ln7_fu_675_p4 = {{mul_ln72_reg_1200[29:14]}};

assign trunc_ln92_2_fu_648_p4 = {{mul_ln41_reg_1180[29:14]}};

assign trunc_ln9_fu_714_p4 = {{mul_ln85_reg_1215[29:14]}};

assign trunc_ln_fu_639_p4 = {{mul_ln47_reg_1185[29:14]}};

assign xor_ln53_fu_378_p2 = (trunc_ln41_reg_900 ^ 2'd2);

assign zext_ln103_1_cast_fu_316_p1 = output_width;

assign zext_ln103_2_cast_fu_308_p1 = input_width;

assign zext_ln103_3_fu_312_p1 = output_height;

assign zext_ln103_5_fu_762_p1 = add_ln103_reg_1016;

assign zext_ln103_fu_304_p1 = input_width;

assign zext_ln41_5_fu_404_p1 = out_h_0_reg_253;

assign zext_ln41_6_fu_420_p1 = phi_mul_reg_264;

assign zext_ln41_7_fu_467_p1 = out_w_0_reg_276;

assign zext_ln41_8_fu_496_p1 = add_ln41_1_reg_997;

assign zext_ln47_fu_508_p1 = add_ln47_3_reg_1026;

assign zext_ln53_fu_512_p1 = add_ln53_3_reg_1031;

assign zext_ln60_3_fu_540_p1 = add_ln60_3_reg_1046;

assign zext_ln60_4_fu_432_p1 = mul_ln60_fu_427_p2;

assign zext_ln66_fu_544_p1 = add_ln66_reg_1051;

assign zext_ln72_fu_548_p1 = add_ln72_reg_1056;

assign zext_ln79_3_fu_552_p1 = add_ln79_reg_1061;

assign zext_ln79_4_fu_296_p1 = input_height;

assign zext_ln79_6_fu_444_p1 = mul_ln79_fu_439_p2;

assign zext_ln79_fu_300_p1 = input_width;

assign zext_ln85_fu_588_p1 = add_ln85_reg_1066;

assign zext_ln91_fu_592_p1 = add_ln91_reg_1071;

always @ (posedge ap_clk) begin
    zext_ln79_4_reg_834[7:6] <= 2'b00;
    zext_ln79_reg_839[10:6] <= 5'b00000;
    zext_ln103_reg_844[9:6] <= 4'b0000;
    zext_ln103_2_cast_reg_850[7:6] <= 2'b00;
    zext_ln103_3_reg_855[6:5] <= 2'b00;
    zext_ln103_1_cast_reg_860[10:5] <= 6'b000000;
    zext_ln41_6_reg_957[10:8] <= 3'b000;
    zext_ln60_4_reg_964[10] <= 1'b0;
    zext_ln79_6_reg_971[10] <= 1'b0;
end

endmodule //depthwise_conv2d_fix_1
