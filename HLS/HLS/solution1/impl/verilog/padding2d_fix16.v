// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_pp1_stage0 = 15'd512;
parameter    ap_ST_fsm_state14 = 15'd1024;
parameter    ap_ST_fsm_state15 = 15'd2048;
parameter    ap_ST_fsm_state16 = 15'd4096;
parameter    ap_ST_fsm_state17 = 15'd8192;
parameter    ap_ST_fsm_state18 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] o_count_3_reg_299;
reg   [13:0] o_count_3_reg_299_pp1_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_state12_pp1_stage0_iter2;
wire    ap_block_state13_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [13:0] o_count_3_reg_299_pp1_iter2_reg;
reg   [13:0] i_count_2_reg_310;
wire   [4:0] trunc_ln13_fu_339_p1;
reg   [4:0] trunc_ln13_reg_685;
wire   [4:0] add_ln13_fu_343_p2;
reg   [4:0] add_ln13_reg_692;
wire  signed [6:0] sext_ln5_1_fu_349_p1;
reg  signed [6:0] sext_ln5_1_reg_698;
wire    ap_CS_fsm_state2;
wire   [11:0] mul_ln13_1_fu_360_p2;
reg   [11:0] mul_ln13_1_reg_703;
wire   [9:0] empty_fu_366_p1;
reg   [9:0] empty_reg_708;
wire   [4:0] empty_23_fu_370_p2;
reg   [4:0] empty_23_reg_714;
wire   [4:0] trunc_ln13_1_fu_375_p1;
reg   [4:0] trunc_ln13_1_reg_724;
wire   [4:0] empty_25_fu_379_p1;
reg   [4:0] empty_25_reg_729;
wire   [4:0] add_ln13_5_fu_383_p2;
reg   [4:0] add_ln13_5_reg_734;
wire    ap_CS_fsm_state3;
wire   [4:0] empty_24_fu_390_p2;
reg   [4:0] empty_24_reg_740;
wire    ap_CS_fsm_state4;
wire   [5:0] add_ln13_3_fu_395_p2;
reg   [5:0] add_ln13_3_reg_747;
wire   [5:0] shl_ln13_fu_400_p2;
reg   [5:0] shl_ln13_reg_752;
wire   [5:0] add_ln13_4_fu_405_p2;
reg   [5:0] add_ln13_4_reg_757;
wire   [4:0] add_ln13_12_fu_415_p2;
reg   [4:0] add_ln13_12_reg_762;
wire   [13:0] zext_ln13_fu_424_p1;
reg   [13:0] zext_ln13_reg_767;
wire    ap_CS_fsm_state5;
wire   [13:0] zext_ln13_2_fu_427_p1;
reg   [13:0] zext_ln13_2_reg_774;
wire   [13:0] mul_ln13_fu_434_p2;
reg   [13:0] mul_ln13_reg_779;
wire   [15:0] zext_ln13_5_fu_440_p1;
reg   [15:0] zext_ln13_5_reg_784;
wire   [15:0] p_cast9_fu_443_p1;
reg   [15:0] p_cast9_reg_789;
wire   [13:0] p_cast6_fu_449_p1;
wire   [15:0] p_cast5_fu_452_p1;
reg   [15:0] p_cast5_reg_799;
wire   [13:0] zext_ln13_6_fu_469_p1;
reg   [13:0] zext_ln13_6_reg_804;
wire   [13:0] zext_ln13_7_fu_473_p1;
wire   [13:0] zext_ln13_9_fu_479_p1;
wire   [4:0] add_ln13_13_fu_482_p2;
reg   [4:0] add_ln13_13_reg_820;
wire   [4:0] empty_26_fu_486_p1;
reg   [4:0] empty_26_reg_826;
wire   [13:0] zext_ln13_10_fu_501_p1;
reg   [13:0] zext_ln13_10_reg_831;
wire   [0:0] icmp_ln13_fu_505_p2;
wire    ap_CS_fsm_state6;
wire   [4:0] depth_fu_510_p2;
reg   [4:0] depth_reg_840;
wire   [15:0] add_ln20_fu_531_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln15_fu_520_p2;
wire   [13:0] i_count_fu_537_p2;
reg   [13:0] i_count_reg_853;
wire    ap_CS_fsm_state8;
wire   [15:0] add_ln23_1_fu_547_p2;
reg   [15:0] add_ln23_1_reg_858;
wire   [0:0] icmp_ln23_fu_552_p2;
wire    ap_CS_fsm_state9;
wire   [4:0] height_fu_557_p2;
reg   [4:0] height_reg_868;
wire   [13:0] add_ln30_fu_563_p2;
reg   [13:0] add_ln30_reg_873;
wire   [15:0] add_ln20_1_fu_568_p2;
reg   [15:0] add_ln20_1_reg_878;
wire   [0:0] icmp_ln25_fu_572_p2;
reg   [0:0] icmp_ln25_reg_883;
reg   [0:0] icmp_ln25_reg_883_pp1_iter1_reg;
reg   [0:0] icmp_ln25_reg_883_pp1_iter2_reg;
wire   [13:0] add_ln30_1_fu_583_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [13:0] o_count_7_fu_589_p2;
reg   [13:0] o_count_7_reg_897;
reg   [15:0] input_load_reg_902;
wire   [13:0] add_ln20_2_fu_600_p2;
reg   [13:0] add_ln20_2_reg_907;
wire    ap_CS_fsm_state14;
wire   [13:0] o_count_8_fu_616_p2;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln34_fu_605_p2;
wire   [13:0] add_ln23_3_fu_622_p2;
wire    ap_CS_fsm_state16;
wire   [13:0] add_ln23_4_fu_627_p2;
wire   [15:0] o_count_6_fu_647_p2;
wire    ap_CS_fsm_state17;
wire   [0:0] icmp_ln43_fu_636_p2;
wire   [13:0] add_ln13_6_fu_653_p2;
wire    ap_CS_fsm_state18;
wire   [13:0] add_ln13_7_fu_658_p2;
wire   [13:0] add_ln13_10_fu_663_p2;
wire   [4:0] add_ln13_15_fu_668_p2;
wire   [4:0] add_ln13_16_fu_673_p2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state10;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [4:0] indvars_iv2_reg_149;
reg   [4:0] indvars_iv_reg_159;
reg   [13:0] indvars_iv1_reg_169;
reg   [13:0] phi_ln13_reg_179;
reg   [13:0] indvars_iv10_reg_189;
reg   [15:0] o_count_0_reg_199;
reg   [13:0] i_count_0_reg_211;
reg   [4:0] depth_0_reg_223;
reg   [15:0] o_count_1_reg_234;
reg   [13:0] phi_ln13_1_reg_244;
reg   [13:0] o_count_reg_255;
reg   [13:0] o_count_2_reg_266;
reg   [13:0] i_count_1_reg_277;
reg   [4:0] height_0_reg_288;
reg   [13:0] ap_phi_mux_o_count_3_phi_fu_302_p4;
wire    ap_block_pp1_stage0;
reg   [13:0] o_count_4_reg_320;
reg   [15:0] o_count_5_reg_330;
wire   [63:0] zext_ln19_fu_526_p1;
wire   [63:0] zext_ln29_fu_578_p1;
wire   [63:0] zext_ln29_6_fu_595_p1;
wire   [63:0] zext_ln38_fu_611_p1;
wire   [63:0] zext_ln47_fu_642_p1;
wire  signed [5:0] trunc_ln13_fu_339_p0;
wire  signed [5:0] sext_ln5_1_fu_349_p0;
wire   [4:0] mul_ln13_1_fu_360_p0;
wire   [6:0] mul_ln13_1_fu_360_p1;
wire  signed [5:0] empty_25_fu_379_p0;
wire   [5:0] p_cast8_fu_387_p1;
wire  signed [5:0] add_ln13_3_fu_395_p1;
wire  signed [5:0] shl_ln13_fu_400_p0;
wire   [4:0] add_ln13_11_fu_411_p2;
wire  signed [5:0] sext_ln5_fu_421_p0;
wire  signed [6:0] sext_ln5_fu_421_p1;
wire   [6:0] mul_ln13_fu_434_p0;
wire   [6:0] mul_ln13_fu_434_p1;
wire   [9:0] p_cast7_fu_446_p1;
wire   [9:0] add_ln13_1_fu_458_p2;
wire   [9:0] p_cast4_fu_455_p1;
wire   [9:0] add_ln13_2_fu_463_p2;
wire   [9:0] zext_ln13_8_fu_476_p1;
wire   [9:0] add_ln13_8_fu_490_p2;
wire   [9:0] add_ln13_9_fu_495_p2;
wire   [4:0] trunc_ln15_fu_516_p1;
wire   [15:0] add_ln23_fu_542_p2;
wire   [4:0] trunc_ln43_fu_632_p1;
reg   [14:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [11:0] mul_ln13_1_fu_360_p00;
wire   [11:0] mul_ln13_1_fu_360_p10;
wire   [13:0] mul_ln13_fu_434_p00;
wire   [13:0] mul_ln13_fu_434_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state10))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_552_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state10)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_552_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        depth_0_reg_223 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        depth_0_reg_223 <= depth_reg_840;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        height_0_reg_288 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        height_0_reg_288 <= height_reg_868;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_count_0_reg_211 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_count_0_reg_211 <= i_count_reg_853;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_count_1_reg_277 <= i_count_0_reg_211;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_count_1_reg_277 <= add_ln30_reg_873;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_572_p2 == 1'd0))) begin
        i_count_2_reg_310 <= add_ln30_1_fu_583_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_552_p2 == 1'd0))) begin
        i_count_2_reg_310 <= i_count_1_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv10_reg_189 <= p_cast6_fu_449_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvars_iv10_reg_189 <= add_ln13_6_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv1_reg_169 <= zext_ln13_9_fu_479_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvars_iv1_reg_169 <= add_ln13_10_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv2_reg_149 <= empty_23_reg_714;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvars_iv2_reg_149 <= add_ln13_16_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv_reg_159 <= add_ln13_12_reg_762;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        indvars_iv_reg_159 <= add_ln13_15_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o_count_0_reg_199 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        o_count_0_reg_199 <= add_ln20_1_reg_878;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln13_fu_505_p2 == 1'd0))) begin
        o_count_1_reg_234 <= o_count_0_reg_199;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_520_p2 == 1'd0))) begin
        o_count_1_reg_234 <= add_ln20_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        o_count_2_reg_266 <= indvars_iv10_reg_189;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        o_count_2_reg_266 <= add_ln20_2_reg_907;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln25_reg_883 == 1'd0))) begin
        o_count_3_reg_299 <= o_count_7_reg_897;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_552_p2 == 1'd0))) begin
        o_count_3_reg_299 <= o_count_2_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln34_fu_605_p2 == 1'd0))) begin
        o_count_4_reg_320 <= o_count_8_fu_616_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        o_count_4_reg_320 <= o_count_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln43_fu_636_p2 == 1'd0))) begin
        o_count_5_reg_330 <= o_count_6_fu_647_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_552_p2 == 1'd1))) begin
        o_count_5_reg_330 <= add_ln23_1_reg_858;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        o_count_reg_255 <= phi_ln13_reg_179;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        o_count_reg_255 <= add_ln23_3_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln13_1_reg_244 <= indvars_iv1_reg_169;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        phi_ln13_1_reg_244 <= add_ln23_4_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_ln13_reg_179 <= zext_ln13_7_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        phi_ln13_reg_179 <= add_ln13_7_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln13_12_reg_762 <= add_ln13_12_fu_415_p2;
        add_ln13_3_reg_747 <= add_ln13_3_fu_395_p2;
        add_ln13_4_reg_757[5 : 1] <= add_ln13_4_fu_405_p2[5 : 1];
        empty_24_reg_740 <= empty_24_fu_390_p2;
        shl_ln13_reg_752[5 : 1] <= shl_ln13_fu_400_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln13_13_reg_820 <= add_ln13_13_fu_482_p2;
        empty_26_reg_826 <= empty_26_fu_486_p1;
        mul_ln13_reg_779 <= mul_ln13_fu_434_p2;
        p_cast5_reg_799[4 : 0] <= p_cast5_fu_452_p1[4 : 0];
        p_cast9_reg_789[4 : 0] <= p_cast9_fu_443_p1[4 : 0];
        zext_ln13_10_reg_831[9 : 0] <= zext_ln13_10_fu_501_p1[9 : 0];
        zext_ln13_2_reg_774[6 : 0] <= zext_ln13_2_fu_427_p1[6 : 0];
        zext_ln13_5_reg_784[11 : 0] <= zext_ln13_5_fu_440_p1[11 : 0];
        zext_ln13_6_reg_804[9 : 0] <= zext_ln13_6_fu_469_p1[9 : 0];
        zext_ln13_reg_767[4 : 0] <= zext_ln13_fu_424_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_5_reg_734 <= add_ln13_5_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln13_reg_692 <= add_ln13_fu_343_p2;
        trunc_ln13_reg_685 <= trunc_ln13_fu_339_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_552_p2 == 1'd1))) begin
        add_ln20_1_reg_878 <= add_ln20_1_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln20_2_reg_907 <= add_ln20_2_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln23_1_reg_858 <= add_ln23_1_fu_547_p2;
        i_count_reg_853 <= i_count_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_552_p2 == 1'd0))) begin
        add_ln30_reg_873 <= add_ln30_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        depth_reg_840 <= depth_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_23_reg_714 <= empty_23_fu_370_p2;
        empty_25_reg_729 <= empty_25_fu_379_p1;
        empty_reg_708 <= empty_fu_366_p1;
        mul_ln13_1_reg_703 <= mul_ln13_1_fu_360_p2;
        sext_ln5_1_reg_698 <= sext_ln5_1_fu_349_p1;
        trunc_ln13_1_reg_724 <= trunc_ln13_1_fu_375_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        height_reg_868 <= height_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln25_reg_883 <= icmp_ln25_fu_572_p2;
        icmp_ln25_reg_883_pp1_iter1_reg <= icmp_ln25_reg_883;
        o_count_3_reg_299_pp1_iter1_reg <= o_count_3_reg_299;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln25_reg_883_pp1_iter2_reg <= icmp_ln25_reg_883_pp1_iter1_reg;
        o_count_3_reg_299_pp1_iter2_reg <= o_count_3_reg_299_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln25_reg_883_pp1_iter1_reg == 1'd0))) begin
        input_load_reg_902 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_572_p2 == 1'd0))) begin
        o_count_7_reg_897 <= o_count_7_fu_589_p2;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_572_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln13_fu_505_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln25_reg_883 == 1'd0))) begin
        ap_phi_mux_o_count_3_phi_fu_302_p4 = o_count_7_reg_897;
    end else begin
        ap_phi_mux_o_count_3_phi_fu_302_p4 = o_count_3_reg_299;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln13_fu_505_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_address0 = zext_ln47_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_address0 = zext_ln38_fu_611_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        output_r_address0 = zext_ln29_6_fu_595_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = zext_ln19_fu_526_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        output_r_d0 = input_load_reg_902;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (icmp_ln25_reg_883_pp1_iter2_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_state17) & (icmp_ln43_fu_636_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln34_fu_605_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_520_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln13_fu_505_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_520_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_552_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_572_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln25_fu_572_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln34_fu_605_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (icmp_ln43_fu_636_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_10_fu_663_p2 = (indvars_iv1_reg_169 + zext_ln13_10_reg_831);

assign add_ln13_11_fu_411_p2 = (trunc_ln13_reg_685 + add_ln13_5_reg_734);

assign add_ln13_12_fu_415_p2 = (5'd1 + add_ln13_11_fu_411_p2);

assign add_ln13_13_fu_482_p2 = (add_ln13_5_reg_734 + empty_24_reg_740);

assign add_ln13_15_fu_668_p2 = (add_ln13_13_reg_820 + indvars_iv_reg_159);

assign add_ln13_16_fu_673_p2 = (add_ln13_13_reg_820 + indvars_iv2_reg_149);

assign add_ln13_1_fu_458_p2 = (p_cast7_fu_446_p1 + empty_reg_708);

assign add_ln13_2_fu_463_p2 = (add_ln13_1_fu_458_p2 + p_cast4_fu_455_p1);

assign add_ln13_3_fu_395_p1 = input_width;

assign add_ln13_3_fu_395_p2 = ($signed(p_cast8_fu_387_p1) + $signed(add_ln13_3_fu_395_p1));

assign add_ln13_4_fu_405_p2 = (6'd5 + shl_ln13_fu_400_p2);

assign add_ln13_5_fu_383_p2 = (trunc_ln13_1_reg_724 + empty_23_reg_714);

assign add_ln13_6_fu_653_p2 = (zext_ln13_6_reg_804 + indvars_iv10_reg_189);

assign add_ln13_7_fu_658_p2 = (zext_ln13_6_reg_804 + phi_ln13_reg_179);

assign add_ln13_8_fu_490_p2 = (10'd4 + empty_reg_708);

assign add_ln13_9_fu_495_p2 = (zext_ln13_8_fu_476_p1 + add_ln13_8_fu_490_p2);

assign add_ln13_fu_343_p2 = (5'd2 + trunc_ln13_fu_339_p1);

assign add_ln20_1_fu_568_p2 = (add_ln23_1_reg_858 + p_cast5_reg_799);

assign add_ln20_2_fu_600_p2 = (zext_ln13_reg_767 + o_count_2_reg_266);

assign add_ln20_fu_531_p2 = (o_count_1_reg_234 + 16'd1);

assign add_ln23_1_fu_547_p2 = (add_ln23_fu_542_p2 + zext_ln13_5_reg_784);

assign add_ln23_3_fu_622_p2 = (zext_ln13_reg_767 + o_count_reg_255);

assign add_ln23_4_fu_627_p2 = (zext_ln13_reg_767 + phi_ln13_1_reg_244);

assign add_ln23_fu_542_p2 = (p_cast9_reg_789 + o_count_0_reg_199);

assign add_ln30_1_fu_583_p2 = (i_count_2_reg_310 + 14'd1);

assign add_ln30_fu_563_p2 = (zext_ln13_2_reg_774 + i_count_1_reg_277);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign depth_fu_510_p2 = (depth_0_reg_223 + 5'd1);

assign empty_23_fu_370_p2 = (5'd3 + trunc_ln13_reg_685);

assign empty_24_fu_390_p2 = (5'd1 + trunc_ln13_reg_685);

assign empty_25_fu_379_p0 = input_height;

assign empty_25_fu_379_p1 = empty_25_fu_379_p0[4:0];

assign empty_26_fu_486_p1 = input_depth[4:0];

assign empty_fu_366_p1 = mul_ln13_1_fu_360_p2[9:0];

assign height_fu_557_p2 = (height_0_reg_288 + 5'd1);

assign i_count_fu_537_p2 = (mul_ln13_reg_779 + i_count_0_reg_211);

assign icmp_ln13_fu_505_p2 = ((depth_0_reg_223 == empty_26_reg_826) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_520_p2 = ((trunc_ln15_fu_516_p1 == indvars_iv2_reg_149) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_552_p2 = ((height_0_reg_288 == empty_25_reg_729) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_572_p2 = ((ap_phi_mux_o_count_3_phi_fu_302_p4 == o_count_reg_255) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_605_p2 = ((o_count_4_reg_320 == phi_ln13_1_reg_244) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_636_p2 = ((trunc_ln43_fu_632_p1 == indvars_iv_reg_159) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln29_fu_578_p1;

assign mul_ln13_1_fu_360_p0 = mul_ln13_1_fu_360_p00;

assign mul_ln13_1_fu_360_p00 = add_ln13_reg_692;

assign mul_ln13_1_fu_360_p1 = mul_ln13_1_fu_360_p10;

assign mul_ln13_1_fu_360_p10 = $unsigned(sext_ln5_1_fu_349_p1);

assign mul_ln13_1_fu_360_p2 = (mul_ln13_1_fu_360_p0 * mul_ln13_1_fu_360_p1);

assign mul_ln13_fu_434_p0 = mul_ln13_fu_434_p00;

assign mul_ln13_fu_434_p00 = $unsigned(sext_ln5_fu_421_p1);

assign mul_ln13_fu_434_p1 = mul_ln13_fu_434_p10;

assign mul_ln13_fu_434_p10 = $unsigned(sext_ln5_1_reg_698);

assign mul_ln13_fu_434_p2 = (mul_ln13_fu_434_p0 * mul_ln13_fu_434_p1);

assign o_count_6_fu_647_p2 = (o_count_5_reg_330 + 16'd1);

assign o_count_7_fu_589_p2 = (ap_phi_mux_o_count_3_phi_fu_302_p4 + 14'd1);

assign o_count_8_fu_616_p2 = (o_count_4_reg_320 + 14'd1);

assign p_cast4_fu_455_p1 = empty_24_reg_740;

assign p_cast5_fu_452_p1 = empty_24_reg_740;

assign p_cast6_fu_449_p1 = empty_23_reg_714;

assign p_cast7_fu_446_p1 = empty_23_reg_714;

assign p_cast8_fu_387_p1 = empty_23_reg_714;

assign p_cast9_fu_443_p1 = empty_23_reg_714;

assign sext_ln5_1_fu_349_p0 = input_height;

assign sext_ln5_1_fu_349_p1 = sext_ln5_1_fu_349_p0;

assign sext_ln5_fu_421_p0 = input_width;

assign sext_ln5_fu_421_p1 = sext_ln5_fu_421_p0;

assign shl_ln13_fu_400_p0 = input_width;

assign shl_ln13_fu_400_p2 = shl_ln13_fu_400_p0 << 6'd1;

assign trunc_ln13_1_fu_375_p1 = mul_ln13_1_fu_360_p2[4:0];

assign trunc_ln13_fu_339_p0 = input_width;

assign trunc_ln13_fu_339_p1 = trunc_ln13_fu_339_p0[4:0];

assign trunc_ln15_fu_516_p1 = o_count_1_reg_234[4:0];

assign trunc_ln43_fu_632_p1 = o_count_5_reg_330[4:0];

assign zext_ln13_10_fu_501_p1 = add_ln13_9_fu_495_p2;

assign zext_ln13_2_fu_427_p1 = $unsigned(sext_ln5_fu_421_p1);

assign zext_ln13_5_fu_440_p1 = mul_ln13_1_reg_703;

assign zext_ln13_6_fu_469_p1 = add_ln13_2_fu_463_p2;

assign zext_ln13_7_fu_473_p1 = add_ln13_3_reg_747;

assign zext_ln13_8_fu_476_p1 = shl_ln13_reg_752;

assign zext_ln13_9_fu_479_p1 = add_ln13_4_reg_757;

assign zext_ln13_fu_424_p1 = add_ln13_reg_692;

assign zext_ln19_fu_526_p1 = o_count_1_reg_234;

assign zext_ln29_6_fu_595_p1 = o_count_3_reg_299_pp1_iter2_reg;

assign zext_ln29_fu_578_p1 = i_count_2_reg_310;

assign zext_ln38_fu_611_p1 = o_count_4_reg_320;

assign zext_ln47_fu_642_p1 = o_count_5_reg_330;

always @ (posedge ap_clk) begin
    shl_ln13_reg_752[0] <= 1'b0;
    add_ln13_4_reg_757[0] <= 1'b1;
    zext_ln13_reg_767[13:5] <= 9'b000000000;
    zext_ln13_2_reg_774[13:7] <= 7'b0000000;
    zext_ln13_5_reg_784[15:12] <= 4'b0000;
    p_cast9_reg_789[15:5] <= 11'b00000000000;
    p_cast5_reg_799[15:5] <= 11'b00000000000;
    zext_ln13_6_reg_804[13:10] <= 4'b0000;
    zext_ln13_10_reg_831[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
