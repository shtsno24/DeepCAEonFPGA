// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state12 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] SeparableConv2D_0_w_1_address0;
reg    SeparableConv2D_0_w_1_ce0;
wire   [14:0] SeparableConv2D_0_w_1_q0;
reg   [3:0] SeparableConv2D_0_w_1_address1;
reg    SeparableConv2D_0_w_1_ce1;
wire   [14:0] SeparableConv2D_0_w_1_q1;
reg   [9:0] indvar_flatten80_reg_265;
reg   [0:0] out_d_0_reg_276;
reg   [9:0] indvar_flatten_reg_288;
reg   [4:0] out_h_0_reg_300;
reg   [4:0] out_w_0_reg_311;
reg  signed [14:0] reg_323;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln24_reg_1407;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg  signed [14:0] reg_327;
reg  signed [14:0] reg_331;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg  signed [14:0] reg_335;
reg  signed [15:0] reg_339;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln24_reg_1407_pp0_iter1_reg;
reg  signed [15:0] reg_344;
wire   [0:0] out_d_fu_353_p2;
reg   [0:0] out_d_reg_1372;
wire   [2:0] select_ln27_fu_363_p3;
reg   [2:0] select_ln27_reg_1382;
wire   [10:0] tmp10_0_0_fu_399_p2;
reg   [10:0] tmp10_0_0_reg_1387;
wire   [10:0] tmp10_1_0_fu_435_p2;
reg   [10:0] tmp10_1_0_reg_1392;
wire   [9:0] tmp10_2_0_fu_467_p2;
reg   [9:0] tmp10_2_0_reg_1397;
wire   [10:0] tmp12_fu_503_p2;
reg   [10:0] tmp12_reg_1402;
wire   [0:0] icmp_ln24_fu_509_p2;
wire   [9:0] add_ln24_fu_515_p2;
reg   [9:0] add_ln24_reg_1411;
wire   [0:0] icmp_ln32_fu_521_p2;
reg   [0:0] icmp_ln32_reg_1416;
wire   [4:0] select_ln24_fu_527_p3;
reg   [4:0] select_ln24_reg_1432;
wire   [0:0] and_ln24_fu_565_p2;
reg   [0:0] and_ln24_reg_1449;
wire   [4:0] out_h_fu_571_p2;
reg   [4:0] out_h_reg_1459;
wire  signed [1:0] select_ln24_17_fu_592_p3;
reg  signed [1:0] select_ln24_17_reg_1467;
wire   [0:0] xor_ln24_2_fu_609_p2;
reg   [0:0] xor_ln24_2_reg_1477;
wire   [4:0] out_w_0_mid2_fu_640_p3;
reg   [4:0] out_w_0_mid2_reg_1487;
wire   [10:0] tmp10_0_0_mid2_fu_676_p3;
reg   [10:0] tmp10_0_0_mid2_reg_1493;
wire   [10:0] tmp10_1_0_mid2_fu_718_p3;
reg   [10:0] tmp10_1_0_mid2_reg_1498;
wire   [10:0] zext_ln40_1_fu_725_p1;
reg   [10:0] zext_ln40_1_reg_1505;
wire   [4:0] out_w_fu_744_p2;
reg   [4:0] out_w_reg_1516;
wire   [10:0] zext_ln40_12_fu_750_p1;
reg   [10:0] zext_ln40_12_reg_1522;
wire   [0:0] select_ln24_23_fu_815_p3;
reg   [0:0] select_ln24_23_reg_1542;
wire   [4:0] add_ln40_3_fu_905_p2;
reg   [4:0] add_ln40_3_reg_1547;
wire   [10:0] add_ln40_6_fu_941_p2;
reg   [10:0] add_ln40_6_reg_1562;
wire   [10:0] add_ln40_7_fu_945_p2;
reg   [10:0] add_ln40_7_reg_1567;
wire   [10:0] add_ln48_fu_950_p2;
reg   [10:0] add_ln48_reg_1572;
reg   [10:0] add_ln48_reg_1572_pp0_iter1_reg;
wire   [9:0] add_ln32_3_fu_955_p2;
reg   [9:0] add_ln32_3_reg_1577;
wire   [9:0] tmp10_2_0_mid2_fu_1022_p3;
reg   [9:0] tmp10_2_0_mid2_reg_1592;
reg   [15:0] trunc_ln_reg_1599;
reg   [15:0] trunc_ln48_1_reg_1604;
wire   [4:0] select_ln32_fu_1106_p3;
reg   [4:0] select_ln32_reg_1624;
reg   [15:0] trunc_ln48_2_reg_1629;
reg   [15:0] trunc_ln48_3_reg_1634;
wire   [9:0] add_ln40_10_fu_1166_p2;
reg   [9:0] add_ln40_10_reg_1649;
wire   [15:0] add_ln48_1_fu_1171_p2;
reg   [15:0] add_ln48_1_reg_1654;
wire   [9:0] select_ln32_15_fu_1175_p3;
reg   [9:0] select_ln32_15_reg_1659;
reg  signed [14:0] SeparableConv2D_0_w_21_reg_1664;
reg   [15:0] trunc_ln48_4_reg_1669;
reg   [15:0] trunc_ln48_5_reg_1674;
wire   [15:0] add_ln48_3_fu_1223_p2;
reg   [15:0] add_ln48_3_reg_1684;
reg   [15:0] trunc_ln48_6_reg_1689;
reg   [15:0] trunc_ln48_7_reg_1694;
wire   [15:0] add_ln48_4_fu_1262_p2;
reg   [15:0] add_ln48_4_reg_1699;
reg   [15:0] trunc_ln48_8_reg_1704;
wire   [15:0] add_ln48_8_fu_1296_p2;
reg   [15:0] add_ln48_8_reg_1709;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten80_phi_fu_269_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_out_d_0_phi_fu_280_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_292_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_304_p4;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_315_p4;
wire   [63:0] select_ln24_15_fu_535_p3;
wire   [63:0] select_ln24_16_fu_544_p3;
wire   [63:0] zext_ln24_fu_599_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] select_ln24_18_fu_615_p3;
wire   [63:0] zext_ln40_2_fu_739_p1;
wire   [63:0] zext_ln40_3_fu_764_p1;
wire   [63:0] zext_ln24_19_fu_791_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln24_22_fu_810_p1;
wire   [63:0] zext_ln40_4_fu_923_p1;
wire   [63:0] zext_ln40_5_fu_936_p1;
wire   [63:0] zext_ln24_20_fu_972_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] select_ln24_21_fu_977_p3;
wire   [63:0] zext_ln40_6_fu_1058_p1;
wire   [63:0] zext_ln40_7_fu_1066_p1;
wire   [63:0] zext_ln24_21_fu_1101_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln40_8_fu_1151_p1;
wire   [63:0] zext_ln40_9_fu_1161_p1;
wire   [63:0] zext_ln40_10_fu_1215_p1;
wire   [63:0] zext_ln48_fu_1304_p1;
wire   [9:0] p_shl_fu_375_p3;
wire   [5:0] p_shl1_fu_387_p3;
wire   [10:0] p_shl28_cast_fu_383_p1;
wire   [10:0] p_shl29_cast_fu_395_p1;
wire   [4:0] tmp_1_0_fu_405_p2;
wire   [9:0] p_shl2_fu_411_p3;
wire   [5:0] p_shl3_fu_423_p3;
wire   [10:0] p_shl26_cast_fu_419_p1;
wire   [10:0] p_shl27_cast_fu_431_p1;
wire   [4:0] tmp_2_0_fu_441_p2;
wire   [5:0] p_shl5_fu_455_p3;
wire   [9:0] p_shl4_fu_447_p3;
wire   [9:0] p_shl25_cast_fu_463_p1;
wire   [4:0] zext_ln48_1_fu_371_p1;
wire   [4:0] tmp11_fu_473_p2;
wire   [9:0] p_shl6_fu_479_p3;
wire   [6:0] p_shl7_fu_491_p3;
wire   [10:0] p_shl22_cast_fu_487_p1;
wire   [10:0] p_shl23_cast_fu_499_p1;
wire   [63:0] zext_ln27_2_fu_359_p1;
wire   [63:0] zext_ln27_1_fu_349_p1;
wire   [0:0] icmp_ln33_fu_559_p2;
wire   [0:0] xor_ln24_fu_553_p2;
wire   [1:0] or_ln27_mid1_fu_577_p3;
wire   [1:0] or_ln_fu_584_p3;
wire   [0:0] xor_ln24_1_fu_604_p2;
wire   [0:0] empty_61_fu_636_p2;
wire   [9:0] p_shl28_mid1_fu_648_p3;
wire   [5:0] p_shl29_mid1_fu_659_p3;
wire   [10:0] p_shl28_cast_mid1_fu_655_p1;
wire   [10:0] p_shl29_cast_mid1_fu_666_p1;
wire   [10:0] tmp10_0_0_mid1_fu_670_p2;
wire   [10:0] select_ln24_24_fu_624_p3;
wire   [4:0] tmp_1_0_mid1_fu_683_p2;
wire   [9:0] p_shl26_mid1_fu_688_p3;
wire   [5:0] p_shl27_mid1_fu_700_p3;
wire   [10:0] p_shl26_cast_mid1_fu_696_p1;
wire   [10:0] p_shl27_cast_mid1_fu_708_p1;
wire   [10:0] tmp10_1_0_mid1_fu_712_p2;
wire   [10:0] select_ln24_25_fu_630_p3;
wire   [10:0] add_ln40_fu_729_p2;
wire  signed [31:0] sext_ln40_1_fu_735_p1;
wire   [10:0] add_ln40_2_fu_754_p2;
wire  signed [31:0] sext_ln40_3_fu_760_p1;
wire   [2:0] or_ln27_1_mid1_fu_769_p3;
wire   [2:0] or_ln27_s_fu_776_p3;
wire   [2:0] select_ln24_19_fu_784_p3;
wire   [2:0] select_ln27_1_fu_796_p3;
wire   [2:0] select_ln24_20_fu_804_p3;
wire   [5:0] tmp_fu_825_p3;
wire   [2:0] tmp_3_fu_836_p3;
wire   [6:0] p_shl22_cast_mid170_c_fu_832_p1;
wire   [6:0] p_shl23_cast_mid174_c_fu_843_p1;
wire   [6:0] tmp12_mid176_fu_847_p2;
wire  signed [10:0] tmp12_mid176_cast_fu_853_p1;
wire   [4:0] zext_ln24_23_fu_821_p1;
wire   [4:0] tmp11_mid1_fu_863_p2;
wire   [9:0] p_shl22_mid1_fu_868_p3;
wire   [6:0] p_shl23_mid1_fu_880_p3;
wire   [10:0] p_shl22_cast_mid1_fu_876_p1;
wire   [10:0] p_shl23_cast_mid1_fu_888_p1;
wire   [10:0] tmp12_mid1_fu_892_p2;
wire   [10:0] select_ln24_27_fu_857_p3;
wire   [10:0] zext_ln40_14_fu_910_p1;
wire   [10:0] add_ln40_4_fu_914_p2;
wire  signed [31:0] sext_ln40_5_fu_919_p1;
wire   [10:0] add_ln40_5_fu_928_p2;
wire  signed [31:0] sext_ln40_7_fu_932_p1;
wire   [10:0] tmp12_mid2_fu_898_p3;
wire  signed [2:0] sext_ln24_20_fu_969_p1;
wire   [4:0] tmp_2_0_mid1_fu_991_p2;
wire   [5:0] p_shl25_mid1_fu_1004_p3;
wire   [9:0] p_shl24_mid1_fu_996_p3;
wire   [9:0] p_shl25_cast_mid1_fu_1012_p1;
wire   [9:0] tmp10_2_0_mid1_fu_1016_p2;
wire   [9:0] select_ln24_26_fu_985_p3;
wire  signed [29:0] mul_ln40_fu_1309_p2;
wire  signed [29:0] mul_ln40_1_fu_1316_p2;
wire  signed [31:0] sext_ln40_9_fu_1055_p1;
wire  signed [31:0] sext_ln40_11_fu_1063_p1;
wire   [3:0] or_ln27_3_mid1_fu_1079_p3;
wire   [3:0] or_ln27_1_fu_1086_p3;
wire   [3:0] select_ln24_22_fu_1094_p3;
wire  signed [29:0] mul_ln40_2_fu_1323_p2;
wire  signed [29:0] mul_ln40_3_fu_1330_p2;
wire   [9:0] zext_ln40_fu_1111_p1;
wire   [9:0] add_ln40_8_fu_1146_p2;
wire   [9:0] zext_ln40_11_fu_1114_p1;
wire   [9:0] add_ln40_9_fu_1156_p2;
wire   [9:0] zext_ln40_13_fu_1117_p1;
wire  signed [29:0] mul_ln40_4_fu_1337_p2;
wire  signed [29:0] mul_ln40_5_fu_1344_p2;
wire   [15:0] add_ln48_2_fu_1219_p2;
wire  signed [29:0] mul_ln40_6_fu_1351_p2;
wire  signed [29:0] mul_ln40_7_fu_1358_p2;
wire  signed [29:0] mul_ln40_8_fu_1365_p2;
wire   [15:0] add_ln48_5_fu_1282_p2;
wire   [15:0] add_ln48_6_fu_1286_p2;
wire   [15:0] add_ln48_7_fu_1291_p2;
wire  signed [31:0] sext_ln48_fu_1301_p1;
wire    ap_CS_fsm_state12;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

depthwise_conv2d_fix_SeparableConv2D_0_w_1 #(
    .DataWidth( 15 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_w_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_w_1_address0),
    .ce0(SeparableConv2D_0_w_1_ce0),
    .q0(SeparableConv2D_0_w_1_q0),
    .address1(SeparableConv2D_0_w_1_address1),
    .ce1(SeparableConv2D_0_w_1_ce1),
    .q1(SeparableConv2D_0_w_1_q1)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U6(
    .din0(reg_339),
    .din1(reg_323),
    .dout(mul_ln40_fu_1309_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U7(
    .din0(reg_344),
    .din1(reg_327),
    .dout(mul_ln40_1_fu_1316_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U8(
    .din0(reg_339),
    .din1(reg_331),
    .dout(mul_ln40_2_fu_1323_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U9(
    .din0(reg_344),
    .din1(reg_335),
    .dout(mul_ln40_3_fu_1330_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U10(
    .din0(reg_339),
    .din1(reg_323),
    .dout(mul_ln40_4_fu_1337_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U11(
    .din0(reg_344),
    .din1(reg_327),
    .dout(mul_ln40_5_fu_1344_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U12(
    .din0(reg_339),
    .din1(reg_331),
    .dout(mul_ln40_6_fu_1351_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U13(
    .din0(reg_344),
    .din1(reg_335),
    .dout(mul_ln40_7_fu_1358_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U14(
    .din0(reg_339),
    .din1(SeparableConv2D_0_w_21_reg_1664),
    .dout(mul_ln40_8_fu_1365_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten80_reg_265 <= add_ln24_reg_1411;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten80_reg_265 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_288 <= select_ln32_15_reg_1659;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_288 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_276 <= select_ln24_23_reg_1542;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_276 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_h_0_reg_300 <= select_ln32_reg_1624;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_300 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_0_reg_311 <= out_w_reg_1516;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_311 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln24_reg_1407 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_339 <= input_r_q1;
    end else if ((((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln24_reg_1407_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        reg_339 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln24_reg_1407 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        reg_344 <= input_r_q0;
    end else if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        reg_344 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        SeparableConv2D_0_w_21_reg_1664 <= SeparableConv2D_0_w_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln24_reg_1411 <= add_ln24_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1416 == 1'd0) & (icmp_ln24_reg_1407 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln32_3_reg_1577 <= add_ln32_3_fu_955_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln40_10_reg_1649 <= add_ln40_10_fu_1166_p2;
        add_ln48_1_reg_1654 <= add_ln48_1_fu_1171_p2;
        trunc_ln48_2_reg_1629 <= {{mul_ln40_2_fu_1323_p2[29:14]}};
        trunc_ln48_3_reg_1634 <= {{mul_ln40_3_fu_1330_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln40_3_reg_1547 <= add_ln40_3_fu_905_p2;
        add_ln40_6_reg_1562 <= add_ln40_6_fu_941_p2;
        add_ln40_7_reg_1567 <= add_ln40_7_fu_945_p2;
        add_ln48_reg_1572 <= add_ln48_fu_950_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln48_3_reg_1684 <= add_ln48_3_fu_1223_p2;
        trunc_ln48_4_reg_1669 <= {{mul_ln40_4_fu_1337_p2[29:14]}};
        trunc_ln48_5_reg_1674 <= {{mul_ln40_5_fu_1344_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln48_4_reg_1699 <= add_ln48_4_fu_1262_p2;
        trunc_ln48_6_reg_1689 <= {{mul_ln40_6_fu_1351_p2[29:14]}};
        trunc_ln48_7_reg_1694 <= {{mul_ln40_7_fu_1358_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln24_reg_1407_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln48_8_reg_1709 <= add_ln48_8_fu_1296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln48_reg_1572_pp0_iter1_reg <= add_ln48_reg_1572;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln24_reg_1449 <= and_ln24_fu_565_p2;
        icmp_ln32_reg_1416 <= icmp_ln32_fu_521_p2;
        out_h_reg_1459 <= out_h_fu_571_p2;
        select_ln24_reg_1432 <= select_ln24_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln24_reg_1407 <= icmp_ln24_fu_509_p2;
        icmp_ln24_reg_1407_pp0_iter1_reg <= icmp_ln24_reg_1407;
        out_d_reg_1372 <= out_d_fu_353_p2;
        select_ln27_reg_1382[1 : 0] <= select_ln27_fu_363_p3[1 : 0];
        tmp10_0_0_reg_1387[10 : 1] <= tmp10_0_0_fu_399_p2[10 : 1];
        tmp10_1_0_reg_1392[10 : 1] <= tmp10_1_0_fu_435_p2[10 : 1];
        tmp10_2_0_reg_1397[9 : 1] <= tmp10_2_0_fu_467_p2[9 : 1];
        tmp12_reg_1402[10 : 2] <= tmp12_fu_503_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_w_0_mid2_reg_1487 <= out_w_0_mid2_fu_640_p3;
        select_ln24_17_reg_1467[0] <= select_ln24_17_fu_592_p3[0];
        tmp10_0_0_mid2_reg_1493[10 : 1] <= tmp10_0_0_mid2_fu_676_p3[10 : 1];
        tmp10_1_0_mid2_reg_1498[10 : 1] <= tmp10_1_0_mid2_fu_718_p3[10 : 1];
        xor_ln24_2_reg_1477 <= xor_ln24_2_fu_609_p2;
        zext_ln40_12_reg_1522[4 : 0] <= zext_ln40_12_fu_750_p1[4 : 0];
        zext_ln40_1_reg_1505[4 : 0] <= zext_ln40_1_fu_725_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_w_reg_1516 <= out_w_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln24_reg_1407 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln24_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_323 <= SeparableConv2D_0_w_1_q0;
        reg_327 <= SeparableConv2D_0_w_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_331 <= SeparableConv2D_0_w_1_q0;
        reg_335 <= SeparableConv2D_0_w_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln24_23_reg_1542 <= select_ln24_23_fu_815_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        select_ln32_15_reg_1659 <= select_ln32_15_fu_1175_p3;
        select_ln32_reg_1624 <= select_ln32_fu_1106_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln24_reg_1407 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp10_2_0_mid2_reg_1592[9 : 1] <= tmp10_2_0_mid2_fu_1022_p3[9 : 1];
        trunc_ln48_1_reg_1604 <= {{mul_ln40_1_fu_1316_p2[29:14]}};
        trunc_ln_reg_1599 <= {{mul_ln40_fu_1309_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1407_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        trunc_ln48_8_reg_1704 <= {{mul_ln40_8_fu_1365_p2[29:14]}};
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            SeparableConv2D_0_w_1_address0 = zext_ln24_21_fu_1101_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            SeparableConv2D_0_w_1_address0 = zext_ln24_20_fu_972_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            SeparableConv2D_0_w_1_address0 = zext_ln24_19_fu_791_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            SeparableConv2D_0_w_1_address0 = zext_ln24_fu_599_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            SeparableConv2D_0_w_1_address0 = select_ln24_15_fu_535_p3;
        end else begin
            SeparableConv2D_0_w_1_address0 = 'bx;
        end
    end else begin
        SeparableConv2D_0_w_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            SeparableConv2D_0_w_1_address1 = select_ln24_21_fu_977_p3;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            SeparableConv2D_0_w_1_address1 = zext_ln24_22_fu_810_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            SeparableConv2D_0_w_1_address1 = select_ln24_18_fu_615_p3;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            SeparableConv2D_0_w_1_address1 = select_ln24_16_fu_544_p3;
        end else begin
            SeparableConv2D_0_w_1_address1 = 'bx;
        end
    end else begin
        SeparableConv2D_0_w_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        SeparableConv2D_0_w_1_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_w_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        SeparableConv2D_0_w_1_ce1 = 1'b1;
    end else begin
        SeparableConv2D_0_w_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_509_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten80_phi_fu_269_p4 = add_ln24_reg_1411;
    end else begin
        ap_phi_mux_indvar_flatten80_phi_fu_269_p4 = indvar_flatten80_reg_265;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_292_p4 = select_ln32_15_reg_1659;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_292_p4 = indvar_flatten_reg_288;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_280_p4 = select_ln24_23_reg_1542;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_280_p4 = out_d_0_reg_276;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_h_0_phi_fu_304_p4 = select_ln32_reg_1624;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_304_p4 = out_h_0_reg_300;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_315_p4 = out_w_reg_1516;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_315_p4 = out_w_0_reg_311;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln40_10_fu_1215_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address0 = zext_ln40_9_fu_1161_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln40_7_fu_1066_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln40_5_fu_936_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln40_2_fu_739_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address1 = zext_ln40_8_fu_1151_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = zext_ln40_6_fu_1058_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln40_4_fu_923_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln40_3_fu_764_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1407_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_509_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_509_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_515_p2 = (ap_phi_mux_indvar_flatten80_phi_fu_269_p4 + 10'd1);

assign add_ln32_3_fu_955_p2 = (indvar_flatten_reg_288 + 10'd1);

assign add_ln40_10_fu_1166_p2 = (tmp10_2_0_mid2_reg_1592 + zext_ln40_13_fu_1117_p1);

assign add_ln40_2_fu_754_p2 = (tmp10_0_0_mid2_fu_676_p3 + zext_ln40_12_fu_750_p1);

assign add_ln40_3_fu_905_p2 = (out_w_0_mid2_reg_1487 + 5'd2);

assign add_ln40_4_fu_914_p2 = (tmp10_0_0_mid2_reg_1493 + zext_ln40_14_fu_910_p1);

assign add_ln40_5_fu_928_p2 = (zext_ln40_1_reg_1505 + tmp10_1_0_mid2_reg_1498);

assign add_ln40_6_fu_941_p2 = (tmp10_1_0_mid2_reg_1498 + zext_ln40_12_reg_1522);

assign add_ln40_7_fu_945_p2 = (tmp10_1_0_mid2_reg_1498 + zext_ln40_14_fu_910_p1);

assign add_ln40_8_fu_1146_p2 = (zext_ln40_fu_1111_p1 + tmp10_2_0_mid2_reg_1592);

assign add_ln40_9_fu_1156_p2 = (tmp10_2_0_mid2_reg_1592 + zext_ln40_11_fu_1114_p1);

assign add_ln40_fu_729_p2 = (zext_ln40_1_fu_725_p1 + tmp10_0_0_mid2_fu_676_p3);

assign add_ln48_1_fu_1171_p2 = (trunc_ln_reg_1599 + trunc_ln48_1_reg_1604);

assign add_ln48_2_fu_1219_p2 = (trunc_ln48_3_reg_1634 + trunc_ln48_2_reg_1629);

assign add_ln48_3_fu_1223_p2 = (add_ln48_1_reg_1654 + add_ln48_2_fu_1219_p2);

assign add_ln48_4_fu_1262_p2 = (trunc_ln48_5_reg_1674 + trunc_ln48_4_reg_1669);

assign add_ln48_5_fu_1282_p2 = (trunc_ln48_8_reg_1704 + trunc_ln48_7_reg_1694);

assign add_ln48_6_fu_1286_p2 = (trunc_ln48_6_reg_1689 + add_ln48_5_fu_1282_p2);

assign add_ln48_7_fu_1291_p2 = (add_ln48_4_reg_1699 + add_ln48_6_fu_1286_p2);

assign add_ln48_8_fu_1296_p2 = (add_ln48_3_reg_1684 + add_ln48_7_fu_1291_p2);

assign add_ln48_fu_950_p2 = (zext_ln40_1_reg_1505 + tmp12_mid2_fu_898_p3);

assign and_ln24_fu_565_p2 = (xor_ln24_fu_553_p2 & icmp_ln33_fu_559_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_61_fu_636_p2 = (icmp_ln32_reg_1416 | and_ln24_reg_1449);

assign icmp_ln24_fu_509_p2 = ((ap_phi_mux_indvar_flatten80_phi_fu_269_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_521_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_292_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_559_p2 = ((ap_phi_mux_out_w_0_phi_fu_315_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln27_1_fu_1086_p3 = {{3'd4}, {out_d_0_reg_276}};

assign or_ln27_1_mid1_fu_769_p3 = {{2'd2}, {out_d_reg_1372}};

assign or_ln27_3_mid1_fu_1079_p3 = {{3'd4}, {out_d_reg_1372}};

assign or_ln27_mid1_fu_577_p3 = {{1'd1}, {out_d_reg_1372}};

assign or_ln27_s_fu_776_p3 = {{2'd2}, {out_d_0_reg_276}};

assign or_ln_fu_584_p3 = {{1'd1}, {out_d_0_reg_276}};

assign out_d_fu_353_p2 = (ap_phi_mux_out_d_0_phi_fu_280_p4 ^ 1'd1);

assign out_h_fu_571_p2 = (select_ln24_fu_527_p3 + 5'd1);

assign out_w_0_mid2_fu_640_p3 = ((empty_61_fu_636_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_311);

assign out_w_fu_744_p2 = (out_w_0_mid2_fu_640_p3 + 5'd1);

assign output_r_address0 = zext_ln48_fu_1304_p1;

assign output_r_d0 = add_ln48_8_reg_1709;

assign p_shl1_fu_387_p3 = {{ap_phi_mux_out_h_0_phi_fu_304_p4}, {1'd0}};

assign p_shl22_cast_fu_487_p1 = p_shl6_fu_479_p3;

assign p_shl22_cast_mid170_c_fu_832_p1 = tmp_fu_825_p3;

assign p_shl22_cast_mid1_fu_876_p1 = p_shl22_mid1_fu_868_p3;

assign p_shl22_mid1_fu_868_p3 = {{tmp11_mid1_fu_863_p2}, {5'd0}};

assign p_shl23_cast_fu_499_p1 = p_shl7_fu_491_p3;

assign p_shl23_cast_mid174_c_fu_843_p1 = tmp_3_fu_836_p3;

assign p_shl23_cast_mid1_fu_888_p1 = p_shl23_mid1_fu_880_p3;

assign p_shl23_mid1_fu_880_p3 = {{tmp11_mid1_fu_863_p2}, {2'd0}};

assign p_shl24_mid1_fu_996_p3 = {{tmp_2_0_mid1_fu_991_p2}, {5'd0}};

assign p_shl25_cast_fu_463_p1 = p_shl5_fu_455_p3;

assign p_shl25_cast_mid1_fu_1012_p1 = p_shl25_mid1_fu_1004_p3;

assign p_shl25_mid1_fu_1004_p3 = {{tmp_2_0_mid1_fu_991_p2}, {1'd0}};

assign p_shl26_cast_fu_419_p1 = p_shl2_fu_411_p3;

assign p_shl26_cast_mid1_fu_696_p1 = p_shl26_mid1_fu_688_p3;

assign p_shl26_mid1_fu_688_p3 = {{tmp_1_0_mid1_fu_683_p2}, {5'd0}};

assign p_shl27_cast_fu_431_p1 = p_shl3_fu_423_p3;

assign p_shl27_cast_mid1_fu_708_p1 = p_shl27_mid1_fu_700_p3;

assign p_shl27_mid1_fu_700_p3 = {{tmp_1_0_mid1_fu_683_p2}, {1'd0}};

assign p_shl28_cast_fu_383_p1 = p_shl_fu_375_p3;

assign p_shl28_cast_mid1_fu_655_p1 = p_shl28_mid1_fu_648_p3;

assign p_shl28_mid1_fu_648_p3 = {{out_h_reg_1459}, {5'd0}};

assign p_shl29_cast_fu_395_p1 = p_shl1_fu_387_p3;

assign p_shl29_cast_mid1_fu_666_p1 = p_shl29_mid1_fu_659_p3;

assign p_shl29_mid1_fu_659_p3 = {{out_h_reg_1459}, {1'd0}};

assign p_shl2_fu_411_p3 = {{tmp_1_0_fu_405_p2}, {5'd0}};

assign p_shl3_fu_423_p3 = {{tmp_1_0_fu_405_p2}, {1'd0}};

assign p_shl4_fu_447_p3 = {{tmp_2_0_fu_441_p2}, {5'd0}};

assign p_shl5_fu_455_p3 = {{tmp_2_0_fu_441_p2}, {1'd0}};

assign p_shl6_fu_479_p3 = {{tmp11_fu_473_p2}, {5'd0}};

assign p_shl7_fu_491_p3 = {{tmp11_fu_473_p2}, {2'd0}};

assign p_shl_fu_375_p3 = {{ap_phi_mux_out_h_0_phi_fu_304_p4}, {5'd0}};

assign select_ln24_15_fu_535_p3 = ((icmp_ln32_fu_521_p2[0:0] === 1'b1) ? zext_ln27_2_fu_359_p1 : zext_ln27_1_fu_349_p1);

assign select_ln24_16_fu_544_p3 = ((icmp_ln32_fu_521_p2[0:0] === 1'b1) ? zext_ln27_1_fu_349_p1 : zext_ln27_2_fu_359_p1);

assign select_ln24_17_fu_592_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? or_ln27_mid1_fu_577_p3 : or_ln_fu_584_p3);

assign select_ln24_18_fu_615_p3 = ((xor_ln24_2_fu_609_p2[0:0] === 1'b1) ? 64'd3 : 64'd0);

assign select_ln24_19_fu_784_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? or_ln27_1_mid1_fu_769_p3 : or_ln27_s_fu_776_p3);

assign select_ln24_20_fu_804_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? select_ln27_1_fu_796_p3 : select_ln27_reg_1382);

assign select_ln24_21_fu_977_p3 = ((xor_ln24_2_reg_1477[0:0] === 1'b1) ? 64'd7 : 64'd0);

assign select_ln24_22_fu_1094_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? or_ln27_3_mid1_fu_1079_p3 : or_ln27_1_fu_1086_p3);

assign select_ln24_23_fu_815_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? out_d_reg_1372 : out_d_0_reg_276);

assign select_ln24_24_fu_624_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? 11'd0 : tmp10_0_0_reg_1387);

assign select_ln24_25_fu_630_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? 11'd30 : tmp10_1_0_reg_1392);

assign select_ln24_26_fu_985_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? 10'd60 : tmp10_2_0_reg_1397);

assign select_ln24_27_fu_857_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? tmp12_mid176_cast_fu_853_p1 : tmp12_reg_1402);

assign select_ln24_fu_527_p3 = ((icmp_ln32_fu_521_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_h_0_phi_fu_304_p4);

assign select_ln27_1_fu_796_p3 = ((out_d_0_reg_276[0:0] === 1'b1) ? 3'd5 : 3'd6);

assign select_ln27_fu_363_p3 = ((ap_phi_mux_out_d_0_phi_fu_280_p4[0:0] === 1'b1) ? 3'd6 : 3'd5);

assign select_ln32_15_fu_1175_p3 = ((icmp_ln32_reg_1416[0:0] === 1'b1) ? 10'd1 : add_ln32_3_reg_1577);

assign select_ln32_fu_1106_p3 = ((and_ln24_reg_1449[0:0] === 1'b1) ? out_h_reg_1459 : select_ln24_reg_1432);

assign sext_ln24_20_fu_969_p1 = select_ln24_17_reg_1467;

assign sext_ln40_11_fu_1063_p1 = $signed(add_ln40_7_reg_1567);

assign sext_ln40_1_fu_735_p1 = $signed(add_ln40_fu_729_p2);

assign sext_ln40_3_fu_760_p1 = $signed(add_ln40_2_fu_754_p2);

assign sext_ln40_5_fu_919_p1 = $signed(add_ln40_4_fu_914_p2);

assign sext_ln40_7_fu_932_p1 = $signed(add_ln40_5_fu_928_p2);

assign sext_ln40_9_fu_1055_p1 = $signed(add_ln40_6_reg_1562);

assign sext_ln48_fu_1301_p1 = $signed(add_ln48_reg_1572_pp0_iter1_reg);

assign tmp10_0_0_fu_399_p2 = (p_shl28_cast_fu_383_p1 - p_shl29_cast_fu_395_p1);

assign tmp10_0_0_mid1_fu_670_p2 = (p_shl28_cast_mid1_fu_655_p1 - p_shl29_cast_mid1_fu_666_p1);

assign tmp10_0_0_mid2_fu_676_p3 = ((and_ln24_reg_1449[0:0] === 1'b1) ? tmp10_0_0_mid1_fu_670_p2 : select_ln24_24_fu_624_p3);

assign tmp10_1_0_fu_435_p2 = (p_shl26_cast_fu_419_p1 - p_shl27_cast_fu_431_p1);

assign tmp10_1_0_mid1_fu_712_p2 = (p_shl26_cast_mid1_fu_696_p1 - p_shl27_cast_mid1_fu_708_p1);

assign tmp10_1_0_mid2_fu_718_p3 = ((and_ln24_reg_1449[0:0] === 1'b1) ? tmp10_1_0_mid1_fu_712_p2 : select_ln24_25_fu_630_p3);

assign tmp10_2_0_fu_467_p2 = (p_shl4_fu_447_p3 - p_shl25_cast_fu_463_p1);

assign tmp10_2_0_mid1_fu_1016_p2 = (p_shl24_mid1_fu_996_p3 - p_shl25_cast_mid1_fu_1012_p1);

assign tmp10_2_0_mid2_fu_1022_p3 = ((and_ln24_reg_1449[0:0] === 1'b1) ? tmp10_2_0_mid1_fu_1016_p2 : select_ln24_26_fu_985_p3);

assign tmp11_fu_473_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + zext_ln48_1_fu_371_p1);

assign tmp11_mid1_fu_863_p2 = (out_h_reg_1459 + zext_ln24_23_fu_821_p1);

assign tmp12_fu_503_p2 = (p_shl22_cast_fu_487_p1 - p_shl23_cast_fu_499_p1);

assign tmp12_mid176_cast_fu_853_p1 = $signed(tmp12_mid176_fu_847_p2);

assign tmp12_mid176_fu_847_p2 = (p_shl22_cast_mid170_c_fu_832_p1 - p_shl23_cast_mid174_c_fu_843_p1);

assign tmp12_mid1_fu_892_p2 = (p_shl22_cast_mid1_fu_876_p1 - p_shl23_cast_mid1_fu_888_p1);

assign tmp12_mid2_fu_898_p3 = ((and_ln24_reg_1449[0:0] === 1'b1) ? tmp12_mid1_fu_892_p2 : select_ln24_27_fu_857_p3);

assign tmp_1_0_fu_405_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + 5'd1);

assign tmp_1_0_mid1_fu_683_p2 = (select_ln24_reg_1432 + 5'd2);

assign tmp_2_0_fu_441_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + 5'd2);

assign tmp_2_0_mid1_fu_991_p2 = (select_ln24_reg_1432 + 5'd3);

assign tmp_3_fu_836_p3 = {{out_d_reg_1372}, {2'd0}};

assign tmp_fu_825_p3 = {{out_d_reg_1372}, {5'd0}};

assign xor_ln24_1_fu_604_p2 = (icmp_ln32_reg_1416 ^ 1'd1);

assign xor_ln24_2_fu_609_p2 = (xor_ln24_1_fu_604_p2 ^ out_d_0_reg_276);

assign xor_ln24_fu_553_p2 = (icmp_ln32_fu_521_p2 ^ 1'd1);

assign zext_ln24_19_fu_791_p1 = select_ln24_19_fu_784_p3;

assign zext_ln24_20_fu_972_p1 = $unsigned(sext_ln24_20_fu_969_p1);

assign zext_ln24_21_fu_1101_p1 = select_ln24_22_fu_1094_p3;

assign zext_ln24_22_fu_810_p1 = select_ln24_20_fu_804_p3;

assign zext_ln24_23_fu_821_p1 = select_ln24_23_fu_815_p3;

assign zext_ln24_fu_599_p1 = $unsigned(select_ln24_17_fu_592_p3);

assign zext_ln27_1_fu_349_p1 = ap_phi_mux_out_d_0_phi_fu_280_p4;

assign zext_ln27_2_fu_359_p1 = out_d_fu_353_p2;

assign zext_ln40_10_fu_1215_p1 = add_ln40_10_reg_1649;

assign zext_ln40_11_fu_1114_p1 = out_w_reg_1516;

assign zext_ln40_12_fu_750_p1 = out_w_fu_744_p2;

assign zext_ln40_13_fu_1117_p1 = add_ln40_3_reg_1547;

assign zext_ln40_14_fu_910_p1 = add_ln40_3_fu_905_p2;

assign zext_ln40_1_fu_725_p1 = out_w_0_mid2_fu_640_p3;

assign zext_ln40_2_fu_739_p1 = $unsigned(sext_ln40_1_fu_735_p1);

assign zext_ln40_3_fu_764_p1 = $unsigned(sext_ln40_3_fu_760_p1);

assign zext_ln40_4_fu_923_p1 = $unsigned(sext_ln40_5_fu_919_p1);

assign zext_ln40_5_fu_936_p1 = $unsigned(sext_ln40_7_fu_932_p1);

assign zext_ln40_6_fu_1058_p1 = $unsigned(sext_ln40_9_fu_1055_p1);

assign zext_ln40_7_fu_1066_p1 = $unsigned(sext_ln40_11_fu_1063_p1);

assign zext_ln40_8_fu_1151_p1 = add_ln40_8_fu_1146_p2;

assign zext_ln40_9_fu_1161_p1 = add_ln40_9_fu_1156_p2;

assign zext_ln40_fu_1111_p1 = out_w_0_mid2_reg_1487;

assign zext_ln48_1_fu_371_p1 = ap_phi_mux_out_d_0_phi_fu_280_p4;

assign zext_ln48_fu_1304_p1 = $unsigned(sext_ln48_fu_1301_p1);

always @ (posedge ap_clk) begin
    select_ln27_reg_1382[2] <= 1'b1;
    tmp10_0_0_reg_1387[0] <= 1'b0;
    tmp10_1_0_reg_1392[0] <= 1'b0;
    tmp10_2_0_reg_1397[0] <= 1'b0;
    tmp12_reg_1402[1:0] <= 2'b00;
    select_ln24_17_reg_1467[1] <= 1'b1;
    tmp10_0_0_mid2_reg_1493[0] <= 1'b0;
    tmp10_1_0_mid2_reg_1498[0] <= 1'b0;
    zext_ln40_1_reg_1505[10:5] <= 6'b000000;
    zext_ln40_12_reg_1522[10:5] <= 6'b000000;
    tmp10_2_0_mid2_reg_1592[0] <= 1'b0;
end

endmodule //depthwise_conv2d_fix
