// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] reg_177;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg  signed [15:0] reg_182;
wire   [4:0] out_h_fu_193_p2;
reg   [4:0] out_h_reg_677;
wire    ap_CS_fsm_state2;
wire   [4:0] add_ln79_fu_199_p2;
reg   [4:0] add_ln79_reg_684;
wire   [0:0] icmp_ln21_fu_187_p2;
wire   [10:0] sub_ln41_fu_229_p2;
reg   [10:0] sub_ln41_reg_690;
wire    ap_CS_fsm_state3;
wire   [10:0] sub_ln60_fu_257_p2;
reg   [10:0] sub_ln60_reg_695;
wire   [9:0] sub_ln79_fu_281_p2;
reg   [9:0] sub_ln79_reg_700;
wire   [10:0] tmp10_fu_299_p2;
reg   [10:0] tmp10_reg_705;
wire   [4:0] out_w_fu_311_p2;
reg   [4:0] out_w_reg_713;
wire    ap_CS_fsm_state4;
wire  signed [10:0] add_ln41_fu_325_p2;
reg  signed [10:0] add_ln41_reg_718;
wire   [0:0] icmp_ln22_fu_305_p2;
wire   [10:0] add_ln47_1_fu_330_p2;
reg   [10:0] add_ln47_1_reg_724;
wire  signed [10:0] add_ln60_1_fu_336_p2;
reg  signed [10:0] add_ln60_1_reg_729;
wire   [9:0] add_ln79_1_fu_341_p2;
reg   [9:0] add_ln79_1_reg_736;
wire   [10:0] add_ln103_fu_346_p2;
reg   [10:0] add_ln103_reg_743;
wire    ap_CS_fsm_state5;
wire   [10:0] add_ln53_1_fu_367_p2;
reg   [10:0] add_ln53_1_reg_758;
wire   [10:0] add_ln66_fu_388_p2;
reg   [10:0] add_ln66_reg_773;
wire   [10:0] add_ln72_fu_393_p2;
reg   [10:0] add_ln72_reg_778;
wire  signed [29:0] mul_ln41_fu_632_p2;
reg  signed [29:0] mul_ln41_reg_783;
wire  signed [29:0] mul_ln47_fu_638_p2;
reg  signed [29:0] mul_ln47_reg_788;
wire  signed [27:0] mul_ln53_fu_644_p2;
reg  signed [27:0] mul_ln53_reg_803;
wire   [9:0] add_ln85_fu_440_p2;
reg   [9:0] add_ln85_reg_813;
wire   [9:0] add_ln91_fu_445_p2;
reg   [9:0] add_ln91_reg_818;
reg   [2:0] tmp_7_reg_823;
wire   [15:0] add_ln103_2_fu_478_p2;
reg   [15:0] add_ln103_2_reg_828;
wire  signed [29:0] mul_ln66_fu_650_p2;
reg  signed [29:0] mul_ln66_reg_833;
wire  signed [29:0] mul_ln72_fu_656_p2;
reg  signed [29:0] mul_ln72_reg_838;
wire   [15:0] add_ln103_4_fu_522_p2;
reg   [15:0] add_ln103_4_reg_853;
wire  signed [27:0] mul_ln79_fu_662_p2;
reg  signed [27:0] mul_ln79_reg_858;
wire   [15:0] add_ln103_5_fu_549_p2;
reg   [15:0] add_ln103_5_reg_863;
wire  signed [29:0] mul_ln91_fu_668_p2;
reg  signed [29:0] mul_ln91_reg_868;
wire    ap_CS_fsm_state11;
reg   [13:0] tmp_8_reg_873;
reg   [2:0] tmp_9_reg_878;
wire   [15:0] add_ln103_7_fu_609_p2;
reg   [15:0] add_ln103_7_reg_883;
wire    ap_CS_fsm_state12;
wire   [15:0] add_ln103_1_fu_619_p2;
reg   [15:0] add_ln103_1_reg_888;
wire    ap_CS_fsm_state13;
reg   [4:0] out_h_0_reg_154;
reg   [4:0] out_w_0_reg_166;
wire    ap_CS_fsm_state14;
wire   [63:0] zext_ln41_3_fu_354_p1;
wire   [63:0] zext_ln47_fu_362_p1;
wire   [63:0] zext_ln53_fu_375_p1;
wire   [63:0] zext_ln60_fu_383_p1;
wire   [63:0] zext_ln66_fu_409_p1;
wire   [63:0] zext_ln72_fu_417_p1;
wire   [63:0] zext_ln79_fu_436_p1;
wire   [63:0] zext_ln85_fu_492_p1;
wire   [63:0] zext_ln91_fu_496_p1;
wire   [63:0] zext_ln103_fu_627_p1;
wire   [9:0] shl_ln_fu_205_p3;
wire   [5:0] shl_ln41_1_fu_217_p3;
wire   [10:0] zext_ln41_4_fu_213_p1;
wire   [10:0] zext_ln41_5_fu_225_p1;
wire   [9:0] shl_ln1_fu_235_p3;
wire   [5:0] shl_ln60_1_fu_246_p3;
wire   [10:0] zext_ln60_3_fu_242_p1;
wire   [10:0] zext_ln60_4_fu_253_p1;
wire   [5:0] shl_ln79_1_fu_270_p3;
wire   [9:0] shl_ln2_fu_263_p3;
wire   [9:0] zext_ln79_3_fu_277_p1;
wire   [6:0] p_shl9_fu_287_p3;
wire   [10:0] p_shl9_cast_fu_295_p1;
wire   [10:0] zext_ln41_7_fu_321_p1;
wire   [9:0] zext_ln41_6_fu_317_p1;
wire  signed [31:0] sext_ln41_fu_351_p1;
wire  signed [31:0] sext_ln47_fu_359_p1;
wire  signed [31:0] sext_ln53_fu_372_p1;
wire  signed [31:0] sext_ln60_1_fu_380_p1;
wire  signed [31:0] sext_ln66_fu_406_p1;
wire  signed [31:0] sext_ln72_fu_414_p1;
wire  signed [16:0] sext_ln60_fu_426_p1;
wire   [16:0] sub_ln60_1_fu_430_p2;
wire   [15:0] trunc_ln_fu_450_p4;
wire   [15:0] trunc_ln92_1_fu_459_p4;
wire   [13:0] tmp_fu_500_p4;
wire  signed [15:0] sext_ln97_fu_513_p1;
wire  signed [15:0] sext_ln93_fu_509_p1;
wire   [15:0] add_ln103_3_fu_516_p2;
wire   [15:0] trunc_ln11_fu_540_p4;
wire   [15:0] trunc_ln10_fu_531_p4;
wire  signed [16:0] sext_ln85_fu_555_p1;
wire   [16:0] sub_ln85_fu_559_p2;
wire   [15:0] trunc_ln101_1_fu_594_p4;
wire  signed [15:0] sext_ln101_fu_591_p1;
wire  signed [15:0] sext_ln94_fu_588_p1;
wire   [15:0] add_ln103_6_fu_603_p2;
wire   [15:0] add_ln103_8_fu_615_p2;
wire  signed [31:0] sext_ln103_fu_624_p1;
wire  signed [14:0] mul_ln41_fu_632_p1;
wire  signed [14:0] mul_ln47_fu_638_p1;
wire   [11:0] mul_ln53_fu_644_p1;
wire  signed [14:0] mul_ln66_fu_650_p1;
wire  signed [14:0] mul_ln72_fu_656_p1;
wire   [11:0] mul_ln79_fu_662_p1;
wire  signed [14:0] mul_ln91_fu_668_p1;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U6(
    .din0(reg_177),
    .din1(mul_ln41_fu_632_p1),
    .dout(mul_ln41_fu_632_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U7(
    .din0(reg_182),
    .din1(mul_ln47_fu_638_p1),
    .dout(mul_ln47_fu_638_p2)
);

network_mul_mul_16s_12ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
network_mul_mul_16s_12ns_28_1_1_U8(
    .din0(reg_177),
    .din1(mul_ln53_fu_644_p1),
    .dout(mul_ln53_fu_644_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U9(
    .din0(reg_177),
    .din1(mul_ln66_fu_650_p1),
    .dout(mul_ln66_fu_650_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U10(
    .din0(reg_182),
    .din1(mul_ln72_fu_656_p1),
    .dout(mul_ln72_fu_656_p2)
);

network_mul_mul_16s_12ns_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
network_mul_mul_16s_12ns_28_1_1_U11(
    .din0(reg_177),
    .din1(mul_ln79_fu_662_p1),
    .dout(mul_ln79_fu_662_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U12(
    .din0(reg_182),
    .din1(mul_ln91_fu_668_p1),
    .dout(mul_ln91_fu_668_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln22_fu_305_p2 == 1'd1))) begin
        out_h_0_reg_154 <= out_h_reg_677;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_154 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_w_0_reg_166 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        out_w_0_reg_166 <= out_w_reg_713;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        reg_177 <= input_r_q1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_177 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        reg_182 <= input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_182 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln103_1_reg_888 <= add_ln103_1_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln103_2_reg_828 <= add_ln103_2_fu_478_p2;
        add_ln85_reg_813 <= add_ln85_fu_440_p2;
        add_ln91_reg_818 <= add_ln91_fu_445_p2;
        mul_ln53_reg_803 <= mul_ln53_fu_644_p2;
        tmp_7_reg_823 <= {{sub_ln60_1_fu_430_p2[16:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln103_4_reg_853 <= add_ln103_4_fu_522_p2;
        mul_ln66_reg_833 <= mul_ln66_fu_650_p2;
        mul_ln72_reg_838 <= mul_ln72_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln103_5_reg_863 <= add_ln103_5_fu_549_p2;
        mul_ln79_reg_858 <= mul_ln79_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln103_7_reg_883 <= add_ln103_7_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln103_reg_743 <= add_ln103_fu_346_p2;
        add_ln41_reg_718 <= add_ln41_fu_325_p2;
        add_ln47_1_reg_724 <= add_ln47_1_fu_330_p2;
        add_ln60_1_reg_729 <= add_ln60_1_fu_336_p2;
        add_ln79_1_reg_736 <= add_ln79_1_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln53_1_reg_758 <= add_ln53_1_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln66_reg_773 <= add_ln66_fu_388_p2;
        add_ln72_reg_778 <= add_ln72_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln79_reg_684 <= add_ln79_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln41_reg_783 <= mul_ln41_fu_632_p2;
        mul_ln47_reg_788 <= mul_ln47_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln91_reg_868 <= mul_ln91_fu_668_p2;
        tmp_8_reg_873 <= {{mul_ln79_reg_858[27:14]}};
        tmp_9_reg_878 <= {{sub_ln85_fu_559_p2[16:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_reg_677 <= out_h_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_713 <= out_w_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sub_ln41_reg_690[10 : 1] <= sub_ln41_fu_229_p2[10 : 1];
        sub_ln60_reg_695[10 : 1] <= sub_ln60_fu_257_p2[10 : 1];
        sub_ln79_reg_700[9 : 1] <= sub_ln79_fu_281_p2[9 : 1];
        tmp10_reg_705[10 : 2] <= tmp10_fu_299_p2[10 : 2];
    end
end

always @ (*) begin
    if ((((icmp_ln21_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = zext_ln91_fu_496_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = zext_ln79_fu_436_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = zext_ln66_fu_409_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln53_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = zext_ln41_3_fu_354_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address1 = zext_ln85_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address1 = zext_ln72_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address1 = zext_ln60_fu_383_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address1 = zext_ln47_fu_362_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln21_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln22_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_1_fu_619_p2 = (add_ln103_4_reg_853 + add_ln103_8_fu_615_p2);

assign add_ln103_2_fu_478_p2 = (trunc_ln_fu_450_p4 + trunc_ln92_1_fu_459_p4);

assign add_ln103_3_fu_516_p2 = ($signed(sext_ln97_fu_513_p1) + $signed(sext_ln93_fu_509_p1));

assign add_ln103_4_fu_522_p2 = (add_ln103_2_reg_828 + add_ln103_3_fu_516_p2);

assign add_ln103_5_fu_549_p2 = (trunc_ln11_fu_540_p4 + trunc_ln10_fu_531_p4);

assign add_ln103_6_fu_603_p2 = ($signed(trunc_ln101_1_fu_594_p4) + $signed(sext_ln101_fu_591_p1));

assign add_ln103_7_fu_609_p2 = ($signed(sext_ln94_fu_588_p1) + $signed(add_ln103_6_fu_603_p2));

assign add_ln103_8_fu_615_p2 = (add_ln103_5_reg_863 + add_ln103_7_reg_883);

assign add_ln103_fu_346_p2 = (zext_ln41_7_fu_321_p1 + tmp10_reg_705);

assign add_ln41_fu_325_p2 = (zext_ln41_7_fu_321_p1 + sub_ln41_reg_690);

assign add_ln47_1_fu_330_p2 = ($signed(add_ln41_fu_325_p2) + $signed(11'd1));

assign add_ln53_1_fu_367_p2 = ($signed(add_ln41_reg_718) + $signed(11'd2));

assign add_ln60_1_fu_336_p2 = (zext_ln41_7_fu_321_p1 + sub_ln60_reg_695);

assign add_ln66_fu_388_p2 = ($signed(add_ln60_1_reg_729) + $signed(11'd1));

assign add_ln72_fu_393_p2 = ($signed(add_ln60_1_reg_729) + $signed(11'd2));

assign add_ln79_1_fu_341_p2 = (zext_ln41_6_fu_317_p1 + sub_ln79_reg_700);

assign add_ln79_fu_199_p2 = (out_h_0_reg_154 + 5'd2);

assign add_ln85_fu_440_p2 = (add_ln79_1_reg_736 + 10'd1);

assign add_ln91_fu_445_p2 = (add_ln79_1_reg_736 + 10'd2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln21_fu_187_p2 = ((out_h_0_reg_154 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_305_p2 = ((out_w_0_reg_166 == 5'd28) ? 1'b1 : 1'b0);

assign mul_ln41_fu_632_p1 = 30'd1073729270;

assign mul_ln47_fu_638_p1 = 30'd1073729139;

assign mul_ln53_fu_644_p1 = 28'd1933;

assign mul_ln66_fu_650_p1 = 30'd1073729270;

assign mul_ln72_fu_656_p1 = 30'd1073729139;

assign mul_ln79_fu_662_p1 = 28'd1933;

assign mul_ln91_fu_668_p1 = 30'd1073729270;

assign out_h_fu_193_p2 = (out_h_0_reg_154 + 5'd1);

assign out_w_fu_311_p2 = (out_w_0_reg_166 + 5'd1);

assign output_r_address0 = zext_ln103_fu_627_p1;

assign output_r_d0 = add_ln103_1_reg_888;

assign p_shl9_cast_fu_295_p1 = p_shl9_fu_287_p3;

assign p_shl9_fu_287_p3 = {{out_h_0_reg_154}, {2'd0}};

assign sext_ln101_fu_591_p1 = $signed(tmp_9_reg_878);

assign sext_ln103_fu_624_p1 = $signed(add_ln103_reg_743);

assign sext_ln41_fu_351_p1 = add_ln41_reg_718;

assign sext_ln47_fu_359_p1 = $signed(add_ln47_1_reg_724);

assign sext_ln53_fu_372_p1 = $signed(add_ln53_1_reg_758);

assign sext_ln60_1_fu_380_p1 = add_ln60_1_reg_729;

assign sext_ln60_fu_426_p1 = reg_182;

assign sext_ln66_fu_406_p1 = $signed(add_ln66_reg_773);

assign sext_ln72_fu_414_p1 = $signed(add_ln72_reg_778);

assign sext_ln85_fu_555_p1 = reg_177;

assign sext_ln93_fu_509_p1 = $signed(tmp_fu_500_p4);

assign sext_ln94_fu_588_p1 = $signed(tmp_8_reg_873);

assign sext_ln97_fu_513_p1 = $signed(tmp_7_reg_823);

assign shl_ln1_fu_235_p3 = {{out_h_reg_677}, {5'd0}};

assign shl_ln2_fu_263_p3 = {{add_ln79_reg_684}, {5'd0}};

assign shl_ln41_1_fu_217_p3 = {{out_h_0_reg_154}, {1'd0}};

assign shl_ln60_1_fu_246_p3 = {{out_h_reg_677}, {1'd0}};

assign shl_ln79_1_fu_270_p3 = {{add_ln79_reg_684}, {1'd0}};

assign shl_ln_fu_205_p3 = {{out_h_0_reg_154}, {5'd0}};

assign sub_ln41_fu_229_p2 = (zext_ln41_4_fu_213_p1 - zext_ln41_5_fu_225_p1);

assign sub_ln60_1_fu_430_p2 = ($signed(17'd0) - $signed(sext_ln60_fu_426_p1));

assign sub_ln60_fu_257_p2 = (zext_ln60_3_fu_242_p1 - zext_ln60_4_fu_253_p1);

assign sub_ln79_fu_281_p2 = (shl_ln2_fu_263_p3 - zext_ln79_3_fu_277_p1);

assign sub_ln85_fu_559_p2 = ($signed(17'd0) - $signed(sext_ln85_fu_555_p1));

assign tmp10_fu_299_p2 = (zext_ln41_4_fu_213_p1 - p_shl9_cast_fu_295_p1);

assign tmp_fu_500_p4 = {{mul_ln53_reg_803[27:14]}};

assign trunc_ln101_1_fu_594_p4 = {{mul_ln91_reg_868[29:14]}};

assign trunc_ln10_fu_531_p4 = {{mul_ln66_reg_833[29:14]}};

assign trunc_ln11_fu_540_p4 = {{mul_ln72_reg_838[29:14]}};

assign trunc_ln92_1_fu_459_p4 = {{mul_ln41_reg_783[29:14]}};

assign trunc_ln_fu_450_p4 = {{mul_ln47_reg_788[29:14]}};

assign zext_ln103_fu_627_p1 = $unsigned(sext_ln103_fu_624_p1);

assign zext_ln41_3_fu_354_p1 = $unsigned(sext_ln41_fu_351_p1);

assign zext_ln41_4_fu_213_p1 = shl_ln_fu_205_p3;

assign zext_ln41_5_fu_225_p1 = shl_ln41_1_fu_217_p3;

assign zext_ln41_6_fu_317_p1 = out_w_0_reg_166;

assign zext_ln41_7_fu_321_p1 = out_w_0_reg_166;

assign zext_ln47_fu_362_p1 = $unsigned(sext_ln47_fu_359_p1);

assign zext_ln53_fu_375_p1 = $unsigned(sext_ln53_fu_372_p1);

assign zext_ln60_3_fu_242_p1 = shl_ln1_fu_235_p3;

assign zext_ln60_4_fu_253_p1 = shl_ln60_1_fu_246_p3;

assign zext_ln60_fu_383_p1 = $unsigned(sext_ln60_1_fu_380_p1);

assign zext_ln66_fu_409_p1 = $unsigned(sext_ln66_fu_406_p1);

assign zext_ln72_fu_417_p1 = $unsigned(sext_ln72_fu_414_p1);

assign zext_ln79_3_fu_277_p1 = shl_ln79_1_fu_270_p3;

assign zext_ln79_fu_436_p1 = add_ln79_1_reg_736;

assign zext_ln85_fu_492_p1 = add_ln85_reg_813;

assign zext_ln91_fu_496_p1 = add_ln91_reg_818;

always @ (posedge ap_clk) begin
    sub_ln41_reg_690[0] <= 1'b0;
    sub_ln60_reg_695[0] <= 1'b0;
    sub_ln79_reg_700[0] <= 1'b0;
    tmp10_reg_705[1:0] <= 2'b00;
end

endmodule //depthwise_conv2d_fix
