// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        kernel_address1,
        kernel_ce1,
        kernel_q1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state17 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [7:0] kernel_address0;
output   kernel_ce0;
input  [15:0] kernel_q0;
output  [7:0] kernel_address1;
output   kernel_ce1;
input  [15:0] kernel_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg[7:0] kernel_address0;
reg kernel_ce0;
reg[7:0] kernel_address1;
reg kernel_ce1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] indvar_flatten48_reg_304;
reg   [4:0] out_d_0_reg_316;
reg   [9:0] indvar_flatten_reg_328;
reg   [4:0] out_h_0_reg_340;
reg   [4:0] out_w_0_reg_351;
reg  signed [15:0] reg_362;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln23_reg_1180;
reg   [0:0] icmp_ln23_reg_1180_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state16_pp0_stage4_iter2;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg  signed [15:0] reg_366;
wire   [8:0] zext_ln40_fu_374_p1;
reg   [8:0] zext_ln40_reg_1124;
wire   [13:0] zext_ln40_1_cast14_fu_378_p1;
reg   [13:0] zext_ln40_1_cast14_reg_1130;
wire   [8:0] zext_ln48_fu_382_p1;
reg   [8:0] zext_ln48_reg_1137;
wire   [13:0] zext_ln48_1_cast_fu_386_p1;
reg   [13:0] zext_ln48_1_cast_reg_1143;
wire   [4:0] empty_fu_390_p1;
reg   [4:0] empty_reg_1148;
wire   [9:0] mul_ln4_fu_406_p2;
reg   [9:0] mul_ln4_reg_1153;
wire   [13:0] tmp_1_fu_412_p3;
reg   [13:0] tmp_1_reg_1158;
wire   [0:0] icmp_ln33_fu_420_p2;
reg   [0:0] icmp_ln33_reg_1163;
wire   [8:0] mul_ln40_fu_456_p2;
reg   [8:0] mul_ln40_reg_1168;
wire   [8:0] mul_ln48_fu_461_p2;
reg   [8:0] mul_ln48_reg_1174;
wire   [0:0] icmp_ln23_fu_466_p2;
reg   [0:0] icmp_ln23_reg_1180_pp0_iter2_reg;
wire   [4:0] out_d_fu_471_p2;
reg   [4:0] out_d_reg_1184;
wire   [0:0] icmp_ln32_fu_477_p2;
reg   [0:0] icmp_ln32_reg_1190;
wire   [7:0] select_ln24_1_fu_508_p3;
reg   [7:0] select_ln24_1_reg_1203;
wire   [8:0] tmp_0_0_fu_520_p2;
reg   [8:0] tmp_0_0_reg_1216;
wire   [8:0] tmp11_fu_525_p2;
reg   [8:0] tmp11_reg_1221;
wire   [13:0] add_ln23_fu_530_p2;
reg   [13:0] add_ln23_reg_1226;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln24_fu_536_p3;
reg   [4:0] select_ln24_reg_1231;
wire   [7:0] add_ln24_1_fu_550_p2;
reg   [7:0] add_ln24_1_reg_1241;
wire   [7:0] add_ln24_2_fu_555_p2;
reg   [7:0] add_ln24_2_reg_1246;
wire   [8:0] mul_ln40_1_fu_560_p2;
reg   [8:0] mul_ln40_1_reg_1251;
wire   [8:0] mul_ln48_1_fu_565_p2;
reg   [8:0] mul_ln48_1_reg_1257;
wire   [0:0] select_ln24_7_fu_575_p3;
reg   [0:0] select_ln24_7_reg_1263;
wire   [4:0] out_h_fu_581_p2;
reg   [4:0] out_h_reg_1270;
wire   [4:0] out_w_0_mid2_fu_592_p3;
reg   [4:0] out_w_0_mid2_reg_1276;
wire   [9:0] add_ln32_1_fu_600_p2;
reg   [9:0] add_ln32_1_reg_1283;
reg  signed [15:0] kernel_load_reg_1288;
wire   [7:0] add_ln24_fu_606_p2;
reg   [7:0] add_ln24_reg_1293;
wire   [7:0] add_ln24_3_fu_619_p2;
reg   [7:0] add_ln24_3_reg_1308;
wire   [8:0] tmp10_0_0_mid2_v_v_fu_653_p3;
reg   [8:0] tmp10_0_0_mid2_v_v_reg_1313;
wire   [8:0] tmp10_1_0_mid2_v_v_fu_660_p2;
reg   [8:0] tmp10_1_0_mid2_v_v_reg_1319;
wire   [8:0] tmp12_mid2_v_v_fu_672_p3;
reg   [8:0] tmp12_mid2_v_v_reg_1324;
reg  signed [15:0] kernel_load_2_reg_1334;
reg  signed [15:0] kernel_load_3_reg_1339;
wire   [7:0] add_ln24_4_fu_687_p2;
reg   [7:0] add_ln24_4_reg_1349;
wire   [7:0] add_ln24_5_fu_692_p2;
reg   [7:0] add_ln24_5_reg_1354;
wire   [13:0] tmp10_0_0_mid2_fu_700_p2;
reg   [13:0] tmp10_0_0_mid2_reg_1359;
wire   [13:0] tmp10_1_0_mid2_fu_708_p2;
reg   [13:0] tmp10_1_0_mid2_reg_1366;
wire   [8:0] tmp10_2_0_mid2_v_v_fu_713_p2;
reg   [8:0] tmp10_2_0_mid2_v_v_reg_1373;
reg  signed [15:0] kernel_load_1_reg_1378;
reg  signed [15:0] kernel_load_4_reg_1383;
wire   [7:0] add_ln24_6_fu_726_p2;
reg   [7:0] add_ln24_6_reg_1398;
wire   [7:0] add_ln24_7_fu_731_p2;
reg   [7:0] add_ln24_7_reg_1403;
wire   [4:0] select_ln24_2_fu_736_p3;
reg   [4:0] select_ln24_2_reg_1408;
wire   [13:0] tmp10_2_0_mid2_fu_745_p2;
reg   [13:0] tmp10_2_0_mid2_reg_1414;
wire   [13:0] zext_ln40_1_fu_750_p1;
reg   [13:0] zext_ln40_1_reg_1421;
wire   [13:0] add_ln40_fu_753_p2;
reg   [13:0] add_ln40_reg_1428;
wire   [13:0] zext_ln40_5_fu_763_p1;
reg   [13:0] zext_ln40_5_reg_1433;
wire   [13:0] add_ln40_4_fu_767_p2;
reg   [13:0] add_ln40_4_reg_1439;
wire   [9:0] select_ln32_13_fu_772_p3;
reg   [9:0] select_ln32_13_reg_1444;
reg  signed [15:0] kernel_load_5_reg_1449;
reg  signed [15:0] kernel_load_6_reg_1454;
wire   [4:0] select_ln32_fu_786_p3;
reg   [4:0] select_ln32_reg_1469;
wire   [4:0] out_w_fu_795_p2;
reg   [4:0] out_w_reg_1479;
wire   [13:0] zext_ln40_3_fu_800_p1;
reg   [13:0] zext_ln40_3_reg_1484;
wire   [13:0] add_ln40_2_fu_804_p2;
reg   [13:0] add_ln40_2_reg_1490;
wire   [13:0] add_ln40_5_fu_813_p2;
reg   [13:0] add_ln40_5_reg_1500;
reg  signed [15:0] kernel_load_7_reg_1505;
reg  signed [15:0] kernel_load_8_reg_1510;
wire   [13:0] add_ln40_6_fu_832_p2;
reg   [13:0] add_ln40_6_reg_1530;
wire   [13:0] add_ln40_7_fu_836_p2;
reg   [13:0] add_ln40_7_reg_1535;
wire   [13:0] add_ln40_8_fu_840_p2;
reg   [13:0] add_ln40_8_reg_1540;
wire   [13:0] add_ln40_9_fu_844_p2;
reg   [13:0] add_ln40_9_reg_1545;
wire   [13:0] add_ln40_10_fu_848_p2;
reg   [13:0] add_ln40_10_reg_1550;
wire   [13:0] grp_fu_1064_p3;
reg   [13:0] add_ln48_reg_1555;
reg   [13:0] add_ln48_reg_1555_pp0_iter2_reg;
reg   [15:0] bias_load_reg_1560;
wire  signed [29:0] mul_ln40_2_fu_1070_p2;
reg  signed [29:0] mul_ln40_2_reg_1565;
wire  signed [29:0] mul_ln40_4_fu_1076_p2;
reg  signed [29:0] mul_ln40_4_reg_1570;
wire  signed [29:0] mul_ln40_3_fu_1082_p2;
reg  signed [29:0] mul_ln40_3_reg_1585;
reg   [15:0] trunc_ln48_1_reg_1590;
wire  signed [29:0] mul_ln40_5_fu_1088_p2;
reg  signed [29:0] mul_ln40_5_reg_1595;
wire   [15:0] add_ln48_1_fu_914_p2;
reg   [15:0] add_ln48_1_reg_1610;
reg   [15:0] trunc_ln48_s_reg_1615;
wire  signed [29:0] mul_ln40_6_fu_1094_p2;
reg  signed [29:0] mul_ln40_6_reg_1620;
wire  signed [29:0] mul_ln40_7_fu_1100_p2;
reg  signed [29:0] mul_ln40_7_reg_1625;
wire   [15:0] add_ln48_2_fu_955_p2;
reg   [15:0] add_ln48_2_reg_1635;
wire  signed [29:0] mul_ln40_8_fu_1106_p2;
reg  signed [29:0] mul_ln40_8_reg_1640;
wire  signed [29:0] mul_ln40_9_fu_1112_p2;
reg  signed [29:0] mul_ln40_9_reg_1645;
wire   [15:0] add_ln48_4_fu_996_p2;
reg   [15:0] add_ln48_4_reg_1650;
wire   [15:0] add_ln48_5_fu_1001_p2;
reg   [15:0] add_ln48_5_reg_1655;
reg   [15:0] trunc_ln48_5_reg_1660;
reg   [15:0] trunc_ln48_6_reg_1665;
wire  signed [29:0] mul_ln40_10_fu_1118_p2;
reg  signed [29:0] mul_ln40_10_reg_1670;
wire   [15:0] add_ln48_7_fu_1046_p2;
reg   [15:0] add_ln48_7_reg_1675;
wire   [15:0] add_ln48_9_fu_1055_p2;
reg   [15:0] add_ln48_9_reg_1680;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage4_subdone;
reg   [13:0] ap_phi_mux_indvar_flatten48_phi_fu_308_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_out_d_0_phi_fu_320_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_332_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_344_p4;
wire    ap_block_pp0_stage1;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_355_p4;
wire   [63:0] zext_ln24_fu_546_p1;
wire   [63:0] zext_ln24_2_fu_611_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln24_3_fu_615_p1;
wire   [63:0] zext_ln24_1_fu_679_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln24_4_fu_683_p1;
wire   [63:0] zext_ln24_5_fu_718_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln24_6_fu_722_p1;
wire   [63:0] zext_ln24_7_fu_778_p1;
wire   [63:0] zext_ln24_8_fu_782_p1;
wire   [63:0] zext_ln40_2_fu_791_p1;
wire   [63:0] zext_ln40_6_fu_809_p1;
wire   [63:0] zext_ln24_9_fu_817_p1;
wire   [63:0] zext_ln40_4_fu_824_p1;
wire   [63:0] zext_ln40_7_fu_828_p1;
wire   [63:0] zext_ln40_8_fu_866_p1;
wire   [63:0] zext_ln40_9_fu_870_p1;
wire   [63:0] zext_ln40_10_fu_906_p1;
wire   [63:0] zext_ln40_11_fu_910_p1;
wire   [63:0] zext_ln40_12_fu_951_p1;
wire   [63:0] zext_ln48_3_fu_1060_p1;
wire  signed [6:0] sext_ln4_fu_370_p1;
wire   [4:0] empty_55_fu_394_p1;
wire   [4:0] mul_ln4_fu_406_p0;
wire   [4:0] mul_ln4_fu_406_p1;
wire   [3:0] trunc_ln27_fu_434_p1;
wire   [6:0] shl_ln_fu_438_p3;
wire   [7:0] zext_ln27_fu_430_p1;
wire   [7:0] zext_ln27_1_fu_446_p1;
wire   [4:0] mul_ln40_fu_456_p0;
wire   [8:0] zext_ln48_1_fu_426_p1;
wire   [6:0] mul_ln40_fu_456_p1;
wire   [4:0] mul_ln48_fu_461_p0;
wire   [5:0] mul_ln48_fu_461_p1;
wire   [3:0] trunc_ln27_1_fu_486_p1;
wire   [6:0] shl_ln27_mid1_fu_490_p3;
wire   [7:0] zext_ln27_2_fu_482_p1;
wire   [7:0] zext_ln27_3_fu_498_p1;
wire   [7:0] add_ln27_1_fu_502_p2;
wire   [7:0] add_ln27_fu_450_p2;
wire   [8:0] zext_ln40_2_cast_fu_516_p1;
wire   [4:0] mul_ln40_1_fu_560_p0;
wire   [8:0] zext_ln48_2_fu_543_p1;
wire   [6:0] mul_ln40_1_fu_560_p1;
wire   [4:0] mul_ln48_1_fu_565_p0;
wire   [5:0] mul_ln48_1_fu_565_p1;
wire   [0:0] icmp_ln33_1_fu_570_p2;
wire   [0:0] empty_57_fu_587_p2;
wire   [8:0] zext_ln40_2_cast_mid_fu_644_p1;
wire   [8:0] select_ln24_3_fu_624_p3;
wire   [8:0] tmp_0_0_mid1_fu_647_p2;
wire   [8:0] select_ln24_5_fu_634_p3;
wire   [8:0] select_ln24_4_fu_629_p3;
wire   [8:0] tmp11_mid1_fu_666_p2;
wire   [8:0] select_ln24_6_fu_639_p3;
wire   [6:0] tmp10_0_0_mid2_fu_700_p0;
wire   [8:0] tmp10_0_0_mid2_fu_700_p1;
wire   [6:0] tmp10_1_0_mid2_fu_708_p0;
wire   [8:0] tmp10_1_0_mid2_fu_708_p1;
wire   [6:0] tmp10_2_0_mid2_fu_745_p0;
wire   [8:0] tmp10_2_0_mid2_fu_745_p1;
wire   [4:0] add_ln40_3_fu_758_p2;
wire   [15:0] trunc_ln_fu_880_p4;
wire   [15:0] trunc_ln48_2_fu_934_p4;
wire   [15:0] add_ln48_3_fu_992_p2;
wire   [15:0] trunc_ln48_4_fu_975_p4;
wire   [15:0] trunc_ln48_3_fu_966_p4;
wire   [15:0] trunc_ln48_7_fu_1032_p4;
wire   [15:0] add_ln48_6_fu_1041_p2;
wire   [15:0] add_ln48_8_fu_1051_p2;
wire   [5:0] grp_fu_1064_p0;
wire   [8:0] grp_fu_1064_p1;
wire   [4:0] grp_fu_1064_p2;
wire    ap_CS_fsm_state17;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [13:0] grp_fu_1064_p10;
wire   [9:0] mul_ln4_fu_406_p00;
wire   [9:0] mul_ln4_fu_406_p10;
wire   [13:0] tmp10_0_0_mid2_fu_700_p10;
wire   [13:0] tmp10_1_0_mid2_fu_708_p10;
wire   [13:0] tmp10_2_0_mid2_fu_745_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

network_mac_muladd_6ns_9ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_mac_muladd_6ns_9ns_5ns_14_1_1_U36(
    .din0(grp_fu_1064_p0),
    .din1(grp_fu_1064_p1),
    .din2(grp_fu_1064_p2),
    .dout(grp_fu_1064_p3)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U37(
    .din0(reg_362),
    .din1(kernel_load_reg_1288),
    .dout(mul_ln40_2_fu_1070_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U38(
    .din0(reg_366),
    .din1(kernel_load_2_reg_1334),
    .dout(mul_ln40_4_fu_1076_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U39(
    .din0(reg_362),
    .din1(kernel_load_1_reg_1378),
    .dout(mul_ln40_3_fu_1082_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U40(
    .din0(reg_366),
    .din1(kernel_load_3_reg_1339),
    .dout(mul_ln40_5_fu_1088_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U41(
    .din0(reg_362),
    .din1(kernel_load_4_reg_1383),
    .dout(mul_ln40_6_fu_1094_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U42(
    .din0(reg_366),
    .din1(kernel_load_5_reg_1449),
    .dout(mul_ln40_7_fu_1100_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U43(
    .din0(reg_362),
    .din1(kernel_load_6_reg_1454),
    .dout(mul_ln40_8_fu_1106_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U44(
    .din0(reg_366),
    .din1(kernel_load_7_reg_1505),
    .dout(mul_ln40_9_fu_1112_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U45(
    .din0(reg_362),
    .din1(kernel_load_8_reg_1510),
    .dout(mul_ln40_10_fu_1118_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten48_reg_304 <= add_ln23_reg_1226;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten48_reg_304 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_328 <= select_ln32_13_reg_1444;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_328 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_316 <= select_ln24_2_reg_1408;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_316 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_h_0_reg_340 <= select_ln32_reg_1469;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_340 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_w_0_reg_351 <= out_w_reg_1479;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_351 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln23_reg_1226 <= add_ln23_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln24_1_reg_1241 <= add_ln24_1_fu_550_p2;
        add_ln24_2_reg_1246 <= add_ln24_2_fu_555_p2;
        mul_ln40_1_reg_1251 <= mul_ln40_1_fu_560_p2;
        mul_ln48_1_reg_1257 <= mul_ln48_1_fu_565_p2;
        out_h_reg_1270 <= out_h_fu_581_p2;
        out_w_0_mid2_reg_1276 <= out_w_0_mid2_fu_592_p3;
        select_ln24_7_reg_1263 <= select_ln24_7_fu_575_p3;
        select_ln24_reg_1231 <= select_ln24_fu_536_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln24_3_reg_1308 <= add_ln24_3_fu_619_p2;
        add_ln24_reg_1293 <= add_ln24_fu_606_p2;
        tmp10_0_0_mid2_v_v_reg_1313 <= tmp10_0_0_mid2_v_v_fu_653_p3;
        tmp10_1_0_mid2_v_v_reg_1319 <= tmp10_1_0_mid2_v_v_fu_660_p2;
        tmp12_mid2_v_v_reg_1324 <= tmp12_mid2_v_v_fu_672_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln24_4_reg_1349 <= add_ln24_4_fu_687_p2;
        add_ln24_5_reg_1354 <= add_ln24_5_fu_692_p2;
        tmp10_0_0_mid2_reg_1359 <= tmp10_0_0_mid2_fu_700_p2;
        tmp10_1_0_mid2_reg_1366 <= tmp10_1_0_mid2_fu_708_p2;
        tmp10_2_0_mid2_v_v_reg_1373 <= tmp10_2_0_mid2_v_v_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln24_6_reg_1398 <= add_ln24_6_fu_726_p2;
        add_ln24_7_reg_1403 <= add_ln24_7_fu_731_p2;
        add_ln40_4_reg_1439 <= add_ln40_4_fu_767_p2;
        add_ln40_reg_1428 <= add_ln40_fu_753_p2;
        tmp10_2_0_mid2_reg_1414 <= tmp10_2_0_mid2_fu_745_p2;
        zext_ln40_1_reg_1421[4 : 0] <= zext_ln40_1_fu_750_p1[4 : 0];
        zext_ln40_5_reg_1433[4 : 0] <= zext_ln40_5_fu_763_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1190 == 1'd0) & (icmp_ln23_reg_1180 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln32_1_reg_1283 <= add_ln32_1_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln40_10_reg_1550 <= add_ln40_10_fu_848_p2;
        add_ln40_6_reg_1530 <= add_ln40_6_fu_832_p2;
        add_ln40_7_reg_1535 <= add_ln40_7_fu_836_p2;
        add_ln40_8_reg_1540 <= add_ln40_8_fu_840_p2;
        add_ln40_9_reg_1545 <= add_ln40_9_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln40_2_reg_1490 <= add_ln40_2_fu_804_p2;
        add_ln40_5_reg_1500 <= add_ln40_5_fu_813_p2;
        zext_ln40_3_reg_1484[4 : 0] <= zext_ln40_3_fu_800_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln48_1_reg_1610 <= add_ln48_1_fu_914_p2;
        mul_ln40_3_reg_1585 <= mul_ln40_3_fu_1082_p2;
        mul_ln40_5_reg_1595 <= mul_ln40_5_fu_1088_p2;
        trunc_ln48_1_reg_1590 <= {{mul_ln40_4_reg_1570[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln48_2_reg_1635 <= add_ln48_2_fu_955_p2;
        mul_ln40_6_reg_1620 <= mul_ln40_6_fu_1094_p2;
        mul_ln40_7_reg_1625 <= mul_ln40_7_fu_1100_p2;
        trunc_ln48_s_reg_1615 <= {{mul_ln40_3_reg_1585[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln48_4_reg_1650 <= add_ln48_4_fu_996_p2;
        add_ln48_5_reg_1655 <= add_ln48_5_fu_1001_p2;
        mul_ln40_8_reg_1640 <= mul_ln40_8_fu_1106_p2;
        mul_ln40_9_reg_1645 <= mul_ln40_9_fu_1112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln48_7_reg_1675 <= add_ln48_7_fu_1046_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln48_9_reg_1680 <= add_ln48_9_fu_1055_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln48_reg_1555 <= grp_fu_1064_p3;
        kernel_load_7_reg_1505 <= kernel_q0;
        kernel_load_8_reg_1510 <= kernel_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln48_reg_1555_pp0_iter2_reg <= add_ln48_reg_1555;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        bias_load_reg_1560 <= bias_q0;
        mul_ln40_2_reg_1565 <= mul_ln40_2_fu_1070_p2;
        mul_ln40_4_reg_1570 <= mul_ln40_4_fu_1076_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_1148 <= empty_fu_390_p1;
        icmp_ln33_reg_1163 <= icmp_ln33_fu_420_p2;
        mul_ln4_reg_1153 <= mul_ln4_fu_406_p2;
        tmp_1_reg_1158[13 : 4] <= tmp_1_fu_412_p3[13 : 4];
        zext_ln40_1_cast14_reg_1130[6 : 0] <= zext_ln40_1_cast14_fu_378_p1[6 : 0];
        zext_ln40_reg_1124[6 : 0] <= zext_ln40_fu_374_p1[6 : 0];
        zext_ln48_1_cast_reg_1143[5 : 0] <= zext_ln48_1_cast_fu_386_p1[5 : 0];
        zext_ln48_reg_1137[5 : 0] <= zext_ln48_fu_382_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln23_reg_1180 <= icmp_ln23_fu_466_p2;
        icmp_ln23_reg_1180_pp0_iter1_reg <= icmp_ln23_reg_1180;
        icmp_ln23_reg_1180_pp0_iter2_reg <= icmp_ln23_reg_1180_pp0_iter1_reg;
        mul_ln40_reg_1168 <= mul_ln40_fu_456_p2;
        mul_ln48_reg_1174 <= mul_ln48_fu_461_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_466_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln32_reg_1190 <= icmp_ln32_fu_477_p2;
        out_d_reg_1184 <= out_d_fu_471_p2;
        select_ln24_1_reg_1203 <= select_ln24_1_fu_508_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        kernel_load_1_reg_1378 <= kernel_q1;
        kernel_load_4_reg_1383 <= kernel_q0;
        select_ln24_2_reg_1408 <= select_ln24_2_fu_736_p3;
        select_ln32_13_reg_1444 <= select_ln32_13_fu_772_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        kernel_load_2_reg_1334 <= kernel_q1;
        kernel_load_3_reg_1339 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kernel_load_5_reg_1449 <= kernel_q1;
        kernel_load_6_reg_1454 <= kernel_q0;
        out_w_reg_1479 <= out_w_fu_795_p2;
        select_ln32_reg_1469 <= select_ln32_fu_786_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        kernel_load_reg_1288 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1180_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_ln40_10_reg_1670 <= mul_ln40_10_fu_1118_p2;
        trunc_ln48_5_reg_1660 <= {{mul_ln40_8_reg_1640[29:14]}};
        trunc_ln48_6_reg_1665 <= {{mul_ln40_9_reg_1645[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_362 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_366 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1190 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp11_reg_1221 <= tmp11_fu_525_p2;
        tmp_0_0_reg_1216 <= tmp_0_0_fu_520_p2;
    end
end

always @ (*) begin
    if ((icmp_ln23_reg_1180 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten48_phi_fu_308_p4 = add_ln23_reg_1226;
    end else begin
        ap_phi_mux_indvar_flatten48_phi_fu_308_p4 = indvar_flatten48_reg_304;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_332_p4 = select_ln32_13_reg_1444;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_332_p4 = indvar_flatten_reg_328;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1180 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_320_p4 = select_ln24_2_reg_1408;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_320_p4 = out_d_0_reg_316;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_h_0_phi_fu_344_p4 = select_ln32_reg_1469;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_344_p4 = out_h_0_reg_340;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1180_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_w_0_phi_fu_355_p4 = out_w_reg_1479;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_355_p4 = out_w_0_reg_351;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address0 = zext_ln40_12_fu_951_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address0 = zext_ln40_10_fu_906_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address0 = zext_ln40_8_fu_866_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = zext_ln40_4_fu_824_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address0 = zext_ln40_2_fu_791_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = zext_ln40_11_fu_910_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln40_9_fu_870_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln40_7_fu_828_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address1 = zext_ln40_6_fu_809_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_address0 = zext_ln24_7_fu_778_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        kernel_address0 = zext_ln24_6_fu_722_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_address0 = zext_ln24_4_fu_683_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_address0 = zext_ln24_3_fu_615_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_address0 = zext_ln24_fu_546_p1;
    end else begin
        kernel_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kernel_address1 = zext_ln24_8_fu_782_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        kernel_address1 = zext_ln24_5_fu_718_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kernel_address1 = zext_ln24_1_fu_679_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        kernel_address1 = zext_ln24_2_fu_611_p1;
    end else begin
        kernel_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        kernel_ce1 = 1'b1;
    end else begin
        kernel_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_1180_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((icmp_ln23_reg_1180 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((icmp_ln23_reg_1180 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_530_p2 = (14'd1 + indvar_flatten48_reg_304);

assign add_ln24_1_fu_550_p2 = (8'd2 + select_ln24_1_reg_1203);

assign add_ln24_2_fu_555_p2 = (8'd3 + select_ln24_1_reg_1203);

assign add_ln24_3_fu_619_p2 = (8'd4 + select_ln24_1_reg_1203);

assign add_ln24_4_fu_687_p2 = (8'd5 + select_ln24_1_reg_1203);

assign add_ln24_5_fu_692_p2 = (8'd6 + select_ln24_1_reg_1203);

assign add_ln24_6_fu_726_p2 = (8'd7 + select_ln24_1_reg_1203);

assign add_ln24_7_fu_731_p2 = (8'd8 + select_ln24_1_reg_1203);

assign add_ln24_fu_606_p2 = (8'd1 + select_ln24_1_reg_1203);

assign add_ln27_1_fu_502_p2 = (zext_ln27_2_fu_482_p1 + zext_ln27_3_fu_498_p1);

assign add_ln27_fu_450_p2 = (zext_ln27_fu_430_p1 + zext_ln27_1_fu_446_p1);

assign add_ln32_1_fu_600_p2 = (10'd1 + indvar_flatten_reg_328);

assign add_ln40_10_fu_848_p2 = (tmp10_2_0_mid2_reg_1414 + zext_ln40_5_reg_1433);

assign add_ln40_2_fu_804_p2 = (tmp10_0_0_mid2_reg_1359 + zext_ln40_3_fu_800_p1);

assign add_ln40_3_fu_758_p2 = (5'd2 + out_w_0_mid2_reg_1276);

assign add_ln40_4_fu_767_p2 = (tmp10_0_0_mid2_reg_1359 + zext_ln40_5_fu_763_p1);

assign add_ln40_5_fu_813_p2 = (zext_ln40_1_reg_1421 + tmp10_1_0_mid2_reg_1366);

assign add_ln40_6_fu_832_p2 = (tmp10_1_0_mid2_reg_1366 + zext_ln40_3_reg_1484);

assign add_ln40_7_fu_836_p2 = (tmp10_1_0_mid2_reg_1366 + zext_ln40_5_reg_1433);

assign add_ln40_8_fu_840_p2 = (zext_ln40_1_reg_1421 + tmp10_2_0_mid2_reg_1414);

assign add_ln40_9_fu_844_p2 = (tmp10_2_0_mid2_reg_1414 + zext_ln40_3_reg_1484);

assign add_ln40_fu_753_p2 = (zext_ln40_1_fu_750_p1 + tmp10_0_0_mid2_reg_1359);

assign add_ln48_1_fu_914_p2 = (trunc_ln_fu_880_p4 + bias_load_reg_1560);

assign add_ln48_2_fu_955_p2 = (trunc_ln48_2_fu_934_p4 + trunc_ln48_1_reg_1590);

assign add_ln48_3_fu_992_p2 = (trunc_ln48_s_reg_1615 + add_ln48_2_reg_1635);

assign add_ln48_4_fu_996_p2 = (add_ln48_1_reg_1610 + add_ln48_3_fu_992_p2);

assign add_ln48_5_fu_1001_p2 = (trunc_ln48_4_fu_975_p4 + trunc_ln48_3_fu_966_p4);

assign add_ln48_6_fu_1041_p2 = (trunc_ln48_7_fu_1032_p4 + trunc_ln48_6_reg_1665);

assign add_ln48_7_fu_1046_p2 = (trunc_ln48_5_reg_1660 + add_ln48_6_fu_1041_p2);

assign add_ln48_8_fu_1051_p2 = (add_ln48_5_reg_1655 + add_ln48_7_reg_1675);

assign add_ln48_9_fu_1055_p2 = (add_ln48_4_reg_1650 + add_ln48_8_fu_1051_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_address0 = zext_ln24_9_fu_817_p1;

assign empty_55_fu_394_p1 = output_height[4:0];

assign empty_57_fu_587_p2 = (select_ln24_7_fu_575_p3 | icmp_ln32_reg_1190);

assign empty_fu_390_p1 = output_width[4:0];

assign grp_fu_1064_p0 = zext_ln48_1_cast_reg_1143;

assign grp_fu_1064_p1 = grp_fu_1064_p10;

assign grp_fu_1064_p10 = tmp12_mid2_v_v_reg_1324;

assign grp_fu_1064_p2 = zext_ln40_1_reg_1421;

assign icmp_ln23_fu_466_p2 = ((ap_phi_mux_indvar_flatten48_phi_fu_308_p4 == tmp_1_reg_1158) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_477_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_332_p4 == mul_ln4_reg_1153) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_570_p2 = ((ap_phi_mux_out_w_0_phi_fu_355_p4 == empty_reg_1148) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_420_p2 = ((empty_fu_390_p1 == 5'd0) ? 1'b1 : 1'b0);

assign mul_ln40_1_fu_560_p0 = zext_ln48_2_fu_543_p1;

assign mul_ln40_1_fu_560_p1 = zext_ln40_reg_1124;

assign mul_ln40_1_fu_560_p2 = (mul_ln40_1_fu_560_p0 * mul_ln40_1_fu_560_p1);

assign mul_ln40_fu_456_p0 = zext_ln48_1_fu_426_p1;

assign mul_ln40_fu_456_p1 = zext_ln40_reg_1124;

assign mul_ln40_fu_456_p2 = (mul_ln40_fu_456_p0 * mul_ln40_fu_456_p1);

assign mul_ln48_1_fu_565_p0 = zext_ln48_2_fu_543_p1;

assign mul_ln48_1_fu_565_p1 = zext_ln48_reg_1137;

assign mul_ln48_1_fu_565_p2 = (mul_ln48_1_fu_565_p0 * mul_ln48_1_fu_565_p1);

assign mul_ln48_fu_461_p0 = zext_ln48_1_fu_426_p1;

assign mul_ln48_fu_461_p1 = zext_ln48_reg_1137;

assign mul_ln48_fu_461_p2 = (mul_ln48_fu_461_p0 * mul_ln48_fu_461_p1);

assign mul_ln4_fu_406_p0 = mul_ln4_fu_406_p00;

assign mul_ln4_fu_406_p00 = empty_55_fu_394_p1;

assign mul_ln4_fu_406_p1 = mul_ln4_fu_406_p10;

assign mul_ln4_fu_406_p10 = empty_fu_390_p1;

assign mul_ln4_fu_406_p2 = (mul_ln4_fu_406_p0 * mul_ln4_fu_406_p1);

assign out_d_fu_471_p2 = (5'd1 + ap_phi_mux_out_d_0_phi_fu_320_p4);

assign out_h_fu_581_p2 = (5'd1 + select_ln24_fu_536_p3);

assign out_w_0_mid2_fu_592_p3 = ((empty_57_fu_587_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_w_0_phi_fu_355_p4);

assign out_w_fu_795_p2 = (5'd1 + out_w_0_mid2_reg_1276);

assign output_r_address0 = zext_ln48_3_fu_1060_p1;

assign output_r_d0 = add_ln48_9_reg_1680;

assign select_ln24_1_fu_508_p3 = ((icmp_ln32_fu_477_p2[0:0] === 1'b1) ? add_ln27_1_fu_502_p2 : add_ln27_fu_450_p2);

assign select_ln24_2_fu_736_p3 = ((icmp_ln32_reg_1190[0:0] === 1'b1) ? out_d_reg_1184 : out_d_0_reg_316);

assign select_ln24_3_fu_624_p3 = ((icmp_ln32_reg_1190[0:0] === 1'b1) ? mul_ln40_1_reg_1251 : mul_ln40_reg_1168);

assign select_ln24_4_fu_629_p3 = ((icmp_ln32_reg_1190[0:0] === 1'b1) ? mul_ln48_1_reg_1257 : mul_ln48_reg_1174);

assign select_ln24_5_fu_634_p3 = ((icmp_ln32_reg_1190[0:0] === 1'b1) ? mul_ln40_1_reg_1251 : tmp_0_0_reg_1216);

assign select_ln24_6_fu_639_p3 = ((icmp_ln32_reg_1190[0:0] === 1'b1) ? mul_ln48_1_reg_1257 : tmp11_reg_1221);

assign select_ln24_7_fu_575_p3 = ((icmp_ln32_reg_1190[0:0] === 1'b1) ? icmp_ln33_reg_1163 : icmp_ln33_1_fu_570_p2);

assign select_ln24_fu_536_p3 = ((icmp_ln32_reg_1190[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_h_0_phi_fu_344_p4);

assign select_ln32_13_fu_772_p3 = ((icmp_ln32_reg_1190[0:0] === 1'b1) ? 10'd1 : add_ln32_1_reg_1283);

assign select_ln32_fu_786_p3 = ((select_ln24_7_reg_1263[0:0] === 1'b1) ? out_h_reg_1270 : select_ln24_reg_1231);

assign sext_ln4_fu_370_p1 = $signed(input_width);

assign shl_ln27_mid1_fu_490_p3 = {{trunc_ln27_1_fu_486_p1}, {3'd0}};

assign shl_ln_fu_438_p3 = {{trunc_ln27_fu_434_p1}, {3'd0}};

assign tmp10_0_0_mid2_fu_700_p0 = zext_ln40_1_cast14_reg_1130;

assign tmp10_0_0_mid2_fu_700_p1 = tmp10_0_0_mid2_fu_700_p10;

assign tmp10_0_0_mid2_fu_700_p10 = tmp10_0_0_mid2_v_v_reg_1313;

assign tmp10_0_0_mid2_fu_700_p2 = (tmp10_0_0_mid2_fu_700_p0 * tmp10_0_0_mid2_fu_700_p1);

assign tmp10_0_0_mid2_v_v_fu_653_p3 = ((select_ln24_7_reg_1263[0:0] === 1'b1) ? tmp_0_0_mid1_fu_647_p2 : select_ln24_5_fu_634_p3);

assign tmp10_1_0_mid2_fu_708_p0 = zext_ln40_1_cast14_reg_1130;

assign tmp10_1_0_mid2_fu_708_p1 = tmp10_1_0_mid2_fu_708_p10;

assign tmp10_1_0_mid2_fu_708_p10 = tmp10_1_0_mid2_v_v_reg_1319;

assign tmp10_1_0_mid2_fu_708_p2 = (tmp10_1_0_mid2_fu_708_p0 * tmp10_1_0_mid2_fu_708_p1);

assign tmp10_1_0_mid2_v_v_fu_660_p2 = (9'd1 + tmp10_0_0_mid2_v_v_fu_653_p3);

assign tmp10_2_0_mid2_fu_745_p0 = zext_ln40_1_cast14_reg_1130;

assign tmp10_2_0_mid2_fu_745_p1 = tmp10_2_0_mid2_fu_745_p10;

assign tmp10_2_0_mid2_fu_745_p10 = tmp10_2_0_mid2_v_v_reg_1373;

assign tmp10_2_0_mid2_fu_745_p2 = (tmp10_2_0_mid2_fu_745_p0 * tmp10_2_0_mid2_fu_745_p1);

assign tmp10_2_0_mid2_v_v_fu_713_p2 = (9'd2 + tmp10_0_0_mid2_v_v_reg_1313);

assign tmp11_fu_525_p2 = (zext_ln40_2_cast_fu_516_p1 + mul_ln48_reg_1174);

assign tmp11_mid1_fu_666_p2 = (zext_ln40_2_cast_mid_fu_644_p1 + select_ln24_4_fu_629_p3);

assign tmp12_mid2_v_v_fu_672_p3 = ((select_ln24_7_reg_1263[0:0] === 1'b1) ? tmp11_mid1_fu_666_p2 : select_ln24_6_fu_639_p3);

assign tmp_0_0_fu_520_p2 = (zext_ln40_2_cast_fu_516_p1 + mul_ln40_reg_1168);

assign tmp_0_0_mid1_fu_647_p2 = (zext_ln40_2_cast_mid_fu_644_p1 + select_ln24_3_fu_624_p3);

assign tmp_1_fu_412_p3 = {{mul_ln4_fu_406_p2}, {4'd0}};

assign trunc_ln27_1_fu_486_p1 = out_d_fu_471_p2[3:0];

assign trunc_ln27_fu_434_p1 = ap_phi_mux_out_d_0_phi_fu_320_p4[3:0];

assign trunc_ln48_2_fu_934_p4 = {{mul_ln40_5_reg_1595[29:14]}};

assign trunc_ln48_3_fu_966_p4 = {{mul_ln40_6_reg_1620[29:14]}};

assign trunc_ln48_4_fu_975_p4 = {{mul_ln40_7_reg_1625[29:14]}};

assign trunc_ln48_7_fu_1032_p4 = {{mul_ln40_10_reg_1670[29:14]}};

assign trunc_ln_fu_880_p4 = {{mul_ln40_2_reg_1565[29:14]}};

assign zext_ln24_1_fu_679_p1 = add_ln24_reg_1293;

assign zext_ln24_2_fu_611_p1 = add_ln24_1_reg_1241;

assign zext_ln24_3_fu_615_p1 = add_ln24_2_reg_1246;

assign zext_ln24_4_fu_683_p1 = add_ln24_3_reg_1308;

assign zext_ln24_5_fu_718_p1 = add_ln24_4_reg_1349;

assign zext_ln24_6_fu_722_p1 = add_ln24_5_reg_1354;

assign zext_ln24_7_fu_778_p1 = add_ln24_6_reg_1398;

assign zext_ln24_8_fu_782_p1 = add_ln24_7_reg_1403;

assign zext_ln24_9_fu_817_p1 = select_ln24_2_reg_1408;

assign zext_ln24_fu_546_p1 = select_ln24_1_reg_1203;

assign zext_ln27_1_fu_446_p1 = shl_ln_fu_438_p3;

assign zext_ln27_2_fu_482_p1 = out_d_fu_471_p2;

assign zext_ln27_3_fu_498_p1 = shl_ln27_mid1_fu_490_p3;

assign zext_ln27_fu_430_p1 = ap_phi_mux_out_d_0_phi_fu_320_p4;

assign zext_ln40_10_fu_906_p1 = add_ln40_8_reg_1540;

assign zext_ln40_11_fu_910_p1 = add_ln40_9_reg_1545;

assign zext_ln40_12_fu_951_p1 = add_ln40_10_reg_1550;

assign zext_ln40_1_cast14_fu_378_p1 = $unsigned(sext_ln4_fu_370_p1);

assign zext_ln40_1_fu_750_p1 = out_w_0_mid2_reg_1276;

assign zext_ln40_2_cast_fu_516_p1 = ap_phi_mux_out_h_0_phi_fu_344_p4;

assign zext_ln40_2_cast_mid_fu_644_p1 = out_h_reg_1270;

assign zext_ln40_2_fu_791_p1 = add_ln40_reg_1428;

assign zext_ln40_3_fu_800_p1 = out_w_fu_795_p2;

assign zext_ln40_4_fu_824_p1 = add_ln40_2_reg_1490;

assign zext_ln40_5_fu_763_p1 = add_ln40_3_fu_758_p2;

assign zext_ln40_6_fu_809_p1 = add_ln40_4_reg_1439;

assign zext_ln40_7_fu_828_p1 = add_ln40_5_reg_1500;

assign zext_ln40_8_fu_866_p1 = add_ln40_6_reg_1530;

assign zext_ln40_9_fu_870_p1 = add_ln40_7_reg_1535;

assign zext_ln40_fu_374_p1 = input_height;

assign zext_ln48_1_cast_fu_386_p1 = output_width;

assign zext_ln48_1_fu_426_p1 = ap_phi_mux_out_d_0_phi_fu_320_p4;

assign zext_ln48_2_fu_543_p1 = out_d_reg_1184;

assign zext_ln48_3_fu_1060_p1 = add_ln48_reg_1555_pp0_iter2_reg;

assign zext_ln48_fu_382_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln40_reg_1124[8:7] <= 2'b00;
    zext_ln40_1_cast14_reg_1130[13:7] <= 7'b0000000;
    zext_ln48_reg_1137[8:6] <= 3'b000;
    zext_ln48_1_cast_reg_1143[13:6] <= 8'b00000000;
    tmp_1_reg_1158[3:0] <= 4'b0000;
    zext_ln40_1_reg_1421[13:5] <= 9'b000000000;
    zext_ln40_5_reg_1433[13:5] <= 9'b000000000;
    zext_ln40_3_reg_1484[13:5] <= 9'b000000000;
end

endmodule //depthwise_conv2d_fix_2
