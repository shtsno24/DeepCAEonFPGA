// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_pp1_stage0 = 14'd512;
parameter    ap_ST_fsm_state13 = 14'd1024;
parameter    ap_ST_fsm_state14 = 14'd2048;
parameter    ap_ST_fsm_state15 = 14'd4096;
parameter    ap_ST_fsm_state16 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [13:0] o_count_3_reg_278;
reg   [13:0] o_count_3_reg_278_pp1_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state10_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_state12_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
reg   [13:0] i_count_2_reg_289;
wire   [4:0] trunc_ln13_fu_308_p1;
reg   [4:0] trunc_ln13_reg_611;
wire   [4:0] add_ln13_fu_312_p2;
reg   [4:0] add_ln13_reg_618;
wire  signed [6:0] sext_ln5_1_fu_318_p1;
reg  signed [6:0] sext_ln5_1_reg_624;
wire    ap_CS_fsm_state2;
wire   [11:0] mul_ln13_1_fu_329_p2;
reg   [11:0] mul_ln13_1_reg_629;
wire   [9:0] empty_fu_335_p1;
reg   [9:0] empty_reg_634;
wire   [4:0] trunc_ln13_1_fu_339_p1;
reg   [4:0] trunc_ln13_1_reg_639;
wire   [4:0] trunc_ln23_fu_343_p1;
reg   [4:0] trunc_ln23_reg_644;
wire   [4:0] empty_35_fu_347_p2;
reg   [4:0] empty_35_reg_649;
wire    ap_CS_fsm_state3;
wire   [4:0] add_ln13_4_fu_352_p2;
reg   [4:0] add_ln13_4_reg_658;
wire   [4:0] empty_36_fu_357_p2;
reg   [4:0] empty_36_reg_664;
wire    ap_CS_fsm_state4;
wire   [4:0] add_ln13_8_fu_366_p2;
reg   [4:0] add_ln13_8_reg_671;
wire   [13:0] zext_ln13_fu_375_p1;
reg   [13:0] zext_ln13_reg_676;
wire    ap_CS_fsm_state5;
wire   [13:0] zext_ln13_2_fu_378_p1;
reg   [13:0] zext_ln13_2_reg_682;
wire   [13:0] mul_ln13_fu_385_p2;
reg   [13:0] mul_ln13_reg_687;
wire   [15:0] zext_ln13_5_fu_391_p1;
reg   [15:0] zext_ln13_5_reg_692;
wire   [15:0] p_cast9_fu_394_p1;
reg   [15:0] p_cast9_reg_697;
wire   [13:0] p_cast6_fu_403_p1;
wire   [15:0] p_cast5_fu_406_p1;
reg   [15:0] p_cast5_reg_707;
wire   [13:0] zext_ln13_6_fu_423_p1;
reg   [13:0] zext_ln13_6_reg_712;
wire   [13:0] zext_ln13_7_fu_432_p1;
wire   [4:0] add_ln13_9_fu_436_p2;
reg   [4:0] add_ln13_9_reg_723;
wire   [4:0] trunc_ln13_2_fu_440_p1;
reg   [4:0] trunc_ln13_2_reg_729;
wire   [0:0] icmp_ln13_fu_444_p2;
wire    ap_CS_fsm_state6;
wire   [4:0] depth_fu_449_p2;
reg   [4:0] depth_reg_738;
wire   [15:0] add_ln20_fu_470_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln15_fu_459_p2;
wire   [13:0] i_count_fu_476_p2;
reg   [13:0] i_count_reg_751;
wire    ap_CS_fsm_state8;
wire   [15:0] add_ln23_1_fu_486_p2;
reg   [15:0] add_ln23_1_reg_756;
wire   [0:0] icmp_ln23_fu_491_p2;
wire    ap_CS_fsm_state9;
wire   [4:0] height_fu_496_p2;
reg   [4:0] height_reg_766;
wire   [13:0] add_ln31_fu_502_p2;
reg   [13:0] add_ln31_reg_771;
wire   [15:0] add_ln20_1_fu_507_p2;
reg   [15:0] add_ln20_1_reg_776;
wire   [0:0] icmp_ln26_fu_511_p2;
reg   [0:0] icmp_ln26_reg_781;
reg   [0:0] icmp_ln26_reg_781_pp1_iter1_reg;
wire   [13:0] add_ln31_1_fu_522_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [13:0] o_count_6_fu_528_p2;
reg   [13:0] o_count_6_reg_795;
reg   [15:0] input_load_reg_800;
wire   [13:0] add_ln20_2_fu_539_p2;
reg   [13:0] add_ln20_2_reg_805;
wire    ap_CS_fsm_state13;
wire   [13:0] add_ln40_fu_549_p2;
reg   [13:0] add_ln40_reg_810;
wire   [13:0] add_ln23_3_fu_555_p2;
reg   [13:0] add_ln23_3_reg_815;
wire   [15:0] o_count_4_fu_579_p2;
wire    ap_CS_fsm_state15;
wire   [0:0] icmp_ln44_fu_568_p2;
wire   [13:0] add_ln13_6_fu_585_p2;
wire    ap_CS_fsm_state16;
wire   [13:0] add_ln13_7_fu_590_p2;
wire   [4:0] add_ln13_11_fu_595_p2;
wire   [4:0] add_ln13_12_fu_600_p2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state10;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg   [4:0] indvars_iv2_reg_149;
reg   [4:0] indvars_iv_reg_159;
reg   [13:0] phi_ln13_reg_169;
reg   [13:0] indvars_iv10_reg_179;
reg   [15:0] o_count_0_reg_189;
reg   [13:0] i_count_0_reg_201;
reg   [4:0] depth_0_reg_213;
reg   [15:0] o_count_1_reg_224;
reg   [13:0] o_count_reg_234;
wire    ap_CS_fsm_state14;
reg   [13:0] o_count_2_reg_245;
reg   [13:0] i_count_1_reg_256;
reg   [4:0] height_0_reg_267;
reg   [13:0] ap_phi_mux_o_count_3_phi_fu_281_p4;
wire    ap_block_pp1_stage0;
reg   [15:0] o_count_5_reg_299;
wire   [63:0] zext_ln19_fu_465_p1;
wire   [63:0] zext_ln30_fu_517_p1;
wire   [63:0] zext_ln30_1_fu_534_p1;
wire   [63:0] zext_ln39_fu_544_p1;
wire   [63:0] zext_ln39_1_fu_560_p1;
wire   [63:0] zext_ln48_fu_574_p1;
wire  signed [5:0] trunc_ln13_fu_308_p0;
wire  signed [5:0] sext_ln5_1_fu_318_p0;
wire   [6:0] mul_ln13_1_fu_329_p0;
wire   [4:0] mul_ln13_1_fu_329_p1;
wire  signed [5:0] trunc_ln23_fu_343_p0;
wire   [4:0] add_ln13_5_fu_362_p2;
wire  signed [5:0] sext_ln5_fu_372_p0;
wire  signed [6:0] sext_ln5_fu_372_p1;
wire   [6:0] mul_ln13_fu_385_p0;
wire   [6:0] mul_ln13_fu_385_p1;
wire   [9:0] p_cast7_fu_400_p1;
wire   [9:0] p_cast4_fu_409_p1;
wire   [9:0] add_ln13_1_fu_412_p2;
wire   [9:0] add_ln13_2_fu_417_p2;
wire  signed [5:0] add_ln13_3_fu_427_p0;
wire   [5:0] p_cast8_fu_397_p1;
wire   [5:0] add_ln13_3_fu_427_p2;
wire   [4:0] trunc_ln15_fu_455_p1;
wire   [15:0] add_ln23_fu_481_p2;
wire   [4:0] trunc_ln44_fu_564_p1;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [11:0] mul_ln13_1_fu_329_p00;
wire   [11:0] mul_ln13_1_fu_329_p10;
wire   [13:0] mul_ln13_fu_385_p00;
wire   [13:0] mul_ln13_fu_385_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state10))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_491_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state10)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_491_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        depth_0_reg_213 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        depth_0_reg_213 <= depth_reg_738;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        height_0_reg_267 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        height_0_reg_267 <= height_reg_766;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_count_0_reg_201 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        i_count_0_reg_201 <= i_count_reg_751;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_count_1_reg_256 <= i_count_0_reg_201;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_count_1_reg_256 <= add_ln31_reg_771;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln26_fu_511_p2 == 1'd0))) begin
        i_count_2_reg_289 <= add_ln31_1_fu_522_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_491_p2 == 1'd0))) begin
        i_count_2_reg_289 <= i_count_1_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv10_reg_179 <= p_cast6_fu_403_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        indvars_iv10_reg_179 <= add_ln13_6_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv2_reg_149 <= empty_35_reg_649;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        indvars_iv2_reg_149 <= add_ln13_12_fu_600_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv_reg_159 <= add_ln13_8_reg_671;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        indvars_iv_reg_159 <= add_ln13_11_fu_595_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o_count_0_reg_189 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        o_count_0_reg_189 <= add_ln20_1_reg_776;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln13_fu_444_p2 == 1'd0))) begin
        o_count_1_reg_224 <= o_count_0_reg_189;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_459_p2 == 1'd0))) begin
        o_count_1_reg_224 <= add_ln20_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        o_count_2_reg_245 <= indvars_iv10_reg_179;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        o_count_2_reg_245 <= add_ln20_2_reg_805;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln26_reg_781 == 1'd0))) begin
        o_count_3_reg_278 <= o_count_6_reg_795;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_491_p2 == 1'd0))) begin
        o_count_3_reg_278 <= o_count_2_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln44_fu_568_p2 == 1'd0))) begin
        o_count_5_reg_299 <= o_count_4_fu_579_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_491_p2 == 1'd1))) begin
        o_count_5_reg_299 <= add_ln23_1_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        o_count_reg_234 <= phi_ln13_reg_169;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        o_count_reg_234 <= add_ln23_3_reg_815;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_ln13_reg_169 <= zext_ln13_7_fu_432_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        phi_ln13_reg_169 <= add_ln13_7_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_4_reg_658 <= add_ln13_4_fu_352_p2;
        empty_35_reg_649 <= empty_35_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln13_8_reg_671 <= add_ln13_8_fu_366_p2;
        empty_36_reg_664 <= empty_36_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln13_9_reg_723 <= add_ln13_9_fu_436_p2;
        mul_ln13_reg_687 <= mul_ln13_fu_385_p2;
        p_cast5_reg_707[4 : 0] <= p_cast5_fu_406_p1[4 : 0];
        p_cast9_reg_697[4 : 0] <= p_cast9_fu_394_p1[4 : 0];
        trunc_ln13_2_reg_729 <= trunc_ln13_2_fu_440_p1;
        zext_ln13_2_reg_682[6 : 0] <= zext_ln13_2_fu_378_p1[6 : 0];
        zext_ln13_5_reg_692[11 : 0] <= zext_ln13_5_fu_391_p1[11 : 0];
        zext_ln13_6_reg_712[9 : 0] <= zext_ln13_6_fu_423_p1[9 : 0];
        zext_ln13_reg_676[4 : 0] <= zext_ln13_fu_375_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln13_reg_618 <= add_ln13_fu_312_p2;
        trunc_ln13_reg_611 <= trunc_ln13_fu_308_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_491_p2 == 1'd1))) begin
        add_ln20_1_reg_776 <= add_ln20_1_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln20_2_reg_805 <= add_ln20_2_fu_539_p2;
        add_ln23_3_reg_815 <= add_ln23_3_fu_555_p2;
        add_ln40_reg_810 <= add_ln40_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln23_1_reg_756 <= add_ln23_1_fu_486_p2;
        i_count_reg_751 <= i_count_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_491_p2 == 1'd0))) begin
        add_ln31_reg_771 <= add_ln31_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        depth_reg_738 <= depth_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_634 <= empty_fu_335_p1;
        mul_ln13_1_reg_629 <= mul_ln13_1_fu_329_p2;
        sext_ln5_1_reg_624 <= sext_ln5_1_fu_318_p1;
        trunc_ln13_1_reg_639 <= trunc_ln13_1_fu_339_p1;
        trunc_ln23_reg_644 <= trunc_ln23_fu_343_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        height_reg_766 <= height_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln26_reg_781 <= icmp_ln26_fu_511_p2;
        icmp_ln26_reg_781_pp1_iter1_reg <= icmp_ln26_reg_781;
        o_count_3_reg_278_pp1_iter1_reg <= o_count_3_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln26_reg_781 == 1'd0))) begin
        input_load_reg_800 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln26_fu_511_p2 == 1'd0))) begin
        o_count_6_reg_795 <= o_count_6_fu_528_p2;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_511_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (icmp_ln13_fu_444_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln26_reg_781 == 1'd0))) begin
        ap_phi_mux_o_count_3_phi_fu_281_p4 = o_count_6_reg_795;
    end else begin
        ap_phi_mux_o_count_3_phi_fu_281_p4 = o_count_3_reg_278;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln13_fu_444_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_address0 = zext_ln48_fu_574_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_address0 = zext_ln39_1_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_address0 = zext_ln39_fu_544_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        output_r_address0 = zext_ln30_1_fu_534_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = zext_ln19_fu_465_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        output_r_d0 = input_load_reg_800;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln26_reg_781_pp1_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_state15) & (icmp_ln44_fu_568_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_459_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln13_fu_444_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln15_fu_459_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln23_fu_491_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln26_fu_511_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln26_fu_511_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln44_fu_568_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_11_fu_595_p2 = (add_ln13_9_reg_723 + indvars_iv_reg_159);

assign add_ln13_12_fu_600_p2 = (add_ln13_9_reg_723 + indvars_iv2_reg_149);

assign add_ln13_1_fu_412_p2 = (empty_reg_634 + p_cast7_fu_400_p1);

assign add_ln13_2_fu_417_p2 = (p_cast4_fu_409_p1 + add_ln13_1_fu_412_p2);

assign add_ln13_3_fu_427_p0 = input_width;

assign add_ln13_3_fu_427_p2 = ($signed(add_ln13_3_fu_427_p0) + $signed(p_cast8_fu_397_p1));

assign add_ln13_4_fu_352_p2 = (empty_35_fu_347_p2 + trunc_ln13_1_reg_639);

assign add_ln13_5_fu_362_p2 = (add_ln13_4_reg_658 + trunc_ln13_reg_611);

assign add_ln13_6_fu_585_p2 = (zext_ln13_6_reg_712 + indvars_iv10_reg_179);

assign add_ln13_7_fu_590_p2 = (zext_ln13_6_reg_712 + phi_ln13_reg_169);

assign add_ln13_8_fu_366_p2 = (5'd1 + add_ln13_5_fu_362_p2);

assign add_ln13_9_fu_436_p2 = (empty_36_reg_664 + add_ln13_4_reg_658);

assign add_ln13_fu_312_p2 = (5'd2 + trunc_ln13_fu_308_p1);

assign add_ln20_1_fu_507_p2 = (add_ln23_1_reg_756 + p_cast5_reg_707);

assign add_ln20_2_fu_539_p2 = (zext_ln13_reg_676 + o_count_2_reg_245);

assign add_ln20_fu_470_p2 = (o_count_1_reg_224 + 16'd1);

assign add_ln23_1_fu_486_p2 = (add_ln23_fu_481_p2 + zext_ln13_5_reg_692);

assign add_ln23_3_fu_555_p2 = (zext_ln13_reg_676 + o_count_reg_234);

assign add_ln23_fu_481_p2 = (p_cast9_reg_697 + o_count_0_reg_189);

assign add_ln31_1_fu_522_p2 = (i_count_2_reg_289 + 14'd1);

assign add_ln31_fu_502_p2 = (zext_ln13_2_reg_682 + i_count_1_reg_256);

assign add_ln40_fu_549_p2 = (o_count_reg_234 + 14'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign depth_fu_449_p2 = (depth_0_reg_213 + 5'd1);

assign empty_35_fu_347_p2 = (5'd3 + trunc_ln13_reg_611);

assign empty_36_fu_357_p2 = (5'd1 + trunc_ln13_reg_611);

assign empty_fu_335_p1 = mul_ln13_1_fu_329_p2[9:0];

assign height_fu_496_p2 = (height_0_reg_267 + 5'd1);

assign i_count_fu_476_p2 = (mul_ln13_reg_687 + i_count_0_reg_201);

assign icmp_ln13_fu_444_p2 = ((depth_0_reg_213 == trunc_ln13_2_reg_729) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_459_p2 = ((trunc_ln15_fu_455_p1 == indvars_iv2_reg_149) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_491_p2 = ((height_0_reg_267 == trunc_ln23_reg_644) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_511_p2 = ((ap_phi_mux_o_count_3_phi_fu_281_p4 == o_count_reg_234) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_568_p2 = ((trunc_ln44_fu_564_p1 == indvars_iv_reg_159) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln30_fu_517_p1;

assign mul_ln13_1_fu_329_p0 = mul_ln13_1_fu_329_p00;

assign mul_ln13_1_fu_329_p00 = $unsigned(sext_ln5_1_fu_318_p1);

assign mul_ln13_1_fu_329_p1 = mul_ln13_1_fu_329_p10;

assign mul_ln13_1_fu_329_p10 = add_ln13_reg_618;

assign mul_ln13_1_fu_329_p2 = (mul_ln13_1_fu_329_p0 * mul_ln13_1_fu_329_p1);

assign mul_ln13_fu_385_p0 = mul_ln13_fu_385_p00;

assign mul_ln13_fu_385_p00 = $unsigned(sext_ln5_1_reg_624);

assign mul_ln13_fu_385_p1 = mul_ln13_fu_385_p10;

assign mul_ln13_fu_385_p10 = $unsigned(sext_ln5_fu_372_p1);

assign mul_ln13_fu_385_p2 = (mul_ln13_fu_385_p0 * mul_ln13_fu_385_p1);

assign o_count_4_fu_579_p2 = (o_count_5_reg_299 + 16'd1);

assign o_count_6_fu_528_p2 = (ap_phi_mux_o_count_3_phi_fu_281_p4 + 14'd1);

assign p_cast4_fu_409_p1 = empty_36_reg_664;

assign p_cast5_fu_406_p1 = empty_36_reg_664;

assign p_cast6_fu_403_p1 = empty_35_reg_649;

assign p_cast7_fu_400_p1 = empty_35_reg_649;

assign p_cast8_fu_397_p1 = empty_35_reg_649;

assign p_cast9_fu_394_p1 = empty_35_reg_649;

assign sext_ln5_1_fu_318_p0 = input_height;

assign sext_ln5_1_fu_318_p1 = sext_ln5_1_fu_318_p0;

assign sext_ln5_fu_372_p0 = input_width;

assign sext_ln5_fu_372_p1 = sext_ln5_fu_372_p0;

assign trunc_ln13_1_fu_339_p1 = mul_ln13_1_fu_329_p2[4:0];

assign trunc_ln13_2_fu_440_p1 = input_depth[4:0];

assign trunc_ln13_fu_308_p0 = input_width;

assign trunc_ln13_fu_308_p1 = trunc_ln13_fu_308_p0[4:0];

assign trunc_ln15_fu_455_p1 = o_count_1_reg_224[4:0];

assign trunc_ln23_fu_343_p0 = input_height;

assign trunc_ln23_fu_343_p1 = trunc_ln23_fu_343_p0[4:0];

assign trunc_ln44_fu_564_p1 = o_count_5_reg_299[4:0];

assign zext_ln13_2_fu_378_p1 = $unsigned(sext_ln5_fu_372_p1);

assign zext_ln13_5_fu_391_p1 = mul_ln13_1_reg_629;

assign zext_ln13_6_fu_423_p1 = add_ln13_2_fu_417_p2;

assign zext_ln13_7_fu_432_p1 = add_ln13_3_fu_427_p2;

assign zext_ln13_fu_375_p1 = add_ln13_reg_618;

assign zext_ln19_fu_465_p1 = o_count_1_reg_224;

assign zext_ln30_1_fu_534_p1 = o_count_3_reg_278_pp1_iter1_reg;

assign zext_ln30_fu_517_p1 = i_count_2_reg_289;

assign zext_ln39_1_fu_560_p1 = add_ln40_reg_810;

assign zext_ln39_fu_544_p1 = o_count_reg_234;

assign zext_ln48_fu_574_p1 = o_count_5_reg_299;

always @ (posedge ap_clk) begin
    zext_ln13_reg_676[13:5] <= 9'b000000000;
    zext_ln13_2_reg_682[13:7] <= 7'b0000000;
    zext_ln13_5_reg_692[15:12] <= 4'b0000;
    p_cast9_reg_697[15:5] <= 11'b00000000000;
    p_cast5_reg_707[15:5] <= 11'b00000000000;
    zext_ln13_6_reg_712[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
