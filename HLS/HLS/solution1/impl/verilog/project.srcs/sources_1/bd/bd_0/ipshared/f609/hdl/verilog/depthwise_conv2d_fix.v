// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state12 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten71_reg_176;
reg   [0:0] out_d_0_reg_187;
reg   [9:0] indvar_flatten_reg_199;
reg   [4:0] out_h_0_reg_210;
reg   [4:0] out_w_0_reg_221;
reg  signed [15:0] reg_233;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln35_reg_1175;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln35_reg_1175_pp0_iter1_reg;
reg  signed [15:0] reg_238;
wire   [0:0] out_d_fu_247_p2;
reg   [0:0] out_d_reg_1147;
wire   [10:0] tmp5_0_0_fu_277_p2;
reg   [10:0] tmp5_0_0_reg_1155;
wire   [10:0] tmp5_1_0_fu_313_p2;
reg   [10:0] tmp5_1_0_reg_1160;
wire   [9:0] tmp5_2_0_fu_345_p2;
reg   [9:0] tmp5_2_0_reg_1165;
wire   [10:0] tmp7_fu_381_p2;
reg   [10:0] tmp7_reg_1170;
wire   [0:0] icmp_ln35_fu_387_p2;
wire   [9:0] add_ln35_21_fu_393_p2;
reg   [9:0] add_ln35_21_reg_1179;
wire   [0:0] icmp_ln23_fu_399_p2;
reg   [0:0] icmp_ln23_reg_1184;
wire   [4:0] select_ln35_fu_405_p3;
reg   [4:0] select_ln35_reg_1196;
wire   [0:0] and_ln35_fu_425_p2;
reg   [0:0] and_ln35_reg_1203;
wire   [4:0] out_h_fu_431_p2;
reg   [4:0] out_h_reg_1213;
wire   [9:0] add_ln23_7_fu_437_p2;
reg   [9:0] add_ln23_7_reg_1221;
wire   [0:0] select_ln35_1_fu_443_p3;
reg   [0:0] select_ln35_1_reg_1226;
wire   [0:0] select_ln35_2_fu_453_p3;
reg   [0:0] select_ln35_2_reg_1233;
wire   [4:0] out_w_0_mid2_fu_519_p3;
reg   [4:0] out_w_0_mid2_reg_1239;
wire   [10:0] tmp5_0_0_mid2_fu_555_p3;
reg   [10:0] tmp5_0_0_mid2_reg_1245;
wire   [10:0] tmp5_1_0_mid2_fu_597_p3;
reg   [10:0] tmp5_1_0_mid2_reg_1250;
wire   [9:0] tmp5_2_0_mid2_fu_635_p3;
reg   [9:0] tmp5_2_0_mid2_reg_1257;
wire   [10:0] zext_ln35_12_fu_684_p1;
reg   [10:0] zext_ln35_12_reg_1264;
wire   [4:0] out_w_fu_703_p2;
reg   [4:0] out_w_reg_1274;
wire   [10:0] zext_ln35_14_fu_709_p1;
reg   [10:0] zext_ln35_14_reg_1280;
wire   [10:0] add_ln41_fu_728_p2;
reg   [10:0] add_ln41_reg_1290;
reg   [10:0] add_ln41_reg_1290_pp0_iter1_reg;
wire   [4:0] add_ln35_3_fu_734_p2;
reg   [4:0] add_ln35_3_reg_1295;
wire   [10:0] add_ln35_6_fu_770_p2;
reg   [10:0] add_ln35_6_reg_1310;
wire   [10:0] add_ln35_7_fu_774_p2;
reg   [10:0] add_ln35_7_reg_1315;
wire  signed [29:0] sext_ln35_3_fu_801_p1;
reg  signed [29:0] sext_ln35_3_reg_1320;
reg   [15:0] trunc_ln_reg_1326;
wire  signed [29:0] sext_ln35_6_fu_830_p1;
reg  signed [29:0] sext_ln35_6_reg_1331;
reg   [15:0] trunc_ln41_1_reg_1336;
wire   [4:0] select_ln23_fu_873_p3;
reg   [4:0] select_ln23_reg_1351;
wire  signed [29:0] sext_ln35_9_fu_903_p1;
reg  signed [29:0] sext_ln35_9_reg_1356;
reg   [15:0] trunc_ln41_2_reg_1361;
wire  signed [29:0] sext_ln35_12_fu_932_p1;
reg  signed [29:0] sext_ln35_12_reg_1366;
reg   [15:0] trunc_ln41_3_reg_1371;
wire   [9:0] add_ln35_10_fu_965_p2;
reg   [9:0] add_ln35_10_reg_1386;
wire   [15:0] add_ln41_1_fu_970_p2;
reg   [15:0] add_ln41_1_reg_1391;
wire   [9:0] select_ln23_3_fu_974_p3;
reg   [9:0] select_ln23_3_reg_1396;
reg   [15:0] trunc_ln41_4_reg_1401;
reg   [15:0] trunc_ln41_5_reg_1406;
wire   [15:0] add_ln41_3_fu_1014_p2;
reg   [15:0] add_ln41_3_reg_1416;
reg   [15:0] trunc_ln41_6_reg_1421;
reg   [15:0] trunc_ln41_7_reg_1426;
wire   [15:0] add_ln41_4_fu_1045_p2;
reg   [15:0] add_ln41_4_reg_1431;
reg   [15:0] trunc_ln41_8_reg_1436;
wire   [15:0] add_ln41_8_fu_1076_p2;
reg   [15:0] add_ln41_8_reg_1441;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten71_phi_fu_180_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_out_d_0_phi_fu_191_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_203_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_214_p4;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_225_p4;
wire   [63:0] zext_ln35_3_fu_698_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln35_4_fu_723_p1;
wire   [63:0] zext_ln35_5_fu_752_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln35_6_fu_765_p1;
wire   [63:0] zext_ln35_7_fu_846_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln35_8_fu_854_p1;
wire   [63:0] zext_ln35_9_fu_950_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln35_10_fu_960_p1;
wire   [63:0] zext_ln35_11_fu_1006_p1;
wire   [63:0] zext_ln41_fu_1084_p1;
wire   [9:0] p_shl_fu_253_p3;
wire   [5:0] p_shl1_fu_265_p3;
wire   [10:0] p_shl10_cast_fu_261_p1;
wire   [10:0] p_shl11_cast_fu_273_p1;
wire   [4:0] tmp_1_0_fu_283_p2;
wire   [9:0] p_shl8_fu_289_p3;
wire   [5:0] p_shl9_fu_301_p3;
wire   [10:0] p_shl8_cast_fu_297_p1;
wire   [10:0] p_shl9_cast_fu_309_p1;
wire   [4:0] tmp_2_0_fu_319_p2;
wire   [5:0] p_shl7_fu_333_p3;
wire   [9:0] p_shl6_fu_325_p3;
wire   [9:0] p_shl7_cast_fu_341_p1;
wire   [4:0] zext_ln41_1_fu_243_p1;
wire   [4:0] tmp6_fu_351_p2;
wire   [9:0] p_shl4_fu_357_p3;
wire   [6:0] p_shl5_fu_369_p3;
wire   [10:0] p_shl4_cast_fu_365_p1;
wire   [10:0] p_shl5_cast_fu_377_p1;
wire   [0:0] icmp_ln24_fu_419_p2;
wire   [0:0] xor_ln35_fu_413_p2;
wire   [5:0] tmp_s_fu_477_p3;
wire   [2:0] tmp_9_fu_488_p3;
wire   [6:0] p_shl4_cast_mid161_ca_fu_484_p1;
wire   [6:0] p_shl5_cast_mid165_ca_fu_495_p1;
wire   [6:0] tmp7_mid167_fu_499_p2;
wire  signed [10:0] tmp7_mid167_cast_fu_505_p1;
wire   [0:0] empty_54_fu_515_p2;
wire   [9:0] p_shl10_mid1_fu_527_p3;
wire   [5:0] p_shl11_mid1_fu_538_p3;
wire   [10:0] p_shl10_cast_mid1_fu_534_p1;
wire   [10:0] p_shl11_cast_mid1_fu_545_p1;
wire   [10:0] tmp5_0_0_mid1_fu_549_p2;
wire   [10:0] select_ln35_4_fu_459_p3;
wire   [4:0] tmp_1_0_mid1_fu_562_p2;
wire   [9:0] p_shl8_mid1_fu_567_p3;
wire   [5:0] p_shl9_mid1_fu_579_p3;
wire   [10:0] p_shl8_cast_mid1_fu_575_p1;
wire   [10:0] p_shl9_cast_mid1_fu_587_p1;
wire   [10:0] tmp5_1_0_mid1_fu_591_p2;
wire   [10:0] select_ln35_5_fu_465_p3;
wire   [4:0] tmp_2_0_mid1_fu_604_p2;
wire   [5:0] p_shl7_mid1_fu_617_p3;
wire   [9:0] p_shl6_mid1_fu_609_p3;
wire   [9:0] p_shl7_cast_mid1_fu_625_p1;
wire   [9:0] tmp5_2_0_mid1_fu_629_p2;
wire   [9:0] select_ln35_6_fu_471_p3;
wire   [4:0] zext_ln35_25_fu_449_p1;
wire   [4:0] tmp6_mid1_fu_642_p2;
wire   [9:0] p_shl4_mid1_fu_647_p3;
wire   [6:0] p_shl5_mid1_fu_659_p3;
wire   [10:0] p_shl4_cast_mid1_fu_655_p1;
wire   [10:0] p_shl5_cast_mid1_fu_667_p1;
wire   [10:0] tmp7_mid1_fu_671_p2;
wire   [10:0] select_ln35_7_fu_509_p3;
wire   [10:0] add_ln35_fu_688_p2;
wire  signed [31:0] sext_ln35_1_fu_694_p1;
wire   [10:0] add_ln35_2_fu_713_p2;
wire  signed [31:0] sext_ln35_4_fu_719_p1;
wire   [10:0] tmp7_mid2_fu_677_p3;
wire   [10:0] zext_ln35_16_fu_739_p1;
wire   [10:0] add_ln35_4_fu_743_p2;
wire  signed [31:0] sext_ln35_7_fu_748_p1;
wire   [10:0] add_ln35_5_fu_757_p2;
wire  signed [31:0] sext_ln35_10_fu_761_p1;
wire   [1:0] tmp_5_fu_789_p4;
wire  signed [15:0] tmp_5_fu_789_p5;
wire  signed [29:0] mul_ln35_fu_1089_p2;
wire   [1:0] tmp_6_fu_818_p4;
wire  signed [15:0] tmp_6_fu_818_p5;
wire  signed [29:0] mul_ln35_1_fu_1096_p2;
wire  signed [31:0] sext_ln35_13_fu_843_p1;
wire  signed [31:0] sext_ln35_15_fu_851_p1;
wire   [1:0] tmp_7_fu_891_p4;
wire  signed [15:0] tmp_7_fu_891_p5;
wire  signed [29:0] mul_ln35_2_fu_1103_p2;
wire   [1:0] tmp_8_fu_920_p4;
wire  signed [15:0] tmp_8_fu_920_p5;
wire  signed [29:0] mul_ln35_3_fu_1110_p2;
wire   [9:0] zext_ln35_2_fu_878_p1;
wire   [9:0] add_ln35_8_fu_945_p2;
wire   [9:0] zext_ln35_13_fu_881_p1;
wire   [9:0] add_ln35_9_fu_955_p2;
wire   [9:0] zext_ln35_15_fu_884_p1;
wire  signed [29:0] mul_ln35_4_fu_1117_p2;
wire  signed [29:0] mul_ln35_5_fu_1123_p2;
wire   [15:0] add_ln41_2_fu_1010_p2;
wire  signed [29:0] mul_ln35_6_fu_1129_p2;
wire  signed [29:0] mul_ln35_7_fu_1135_p2;
wire  signed [29:0] mul_ln35_8_fu_1141_p2;
wire   [15:0] add_ln41_5_fu_1062_p2;
wire   [15:0] add_ln41_6_fu_1066_p2;
wire   [15:0] add_ln41_7_fu_1071_p2;
wire  signed [31:0] sext_ln41_fu_1081_p1;
wire  signed [15:0] mul_ln35_4_fu_1117_p0;
wire  signed [15:0] mul_ln35_5_fu_1123_p0;
wire  signed [15:0] mul_ln35_6_fu_1129_p0;
wire  signed [15:0] mul_ln35_7_fu_1135_p0;
wire  signed [15:0] mul_ln35_8_fu_1141_p0;
wire    ap_CS_fsm_state12;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U6(
    .din0(16'd52982),
    .din1(16'd52851),
    .din2(16'd1933),
    .din3(tmp_5_fu_789_p4),
    .dout(tmp_5_fu_789_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U7(
    .din0(16'd52982),
    .din1(16'd52851),
    .din2(16'd1933),
    .din3(tmp_6_fu_818_p4),
    .dout(tmp_6_fu_818_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U8(
    .din0(16'd52982),
    .din1(16'd52851),
    .din2(16'd1933),
    .din3(tmp_7_fu_891_p4),
    .dout(tmp_7_fu_891_p5)
);

network_mux_32_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
network_mux_32_16_1_1_U9(
    .din0(16'd52982),
    .din1(16'd52851),
    .din2(16'd1933),
    .din3(tmp_8_fu_920_p4),
    .dout(tmp_8_fu_920_p5)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U10(
    .din0(tmp_5_fu_789_p5),
    .din1(reg_233),
    .dout(mul_ln35_fu_1089_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U11(
    .din0(tmp_6_fu_818_p5),
    .din1(reg_238),
    .dout(mul_ln35_1_fu_1096_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U12(
    .din0(tmp_7_fu_891_p5),
    .din1(reg_233),
    .dout(mul_ln35_2_fu_1103_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U13(
    .din0(tmp_8_fu_920_p5),
    .din1(reg_238),
    .dout(mul_ln35_3_fu_1110_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U14(
    .din0(mul_ln35_4_fu_1117_p0),
    .din1(reg_233),
    .dout(mul_ln35_4_fu_1117_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U15(
    .din0(mul_ln35_5_fu_1123_p0),
    .din1(reg_238),
    .dout(mul_ln35_5_fu_1123_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U16(
    .din0(mul_ln35_6_fu_1129_p0),
    .din1(reg_233),
    .dout(mul_ln35_6_fu_1129_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U17(
    .din0(mul_ln35_7_fu_1135_p0),
    .din1(reg_238),
    .dout(mul_ln35_7_fu_1135_p2)
);

network_mul_mul_16s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_1_1_U18(
    .din0(mul_ln35_8_fu_1141_p0),
    .din1(reg_233),
    .dout(mul_ln35_8_fu_1141_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten71_reg_176 <= add_ln35_21_reg_1179;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten71_reg_176 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_199 <= select_ln23_3_reg_1396;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_199 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_187 <= select_ln35_1_reg_1226;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_187 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_h_0_reg_210 <= select_ln23_reg_1351;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_210 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_0_reg_221 <= out_w_reg_1274;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_221 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_1175 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_233 <= input_r_q1;
    end else if ((((icmp_ln35_reg_1175 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln35_reg_1175_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_233 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln35_reg_1175 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_238 <= input_r_q0;
    end else if (((icmp_ln35_reg_1175 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_238 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln23_7_reg_1221 <= add_ln23_7_fu_437_p2;
        and_ln35_reg_1203 <= and_ln35_fu_425_p2;
        icmp_ln23_reg_1184 <= icmp_ln23_fu_399_p2;
        out_h_reg_1213 <= out_h_fu_431_p2;
        select_ln35_reg_1196 <= select_ln35_fu_405_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln35_10_reg_1386 <= add_ln35_10_fu_965_p2;
        add_ln41_1_reg_1391 <= add_ln41_1_fu_970_p2;
        sext_ln35_12_reg_1366 <= sext_ln35_12_fu_932_p1;
        sext_ln35_9_reg_1356 <= sext_ln35_9_fu_903_p1;
        trunc_ln41_2_reg_1361 <= {{mul_ln35_2_fu_1103_p2[29:14]}};
        trunc_ln41_3_reg_1371 <= {{mul_ln35_3_fu_1110_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln35_21_reg_1179 <= add_ln35_21_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln35_3_reg_1295 <= add_ln35_3_fu_734_p2;
        add_ln35_6_reg_1310 <= add_ln35_6_fu_770_p2;
        add_ln35_7_reg_1315 <= add_ln35_7_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln41_3_reg_1416 <= add_ln41_3_fu_1014_p2;
        trunc_ln41_4_reg_1401 <= {{mul_ln35_4_fu_1117_p2[29:14]}};
        trunc_ln41_5_reg_1406 <= {{mul_ln35_5_fu_1123_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln41_4_reg_1431 <= add_ln41_4_fu_1045_p2;
        trunc_ln41_6_reg_1421 <= {{mul_ln35_6_fu_1129_p2[29:14]}};
        trunc_ln41_7_reg_1426 <= {{mul_ln35_7_fu_1135_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln35_reg_1175_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln41_8_reg_1441 <= add_ln41_8_fu_1076_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln41_reg_1290 <= add_ln41_fu_728_p2;
        out_w_0_mid2_reg_1239 <= out_w_0_mid2_fu_519_p3;
        select_ln35_2_reg_1233 <= select_ln35_2_fu_453_p3;
        tmp5_0_0_mid2_reg_1245[10 : 1] <= tmp5_0_0_mid2_fu_555_p3[10 : 1];
        tmp5_1_0_mid2_reg_1250[10 : 1] <= tmp5_1_0_mid2_fu_597_p3[10 : 1];
        tmp5_2_0_mid2_reg_1257[9 : 1] <= tmp5_2_0_mid2_fu_635_p3[9 : 1];
        zext_ln35_12_reg_1264[4 : 0] <= zext_ln35_12_fu_684_p1[4 : 0];
        zext_ln35_14_reg_1280[4 : 0] <= zext_ln35_14_fu_709_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln41_reg_1290_pp0_iter1_reg <= add_ln41_reg_1290;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln35_reg_1175 <= icmp_ln35_fu_387_p2;
        icmp_ln35_reg_1175_pp0_iter1_reg <= icmp_ln35_reg_1175;
        out_d_reg_1147 <= out_d_fu_247_p2;
        tmp5_0_0_reg_1155[10 : 1] <= tmp5_0_0_fu_277_p2[10 : 1];
        tmp5_1_0_reg_1160[10 : 1] <= tmp5_1_0_fu_313_p2[10 : 1];
        tmp5_2_0_reg_1165[9 : 1] <= tmp5_2_0_fu_345_p2[9 : 1];
        tmp7_reg_1170[10 : 2] <= tmp7_fu_381_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_w_reg_1274 <= out_w_fu_703_p2;
        select_ln35_1_reg_1226 <= select_ln35_1_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln23_3_reg_1396 <= select_ln23_3_fu_974_p3;
        select_ln23_reg_1351 <= select_ln23_fu_873_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln35_reg_1175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sext_ln35_3_reg_1320 <= sext_ln35_3_fu_801_p1;
        sext_ln35_6_reg_1331 <= sext_ln35_6_fu_830_p1;
        trunc_ln41_1_reg_1336 <= {{mul_ln35_1_fu_1096_p2[29:14]}};
        trunc_ln_reg_1326 <= {{mul_ln35_fu_1089_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_reg_1175_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        trunc_ln41_8_reg_1436 <= {{mul_ln35_8_fu_1141_p2[29:14]}};
    end
end

always @ (*) begin
    if ((icmp_ln35_fu_387_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten71_phi_fu_180_p4 = add_ln35_21_reg_1179;
    end else begin
        ap_phi_mux_indvar_flatten71_phi_fu_180_p4 = indvar_flatten71_reg_176;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_203_p4 = select_ln23_3_reg_1396;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_203_p4 = indvar_flatten_reg_199;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_191_p4 = select_ln35_1_reg_1226;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_191_p4 = out_d_0_reg_187;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_h_0_phi_fu_214_p4 = select_ln23_reg_1351;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_214_p4 = out_h_0_reg_210;
    end
end

always @ (*) begin
    if (((icmp_ln35_reg_1175 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_225_p4 = out_w_reg_1274;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_225_p4 = out_w_0_reg_221;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln35_11_fu_1006_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln35_10_fu_960_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln35_8_fu_854_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln35_6_fu_765_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln35_3_fu_698_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address1 = zext_ln35_9_fu_950_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            input_r_address1 = zext_ln35_7_fu_846_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln35_5_fu_752_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln35_4_fu_723_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln35_reg_1175_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln35_fu_387_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln35_fu_387_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_7_fu_437_p2 = (10'd1 + ap_phi_mux_indvar_flatten_phi_fu_203_p4);

assign add_ln35_10_fu_965_p2 = (zext_ln35_15_fu_884_p1 + tmp5_2_0_mid2_reg_1257);

assign add_ln35_21_fu_393_p2 = (ap_phi_mux_indvar_flatten71_phi_fu_180_p4 + 10'd1);

assign add_ln35_2_fu_713_p2 = (zext_ln35_14_fu_709_p1 + tmp5_0_0_mid2_fu_555_p3);

assign add_ln35_3_fu_734_p2 = (5'd2 + out_w_0_mid2_reg_1239);

assign add_ln35_4_fu_743_p2 = (zext_ln35_16_fu_739_p1 + tmp5_0_0_mid2_reg_1245);

assign add_ln35_5_fu_757_p2 = (zext_ln35_12_reg_1264 + tmp5_1_0_mid2_reg_1250);

assign add_ln35_6_fu_770_p2 = (zext_ln35_14_reg_1280 + tmp5_1_0_mid2_reg_1250);

assign add_ln35_7_fu_774_p2 = (zext_ln35_16_fu_739_p1 + tmp5_1_0_mid2_reg_1250);

assign add_ln35_8_fu_945_p2 = (zext_ln35_2_fu_878_p1 + tmp5_2_0_mid2_reg_1257);

assign add_ln35_9_fu_955_p2 = (zext_ln35_13_fu_881_p1 + tmp5_2_0_mid2_reg_1257);

assign add_ln35_fu_688_p2 = (zext_ln35_12_fu_684_p1 + tmp5_0_0_mid2_fu_555_p3);

assign add_ln41_1_fu_970_p2 = (trunc_ln41_1_reg_1336 + trunc_ln_reg_1326);

assign add_ln41_2_fu_1010_p2 = (trunc_ln41_3_reg_1371 + trunc_ln41_2_reg_1361);

assign add_ln41_3_fu_1014_p2 = (add_ln41_1_reg_1391 + add_ln41_2_fu_1010_p2);

assign add_ln41_4_fu_1045_p2 = (trunc_ln41_5_reg_1406 + trunc_ln41_4_reg_1401);

assign add_ln41_5_fu_1062_p2 = (trunc_ln41_8_reg_1436 + trunc_ln41_7_reg_1426);

assign add_ln41_6_fu_1066_p2 = (trunc_ln41_6_reg_1421 + add_ln41_5_fu_1062_p2);

assign add_ln41_7_fu_1071_p2 = (add_ln41_4_reg_1431 + add_ln41_6_fu_1066_p2);

assign add_ln41_8_fu_1076_p2 = (add_ln41_3_reg_1416 + add_ln41_7_fu_1071_p2);

assign add_ln41_fu_728_p2 = (zext_ln35_12_fu_684_p1 + tmp7_mid2_fu_677_p3);

assign and_ln35_fu_425_p2 = (xor_ln35_fu_413_p2 & icmp_ln24_fu_419_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_54_fu_515_p2 = (icmp_ln23_reg_1184 | and_ln35_reg_1203);

assign icmp_ln23_fu_399_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_203_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_419_p2 = ((ap_phi_mux_out_w_0_phi_fu_225_p4 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_387_p2 = ((ap_phi_mux_indvar_flatten71_phi_fu_180_p4 == 10'd784) ? 1'b1 : 1'b0);

assign mul_ln35_4_fu_1117_p0 = sext_ln35_3_reg_1320;

assign mul_ln35_5_fu_1123_p0 = sext_ln35_6_reg_1331;

assign mul_ln35_6_fu_1129_p0 = sext_ln35_9_reg_1356;

assign mul_ln35_7_fu_1135_p0 = sext_ln35_12_reg_1366;

assign mul_ln35_8_fu_1141_p0 = sext_ln35_3_reg_1320;

assign out_d_fu_247_p2 = (ap_phi_mux_out_d_0_phi_fu_191_p4 ^ 1'd1);

assign out_h_fu_431_p2 = (5'd1 + select_ln35_fu_405_p3);

assign out_w_0_mid2_fu_519_p3 = ((empty_54_fu_515_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_221);

assign out_w_fu_703_p2 = (5'd1 + out_w_0_mid2_fu_519_p3);

assign output_r_address0 = zext_ln41_fu_1084_p1;

assign output_r_d0 = add_ln41_8_reg_1441;

assign p_shl10_cast_fu_261_p1 = p_shl_fu_253_p3;

assign p_shl10_cast_mid1_fu_534_p1 = p_shl10_mid1_fu_527_p3;

assign p_shl10_mid1_fu_527_p3 = {{out_h_reg_1213}, {5'd0}};

assign p_shl11_cast_fu_273_p1 = p_shl1_fu_265_p3;

assign p_shl11_cast_mid1_fu_545_p1 = p_shl11_mid1_fu_538_p3;

assign p_shl11_mid1_fu_538_p3 = {{out_h_reg_1213}, {1'd0}};

assign p_shl1_fu_265_p3 = {{ap_phi_mux_out_h_0_phi_fu_214_p4}, {1'd0}};

assign p_shl4_cast_fu_365_p1 = p_shl4_fu_357_p3;

assign p_shl4_cast_mid161_ca_fu_484_p1 = tmp_s_fu_477_p3;

assign p_shl4_cast_mid1_fu_655_p1 = p_shl4_mid1_fu_647_p3;

assign p_shl4_fu_357_p3 = {{tmp6_fu_351_p2}, {5'd0}};

assign p_shl4_mid1_fu_647_p3 = {{tmp6_mid1_fu_642_p2}, {5'd0}};

assign p_shl5_cast_fu_377_p1 = p_shl5_fu_369_p3;

assign p_shl5_cast_mid165_ca_fu_495_p1 = tmp_9_fu_488_p3;

assign p_shl5_cast_mid1_fu_667_p1 = p_shl5_mid1_fu_659_p3;

assign p_shl5_fu_369_p3 = {{tmp6_fu_351_p2}, {2'd0}};

assign p_shl5_mid1_fu_659_p3 = {{tmp6_mid1_fu_642_p2}, {2'd0}};

assign p_shl6_fu_325_p3 = {{tmp_2_0_fu_319_p2}, {5'd0}};

assign p_shl6_mid1_fu_609_p3 = {{tmp_2_0_mid1_fu_604_p2}, {5'd0}};

assign p_shl7_cast_fu_341_p1 = p_shl7_fu_333_p3;

assign p_shl7_cast_mid1_fu_625_p1 = p_shl7_mid1_fu_617_p3;

assign p_shl7_fu_333_p3 = {{tmp_2_0_fu_319_p2}, {1'd0}};

assign p_shl7_mid1_fu_617_p3 = {{tmp_2_0_mid1_fu_604_p2}, {1'd0}};

assign p_shl8_cast_fu_297_p1 = p_shl8_fu_289_p3;

assign p_shl8_cast_mid1_fu_575_p1 = p_shl8_mid1_fu_567_p3;

assign p_shl8_fu_289_p3 = {{tmp_1_0_fu_283_p2}, {5'd0}};

assign p_shl8_mid1_fu_567_p3 = {{tmp_1_0_mid1_fu_562_p2}, {5'd0}};

assign p_shl9_cast_fu_309_p1 = p_shl9_fu_301_p3;

assign p_shl9_cast_mid1_fu_587_p1 = p_shl9_mid1_fu_579_p3;

assign p_shl9_fu_301_p3 = {{tmp_1_0_fu_283_p2}, {1'd0}};

assign p_shl9_mid1_fu_579_p3 = {{tmp_1_0_mid1_fu_562_p2}, {1'd0}};

assign p_shl_fu_253_p3 = {{ap_phi_mux_out_h_0_phi_fu_214_p4}, {5'd0}};

assign select_ln23_3_fu_974_p3 = ((icmp_ln23_reg_1184[0:0] === 1'b1) ? 10'd1 : add_ln23_7_reg_1221);

assign select_ln23_fu_873_p3 = ((and_ln35_reg_1203[0:0] === 1'b1) ? out_h_reg_1213 : select_ln35_reg_1196);

assign select_ln35_1_fu_443_p3 = ((icmp_ln23_reg_1184[0:0] === 1'b1) ? out_d_reg_1147 : out_d_0_reg_187);

assign select_ln35_2_fu_453_p3 = ((icmp_ln23_reg_1184[0:0] === 1'b1) ? out_d_0_reg_187 : out_d_reg_1147);

assign select_ln35_4_fu_459_p3 = ((icmp_ln23_reg_1184[0:0] === 1'b1) ? 11'd0 : tmp5_0_0_reg_1155);

assign select_ln35_5_fu_465_p3 = ((icmp_ln23_reg_1184[0:0] === 1'b1) ? 11'd30 : tmp5_1_0_reg_1160);

assign select_ln35_6_fu_471_p3 = ((icmp_ln23_reg_1184[0:0] === 1'b1) ? 10'd60 : tmp5_2_0_reg_1165);

assign select_ln35_7_fu_509_p3 = ((icmp_ln23_reg_1184[0:0] === 1'b1) ? tmp7_mid167_cast_fu_505_p1 : tmp7_reg_1170);

assign select_ln35_fu_405_p3 = ((icmp_ln23_fu_399_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_h_0_phi_fu_214_p4);

assign sext_ln35_10_fu_761_p1 = $signed(add_ln35_5_fu_757_p2);

assign sext_ln35_12_fu_932_p1 = tmp_8_fu_920_p5;

assign sext_ln35_13_fu_843_p1 = $signed(add_ln35_6_reg_1310);

assign sext_ln35_15_fu_851_p1 = $signed(add_ln35_7_reg_1315);

assign sext_ln35_1_fu_694_p1 = $signed(add_ln35_fu_688_p2);

assign sext_ln35_3_fu_801_p1 = tmp_5_fu_789_p5;

assign sext_ln35_4_fu_719_p1 = $signed(add_ln35_2_fu_713_p2);

assign sext_ln35_6_fu_830_p1 = tmp_6_fu_818_p5;

assign sext_ln35_7_fu_748_p1 = $signed(add_ln35_4_fu_743_p2);

assign sext_ln35_9_fu_903_p1 = tmp_7_fu_891_p5;

assign sext_ln41_fu_1081_p1 = $signed(add_ln41_reg_1290_pp0_iter1_reg);

assign tmp5_0_0_fu_277_p2 = (p_shl10_cast_fu_261_p1 - p_shl11_cast_fu_273_p1);

assign tmp5_0_0_mid1_fu_549_p2 = (p_shl10_cast_mid1_fu_534_p1 - p_shl11_cast_mid1_fu_545_p1);

assign tmp5_0_0_mid2_fu_555_p3 = ((and_ln35_reg_1203[0:0] === 1'b1) ? tmp5_0_0_mid1_fu_549_p2 : select_ln35_4_fu_459_p3);

assign tmp5_1_0_fu_313_p2 = (p_shl8_cast_fu_297_p1 - p_shl9_cast_fu_309_p1);

assign tmp5_1_0_mid1_fu_591_p2 = (p_shl8_cast_mid1_fu_575_p1 - p_shl9_cast_mid1_fu_587_p1);

assign tmp5_1_0_mid2_fu_597_p3 = ((and_ln35_reg_1203[0:0] === 1'b1) ? tmp5_1_0_mid1_fu_591_p2 : select_ln35_5_fu_465_p3);

assign tmp5_2_0_fu_345_p2 = (p_shl6_fu_325_p3 - p_shl7_cast_fu_341_p1);

assign tmp5_2_0_mid1_fu_629_p2 = (p_shl6_mid1_fu_609_p3 - p_shl7_cast_mid1_fu_625_p1);

assign tmp5_2_0_mid2_fu_635_p3 = ((and_ln35_reg_1203[0:0] === 1'b1) ? tmp5_2_0_mid1_fu_629_p2 : select_ln35_6_fu_471_p3);

assign tmp6_fu_351_p2 = (zext_ln41_1_fu_243_p1 + ap_phi_mux_out_h_0_phi_fu_214_p4);

assign tmp6_mid1_fu_642_p2 = (out_h_reg_1213 + zext_ln35_25_fu_449_p1);

assign tmp7_fu_381_p2 = (p_shl4_cast_fu_365_p1 - p_shl5_cast_fu_377_p1);

assign tmp7_mid167_cast_fu_505_p1 = $signed(tmp7_mid167_fu_499_p2);

assign tmp7_mid167_fu_499_p2 = (p_shl4_cast_mid161_ca_fu_484_p1 - p_shl5_cast_mid165_ca_fu_495_p1);

assign tmp7_mid1_fu_671_p2 = (p_shl4_cast_mid1_fu_655_p1 - p_shl5_cast_mid1_fu_667_p1);

assign tmp7_mid2_fu_677_p3 = ((and_ln35_reg_1203[0:0] === 1'b1) ? tmp7_mid1_fu_671_p2 : select_ln35_7_fu_509_p3);

assign tmp_1_0_fu_283_p2 = (ap_phi_mux_out_h_0_phi_fu_214_p4 + 5'd1);

assign tmp_1_0_mid1_fu_562_p2 = (5'd2 + select_ln35_reg_1196);

assign tmp_2_0_fu_319_p2 = (ap_phi_mux_out_h_0_phi_fu_214_p4 + 5'd2);

assign tmp_2_0_mid1_fu_604_p2 = (5'd3 + select_ln35_reg_1196);

assign tmp_5_fu_789_p4 = select_ln35_1_reg_1226;

assign tmp_6_fu_818_p4 = select_ln35_2_reg_1233;

assign tmp_7_fu_891_p4 = {{1'd1}, {select_ln35_1_reg_1226}};

assign tmp_8_fu_920_p4 = ((select_ln35_2_reg_1233[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign tmp_9_fu_488_p3 = {{out_d_reg_1147}, {2'd0}};

assign tmp_s_fu_477_p3 = {{out_d_reg_1147}, {5'd0}};

assign xor_ln35_fu_413_p2 = (icmp_ln23_fu_399_p2 ^ 1'd1);

assign zext_ln35_10_fu_960_p1 = add_ln35_9_fu_955_p2;

assign zext_ln35_11_fu_1006_p1 = add_ln35_10_reg_1386;

assign zext_ln35_12_fu_684_p1 = out_w_0_mid2_fu_519_p3;

assign zext_ln35_13_fu_881_p1 = out_w_reg_1274;

assign zext_ln35_14_fu_709_p1 = out_w_fu_703_p2;

assign zext_ln35_15_fu_884_p1 = add_ln35_3_reg_1295;

assign zext_ln35_16_fu_739_p1 = add_ln35_3_fu_734_p2;

assign zext_ln35_25_fu_449_p1 = select_ln35_1_fu_443_p3;

assign zext_ln35_2_fu_878_p1 = out_w_0_mid2_reg_1239;

assign zext_ln35_3_fu_698_p1 = $unsigned(sext_ln35_1_fu_694_p1);

assign zext_ln35_4_fu_723_p1 = $unsigned(sext_ln35_4_fu_719_p1);

assign zext_ln35_5_fu_752_p1 = $unsigned(sext_ln35_7_fu_748_p1);

assign zext_ln35_6_fu_765_p1 = $unsigned(sext_ln35_10_fu_761_p1);

assign zext_ln35_7_fu_846_p1 = $unsigned(sext_ln35_13_fu_843_p1);

assign zext_ln35_8_fu_854_p1 = $unsigned(sext_ln35_15_fu_851_p1);

assign zext_ln35_9_fu_950_p1 = add_ln35_8_fu_945_p2;

assign zext_ln41_1_fu_243_p1 = ap_phi_mux_out_d_0_phi_fu_191_p4;

assign zext_ln41_fu_1084_p1 = $unsigned(sext_ln41_fu_1081_p1);

always @ (posedge ap_clk) begin
    tmp5_0_0_reg_1155[0] <= 1'b0;
    tmp5_1_0_reg_1160[0] <= 1'b0;
    tmp5_2_0_reg_1165[0] <= 1'b0;
    tmp7_reg_1170[1:0] <= 2'b00;
    tmp5_0_0_mid2_reg_1245[0] <= 1'b0;
    tmp5_1_0_mid2_reg_1250[0] <= 1'b0;
    tmp5_2_0_mid2_reg_1257[0] <= 1'b0;
    zext_ln35_12_reg_1264[10:5] <= 6'b000000;
    zext_ln35_14_reg_1280[10:5] <= 6'b000000;
end

endmodule //depthwise_conv2d_fix
