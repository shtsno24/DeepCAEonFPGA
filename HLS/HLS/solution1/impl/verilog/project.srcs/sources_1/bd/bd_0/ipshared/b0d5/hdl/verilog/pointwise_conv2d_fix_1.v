// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] SeparableConv2D_1_b_s_address0;
reg    SeparableConv2D_1_b_s_ce0;
wire   [13:0] SeparableConv2D_1_b_s_q0;
wire   [6:0] SeparableConv2D_1_w_s_address0;
reg    SeparableConv2D_1_w_s_ce0;
wire   [14:0] SeparableConv2D_1_w_s_q0;
wire   [11:0] zext_ln24_fu_231_p1;
reg   [11:0] zext_ln24_reg_494;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln24_fu_235_p2;
reg   [10:0] add_ln24_reg_499;
wire   [3:0] out_d_fu_247_p2;
reg   [3:0] out_d_reg_507;
wire   [0:0] icmp_ln24_fu_241_p2;
wire   [2:0] trunc_ln28_fu_258_p1;
reg   [2:0] trunc_ln28_reg_517;
wire  signed [23:0] sext_ln34_fu_262_p1;
reg  signed [23:0] sext_ln34_reg_522;
wire    ap_CS_fsm_state3;
wire   [6:0] shl_ln_fu_266_p3;
reg   [6:0] shl_ln_reg_527;
wire   [4:0] i_fu_279_p2;
reg   [4:0] i_reg_535;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln26_fu_273_p2;
wire   [3:0] out_h_fu_310_p2;
reg   [3:0] out_h_reg_548;
wire    ap_CS_fsm_state6;
wire   [8:0] sub_ln37_fu_340_p2;
reg   [8:0] sub_ln37_reg_553;
wire   [0:0] icmp_ln31_fu_304_p2;
wire   [3:0] out_w_fu_352_p2;
reg   [3:0] out_w_reg_561;
wire    ap_CS_fsm_state7;
wire  signed [8:0] add_ln37_fu_362_p2;
reg  signed [8:0] add_ln37_reg_566;
wire   [0:0] icmp_ln33_fu_346_p2;
wire  signed [12:0] sext_ln37_fu_367_p1;
reg  signed [12:0] sext_ln37_reg_571;
wire   [4:0] in_d_fu_381_p2;
reg   [4:0] in_d_reg_579;
wire    ap_CS_fsm_state8;
wire   [11:0] add_ln37_8_fu_387_p2;
reg   [11:0] add_ln37_8_reg_584;
wire   [0:0] icmp_ln35_fu_375_p2;
reg  signed [15:0] input_load_reg_594;
wire    ap_CS_fsm_state9;
reg   [17:0] tmp_3_reg_604;
wire    ap_CS_fsm_state10;
wire   [23:0] buffer_fu_481_p2;
wire    ap_CS_fsm_state11;
reg   [3:0] kernel_buffer_1_address0;
reg    kernel_buffer_1_ce0;
reg    kernel_buffer_1_we0;
wire  signed [14:0] kernel_buffer_1_q0;
reg   [3:0] out_d_0_reg_142;
reg   [10:0] phi_mul1_reg_153;
reg   [4:0] i_0_reg_164;
wire    ap_CS_fsm_state5;
reg   [3:0] out_h_0_reg_176;
reg   [3:0] out_w_0_reg_187;
reg   [23:0] buffer_0_reg_198;
reg   [4:0] in_d_0_reg_208;
reg   [11:0] phi_mul_reg_220;
wire   [63:0] zext_ln25_fu_253_p1;
wire   [63:0] zext_ln28_4_fu_294_p1;
wire   [63:0] zext_ln28_fu_299_p1;
wire   [63:0] zext_ln37_5_fu_402_p1;
wire   [63:0] zext_ln43_fu_452_p1;
wire   [63:0] zext_ln37_4_fu_457_p1;
wire   [6:0] zext_ln28_5_fu_285_p1;
wire   [6:0] add_ln28_fu_289_p2;
wire   [7:0] shl_ln3_fu_316_p3;
wire   [4:0] shl_ln37_2_fu_328_p3;
wire   [8:0] zext_ln37_7_fu_324_p1;
wire   [8:0] zext_ln37_8_fu_336_p1;
wire   [8:0] zext_ln35_fu_358_p1;
wire   [12:0] zext_ln35_4_fu_371_p1;
wire   [12:0] add_ln37_1_fu_393_p2;
wire  signed [31:0] sext_ln37_4_fu_398_p1;
wire   [0:0] tmp_fu_407_p3;
wire   [0:0] xor_ln42_fu_419_p2;
wire   [15:0] select_ln42_fu_425_p3;
wire   [15:0] trunc_ln42_fu_415_p1;
wire  signed [11:0] sext_ln43_fu_440_p1;
wire   [11:0] add_ln43_fu_443_p2;
wire  signed [31:0] sext_ln43_2_fu_448_p1;
wire  signed [30:0] mul_ln37_fu_487_p2;
wire  signed [23:0] sext_ln37_6_fu_478_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

pointwise_conv2d_fix_1_SeparableConv2D_1_b_s #(
    .DataWidth( 14 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_1_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_1_b_s_address0),
    .ce0(SeparableConv2D_1_b_s_ce0),
    .q0(SeparableConv2D_1_b_s_q0)
);

pointwise_conv2d_fix_1_SeparableConv2D_1_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
SeparableConv2D_1_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_1_w_s_address0),
    .ce0(SeparableConv2D_1_w_s_ce0),
    .q0(SeparableConv2D_1_w_s_q0)
);

pointwise_conv2d_fix_1_kernel_buffer_1 #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
kernel_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_buffer_1_address0),
    .ce0(kernel_buffer_1_ce0),
    .we0(kernel_buffer_1_we0),
    .d0(SeparableConv2D_1_w_s_q0),
    .q0(kernel_buffer_1_q0)
);

network_mul_mul_16s_15s_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
network_mul_mul_16s_15s_31_1_1_U35(
    .din0(input_load_reg_594),
    .din1(kernel_buffer_1_q0),
    .dout(mul_ln37_fu_487_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        buffer_0_reg_198 <= sext_ln34_reg_522;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buffer_0_reg_198 <= buffer_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_164 <= i_reg_535;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_164 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        in_d_0_reg_208 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        in_d_0_reg_208 <= in_d_reg_579;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_304_p2 == 1'd1))) begin
        out_d_0_reg_142 <= out_d_reg_507;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_142 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_h_0_reg_176 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln33_fu_346_p2 == 1'd1))) begin
        out_h_0_reg_176 <= out_h_reg_548;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        out_w_0_reg_187 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_375_p2 == 1'd1))) begin
        out_w_0_reg_187 <= out_w_reg_561;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_304_p2 == 1'd1))) begin
        phi_mul1_reg_153 <= add_ln24_reg_499;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_153 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul_reg_220 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul_reg_220 <= add_ln37_8_reg_584;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln24_reg_499 <= add_ln24_fu_235_p2;
        out_d_reg_507 <= out_d_fu_247_p2;
        zext_ln24_reg_494[10 : 0] <= zext_ln24_fu_231_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_375_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln37_8_reg_584 <= add_ln37_8_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln37_reg_566 <= add_ln37_fu_362_p2;
        sext_ln37_reg_571 <= sext_ln37_fu_367_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_535 <= i_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_d_reg_579 <= in_d_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_load_reg_594 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_h_reg_548 <= out_h_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_w_reg_561 <= out_w_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln34_reg_522 <= sext_ln34_fu_262_p1;
        shl_ln_reg_527[6 : 4] <= shl_ln_fu_266_p3[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln37_reg_553[8 : 1] <= sub_ln37_fu_340_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_3_reg_604 <= {{mul_ln37_fu_487_p2[30:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln28_reg_517 <= trunc_ln28_fu_258_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_1_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_1_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SeparableConv2D_1_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_1_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln24_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_buffer_1_address0 = zext_ln37_4_fu_457_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_buffer_1_address0 = zext_ln28_fu_299_p1;
    end else begin
        kernel_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        kernel_buffer_1_ce0 = 1'b1;
    end else begin
        kernel_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_buffer_1_we0 = 1'b1;
    end else begin
        kernel_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_375_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln24_fu_241_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln26_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_304_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln33_fu_346_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_375_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_1_b_s_address0 = zext_ln25_fu_253_p1;

assign SeparableConv2D_1_w_s_address0 = zext_ln28_4_fu_294_p1;

assign add_ln24_fu_235_p2 = (phi_mul1_reg_153 + 11'd196);

assign add_ln28_fu_289_p2 = (zext_ln28_5_fu_285_p1 + shl_ln_reg_527);

assign add_ln37_1_fu_393_p2 = ($signed(zext_ln35_4_fu_371_p1) + $signed(sext_ln37_reg_571));

assign add_ln37_8_fu_387_p2 = (phi_mul_reg_220 + 12'd196);

assign add_ln37_fu_362_p2 = (sub_ln37_reg_553 + zext_ln35_fu_358_p1);

assign add_ln43_fu_443_p2 = ($signed(zext_ln24_reg_494) + $signed(sext_ln43_fu_440_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_fu_481_p2 = ($signed(buffer_0_reg_198) + $signed(sext_ln37_6_fu_478_p1));

assign i_fu_279_p2 = (i_0_reg_164 + 5'd1);

assign icmp_ln24_fu_241_p2 = ((out_d_0_reg_142 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_273_p2 = ((i_0_reg_164 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_304_p2 = ((out_h_0_reg_176 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_346_p2 = ((out_w_0_reg_187 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_375_p2 = ((in_d_0_reg_208 == 5'd16) ? 1'b1 : 1'b0);

assign in_d_fu_381_p2 = (in_d_0_reg_208 + 5'd1);

assign input_r_address0 = zext_ln37_5_fu_402_p1;

assign out_d_fu_247_p2 = (out_d_0_reg_142 + 4'd1);

assign out_h_fu_310_p2 = (out_h_0_reg_176 + 4'd1);

assign out_w_fu_352_p2 = (out_w_0_reg_187 + 4'd1);

assign output_r_address0 = zext_ln43_fu_452_p1;

assign output_r_d0 = (trunc_ln42_fu_415_p1 & select_ln42_fu_425_p3);

assign select_ln42_fu_425_p3 = ((xor_ln42_fu_419_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln34_fu_262_p1 = $signed(SeparableConv2D_1_b_s_q0);

assign sext_ln37_4_fu_398_p1 = $signed(add_ln37_1_fu_393_p2);

assign sext_ln37_6_fu_478_p1 = $signed(tmp_3_reg_604);

assign sext_ln37_fu_367_p1 = add_ln37_fu_362_p2;

assign sext_ln43_2_fu_448_p1 = $signed(add_ln43_fu_443_p2);

assign sext_ln43_fu_440_p1 = add_ln37_reg_566;

assign shl_ln37_2_fu_328_p3 = {{out_h_0_reg_176}, {1'd0}};

assign shl_ln3_fu_316_p3 = {{out_h_0_reg_176}, {4'd0}};

assign shl_ln_fu_266_p3 = {{trunc_ln28_reg_517}, {4'd0}};

assign sub_ln37_fu_340_p2 = (zext_ln37_7_fu_324_p1 - zext_ln37_8_fu_336_p1);

assign tmp_fu_407_p3 = buffer_0_reg_198[32'd23];

assign trunc_ln28_fu_258_p1 = out_d_0_reg_142[2:0];

assign trunc_ln42_fu_415_p1 = buffer_0_reg_198[15:0];

assign xor_ln42_fu_419_p2 = (tmp_fu_407_p3 ^ 1'd1);

assign zext_ln24_fu_231_p1 = phi_mul1_reg_153;

assign zext_ln25_fu_253_p1 = out_d_0_reg_142;

assign zext_ln28_4_fu_294_p1 = add_ln28_fu_289_p2;

assign zext_ln28_5_fu_285_p1 = i_0_reg_164;

assign zext_ln28_fu_299_p1 = i_0_reg_164;

assign zext_ln35_4_fu_371_p1 = phi_mul_reg_220;

assign zext_ln35_fu_358_p1 = out_w_0_reg_187;

assign zext_ln37_4_fu_457_p1 = in_d_0_reg_208;

assign zext_ln37_5_fu_402_p1 = $unsigned(sext_ln37_4_fu_398_p1);

assign zext_ln37_7_fu_324_p1 = shl_ln3_fu_316_p3;

assign zext_ln37_8_fu_336_p1 = shl_ln37_2_fu_328_p3;

assign zext_ln43_fu_452_p1 = $unsigned(sext_ln43_2_fu_448_p1);

always @ (posedge ap_clk) begin
    zext_ln24_reg_494[11] <= 1'b0;
    shl_ln_reg_527[3:0] <= 4'b0000;
    sub_ln37_reg_553[0] <= 1'b0;
end

endmodule //pointwise_conv2d_fix_1
