// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] kernel_buffer_address0;
reg    kernel_buffer_ce0;
wire   [14:0] kernel_buffer_q0;
wire   [4:0] i_fu_166_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] out_h_fu_178_p2;
reg   [4:0] out_h_reg_363;
wire    ap_CS_fsm_state3;
wire   [10:0] sub_ln37_fu_208_p2;
reg   [10:0] sub_ln37_reg_368;
wire   [0:0] icmp_ln31_fu_172_p2;
wire   [4:0] out_w_fu_220_p2;
reg   [4:0] out_w_reg_376;
wire    ap_CS_fsm_state4;
wire  signed [10:0] add_ln37_fu_230_p2;
reg  signed [10:0] add_ln37_reg_381;
wire   [0:0] icmp_ln33_fu_214_p2;
wire  signed [14:0] sext_ln37_fu_235_p1;
reg  signed [14:0] sext_ln37_reg_386;
wire   [4:0] in_d_fu_249_p2;
reg   [4:0] in_d_reg_394;
wire    ap_CS_fsm_state5;
wire   [13:0] add_ln37_2_fu_255_p2;
reg   [13:0] add_ln37_2_reg_399;
wire   [0:0] icmp_ln35_fu_243_p2;
reg  signed [15:0] input_load_reg_414;
wire    ap_CS_fsm_state6;
reg  signed [14:0] kernel_buffer_load_reg_419;
reg   [17:0] tmp_1_reg_424;
wire    ap_CS_fsm_state7;
wire   [23:0] buffer_fu_339_p2;
wire    ap_CS_fsm_state8;
reg   [4:0] i_0_reg_93;
wire   [0:0] icmp_ln26_fu_160_p2;
reg   [4:0] out_h_0_reg_104;
reg   [4:0] out_w_0_reg_115;
reg   [23:0] buffer_0_reg_126;
reg   [4:0] in_d_0_reg_138;
reg   [13:0] phi_mul_reg_149;
wire   [63:0] zext_ln37_3_fu_270_p1;
wire   [63:0] zext_ln37_fu_275_p1;
wire   [63:0] zext_ln43_fu_316_p1;
wire   [9:0] shl_ln_fu_184_p3;
wire   [6:0] shl_ln37_4_fu_196_p3;
wire   [10:0] zext_ln37_1_fu_192_p1;
wire   [10:0] zext_ln37_2_fu_204_p1;
wire   [10:0] zext_ln35_fu_226_p1;
wire   [14:0] zext_ln35_1_fu_239_p1;
wire   [14:0] add_ln37_1_fu_261_p2;
wire  signed [31:0] sext_ln37_1_fu_266_p1;
wire   [0:0] tmp_fu_280_p3;
wire   [0:0] xor_ln42_fu_292_p2;
wire   [15:0] select_ln42_fu_298_p3;
wire   [15:0] trunc_ln42_fu_288_p1;
wire  signed [31:0] sext_ln43_fu_313_p1;
wire  signed [30:0] mul_ln37_fu_345_p2;
wire  signed [23:0] sext_ln37_4_fu_336_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

pointwise_conv2d_fix_4_kernel_buffer #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
kernel_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_buffer_address0),
    .ce0(kernel_buffer_ce0),
    .q0(kernel_buffer_q0)
);

network_mul_mul_16s_15s_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
network_mul_mul_16s_15s_31_1_1_U69(
    .din0(input_load_reg_414),
    .din1(kernel_buffer_load_reg_419),
    .dout(mul_ln37_fu_345_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buffer_0_reg_126 <= 24'd16770746;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_0_reg_126 <= buffer_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_93 <= i_fu_166_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_93 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_d_0_reg_138 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        in_d_0_reg_138 <= in_d_reg_394;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_160_p2 == 1'd1))) begin
        out_h_0_reg_104 <= 5'd0;
    end else if (((icmp_ln33_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_h_0_reg_104 <= out_h_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_w_0_reg_115 <= 5'd0;
    end else if (((icmp_ln35_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_w_0_reg_115 <= out_w_reg_376;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_149 <= 14'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_149 <= add_ln37_2_reg_399;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_243_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln37_2_reg_399 <= add_ln37_2_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_214_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln37_reg_381 <= add_ln37_fu_230_p2;
        sext_ln37_reg_386 <= sext_ln37_fu_235_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_d_reg_394 <= in_d_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_load_reg_414 <= input_r_q0;
        kernel_buffer_load_reg_419 <= kernel_buffer_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_363 <= out_h_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_376 <= out_w_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln37_reg_368[10 : 2] <= sub_ln37_fu_208_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_reg_424 <= {{mul_ln37_fu_345_p2[30:13]}};
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_buffer_ce0 = 1'b1;
    end else begin
        kernel_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln26_fu_160_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln31_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln33_fu_214_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln35_fu_243_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_1_fu_261_p2 = ($signed(zext_ln35_1_fu_239_p1) + $signed(sext_ln37_reg_386));

assign add_ln37_2_fu_255_p2 = (phi_mul_reg_149 + 14'd784);

assign add_ln37_fu_230_p2 = (sub_ln37_reg_368 + zext_ln35_fu_226_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign buffer_fu_339_p2 = ($signed(buffer_0_reg_126) + $signed(sext_ln37_4_fu_336_p1));

assign i_fu_166_p2 = (i_0_reg_93 + 5'd1);

assign icmp_ln26_fu_160_p2 = ((i_0_reg_93 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_172_p2 = ((out_h_0_reg_104 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_214_p2 = ((out_w_0_reg_115 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_243_p2 = ((in_d_0_reg_138 == 5'd16) ? 1'b1 : 1'b0);

assign in_d_fu_249_p2 = (in_d_0_reg_138 + 5'd1);

assign input_r_address0 = zext_ln37_3_fu_270_p1;

assign kernel_buffer_address0 = zext_ln37_fu_275_p1;

assign out_h_fu_178_p2 = (out_h_0_reg_104 + 5'd1);

assign out_w_fu_220_p2 = (out_w_0_reg_115 + 5'd1);

assign output_r_address0 = zext_ln43_fu_316_p1;

assign output_r_d0 = (trunc_ln42_fu_288_p1 & select_ln42_fu_298_p3);

assign select_ln42_fu_298_p3 = ((xor_ln42_fu_292_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln37_1_fu_266_p1 = $signed(add_ln37_1_fu_261_p2);

assign sext_ln37_4_fu_336_p1 = $signed(tmp_1_reg_424);

assign sext_ln37_fu_235_p1 = add_ln37_fu_230_p2;

assign sext_ln43_fu_313_p1 = add_ln37_reg_381;

assign shl_ln37_4_fu_196_p3 = {{out_h_0_reg_104}, {2'd0}};

assign shl_ln_fu_184_p3 = {{out_h_0_reg_104}, {5'd0}};

assign sub_ln37_fu_208_p2 = (zext_ln37_1_fu_192_p1 - zext_ln37_2_fu_204_p1);

assign tmp_fu_280_p3 = buffer_0_reg_126[32'd23];

assign trunc_ln42_fu_288_p1 = buffer_0_reg_126[15:0];

assign xor_ln42_fu_292_p2 = (tmp_fu_280_p3 ^ 1'd1);

assign zext_ln35_1_fu_239_p1 = phi_mul_reg_149;

assign zext_ln35_fu_226_p1 = out_w_0_reg_115;

assign zext_ln37_1_fu_192_p1 = shl_ln_fu_184_p3;

assign zext_ln37_2_fu_204_p1 = shl_ln37_4_fu_196_p3;

assign zext_ln37_3_fu_270_p1 = $unsigned(sext_ln37_1_fu_266_p1);

assign zext_ln37_fu_275_p1 = in_d_0_reg_138;

assign zext_ln43_fu_316_p1 = $unsigned(sext_ln43_fu_313_p1);

always @ (posedge ap_clk) begin
    sub_ln37_reg_368[1:0] <= 2'b00;
end

endmodule //pointwise_conv2d_fix_4
