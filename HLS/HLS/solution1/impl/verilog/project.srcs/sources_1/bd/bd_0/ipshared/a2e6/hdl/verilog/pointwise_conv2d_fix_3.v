// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_3_b_s_address0;
reg    SeparableConv2D_3_b_s_ce0;
wire   [13:0] SeparableConv2D_3_b_s_q0;
wire   [6:0] SeparableConv2D_3_w_s_address0;
reg    SeparableConv2D_3_w_s_ce0;
wire   [14:0] SeparableConv2D_3_w_s_q0;
wire   [12:0] zext_ln16_fu_190_p1;
reg   [12:0] zext_ln16_reg_427;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln16_fu_194_p2;
reg   [11:0] add_ln16_reg_432;
wire   [4:0] out_d_fu_206_p2;
reg   [4:0] out_d_reg_440;
wire   [0:0] icmp_ln16_fu_200_p2;
wire   [3:0] trunc_ln23_fu_217_p1;
reg   [3:0] trunc_ln23_reg_450;
wire   [6:0] shl_ln_fu_221_p3;
reg   [6:0] shl_ln_reg_455;
wire    ap_CS_fsm_state3;
wire  signed [15:0] sext_ln19_fu_228_p1;
reg  signed [15:0] sext_ln19_reg_460;
wire   [3:0] out_h_fu_238_p2;
reg   [3:0] out_h_reg_468;
wire    ap_CS_fsm_state4;
wire  signed [8:0] sub_ln23_fu_268_p2;
reg  signed [8:0] sub_ln23_reg_473;
wire   [0:0] icmp_ln17_fu_232_p2;
wire  signed [11:0] sext_ln23_fu_274_p1;
reg  signed [11:0] sext_ln23_reg_478;
wire   [3:0] out_w_fu_284_p2;
reg   [3:0] out_w_reg_486;
wire    ap_CS_fsm_state5;
wire   [8:0] zext_ln20_fu_290_p1;
reg   [8:0] zext_ln20_reg_491;
wire   [0:0] icmp_ln18_fu_278_p2;
wire   [10:0] zext_ln20_2_fu_294_p1;
reg   [10:0] zext_ln20_2_reg_496;
wire   [3:0] in_d_fu_304_p2;
reg   [3:0] in_d_reg_504;
wire    ap_CS_fsm_state6;
wire   [10:0] add_ln23_4_fu_314_p2;
reg   [10:0] add_ln23_4_reg_509;
wire   [0:0] icmp_ln20_fu_298_p2;
reg  signed [15:0] input_load_reg_524;
wire    ap_CS_fsm_state7;
reg  signed [14:0] SeparableConv2D_3_w_3_reg_529;
reg   [15:0] trunc_ln2_reg_534;
wire    ap_CS_fsm_state8;
wire   [15:0] buffer_1_fu_415_p2;
wire    ap_CS_fsm_state9;
reg   [4:0] out_d_0_reg_114;
reg   [11:0] phi_mul1_reg_125;
reg   [3:0] out_h_0_reg_136;
reg   [3:0] out_w_0_reg_147;
reg   [15:0] buffer_0_reg_158;
reg   [3:0] in_d_0_reg_168;
reg   [10:0] phi_mul_reg_179;
wire   [63:0] zext_ln19_fu_212_p1;
wire   [63:0] zext_ln23_8_fu_338_p1;
wire   [63:0] zext_ln23_9_fu_348_p1;
wire   [63:0] zext_ln30_fu_395_p1;
wire   [7:0] shl_ln23_5_fu_244_p3;
wire   [4:0] shl_ln23_6_fu_256_p3;
wire   [8:0] zext_ln23_fu_252_p1;
wire   [8:0] zext_ln23_5_fu_264_p1;
wire   [10:0] add_ln23_fu_320_p2;
wire   [11:0] zext_ln23_7_fu_325_p1;
wire   [11:0] add_ln23_1_fu_329_p2;
wire  signed [31:0] sext_ln23_4_fu_334_p1;
wire   [6:0] zext_ln23_6_fu_310_p1;
wire   [6:0] add_ln23_2_fu_343_p2;
wire   [0:0] tmp_fu_357_p3;
wire   [14:0] trunc_ln20_fu_353_p1;
wire   [14:0] select_ln27_fu_365_p3;
wire   [8:0] add_ln30_fu_378_p2;
wire  signed [12:0] sext_ln30_fu_382_p1;
wire   [12:0] add_ln30_1_fu_386_p2;
wire  signed [31:0] sext_ln30_1_fu_391_p1;
wire  signed [29:0] mul_ln23_fu_420_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

pointwise_conv2d_fix_3_SeparableConv2D_3_b_s #(
    .DataWidth( 14 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_3_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_3_b_s_address0),
    .ce0(SeparableConv2D_3_b_s_ce0),
    .q0(SeparableConv2D_3_b_s_q0)
);

pointwise_conv2d_fix_3_SeparableConv2D_3_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
SeparableConv2D_3_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_3_w_s_address0),
    .ce0(SeparableConv2D_3_w_s_ce0),
    .q0(SeparableConv2D_3_w_s_q0)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U60(
    .din0(input_load_reg_524),
    .din1(SeparableConv2D_3_w_3_reg_529),
    .dout(mul_ln23_fu_420_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_0_reg_158 <= buffer_1_fu_415_p2;
    end else if (((icmp_ln18_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buffer_0_reg_158 <= sext_ln19_reg_460;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        in_d_0_reg_168 <= in_d_reg_504;
    end else if (((icmp_ln18_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_d_0_reg_168 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_0_reg_114 <= out_d_reg_440;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_114 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_278_p2 == 1'd1))) begin
        out_h_0_reg_136 <= out_h_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_136 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_0_reg_147 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_298_p2 == 1'd1))) begin
        out_w_0_reg_147 <= out_w_reg_486;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_125 <= add_ln16_reg_432;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_125 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul_reg_179 <= add_ln23_4_reg_509;
    end else if (((icmp_ln18_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_179 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        SeparableConv2D_3_w_3_reg_529 <= SeparableConv2D_3_w_s_q0;
        input_load_reg_524 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln16_reg_432 <= add_ln16_fu_194_p2;
        out_d_reg_440 <= out_d_fu_206_p2;
        zext_ln16_reg_427[11 : 0] <= zext_ln16_fu_190_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_298_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        add_ln23_4_reg_509 <= add_ln23_4_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_d_reg_504 <= in_d_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_reg_468 <= out_h_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_486 <= out_w_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln19_reg_460 <= sext_ln19_fu_228_p1;
        shl_ln_reg_455[6 : 3] <= shl_ln_fu_221_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        sext_ln23_reg_478[11 : 1] <= sext_ln23_fu_274_p1[11 : 1];
        sub_ln23_reg_473[8 : 1] <= sub_ln23_fu_268_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln23_reg_450 <= trunc_ln23_fu_217_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        trunc_ln2_reg_534 <= {{mul_ln23_fu_420_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        zext_ln20_2_reg_496[3 : 0] <= zext_ln20_2_fu_294_p1[3 : 0];
        zext_ln20_reg_491[3 : 0] <= zext_ln20_fu_290_p1[3 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_3_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_3_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_3_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_3_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln16_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_298_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln17_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_278_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln20_fu_298_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_3_b_s_address0 = zext_ln19_fu_212_p1;

assign SeparableConv2D_3_w_s_address0 = zext_ln23_9_fu_348_p1;

assign add_ln16_fu_194_p2 = (phi_mul1_reg_125 + 12'd196);

assign add_ln23_1_fu_329_p2 = ($signed(zext_ln23_7_fu_325_p1) + $signed(sext_ln23_reg_478));

assign add_ln23_2_fu_343_p2 = (shl_ln_reg_455 + zext_ln23_6_fu_310_p1);

assign add_ln23_4_fu_314_p2 = (phi_mul_reg_179 + 11'd196);

assign add_ln23_fu_320_p2 = (phi_mul_reg_179 + zext_ln20_2_reg_496);

assign add_ln30_1_fu_386_p2 = ($signed(sext_ln30_fu_382_p1) + $signed(zext_ln16_reg_427));

assign add_ln30_fu_378_p2 = ($signed(sub_ln23_reg_473) + $signed(zext_ln20_reg_491));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_1_fu_415_p2 = (trunc_ln2_reg_534 + buffer_0_reg_158);

assign icmp_ln16_fu_200_p2 = ((out_d_0_reg_114 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_232_p2 = ((out_h_0_reg_136 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_278_p2 = ((out_w_0_reg_147 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_298_p2 = ((in_d_0_reg_168 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_304_p2 = (in_d_0_reg_168 + 4'd1);

assign input_r_address0 = zext_ln23_8_fu_338_p1;

assign out_d_fu_206_p2 = (out_d_0_reg_114 + 5'd1);

assign out_h_fu_238_p2 = (out_h_0_reg_136 + 4'd1);

assign out_w_fu_284_p2 = (out_w_0_reg_147 + 4'd1);

assign output_r_address0 = zext_ln30_fu_395_p1;

assign output_r_d0 = select_ln27_fu_365_p3;

assign select_ln27_fu_365_p3 = ((tmp_fu_357_p3[0:0] === 1'b1) ? 15'd0 : trunc_ln20_fu_353_p1);

assign sext_ln19_fu_228_p1 = $signed(SeparableConv2D_3_b_s_q0);

assign sext_ln23_4_fu_334_p1 = $signed(add_ln23_1_fu_329_p2);

assign sext_ln23_fu_274_p1 = sub_ln23_fu_268_p2;

assign sext_ln30_1_fu_391_p1 = $signed(add_ln30_1_fu_386_p2);

assign sext_ln30_fu_382_p1 = $signed(add_ln30_fu_378_p2);

assign shl_ln23_5_fu_244_p3 = {{out_h_0_reg_136}, {4'd0}};

assign shl_ln23_6_fu_256_p3 = {{out_h_0_reg_136}, {1'd0}};

assign shl_ln_fu_221_p3 = {{trunc_ln23_reg_450}, {3'd0}};

assign sub_ln23_fu_268_p2 = (zext_ln23_fu_252_p1 - zext_ln23_5_fu_264_p1);

assign tmp_fu_357_p3 = buffer_0_reg_158[32'd15];

assign trunc_ln20_fu_353_p1 = buffer_0_reg_158[14:0];

assign trunc_ln23_fu_217_p1 = out_d_0_reg_114[3:0];

assign zext_ln16_fu_190_p1 = phi_mul1_reg_125;

assign zext_ln19_fu_212_p1 = out_d_0_reg_114;

assign zext_ln20_2_fu_294_p1 = out_w_0_reg_147;

assign zext_ln20_fu_290_p1 = out_w_0_reg_147;

assign zext_ln23_5_fu_264_p1 = shl_ln23_6_fu_256_p3;

assign zext_ln23_6_fu_310_p1 = in_d_0_reg_168;

assign zext_ln23_7_fu_325_p1 = add_ln23_fu_320_p2;

assign zext_ln23_8_fu_338_p1 = $unsigned(sext_ln23_4_fu_334_p1);

assign zext_ln23_9_fu_348_p1 = add_ln23_2_fu_343_p2;

assign zext_ln23_fu_252_p1 = shl_ln23_5_fu_244_p3;

assign zext_ln30_fu_395_p1 = $unsigned(sext_ln30_1_fu_391_p1);

always @ (posedge ap_clk) begin
    zext_ln16_reg_427[12] <= 1'b0;
    shl_ln_reg_455[2:0] <= 3'b000;
    sub_ln23_reg_473[0] <= 1'b0;
    sext_ln23_reg_478[0] <= 1'b0;
    zext_ln20_reg_491[8:4] <= 5'b00000;
    zext_ln20_2_reg_496[10:4] <= 7'b0000000;
end

endmodule //pointwise_conv2d_fix_3
