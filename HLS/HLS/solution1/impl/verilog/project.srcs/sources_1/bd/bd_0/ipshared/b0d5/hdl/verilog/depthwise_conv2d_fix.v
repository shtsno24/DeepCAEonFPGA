// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] empty_address0;
reg    empty_ce0;
wire   [12:0] empty_q0;
wire   [3:0] i_fu_180_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] out_h_fu_192_p2;
reg   [4:0] out_h_reg_428;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp8_fu_222_p2;
reg   [10:0] tmp8_reg_433;
wire   [0:0] icmp_ln31_fu_186_p2;
wire   [4:0] out_w_fu_234_p2;
reg   [4:0] out_w_reg_441;
wire    ap_CS_fsm_state4;
wire   [10:0] zext_ln35_fu_240_p1;
reg   [10:0] zext_ln35_reg_446;
wire   [0:0] icmp_ln32_fu_228_p2;
wire   [1:0] k_h_fu_250_p2;
reg   [1:0] k_h_reg_454;
wire    ap_CS_fsm_state5;
wire   [4:0] sub_ln37_fu_272_p2;
reg   [4:0] sub_ln37_reg_459;
wire   [0:0] icmp_ln35_fu_244_p2;
wire   [10:0] tmp6_fu_308_p2;
reg   [10:0] tmp6_reg_464;
wire   [1:0] k_w_fu_338_p2;
reg   [1:0] k_w_reg_472;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln36_fu_332_p2;
reg  signed [15:0] input_load_reg_487;
wire    ap_CS_fsm_state7;
reg  signed [12:0] empty_79_reg_492;
reg   [16:0] tmp_7_reg_497;
wire    ap_CS_fsm_state8;
wire   [31:0] buffer_fu_404_p2;
wire    ap_CS_fsm_state9;
reg   [3:0] i_0_reg_93;
wire   [0:0] icmp_ln24_fu_174_p2;
reg   [4:0] out_h_0_reg_104;
reg   [4:0] out_w_0_reg_116;
reg   [31:0] buffer_0_reg_128;
reg   [1:0] k_h_0_reg_140;
reg   [31:0] buffer_1_reg_151;
reg   [1:0] k_w_0_reg_163;
wire   [63:0] zext_ln45_fu_327_p1;
wire   [63:0] zext_ln37_9_fu_367_p1;
wire   [63:0] zext_ln37_8_fu_381_p1;
wire   [9:0] p_shl8_fu_198_p3;
wire   [6:0] p_shl9_fu_210_p3;
wire   [10:0] p_shl8_cast_fu_206_p1;
wire   [10:0] p_shl9_cast_fu_218_p1;
wire   [3:0] shl_ln_fu_260_p3;
wire   [4:0] zext_ln37_22_fu_268_p1;
wire   [4:0] zext_ln37_fu_256_p1;
wire   [4:0] tmp_fu_278_p2;
wire   [9:0] p_shl6_fu_284_p3;
wire   [5:0] p_shl7_fu_296_p3;
wire   [10:0] p_shl6_cast_fu_292_p1;
wire   [10:0] p_shl7_cast_fu_304_p1;
wire   [10:0] add_ln45_fu_319_p2;
wire  signed [31:0] sext_ln45_fu_323_p1;
wire   [4:0] zext_ln37_23_fu_344_p1;
wire   [4:0] add_ln37_fu_348_p2;
wire   [10:0] zext_ln37_24_fu_354_p1;
wire   [10:0] add_ln37_4_fu_358_p2;
wire  signed [31:0] sext_ln37_12_fu_363_p1;
wire   [4:0] add_ln37_5_fu_372_p2;
wire  signed [31:0] sext_ln37_13_fu_377_p1;
wire  signed [29:0] mul_ln37_fu_410_p2;
wire  signed [31:0] sext_ln37_2_fu_401_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

depthwise_conv2d_fix_empty #(
    .DataWidth( 13 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
empty_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(empty_address0),
    .ce0(empty_ce0),
    .q0(empty_q0)
);

network_mul_mul_16s_13s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_13s_30_1_1_U6(
    .din0(input_load_reg_487),
    .din1(empty_79_reg_492),
    .dout(mul_ln37_fu_410_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln36_fu_332_p2 == 1'd1))) begin
        buffer_0_reg_128 <= buffer_1_reg_151;
    end else if (((icmp_ln32_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buffer_0_reg_128 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buffer_1_reg_151 <= buffer_0_reg_128;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_1_reg_151 <= buffer_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_93 <= i_fu_180_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_93 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln36_fu_332_p2 == 1'd1))) begin
        k_h_0_reg_140 <= k_h_reg_454;
    end else if (((icmp_ln32_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_h_0_reg_140 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_w_0_reg_163 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        k_w_0_reg_163 <= k_w_reg_472;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln24_fu_174_p2 == 1'd1))) begin
        out_h_0_reg_104 <= 5'd0;
    end else if (((icmp_ln32_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_h_0_reg_104 <= out_h_reg_428;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_w_0_reg_116 <= 5'd0;
    end else if (((icmp_ln35_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_w_0_reg_116 <= out_w_reg_441;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        empty_79_reg_492 <= empty_q0;
        input_load_reg_487 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_h_reg_454 <= k_h_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_w_reg_472 <= k_w_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_428 <= out_h_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_441 <= out_w_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sub_ln37_reg_459 <= sub_ln37_fu_272_p2;
        tmp6_reg_464[10 : 1] <= tmp6_fu_308_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp8_reg_433[10 : 2] <= tmp8_fu_222_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_7_reg_497 <= {{mul_ln37_fu_410_p2[29:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln35_reg_446[4 : 0] <= zext_ln35_fu_240_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        empty_ce0 = 1'b1;
    end else begin
        empty_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln24_fu_174_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln31_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln32_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln35_fu_244_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln36_fu_332_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_4_fu_358_p2 = (tmp6_reg_464 + zext_ln37_24_fu_354_p1);

assign add_ln37_5_fu_372_p2 = (zext_ln37_23_fu_344_p1 + sub_ln37_reg_459);

assign add_ln37_fu_348_p2 = (out_w_0_reg_116 + zext_ln37_23_fu_344_p1);

assign add_ln45_fu_319_p2 = (tmp8_reg_433 + zext_ln35_reg_446);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_fu_404_p2 = ($signed(buffer_1_reg_151) + $signed(sext_ln37_2_fu_401_p1));

assign empty_address0 = zext_ln37_8_fu_381_p1;

assign i_fu_180_p2 = (i_0_reg_93 + 4'd1);

assign icmp_ln24_fu_174_p2 = ((i_0_reg_93 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_186_p2 = ((out_h_0_reg_104 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_228_p2 = ((out_w_0_reg_116 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_244_p2 = ((k_h_0_reg_140 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_332_p2 = ((k_w_0_reg_163 == 2'd3) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln37_9_fu_367_p1;

assign k_h_fu_250_p2 = (k_h_0_reg_140 + 2'd1);

assign k_w_fu_338_p2 = (k_w_0_reg_163 + 2'd1);

assign out_h_fu_192_p2 = (out_h_0_reg_104 + 5'd1);

assign out_w_fu_234_p2 = (out_w_0_reg_116 + 5'd1);

assign output_r_address0 = zext_ln45_fu_327_p1;

assign output_r_d0 = buffer_0_reg_128[15:0];

assign p_shl6_cast_fu_292_p1 = p_shl6_fu_284_p3;

assign p_shl6_fu_284_p3 = {{tmp_fu_278_p2}, {5'd0}};

assign p_shl7_cast_fu_304_p1 = p_shl7_fu_296_p3;

assign p_shl7_fu_296_p3 = {{tmp_fu_278_p2}, {1'd0}};

assign p_shl8_cast_fu_206_p1 = p_shl8_fu_198_p3;

assign p_shl8_fu_198_p3 = {{out_h_0_reg_104}, {5'd0}};

assign p_shl9_cast_fu_218_p1 = p_shl9_fu_210_p3;

assign p_shl9_fu_210_p3 = {{out_h_0_reg_104}, {2'd0}};

assign sext_ln37_12_fu_363_p1 = $signed(add_ln37_4_fu_358_p2);

assign sext_ln37_13_fu_377_p1 = $signed(add_ln37_5_fu_372_p2);

assign sext_ln37_2_fu_401_p1 = $signed(tmp_7_reg_497);

assign sext_ln45_fu_323_p1 = $signed(add_ln45_fu_319_p2);

assign shl_ln_fu_260_p3 = {{k_h_0_reg_140}, {2'd0}};

assign sub_ln37_fu_272_p2 = (zext_ln37_22_fu_268_p1 - zext_ln37_fu_256_p1);

assign tmp6_fu_308_p2 = (p_shl6_cast_fu_292_p1 - p_shl7_cast_fu_304_p1);

assign tmp8_fu_222_p2 = (p_shl8_cast_fu_206_p1 - p_shl9_cast_fu_218_p1);

assign tmp_fu_278_p2 = (zext_ln37_fu_256_p1 + out_h_0_reg_104);

assign zext_ln35_fu_240_p1 = out_w_0_reg_116;

assign zext_ln37_22_fu_268_p1 = shl_ln_fu_260_p3;

assign zext_ln37_23_fu_344_p1 = k_w_0_reg_163;

assign zext_ln37_24_fu_354_p1 = add_ln37_fu_348_p2;

assign zext_ln37_8_fu_381_p1 = $unsigned(sext_ln37_13_fu_377_p1);

assign zext_ln37_9_fu_367_p1 = $unsigned(sext_ln37_12_fu_363_p1);

assign zext_ln37_fu_256_p1 = k_h_0_reg_140;

assign zext_ln45_fu_327_p1 = $unsigned(sext_ln45_fu_323_p1);

always @ (posedge ap_clk) begin
    tmp8_reg_433[1:0] <= 2'b00;
    zext_ln35_reg_446[10:5] <= 6'b000000;
    tmp6_reg_464[0] <= 1'b0;
end

endmodule //depthwise_conv2d_fix
