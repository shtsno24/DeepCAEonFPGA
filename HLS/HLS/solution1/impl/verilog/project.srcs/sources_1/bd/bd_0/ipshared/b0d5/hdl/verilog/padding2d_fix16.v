// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [6:0] sext_ln5_1_fu_318_p1;
reg  signed [6:0] sext_ln5_1_reg_678;
wire   [4:0] trunc_ln11_fu_322_p1;
reg   [4:0] trunc_ln11_reg_683;
wire   [4:0] add_ln11_fu_326_p2;
reg   [4:0] add_ln11_reg_690;
wire   [11:0] mul_ln11_1_fu_340_p2;
reg   [11:0] mul_ln11_1_reg_695;
wire   [9:0] empty_fu_346_p1;
reg   [9:0] empty_reg_700;
wire   [4:0] trunc_ln11_1_fu_350_p1;
reg   [4:0] trunc_ln11_1_reg_706;
wire   [4:0] empty_39_fu_354_p1;
reg   [4:0] empty_39_reg_711;
wire   [13:0] zext_ln11_fu_361_p1;
reg   [13:0] zext_ln11_reg_716;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln11_2_fu_364_p1;
reg   [13:0] zext_ln11_2_reg_723;
wire   [13:0] mul_ln11_fu_371_p2;
reg   [13:0] mul_ln11_reg_728;
wire   [15:0] zext_ln11_5_fu_377_p1;
reg   [15:0] zext_ln11_5_reg_733;
wire   [4:0] empty_37_fu_380_p2;
wire   [15:0] p_cast8_fu_385_p1;
reg   [15:0] p_cast8_reg_743;
wire   [13:0] p_cast5_fu_397_p1;
wire   [15:0] p_cast4_fu_406_p1;
reg   [15:0] p_cast4_reg_753;
wire   [13:0] zext_ln11_6_fu_425_p1;
reg   [13:0] zext_ln11_6_reg_758;
wire   [13:0] zext_ln11_7_fu_434_p1;
wire   [13:0] zext_ln11_9_fu_453_p1;
wire   [4:0] add_ln11_12_fu_467_p2;
wire   [4:0] add_ln11_13_fu_473_p2;
reg   [4:0] add_ln11_13_reg_779;
wire   [4:0] empty_40_fu_479_p1;
reg   [4:0] empty_40_reg_785;
wire   [13:0] zext_ln11_10_fu_494_p1;
reg   [13:0] zext_ln11_10_reg_790;
wire   [4:0] depth_fu_503_p2;
reg   [4:0] depth_reg_798;
wire    ap_CS_fsm_state3;
wire   [15:0] add_ln17_fu_524_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln13_fu_513_p2;
wire   [13:0] i_count_fu_530_p2;
reg   [13:0] i_count_reg_811;
wire   [15:0] add_ln20_1_fu_540_p2;
reg   [15:0] add_ln20_1_reg_816;
wire   [4:0] height_fu_550_p2;
reg   [4:0] height_reg_825;
wire    ap_CS_fsm_state5;
wire   [13:0] add_ln27_fu_556_p2;
reg   [13:0] add_ln27_reg_830;
wire   [0:0] icmp_ln20_fu_545_p2;
wire   [15:0] add_ln17_2_fu_561_p2;
reg   [15:0] add_ln17_2_reg_835;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_565_p2;
wire   [13:0] add_ln27_1_fu_576_p2;
reg   [13:0] add_ln27_1_reg_848;
wire   [13:0] add_ln17_3_fu_582_p2;
reg   [13:0] add_ln17_3_reg_853;
wire   [13:0] o_count_7_fu_592_p2;
wire    ap_CS_fsm_state7;
wire   [13:0] o_count_8_fu_609_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln31_fu_598_p2;
wire   [13:0] add_ln20_3_fu_615_p2;
wire   [13:0] add_ln20_4_fu_620_p2;
wire   [15:0] o_count_6_fu_640_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln39_fu_629_p2;
wire   [13:0] add_ln11_6_fu_646_p2;
wire   [13:0] add_ln11_7_fu_651_p2;
wire   [13:0] add_ln11_10_fu_656_p2;
wire   [4:0] add_ln11_15_fu_661_p2;
wire   [4:0] add_ln11_16_fu_666_p2;
reg   [4:0] indvars_iv2_reg_128;
reg   [4:0] indvars_iv_reg_138;
reg   [13:0] indvars_iv1_reg_148;
reg   [13:0] phi_ln11_reg_158;
reg   [13:0] indvars_iv10_reg_168;
reg   [15:0] o_count_0_reg_178;
reg   [13:0] i_count_0_reg_190;
reg   [4:0] depth_0_reg_202;
reg   [15:0] o_count_1_reg_213;
wire   [0:0] icmp_ln11_fu_498_p2;
reg   [13:0] phi_ln11_1_reg_223;
reg   [13:0] o_count_reg_234;
reg   [13:0] o_count_2_reg_245;
reg   [13:0] i_count_1_reg_256;
reg   [4:0] height_0_reg_267;
reg   [13:0] o_count_3_reg_278;
reg   [13:0] i_count_2_reg_289;
reg   [13:0] o_count_4_reg_299;
reg   [15:0] o_count_5_reg_309;
wire   [63:0] zext_ln16_fu_519_p1;
wire   [63:0] zext_ln26_fu_571_p1;
wire   [63:0] zext_ln26_1_fu_587_p1;
wire   [63:0] zext_ln34_fu_604_p1;
wire   [63:0] zext_ln42_fu_635_p1;
wire  signed [5:0] sext_ln5_1_fu_318_p0;
wire  signed [5:0] trunc_ln11_fu_322_p0;
wire   [4:0] mul_ln11_1_fu_340_p0;
wire   [6:0] mul_ln11_1_fu_340_p1;
wire  signed [5:0] empty_39_fu_354_p0;
wire  signed [5:0] sext_ln5_fu_358_p0;
wire  signed [6:0] sext_ln5_fu_358_p1;
wire   [6:0] mul_ln11_fu_371_p0;
wire   [6:0] mul_ln11_fu_371_p1;
wire   [4:0] empty_38_fu_401_p2;
wire   [9:0] p_cast6_fu_393_p1;
wire   [9:0] add_ln11_1_fu_414_p2;
wire   [9:0] p_cast3_fu_410_p1;
wire   [9:0] add_ln11_2_fu_419_p2;
wire   [5:0] p_cast7_fu_389_p1;
wire  signed [5:0] add_ln11_3_fu_429_p1;
wire   [5:0] add_ln11_3_fu_429_p2;
wire  signed [5:0] shl_ln11_fu_438_p0;
wire   [5:0] shl_ln11_fu_438_p2;
wire   [5:0] add_ln11_4_fu_447_p2;
wire   [4:0] add_ln11_5_fu_457_p2;
wire   [4:0] add_ln11_11_fu_462_p2;
wire   [9:0] zext_ln11_8_fu_443_p1;
wire   [9:0] add_ln11_8_fu_483_p2;
wire   [9:0] add_ln11_9_fu_488_p2;
wire   [4:0] trunc_ln13_fu_509_p1;
wire   [15:0] add_ln20_fu_535_p2;
wire   [4:0] trunc_ln39_fu_625_p1;
reg   [8:0] ap_NS_fsm;
wire   [11:0] mul_ln11_1_fu_340_p00;
wire   [11:0] mul_ln11_1_fu_340_p10;
wire   [13:0] mul_ln11_fu_371_p00;
wire   [13:0] mul_ln11_fu_371_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_0_reg_202 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
        depth_0_reg_202 <= depth_reg_798;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd1))) begin
        height_0_reg_267 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln31_fu_598_p2 == 1'd1))) begin
        height_0_reg_267 <= height_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_0_reg_190 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
        i_count_0_reg_190 <= i_count_reg_811;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd1))) begin
        i_count_1_reg_256 <= i_count_0_reg_190;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln31_fu_598_p2 == 1'd1))) begin
        i_count_1_reg_256 <= add_ln27_reg_830;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_count_2_reg_289 <= add_ln27_1_reg_848;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_545_p2 == 1'd0))) begin
        i_count_2_reg_289 <= i_count_1_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv10_reg_168 <= p_cast5_fu_397_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
        indvars_iv10_reg_168 <= add_ln11_6_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv1_reg_148 <= zext_ln11_9_fu_453_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
        indvars_iv1_reg_148 <= add_ln11_10_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv2_reg_128 <= empty_37_fu_380_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
        indvars_iv2_reg_128 <= add_ln11_16_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_138 <= add_ln11_12_fu_467_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
        indvars_iv_reg_138 <= add_ln11_15_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_count_0_reg_178 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
        o_count_0_reg_178 <= add_ln17_2_reg_835;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_498_p2 == 1'd0))) begin
        o_count_1_reg_213 <= o_count_0_reg_178;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd0))) begin
        o_count_1_reg_213 <= add_ln17_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd1))) begin
        o_count_2_reg_245 <= indvars_iv10_reg_168;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln31_fu_598_p2 == 1'd1))) begin
        o_count_2_reg_245 <= add_ln17_3_reg_853;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o_count_3_reg_278 <= o_count_7_fu_592_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_545_p2 == 1'd0))) begin
        o_count_3_reg_278 <= o_count_2_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln31_fu_598_p2 == 1'd0))) begin
        o_count_4_reg_299 <= o_count_8_fu_609_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_565_p2 == 1'd1))) begin
        o_count_4_reg_299 <= o_count_reg_234;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd0))) begin
        o_count_5_reg_309 <= o_count_6_fu_640_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_545_p2 == 1'd1))) begin
        o_count_5_reg_309 <= add_ln20_1_reg_816;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd1))) begin
        o_count_reg_234 <= phi_ln11_reg_158;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln31_fu_598_p2 == 1'd1))) begin
        o_count_reg_234 <= add_ln20_3_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd1))) begin
        phi_ln11_1_reg_223 <= indvars_iv1_reg_148;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln31_fu_598_p2 == 1'd1))) begin
        phi_ln11_1_reg_223 <= add_ln20_4_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln11_reg_158 <= zext_ln11_7_fu_434_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
        phi_ln11_reg_158 <= add_ln11_7_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln11_13_reg_779 <= add_ln11_13_fu_473_p2;
        empty_40_reg_785 <= empty_40_fu_479_p1;
        mul_ln11_reg_728 <= mul_ln11_fu_371_p2;
        p_cast4_reg_753[4 : 0] <= p_cast4_fu_406_p1[4 : 0];
        p_cast8_reg_743[4 : 0] <= p_cast8_fu_385_p1[4 : 0];
        zext_ln11_10_reg_790[9 : 0] <= zext_ln11_10_fu_494_p1[9 : 0];
        zext_ln11_2_reg_723[6 : 0] <= zext_ln11_2_fu_364_p1[6 : 0];
        zext_ln11_5_reg_733[11 : 0] <= zext_ln11_5_fu_377_p1[11 : 0];
        zext_ln11_6_reg_758[9 : 0] <= zext_ln11_6_fu_425_p1[9 : 0];
        zext_ln11_reg_716[4 : 0] <= zext_ln11_fu_361_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        add_ln11_reg_690 <= add_ln11_fu_326_p2;
        empty_39_reg_711 <= empty_39_fu_354_p1;
        empty_reg_700 <= empty_fu_346_p1;
        mul_ln11_1_reg_695 <= mul_ln11_1_fu_340_p2;
        sext_ln5_1_reg_678 <= sext_ln5_1_fu_318_p1;
        trunc_ln11_1_reg_706 <= trunc_ln11_1_fu_350_p1;
        trunc_ln11_reg_683 <= trunc_ln11_fu_322_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_545_p2 == 1'd1))) begin
        add_ln17_2_reg_835 <= add_ln17_2_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_565_p2 == 1'd1))) begin
        add_ln17_3_reg_853 <= add_ln17_3_fu_582_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd1))) begin
        add_ln20_1_reg_816 <= add_ln20_1_fu_540_p2;
        i_count_reg_811 <= i_count_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_565_p2 == 1'd0))) begin
        add_ln27_1_reg_848 <= add_ln27_1_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_545_p2 == 1'd0))) begin
        add_ln27_reg_830 <= add_ln27_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_reg_798 <= depth_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        height_reg_825 <= height_fu_550_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_498_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_498_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = zext_ln42_fu_635_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = zext_ln34_fu_604_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = zext_ln26_1_fu_587_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = zext_ln16_fu_519_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (icmp_ln31_fu_598_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_498_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln13_fu_513_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_545_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_565_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln31_fu_598_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln39_fu_629_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_10_fu_656_p2 = (indvars_iv1_reg_148 + zext_ln11_10_reg_790);

assign add_ln11_11_fu_462_p2 = (trunc_ln11_reg_683 + add_ln11_5_fu_457_p2);

assign add_ln11_12_fu_467_p2 = (5'd1 + add_ln11_11_fu_462_p2);

assign add_ln11_13_fu_473_p2 = (add_ln11_5_fu_457_p2 + empty_38_fu_401_p2);

assign add_ln11_15_fu_661_p2 = (add_ln11_13_reg_779 + indvars_iv_reg_138);

assign add_ln11_16_fu_666_p2 = (add_ln11_13_reg_779 + indvars_iv2_reg_128);

assign add_ln11_1_fu_414_p2 = (p_cast6_fu_393_p1 + empty_reg_700);

assign add_ln11_2_fu_419_p2 = (add_ln11_1_fu_414_p2 + p_cast3_fu_410_p1);

assign add_ln11_3_fu_429_p1 = input_width;

assign add_ln11_3_fu_429_p2 = ($signed(p_cast7_fu_389_p1) + $signed(add_ln11_3_fu_429_p1));

assign add_ln11_4_fu_447_p2 = (6'd5 + shl_ln11_fu_438_p2);

assign add_ln11_5_fu_457_p2 = (trunc_ln11_1_reg_706 + empty_37_fu_380_p2);

assign add_ln11_6_fu_646_p2 = (zext_ln11_6_reg_758 + indvars_iv10_reg_168);

assign add_ln11_7_fu_651_p2 = (zext_ln11_6_reg_758 + phi_ln11_reg_158);

assign add_ln11_8_fu_483_p2 = (10'd4 + empty_reg_700);

assign add_ln11_9_fu_488_p2 = (zext_ln11_8_fu_443_p1 + add_ln11_8_fu_483_p2);

assign add_ln11_fu_326_p2 = (5'd2 + trunc_ln11_fu_322_p1);

assign add_ln17_2_fu_561_p2 = (add_ln20_1_reg_816 + p_cast4_reg_753);

assign add_ln17_3_fu_582_p2 = (zext_ln11_reg_716 + o_count_2_reg_245);

assign add_ln17_fu_524_p2 = (o_count_1_reg_213 + 16'd1);

assign add_ln20_1_fu_540_p2 = (add_ln20_fu_535_p2 + zext_ln11_5_reg_733);

assign add_ln20_3_fu_615_p2 = (zext_ln11_reg_716 + o_count_reg_234);

assign add_ln20_4_fu_620_p2 = (zext_ln11_reg_716 + phi_ln11_1_reg_223);

assign add_ln20_fu_535_p2 = (p_cast8_reg_743 + o_count_0_reg_178);

assign add_ln27_1_fu_576_p2 = (i_count_2_reg_289 + 14'd1);

assign add_ln27_fu_556_p2 = (zext_ln11_2_reg_723 + i_count_1_reg_256);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_fu_503_p2 = (depth_0_reg_202 + 5'd1);

assign empty_37_fu_380_p2 = (5'd3 + trunc_ln11_reg_683);

assign empty_38_fu_401_p2 = (5'd1 + trunc_ln11_reg_683);

assign empty_39_fu_354_p0 = input_height;

assign empty_39_fu_354_p1 = empty_39_fu_354_p0[4:0];

assign empty_40_fu_479_p1 = input_depth[4:0];

assign empty_fu_346_p1 = mul_ln11_1_fu_340_p2[9:0];

assign height_fu_550_p2 = (height_0_reg_267 + 5'd1);

assign i_count_fu_530_p2 = (mul_ln11_reg_728 + i_count_0_reg_190);

assign icmp_ln11_fu_498_p2 = ((depth_0_reg_202 == empty_40_reg_785) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_513_p2 = ((trunc_ln13_fu_509_p1 == indvars_iv2_reg_128) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_545_p2 = ((height_0_reg_267 == empty_39_reg_711) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_565_p2 = ((o_count_3_reg_278 == o_count_reg_234) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_598_p2 = ((o_count_4_reg_299 == phi_ln11_1_reg_223) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_629_p2 = ((trunc_ln39_fu_625_p1 == indvars_iv_reg_138) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln26_fu_571_p1;

assign mul_ln11_1_fu_340_p0 = mul_ln11_1_fu_340_p00;

assign mul_ln11_1_fu_340_p00 = add_ln11_fu_326_p2;

assign mul_ln11_1_fu_340_p1 = mul_ln11_1_fu_340_p10;

assign mul_ln11_1_fu_340_p10 = $unsigned(sext_ln5_1_fu_318_p1);

assign mul_ln11_1_fu_340_p2 = (mul_ln11_1_fu_340_p0 * mul_ln11_1_fu_340_p1);

assign mul_ln11_fu_371_p0 = mul_ln11_fu_371_p00;

assign mul_ln11_fu_371_p00 = $unsigned(sext_ln5_fu_358_p1);

assign mul_ln11_fu_371_p1 = mul_ln11_fu_371_p10;

assign mul_ln11_fu_371_p10 = $unsigned(sext_ln5_1_reg_678);

assign mul_ln11_fu_371_p2 = (mul_ln11_fu_371_p0 * mul_ln11_fu_371_p1);

assign o_count_6_fu_640_p2 = (o_count_5_reg_309 + 16'd1);

assign o_count_7_fu_592_p2 = (o_count_3_reg_278 + 14'd1);

assign o_count_8_fu_609_p2 = (o_count_4_reg_299 + 14'd1);

assign p_cast3_fu_410_p1 = empty_38_fu_401_p2;

assign p_cast4_fu_406_p1 = empty_38_fu_401_p2;

assign p_cast5_fu_397_p1 = empty_37_fu_380_p2;

assign p_cast6_fu_393_p1 = empty_37_fu_380_p2;

assign p_cast7_fu_389_p1 = empty_37_fu_380_p2;

assign p_cast8_fu_385_p1 = empty_37_fu_380_p2;

assign sext_ln5_1_fu_318_p0 = input_height;

assign sext_ln5_1_fu_318_p1 = sext_ln5_1_fu_318_p0;

assign sext_ln5_fu_358_p0 = input_width;

assign sext_ln5_fu_358_p1 = sext_ln5_fu_358_p0;

assign shl_ln11_fu_438_p0 = input_width;

assign shl_ln11_fu_438_p2 = shl_ln11_fu_438_p0 << 6'd1;

assign trunc_ln11_1_fu_350_p1 = mul_ln11_1_fu_340_p2[4:0];

assign trunc_ln11_fu_322_p0 = input_width;

assign trunc_ln11_fu_322_p1 = trunc_ln11_fu_322_p0[4:0];

assign trunc_ln13_fu_509_p1 = o_count_1_reg_213[4:0];

assign trunc_ln39_fu_625_p1 = o_count_5_reg_309[4:0];

assign zext_ln11_10_fu_494_p1 = add_ln11_9_fu_488_p2;

assign zext_ln11_2_fu_364_p1 = $unsigned(sext_ln5_fu_358_p1);

assign zext_ln11_5_fu_377_p1 = mul_ln11_1_reg_695;

assign zext_ln11_6_fu_425_p1 = add_ln11_2_fu_419_p2;

assign zext_ln11_7_fu_434_p1 = add_ln11_3_fu_429_p2;

assign zext_ln11_8_fu_443_p1 = shl_ln11_fu_438_p2;

assign zext_ln11_9_fu_453_p1 = add_ln11_4_fu_447_p2;

assign zext_ln11_fu_361_p1 = add_ln11_reg_690;

assign zext_ln16_fu_519_p1 = o_count_1_reg_213;

assign zext_ln26_1_fu_587_p1 = o_count_3_reg_278;

assign zext_ln26_fu_571_p1 = i_count_2_reg_289;

assign zext_ln34_fu_604_p1 = o_count_4_reg_299;

assign zext_ln42_fu_635_p1 = o_count_5_reg_309;

always @ (posedge ap_clk) begin
    zext_ln11_reg_716[13:5] <= 9'b000000000;
    zext_ln11_2_reg_723[13:7] <= 7'b0000000;
    zext_ln11_5_reg_733[15:12] <= 4'b0000;
    p_cast8_reg_743[15:5] <= 11'b00000000000;
    p_cast4_reg_753[15:5] <= 11'b00000000000;
    zext_ln11_6_reg_758[13:10] <= 4'b0000;
    zext_ln11_10_reg_790[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
