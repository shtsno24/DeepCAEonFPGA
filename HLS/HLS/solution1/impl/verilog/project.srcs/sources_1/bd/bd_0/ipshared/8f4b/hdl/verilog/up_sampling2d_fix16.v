// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module up_sampling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state10 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] input_height;
input  [4:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_depth;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [14:0] indvar_flatten31_reg_114;
reg   [4:0] out_d_0_reg_126;
reg   [9:0] indvar_flatten_reg_138;
reg   [4:0] out_h_0_reg_150;
reg   [4:0] out_w_0_reg_162;
wire   [4:0] empty_fu_174_p1;
reg   [4:0] empty_reg_502;
wire   [9:0] mul_ln6_fu_190_p2;
reg   [9:0] mul_ln6_reg_508;
wire   [7:0] zext_ln18_fu_196_p1;
reg   [7:0] zext_ln18_reg_514;
wire    ap_CS_fsm_state2;
wire   [8:0] zext_ln18_1_fu_200_p1;
reg   [8:0] zext_ln18_1_reg_520;
wire   [13:0] zext_ln18_3_cast_fu_203_p1;
reg   [13:0] zext_ln18_3_cast_reg_526;
wire   [11:0] empty_11_fu_210_p1;
reg   [11:0] empty_11_reg_531;
wire   [14:0] mul_ln6_1_fu_472_p2;
reg   [14:0] mul_ln6_1_reg_536;
wire   [0:0] icmp_ln16_fu_221_p2;
reg   [0:0] icmp_ln16_reg_541;
wire   [7:0] mul_ln18_fu_230_p2;
reg   [7:0] mul_ln18_reg_546;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln14_fu_235_p2;
reg   [0:0] icmp_ln14_reg_552;
reg   [0:0] icmp_ln14_reg_552_pp0_iter1_reg;
reg   [0:0] icmp_ln14_reg_552_pp0_iter2_reg;
wire   [4:0] out_d_fu_240_p2;
reg   [4:0] out_d_reg_556;
wire   [0:0] icmp_ln15_fu_246_p2;
reg   [0:0] icmp_ln15_reg_563;
reg   [0:0] icmp_ln15_reg_563_pp0_iter1_reg;
reg   [3:0] lshr_ln_reg_576;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
wire   [14:0] add_ln14_fu_261_p2;
reg   [14:0] add_ln14_reg_581;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln18_fu_267_p3;
reg   [4:0] select_ln18_reg_586;
wire   [7:0] mul_ln18_2_fu_280_p2;
reg   [7:0] mul_ln18_2_reg_591;
wire   [8:0] mul_ln18_3_fu_285_p2;
reg   [8:0] mul_ln18_3_reg_597;
wire   [4:0] select_ln14_fu_290_p3;
reg   [4:0] select_ln14_reg_603;
wire   [4:0] out_h_fu_296_p2;
reg   [4:0] out_h_reg_608;
wire   [9:0] select_ln15_1_fu_308_p3;
reg   [9:0] select_ln15_1_reg_615;
wire   [8:0] mul_ln18_1_fu_319_p2;
reg   [8:0] mul_ln18_1_reg_620;
wire   [0:0] select_ln18_5_fu_348_p3;
reg   [0:0] select_ln18_5_reg_626;
wire   [7:0] select_ln18_7_fu_373_p3;
reg   [7:0] select_ln18_7_reg_632;
wire   [4:0] select_ln15_fu_381_p3;
reg   [4:0] select_ln15_reg_637;
reg    ap_enable_reg_pp0_iter1;
wire   [4:0] select_ln18_6_fu_411_p3;
reg   [4:0] select_ln18_6_reg_642;
wire   [8:0] select_ln18_8_fu_431_p3;
reg   [8:0] select_ln18_8_reg_647;
wire   [11:0] grp_fu_478_p3;
reg   [11:0] add_ln18_reg_652;
wire   [4:0] out_w_fu_452_p2;
reg   [4:0] out_w_reg_657;
wire   [13:0] grp_fu_485_p3;
reg   [13:0] add_ln18_1_reg_667;
reg    ap_enable_reg_pp0_iter2;
reg   [15:0] input_load_reg_672;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter1_state6;
reg    ap_enable_reg_pp0_iter3;
reg   [14:0] ap_phi_mux_indvar_flatten31_phi_fu_118_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_out_d_0_phi_fu_130_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_142_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_154_p4;
wire    ap_block_pp0_stage1;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_166_p4;
wire   [63:0] zext_ln18_6_fu_461_p1;
wire   [63:0] zext_ln18_8_fu_468_p1;
wire   [4:0] empty_9_fu_178_p1;
wire   [4:0] mul_ln6_fu_190_p0;
wire   [4:0] mul_ln6_fu_190_p1;
wire   [4:0] empty_10_fu_206_p1;
wire   [4:0] mul_ln18_fu_230_p0;
wire   [4:0] mul_ln18_fu_230_p1;
wire   [4:0] mul_ln18_2_fu_280_p0;
wire   [4:0] mul_ln18_2_fu_280_p1;
wire   [4:0] mul_ln18_3_fu_285_p0;
wire   [5:0] mul_ln18_3_fu_285_p1;
wire   [9:0] add_ln15_1_fu_302_p2;
wire   [4:0] mul_ln18_1_fu_319_p0;
wire   [5:0] mul_ln18_1_fu_319_p1;
wire   [7:0] zext_ln18_4_fu_324_p1;
wire   [7:0] tmp_fu_327_p2;
wire   [0:0] icmp_ln16_1_fu_343_p2;
wire   [3:0] lshr_ln18_mid1_fu_354_p4;
wire   [7:0] select_ln18_1_fu_332_p3;
wire   [7:0] zext_ln18_11_fu_363_p1;
wire   [7:0] tmp_mid1_fu_367_p2;
wire   [7:0] select_ln18_3_fu_337_p3;
wire   [8:0] zext_ln18_6_cast_fu_387_p1;
wire   [8:0] tmp2_fu_391_p2;
wire   [0:0] or_ln18_fu_407_p2;
wire   [8:0] select_ln18_2_fu_396_p3;
wire   [8:0] zext_ln18_6_cast_mid_fu_419_p1;
wire   [8:0] tmp2_mid1_fu_425_p2;
wire   [8:0] select_ln18_4_fu_401_p3;
wire   [3:0] lshr_ln18_1_fu_438_p4;
wire   [9:0] mul_ln6_1_fu_472_p0;
wire   [4:0] mul_ln6_1_fu_472_p1;
wire   [7:0] grp_fu_478_p0;
wire   [4:0] grp_fu_478_p1;
wire   [3:0] grp_fu_478_p2;
wire   [8:0] grp_fu_485_p0;
wire   [5:0] grp_fu_485_p1;
wire   [4:0] grp_fu_485_p2;
wire    ap_CS_fsm_state10;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_478_p00;
wire   [11:0] grp_fu_478_p20;
wire   [13:0] grp_fu_485_p00;
wire   [13:0] grp_fu_485_p20;
wire   [8:0] mul_ln18_1_fu_319_p00;
wire   [7:0] mul_ln18_2_fu_280_p00;
wire   [8:0] mul_ln18_3_fu_285_p00;
wire   [7:0] mul_ln18_fu_230_p00;
wire   [14:0] mul_ln6_1_fu_472_p00;
wire   [14:0] mul_ln6_1_fu_472_p10;
wire   [9:0] mul_ln6_fu_190_p00;
wire   [9:0] mul_ln6_fu_190_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

network_mul_mul_10ns_5ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
network_mul_mul_10ns_5ns_15_1_1_U97(
    .din0(mul_ln6_1_fu_472_p0),
    .din1(mul_ln6_1_fu_472_p1),
    .dout(mul_ln6_1_fu_472_p2)
);

network_mac_muladd_8ns_5ns_4ns_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
network_mac_muladd_8ns_5ns_4ns_12_1_1_U98(
    .din0(grp_fu_478_p0),
    .din1(grp_fu_478_p1),
    .din2(grp_fu_478_p2),
    .dout(grp_fu_478_p3)
);

network_mac_muladd_9ns_6ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_mac_muladd_9ns_6ns_5ns_14_1_1_U99(
    .din0(grp_fu_485_p0),
    .din1(grp_fu_485_p1),
    .din2(grp_fu_485_p2),
    .dout(grp_fu_485_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((icmp_ln14_reg_552 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state6)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten31_reg_114 <= add_ln14_reg_581;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten31_reg_114 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_138 <= select_ln15_1_reg_615;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_138 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_d_0_reg_126 <= select_ln14_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_d_0_reg_126 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_h_0_reg_150 <= select_ln15_reg_637;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_0_reg_150 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_w_0_reg_162 <= out_w_reg_657;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        out_w_0_reg_162 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln14_reg_581 <= add_ln14_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        add_ln18_1_reg_667 <= grp_fu_485_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln18_reg_652 <= grp_fu_478_p3;
        out_w_reg_657 <= out_w_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_11_reg_531[4 : 0] <= empty_11_fu_210_p1[4 : 0];
        icmp_ln16_reg_541 <= icmp_ln16_fu_221_p2;
        mul_ln6_1_reg_536 <= mul_ln6_1_fu_472_p2;
        zext_ln18_1_reg_520[5 : 0] <= zext_ln18_1_fu_200_p1[5 : 0];
        zext_ln18_3_cast_reg_526[5 : 0] <= zext_ln18_3_cast_fu_203_p1[5 : 0];
        zext_ln18_reg_514[4 : 0] <= zext_ln18_fu_196_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_reg_502 <= empty_fu_174_p1;
        mul_ln6_reg_508 <= mul_ln6_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_552 <= icmp_ln14_fu_235_p2;
        icmp_ln14_reg_552_pp0_iter1_reg <= icmp_ln14_reg_552;
        icmp_ln14_reg_552_pp0_iter2_reg <= icmp_ln14_reg_552_pp0_iter1_reg;
        icmp_ln15_reg_563_pp0_iter1_reg <= icmp_ln15_reg_563;
        mul_ln18_1_reg_620 <= mul_ln18_1_fu_319_p2;
        mul_ln18_reg_546 <= mul_ln18_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln15_reg_563 <= icmp_ln15_fu_246_p2;
        out_d_reg_556 <= out_d_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln14_reg_552_pp0_iter2_reg == 1'd0))) begin
        input_load_reg_672 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln15_reg_563 == 1'd0))) begin
        lshr_ln_reg_576 <= {{ap_phi_mux_out_h_0_phi_fu_154_p4[4:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        mul_ln18_2_reg_591 <= mul_ln18_2_fu_280_p2;
        mul_ln18_3_reg_597 <= mul_ln18_3_fu_285_p2;
        out_h_reg_608 <= out_h_fu_296_p2;
        select_ln18_reg_586 <= select_ln18_fu_267_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln14_reg_603 <= select_ln14_fu_290_p3;
        select_ln15_1_reg_615 <= select_ln15_1_fu_308_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln15_reg_637 <= select_ln15_fu_381_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln18_5_reg_626 <= select_ln18_5_fu_348_p3;
        select_ln18_7_reg_632 <= select_ln18_7_fu_373_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_552_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln18_6_reg_642 <= select_ln18_6_fu_411_p3;
        select_ln18_8_reg_647 <= select_ln18_8_fu_431_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten31_phi_fu_118_p4 = add_ln14_reg_581;
    end else begin
        ap_phi_mux_indvar_flatten31_phi_fu_118_p4 = indvar_flatten31_reg_114;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_142_p4 = select_ln15_1_reg_615;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_142_p4 = indvar_flatten_reg_138;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_552 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_out_d_0_phi_fu_130_p4 = select_ln14_reg_603;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_130_p4 = out_d_0_reg_126;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_552_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_h_0_phi_fu_154_p4 = select_ln15_reg_637;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_154_p4 = out_h_0_reg_150;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_552_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_out_w_0_phi_fu_166_p4 = out_w_reg_657;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_166_p4 = out_w_0_reg_162;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln14_reg_552_pp0_iter2_reg == 1'd0))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_261_p2 = (indvar_flatten31_reg_114 + 15'd1);

assign add_ln15_1_fu_302_p2 = (indvar_flatten_reg_138 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_10_fu_206_p1 = output_depth[4:0];

assign empty_11_fu_210_p1 = input_width;

assign empty_9_fu_178_p1 = output_height[4:0];

assign empty_fu_174_p1 = output_width[4:0];

assign grp_fu_478_p0 = grp_fu_478_p00;

assign grp_fu_478_p00 = select_ln18_7_reg_632;

assign grp_fu_478_p1 = empty_11_reg_531;

assign grp_fu_478_p2 = grp_fu_478_p20;

assign grp_fu_478_p20 = lshr_ln18_1_fu_438_p4;

assign grp_fu_485_p0 = grp_fu_485_p00;

assign grp_fu_485_p00 = select_ln18_8_reg_647;

assign grp_fu_485_p1 = zext_ln18_3_cast_reg_526;

assign grp_fu_485_p2 = grp_fu_485_p20;

assign grp_fu_485_p20 = select_ln18_6_reg_642;

assign icmp_ln14_fu_235_p2 = ((ap_phi_mux_indvar_flatten31_phi_fu_118_p4 == mul_ln6_1_reg_536) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_246_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_142_p4 == mul_ln6_reg_508) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_343_p2 = ((ap_phi_mux_out_w_0_phi_fu_166_p4 == empty_reg_502) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_221_p2 = ((empty_reg_502 == 5'd0) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln18_6_fu_461_p1;

assign lshr_ln18_1_fu_438_p4 = {{select_ln18_6_fu_411_p3[4:1]}};

assign lshr_ln18_mid1_fu_354_p4 = {{out_h_reg_608[4:1]}};

assign mul_ln18_1_fu_319_p0 = mul_ln18_1_fu_319_p00;

assign mul_ln18_1_fu_319_p00 = out_d_0_reg_126;

assign mul_ln18_1_fu_319_p1 = zext_ln18_1_reg_520;

assign mul_ln18_1_fu_319_p2 = (mul_ln18_1_fu_319_p0 * mul_ln18_1_fu_319_p1);

assign mul_ln18_2_fu_280_p0 = mul_ln18_2_fu_280_p00;

assign mul_ln18_2_fu_280_p00 = out_d_reg_556;

assign mul_ln18_2_fu_280_p1 = zext_ln18_reg_514;

assign mul_ln18_2_fu_280_p2 = (mul_ln18_2_fu_280_p0 * mul_ln18_2_fu_280_p1);

assign mul_ln18_3_fu_285_p0 = mul_ln18_3_fu_285_p00;

assign mul_ln18_3_fu_285_p00 = out_d_reg_556;

assign mul_ln18_3_fu_285_p1 = zext_ln18_1_reg_520;

assign mul_ln18_3_fu_285_p2 = (mul_ln18_3_fu_285_p0 * mul_ln18_3_fu_285_p1);

assign mul_ln18_fu_230_p0 = mul_ln18_fu_230_p00;

assign mul_ln18_fu_230_p00 = ap_phi_mux_out_d_0_phi_fu_130_p4;

assign mul_ln18_fu_230_p1 = zext_ln18_reg_514;

assign mul_ln18_fu_230_p2 = (mul_ln18_fu_230_p0 * mul_ln18_fu_230_p1);

assign mul_ln6_1_fu_472_p0 = mul_ln6_1_fu_472_p00;

assign mul_ln6_1_fu_472_p00 = mul_ln6_reg_508;

assign mul_ln6_1_fu_472_p1 = mul_ln6_1_fu_472_p10;

assign mul_ln6_1_fu_472_p10 = empty_10_fu_206_p1;

assign mul_ln6_fu_190_p0 = mul_ln6_fu_190_p00;

assign mul_ln6_fu_190_p00 = empty_fu_174_p1;

assign mul_ln6_fu_190_p1 = mul_ln6_fu_190_p10;

assign mul_ln6_fu_190_p10 = empty_9_fu_178_p1;

assign mul_ln6_fu_190_p2 = (mul_ln6_fu_190_p0 * mul_ln6_fu_190_p1);

assign or_ln18_fu_407_p2 = (select_ln18_5_reg_626 | icmp_ln15_reg_563_pp0_iter1_reg);

assign out_d_fu_240_p2 = (ap_phi_mux_out_d_0_phi_fu_130_p4 + 5'd1);

assign out_h_fu_296_p2 = (select_ln18_fu_267_p3 + 5'd1);

assign out_w_fu_452_p2 = (select_ln18_6_fu_411_p3 + 5'd1);

assign output_r_address0 = zext_ln18_8_fu_468_p1;

assign output_r_d0 = input_load_reg_672;

assign select_ln14_fu_290_p3 = ((icmp_ln15_reg_563[0:0] === 1'b1) ? out_d_reg_556 : out_d_0_reg_126);

assign select_ln15_1_fu_308_p3 = ((icmp_ln15_reg_563[0:0] === 1'b1) ? 10'd1 : add_ln15_1_fu_302_p2);

assign select_ln15_fu_381_p3 = ((select_ln18_5_fu_348_p3[0:0] === 1'b1) ? out_h_reg_608 : select_ln18_reg_586);

assign select_ln18_1_fu_332_p3 = ((icmp_ln15_reg_563[0:0] === 1'b1) ? mul_ln18_2_reg_591 : mul_ln18_reg_546);

assign select_ln18_2_fu_396_p3 = ((icmp_ln15_reg_563_pp0_iter1_reg[0:0] === 1'b1) ? mul_ln18_3_reg_597 : mul_ln18_1_reg_620);

assign select_ln18_3_fu_337_p3 = ((icmp_ln15_reg_563[0:0] === 1'b1) ? mul_ln18_2_reg_591 : tmp_fu_327_p2);

assign select_ln18_4_fu_401_p3 = ((icmp_ln15_reg_563_pp0_iter1_reg[0:0] === 1'b1) ? mul_ln18_3_reg_597 : tmp2_fu_391_p2);

assign select_ln18_5_fu_348_p3 = ((icmp_ln15_reg_563[0:0] === 1'b1) ? icmp_ln16_reg_541 : icmp_ln16_1_fu_343_p2);

assign select_ln18_6_fu_411_p3 = ((or_ln18_fu_407_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_162);

assign select_ln18_7_fu_373_p3 = ((select_ln18_5_fu_348_p3[0:0] === 1'b1) ? tmp_mid1_fu_367_p2 : select_ln18_3_fu_337_p3);

assign select_ln18_8_fu_431_p3 = ((select_ln18_5_reg_626[0:0] === 1'b1) ? tmp2_mid1_fu_425_p2 : select_ln18_4_fu_401_p3);

assign select_ln18_fu_267_p3 = ((icmp_ln15_reg_563[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_h_0_phi_fu_154_p4);

assign tmp2_fu_391_p2 = (mul_ln18_1_reg_620 + zext_ln18_6_cast_fu_387_p1);

assign tmp2_mid1_fu_425_p2 = (select_ln18_2_fu_396_p3 + zext_ln18_6_cast_mid_fu_419_p1);

assign tmp_fu_327_p2 = (mul_ln18_reg_546 + zext_ln18_4_fu_324_p1);

assign tmp_mid1_fu_367_p2 = (select_ln18_1_fu_332_p3 + zext_ln18_11_fu_363_p1);

assign zext_ln18_11_fu_363_p1 = lshr_ln18_mid1_fu_354_p4;

assign zext_ln18_1_fu_200_p1 = output_height;

assign zext_ln18_3_cast_fu_203_p1 = output_width;

assign zext_ln18_4_fu_324_p1 = lshr_ln_reg_576;

assign zext_ln18_6_cast_fu_387_p1 = out_h_0_reg_150;

assign zext_ln18_6_cast_mid_fu_419_p1 = out_h_reg_608;

assign zext_ln18_6_fu_461_p1 = add_ln18_reg_652;

assign zext_ln18_8_fu_468_p1 = add_ln18_1_reg_667;

assign zext_ln18_fu_196_p1 = input_height;

always @ (posedge ap_clk) begin
    zext_ln18_reg_514[7:5] <= 3'b000;
    zext_ln18_1_reg_520[8:6] <= 3'b000;
    zext_ln18_3_cast_reg_526[13:6] <= 8'b00000000;
    empty_11_reg_531[11:5] <= 7'b0000000;
end

endmodule //up_sampling2d_fix16
