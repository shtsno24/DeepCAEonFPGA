-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv11_384 : STD_LOGIC_VECTOR (10 downto 0) := "01110000100";
    constant ap_const_lv7_3D : STD_LOGIC_VECTOR (6 downto 0) := "0111101";
    constant ap_const_lv8_3B : STD_LOGIC_VECTOR (7 downto 0) := "00111011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_110 : STD_LOGIC_VECTOR (8 downto 0) := "100010000";
    constant ap_const_lv9_167 : STD_LOGIC_VECTOR (8 downto 0) := "101100111";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv8_84 : STD_LOGIC_VECTOR (7 downto 0) := "10000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_1E : STD_LOGIC_VECTOR (9 downto 0) := "0000011110";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvars_iv9_cast8_fu_293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv9_cast8_reg_488 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvars_iv1_cast_fu_297_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv1_cast_reg_493 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_cast_fu_301_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_cast_reg_498 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_cast6_fu_305_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal o_count_cast6_reg_503 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_count_cast_fu_309_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_count_cast_reg_508 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv9_cast_fu_313_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv9_cast_reg_513 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_317_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_55_fu_335_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_count_3_fu_341_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_count_3_reg_531 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_57_cast_fu_352_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_57_cast_reg_536 : STD_LOGIC_VECTOR (9 downto 0);
    signal height_1_fu_362_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_1_reg_544 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_59_fu_368_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_59_reg_549 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond7_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_reg_554 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_68_reg_567 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_65_fu_397_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_65_reg_572 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_8_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal o_count_9_fu_425_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond5_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next5_fu_431_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next4_fu_437_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_7_fu_458_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond8_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next_fu_464_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next1_fu_470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next2_fu_476_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvars_iv_next6_fu_482_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv9_reg_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv4_reg_120 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv1_reg_132 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvars_iv_reg_144 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_count_reg_156 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_count_reg_168 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_depth_phi_fu_185_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal depth_reg_180 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_count_1_reg_193 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvars_iv3_reg_202 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_6_reg_212 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_2_reg_222 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_count_1_reg_232 : STD_LOGIC_VECTOR (9 downto 0);
    signal height_reg_242 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_3_reg_253 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_count_2_reg_264 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_4_reg_274 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_5_reg_284 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_54_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal o_count_1_cast_fu_321_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_57_fu_347_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal o_count_5_cast_cast_fu_443_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    depth_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                depth_reg_180 <= ap_const_lv1_0;
            elsif (((exitcond8_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                depth_reg_180 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    height_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                height_reg_242 <= ap_const_lv5_0;
            elsif (((exitcond5_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                height_reg_242 <= height_1_reg_544;
            end if; 
        end if;
    end process;

    i_count_1_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_count_1_reg_232 <= i_count_cast_reg_508;
            elsif (((exitcond5_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_count_1_reg_232 <= tmp_59_reg_549;
            end if; 
        end if;
    end process;

    i_count_2_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_count_2_reg_264 <= tmp_68_reg_567;
            elsif (((exitcond7_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_count_2_reg_264 <= i_count_1_reg_232;
            end if; 
        end if;
    end process;

    i_count_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_count_reg_168 <= ap_const_lv9_0;
            elsif (((exitcond8_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_count_reg_168 <= i_count_3_reg_531;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv1_reg_132 <= ap_const_lv7_3D;
            elsif (((exitcond8_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvars_iv1_reg_132 <= indvars_iv_next2_fu_476_p2;
            end if; 
        end if;
    end process;

    indvars_iv3_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv3_reg_202 <= indvars_iv1_cast_reg_493;
            elsif (((exitcond5_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                indvars_iv3_reg_202 <= indvars_iv_next4_fu_437_p2;
            end if; 
        end if;
    end process;

    indvars_iv4_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv4_reg_120 <= ap_const_lv11_384;
            elsif (((exitcond8_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvars_iv4_reg_120 <= indvars_iv_next6_fu_482_p2;
            end if; 
        end if;
    end process;

    indvars_iv9_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv9_reg_108 <= ap_const_lv8_1F;
            elsif (((exitcond8_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvars_iv9_reg_108 <= indvars_iv_next_fu_464_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_144 <= ap_const_lv8_3B;
            elsif (((exitcond8_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvars_iv_reg_144 <= indvars_iv_next1_fu_470_p2;
            end if; 
        end if;
    end process;

    o_count_1_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_depth_phi_fu_185_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                o_count_1_reg_193 <= tmp_fu_317_p1;
            elsif (((exitcond2_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                o_count_1_reg_193 <= tmp_55_fu_335_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                o_count_2_reg_222 <= indvars_iv9_cast8_reg_488;
            elsif (((exitcond5_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                o_count_2_reg_222 <= tmp_65_reg_572;
            end if; 
        end if;
    end process;

    o_count_3_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                o_count_3_reg_253 <= o_count_8_fu_408_p2;
            elsif (((exitcond7_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                o_count_3_reg_253 <= o_count_2_reg_222;
            end if; 
        end if;
    end process;

    o_count_4_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                o_count_4_reg_274 <= o_count_9_fu_425_p2;
            elsif (((exitcond_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                o_count_4_reg_274 <= o_count_6_reg_212;
            end if; 
        end if;
    end process;

    o_count_5_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_447_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                o_count_5_reg_284 <= o_count_7_fu_458_p2;
            elsif (((exitcond7_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                o_count_5_reg_284 <= tmp_57_cast_reg_536;
            end if; 
        end if;
    end process;

    o_count_6_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                o_count_6_reg_212 <= indvars_iv_cast_reg_498;
            elsif (((exitcond5_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                o_count_6_reg_212 <= indvars_iv_next5_fu_431_p2;
            end if; 
        end if;
    end process;

    o_count_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                o_count_reg_156 <= ap_const_lv8_0;
            elsif (((exitcond8_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                o_count_reg_156 <= tmp_58_reg_554;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                height_1_reg_544 <= height_1_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_count_3_reg_531 <= i_count_3_fu_341_p2;
                tmp_57_cast_reg_536 <= tmp_57_cast_fu_352_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_count_cast_reg_508 <= i_count_cast_fu_309_p1;
                indvars_iv1_cast_reg_493 <= indvars_iv1_cast_fu_297_p1;
                indvars_iv9_cast8_reg_488 <= indvars_iv9_cast8_fu_293_p1;
                    indvars_iv9_cast_reg_513(9 downto 0) <= indvars_iv9_cast_fu_313_p1(9 downto 0);
                indvars_iv_cast_reg_498 <= indvars_iv_cast_fu_301_p1;
                o_count_cast6_reg_503 <= o_count_cast6_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_58_reg_554 <= tmp_58_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_356_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_59_reg_549 <= tmp_59_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_65_reg_572 <= tmp_65_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_380_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_68_reg_567 <= tmp_68_fu_391_p2;
            end if;
        end if;
    end process;
    indvars_iv9_cast_reg_513(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_325_p2, ap_CS_fsm_state4, exitcond7_fu_356_p2, ap_CS_fsm_state5, exitcond_fu_380_p2, ap_CS_fsm_state7, exitcond5_fu_414_p2, ap_CS_fsm_state8, exitcond8_fu_447_p2, ap_phi_mux_depth_phi_fu_185_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_phi_mux_depth_phi_fu_185_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_325_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond7_fu_356_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_fu_380_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((exitcond5_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond8_fu_447_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_phi_mux_depth_phi_fu_185_p4)
    begin
        if ((((ap_phi_mux_depth_phi_fu_185_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_depth_phi_fu_185_p4 <= depth_reg_180;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_phi_mux_depth_phi_fu_185_p4)
    begin
        if (((ap_phi_mux_depth_phi_fu_185_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_325_p2 <= "1" when (o_count_1_cast_fu_321_p1 = indvars_iv9_cast_reg_513) else "0";
    exitcond5_fu_414_p2 <= "1" when (o_count_4_reg_274 = indvars_iv3_reg_202) else "0";
    exitcond7_fu_356_p2 <= "1" when (height_reg_242 = ap_const_lv5_1C) else "0";
    exitcond8_fu_447_p2 <= "1" when (o_count_5_cast_cast_fu_443_p1 = indvars_iv4_reg_120) else "0";
    exitcond_fu_380_p2 <= "1" when (o_count_3_reg_253 = o_count_6_reg_212) else "0";
    height_1_fu_362_p2 <= std_logic_vector(unsigned(height_reg_242) + unsigned(ap_const_lv5_1));
    i_count_3_fu_341_p2 <= std_logic_vector(signed(i_count_reg_168) + signed(ap_const_lv9_110));
        i_count_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_count_reg_168),10));

        indvars_iv1_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv1_reg_132),10));

        indvars_iv9_cast8_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv9_reg_108),10));

    indvars_iv9_cast_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv9_cast8_fu_293_p1),11));
        indvars_iv_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv_reg_144),10));

    indvars_iv_next1_fu_470_p2 <= std_logic_vector(signed(indvars_iv_reg_144) + signed(ap_const_lv8_84));
    indvars_iv_next2_fu_476_p2 <= std_logic_vector(signed(indvars_iv1_reg_132) + signed(ap_const_lv7_4));
    indvars_iv_next4_fu_437_p2 <= std_logic_vector(unsigned(indvars_iv3_reg_202) + unsigned(ap_const_lv10_1E));
    indvars_iv_next5_fu_431_p2 <= std_logic_vector(unsigned(o_count_6_reg_212) + unsigned(ap_const_lv10_1E));
    indvars_iv_next6_fu_482_p2 <= std_logic_vector(unsigned(indvars_iv4_reg_120) + unsigned(ap_const_lv11_384));
    indvars_iv_next_fu_464_p2 <= std_logic_vector(signed(indvars_iv9_reg_108) + signed(ap_const_lv8_84));
    input_r_address0 <= tmp_66_fu_386_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o_count_1_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_193),11));
    o_count_5_cast_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_284),11));
    o_count_7_fu_458_p2 <= std_logic_vector(unsigned(o_count_5_reg_284) + unsigned(ap_const_lv10_1));
    o_count_8_fu_408_p2 <= std_logic_vector(unsigned(o_count_3_reg_253) + unsigned(ap_const_lv10_1));
    o_count_9_fu_425_p2 <= std_logic_vector(unsigned(o_count_4_reg_274) + unsigned(ap_const_lv10_1));
        o_count_cast6_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(o_count_reg_156),9));


    output_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_54_fu_330_p1, tmp_67_fu_403_p1, tmp_69_fu_420_p1, tmp_62_fu_453_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= tmp_62_fu_453_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= tmp_69_fu_420_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= tmp_67_fu_403_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= tmp_54_fu_330_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d0 <= input_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state3, exitcond2_fu_325_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, exitcond5_fu_414_p2, ap_CS_fsm_state8, exitcond8_fu_447_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond2_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((exitcond8_fu_447_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((exitcond5_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_54_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_193),64));
    tmp_55_fu_335_p2 <= std_logic_vector(unsigned(o_count_1_reg_193) + unsigned(ap_const_lv5_1));
        tmp_57_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_fu_347_p2),10));

    tmp_57_fu_347_p2 <= std_logic_vector(signed(o_count_cast6_reg_503) + signed(ap_const_lv9_167));
    tmp_58_fu_374_p2 <= std_logic_vector(signed(o_count_reg_156) + signed(ap_const_lv8_84));
    tmp_59_fu_368_p2 <= std_logic_vector(unsigned(i_count_1_reg_232) + unsigned(ap_const_lv10_1C));
    tmp_62_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_284),64));
    tmp_65_fu_397_p2 <= std_logic_vector(unsigned(o_count_2_reg_222) + unsigned(ap_const_lv10_1E));
    tmp_66_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_264),64));
    tmp_67_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_253),64));
    tmp_68_fu_391_p2 <= std_logic_vector(unsigned(i_count_2_reg_264) + unsigned(ap_const_lv10_1));
    tmp_69_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_4_reg_274),64));
    tmp_fu_317_p1 <= o_count_reg_156(5 - 1 downto 0);
end behav;
