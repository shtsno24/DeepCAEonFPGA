-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_fix16_228 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Padding2D_3_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Padding2D_3_array_ce0 : OUT STD_LOGIC;
    Padding2D_3_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Padding2D_3_array_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Padding2D_3_array_ce1 : OUT STD_LOGIC;
    Padding2D_3_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2d_fix16_228 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Conv2D_3_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Conv2D_3_b_ce0 : STD_LOGIC;
    signal Conv2D_3_b_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Conv2D_3_w_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Conv2D_3_w_ce0 : STD_LOGIC;
    signal Conv2D_3_w_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal Conv2D_3_w_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Conv2D_3_w_ce1 : STD_LOGIC;
    signal Conv2D_3_w_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal Conv2D_3_w_address2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Conv2D_3_w_ce2 : STD_LOGIC;
    signal Conv2D_3_w_q2 : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_374 : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_reg_1104 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul5_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul5_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul2_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_d_3_fu_421_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_3_reg_1129 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond5_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Conv2D_3_b_load_cast_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Conv2D_3_b_load_cast_reg_1139 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_35_fu_436_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_35_reg_1144 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_h_3_fu_445_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_reg_1152 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_111_fu_451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_w_3_fu_470_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_3_reg_1175 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_112_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_112_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr11_reg_1187 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_127_0_1_cast_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_1_cast_reg_1192 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_2_cast_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_2_cast_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_d_1_fu_519_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_1_reg_1209 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal next_mul_fu_529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_reg_1219 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_1225 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp4_1_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_1_reg_1239 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_2_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_2_reg_1244 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp5_1_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_1_reg_1280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_2_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_2_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_1314 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_46_reg_1319 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_128_2_fu_721_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_1_fu_725_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_1_reg_1349 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_2_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_2_reg_1354 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_1359 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_48_reg_1364 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_49_reg_1394 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_50_reg_1399 : STD_LOGIC_VECTOR (14 downto 0);
    signal Conv2D_3_w_load_8_reg_1409 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp6_fu_858_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_reg_1414 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_reg_1419 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_52_reg_1424 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_53_reg_1429 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp2_fu_932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_1434 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp8_fu_956_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_reg_1439 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_tmp_s_fu_994_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_tmp_s_reg_1444 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal out_d_reg_291 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul4_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_h_reg_326 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_reg_337 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal in_d_reg_348 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal phi_mul_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_114_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_121_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_0_1_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_0_1_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_0_2_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_0_2_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_1_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_1_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_2_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_2_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_1_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_1_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_2_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_2_fu_848_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_2_2_fu_966_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_tmp_cast_fu_1002_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Conv2D_3_b_load_cast_fu_432_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_35_fu_436_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_fu_484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_cast_fu_480_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_127_0_1_fu_494_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_127_0_2_fu_504_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_116_fu_525_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_545_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_44_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_0_1_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_0_1_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_1_fu_603_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_2_fu_607_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_0_2_fu_611_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_0_2_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_1_fu_630_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_fu_1006_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_0_1_fu_1013_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_128_1_1_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_1_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_1_2_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_2_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_0_2_fu_1020_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_1_fu_1027_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_132_2_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_2_1_fu_785_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_2_2_fu_795_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_1_1_fu_1034_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_1_2_fu_1041_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_137_0_2_fu_808_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_fu_811_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_852_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_0_1_fu_805_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_135_2_fu_1048_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_2_1_fu_1055_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_2_2_fu_1062_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_123_fu_914_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_1_fu_917_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_2_fu_920_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_1_fu_926_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_2_fu_929_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_fu_944_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_fu_923_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_950_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_fu_938_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_962_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_972_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_115_fu_976_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_fu_986_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_cast_fu_981_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component network_mul_mul_13s_16s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component conv2d_fix16_228_Conv2D_3_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component conv2d_fix16_228_Conv2D_3_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address2 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    Conv2D_3_b_U : component conv2d_fix16_228_Conv2D_3_b
    generic map (
        DataWidth => 12,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv2D_3_b_address0,
        ce0 => Conv2D_3_b_ce0,
        q0 => Conv2D_3_b_q0);

    Conv2D_3_w_U : component conv2d_fix16_228_Conv2D_3_w
    generic map (
        DataWidth => 13,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv2D_3_w_address0,
        ce0 => Conv2D_3_w_ce0,
        q0 => Conv2D_3_w_q0,
        address1 => Conv2D_3_w_address1,
        ce1 => Conv2D_3_w_ce1,
        q1 => Conv2D_3_w_q1,
        address2 => Conv2D_3_w_address2,
        ce2 => Conv2D_3_w_ce2,
        q2 => Conv2D_3_w_q2);

    network_mul_mul_13s_16s_29_1_1_U113 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_374,
        din1 => reg_370,
        dout => tmp_122_fu_1006_p2);

    network_mul_mul_13s_16s_29_1_1_U114 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_382,
        din1 => reg_378,
        dout => tmp_135_0_1_fu_1013_p2);

    network_mul_mul_13s_16s_29_1_1_U115 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_374,
        din1 => reg_370,
        dout => tmp_135_0_2_fu_1020_p2);

    network_mul_mul_13s_16s_29_1_1_U116 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_382,
        din1 => reg_378,
        dout => tmp_135_1_fu_1027_p2);

    network_mul_mul_13s_16s_29_1_1_U117 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_374,
        din1 => reg_370,
        dout => tmp_135_1_1_fu_1034_p2);

    network_mul_mul_13s_16s_29_1_1_U118 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_382,
        din1 => reg_378,
        dout => tmp_135_1_2_fu_1041_p2);

    network_mul_mul_13s_16s_29_1_1_U119 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_374,
        din1 => reg_370,
        dout => tmp_135_2_fu_1048_p2);

    network_mul_mul_13s_16s_29_1_1_U120 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_382,
        din1 => reg_378,
        dout => tmp_135_2_1_fu_1055_p2);

    network_mul_mul_13s_16s_29_1_1_U121 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => Conv2D_3_w_load_8_reg_1409,
        din1 => reg_370,
        dout => tmp_135_2_2_fu_1062_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_d_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                in_d_reg_348 <= in_d_1_reg_1209;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_465_p2 = ap_const_lv1_0))) then 
                in_d_reg_348 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_d_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_440_p2 = ap_const_lv1_1))) then 
                out_d_reg_291 <= out_d_3_reg_1129;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_291 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_h_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_465_p2 = ap_const_lv1_1))) then 
                out_h_reg_326 <= out_h_3_reg_1152;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_reg_326 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_w_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_w_reg_337 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                out_w_reg_337 <= out_w_3_reg_1175;
            end if; 
        end if;
    end process;

    phi_mul1_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_440_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_302 <= next_mul2_reg_1121;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul1_reg_302 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul4_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_440_p2 = ap_const_lv1_1))) then 
                phi_mul4_reg_314 <= next_mul5_reg_1116;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul4_reg_314 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                phi_mul_reg_359 <= next_mul_reg_1214;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_465_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_359 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Conv2D_3_b_load_cast_reg_1139 <= Conv2D_3_b_load_cast_fu_432_p1;
                tmp_35_reg_1144 <= tmp_35_fu_436_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                Conv2D_3_w_load_8_reg_1409 <= Conv2D_3_w_q2;
                tmp6_reg_1414 <= tmp6_fu_858_p2;
                tmp_49_reg_1394 <= tmp_135_1_1_fu_1034_p2(28 downto 14);
                tmp_50_reg_1399 <= tmp_135_1_2_fu_1041_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                in_d_1_reg_1209 <= in_d_1_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul2_reg_1121 <= next_mul2_fu_411_p2;
                next_mul5_reg_1116 <= next_mul5_fu_406_p2;
                out_d_3_reg_1129 <= out_d_3_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_514_p2 = ap_const_lv1_0))) then
                next_mul_reg_1214 <= next_mul_fu_529_p2;
                tmp4_reg_1225 <= tmp4_fu_540_p2;
                tmp_117_reg_1219 <= tmp_117_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_3_reg_1152 <= out_h_3_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_w_3_reg_1175 <= out_w_3_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_465_p2 = ap_const_lv1_0))) then
                output_addr11_reg_1187 <= tmp_114_fu_489_p1(12 - 1 downto 0);
                    tmp_112_reg_1180(15 downto 0) <= tmp_112_fu_476_p1(15 downto 0);
                    tmp_127_0_1_cast_reg_1192(16 downto 0) <= tmp_127_0_1_cast_fu_500_p1(16 downto 0);
                    tmp_127_0_2_cast_reg_1199(16 downto 0) <= tmp_127_0_2_cast_fu_510_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                p_tmp_s_reg_1444 <= p_tmp_s_fu_994_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_370 <= Padding2D_3_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_374 <= Conv2D_3_w_q0;
                reg_378 <= Padding2D_3_array_q1;
                reg_382 <= Conv2D_3_w_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp2_reg_1434 <= tmp2_fu_932_p2;
                tmp8_reg_1439 <= tmp8_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp3_reg_1167 <= tmp3_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp4_1_reg_1239 <= tmp4_1_fu_549_p2;
                tmp4_2_reg_1244 <= tmp4_2_fu_554_p2;
                tmp5_reg_1232 <= tmp5_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp5_1_reg_1280 <= tmp5_1_fu_603_p2;
                tmp5_2_reg_1287 <= tmp5_2_fu_607_p2;
                tmp_118_reg_1249 <= tmp_118_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_105_reg_1094(15 downto 0) <= tmp_105_fu_390_p1(15 downto 0);
                    tmp_106_reg_1099(15 downto 0) <= tmp_106_fu_394_p1(15 downto 0);
                    tmp_107_reg_1104(15 downto 0) <= tmp_107_fu_398_p1(15 downto 0);
                    tmp_108_reg_1111(15 downto 0) <= tmp_108_fu_402_p1(15 downto 0);
                    tmp_s_reg_1089(15 downto 0) <= tmp_s_fu_386_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_440_p2 = ap_const_lv1_0))) then
                    tmp_111_reg_1157(15 downto 0) <= tmp_111_fu_451_p1(15 downto 0);
                tmp_reg_1162 <= tmp_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_128_2_1_reg_1349 <= tmp_128_2_1_fu_725_p2;
                tmp_128_2_2_reg_1354 <= tmp_128_2_2_fu_729_p2;
                tmp_128_2_reg_1344 <= tmp_128_2_fu_721_p2;
                tmp_45_reg_1314 <= tmp_122_fu_1006_p2(28 downto 14);
                tmp_46_reg_1319 <= tmp_135_0_1_fu_1013_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_47_reg_1359 <= tmp_135_0_2_fu_1020_p2(28 downto 14);
                tmp_48_reg_1364 <= tmp_135_1_fu_1027_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_51_reg_1419 <= tmp_135_2_fu_1048_p2(28 downto 14);
                tmp_52_reg_1424 <= tmp_135_2_1_fu_1055_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_53_reg_1429 <= tmp_135_2_2_fu_1062_p2(28 downto 14);
            end if;
        end if;
    end process;
    tmp_s_reg_1089(31 downto 16) <= "0000000000000000";
    tmp_105_reg_1094(31 downto 16) <= "0000000000000000";
    tmp_106_reg_1099(31 downto 16) <= "0000000000000000";
    tmp_107_reg_1104(31 downto 16) <= "0000000000000000";
    tmp_108_reg_1111(31 downto 16) <= "0000000000000000";
    tmp_111_reg_1157(31 downto 16) <= "0000000000000000";
    tmp_112_reg_1180(31 downto 16) <= "0000000000000000";
    tmp_127_0_1_cast_reg_1192(31 downto 17) <= "000000000000000";
    tmp_127_0_2_cast_reg_1199(31 downto 17) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_416_p2, ap_CS_fsm_state4, exitcond4_fu_440_p2, ap_CS_fsm_state6, exitcond3_fu_465_p2, ap_CS_fsm_state7, exitcond2_fu_514_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_416_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_440_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_465_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond2_fu_514_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Conv2D_3_b_address0 <= tmp_110_fu_427_p1(4 - 1 downto 0);

    Conv2D_3_b_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Conv2D_3_b_ce0 <= ap_const_logic_1;
        else 
            Conv2D_3_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Conv2D_3_b_load_cast_fu_432_p0 <= Conv2D_3_b_q0;
        Conv2D_3_b_load_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Conv2D_3_b_load_cast_fu_432_p0),16));


    Conv2D_3_w_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_121_fu_578_p1, tmp_133_0_2_fu_625_p1, tmp_133_1_1_fu_697_p1, tmp_133_2_fu_776_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Conv2D_3_w_address0 <= tmp_133_2_fu_776_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Conv2D_3_w_address0 <= tmp_133_1_1_fu_697_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Conv2D_3_w_address0 <= tmp_133_0_2_fu_625_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Conv2D_3_w_address0 <= tmp_121_fu_578_p1(11 - 1 downto 0);
        else 
            Conv2D_3_w_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Conv2D_3_w_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_133_0_1_fu_598_p1, tmp_133_1_fu_644_p1, tmp_133_1_2_fu_716_p1, tmp_133_2_1_fu_790_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Conv2D_3_w_address1 <= tmp_133_2_1_fu_790_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Conv2D_3_w_address1 <= tmp_133_1_2_fu_716_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Conv2D_3_w_address1 <= tmp_133_1_fu_644_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Conv2D_3_w_address1 <= tmp_133_0_1_fu_598_p1(11 - 1 downto 0);
        else 
            Conv2D_3_w_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;

    Conv2D_3_w_address2 <= tmp_133_2_2_fu_800_p1(11 - 1 downto 0);

    Conv2D_3_w_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Conv2D_3_w_ce0 <= ap_const_logic_1;
        else 
            Conv2D_3_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Conv2D_3_w_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Conv2D_3_w_ce1 <= ap_const_logic_1;
        else 
            Conv2D_3_w_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Conv2D_3_w_ce2_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Conv2D_3_w_ce2 <= ap_const_logic_1;
        else 
            Conv2D_3_w_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_3_array_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state9, tmp_120_fu_573_p1, tmp_129_0_2_fu_615_p1, tmp_129_1_1_fu_687_p1, tmp_129_2_fu_767_p1, tmp_129_2_2_fu_848_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Padding2D_3_array_address0 <= tmp_129_2_2_fu_848_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_3_array_address0 <= tmp_129_2_fu_767_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Padding2D_3_array_address0 <= tmp_129_1_1_fu_687_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Padding2D_3_array_address0 <= tmp_129_0_2_fu_615_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Padding2D_3_array_address0 <= tmp_120_fu_573_p1(11 - 1 downto 0);
        else 
            Padding2D_3_array_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_3_array_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_129_0_1_fu_587_p1, tmp_129_1_fu_634_p1, tmp_129_1_2_fu_706_p1, tmp_129_2_1_fu_781_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_3_array_address1 <= tmp_129_2_1_fu_781_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Padding2D_3_array_address1 <= tmp_129_1_2_fu_706_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Padding2D_3_array_address1 <= tmp_129_1_fu_634_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Padding2D_3_array_address1 <= tmp_129_0_1_fu_587_p1(11 - 1 downto 0);
        else 
            Padding2D_3_array_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_3_array_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            Padding2D_3_array_ce0 <= ap_const_logic_1;
        else 
            Padding2D_3_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_3_array_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Padding2D_3_array_ce1 <= ap_const_logic_1;
        else 
            Padding2D_3_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_416_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_416_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_416_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_416_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_514_p2 <= "1" when (in_d_reg_348 = input_depth) else "0";
    exitcond3_fu_465_p2 <= "1" when (out_w_reg_337 = output_width) else "0";
    exitcond4_fu_440_p2 <= "1" when (out_h_reg_326 = output_height) else "0";
    exitcond5_fu_416_p2 <= "1" when (out_d_reg_291 = output_depth) else "0";
    in_d_1_fu_519_p2 <= std_logic_vector(unsigned(in_d_reg_348) + unsigned(ap_const_lv16_1));
    next_mul2_fu_411_p2 <= std_logic_vector(unsigned(phi_mul1_reg_302) + unsigned(tmp_s_reg_1089));
    next_mul5_fu_406_p2 <= std_logic_vector(unsigned(phi_mul4_reg_314) + unsigned(tmp_108_reg_1111));
    next_mul_fu_529_p2 <= std_logic_vector(unsigned(phi_mul_reg_359) + unsigned(tmp_106_reg_1099));
    out_d_3_fu_421_p2 <= std_logic_vector(unsigned(out_d_reg_291) + unsigned(ap_const_lv16_1));
    out_h_3_fu_445_p2 <= std_logic_vector(unsigned(out_h_reg_326) + unsigned(ap_const_lv16_1));
    out_w_3_fu_470_p2 <= std_logic_vector(unsigned(out_w_reg_337) + unsigned(ap_const_lv16_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state6, output_addr11_reg_1187, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state17, tmp_114_fu_489_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_address0 <= output_addr11_reg_1187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= tmp_114_fu_489_p1(12 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state19, ap_CS_fsm_state17, tmp_138_2_2_fu_966_p2, p_tmp_cast_fu_1002_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_d0 <= p_tmp_cast_fu_1002_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_d0 <= tmp_138_2_2_fu_966_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_465_p2, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_465_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_tmp_cast_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_tmp_s_reg_1444),16));
    p_tmp_s_fu_994_p3 <= 
        ap_const_lv15_0 when (tmp_43_fu_986_p3(0) = '1') else 
        tmp_117_cast_fu_981_p2;
    tmp10_fu_950_p2 <= std_logic_vector(unsigned(tmp11_fu_944_p2) + unsigned(tmp_137_2_fu_923_p1));
    tmp11_fu_944_p2 <= std_logic_vector(signed(tmp_137_2_1_fu_926_p1) + signed(tmp_137_2_2_fu_929_p1));
    tmp1_fu_962_p2 <= std_logic_vector(unsigned(tmp6_reg_1414) + unsigned(tmp2_reg_1434));
    tmp2_fu_932_p2 <= std_logic_vector(unsigned(output_r_q0) + unsigned(tmp_123_fu_914_p1));
    tmp3_fu_461_p1 <= tmp_105_reg_1094(16 - 1 downto 0);
    tmp3_fu_461_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_1162) * signed('0' &tmp3_fu_461_p1))), 32));
    tmp4_1_fu_549_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp4_reg_1225));
    tmp4_2_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp4_reg_1225));
    tmp4_fu_540_p2 <= std_logic_vector(unsigned(phi_mul_reg_359) + unsigned(tmp_111_reg_1157));
    tmp5_1_fu_603_p1 <= tmp_107_reg_1104(16 - 1 downto 0);
    tmp5_1_fu_603_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_1_reg_1239) * signed('0' &tmp5_1_fu_603_p1))), 32));
    tmp5_2_fu_607_p1 <= tmp_107_reg_1104(16 - 1 downto 0);
    tmp5_2_fu_607_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_2_reg_1244) * signed('0' &tmp5_2_fu_607_p1))), 32));
    tmp5_fu_545_p1 <= tmp_107_reg_1104(16 - 1 downto 0);
    tmp5_fu_545_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_reg_1225) * signed('0' &tmp5_fu_545_p1))), 32));
    tmp6_fu_858_p2 <= std_logic_vector(unsigned(tmp7_fu_852_p2) + unsigned(tmp_137_0_1_fu_805_p1));
    tmp7_fu_852_p2 <= std_logic_vector(signed(tmp_137_0_2_fu_808_p1) + signed(tmp_137_1_fu_811_p1));
    tmp8_fu_956_p2 <= std_logic_vector(unsigned(tmp10_fu_950_p2) + unsigned(tmp9_fu_938_p2));
    tmp9_fu_938_p2 <= std_logic_vector(signed(tmp_137_1_1_fu_917_p1) + signed(tmp_137_1_2_fu_920_p1));
    tmp_105_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),32));
    tmp_106_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
    tmp_107_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    tmp_108_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_depth),32));
    tmp_110_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_291),64));
    tmp_111_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_326),32));
    tmp_112_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_337),32));
    tmp_113_fu_484_p2 <= std_logic_vector(unsigned(tmp3_reg_1167) + unsigned(tmp_112_fu_476_p1));
    tmp_114_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_337),17));
        tmp_114_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_113_fu_484_p2),64));

    tmp_115_fu_976_p2 <= std_logic_vector(signed(Conv2D_3_b_load_cast_reg_1139) + signed(output_r_q0));
    tmp_116_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_reg_348),32));
    tmp_117_cast_fu_981_p2 <= std_logic_vector(unsigned(tmp_42_fu_972_p1) + unsigned(tmp_35_reg_1144));
    tmp_117_fu_534_p2 <= std_logic_vector(unsigned(phi_mul4_reg_314) + unsigned(tmp_116_fu_525_p1));
    tmp_118_fu_564_p2 <= std_logic_vector(unsigned(tmp_44_fu_559_p2) + unsigned(tmp_117_reg_1219));
    tmp_119_fu_569_p2 <= std_logic_vector(unsigned(tmp5_reg_1232) + unsigned(tmp_112_reg_1180));
        tmp_120_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_119_fu_569_p2),64));

        tmp_121_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_118_fu_564_p2),64));

        tmp_123_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_45_reg_1314),16));

    tmp_127_0_1_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_0_1_fu_494_p2),32));
    tmp_127_0_1_fu_494_p2 <= std_logic_vector(unsigned(tmp_114_cast_fu_480_p1) + unsigned(ap_const_lv17_1));
    tmp_127_0_2_cast_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_0_2_fu_504_p2),32));
    tmp_127_0_2_fu_504_p2 <= std_logic_vector(unsigned(tmp_114_cast_fu_480_p1) + unsigned(ap_const_lv17_2));
    tmp_128_0_1_fu_583_p2 <= std_logic_vector(unsigned(tmp_127_0_1_cast_reg_1192) + unsigned(tmp5_reg_1232));
    tmp_128_0_2_fu_611_p2 <= std_logic_vector(unsigned(tmp_127_0_2_cast_reg_1199) + unsigned(tmp5_reg_1232));
    tmp_128_1_1_fu_683_p2 <= std_logic_vector(unsigned(tmp_127_0_1_cast_reg_1192) + unsigned(tmp5_1_reg_1280));
    tmp_128_1_2_fu_702_p2 <= std_logic_vector(unsigned(tmp_127_0_2_cast_reg_1199) + unsigned(tmp5_1_reg_1280));
    tmp_128_1_fu_630_p2 <= std_logic_vector(unsigned(tmp5_1_reg_1280) + unsigned(tmp_112_reg_1180));
    tmp_128_2_1_fu_725_p2 <= std_logic_vector(unsigned(tmp_127_0_1_cast_reg_1192) + unsigned(tmp5_2_reg_1287));
    tmp_128_2_2_fu_729_p2 <= std_logic_vector(unsigned(tmp_127_0_2_cast_reg_1199) + unsigned(tmp5_2_reg_1287));
    tmp_128_2_fu_721_p2 <= std_logic_vector(unsigned(tmp5_2_reg_1287) + unsigned(tmp_112_reg_1180));
        tmp_129_0_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_0_1_fu_583_p2),64));

        tmp_129_0_2_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_0_2_fu_611_p2),64));

        tmp_129_1_1_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_1_fu_683_p2),64));

        tmp_129_1_2_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_2_fu_702_p2),64));

        tmp_129_1_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_fu_630_p2),64));

        tmp_129_2_1_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_1_reg_1349),64));

        tmp_129_2_2_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_2_reg_1354),64));

        tmp_129_2_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_reg_1344),64));

    tmp_132_0_1_fu_592_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_118_fu_564_p2));
    tmp_132_0_2_fu_620_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp_118_reg_1249));
    tmp_132_1_1_fu_692_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(tmp_118_reg_1249));
    tmp_132_1_2_fu_711_p2 <= std_logic_vector(unsigned(ap_const_lv32_5) + unsigned(tmp_118_reg_1249));
    tmp_132_1_fu_639_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(tmp_118_reg_1249));
    tmp_132_2_1_fu_785_p2 <= std_logic_vector(unsigned(ap_const_lv32_7) + unsigned(tmp_118_reg_1249));
    tmp_132_2_2_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) + unsigned(tmp_118_reg_1249));
    tmp_132_2_fu_771_p2 <= std_logic_vector(unsigned(ap_const_lv32_6) + unsigned(tmp_118_reg_1249));
        tmp_133_0_1_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_0_1_fu_592_p2),64));

        tmp_133_0_2_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_0_2_fu_620_p2),64));

        tmp_133_1_1_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_1_fu_692_p2),64));

        tmp_133_1_2_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_2_fu_711_p2),64));

        tmp_133_1_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_fu_639_p2),64));

        tmp_133_2_1_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_1_fu_785_p2),64));

        tmp_133_2_2_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_2_fu_795_p2),64));

        tmp_133_2_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_fu_771_p2),64));

        tmp_137_0_1_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_46_reg_1319),16));

        tmp_137_0_2_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_47_reg_1359),16));

        tmp_137_1_1_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_reg_1394),16));

        tmp_137_1_2_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_50_reg_1399),16));

        tmp_137_1_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_48_reg_1364),16));

        tmp_137_2_1_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_52_reg_1424),16));

        tmp_137_2_2_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_53_reg_1429),16));

        tmp_137_2_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_51_reg_1419),16));

    tmp_138_2_2_fu_966_p2 <= std_logic_vector(unsigned(tmp8_reg_1439) + unsigned(tmp1_fu_962_p2));
    tmp_35_fu_436_p0 <= Conv2D_3_b_q0;
        tmp_35_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_436_p0),15));

    tmp_42_fu_972_p1 <= output_r_q0(15 - 1 downto 0);
    tmp_43_fu_986_p3 <= tmp_115_fu_976_p2(15 downto 15);
    tmp_44_fu_559_p2 <= std_logic_vector(shift_left(unsigned(tmp_117_reg_1219),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_fu_455_p2 <= std_logic_vector(unsigned(phi_mul1_reg_302) + unsigned(tmp_111_fu_451_p1));
    tmp_s_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),32));
end behav;
