-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity up_sampling2d_fix16_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    Conv2D_2_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    Conv2D_2_array_ce0 : OUT STD_LOGIC;
    Conv2D_2_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    UpSampling2D_0_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    UpSampling2D_0_array_ce0 : OUT STD_LOGIC;
    UpSampling2D_0_array_we0 : OUT STD_LOGIC;
    UpSampling2D_0_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of up_sampling2d_fix16_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_d_1_fu_175_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_1_reg_326 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_1_fu_186_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_1_reg_334 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_344 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp3_fu_226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_w_1_fu_235_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_1_reg_362 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_d_reg_87 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_reg_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul2_reg_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_h_reg_122 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond3_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_133 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_6_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_fu_192_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_222_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_226_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal div1_fu_241_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_reg_87 <= out_d_1_reg_326;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_87 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_h_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_170_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_122 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_230_p2 = ap_const_lv1_1))) then 
                out_h_reg_122 <= out_h_1_reg_334;
            end if; 
        end if;
    end process;

    out_w_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_reg_133 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                out_w_reg_133 <= out_w_1_reg_362;
            end if; 
        end if;
    end process;

    phi_mul2_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul2_reg_110 <= next_mul3_reg_313;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_110 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_98 <= next_mul_reg_318;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_313 <= next_mul3_fu_160_p2;
                next_mul_reg_318 <= next_mul_fu_165_p2;
                out_d_1_reg_326 <= out_d_1_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_1_reg_334 <= out_h_1_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_1_reg_362 <= out_w_1_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp1_reg_349 <= tmp1_fu_222_p2;
                tmp3_reg_354 <= tmp3_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp2_reg_344 <= tmp2_fu_216_p2;
                tmp_reg_339 <= tmp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_10_reg_372 <= tmp_10_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_1_reg_293(15 downto 0) <= tmp_1_fu_144_p1(15 downto 0);
                    tmp_2_reg_298(15 downto 0) <= tmp_2_fu_148_p1(15 downto 0);
                    tmp_3_reg_303(15 downto 0) <= tmp_3_fu_152_p1(15 downto 0);
                    tmp_4_reg_308(15 downto 0) <= tmp_4_fu_156_p1(15 downto 0);
            end if;
        end if;
    end process;
    tmp_1_reg_293(31 downto 16) <= "0000000000000000";
    tmp_2_reg_298(31 downto 16) <= "0000000000000000";
    tmp_3_reg_303(31 downto 16) <= "0000000000000000";
    tmp_4_reg_308(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_181_p2, ap_CS_fsm_state5, exitcond_fu_230_p2, exitcond3_fu_170_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_181_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_230_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Conv2D_2_array_address0 <= tmp_6_fu_260_p1(9 - 1 downto 0);

    Conv2D_2_array_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Conv2D_2_array_ce0 <= ap_const_logic_1;
        else 
            Conv2D_2_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    UpSampling2D_0_array_address0 <= tmp_11_fu_274_p1(11 - 1 downto 0);

    UpSampling2D_0_array_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            UpSampling2D_0_array_ce0 <= ap_const_logic_1;
        else 
            UpSampling2D_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    UpSampling2D_0_array_d0 <= Conv2D_2_array_q0;

    UpSampling2D_0_array_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            UpSampling2D_0_array_we0 <= ap_const_logic_1;
        else 
            UpSampling2D_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_170_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_170_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_170_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    div1_fu_241_p4 <= out_w_reg_133(15 downto 1);
    div_fu_192_p4 <= out_h_reg_122(15 downto 1);
    exitcond2_fu_181_p2 <= "1" when (out_h_reg_122 = output_height) else "0";
    exitcond3_fu_170_p2 <= "1" when (out_d_reg_87 = output_depth) else "0";
    exitcond_fu_230_p2 <= "1" when (out_w_reg_133 = output_width) else "0";
    next_mul3_fu_160_p2 <= std_logic_vector(unsigned(phi_mul2_reg_110) + unsigned(tmp_3_reg_303));
    next_mul_fu_165_p2 <= std_logic_vector(unsigned(phi_mul_reg_98) + unsigned(tmp_1_reg_293));
    out_d_1_fu_175_p2 <= std_logic_vector(unsigned(out_d_reg_87) + unsigned(ap_const_lv16_1));
    out_h_1_fu_186_p2 <= std_logic_vector(unsigned(out_h_reg_122) + unsigned(ap_const_lv16_1));
    out_w_1_fu_235_p2 <= std_logic_vector(unsigned(out_w_reg_133) + unsigned(ap_const_lv16_1));
    tmp1_fu_222_p0 <= tmp_2_reg_298(16 - 1 downto 0);
    tmp1_fu_222_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp1_fu_222_p0) * signed(tmp_reg_339))), 32));
    tmp2_fu_216_p2 <= std_logic_vector(unsigned(tmp_s_fu_206_p1) + unsigned(phi_mul2_reg_110));
    tmp3_fu_226_p0 <= tmp_4_reg_308(16 - 1 downto 0);
    tmp3_fu_226_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp3_fu_226_p0) * signed(tmp2_reg_344))), 32));
    tmp_10_fu_269_p2 <= std_logic_vector(unsigned(tmp_7_fu_265_p1) + unsigned(tmp3_reg_354));
        tmp_11_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_372),64));

    tmp_1_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
    tmp_2_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    tmp_3_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),32));
    tmp_4_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),32));
    tmp_5_fu_255_p2 <= std_logic_vector(unsigned(tmp_8_fu_251_p1) + unsigned(tmp1_reg_349));
        tmp_6_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_255_p2),64));

    tmp_7_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_133),32));
    tmp_8_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_fu_241_p4),32));
    tmp_9_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_fu_192_p4),32));
    tmp_fu_210_p2 <= std_logic_vector(unsigned(tmp_9_fu_202_p1) + unsigned(phi_mul_reg_98));
    tmp_s_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_122),32));
end behav;
