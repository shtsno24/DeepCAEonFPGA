-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv7_A : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv7_C : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_const_lv7_D : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_const_lv7_E : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv10_C4 : STD_LOGIC_VECTOR (9 downto 0) := "0011000100";
    constant ap_const_lv10_188 : STD_LOGIC_VECTOR (9 downto 0) := "0110001000";
    constant ap_const_lv10_24C : STD_LOGIC_VECTOR (9 downto 0) := "1001001100";
    constant ap_const_lv11_310 : STD_LOGIC_VECTOR (10 downto 0) := "01100010000";
    constant ap_const_lv11_3D4 : STD_LOGIC_VECTOR (10 downto 0) := "01111010100";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_55C : STD_LOGIC_VECTOR (10 downto 0) := "10101011100";
    constant ap_const_lv11_620 : STD_LOGIC_VECTOR (10 downto 0) := "11000100000";
    constant ap_const_lv11_6E4 : STD_LOGIC_VECTOR (10 downto 0) := "11011100100";
    constant ap_const_lv12_7A8 : STD_LOGIC_VECTOR (11 downto 0) := "011110101000";
    constant ap_const_lv12_86C : STD_LOGIC_VECTOR (11 downto 0) := "100001101100";
    constant ap_const_lv12_930 : STD_LOGIC_VECTOR (11 downto 0) := "100100110000";
    constant ap_const_lv12_9F4 : STD_LOGIC_VECTOR (11 downto 0) := "100111110100";
    constant ap_const_lv12_AB8 : STD_LOGIC_VECTOR (11 downto 0) := "101010111000";
    constant ap_const_lv12_B7C : STD_LOGIC_VECTOR (11 downto 0) := "101101111100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv13_C4 : STD_LOGIC_VECTOR (12 downto 0) := "0000011000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_1_b_s_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal SeparableConv2D_1_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_b_s_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal SeparableConv2D_1_w_s_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce1 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address2 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce2 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q2 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address3 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce3 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q3 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address4 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce4 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q4 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address5 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce5 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q5 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address6 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce6 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q6 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address7 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce7 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q7 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address8 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce8 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q8 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address9 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce9 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q9 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address10 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce10 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q10 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address11 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce11 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q11 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address12 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce12 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q12 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address13 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce13 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q13 : STD_LOGIC_VECTOR (14 downto 0);
    signal SeparableConv2D_1_w_s_address14 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_1_w_s_ce14 : STD_LOGIC;
    signal SeparableConv2D_1_w_s_q14 : STD_LOGIC_VECTOR (14 downto 0);
    signal reg_533 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_cast_fu_542_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul_cast_reg_1479 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_546_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_1484 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_d_2_fu_558_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_2_reg_1492 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_573_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_reg_1502 : STD_LOGIC_VECTOR (6 downto 0);
    signal buffer_cast_fu_746_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_cast_reg_1582 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_36_1_cast_fu_750_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_1_cast_reg_1587 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_2_cast_fu_754_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_2_cast_reg_1592 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_3_cast_fu_758_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_3_cast_reg_1597 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_4_cast_fu_762_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_4_cast_reg_1602 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_5_cast_fu_766_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_5_cast_reg_1607 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_6_cast_fu_770_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_6_cast_reg_1612 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_7_cast_fu_774_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_7_cast_reg_1617 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_8_cast_fu_778_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_8_cast_reg_1622 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_9_cast_fu_782_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_9_cast_reg_1627 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_10_cast_fu_786_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_10_cast_reg_1632 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_11_cast_fu_790_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_11_cast_reg_1637 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_12_cast_fu_794_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_12_cast_reg_1642 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_13_cast_fu_798_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_13_cast_reg_1647 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_14_cast_fu_802_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_14_cast_reg_1652 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_cast_fu_806_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_36_cast_reg_1657 : STD_LOGIC_VECTOR (29 downto 0);
    signal out_h_2_fu_816_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_2_reg_1665 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_14_fu_846_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_reg_1670 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_2_fu_858_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_2_reg_1678 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_17_fu_868_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_reg_1683 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_cast_cast_fu_873_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_cast_cast_reg_1691 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_31_1_fu_876_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_1_reg_1696 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_2_fu_882_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_2_reg_1701 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_cast_cast2_fu_888_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_cast_cast2_reg_1706 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_31_3_fu_903_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_3_reg_1725 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_31_4_fu_908_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_4_reg_1730 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_5_fu_922_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_5_reg_1745 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_6_fu_927_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_6_reg_1750 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_7_fu_948_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_7_reg_1775 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_8_fu_953_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_8_reg_1780 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_27_cast_cast3_fu_958_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_cast_cast3_reg_1785 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_9_fu_977_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_9_reg_1815 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_10_fu_982_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_10_reg_1820 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1391_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_1_reg_1825 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1396_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_2_reg_1830 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_31_11_fu_1004_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_11_reg_1855 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_12_fu_1009_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_12_reg_1860 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_1_reg_1865 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_2_reg_1870 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1401_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_3_reg_1875 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1406_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_4_reg_1880 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_31_13_fu_1048_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_13_reg_1905 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_14_fu_1053_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_14_reg_1910 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_4_reg_1915 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1411_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_5_reg_1920 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1416_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_6_reg_1925 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_31_s_fu_1092_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_s_reg_1950 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_1097_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_reg_1955 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_6_reg_1960 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1421_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_7_reg_1965 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1426_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_8_reg_1970 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp5_fu_1132_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_reg_1990 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_8_reg_1995 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1431_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_9_reg_2000 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1436_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_10_reg_2005 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp4_fu_1168_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_2020 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_10_reg_2025 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_1441_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_11_reg_2030 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1446_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_12_reg_2035 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp9_fu_1195_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_reg_2045 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_12_reg_2050 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_1451_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_13_reg_2055 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1456_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_14_reg_2060 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp8_fu_1223_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_reg_2065 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_14_reg_2070 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_1461_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_37_s_reg_2075 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp12_fu_1246_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_reg_2080 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp13_fu_1260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp13_reg_2085 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_27_cast_fu_1265_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_cast_reg_2090 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp7_fu_1272_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_reg_2095 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1291_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_reg_2108 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_d_1_15_fu_1296_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_1_15_reg_2113 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_1302_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_18_reg_2118 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1466_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_reg_2123 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal SeparableConv2D_1_w_33_reg_2138 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_1473_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_25_reg_2153 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp2_fu_1334_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_2158 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_fu_1343_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_2163 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal buffer_2_s_fu_1352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal out_d_reg_468 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_479 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_h_reg_490 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_501 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal buffer1_reg_512 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_reg_522 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_1_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_2_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_3_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_4_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_5_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_6_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_7_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_8_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_9_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_10_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_11_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_12_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_13_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_14_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_s_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_1_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_2_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_3_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_4_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_5_fu_940_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_6_fu_944_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_7_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_8_fu_973_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_9_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_10_fu_1000_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_11_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_12_fu_1044_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_13_fu_1084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_14_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_s_fu_1128_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_1309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_1314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_569_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_34_s_fu_581_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_15_fu_592_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_16_fu_603_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_17_fu_614_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_18_fu_625_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_19_fu_636_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_20_fu_647_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_21_fu_658_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_22_fu_669_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_23_fu_680_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_24_fu_691_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_25_fu_702_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_26_fu_713_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_27_fu_724_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_28_fu_735_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_fu_822_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_834_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_830_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_842_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_cast_fu_864_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_31_1_cast_fu_891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_3_fu_1058_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_5_fu_1102_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_7_fu_1137_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_1163_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_9_fu_1173_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_11_fu_1200_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_1218_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_13_fu_1228_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_s_fu_1251_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_fu_1268_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_cast1_fu_1283_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_30_cast_fu_1306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_1325_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_1339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_1348_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_1362_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_1358_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal buffer_1_fu_1370_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_18_cast_fu_1383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1391_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1396_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1401_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1406_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1411_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1416_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1421_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1426_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1431_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1436_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1441_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1446_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1451_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1456_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1461_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1466_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1466_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1466_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1466_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component network_mul_mul_15s_16s_30_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component network_mac_muladd_5ns_9ns_9s_13_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component network_mul_mul_16s_15s_30_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component pointwise_conv2d_fix_1_SeparableConv2D_1_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component pointwise_conv2d_fix_1_SeparableConv2D_1_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address3 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address4 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address5 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address6 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address7 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address8 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address9 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address10 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address11 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address12 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address13 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address14 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_1_b_s_U : component pointwise_conv2d_fix_1_SeparableConv2D_1_b_s
    generic map (
        DataWidth => 13,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_1_b_s_address0,
        ce0 => SeparableConv2D_1_b_s_ce0,
        q0 => SeparableConv2D_1_b_s_q0);

    SeparableConv2D_1_w_s_U : component pointwise_conv2d_fix_1_SeparableConv2D_1_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_1_w_s_address0,
        ce0 => SeparableConv2D_1_w_s_ce0,
        q0 => SeparableConv2D_1_w_s_q0,
        address1 => SeparableConv2D_1_w_s_address1,
        ce1 => SeparableConv2D_1_w_s_ce1,
        q1 => SeparableConv2D_1_w_s_q1,
        address2 => SeparableConv2D_1_w_s_address2,
        ce2 => SeparableConv2D_1_w_s_ce2,
        q2 => SeparableConv2D_1_w_s_q2,
        address3 => SeparableConv2D_1_w_s_address3,
        ce3 => SeparableConv2D_1_w_s_ce3,
        q3 => SeparableConv2D_1_w_s_q3,
        address4 => SeparableConv2D_1_w_s_address4,
        ce4 => SeparableConv2D_1_w_s_ce4,
        q4 => SeparableConv2D_1_w_s_q4,
        address5 => SeparableConv2D_1_w_s_address5,
        ce5 => SeparableConv2D_1_w_s_ce5,
        q5 => SeparableConv2D_1_w_s_q5,
        address6 => SeparableConv2D_1_w_s_address6,
        ce6 => SeparableConv2D_1_w_s_ce6,
        q6 => SeparableConv2D_1_w_s_q6,
        address7 => SeparableConv2D_1_w_s_address7,
        ce7 => SeparableConv2D_1_w_s_ce7,
        q7 => SeparableConv2D_1_w_s_q7,
        address8 => SeparableConv2D_1_w_s_address8,
        ce8 => SeparableConv2D_1_w_s_ce8,
        q8 => SeparableConv2D_1_w_s_q8,
        address9 => SeparableConv2D_1_w_s_address9,
        ce9 => SeparableConv2D_1_w_s_ce9,
        q9 => SeparableConv2D_1_w_s_q9,
        address10 => SeparableConv2D_1_w_s_address10,
        ce10 => SeparableConv2D_1_w_s_ce10,
        q10 => SeparableConv2D_1_w_s_q10,
        address11 => SeparableConv2D_1_w_s_address11,
        ce11 => SeparableConv2D_1_w_s_ce11,
        q11 => SeparableConv2D_1_w_s_q11,
        address12 => SeparableConv2D_1_w_s_address12,
        ce12 => SeparableConv2D_1_w_s_ce12,
        q12 => SeparableConv2D_1_w_s_q12,
        address13 => SeparableConv2D_1_w_s_address13,
        ce13 => SeparableConv2D_1_w_s_ce13,
        q13 => SeparableConv2D_1_w_s_q13,
        address14 => SeparableConv2D_1_w_s_address14,
        ce14 => SeparableConv2D_1_w_s_ce14,
        q14 => SeparableConv2D_1_w_s_q14);

    network_mul_mul_15s_16s_30_3_1_U104 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1391_p0,
        din1 => reg_533,
        ce => ap_const_logic_1,
        dout => grp_fu_1391_p2);

    network_mul_mul_15s_16s_30_3_1_U105 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1396_p0,
        din1 => reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_1396_p2);

    network_mul_mul_15s_16s_30_3_1_U106 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1401_p0,
        din1 => reg_533,
        ce => ap_const_logic_1,
        dout => grp_fu_1401_p2);

    network_mul_mul_15s_16s_30_3_1_U107 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1406_p0,
        din1 => reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_1406_p2);

    network_mul_mul_15s_16s_30_3_1_U108 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1411_p0,
        din1 => reg_533,
        ce => ap_const_logic_1,
        dout => grp_fu_1411_p2);

    network_mul_mul_15s_16s_30_3_1_U109 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1416_p0,
        din1 => reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_1416_p2);

    network_mul_mul_15s_16s_30_3_1_U110 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1421_p0,
        din1 => reg_533,
        ce => ap_const_logic_1,
        dout => grp_fu_1421_p2);

    network_mul_mul_15s_16s_30_3_1_U111 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1426_p0,
        din1 => reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_1426_p2);

    network_mul_mul_15s_16s_30_3_1_U112 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1431_p0,
        din1 => reg_533,
        ce => ap_const_logic_1,
        dout => grp_fu_1431_p2);

    network_mul_mul_15s_16s_30_3_1_U113 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1436_p0,
        din1 => reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_1436_p2);

    network_mul_mul_15s_16s_30_3_1_U114 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1441_p0,
        din1 => reg_533,
        ce => ap_const_logic_1,
        dout => grp_fu_1441_p2);

    network_mul_mul_15s_16s_30_3_1_U115 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1446_p0,
        din1 => reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_1446_p2);

    network_mul_mul_15s_16s_30_3_1_U116 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1451_p0,
        din1 => reg_533,
        ce => ap_const_logic_1,
        dout => grp_fu_1451_p2);

    network_mul_mul_15s_16s_30_3_1_U117 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1456_p0,
        din1 => reg_538,
        ce => ap_const_logic_1,
        dout => grp_fu_1456_p2);

    network_mul_mul_15s_16s_30_3_1_U118 : component network_mul_mul_15s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1461_p0,
        din1 => reg_533,
        ce => ap_const_logic_1,
        dout => grp_fu_1461_p2);

    network_mac_muladd_5ns_9ns_9s_13_3_1_U119 : component network_mac_muladd_5ns_9ns_9s_13_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 5,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1466_p0,
        din1 => grp_fu_1466_p1,
        din2 => grp_fu_1466_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1466_p3);

    network_mul_mul_16s_15s_30_3_1_U120 : component network_mul_mul_16s_15s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_533,
        din1 => SeparableConv2D_1_w_33_reg_2138,
        ce => ap_const_logic_1,
        dout => grp_fu_1473_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer1_reg_512_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                buffer1_reg_512 <= buffer_2_s_fu_1352_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                buffer1_reg_512 <= buffer_cast_reg_1582;
            end if; 
        end if;
    end process;

    in_d_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                in_d_reg_522 <= in_d_1_15_reg_2113;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                in_d_reg_522 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_d_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_810_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_d_reg_468 <= out_d_2_reg_1492;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_468 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_852_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                out_h_reg_490 <= out_h_2_reg_1665;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_reg_490 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_reg_501_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_810_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_w_reg_501 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                out_w_reg_501 <= out_w_2_reg_1678;
            end if; 
        end if;
    end process;

    phi_mul_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_810_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_479 <= next_mul_reg_1484;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_479 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    reg_533_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                reg_533 <= input_r_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                reg_533 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                SeparableConv2D_1_w_33_reg_2138 <= SeparableConv2D_1_w_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                buffer_cast_reg_1582 <= buffer_cast_fu_746_p1;
                tmp_36_10_cast_reg_1632 <= tmp_36_10_cast_fu_786_p1;
                tmp_36_11_cast_reg_1637 <= tmp_36_11_cast_fu_790_p1;
                tmp_36_12_cast_reg_1642 <= tmp_36_12_cast_fu_794_p1;
                tmp_36_13_cast_reg_1647 <= tmp_36_13_cast_fu_798_p1;
                tmp_36_14_cast_reg_1652 <= tmp_36_14_cast_fu_802_p1;
                tmp_36_1_cast_reg_1587 <= tmp_36_1_cast_fu_750_p1;
                tmp_36_2_cast_reg_1592 <= tmp_36_2_cast_fu_754_p1;
                tmp_36_3_cast_reg_1597 <= tmp_36_3_cast_fu_758_p1;
                tmp_36_4_cast_reg_1602 <= tmp_36_4_cast_fu_762_p1;
                tmp_36_5_cast_reg_1607 <= tmp_36_5_cast_fu_766_p1;
                tmp_36_6_cast_reg_1612 <= tmp_36_6_cast_fu_770_p1;
                tmp_36_7_cast_reg_1617 <= tmp_36_7_cast_fu_774_p1;
                tmp_36_8_cast_reg_1622 <= tmp_36_8_cast_fu_778_p1;
                tmp_36_9_cast_reg_1627 <= tmp_36_9_cast_fu_782_p1;
                tmp_36_cast_reg_1657 <= tmp_36_cast_fu_806_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                in_d_1_15_reg_2113 <= in_d_1_15_fu_1296_p2;
                tmp_23_reg_2108 <= tmp_23_fu_1291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul_reg_1484 <= next_mul_fu_546_p2;
                out_d_2_reg_1492 <= out_d_2_fu_558_p2;
                    phi_mul_cast_reg_1479(10 downto 0) <= phi_mul_cast_fu_542_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_2_reg_1665 <= out_h_2_fu_816_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_2_reg_1678 <= out_w_2_fu_858_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_538 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp12_reg_2080 <= tmp12_fu_1246_p2;
                tmp_37_s_reg_2075 <= grp_fu_1461_p2;
                tmp_39_14_reg_2070 <= tmp_37_14_reg_2060(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp13_reg_2085 <= tmp13_fu_1260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp2_reg_2158 <= tmp2_fu_1334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp3_reg_1955 <= tmp3_fu_1097_p2;
                tmp_31_s_reg_1950 <= tmp_31_s_fu_1092_p2;
                tmp_37_5_reg_1920 <= grp_fu_1411_p2;
                tmp_37_6_reg_1925 <= grp_fu_1416_p2;
                tmp_39_4_reg_1915 <= tmp_37_4_reg_1880(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp4_reg_2020 <= tmp4_fu_1168_p2;
                tmp_37_10_reg_2005 <= grp_fu_1436_p2;
                tmp_37_9_reg_2000 <= grp_fu_1431_p2;
                tmp_39_8_reg_1995 <= tmp_37_8_reg_1970(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp5_reg_1990 <= tmp5_fu_1132_p2;
                tmp_37_7_reg_1965 <= grp_fu_1421_p2;
                tmp_37_8_reg_1970 <= grp_fu_1426_p2;
                tmp_39_6_reg_1960 <= tmp_37_6_reg_1925(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                tmp7_reg_2095 <= tmp7_fu_1272_p2;
                tmp_27_cast_reg_2090 <= tmp_27_cast_fu_1265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp8_reg_2065 <= tmp8_fu_1223_p2;
                tmp_37_13_reg_2055 <= grp_fu_1451_p2;
                tmp_37_14_reg_2060 <= grp_fu_1456_p2;
                tmp_39_12_reg_2050 <= tmp_37_12_reg_2035(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp9_reg_2045 <= tmp9_fu_1195_p2;
                tmp_37_11_reg_2030 <= grp_fu_1441_p2;
                tmp_37_12_reg_2035 <= grp_fu_1446_p2;
                tmp_39_10_reg_2025 <= tmp_37_10_reg_2005(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_11_reg_1502(6 downto 4) <= tmp_11_fu_573_p3(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_810_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_14_reg_1670(8 downto 1) <= tmp_14_fu_846_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_17_reg_1683 <= tmp_17_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                tmp_18_reg_2118 <= tmp_18_fu_1302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp_21_reg_2123 <= grp_fu_1466_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_25_reg_2153 <= grp_fu_1473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_27_cast_cast2_reg_1706 <= tmp_27_cast_cast2_fu_888_p1;
                tmp_31_3_reg_1725 <= tmp_31_3_fu_903_p2;
                tmp_31_4_reg_1730 <= tmp_31_4_fu_908_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_27_cast_cast3_reg_1785 <= tmp_27_cast_cast3_fu_958_p1;
                tmp_31_10_reg_1820 <= tmp_31_10_fu_982_p2;
                tmp_31_9_reg_1815 <= tmp_31_9_fu_977_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_27_cast_cast_reg_1691 <= tmp_27_cast_cast_fu_873_p1;
                tmp_31_1_reg_1696 <= tmp_31_1_fu_876_p2;
                tmp_31_2_reg_1701 <= tmp_31_2_fu_882_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_31_11_reg_1855 <= tmp_31_11_fu_1004_p2;
                tmp_31_12_reg_1860 <= tmp_31_12_fu_1009_p2;
                tmp_37_1_reg_1825 <= grp_fu_1391_p2;
                tmp_37_2_reg_1830 <= grp_fu_1396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_31_13_reg_1905 <= tmp_31_13_fu_1048_p2;
                tmp_31_14_reg_1910 <= tmp_31_14_fu_1053_p2;
                tmp_37_3_reg_1875 <= grp_fu_1401_p2;
                tmp_37_4_reg_1880 <= grp_fu_1406_p2;
                tmp_39_1_reg_1865 <= tmp_37_1_reg_1825(29 downto 14);
                tmp_39_2_reg_1870 <= tmp_37_2_reg_1830(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_31_5_reg_1745 <= tmp_31_5_fu_922_p2;
                tmp_31_6_reg_1750 <= tmp_31_6_fu_927_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_31_7_reg_1775 <= tmp_31_7_fu_948_p2;
                tmp_31_8_reg_1780 <= tmp_31_8_fu_953_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp_reg_2163 <= tmp_fu_1343_p2;
            end if;
        end if;
    end process;
    phi_mul_cast_reg_1479(11) <= '0';
    tmp_11_reg_1502(3 downto 0) <= "0000";
    tmp_14_reg_1670(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_552_p2, ap_CS_fsm_state4, exitcond2_fu_810_p2, ap_CS_fsm_state5, exitcond1_fu_852_p2, ap_CS_fsm_state21, exitcond_fu_1277_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_810_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_852_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((exitcond_fu_1277_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    SeparableConv2D_1_b_s_address0 <= tmp_s_fu_564_p1(3 - 1 downto 0);

    SeparableConv2D_1_b_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state24, tmp_35_1_fu_587_p1, tmp_24_fu_1314_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_1_w_s_address0 <= tmp_24_fu_1314_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_address0 <= tmp_35_1_fu_587_p1(7 - 1 downto 0);
        else 
            SeparableConv2D_1_w_s_address0 <= "XXXXXXX";
        end if; 
    end process;

    SeparableConv2D_1_w_s_address1 <= tmp_35_2_fu_598_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address10 <= tmp_35_11_fu_697_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address11 <= tmp_35_12_fu_708_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address12 <= tmp_35_13_fu_719_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address13 <= tmp_35_14_fu_730_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address14 <= tmp_35_s_fu_741_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address2 <= tmp_35_3_fu_609_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address3 <= tmp_35_4_fu_620_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address4 <= tmp_35_5_fu_631_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address5 <= tmp_35_6_fu_642_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address6 <= tmp_35_7_fu_653_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address7 <= tmp_35_8_fu_664_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address8 <= tmp_35_9_fu_675_p1(7 - 1 downto 0);
    SeparableConv2D_1_w_s_address9 <= tmp_35_10_fu_686_p1(7 - 1 downto 0);

    SeparableConv2D_1_w_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            SeparableConv2D_1_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce1 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce10_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce10 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce11_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce11 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce12_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce12 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce13_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce13 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce14_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce14 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce2_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce2 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce3_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce3 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce4_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce4 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce5_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce5 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce6_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce6 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce7_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce7 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce8_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce8 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_w_s_ce9_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_1_w_s_ce9 <= ap_const_logic_1;
        else 
            SeparableConv2D_1_w_s_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_552_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond3_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_552_p2)
    begin
        if (((exitcond3_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_fu_1370_p3 <= 
        ap_const_lv15_0 when (tmp_37_fu_1362_p3(0) = '1') else 
        tmp_36_fu_1358_p1;
    buffer_2_s_fu_1352_p2 <= std_logic_vector(unsigned(buffer1_reg_512) + unsigned(tmp_15_fu_1348_p2));
        buffer_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_b_s_q0),16));

    exitcond1_fu_852_p2 <= "1" when (out_w_reg_501 = ap_const_lv4_E) else "0";
    exitcond2_fu_810_p2 <= "1" when (out_h_reg_490 = ap_const_lv4_E) else "0";
    exitcond3_fu_552_p2 <= "1" when (out_d_reg_468 = ap_const_lv4_8) else "0";
    exitcond_fu_1277_p2 <= "1" when (in_d_reg_522 = ap_const_lv5_10) else "0";
    grp_fu_1391_p0 <= tmp_36_1_cast_reg_1587(15 - 1 downto 0);
    grp_fu_1396_p0 <= tmp_36_2_cast_reg_1592(15 - 1 downto 0);
    grp_fu_1401_p0 <= tmp_36_3_cast_reg_1597(15 - 1 downto 0);
    grp_fu_1406_p0 <= tmp_36_4_cast_reg_1602(15 - 1 downto 0);
    grp_fu_1411_p0 <= tmp_36_5_cast_reg_1607(15 - 1 downto 0);
    grp_fu_1416_p0 <= tmp_36_6_cast_reg_1612(15 - 1 downto 0);
    grp_fu_1421_p0 <= tmp_36_7_cast_reg_1617(15 - 1 downto 0);
    grp_fu_1426_p0 <= tmp_36_8_cast_reg_1622(15 - 1 downto 0);
    grp_fu_1431_p0 <= tmp_36_9_cast_reg_1627(15 - 1 downto 0);
    grp_fu_1436_p0 <= tmp_36_10_cast_reg_1632(15 - 1 downto 0);
    grp_fu_1441_p0 <= tmp_36_11_cast_reg_1637(15 - 1 downto 0);
    grp_fu_1446_p0 <= tmp_36_12_cast_reg_1642(15 - 1 downto 0);
    grp_fu_1451_p0 <= tmp_36_13_cast_reg_1647(15 - 1 downto 0);
    grp_fu_1456_p0 <= tmp_36_14_cast_reg_1652(15 - 1 downto 0);
    grp_fu_1461_p0 <= tmp_36_cast_reg_1657(15 - 1 downto 0);
    grp_fu_1466_p0 <= grp_fu_1466_p00(5 - 1 downto 0);
    grp_fu_1466_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_reg_522),13));
    grp_fu_1466_p1 <= ap_const_lv13_C4(9 - 1 downto 0);
    grp_fu_1466_p2 <= tmp_27_cast_reg_2090(9 - 1 downto 0);
    in_d_1_15_fu_1296_p2 <= (in_d_reg_522 xor ap_const_lv5_10);

    input_r_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state7, tmp_32_1_fu_894_p1, tmp_32_3_fu_914_p1, tmp_32_5_fu_940_p1, tmp_32_7_fu_969_p1, tmp_32_9_fu_996_p1, tmp_32_11_fu_1040_p1, tmp_32_13_fu_1084_p1, tmp_32_s_fu_1128_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_r_address0 <= tmp_32_s_fu_1128_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_address0 <= tmp_32_13_fu_1084_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= tmp_32_11_fu_1040_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= tmp_32_9_fu_996_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= tmp_32_7_fu_969_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= tmp_32_5_fu_940_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= tmp_32_3_fu_914_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= tmp_32_1_fu_894_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state24, tmp_32_2_fu_899_p1, tmp_32_4_fu_918_p1, tmp_32_6_fu_944_p1, tmp_32_8_fu_973_p1, tmp_32_10_fu_1000_p1, tmp_32_12_fu_1044_p1, tmp_32_14_fu_1088_p1, tmp_22_fu_1309_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_r_address1 <= tmp_22_fu_1309_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_address1 <= tmp_32_14_fu_1088_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address1 <= tmp_32_12_fu_1044_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= tmp_32_10_fu_1000_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= tmp_32_8_fu_973_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= tmp_32_6_fu_944_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address1 <= tmp_32_4_fu_918_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address1 <= tmp_32_2_fu_899_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_546_p2 <= std_logic_vector(unsigned(phi_mul_reg_479) + unsigned(ap_const_lv11_C4));
    out_d_2_fu_558_p2 <= std_logic_vector(unsigned(out_d_reg_468) + unsigned(ap_const_lv4_1));
    out_h_2_fu_816_p2 <= std_logic_vector(unsigned(out_h_reg_490) + unsigned(ap_const_lv4_1));
    out_w_2_fu_858_p2 <= std_logic_vector(unsigned(out_w_reg_501) + unsigned(ap_const_lv4_1));
    output_r_address0 <= tmp_19_fu_1386_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_1_fu_1370_p3),16));

    output_r_we0_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_834_p3),9));
    p_shl1_fu_834_p3 <= (out_h_reg_490 & ap_const_lv1_0);
    p_shl_cast_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_822_p3),9));
    p_shl_fu_822_p3 <= (out_h_reg_490 & ap_const_lv4_0);
    phi_mul_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_479),12));
    tmp10_fu_1218_p2 <= std_logic_vector(unsigned(tmp_39_11_fu_1200_p4) + unsigned(tmp_39_10_reg_2025));
    tmp11_fu_1268_p2 <= std_logic_vector(unsigned(tmp12_reg_2080) + unsigned(tmp13_reg_2085));
    tmp12_fu_1246_p2 <= std_logic_vector(unsigned(tmp_39_13_fu_1228_p4) + unsigned(tmp_39_12_reg_2050));
    tmp13_fu_1260_p2 <= std_logic_vector(unsigned(tmp_39_s_fu_1251_p4) + unsigned(tmp_39_14_reg_2070));
    tmp1_fu_1339_p2 <= std_logic_vector(unsigned(tmp3_reg_1955) + unsigned(tmp2_reg_2158));
    tmp2_fu_1334_p2 <= std_logic_vector(unsigned(tmp_27_fu_1325_p4) + unsigned(tmp_39_1_reg_1865));
    tmp3_fu_1097_p2 <= std_logic_vector(unsigned(tmp_39_3_fu_1058_p4) + unsigned(tmp_39_2_reg_1870));
    tmp4_fu_1168_p2 <= std_logic_vector(unsigned(tmp5_reg_1990) + unsigned(tmp6_fu_1163_p2));
    tmp5_fu_1132_p2 <= std_logic_vector(unsigned(tmp_39_5_fu_1102_p4) + unsigned(tmp_39_4_reg_1915));
    tmp6_fu_1163_p2 <= std_logic_vector(unsigned(tmp_39_7_fu_1137_p4) + unsigned(tmp_39_6_reg_1960));
    tmp7_fu_1272_p2 <= std_logic_vector(unsigned(tmp8_reg_2065) + unsigned(tmp11_fu_1268_p2));
    tmp8_fu_1223_p2 <= std_logic_vector(unsigned(tmp9_reg_2045) + unsigned(tmp10_fu_1218_p2));
    tmp9_fu_1195_p2 <= std_logic_vector(unsigned(tmp_39_9_fu_1173_p4) + unsigned(tmp_39_8_reg_1995));
    tmp_11_fu_573_p3 <= (tmp_35_fu_569_p1 & ap_const_lv4_0);
    tmp_14_fu_846_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_830_p1) - unsigned(p_shl1_cast_fu_842_p1));
    tmp_15_cast_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_501),9));
    tmp_15_fu_1348_p2 <= std_logic_vector(unsigned(tmp7_reg_2095) + unsigned(tmp_reg_2163));
    tmp_17_fu_868_p2 <= std_logic_vector(unsigned(tmp_15_cast_fu_864_p1) + unsigned(tmp_14_reg_1670));
        tmp_18_cast_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_reg_2118),32));

    tmp_18_fu_1302_p2 <= std_logic_vector(signed(tmp_27_cast_cast3_reg_1785) + signed(phi_mul_cast_reg_1479));
    tmp_19_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_cast_fu_1383_p1),64));
    tmp_22_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_cast_fu_1306_p1),64));
    tmp_23_fu_1291_p2 <= std_logic_vector(unsigned(tmp_11_reg_1502) + unsigned(tmp_28_cast1_fu_1283_p1));
    tmp_24_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_2108),64));
        tmp_27_cast_cast2_fu_888_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_1683),11));

        tmp_27_cast_cast3_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_1683),12));

        tmp_27_cast_cast_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_1683),10));

        tmp_27_cast_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_1683),13));

    tmp_27_fu_1325_p4 <= tmp_25_reg_2153(29 downto 14);
    tmp_28_cast1_fu_1283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_reg_522),7));
        tmp_30_cast_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_reg_2123),32));

    tmp_31_10_fu_982_p2 <= std_logic_vector(signed(tmp_27_cast_cast3_fu_958_p1) + signed(ap_const_lv12_7A8));
    tmp_31_11_fu_1004_p2 <= std_logic_vector(signed(tmp_27_cast_cast3_reg_1785) + signed(ap_const_lv12_86C));
    tmp_31_12_fu_1009_p2 <= std_logic_vector(signed(tmp_27_cast_cast3_reg_1785) + signed(ap_const_lv12_930));
    tmp_31_13_fu_1048_p2 <= std_logic_vector(signed(tmp_27_cast_cast3_reg_1785) + signed(ap_const_lv12_9F4));
    tmp_31_14_fu_1053_p2 <= std_logic_vector(signed(tmp_27_cast_cast3_reg_1785) + signed(ap_const_lv12_AB8));
        tmp_31_1_cast_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_1_reg_1696),32));

    tmp_31_1_fu_876_p2 <= std_logic_vector(signed(tmp_27_cast_cast_fu_873_p1) + signed(ap_const_lv10_C4));
    tmp_31_2_fu_882_p2 <= std_logic_vector(signed(tmp_27_cast_cast_fu_873_p1) + signed(ap_const_lv10_188));
    tmp_31_3_fu_903_p2 <= std_logic_vector(signed(tmp_27_cast_cast_reg_1691) + signed(ap_const_lv10_24C));
    tmp_31_4_fu_908_p2 <= std_logic_vector(signed(tmp_27_cast_cast2_fu_888_p1) + signed(ap_const_lv11_310));
    tmp_31_5_fu_922_p2 <= std_logic_vector(signed(tmp_27_cast_cast2_reg_1706) + signed(ap_const_lv11_3D4));
    tmp_31_6_fu_927_p2 <= std_logic_vector(signed(tmp_27_cast_cast2_reg_1706) + signed(ap_const_lv11_498));
    tmp_31_7_fu_948_p2 <= std_logic_vector(signed(tmp_27_cast_cast2_reg_1706) + signed(ap_const_lv11_55C));
    tmp_31_8_fu_953_p2 <= std_logic_vector(signed(tmp_27_cast_cast2_reg_1706) + signed(ap_const_lv11_620));
    tmp_31_9_fu_977_p2 <= std_logic_vector(signed(tmp_27_cast_cast2_reg_1706) + signed(ap_const_lv11_6E4));
    tmp_31_s_fu_1092_p2 <= std_logic_vector(signed(tmp_27_cast_cast3_reg_1785) + signed(ap_const_lv12_B7C));
    tmp_32_10_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_10_reg_1820),64));
    tmp_32_11_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_11_reg_1855),64));
    tmp_32_12_fu_1044_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_12_reg_1860),64));
    tmp_32_13_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_13_reg_1905),64));
    tmp_32_14_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_14_reg_1910),64));
    tmp_32_1_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_1_cast_fu_891_p1),64));
    tmp_32_2_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_2_reg_1701),64));
    tmp_32_3_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_3_reg_1725),64));
    tmp_32_4_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_4_reg_1730),64));
    tmp_32_5_fu_940_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_5_reg_1745),64));
    tmp_32_6_fu_944_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_6_reg_1750),64));
    tmp_32_7_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_7_reg_1775),64));
    tmp_32_8_fu_973_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_8_reg_1780),64));
    tmp_32_9_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_9_reg_1815),64));
    tmp_32_s_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_s_reg_1950),64));
    tmp_34_15_fu_592_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_2);
    tmp_34_16_fu_603_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_3);
    tmp_34_17_fu_614_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_4);
    tmp_34_18_fu_625_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_5);
    tmp_34_19_fu_636_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_6);
    tmp_34_20_fu_647_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_7);
    tmp_34_21_fu_658_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_8);
    tmp_34_22_fu_669_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_9);
    tmp_34_23_fu_680_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_A);
    tmp_34_24_fu_691_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_B);
    tmp_34_25_fu_702_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_C);
    tmp_34_26_fu_713_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_D);
    tmp_34_27_fu_724_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_E);
    tmp_34_28_fu_735_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_F);
    tmp_34_s_fu_581_p2 <= (tmp_11_fu_573_p3 or ap_const_lv7_1);
    tmp_35_10_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_23_fu_680_p2),64));
    tmp_35_11_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_24_fu_691_p2),64));
    tmp_35_12_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_25_fu_702_p2),64));
    tmp_35_13_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_26_fu_713_p2),64));
    tmp_35_14_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_27_fu_724_p2),64));
    tmp_35_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_s_fu_581_p2),64));
    tmp_35_2_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_15_fu_592_p2),64));
    tmp_35_3_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_16_fu_603_p2),64));
    tmp_35_4_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_17_fu_614_p2),64));
    tmp_35_5_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_18_fu_625_p2),64));
    tmp_35_6_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_19_fu_636_p2),64));
    tmp_35_7_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_20_fu_647_p2),64));
    tmp_35_8_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_21_fu_658_p2),64));
    tmp_35_9_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_22_fu_669_p2),64));
    tmp_35_fu_569_p1 <= out_d_reg_468(3 - 1 downto 0);
    tmp_35_s_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_28_fu_735_p2),64));
        tmp_36_10_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q9),30));

        tmp_36_11_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q10),30));

        tmp_36_12_cast_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q11),30));

        tmp_36_13_cast_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q12),30));

        tmp_36_14_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q13),30));

        tmp_36_1_cast_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q0),30));

        tmp_36_2_cast_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q1),30));

        tmp_36_3_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q2),30));

        tmp_36_4_cast_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q3),30));

        tmp_36_5_cast_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q4),30));

        tmp_36_6_cast_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q5),30));

        tmp_36_7_cast_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q6),30));

        tmp_36_8_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q7),30));

        tmp_36_9_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q8),30));

        tmp_36_cast_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_1_w_s_q14),30));

    tmp_36_fu_1358_p1 <= buffer1_reg_512(15 - 1 downto 0);
    tmp_37_fu_1362_p3 <= buffer1_reg_512(15 downto 15);
    tmp_39_11_fu_1200_p4 <= tmp_37_11_reg_2030(29 downto 14);
    tmp_39_13_fu_1228_p4 <= tmp_37_13_reg_2055(29 downto 14);
    tmp_39_3_fu_1058_p4 <= tmp_37_3_reg_1875(29 downto 14);
    tmp_39_5_fu_1102_p4 <= tmp_37_5_reg_1920(29 downto 14);
    tmp_39_7_fu_1137_p4 <= tmp_37_7_reg_1965(29 downto 14);
    tmp_39_9_fu_1173_p4 <= tmp_37_9_reg_2000(29 downto 14);
    tmp_39_s_fu_1251_p4 <= tmp_37_s_reg_2075(29 downto 14);
    tmp_fu_1343_p2 <= std_logic_vector(unsigned(tmp4_reg_2020) + unsigned(tmp1_fu_1339_p2));
    tmp_s_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_468),64));
end behav;
