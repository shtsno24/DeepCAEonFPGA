-- ==============================================================
-- File generated on Tue Nov 19 17:10:29 JST 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111010010110101", 1 => "111111101110001", 2 => "000010110011101", 
    3 => "111111100000101", 4 => "000101001010010", 5 => "111101111110101", 
    6 => "000011010100101", 7 => "111110100111101", 8 => "111100011101011", 
    9 => "111010101000001", 10 => "110010000010111", 11 => "110110010011111", 
    12 => "110000011110110", 13 => "110011111100100", 14 => "110000101000100", 
    15 => "111010000010000", 16 => "101111011011100", 17 => "111000001100101", 
    18 => "111111111110000", 19 => "111010011110010", 20 => "000101000011101", 
    21 => "000001110110001", 22 => "111011011011011", 23 => "000011011110010", 
    24 => "000001101100110", 25 => "000010010000110", 26 => "000110010010100", 
    27 => "111101100000011", 28 => "000001001111111", 29 => "111010000010100", 
    30 => "111110011110001", 31 => "111011110011010", 32 => "111111111000011", 
    33 => "111110101111010", 34 => "000010010001110", 35 => "111011101100011", 
    36 => "000100101111111", 37 => "000010011000101", 38 => "111011000111101", 
    39 => "000010011001000", 40 => "000010011110010", 41 => "000000100010000", 
    42 => "111101000000101", 43 => "111110100100010", 44 => "111110000111110", 
    45 => "111110001111111", 46 => "000001011000001", 47 => "000101101010110", 
    48 => "111011010001110", 49 => "000100110110010", 50 => "111011000100110", 
    51 => "000001000011100", 52 => "111111001111011", 53 => "000001101000010", 
    54 => "111100111111011", 55 => "111111011101010", 56 => "000001001011000", 
    57 => "111111101111010", 58 => "111101011010000", 59 => "000010100010011", 
    60 => "000100000101100", 61 => "000011011111111", 62 => "111100000111101", 
    63 => "000010011101110", 64 => "000001011001100", 65 => "111100010000011", 
    66 => "000001011011111", 67 => "111111110001011", 68 => "000001010110100", 
    69 => "111110001000000", 70 => "000101111100001", 71 => "000001011010111", 
    72 => "111110001010100", 73 => "111111000100100", 74 => "000101111111110", 
    75 => "000100001001001", 76 => "111110010111000", 77 => "000110001011010", 
    78 => "000100010111110", 79 => "000101001101101", 80 => "000010111001100", 
    81 => "000010011110111", 82 => "001000010110011", 83 => "000001110101100", 
    84 => "000011100111101", 85 => "000111110010001", 86 => "000001110011111", 
    87 => "111011110111111", 88 => "111101100100111", 89 => "000001110010010", 
    90 => "110110000110001", 91 => "111110111000101", 92 => "111100110111001", 
    93 => "111100010011110", 94 => "111010011011101", 95 => "111010000001000", 
    96 => "111111100011011", 97 => "000000100001111", 98 => "111000010100111", 
    99 => "111011110101001", 100 => "111101101110111", 101 => "000110000011011", 
    102 => "000011110100101", 103 => "000000101011001", 104 => "111010010000100", 
    105 => "111001110101000", 106 => "000010000110001", 107 => "000010100011000", 
    108 => "111100100100110", 109 => "111011110111110", 110 => "111101011111111", 
    111 => "111001110111110", 112 => "110000111101101", 113 => "110001101011011", 
    114 => "110110111000111", 115 => "110111000010110", 116 => "111110011101000", 
    117 => "000000100111001", 118 => "000010101011000", 119 => "111111111010001", 
    120 => "000101010101100", 121 => "111110001010011", 122 => "000011111100001", 
    123 => "111011111010010", 124 => "111100010110001", 125 => "000010111001101", 
    126 => "000000100010110", 127 => "111111010100010", 128 => "000011000001000", 
    129 => "111010001111110", 130 => "111100111011010", 131 => "000011110010101", 
    132 => "111101100010011", 133 => "111111001010101", 134 => "000100101101010", 
    135 => "111010111100001", 136 => "110110111001111", 137 => "111110001000101", 
    138 => "111111001111101", 139 => "110111000101101", 140 => "110111001001000", 
    141 => "000000001001010", 142 => "111000100011100", 143 => "111011010101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity depthwise_conv2d_fix_1_SeparableConv2D_4_w_s is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of depthwise_conv2d_fix_1_SeparableConv2D_4_w_s is
    component depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom_U :  component depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


