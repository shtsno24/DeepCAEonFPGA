-- ==============================================================
-- File generated on Fri Nov 08 14:42:09 JST 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "11110010110001", 1 => "11111001111100", 2 => "11110011011000", 
    3 => "00011110101100", 4 => "11110001010000", 5 => "00100011101000", 
    6 => "11011100110100", 7 => "11001001000110", 8 => "11010110000111", 
    9 => "00100011110110", 10 => "00100101110001", 11 => "00001010101100", 
    12 => "11110010001101", 13 => "11011000100100", 14 => "11010000010001", 
    15 => "11011001000100", 16 => "00001101010111", 17 => "11100101100111", 
    18 => "11101010011100", 19 => "11011111110111", 20 => "11010110010100", 
    21 => "11100111110000", 22 => "00110100101110", 23 => "00011001101001", 
    24 => "00010100010111", 25 => "11110000011100", 26 => "00000101101100", 
    27 => "11111011000110", 28 => "00011010010110", 29 => "11010101110000", 
    30 => "11010011101000", 31 => "00010100101011", 32 => "11010101010101", 
    33 => "11110010000011", 34 => "11101001111101", 35 => "00001001001100", 
    36 => "11101111111010", 37 => "11101011111000", 38 => "11111010110001", 
    39 => "11110000100101", 40 => "11111111010101", 41 => "11110111110010", 
    42 => "00011101010010", 43 => "00011010100000", 44 => "00101101011000", 
    45 => "11001100101110", 46 => "11110011111101", 47 => "11001000111011", 
    48 => "00000010010101", 49 => "11100010111111", 50 => "00010001100001", 
    51 => "11010011001100", 52 => "11110010101001", 53 => "11110111100111", 
    54 => "00001101111110", 55 => "11000101011101", 56 => "11001100011000", 
    57 => "11000000100000", 58 => "11010101100100", 59 => "10111110011000", 
    60 => "00001100110010", 61 => "10101010110010", 62 => "00010111110101", 
    63 => "11100111111110", 64 => "00110101011110", 65 => "11110001010110", 
    66 => "00001010100001", 67 => "00001011111000", 68 => "00011011000001", 
    69 => "00111001010110", 70 => "00110110101000", 71 => "11101000010011", 
    72 => "11101101101101", 73 => "11010001001101", 74 => "11001110010100", 
    75 => "11110100010000", 76 => "11000110010010", 77 => "11001110111011", 
    78 => "11110100010110", 79 => "00000111010101", 80 => "00101010000100", 
    81 => "00001010000000", 82 => "00000001000101", 83 => "11110001100010", 
    84 => "11111001111000", 85 => "00010010011001", 86 => "00011100110101", 
    87 => "00100100010110", 88 => "11111111111100", 89 => "11100100111011", 
    90 => "00100011111011", 91 => "00101011001001", 92 => "00001010001110", 
    93 => "11011010100000", 94 => "00101001111101", 95 => "00010100111101", 
    96 => "11011010001100", 97 => "11100101101001", 98 => "11001111011001", 
    99 => "01000001111110", 100 => "00101101000100", 101 => "00111010011010", 
    102 => "00111001001111", 103 => "01110100000110", 104 => "01001100110101", 
    105 => "01010111011011", 106 => "01010101000000", 107 => "00111001000101", 
    108 => "00100010000110", 109 => "11101010100001", 110 => "11001010100000", 
    111 => "11011001000010", 112 => "11101101001001", 113 => "11100011110101", 
    114 => "00101110000001", 115 => "11011011100001", 116 => "00101010001011", 
    117 => "11101000000101", 118 => "00110001111000", 119 => "01000110100101", 
    120 => "01010001101010", 121 => "01100000100101", 122 => "00111011001100", 
    123 => "00011100000010", 124 => "00110010110100", 125 => "11111111001101", 
    126 => "11011000110001", 127 => "11011010101111", 128 => "00010101101111", 
    129 => "00100000110101", 130 => "00001101011000", 131 => "00001000011000", 
    132 => "11101011101011", 133 => "00100110100101", 134 => "00100101001010", 
    135 => "00011000010000", 136 => "11100101011011", 137 => "11110000111100", 
    138 => "11100100111001", 139 => "00110010101000", 140 => "11010111010011", 
    141 => "11011110000000", 142 => "00010100011100", 143 => "00001111101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity depthwise_conv2d_fix_1_SeparableConv2D_4_w_s is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of depthwise_conv2d_fix_1_SeparableConv2D_4_w_s is
    component depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom_U :  component depthwise_conv2d_fix_1_SeparableConv2D_4_w_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


