-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_1D : STD_LOGIC_VECTOR (7 downto 0) := "00011101";
    constant ap_const_lv11_384 : STD_LOGIC_VECTOR (10 downto 0) := "01110000100";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_3B : STD_LOGIC_VECTOR (7 downto 0) := "00111011";
    constant ap_const_lv9_110 : STD_LOGIC_VECTOR (8 downto 0) := "100010000";
    constant ap_const_lv9_165 : STD_LOGIC_VECTOR (8 downto 0) := "101100101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv8_84 : STD_LOGIC_VECTOR (7 downto 0) := "10000100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv10_1E : STD_LOGIC_VECTOR (9 downto 0) := "0000011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvars_iv6_cast7_fu_279_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv6_cast7_reg_474 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvars_iv_cast_fu_283_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_cast_reg_479 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_cast6_fu_287_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal o_count_cast6_reg_484 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_count_cast_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_count_cast_reg_489 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv6_cast_fu_295_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv6_cast_reg_494 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_299_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_fu_317_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond8_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_count_3_fu_333_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_count_3_reg_517 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_cast_fu_344_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_cast_reg_522 : STD_LOGIC_VECTOR (9 downto 0);
    signal height_1_fu_354_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_1_reg_530 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_40_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_reg_535 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_count_8_fu_377_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond3_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_383_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_reg_548 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_fu_389_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_reg_553 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_406_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_47_reg_566 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next2_fu_412_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next9_fu_418_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_9_fu_429_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal o_count_7_fu_450_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond5_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next7_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next_fu_462_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next4_fu_468_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv6_reg_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv3_reg_118 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvars_iv_reg_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal o_count_reg_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_count_reg_154 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_depth_phi_fu_171_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal depth_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_count_1_reg_179 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_6_reg_188 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv8_reg_198 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_2_reg_208 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_count_1_reg_218 : STD_LOGIC_VECTOR (9 downto 0);
    signal height_reg_228 : STD_LOGIC_VECTOR (4 downto 0);
    signal o_count_3_reg_239 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_4_reg_249 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_count_2_reg_260 : STD_LOGIC_VECTOR (9 downto 0);
    signal o_count_5_reg_270 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_38_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal o_count_1_cast_fu_303_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_fu_339_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal o_count_5_cast_cast_fu_435_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    depth_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                depth_reg_166 <= ap_const_lv1_0;
            elsif (((exitcond5_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                depth_reg_166 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    height_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                height_reg_228 <= ap_const_lv5_0;
            elsif (((exitcond_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                height_reg_228 <= height_1_reg_530;
            end if; 
        end if;
    end process;

    i_count_1_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_count_1_reg_218 <= i_count_cast_reg_489;
            elsif (((exitcond_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_count_1_reg_218 <= tmp_42_reg_548;
            end if; 
        end if;
    end process;

    i_count_2_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_count_2_reg_260 <= tmp_47_reg_566;
            elsif (((exitcond3_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_count_2_reg_260 <= i_count_1_reg_218;
            end if; 
        end if;
    end process;

    i_count_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_count_reg_154 <= ap_const_lv9_0;
            elsif (((exitcond5_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_count_reg_154 <= i_count_3_reg_517;
            end if; 
        end if;
    end process;

    indvars_iv3_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv3_reg_118 <= ap_const_lv11_384;
            elsif (((exitcond5_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvars_iv3_reg_118 <= indvars_iv_next4_fu_468_p2;
            end if; 
        end if;
    end process;

    indvars_iv6_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv6_reg_106 <= ap_const_lv8_1D;
            elsif (((exitcond5_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvars_iv6_reg_106 <= indvars_iv_next7_fu_456_p2;
            end if; 
        end if;
    end process;

    indvars_iv8_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                indvars_iv8_reg_198 <= tmp_cast_fu_329_p1;
            elsif (((exitcond_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                indvars_iv8_reg_198 <= indvars_iv_next9_fu_418_p2;
            end if; 
        end if;
    end process;

    indvars_iv_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv_reg_130 <= ap_const_lv8_1F;
            elsif (((exitcond5_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvars_iv_reg_130 <= indvars_iv_next_fu_462_p2;
            end if; 
        end if;
    end process;

    o_count_1_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_depth_phi_fu_171_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                o_count_1_reg_179 <= tmp_fu_299_p1;
            elsif (((exitcond8_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                o_count_1_reg_179 <= tmp_39_fu_317_p2;
            end if; 
        end if;
    end process;

    o_count_2_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                o_count_2_reg_208 <= indvars_iv6_cast7_reg_474;
            elsif (((exitcond_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                o_count_2_reg_208 <= tmp_43_reg_553;
            end if; 
        end if;
    end process;

    o_count_3_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                o_count_3_reg_239 <= o_count_2_reg_208;
            elsif (((exitcond3_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                o_count_3_reg_239 <= o_count_8_fu_377_p2;
            end if; 
        end if;
    end process;

    o_count_4_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                o_count_4_reg_249 <= o_count_9_fu_429_p2;
            elsif (((exitcond3_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                o_count_4_reg_249 <= o_count_6_reg_188;
            end if; 
        end if;
    end process;

    o_count_5_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                o_count_5_reg_270 <= o_count_7_fu_450_p2;
            elsif (((exitcond2_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                o_count_5_reg_270 <= tmp_43_cast_reg_522;
            end if; 
        end if;
    end process;

    o_count_6_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                o_count_6_reg_188 <= indvars_iv_cast_reg_479;
            elsif (((exitcond_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                o_count_6_reg_188 <= indvars_iv_next2_fu_412_p2;
            end if; 
        end if;
    end process;

    o_count_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                o_count_reg_142 <= ap_const_lv8_0;
            elsif (((exitcond5_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                o_count_reg_142 <= tmp_40_reg_535;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                height_1_reg_530 <= height_1_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_count_3_reg_517 <= i_count_3_fu_333_p2;
                tmp_43_cast_reg_522 <= tmp_43_cast_fu_344_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_count_cast_reg_489 <= i_count_cast_fu_291_p1;
                indvars_iv6_cast7_reg_474 <= indvars_iv6_cast7_fu_279_p1;
                    indvars_iv6_cast_reg_494(9 downto 0) <= indvars_iv6_cast_fu_295_p1(9 downto 0);
                indvars_iv_cast_reg_479 <= indvars_iv_cast_fu_283_p1;
                o_count_cast6_reg_484 <= o_count_cast6_fu_287_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_40_reg_535 <= tmp_40_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_42_reg_548 <= tmp_42_fu_383_p2;
                tmp_43_reg_553 <= tmp_43_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_47_reg_566 <= tmp_47_fu_406_p2;
            end if;
        end if;
    end process;
    indvars_iv6_cast_reg_494(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond8_fu_307_p2, ap_CS_fsm_state4, exitcond2_fu_348_p2, ap_CS_fsm_state5, exitcond3_fu_366_p2, ap_CS_fsm_state6, exitcond_fu_395_p2, ap_CS_fsm_state8, exitcond5_fu_439_p2, ap_phi_mux_depth_phi_fu_171_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_phi_mux_depth_phi_fu_171_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond8_fu_307_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond3_fu_366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond_fu_395_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((exitcond5_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_phi_mux_depth_phi_fu_171_p4)
    begin
        if ((((ap_phi_mux_depth_phi_fu_171_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_depth_phi_fu_171_p4 <= depth_reg_166;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_phi_mux_depth_phi_fu_171_p4)
    begin
        if (((ap_phi_mux_depth_phi_fu_171_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_348_p2 <= "1" when (height_reg_228 = ap_const_lv5_1C) else "0";
    exitcond3_fu_366_p2 <= "1" when (o_count_3_reg_239 = o_count_6_reg_188) else "0";
    exitcond5_fu_439_p2 <= "1" when (o_count_5_cast_cast_fu_435_p1 = indvars_iv3_reg_118) else "0";
    exitcond8_fu_307_p2 <= "1" when (o_count_1_cast_fu_303_p1 = indvars_iv6_cast_reg_494) else "0";
    exitcond_fu_395_p2 <= "1" when (o_count_4_reg_249 = indvars_iv8_reg_198) else "0";
    height_1_fu_354_p2 <= std_logic_vector(unsigned(height_reg_228) + unsigned(ap_const_lv5_1));
    i_count_3_fu_333_p2 <= std_logic_vector(signed(i_count_reg_154) + signed(ap_const_lv9_110));
        i_count_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_count_reg_154),10));

        indvars_iv6_cast7_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv6_reg_106),10));

    indvars_iv6_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv6_cast7_fu_279_p1),11));
        indvars_iv_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv_reg_130),10));

    indvars_iv_next2_fu_412_p2 <= std_logic_vector(unsigned(o_count_6_reg_188) + unsigned(ap_const_lv10_1E));
    indvars_iv_next4_fu_468_p2 <= std_logic_vector(unsigned(indvars_iv3_reg_118) + unsigned(ap_const_lv11_384));
    indvars_iv_next7_fu_456_p2 <= std_logic_vector(signed(indvars_iv6_reg_106) + signed(ap_const_lv8_84));
    indvars_iv_next9_fu_418_p2 <= std_logic_vector(unsigned(indvars_iv8_reg_198) + unsigned(ap_const_lv10_1E));
    indvars_iv_next_fu_462_p2 <= std_logic_vector(signed(indvars_iv_reg_130) + signed(ap_const_lv8_84));
    input_0_address0 <= tmp_45_fu_401_p1(10 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    o_count_1_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_179),11));
    o_count_5_cast_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_270),11));
    o_count_7_fu_450_p2 <= std_logic_vector(unsigned(o_count_5_reg_270) + unsigned(ap_const_lv10_1));
    o_count_8_fu_377_p2 <= std_logic_vector(unsigned(o_count_3_reg_239) + unsigned(ap_const_lv10_1));
    o_count_9_fu_429_p2 <= std_logic_vector(unsigned(o_count_4_reg_249) + unsigned(ap_const_lv10_1));
        o_count_cast6_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(o_count_reg_142),9));


    output_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_38_fu_312_p1, tmp_44_fu_372_p1, tmp_46_fu_424_p1, tmp_41_fu_445_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= tmp_41_fu_445_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= tmp_46_fu_424_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_44_fu_372_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= tmp_38_fu_312_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_0_q0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_d0 <= input_0_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state3, exitcond8_fu_307_p2, ap_CS_fsm_state5, exitcond3_fu_366_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, exitcond5_fu_439_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((exitcond3_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((exitcond8_fu_307_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((exitcond5_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_37_fu_339_p2 <= std_logic_vector(signed(o_count_cast6_reg_484) + signed(ap_const_lv9_165));
    tmp_38_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_1_reg_179),64));
    tmp_39_fu_317_p2 <= std_logic_vector(unsigned(o_count_1_reg_179) + unsigned(ap_const_lv5_1));
    tmp_40_fu_360_p2 <= std_logic_vector(signed(o_count_reg_142) + signed(ap_const_lv8_84));
    tmp_41_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_5_reg_270),64));
    tmp_42_fu_383_p2 <= std_logic_vector(unsigned(i_count_1_reg_218) + unsigned(ap_const_lv10_1C));
        tmp_43_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_339_p2),10));

    tmp_43_fu_389_p2 <= std_logic_vector(unsigned(o_count_2_reg_208) + unsigned(ap_const_lv10_1E));
    tmp_44_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_3_reg_239),64));
    tmp_45_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_count_2_reg_260),64));
    tmp_46_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_count_4_reg_249),64));
    tmp_47_fu_406_p2 <= std_logic_vector(unsigned(i_count_2_reg_260) + unsigned(ap_const_lv10_1));
    tmp_cast_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_323_p2),10));
    tmp_fu_299_p1 <= o_count_reg_142(5 - 1 downto 0);
    tmp_s_fu_323_p2 <= std_logic_vector(signed(o_count_reg_142) + signed(ap_const_lv8_3B));
end behav;
