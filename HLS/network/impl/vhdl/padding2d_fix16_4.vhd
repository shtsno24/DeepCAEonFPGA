-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_15_cast1_fu_162_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_15_cast1_reg_342 : STD_LOGIC_VECTOR (20 downto 0);
    signal next_mul_fu_166_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal next_mul_reg_347 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal height_1_fu_177_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_1_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_2_reg_368 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_fu_230_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_reg_373 : STD_LOGIC_VECTOR (10 downto 0);
    signal width_2_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal width_3_fu_274_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal width_3_reg_389 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_23_reg_407 : STD_LOGIC_VECTOR (20 downto 0);
    signal width_1_fu_327_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_reg_101 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_112 : STD_LOGIC_VECTOR (20 downto 0);
    signal width2_reg_124 : STD_LOGIC_VECTOR (4 downto 0);
    signal width1_reg_135 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal width_reg_146 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_cast6_fu_263_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp2_fu_200_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_fu_206_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_fu_218_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_214_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_226_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_30_cast_fu_236_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp4_fu_252_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp3_fu_297_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_cast_fu_303_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_fu_307_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_38_cast_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    height_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                height_reg_101 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((((exitcond9_fu_268_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_1) and (tmp_s_reg_360 = ap_const_lv1_0)) or ((exitcond2_fu_321_p2 = ap_const_lv1_1) and (tmp_s_reg_360 = ap_const_lv1_1))) or ((exitcond8_fu_240_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0))))) then 
                height_reg_101 <= height_1_reg_355;
            end if; 
        end if;
    end process;

    phi_mul_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_112 <= ap_const_lv21_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and ((((exitcond9_fu_268_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_1) and (tmp_s_reg_360 = ap_const_lv1_0)) or ((exitcond2_fu_321_p2 = ap_const_lv1_1) and (tmp_s_reg_360 = ap_const_lv1_1))) or ((exitcond8_fu_240_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0))))) then 
                phi_mul_reg_112 <= next_mul_reg_347;
            end if; 
        end if;
    end process;

    width1_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_fu_189_p2 = ap_const_lv1_1) and (exitcond1_fu_171_p2 = ap_const_lv1_0) and (tmp_s_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                width1_reg_135 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                width1_reg_135 <= width_3_reg_389;
            end if; 
        end if;
    end process;

    width2_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_fu_189_p2 = ap_const_lv1_0) and (exitcond1_fu_171_p2 = ap_const_lv1_0) and (tmp_s_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                width2_reg_124 <= ap_const_lv5_0;
            elsif (((tmp_15_reg_364 = ap_const_lv1_0) and (exitcond8_fu_240_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                width2_reg_124 <= width_2_fu_246_p2;
            end if; 
        end if;
    end process;

    width_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_171_p2 = ap_const_lv1_0) and (tmp_s_fu_183_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                width_reg_146 <= ap_const_lv5_0;
            elsif (((exitcond2_fu_321_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                width_reg_146 <= width_1_fu_327_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                height_1_reg_355 <= height_1_fu_177_p2;
                next_mul_reg_347 <= next_mul_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_fu_189_p2 = ap_const_lv1_1) and (exitcond1_fu_171_p2 = ap_const_lv1_0) and (tmp_s_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                output_addr_2_reg_368 <= tmp_16_fu_195_p1(10 - 1 downto 0);
                    tmp7_reg_373(10 downto 2) <= tmp7_fu_230_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_15_cast1_reg_342(15 downto 0) <= tmp_15_cast1_fu_162_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_171_p2 = ap_const_lv1_0) and (tmp_s_fu_183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_15_reg_364 <= tmp_15_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_reg_364 = ap_const_lv1_1) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_18_reg_394 <= tmp_18_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_reg_364 = ap_const_lv1_1) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_18_fu_280_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_20_reg_398 <= tmp_20_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_fu_286_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_1) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_18_fu_280_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_23_reg_407 <= grp_fu_157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_171_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_s_reg_360 <= tmp_s_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_reg_364 = ap_const_lv1_1) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                width_3_reg_389 <= width_3_fu_274_p2;
            end if;
        end if;
    end process;
    tmp_15_cast1_reg_342(20 downto 16) <= "00000";
    tmp7_reg_373(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_s_reg_360, exitcond1_fu_171_p2, tmp_15_reg_364, ap_CS_fsm_state3, exitcond9_fu_268_p2, exitcond2_fu_321_p2, exitcond8_fu_240_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((((exitcond9_fu_268_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_1) and (tmp_s_reg_360 = ap_const_lv1_0)) or ((exitcond2_fu_321_p2 = ap_const_lv1_1) and (tmp_s_reg_360 = ap_const_lv1_1))) or ((exitcond8_fu_240_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_15_reg_364 = ap_const_lv1_1) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_171_p2)
    begin
        if ((((exitcond1_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_171_p2)
    begin
        if (((exitcond1_fu_171_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_171_p2 <= "1" when (height_reg_101 = ap_const_lv5_1E) else "0";
    exitcond2_fu_321_p2 <= "1" when (width_reg_146 = ap_const_lv5_1E) else "0";
    exitcond8_fu_240_p2 <= "1" when (width2_reg_124 = ap_const_lv5_1E) else "0";
    exitcond9_fu_268_p2 <= "1" when (width1_reg_135 = ap_const_lv5_1E) else "0";
    grp_fu_157_p2 <= std_logic_vector(unsigned(phi_mul_reg_112) + unsigned(tmp_32_cast6_fu_263_p1));
    height_1_fu_177_p2 <= std_logic_vector(unsigned(height_reg_101) + unsigned(ap_const_lv5_1));
    input_0_address0 <= tmp_22_fu_316_p1(10 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_166_p2 <= std_logic_vector(unsigned(phi_mul_reg_112) + unsigned(tmp_15_cast1_reg_342));

    output_r_address0_assign_proc : process(tmp_s_reg_360, tmp_15_reg_364, output_addr_2_reg_368, ap_CS_fsm_state3, tmp_18_fu_280_p2, exitcond9_fu_268_p2, tmp_20_fu_286_p2, exitcond2_fu_321_p2, exitcond8_fu_240_p2, ap_CS_fsm_state4, tmp_19_fu_258_p1, tmp_26_fu_292_p1, tmp_17_fu_333_p1, tmp_24_fu_338_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= tmp_24_fu_338_p1(10 - 1 downto 0);
        elsif (((exitcond2_fu_321_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_address0 <= tmp_17_fu_333_p1(10 - 1 downto 0);
        elsif (((tmp_18_fu_280_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_1) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_address0 <= output_addr_2_reg_368;
        elsif (((tmp_15_reg_364 = ap_const_lv1_1) and (tmp_20_fu_286_p2 = ap_const_lv1_0) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_18_fu_280_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_address0 <= tmp_26_fu_292_p1(10 - 1 downto 0);
        elsif (((tmp_15_reg_364 = ap_const_lv1_0) and (exitcond8_fu_240_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_address0 <= tmp_19_fu_258_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(tmp_s_reg_360, tmp_15_reg_364, ap_CS_fsm_state3, tmp_18_fu_280_p2, exitcond9_fu_268_p2, tmp_20_fu_286_p2, exitcond2_fu_321_p2, exitcond8_fu_240_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((tmp_15_reg_364 = ap_const_lv1_1) and (tmp_20_fu_286_p2 = ap_const_lv1_0) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_18_fu_280_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_18_fu_280_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_1) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_15_reg_364 = ap_const_lv1_0) and (exitcond8_fu_240_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((exitcond2_fu_321_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_0_q0, tmp_s_reg_360, tmp_15_reg_364, ap_CS_fsm_state3, tmp_18_fu_280_p2, exitcond9_fu_268_p2, tmp_20_fu_286_p2, exitcond2_fu_321_p2, exitcond8_fu_240_p2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_d0 <= input_0_q0;
        elsif ((((tmp_15_reg_364 = ap_const_lv1_1) and (tmp_20_fu_286_p2 = ap_const_lv1_0) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_18_fu_280_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_18_fu_280_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_1) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_15_reg_364 = ap_const_lv1_0) and (exitcond8_fu_240_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((exitcond2_fu_321_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(tmp_s_reg_360, tmp_15_reg_364, ap_CS_fsm_state3, tmp_18_fu_280_p2, tmp_18_reg_394, exitcond9_fu_268_p2, tmp_20_fu_286_p2, tmp_20_reg_398, exitcond2_fu_321_p2, exitcond8_fu_240_p2, ap_CS_fsm_state4)
    begin
        if ((((tmp_15_reg_364 = ap_const_lv1_1) and (tmp_20_fu_286_p2 = ap_const_lv1_0) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_18_fu_280_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_18_fu_280_p2 = ap_const_lv1_1) and (tmp_15_reg_364 = ap_const_lv1_1) and (exitcond9_fu_268_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_15_reg_364 = ap_const_lv1_0) and (exitcond8_fu_240_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((exitcond2_fu_321_p2 = ap_const_lv1_0) and (tmp_s_reg_360 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_20_reg_398 = ap_const_lv1_1) and (tmp_18_reg_394 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl3_cast_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_206_p3),11));
    p_shl3_fu_206_p3 <= (tmp2_fu_200_p2 & ap_const_lv5_0);
    p_shl4_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_218_p3),11));
    p_shl4_fu_218_p3 <= (tmp2_fu_200_p2 & ap_const_lv2_0);
    tmp2_fu_200_p2 <= std_logic_vector(unsigned(height_reg_101) + unsigned(ap_const_lv5_1F));
    tmp3_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_297_p2),11));
    tmp3_fu_297_p2 <= std_logic_vector(unsigned(width1_reg_135) + unsigned(ap_const_lv5_1F));
    tmp4_fu_252_p2 <= std_logic_vector(unsigned(phi_mul_reg_112) + unsigned(tmp_30_cast_fu_236_p1));
    tmp7_fu_230_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_214_p1) - unsigned(p_shl4_cast_fu_226_p1));
    tmp_15_cast1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),21));
    tmp_15_fu_189_p2 <= "1" when (unsigned(height_reg_101) < unsigned(ap_const_lv5_1D)) else "0";
    tmp_16_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_112),64));
    tmp_17_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_reg_146),64));
    tmp_18_fu_280_p2 <= "1" when (width1_reg_135 = ap_const_lv5_0) else "0";
    tmp_19_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_252_p2),64));
    tmp_20_fu_286_p2 <= "1" when (unsigned(width1_reg_135) < unsigned(ap_const_lv5_1D)) else "0";
    tmp_21_fu_307_p2 <= std_logic_vector(unsigned(tmp3_cast_fu_303_p1) + unsigned(tmp7_reg_373));
    tmp_22_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_cast_fu_312_p1),64));
    tmp_24_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_407),64));
    tmp_26_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_157_p2),64));
    tmp_30_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width2_reg_124),21));
    tmp_32_cast6_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width1_reg_135),21));
        tmp_38_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_307_p2),32));

    tmp_s_fu_183_p2 <= "1" when (height_reg_101 = ap_const_lv5_0) else "0";
    width_1_fu_327_p2 <= std_logic_vector(unsigned(width_reg_146) + unsigned(ap_const_lv5_1));
    width_2_fu_246_p2 <= std_logic_vector(unsigned(width2_reg_124) + unsigned(ap_const_lv5_1));
    width_3_fu_274_p2 <= std_logic_vector(unsigned(width1_reg_135) + unsigned(ap_const_lv5_1));
end behav;
