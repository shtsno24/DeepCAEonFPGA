-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_C4 : STD_LOGIC_VECTOR (11 downto 0) := "000011000100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv11_C4 : STD_LOGIC_VECTOR (10 downto 0) := "00011000100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal SeparableConv2D_3_b_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal SeparableConv2D_3_b_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_3_b_s_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_3_w_s_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal SeparableConv2D_3_w_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_3_w_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_mul1_cast_fu_190_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_mul1_cast_reg_427 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul2_fu_194_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul2_reg_432 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_d_2_fu_206_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_2_reg_440 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_217_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_reg_450 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_221_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_reg_455 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buffer_cast_fu_228_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_cast_reg_460 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_2_fu_238_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_2_reg_468 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_reg_473 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_cast_fu_274_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_cast_reg_478 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_w_2_fu_284_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_2_reg_486 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_23_cast4_fu_290_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_cast4_reg_491 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond1_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_cast_fu_294_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_cast_reg_496 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_d_1_fu_304_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_d_1_reg_504 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal next_mul_fu_314_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul_reg_509 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_524 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal SeparableConv2D_3_w_3_reg_529 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_reg_534 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal buffer_2_fu_415_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal out_d_reg_114 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul1_reg_125 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_h_reg_136 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_147 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer1_reg_158 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_reg_168 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_179 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_fu_244_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_fu_256_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_252_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_264_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_320_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_cast_fu_325_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_31_cast_fu_334_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast2_fu_310_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_343_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_357_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_353_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal buffer_1_fu_365_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp1_fu_378_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_382_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_386_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_26_cast_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_420_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component network_mul_mul_16s_15s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component pointwise_conv2d_fix_3_SeparableConv2D_3_b_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component pointwise_conv2d_fix_3_SeparableConv2D_3_w_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    SeparableConv2D_3_b_s_U : component pointwise_conv2d_fix_3_SeparableConv2D_3_b_s
    generic map (
        DataWidth => 14,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_3_b_s_address0,
        ce0 => SeparableConv2D_3_b_s_ce0,
        q0 => SeparableConv2D_3_b_s_q0);

    SeparableConv2D_3_w_s_U : component pointwise_conv2d_fix_3_SeparableConv2D_3_w_s
    generic map (
        DataWidth => 15,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => SeparableConv2D_3_w_s_address0,
        ce0 => SeparableConv2D_3_w_s_ce0,
        q0 => SeparableConv2D_3_w_s_q0);

    network_mul_mul_16s_15s_30_1_1_U60 : component network_mul_mul_16s_15s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => input_load_reg_524,
        din1 => SeparableConv2D_3_w_3_reg_529,
        dout => tmp_10_fu_420_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                buffer1_reg_158 <= buffer_2_fu_415_p2;
            elsif (((exitcond1_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buffer1_reg_158 <= buffer_cast_reg_460;
            end if; 
        end if;
    end process;

    in_d_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                in_d_reg_168 <= in_d_1_reg_504;
            elsif (((exitcond1_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_d_reg_168 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_d_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_d_reg_114 <= out_d_2_reg_440;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_114 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_278_p2 = ap_const_lv1_1))) then 
                out_h_reg_136 <= out_h_2_reg_468;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_reg_136 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_w_reg_147 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_298_p2 = ap_const_lv1_1))) then 
                out_w_reg_147 <= out_w_2_reg_486;
            end if; 
        end if;
    end process;

    phi_mul1_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul1_reg_125 <= next_mul2_reg_432;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_125 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                phi_mul_reg_179 <= next_mul_reg_509;
            elsif (((exitcond1_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul_reg_179 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                SeparableConv2D_3_w_3_reg_529 <= SeparableConv2D_3_w_s_q0;
                input_load_reg_524 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                buffer_cast_reg_460 <= buffer_cast_fu_228_p1;
                    tmp_1_reg_455(6 downto 3) <= tmp_1_fu_221_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_d_1_reg_504 <= in_d_1_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul2_reg_432 <= next_mul2_fu_194_p2;
                out_d_2_reg_440 <= out_d_2_fu_206_p2;
                    phi_mul1_cast_reg_427(11 downto 0) <= phi_mul1_cast_fu_190_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                next_mul_reg_509 <= next_mul_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_2_reg_468 <= out_h_2_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_2_reg_486 <= out_w_2_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_200_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_11_reg_450 <= tmp_11_fu_217_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_22_cast_reg_478(11 downto 1) <= tmp_22_cast_fu_274_p1(11 downto 1);
                    tmp_2_reg_473(8 downto 1) <= tmp_2_fu_268_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_23_cast4_reg_491(3 downto 0) <= tmp_23_cast4_fu_290_p1(3 downto 0);
                    tmp_23_cast_reg_496(3 downto 0) <= tmp_23_cast_fu_294_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_s_reg_534 <= tmp_10_fu_420_p2(29 downto 14);
            end if;
        end if;
    end process;
    phi_mul1_cast_reg_427(12) <= '0';
    tmp_1_reg_455(2 downto 0) <= "000";
    tmp_2_reg_473(0) <= '0';
    tmp_22_cast_reg_478(0) <= '0';
    tmp_23_cast4_reg_491(8 downto 4) <= "00000";
    tmp_23_cast_reg_496(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_200_p2, ap_CS_fsm_state4, exitcond2_fu_232_p2, ap_CS_fsm_state5, exitcond1_fu_278_p2, ap_CS_fsm_state6, exitcond_fu_298_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_232_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_278_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_298_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    SeparableConv2D_3_b_s_address0 <= tmp_9_fu_212_p1(4 - 1 downto 0);

    SeparableConv2D_3_b_s_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            SeparableConv2D_3_b_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_3_b_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    SeparableConv2D_3_w_s_address0 <= tmp_8_fu_348_p1(7 - 1 downto 0);

    SeparableConv2D_3_w_s_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_3_w_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_3_w_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_200_p2)
    begin
        if ((((exitcond3_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_200_p2)
    begin
        if (((exitcond3_fu_200_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_1_fu_365_p3 <= 
        ap_const_lv15_0 when (tmp_13_fu_357_p3(0) = '1') else 
        tmp_12_fu_353_p1;
    buffer_2_fu_415_p2 <= std_logic_vector(unsigned(tmp_s_reg_534) + unsigned(buffer1_reg_158));
        buffer_cast_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(SeparableConv2D_3_b_s_q0),16));

    exitcond1_fu_278_p2 <= "1" when (out_w_reg_147 = ap_const_lv4_E) else "0";
    exitcond2_fu_232_p2 <= "1" when (out_h_reg_136 = ap_const_lv4_E) else "0";
    exitcond3_fu_200_p2 <= "1" when (out_d_reg_114 = ap_const_lv5_10) else "0";
    exitcond_fu_298_p2 <= "1" when (in_d_reg_168 = ap_const_lv4_8) else "0";
    in_d_1_fu_304_p2 <= std_logic_vector(unsigned(in_d_reg_168) + unsigned(ap_const_lv4_1));
    input_r_address0 <= tmp_6_fu_338_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_194_p2 <= std_logic_vector(unsigned(phi_mul1_reg_125) + unsigned(ap_const_lv12_C4));
    next_mul_fu_314_p2 <= std_logic_vector(unsigned(phi_mul_reg_179) + unsigned(ap_const_lv11_C4));
    out_d_2_fu_206_p2 <= std_logic_vector(unsigned(out_d_reg_114) + unsigned(ap_const_lv5_1));
    out_h_2_fu_238_p2 <= std_logic_vector(unsigned(out_h_reg_136) + unsigned(ap_const_lv4_1));
    out_w_2_fu_284_p2 <= std_logic_vector(unsigned(out_w_reg_147) + unsigned(ap_const_lv4_1));
    output_r_address0 <= tmp_4_fu_395_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buffer_1_fu_365_p3),16));

    output_r_we0_assign_proc : process(ap_CS_fsm_state6, exitcond_fu_298_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_298_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_256_p3),9));
    p_shl1_fu_256_p3 <= (out_h_reg_136 & ap_const_lv1_0);
    p_shl_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_244_p3),9));
    p_shl_fu_244_p3 <= (out_h_reg_136 & ap_const_lv4_0);
    phi_mul1_cast_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_125),13));
        tmp1_cast_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_378_p2),13));

    tmp1_fu_378_p2 <= std_logic_vector(signed(tmp_2_reg_473) + signed(tmp_23_cast4_reg_491));
    tmp_11_fu_217_p1 <= out_d_reg_114(4 - 1 downto 0);
    tmp_12_fu_353_p1 <= buffer1_reg_158(15 - 1 downto 0);
    tmp_13_fu_357_p3 <= buffer1_reg_158(15 downto 15);
    tmp_1_fu_221_p3 <= (tmp_11_reg_450 & ap_const_lv3_0);
        tmp_22_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_268_p2),12));

    tmp_23_cast4_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_147),9));
    tmp_23_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_147),11));
        tmp_26_cast_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_386_p2),32));

    tmp_28_cast2_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_reg_168),7));
    tmp_2_fu_268_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_252_p1) - unsigned(p_shl1_cast_fu_264_p1));
        tmp_31_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_329_p2),32));

    tmp_3_fu_386_p2 <= std_logic_vector(signed(tmp1_cast_fu_382_p1) + signed(phi_mul1_cast_reg_427));
    tmp_4_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_cast_fu_391_p1),64));
    tmp_5_fu_329_p2 <= std_logic_vector(unsigned(tmp_cast_fu_325_p1) + unsigned(tmp_22_cast_reg_478));
    tmp_6_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_cast_fu_334_p1),64));
    tmp_7_fu_343_p2 <= std_logic_vector(unsigned(tmp_1_reg_455) + unsigned(tmp_28_cast2_fu_310_p1));
    tmp_8_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_343_p2),64));
    tmp_9_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_114),64));
    tmp_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_320_p2),12));
    tmp_fu_320_p2 <= std_logic_vector(unsigned(phi_mul_reg_179) + unsigned(tmp_23_cast_reg_496));
end behav;
