-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity network is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_data_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    input_data_TVALID : IN STD_LOGIC;
    input_data_TREADY : OUT STD_LOGIC;
    input_data_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    input_data_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    input_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_data_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_data_TVALID : OUT STD_LOGIC;
    output_data_TREADY : IN STD_LOGIC;
    output_data_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_data_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "network,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.585000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=100,HLS_SYN_DSP=77,HLS_SYN_FF=10792,HLS_SYN_LUT=15216,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv49_1FFFFFFFFFFFF : STD_LOGIC_VECTOR (48 downto 0) := "1111111111111111111111111111111111111111111111111";
    constant ap_const_lv48_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_data_V_data_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_vld_in : STD_LOGIC;
    signal input_data_V_data_V_0_vld_out : STD_LOGIC;
    signal input_data_V_data_V_0_ack_in : STD_LOGIC;
    signal input_data_V_data_V_0_ack_out : STD_LOGIC;
    signal input_data_V_data_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_data_V_0_sel : STD_LOGIC;
    signal input_data_V_data_V_0_load_A : STD_LOGIC;
    signal input_data_V_data_V_0_load_B : STD_LOGIC;
    signal input_data_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_dest_V_0_vld_in : STD_LOGIC;
    signal input_data_V_dest_V_0_ack_out : STD_LOGIC;
    signal input_data_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_data_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_vld_in : STD_LOGIC;
    signal output_data_V_data_V_1_vld_out : STD_LOGIC;
    signal output_data_V_data_V_1_ack_in : STD_LOGIC;
    signal output_data_V_data_V_1_ack_out : STD_LOGIC;
    signal output_data_V_data_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_data_V_1_sel : STD_LOGIC;
    signal output_data_V_data_V_1_load_A : STD_LOGIC;
    signal output_data_V_data_V_1_load_B : STD_LOGIC;
    signal output_data_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_keep_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_keep_V_1_vld_in : STD_LOGIC;
    signal output_data_V_keep_V_1_vld_out : STD_LOGIC;
    signal output_data_V_keep_V_1_ack_in : STD_LOGIC;
    signal output_data_V_keep_V_1_ack_out : STD_LOGIC;
    signal output_data_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_keep_V_1_sel : STD_LOGIC;
    signal output_data_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_strb_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_strb_V_1_vld_in : STD_LOGIC;
    signal output_data_V_strb_V_1_vld_out : STD_LOGIC;
    signal output_data_V_strb_V_1_ack_in : STD_LOGIC;
    signal output_data_V_strb_V_1_ack_out : STD_LOGIC;
    signal output_data_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_strb_V_1_sel : STD_LOGIC;
    signal output_data_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_vld_in : STD_LOGIC;
    signal output_data_V_user_V_1_vld_out : STD_LOGIC;
    signal output_data_V_user_V_1_ack_in : STD_LOGIC;
    signal output_data_V_user_V_1_ack_out : STD_LOGIC;
    signal output_data_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_user_V_1_sel : STD_LOGIC;
    signal output_data_V_user_V_1_load_A : STD_LOGIC;
    signal output_data_V_user_V_1_load_B : STD_LOGIC;
    signal output_data_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_vld_in : STD_LOGIC;
    signal output_data_V_last_V_1_vld_out : STD_LOGIC;
    signal output_data_V_last_V_1_ack_in : STD_LOGIC;
    signal output_data_V_last_V_1_ack_out : STD_LOGIC;
    signal output_data_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_last_V_1_sel : STD_LOGIC;
    signal output_data_V_last_V_1_load_A : STD_LOGIC;
    signal output_data_V_last_V_1_load_B : STD_LOGIC;
    signal output_data_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_id_V_1_vld_in : STD_LOGIC;
    signal output_data_V_id_V_1_vld_out : STD_LOGIC;
    signal output_data_V_id_V_1_ack_in : STD_LOGIC;
    signal output_data_V_id_V_1_ack_out : STD_LOGIC;
    signal output_data_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_id_V_1_sel : STD_LOGIC;
    signal output_data_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_dest_V_1_vld_in : STD_LOGIC;
    signal output_data_V_dest_V_1_vld_out : STD_LOGIC;
    signal output_data_V_dest_V_1_ack_in : STD_LOGIC;
    signal output_data_V_dest_V_1_ack_out : STD_LOGIC;
    signal output_data_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_dest_V_1_sel : STD_LOGIC;
    signal output_data_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal SeparableConv2D_4_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    signal SeparableConv2D_4_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_4_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal Padding2D_0_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Padding2D_0_array_ce0 : STD_LOGIC;
    signal Padding2D_0_array_we0 : STD_LOGIC;
    signal Padding2D_0_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_0_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    signal Padding2D_0_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal Padding2D_0_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal SeparableConv2D_0_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_0_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_0_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_0_m_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SeparableConv2D_0_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_0_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_0_ar_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_0_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_0_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal MaxPooling2D_0_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal MaxPooling2D_0_heigh : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal MaxPooling2D_0_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal MaxPooling2D_0_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal MaxPooling2D_0_array_ce0 : STD_LOGIC;
    signal MaxPooling2D_0_array_we0 : STD_LOGIC;
    signal MaxPooling2D_0_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_1_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Padding2D_1_array_ce0 : STD_LOGIC;
    signal Padding2D_1_array_we0 : STD_LOGIC;
    signal Padding2D_1_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_1_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal Padding2D_1_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal Padding2D_1_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_1_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal SeparableConv2D_1_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal SeparableConv2D_1_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal SeparableConv2D_1_m_s_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal SeparableConv2D_1_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_1_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_1_ar_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal SeparableConv2D_1_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_1_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal MaxPooling2D_1_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal MaxPooling2D_1_heigh : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    signal MaxPooling2D_1_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    signal MaxPooling2D_1_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal MaxPooling2D_1_array_ce0 : STD_LOGIC;
    signal MaxPooling2D_1_array_we0 : STD_LOGIC;
    signal MaxPooling2D_1_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_2_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Padding2D_2_array_ce0 : STD_LOGIC;
    signal Padding2D_2_array_we0 : STD_LOGIC;
    signal Padding2D_2_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_2_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal Padding2D_2_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001001";
    signal Padding2D_2_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001001";
    signal SeparableConv2D_2_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal SeparableConv2D_2_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    signal SeparableConv2D_2_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    signal SeparableConv2D_2_m_s_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal SeparableConv2D_2_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_2_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_2_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_2_ar_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal SeparableConv2D_2_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_2_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_2_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal UpSampling2D_0_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal UpSampling2D_0_heigh : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal UpSampling2D_0_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal UpSampling2D_0_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal UpSampling2D_0_array_ce0 : STD_LOGIC;
    signal UpSampling2D_0_array_we0 : STD_LOGIC;
    signal UpSampling2D_0_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_3_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Padding2D_3_array_ce0 : STD_LOGIC;
    signal Padding2D_3_array_we0 : STD_LOGIC;
    signal Padding2D_3_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_3_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal Padding2D_3_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal Padding2D_3_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_3_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_3_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal SeparableConv2D_3_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal SeparableConv2D_3_m_s_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal SeparableConv2D_3_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_3_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_3_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_3_ar_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal SeparableConv2D_3_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_3_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_3_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal UpSampling2D_1_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal UpSampling2D_1_heigh : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal UpSampling2D_1_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal UpSampling2D_1_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal UpSampling2D_1_array_ce0 : STD_LOGIC;
    signal UpSampling2D_1_array_we0 : STD_LOGIC;
    signal UpSampling2D_1_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_4_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Padding2D_4_array_ce0 : STD_LOGIC;
    signal Padding2D_4_array_we0 : STD_LOGIC;
    signal Padding2D_4_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_4_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal Padding2D_4_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal Padding2D_4_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal SeparableConv2D_4_m_s_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_4_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_4_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_4_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_4_ar_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SeparableConv2D_4_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_4_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_4_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond2_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_enable_V_read_reg_1255 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal out_enable_V_read_reg_1255_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_376 : STD_LOGIC_VECTOR (47 downto 0);
    signal reg_768 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_775 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_782 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_788 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_794 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_800 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_807 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_814 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal reg_820 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_826 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_832 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_839 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_846 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal reg_852 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_858 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_864 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal reg_871 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_878 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal reg_884 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_890 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_length_fu_911_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal array_length_reg_1091 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal array_length_cast_fu_917_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal array_length_cast_reg_1096 : STD_LOGIC_VECTOR (48 downto 0);
    signal i_3_fu_927_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_s_fu_1038_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_s_reg_1226 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_pointwise_conv2d_fix_1_fu_588_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_588_ap_done : STD_LOGIC;
    signal exitcond_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state41_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state43_io : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state44_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_4_fu_1048_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal SeparableConv2D_4_ar_1_reg_1240 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_user_V_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_1245 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_1245_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_1250_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state41 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal input_0_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_0_array_ce0 : STD_LOGIC;
    signal input_0_array_we0 : STD_LOGIC;
    signal input_0_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_1_fu_387_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_387_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_387_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_387_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_387_input_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_padding2d_fix16_1_fu_387_input_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_387_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_padding2d_fix16_1_fu_387_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_387_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_387_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_4_fu_398_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_398_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_398_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_398_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_398_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_padding2d_fix16_4_fu_398_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_398_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_398_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_4_fu_398_MaxPooling2D_0_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_padding2d_fix16_4_fu_398_MaxPooling2D_0_array_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_409_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_409_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_409_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_409_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_409_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_padding2d_fix16_2_fu_409_input_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_409_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_padding2d_fix16_2_fu_409_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_409_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_409_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_3_fu_420_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_420_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_420_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_420_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_420_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_3_fu_420_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_420_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_420_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_3_fu_420_MaxPooling2D_1_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_padding2d_fix16_3_fu_420_MaxPooling2D_1_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_431_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_431_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_431_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_431_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_431_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_depthwise_conv2d_fix_1_fu_431_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_431_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_431_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_1_fu_431_Padding2D_4_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_depthwise_conv2d_fix_1_fu_431_Padding2D_4_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_446_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_446_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_446_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_446_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_446_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_depthwise_conv2d_fix_3_fu_446_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_446_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_446_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_3_fu_446_Padding2D_1_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_depthwise_conv2d_fix_3_fu_446_Padding2D_1_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_461_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_461_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_461_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_461_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_fu_461_Padding2D_3_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_depthwise_conv2d_fix_fu_461_Padding2D_3_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_476_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_476_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_476_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_476_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_2_fu_476_Padding2D_2_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_depthwise_conv2d_fix_2_fu_476_Padding2D_2_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_491_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_491_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_491_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_491_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_491_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_depthwise_conv2d_fix_4_fu_491_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_491_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_491_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_4_fu_491_Padding2D_0_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_depthwise_conv2d_fix_4_fu_491_Padding2D_0_array_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_506_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_506_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_506_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_506_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_506_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_pointwise_conv2d_fix_4_fu_506_output_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_506_output_r_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_506_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_4_fu_506_SeparableConv2D_0_m_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pointwise_conv2d_fix_4_fu_506_SeparableConv2D_0_m_s_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_520_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_520_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_520_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_520_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_520_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pointwise_conv2d_fix_2_fu_520_input_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_520_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pointwise_conv2d_fix_2_fu_520_output_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_520_output_r_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_520_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_3_fu_534_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_534_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_534_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_534_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_m_s_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_m_s_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_548_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_548_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_548_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_548_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_548_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pointwise_conv2d_fix_fu_548_input_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_548_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pointwise_conv2d_fix_fu_548_output_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_548_output_r_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_548_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_max_pooling2d_fix16_1_fu_562_ap_start : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_562_ap_done : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_562_ap_idle : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_562_ap_ready : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_562_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pooling2d_fix16_1_fu_562_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_562_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_562_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_max_pooling2d_fix16_1_fu_562_SeparableConv2D_0_ar_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pooling2d_fix16_1_fu_562_SeparableConv2D_0_ar_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_575_ap_start : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_575_ap_done : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_575_ap_idle : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_575_ap_ready : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_575_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pooling2d_fix16_fu_575_input_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_575_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pooling2d_fix16_fu_575_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_575_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_575_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_1_fu_588_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_588_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_588_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pointwise_conv2d_fix_1_fu_588_output_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_588_output_r_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_588_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_1_fu_588_SeparableConv2D_4_m_s_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_pointwise_conv2d_fix_1_fu_588_SeparableConv2D_4_m_s_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_600_ap_start : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_600_ap_done : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_600_ap_idle : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_600_ap_ready : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_600_SeparableConv2D_3_ar_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_up_sampling2d_fix16_fu_600_SeparableConv2D_3_ar_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_we0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_up_sampling2d_fix16_1_fu_613_ap_start : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_613_ap_done : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_613_ap_idle : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_613_ap_ready : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_613_SeparableConv2D_2_ar_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_up_sampling2d_fix16_1_fu_613_SeparableConv2D_2_ar_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_we0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_fu_626_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_fu_626_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_fu_626_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_fu_626_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_fu_626_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_fu_626_input_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_626_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_fu_626_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_626_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_626_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_365 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_1_fu_387_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_padding2d_fix16_4_fu_398_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_padding2d_fix16_2_fu_409_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_padding2d_fix16_3_fu_420_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_depthwise_conv2d_fix_1_fu_431_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_depthwise_conv2d_fix_3_fu_446_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_depthwise_conv2d_fix_fu_461_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_depthwise_conv2d_fix_2_fu_476_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_depthwise_conv2d_fix_4_fu_491_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_pointwise_conv2d_fix_4_fu_506_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_pointwise_conv2d_fix_2_fu_520_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_pointwise_conv2d_fix_3_fu_534_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_pointwise_conv2d_fix_fu_548_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_max_pooling2d_fix16_1_fu_562_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_max_pooling2d_fix16_fu_575_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_pointwise_conv2d_fix_1_fu_588_ap_start_reg : STD_LOGIC := '0';
    signal grp_up_sampling2d_fix16_fu_600_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_up_sampling2d_fix16_1_fu_613_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_padding2d_fix16_fu_626_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_ignore_call0 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_70_fu_938_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i1_cast2_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_enable_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal array_length_fu_911_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_length_fu_911_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i1_cast_fu_1059_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp1_fu_1074_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_1074_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_block_state46 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal array_length_fu_911_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal array_length_fu_911_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp1_fu_1074_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1074_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component padding2d_fix16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        MaxPooling2D_0_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        MaxPooling2D_0_array_ce0 : OUT STD_LOGIC;
        MaxPooling2D_0_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        MaxPooling2D_1_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        MaxPooling2D_1_array_ce0 : OUT STD_LOGIC;
        MaxPooling2D_1_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_4_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        Padding2D_4_array_ce0 : OUT STD_LOGIC;
        Padding2D_4_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_1_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        Padding2D_1_array_ce0 : OUT STD_LOGIC;
        Padding2D_1_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_3_m_s_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SeparableConv2D_3_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_3_m_s_we0 : OUT STD_LOGIC;
        SeparableConv2D_3_m_s_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_3_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_3_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        Padding2D_3_array_ce0 : OUT STD_LOGIC;
        Padding2D_3_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_2_m_s_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        SeparableConv2D_2_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_2_m_s_we0 : OUT STD_LOGIC;
        SeparableConv2D_2_m_s_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_2_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_2_array_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Padding2D_2_array_ce0 : OUT STD_LOGIC;
        Padding2D_2_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_0_array_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Padding2D_0_array_ce0 : OUT STD_LOGIC;
        Padding2D_0_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_0_m_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SeparableConv2D_0_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_0_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_1_ar_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SeparableConv2D_1_ar_ce0 : OUT STD_LOGIC;
        SeparableConv2D_1_ar_we0 : OUT STD_LOGIC;
        SeparableConv2D_1_ar_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_1_m_s_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        SeparableConv2D_1_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_1_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component max_pooling2d_fix16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_0_ar_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        SeparableConv2D_0_ar_ce0 : OUT STD_LOGIC;
        SeparableConv2D_0_ar_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component max_pooling2d_fix16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_4_m_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        SeparableConv2D_4_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_4_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component up_sampling2d_fix16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_3_ar_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        SeparableConv2D_3_ar_ce0 : OUT STD_LOGIC;
        SeparableConv2D_3_ar_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        UpSampling2D_1_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        UpSampling2D_1_array_ce0 : OUT STD_LOGIC;
        UpSampling2D_1_array_we0 : OUT STD_LOGIC;
        UpSampling2D_1_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component up_sampling2d_fix16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_2_ar_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        SeparableConv2D_2_ar_ce0 : OUT STD_LOGIC;
        SeparableConv2D_2_ar_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        UpSampling2D_0_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        UpSampling2D_0_array_ce0 : OUT STD_LOGIC;
        UpSampling2D_0_array_we0 : OUT STD_LOGIC;
        UpSampling2D_0_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_mul_mul_16ns_16ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component network_Padding2D_0_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_SeparableConv2D_0_m_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_SeparableConv2D_0_ar IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_MaxPooling2D_0_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_1_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_SeparableConv2D_1_ar IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_MaxPooling2D_1_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_2_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_3_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_4_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_input_0_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    Padding2D_0_array_U : component network_Padding2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_0_array_address0,
        ce0 => Padding2D_0_array_ce0,
        we0 => Padding2D_0_array_we0,
        d0 => grp_padding2d_fix16_fu_626_output_r_d0,
        q0 => Padding2D_0_array_q0);

    SeparableConv2D_0_m_s_U : component network_SeparableConv2D_0_m_s
    generic map (
        DataWidth => 16,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_0_m_s_address0,
        ce0 => SeparableConv2D_0_m_s_ce0,
        we0 => SeparableConv2D_0_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_4_fu_491_output_r_d0,
        q0 => SeparableConv2D_0_m_s_q0);

    SeparableConv2D_0_ar_U : component network_SeparableConv2D_0_ar
    generic map (
        DataWidth => 16,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_0_ar_address0,
        ce0 => SeparableConv2D_0_ar_ce0,
        we0 => SeparableConv2D_0_ar_we0,
        d0 => grp_pointwise_conv2d_fix_4_fu_506_output_r_d0,
        q0 => SeparableConv2D_0_ar_q0);

    MaxPooling2D_0_array_U : component network_MaxPooling2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => MaxPooling2D_0_array_address0,
        ce0 => MaxPooling2D_0_array_ce0,
        we0 => MaxPooling2D_0_array_we0,
        d0 => grp_max_pooling2d_fix16_1_fu_562_output_r_d0,
        q0 => MaxPooling2D_0_array_q0);

    Padding2D_1_array_U : component network_Padding2D_1_array
    generic map (
        DataWidth => 16,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_1_array_address0,
        ce0 => Padding2D_1_array_ce0,
        we0 => Padding2D_1_array_we0,
        d0 => grp_padding2d_fix16_4_fu_398_output_r_d0,
        q0 => Padding2D_1_array_q0);

    SeparableConv2D_1_m_s_U : component network_MaxPooling2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_1_m_s_address0,
        ce0 => SeparableConv2D_1_m_s_ce0,
        we0 => SeparableConv2D_1_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_3_fu_446_output_r_d0,
        q0 => SeparableConv2D_1_m_s_q0);

    SeparableConv2D_1_ar_U : component network_SeparableConv2D_1_ar
    generic map (
        DataWidth => 16,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_1_ar_address0,
        ce0 => SeparableConv2D_1_ar_ce0,
        we0 => SeparableConv2D_1_ar_we0,
        d0 => grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_d0,
        q0 => SeparableConv2D_1_ar_q0);

    MaxPooling2D_1_array_U : component network_MaxPooling2D_1_array
    generic map (
        DataWidth => 16,
        AddressRange => 392,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => MaxPooling2D_1_array_address0,
        ce0 => MaxPooling2D_1_array_ce0,
        we0 => MaxPooling2D_1_array_we0,
        d0 => grp_max_pooling2d_fix16_fu_575_output_r_d0,
        q0 => MaxPooling2D_1_array_q0);

    Padding2D_2_array_U : component network_Padding2D_2_array
    generic map (
        DataWidth => 16,
        AddressRange => 648,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_2_array_address0,
        ce0 => Padding2D_2_array_ce0,
        we0 => Padding2D_2_array_we0,
        d0 => grp_padding2d_fix16_3_fu_420_output_r_d0,
        q0 => Padding2D_2_array_q0);

    SeparableConv2D_2_m_s_U : component network_MaxPooling2D_1_array
    generic map (
        DataWidth => 16,
        AddressRange => 392,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_2_m_s_address0,
        ce0 => SeparableConv2D_2_m_s_ce0,
        we0 => SeparableConv2D_2_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_d0,
        q0 => SeparableConv2D_2_m_s_q0);

    SeparableConv2D_2_ar_U : component network_MaxPooling2D_1_array
    generic map (
        DataWidth => 16,
        AddressRange => 392,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_2_ar_address0,
        ce0 => SeparableConv2D_2_ar_ce0,
        we0 => SeparableConv2D_2_ar_we0,
        d0 => grp_pointwise_conv2d_fix_fu_548_output_r_d0,
        q0 => SeparableConv2D_2_ar_q0);

    UpSampling2D_0_array_U : component network_SeparableConv2D_1_ar
    generic map (
        DataWidth => 16,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => UpSampling2D_0_array_address0,
        ce0 => UpSampling2D_0_array_ce0,
        we0 => UpSampling2D_0_array_we0,
        d0 => grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_d0,
        q0 => UpSampling2D_0_array_q0);

    Padding2D_3_array_U : component network_Padding2D_3_array
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_3_array_address0,
        ce0 => Padding2D_3_array_ce0,
        we0 => Padding2D_3_array_we0,
        d0 => grp_padding2d_fix16_2_fu_409_output_r_d0,
        q0 => Padding2D_3_array_q0);

    SeparableConv2D_3_m_s_U : component network_SeparableConv2D_1_ar
    generic map (
        DataWidth => 16,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_3_m_s_address0,
        ce0 => SeparableConv2D_3_m_s_ce0,
        we0 => SeparableConv2D_3_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_d0,
        q0 => SeparableConv2D_3_m_s_q0);

    SeparableConv2D_3_ar_U : component network_MaxPooling2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_3_ar_address0,
        ce0 => SeparableConv2D_3_ar_ce0,
        we0 => SeparableConv2D_3_ar_we0,
        d0 => grp_pointwise_conv2d_fix_2_fu_520_output_r_d0,
        q0 => SeparableConv2D_3_ar_q0);

    UpSampling2D_1_array_U : component network_SeparableConv2D_0_ar
    generic map (
        DataWidth => 16,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => UpSampling2D_1_array_address0,
        ce0 => UpSampling2D_1_array_ce0,
        we0 => UpSampling2D_1_array_we0,
        d0 => grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_d0,
        q0 => UpSampling2D_1_array_q0);

    Padding2D_4_array_U : component network_Padding2D_4_array
    generic map (
        DataWidth => 16,
        AddressRange => 14400,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_4_array_address0,
        ce0 => Padding2D_4_array_ce0,
        we0 => Padding2D_4_array_we0,
        d0 => grp_padding2d_fix16_1_fu_387_output_r_d0,
        q0 => Padding2D_4_array_q0);

    SeparableConv2D_4_m_s_U : component network_SeparableConv2D_0_ar
    generic map (
        DataWidth => 16,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_4_m_s_address0,
        ce0 => SeparableConv2D_4_m_s_ce0,
        we0 => SeparableConv2D_4_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_1_fu_431_output_r_d0,
        q0 => SeparableConv2D_4_m_s_q0);

    SeparableConv2D_4_ar_U : component network_SeparableConv2D_0_m_s
    generic map (
        DataWidth => 16,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_4_ar_address0,
        ce0 => SeparableConv2D_4_ar_ce0,
        we0 => SeparableConv2D_4_ar_we0,
        d0 => grp_pointwise_conv2d_fix_1_fu_588_output_r_d0,
        q0 => SeparableConv2D_4_ar_q0);

    network_AXILiteS_s_axi_U : component network_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    input_0_array_U : component network_input_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_0_array_address0,
        ce0 => input_0_array_ce0,
        we0 => input_0_array_we0,
        d0 => input_data_V_data_V_0_data_out,
        q0 => input_0_array_q0);

    grp_padding2d_fix16_1_fu_387 : component padding2d_fix16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_1_fu_387_ap_start,
        ap_done => grp_padding2d_fix16_1_fu_387_ap_done,
        ap_idle => grp_padding2d_fix16_1_fu_387_ap_idle,
        ap_ready => grp_padding2d_fix16_1_fu_387_ap_ready,
        input_depth => reg_878,
        input_height => reg_884,
        input_width => reg_890,
        input_r_address0 => grp_padding2d_fix16_1_fu_387_input_r_address0,
        input_r_ce0 => grp_padding2d_fix16_1_fu_387_input_r_ce0,
        input_r_q0 => UpSampling2D_1_array_q0,
        output_r_address0 => grp_padding2d_fix16_1_fu_387_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_1_fu_387_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_1_fu_387_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_1_fu_387_output_r_d0);

    grp_padding2d_fix16_4_fu_398 : component padding2d_fix16_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_4_fu_398_ap_start,
        ap_done => grp_padding2d_fix16_4_fu_398_ap_done,
        ap_idle => grp_padding2d_fix16_4_fu_398_ap_idle,
        ap_ready => grp_padding2d_fix16_4_fu_398_ap_ready,
        input_depth => reg_782,
        input_height => reg_788,
        input_width => reg_794,
        output_r_address0 => grp_padding2d_fix16_4_fu_398_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_4_fu_398_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_4_fu_398_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_4_fu_398_output_r_d0,
        MaxPooling2D_0_array_address0 => grp_padding2d_fix16_4_fu_398_MaxPooling2D_0_array_address0,
        MaxPooling2D_0_array_ce0 => grp_padding2d_fix16_4_fu_398_MaxPooling2D_0_array_ce0,
        MaxPooling2D_0_array_q0 => MaxPooling2D_0_array_q0);

    grp_padding2d_fix16_2_fu_409 : component padding2d_fix16_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_2_fu_409_ap_start,
        ap_done => grp_padding2d_fix16_2_fu_409_ap_done,
        ap_idle => grp_padding2d_fix16_2_fu_409_ap_idle,
        ap_ready => grp_padding2d_fix16_2_fu_409_ap_ready,
        input_depth => reg_846,
        input_height => reg_852,
        input_width => reg_858,
        input_r_address0 => grp_padding2d_fix16_2_fu_409_input_r_address0,
        input_r_ce0 => grp_padding2d_fix16_2_fu_409_input_r_ce0,
        input_r_q0 => UpSampling2D_0_array_q0,
        output_r_address0 => grp_padding2d_fix16_2_fu_409_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_2_fu_409_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_2_fu_409_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_2_fu_409_output_r_d0);

    grp_padding2d_fix16_3_fu_420 : component padding2d_fix16_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_3_fu_420_ap_start,
        ap_done => grp_padding2d_fix16_3_fu_420_ap_done,
        ap_idle => grp_padding2d_fix16_3_fu_420_ap_idle,
        ap_ready => grp_padding2d_fix16_3_fu_420_ap_ready,
        input_depth => reg_814,
        input_height => reg_820,
        input_width => reg_826,
        output_r_address0 => grp_padding2d_fix16_3_fu_420_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_3_fu_420_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_3_fu_420_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_3_fu_420_output_r_d0,
        MaxPooling2D_1_array_address0 => grp_padding2d_fix16_3_fu_420_MaxPooling2D_1_array_address0,
        MaxPooling2D_1_array_ce0 => grp_padding2d_fix16_3_fu_420_MaxPooling2D_1_array_ce0,
        MaxPooling2D_1_array_q0 => MaxPooling2D_1_array_q0);

    grp_depthwise_conv2d_fix_1_fu_431 : component depthwise_conv2d_fix_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_1_fu_431_ap_start,
        ap_done => grp_depthwise_conv2d_fix_1_fu_431_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_1_fu_431_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_1_fu_431_ap_ready,
        input_height => Padding2D_4_height,
        input_width => Padding2D_4_width,
        output_depth => Padding2D_4_depth,
        output_height => SeparableConv2D_4_he,
        output_width => SeparableConv2D_4_wi,
        output_r_address0 => grp_depthwise_conv2d_fix_1_fu_431_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_1_fu_431_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_1_fu_431_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_1_fu_431_output_r_d0,
        output_r_q0 => SeparableConv2D_4_m_s_q0,
        Padding2D_4_array_address0 => grp_depthwise_conv2d_fix_1_fu_431_Padding2D_4_array_address0,
        Padding2D_4_array_ce0 => grp_depthwise_conv2d_fix_1_fu_431_Padding2D_4_array_ce0,
        Padding2D_4_array_q0 => Padding2D_4_array_q0);

    grp_depthwise_conv2d_fix_3_fu_446 : component depthwise_conv2d_fix_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_3_fu_446_ap_start,
        ap_done => grp_depthwise_conv2d_fix_3_fu_446_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_3_fu_446_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_3_fu_446_ap_ready,
        input_height => Padding2D_1_height,
        input_width => Padding2D_1_width,
        output_depth => Padding2D_1_depth,
        output_height => reg_800,
        output_width => reg_807,
        output_r_address0 => grp_depthwise_conv2d_fix_3_fu_446_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_3_fu_446_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_3_fu_446_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_3_fu_446_output_r_d0,
        output_r_q0 => SeparableConv2D_1_m_s_q0,
        Padding2D_1_array_address0 => grp_depthwise_conv2d_fix_3_fu_446_Padding2D_1_array_address0,
        Padding2D_1_array_ce0 => grp_depthwise_conv2d_fix_3_fu_446_Padding2D_1_array_ce0,
        Padding2D_1_array_q0 => Padding2D_1_array_q0);

    grp_depthwise_conv2d_fix_fu_461 : component depthwise_conv2d_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_fu_461_ap_start,
        ap_done => grp_depthwise_conv2d_fix_fu_461_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_fu_461_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_fu_461_ap_ready,
        input_height => Padding2D_3_height,
        input_width => Padding2D_3_width,
        output_depth => Padding2D_3_depth,
        output_height => reg_864,
        output_width => reg_871,
        SeparableConv2D_3_m_s_address0 => grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_address0,
        SeparableConv2D_3_m_s_ce0 => grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_ce0,
        SeparableConv2D_3_m_s_we0 => grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_we0,
        SeparableConv2D_3_m_s_d0 => grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_d0,
        SeparableConv2D_3_m_s_q0 => SeparableConv2D_3_m_s_q0,
        Padding2D_3_array_address0 => grp_depthwise_conv2d_fix_fu_461_Padding2D_3_array_address0,
        Padding2D_3_array_ce0 => grp_depthwise_conv2d_fix_fu_461_Padding2D_3_array_ce0,
        Padding2D_3_array_q0 => Padding2D_3_array_q0);

    grp_depthwise_conv2d_fix_2_fu_476 : component depthwise_conv2d_fix_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_2_fu_476_ap_start,
        ap_done => grp_depthwise_conv2d_fix_2_fu_476_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_2_fu_476_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_2_fu_476_ap_ready,
        input_height => Padding2D_2_height,
        input_width => Padding2D_2_width,
        output_depth => Padding2D_2_depth,
        output_height => reg_832,
        output_width => reg_839,
        SeparableConv2D_2_m_s_address0 => grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_address0,
        SeparableConv2D_2_m_s_ce0 => grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_ce0,
        SeparableConv2D_2_m_s_we0 => grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_we0,
        SeparableConv2D_2_m_s_d0 => grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_d0,
        SeparableConv2D_2_m_s_q0 => SeparableConv2D_2_m_s_q0,
        Padding2D_2_array_address0 => grp_depthwise_conv2d_fix_2_fu_476_Padding2D_2_array_address0,
        Padding2D_2_array_ce0 => grp_depthwise_conv2d_fix_2_fu_476_Padding2D_2_array_ce0,
        Padding2D_2_array_q0 => Padding2D_2_array_q0);

    grp_depthwise_conv2d_fix_4_fu_491 : component depthwise_conv2d_fix_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_4_fu_491_ap_start,
        ap_done => grp_depthwise_conv2d_fix_4_fu_491_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_4_fu_491_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_4_fu_491_ap_ready,
        input_height => Padding2D_0_height,
        input_width => Padding2D_0_width,
        output_depth => Padding2D_0_depth,
        output_height => reg_768,
        output_width => reg_775,
        output_r_address0 => grp_depthwise_conv2d_fix_4_fu_491_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_4_fu_491_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_4_fu_491_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_4_fu_491_output_r_d0,
        output_r_q0 => SeparableConv2D_0_m_s_q0,
        Padding2D_0_array_address0 => grp_depthwise_conv2d_fix_4_fu_491_Padding2D_0_array_address0,
        Padding2D_0_array_ce0 => grp_depthwise_conv2d_fix_4_fu_491_Padding2D_0_array_ce0,
        Padding2D_0_array_q0 => Padding2D_0_array_q0);

    grp_pointwise_conv2d_fix_4_fu_506 : component pointwise_conv2d_fix_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_4_fu_506_ap_start,
        ap_done => grp_pointwise_conv2d_fix_4_fu_506_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_4_fu_506_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_4_fu_506_ap_ready,
        input_depth => Padding2D_0_depth,
        input_height => reg_768,
        input_width => reg_775,
        output_depth => SeparableConv2D_0_de,
        output_r_address0 => grp_pointwise_conv2d_fix_4_fu_506_output_r_address0,
        output_r_ce0 => grp_pointwise_conv2d_fix_4_fu_506_output_r_ce0,
        output_r_we0 => grp_pointwise_conv2d_fix_4_fu_506_output_r_we0,
        output_r_d0 => grp_pointwise_conv2d_fix_4_fu_506_output_r_d0,
        SeparableConv2D_0_m_s_address0 => grp_pointwise_conv2d_fix_4_fu_506_SeparableConv2D_0_m_s_address0,
        SeparableConv2D_0_m_s_ce0 => grp_pointwise_conv2d_fix_4_fu_506_SeparableConv2D_0_m_s_ce0,
        SeparableConv2D_0_m_s_q0 => SeparableConv2D_0_m_s_q0);

    grp_pointwise_conv2d_fix_2_fu_520 : component pointwise_conv2d_fix_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_2_fu_520_ap_start,
        ap_done => grp_pointwise_conv2d_fix_2_fu_520_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_2_fu_520_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_2_fu_520_ap_ready,
        input_depth => Padding2D_3_depth,
        input_height => reg_864,
        input_width => reg_871,
        input_r_address0 => grp_pointwise_conv2d_fix_2_fu_520_input_r_address0,
        input_r_ce0 => grp_pointwise_conv2d_fix_2_fu_520_input_r_ce0,
        input_r_q0 => SeparableConv2D_3_m_s_q0,
        output_depth => SeparableConv2D_3_de,
        output_r_address0 => grp_pointwise_conv2d_fix_2_fu_520_output_r_address0,
        output_r_ce0 => grp_pointwise_conv2d_fix_2_fu_520_output_r_ce0,
        output_r_we0 => grp_pointwise_conv2d_fix_2_fu_520_output_r_we0,
        output_r_d0 => grp_pointwise_conv2d_fix_2_fu_520_output_r_d0);

    grp_pointwise_conv2d_fix_3_fu_534 : component pointwise_conv2d_fix_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_3_fu_534_ap_start,
        ap_done => grp_pointwise_conv2d_fix_3_fu_534_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_3_fu_534_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_3_fu_534_ap_ready,
        input_depth => Padding2D_1_depth,
        input_height => reg_800,
        input_width => reg_807,
        output_depth => SeparableConv2D_1_de,
        SeparableConv2D_1_ar_address0 => grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_address0,
        SeparableConv2D_1_ar_ce0 => grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_ce0,
        SeparableConv2D_1_ar_we0 => grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_we0,
        SeparableConv2D_1_ar_d0 => grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_d0,
        SeparableConv2D_1_m_s_address0 => grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_m_s_address0,
        SeparableConv2D_1_m_s_ce0 => grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_m_s_ce0,
        SeparableConv2D_1_m_s_q0 => SeparableConv2D_1_m_s_q0);

    grp_pointwise_conv2d_fix_fu_548 : component pointwise_conv2d_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_fu_548_ap_start,
        ap_done => grp_pointwise_conv2d_fix_fu_548_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_fu_548_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_fu_548_ap_ready,
        input_depth => Padding2D_2_depth,
        input_height => reg_832,
        input_width => reg_839,
        input_r_address0 => grp_pointwise_conv2d_fix_fu_548_input_r_address0,
        input_r_ce0 => grp_pointwise_conv2d_fix_fu_548_input_r_ce0,
        input_r_q0 => SeparableConv2D_2_m_s_q0,
        output_depth => SeparableConv2D_2_de,
        output_r_address0 => grp_pointwise_conv2d_fix_fu_548_output_r_address0,
        output_r_ce0 => grp_pointwise_conv2d_fix_fu_548_output_r_ce0,
        output_r_we0 => grp_pointwise_conv2d_fix_fu_548_output_r_we0,
        output_r_d0 => grp_pointwise_conv2d_fix_fu_548_output_r_d0);

    grp_max_pooling2d_fix16_1_fu_562 : component max_pooling2d_fix16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pooling2d_fix16_1_fu_562_ap_start,
        ap_done => grp_max_pooling2d_fix16_1_fu_562_ap_done,
        ap_idle => grp_max_pooling2d_fix16_1_fu_562_ap_idle,
        ap_ready => grp_max_pooling2d_fix16_1_fu_562_ap_ready,
        input_height => reg_768,
        input_width => reg_775,
        output_depth => reg_782,
        output_height => reg_788,
        output_width => reg_794,
        output_r_address0 => grp_max_pooling2d_fix16_1_fu_562_output_r_address0,
        output_r_ce0 => grp_max_pooling2d_fix16_1_fu_562_output_r_ce0,
        output_r_we0 => grp_max_pooling2d_fix16_1_fu_562_output_r_we0,
        output_r_d0 => grp_max_pooling2d_fix16_1_fu_562_output_r_d0,
        output_r_q0 => MaxPooling2D_0_array_q0,
        SeparableConv2D_0_ar_address0 => grp_max_pooling2d_fix16_1_fu_562_SeparableConv2D_0_ar_address0,
        SeparableConv2D_0_ar_ce0 => grp_max_pooling2d_fix16_1_fu_562_SeparableConv2D_0_ar_ce0,
        SeparableConv2D_0_ar_q0 => SeparableConv2D_0_ar_q0);

    grp_max_pooling2d_fix16_fu_575 : component max_pooling2d_fix16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pooling2d_fix16_fu_575_ap_start,
        ap_done => grp_max_pooling2d_fix16_fu_575_ap_done,
        ap_idle => grp_max_pooling2d_fix16_fu_575_ap_idle,
        ap_ready => grp_max_pooling2d_fix16_fu_575_ap_ready,
        input_height => reg_800,
        input_width => reg_807,
        input_r_address0 => grp_max_pooling2d_fix16_fu_575_input_r_address0,
        input_r_ce0 => grp_max_pooling2d_fix16_fu_575_input_r_ce0,
        input_r_q0 => SeparableConv2D_1_ar_q0,
        output_depth => reg_814,
        output_height => reg_820,
        output_width => reg_826,
        output_r_address0 => grp_max_pooling2d_fix16_fu_575_output_r_address0,
        output_r_ce0 => grp_max_pooling2d_fix16_fu_575_output_r_ce0,
        output_r_we0 => grp_max_pooling2d_fix16_fu_575_output_r_we0,
        output_r_d0 => grp_max_pooling2d_fix16_fu_575_output_r_d0,
        output_r_q0 => MaxPooling2D_1_array_q0);

    grp_pointwise_conv2d_fix_1_fu_588 : component pointwise_conv2d_fix_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_1_fu_588_ap_start,
        ap_done => grp_pointwise_conv2d_fix_1_fu_588_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_1_fu_588_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_1_fu_588_ap_ready,
        input_depth => Padding2D_4_depth,
        input_height => SeparableConv2D_4_he,
        input_width => SeparableConv2D_4_wi,
        output_depth => SeparableConv2D_4_de,
        output_r_address0 => grp_pointwise_conv2d_fix_1_fu_588_output_r_address0,
        output_r_ce0 => grp_pointwise_conv2d_fix_1_fu_588_output_r_ce0,
        output_r_we0 => grp_pointwise_conv2d_fix_1_fu_588_output_r_we0,
        output_r_d0 => grp_pointwise_conv2d_fix_1_fu_588_output_r_d0,
        SeparableConv2D_4_m_s_address0 => grp_pointwise_conv2d_fix_1_fu_588_SeparableConv2D_4_m_s_address0,
        SeparableConv2D_4_m_s_ce0 => grp_pointwise_conv2d_fix_1_fu_588_SeparableConv2D_4_m_s_ce0,
        SeparableConv2D_4_m_s_q0 => SeparableConv2D_4_m_s_q0);

    grp_up_sampling2d_fix16_fu_600 : component up_sampling2d_fix16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_up_sampling2d_fix16_fu_600_ap_start,
        ap_done => grp_up_sampling2d_fix16_fu_600_ap_done,
        ap_idle => grp_up_sampling2d_fix16_fu_600_ap_idle,
        ap_ready => grp_up_sampling2d_fix16_fu_600_ap_ready,
        input_height => reg_864,
        input_width => reg_871,
        output_depth => reg_878,
        output_height => reg_884,
        output_width => reg_890,
        SeparableConv2D_3_ar_address0 => grp_up_sampling2d_fix16_fu_600_SeparableConv2D_3_ar_address0,
        SeparableConv2D_3_ar_ce0 => grp_up_sampling2d_fix16_fu_600_SeparableConv2D_3_ar_ce0,
        SeparableConv2D_3_ar_q0 => SeparableConv2D_3_ar_q0,
        UpSampling2D_1_array_address0 => grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_address0,
        UpSampling2D_1_array_ce0 => grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_ce0,
        UpSampling2D_1_array_we0 => grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_we0,
        UpSampling2D_1_array_d0 => grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_d0);

    grp_up_sampling2d_fix16_1_fu_613 : component up_sampling2d_fix16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_up_sampling2d_fix16_1_fu_613_ap_start,
        ap_done => grp_up_sampling2d_fix16_1_fu_613_ap_done,
        ap_idle => grp_up_sampling2d_fix16_1_fu_613_ap_idle,
        ap_ready => grp_up_sampling2d_fix16_1_fu_613_ap_ready,
        input_height => reg_832,
        input_width => reg_839,
        output_depth => reg_846,
        output_height => reg_852,
        output_width => reg_858,
        SeparableConv2D_2_ar_address0 => grp_up_sampling2d_fix16_1_fu_613_SeparableConv2D_2_ar_address0,
        SeparableConv2D_2_ar_ce0 => grp_up_sampling2d_fix16_1_fu_613_SeparableConv2D_2_ar_ce0,
        SeparableConv2D_2_ar_q0 => SeparableConv2D_2_ar_q0,
        UpSampling2D_0_array_address0 => grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_address0,
        UpSampling2D_0_array_ce0 => grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_ce0,
        UpSampling2D_0_array_we0 => grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_we0,
        UpSampling2D_0_array_d0 => grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_d0);

    grp_padding2d_fix16_fu_626 : component padding2d_fix16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_fu_626_ap_start,
        ap_done => grp_padding2d_fix16_fu_626_ap_done,
        ap_idle => grp_padding2d_fix16_fu_626_ap_idle,
        ap_ready => grp_padding2d_fix16_fu_626_ap_ready,
        input_r_address0 => grp_padding2d_fix16_fu_626_input_r_address0,
        input_r_ce0 => grp_padding2d_fix16_fu_626_input_r_ce0,
        input_r_q0 => input_0_array_q0,
        output_r_address0 => grp_padding2d_fix16_fu_626_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_fu_626_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_fu_626_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_fu_626_output_r_d0);

    network_mul_mul_16ns_16ns_32_1_1_U149 : component network_mul_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp1_fu_1074_p0,
        din1 => tmp1_fu_1074_p1,
        dout => tmp1_fu_1074_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state41) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_pointwise_conv2d_fix_1_fu_588_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state41)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state41);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_pointwise_conv2d_fix_1_fu_588_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_1_fu_431_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_1_fu_431_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    grp_depthwise_conv2d_fix_1_fu_431_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_1_fu_431_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_1_fu_431_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_2_fu_476_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_2_fu_476_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_depthwise_conv2d_fix_2_fu_476_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_2_fu_476_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_2_fu_476_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_3_fu_446_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_3_fu_446_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_depthwise_conv2d_fix_3_fu_446_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_3_fu_446_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_3_fu_446_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_4_fu_491_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_4_fu_491_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_depthwise_conv2d_fix_4_fu_491_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_4_fu_491_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_4_fu_491_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_fu_461_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_fu_461_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    grp_depthwise_conv2d_fix_fu_461_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_fu_461_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_fu_461_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling2d_fix16_1_fu_562_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pooling2d_fix16_1_fu_562_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_max_pooling2d_fix16_1_fu_562_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling2d_fix16_1_fu_562_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling2d_fix16_1_fu_562_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling2d_fix16_fu_575_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pooling2d_fix16_fu_575_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_max_pooling2d_fix16_fu_575_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling2d_fix16_fu_575_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling2d_fix16_fu_575_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_1_fu_387_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_1_fu_387_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_padding2d_fix16_1_fu_387_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_1_fu_387_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_1_fu_387_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_2_fu_409_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_2_fu_409_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    grp_padding2d_fix16_2_fu_409_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_2_fu_409_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_2_fu_409_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_3_fu_420_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_3_fu_420_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_padding2d_fix16_3_fu_420_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_3_fu_420_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_3_fu_420_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_4_fu_398_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_4_fu_398_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_padding2d_fix16_4_fu_398_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_4_fu_398_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_4_fu_398_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_fu_626_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_fu_626_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond2_fu_921_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_padding2d_fix16_fu_626_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_fu_626_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_fu_626_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_1_fu_588_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_1_fu_588_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    grp_pointwise_conv2d_fix_1_fu_588_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_1_fu_588_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_1_fu_588_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_2_fu_520_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_2_fu_520_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    grp_pointwise_conv2d_fix_2_fu_520_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_2_fu_520_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_2_fu_520_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_3_fu_534_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_3_fu_534_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_pointwise_conv2d_fix_3_fu_534_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_3_fu_534_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_3_fu_534_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_4_fu_506_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_4_fu_506_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_pointwise_conv2d_fix_4_fu_506_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_4_fu_506_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_4_fu_506_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_fu_548_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_fu_548_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_pointwise_conv2d_fix_fu_548_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_fu_548_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_fu_548_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_up_sampling2d_fix16_1_fu_613_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_up_sampling2d_fix16_1_fu_613_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_up_sampling2d_fix16_1_fu_613_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_up_sampling2d_fix16_1_fu_613_ap_ready = ap_const_logic_1)) then 
                    grp_up_sampling2d_fix16_1_fu_613_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_up_sampling2d_fix16_fu_600_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_up_sampling2d_fix16_fu_600_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_up_sampling2d_fix16_fu_600_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_up_sampling2d_fix16_fu_600_ap_ready = ap_const_logic_1)) then 
                    grp_up_sampling2d_fix16_fu_600_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_data_V_0_ack_out = ap_const_logic_1) and (input_data_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_data_V_0_sel_rd <= not(input_data_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_data_V_0_ack_in = ap_const_logic_1) and (input_data_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_data_V_0_sel_wr <= not(input_data_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_data_V_0_state = ap_const_lv2_2) and (input_data_V_data_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_data_V_0_state = ap_const_lv2_3) and (input_data_V_data_V_0_vld_in = ap_const_logic_0) and (input_data_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_data_V_0_state = ap_const_lv2_1) and (input_data_V_data_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_data_V_0_state = ap_const_lv2_3) and (input_data_V_data_V_0_ack_out = ap_const_logic_0) and (input_data_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((input_data_V_data_V_0_state = ap_const_lv2_1) and (input_data_V_data_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_data_V_0_state = ap_const_lv2_2) and (input_data_V_data_V_0_vld_in = ap_const_logic_1)) or (not(((input_data_V_data_V_0_vld_in = ap_const_logic_0) and (input_data_V_data_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_data_V_0_ack_out = ap_const_logic_0) and (input_data_V_data_V_0_vld_in = ap_const_logic_1))) and (input_data_V_data_V_0_state = ap_const_lv2_3)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_dest_V_0_state = ap_const_lv2_2) and (input_data_V_dest_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_dest_V_0_state = ap_const_lv2_3) and (input_data_V_dest_V_0_vld_in = ap_const_logic_0) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_dest_V_0_state = ap_const_lv2_1) and (input_data_V_dest_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_dest_V_0_state = ap_const_lv2_3) and (input_data_V_dest_V_0_ack_out = ap_const_logic_0) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_dest_V_0_vld_in = ap_const_logic_0) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_dest_V_0_ack_out = ap_const_logic_0) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1))) and (input_data_V_dest_V_0_state = ap_const_lv2_3)) or ((input_data_V_dest_V_0_state = ap_const_lv2_1) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_dest_V_0_state = ap_const_lv2_2) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_data_V_1_ack_out = ap_const_logic_1) and (output_data_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_data_V_1_sel_rd <= not(output_data_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (output_data_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_data_V_1_sel_wr <= not(output_data_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_data_V_1_state = ap_const_lv2_2) and (output_data_V_data_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_data_V_1_state = ap_const_lv2_3) and (output_data_V_data_V_1_vld_in = ap_const_logic_0) and (output_data_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_data_V_1_state = ap_const_lv2_1) and (output_data_V_data_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_data_V_1_state = ap_const_lv2_3) and (output_data_V_data_V_1_ack_out = ap_const_logic_0) and (output_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_data_V_1_vld_in = ap_const_logic_0) and (output_data_V_data_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_data_V_1_ack_out = ap_const_logic_0) and (output_data_V_data_V_1_vld_in = ap_const_logic_1))) and (output_data_V_data_V_1_state = ap_const_lv2_3)) or ((output_data_V_data_V_1_state = ap_const_lv2_1) and (output_data_V_data_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_data_V_1_state = ap_const_lv2_2) and (output_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_dest_V_1_ack_out = ap_const_logic_1) and (output_data_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_dest_V_1_sel_rd <= not(output_data_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_dest_V_1_state = ap_const_lv2_2) and (output_data_V_dest_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_dest_V_1_state = ap_const_lv2_3) and (output_data_V_dest_V_1_vld_in = ap_const_logic_0) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_dest_V_1_state = ap_const_lv2_1) and (output_data_V_dest_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_dest_V_1_state = ap_const_lv2_3) and (output_data_V_dest_V_1_ack_out = ap_const_logic_0) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_dest_V_1_vld_in = ap_const_logic_0) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_dest_V_1_ack_out = ap_const_logic_0) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1))) and (output_data_V_dest_V_1_state = ap_const_lv2_3)) or ((output_data_V_dest_V_1_state = ap_const_lv2_1) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_dest_V_1_state = ap_const_lv2_2) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_id_V_1_ack_out = ap_const_logic_1) and (output_data_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_id_V_1_sel_rd <= not(output_data_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_id_V_1_state = ap_const_lv2_2) and (output_data_V_id_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_id_V_1_state = ap_const_lv2_3) and (output_data_V_id_V_1_vld_in = ap_const_logic_0) and (output_data_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_id_V_1_state = ap_const_lv2_1) and (output_data_V_id_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_id_V_1_state = ap_const_lv2_3) and (output_data_V_id_V_1_ack_out = ap_const_logic_0) and (output_data_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_id_V_1_vld_in = ap_const_logic_0) and (output_data_V_id_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_id_V_1_ack_out = ap_const_logic_0) and (output_data_V_id_V_1_vld_in = ap_const_logic_1))) and (output_data_V_id_V_1_state = ap_const_lv2_3)) or ((output_data_V_id_V_1_state = ap_const_lv2_1) and (output_data_V_id_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_id_V_1_state = ap_const_lv2_2) and (output_data_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_keep_V_1_ack_out = ap_const_logic_1) and (output_data_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_keep_V_1_sel_rd <= not(output_data_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_keep_V_1_state = ap_const_lv2_2) and (output_data_V_keep_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_keep_V_1_state = ap_const_lv2_3) and (output_data_V_keep_V_1_vld_in = ap_const_logic_0) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_keep_V_1_state = ap_const_lv2_1) and (output_data_V_keep_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_keep_V_1_state = ap_const_lv2_3) and (output_data_V_keep_V_1_ack_out = ap_const_logic_0) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_keep_V_1_vld_in = ap_const_logic_0) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_keep_V_1_ack_out = ap_const_logic_0) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1))) and (output_data_V_keep_V_1_state = ap_const_lv2_3)) or ((output_data_V_keep_V_1_state = ap_const_lv2_1) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_keep_V_1_state = ap_const_lv2_2) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_last_V_1_ack_out = ap_const_logic_1) and (output_data_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_last_V_1_sel_rd <= not(output_data_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_last_V_1_ack_in = ap_const_logic_1) and (output_data_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_last_V_1_sel_wr <= not(output_data_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_last_V_1_state = ap_const_lv2_2) and (output_data_V_last_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_last_V_1_state = ap_const_lv2_3) and (output_data_V_last_V_1_vld_in = ap_const_logic_0) and (output_data_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_last_V_1_state = ap_const_lv2_1) and (output_data_V_last_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_last_V_1_state = ap_const_lv2_3) and (output_data_V_last_V_1_ack_out = ap_const_logic_0) and (output_data_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_last_V_1_vld_in = ap_const_logic_0) and (output_data_V_last_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_last_V_1_ack_out = ap_const_logic_0) and (output_data_V_last_V_1_vld_in = ap_const_logic_1))) and (output_data_V_last_V_1_state = ap_const_lv2_3)) or ((output_data_V_last_V_1_state = ap_const_lv2_1) and (output_data_V_last_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_last_V_1_state = ap_const_lv2_2) and (output_data_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_strb_V_1_ack_out = ap_const_logic_1) and (output_data_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_strb_V_1_sel_rd <= not(output_data_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_strb_V_1_state = ap_const_lv2_2) and (output_data_V_strb_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_strb_V_1_state = ap_const_lv2_3) and (output_data_V_strb_V_1_vld_in = ap_const_logic_0) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_strb_V_1_state = ap_const_lv2_1) and (output_data_V_strb_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_strb_V_1_state = ap_const_lv2_3) and (output_data_V_strb_V_1_ack_out = ap_const_logic_0) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_strb_V_1_vld_in = ap_const_logic_0) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_strb_V_1_ack_out = ap_const_logic_0) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1))) and (output_data_V_strb_V_1_state = ap_const_lv2_3)) or ((output_data_V_strb_V_1_state = ap_const_lv2_1) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_strb_V_1_state = ap_const_lv2_2) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_user_V_1_ack_out = ap_const_logic_1) and (output_data_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_user_V_1_sel_rd <= not(output_data_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_user_V_1_ack_in = ap_const_logic_1) and (output_data_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_user_V_1_sel_wr <= not(output_data_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_user_V_1_state = ap_const_lv2_2) and (output_data_V_user_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_user_V_1_state = ap_const_lv2_3) and (output_data_V_user_V_1_vld_in = ap_const_logic_0) and (output_data_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_user_V_1_state = ap_const_lv2_1) and (output_data_V_user_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_user_V_1_state = ap_const_lv2_3) and (output_data_V_user_V_1_ack_out = ap_const_logic_0) and (output_data_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_user_V_1_vld_in = ap_const_logic_0) and (output_data_V_user_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_user_V_1_ack_out = ap_const_logic_0) and (output_data_V_user_V_1_vld_in = ap_const_logic_1))) and (output_data_V_user_V_1_state = ap_const_lv2_3)) or ((output_data_V_user_V_1_state = ap_const_lv2_1) and (output_data_V_user_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_user_V_1_state = ap_const_lv2_2) and (output_data_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MaxPooling2D_0_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_0_heigh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_0_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_1_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_1_heigh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_1_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_0_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_0_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_0_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_1_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_1_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_1_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_2_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_2_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_2_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_3_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_3_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_3_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_4_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_4_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_4_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_1_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_1_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_1_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_2_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_2_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_2_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_3_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_3_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_3_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_4_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_4_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_4_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_0_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_0_heigh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_0_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_1_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_1_heigh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_1_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    i1_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1043_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i1_reg_376 <= i_4_fu_1048_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_pointwise_conv2d_fix_1_fu_588_ap_done = ap_const_logic_1))) then 
                i1_reg_376 <= ap_const_lv48_0;
            end if; 
        end if;
    end process;

    i_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond2_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_365 <= i_3_fu_927_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_365 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_1043_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                SeparableConv2D_4_ar_1_reg_1240 <= i1_cast2_fu_1054_p1(10 - 1 downto 0);
                tmp_last_V_reg_1250 <= tmp_last_V_fu_1069_p2;
                tmp_user_V_reg_1245 <= tmp_user_V_fu_1063_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    array_length_cast_reg_1096(47 downto 2) <= array_length_cast_fu_917_p1(47 downto 2);
                    array_length_reg_1091(47 downto 2) <= array_length_fu_911_p2(47 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_data_V_0_load_A = ap_const_logic_1)) then
                input_data_V_data_V_0_payload_A <= input_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_data_V_0_load_B = ap_const_logic_1)) then
                input_data_V_data_V_0_payload_B <= input_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_data_V_1_load_A = ap_const_logic_1)) then
                output_data_V_data_V_1_payload_A <= SeparableConv2D_4_ar_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_data_V_1_load_B = ap_const_logic_1)) then
                output_data_V_data_V_1_payload_B <= SeparableConv2D_4_ar_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_last_V_1_load_A = ap_const_logic_1)) then
                output_data_V_last_V_1_payload_A <= tmp_last_V_reg_1250_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_last_V_1_load_B = ap_const_logic_1)) then
                output_data_V_last_V_1_payload_B <= tmp_last_V_reg_1250_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_user_V_1_load_A = ap_const_logic_1)) then
                output_data_V_user_V_1_payload_A <= tmp_user_V_reg_1245_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_user_V_1_load_B = ap_const_logic_1)) then
                output_data_V_user_V_1_payload_B <= tmp_user_V_reg_1245_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp1_reg_1086 <= tmp1_fu_1074_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_last_V_reg_1250_pp0_iter1_reg <= tmp_last_V_reg_1250;
                tmp_user_V_reg_1245_pp0_iter1_reg <= tmp_user_V_reg_1245;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_pointwise_conv2d_fix_1_fu_588_ap_done = ap_const_logic_1))) then
                    tmp_s_reg_1226(48 downto 2) <= tmp_s_fu_1038_p2(48 downto 2);
            end if;
        end if;
    end process;
    out_enable_V_read_reg_1255(0) <= '0';
    out_enable_V_read_reg_1255_pp0_iter2_reg(0) <= '0';
    reg_768(15 downto 0) <= "0000000000011100";
    reg_775(15 downto 0) <= "0000000000011100";
    reg_782(15 downto 0) <= "0000000000010000";
    reg_788(15 downto 0) <= "0000000000001110";
    reg_794(15 downto 0) <= "0000000000001110";
    reg_800(15 downto 0) <= "0000000000001110";
    reg_807(15 downto 0) <= "0000000000001110";
    reg_814(15 downto 0) <= "0000000000001000";
    reg_820(15 downto 0) <= "0000000000000111";
    reg_826(15 downto 0) <= "0000000000000111";
    reg_832(15 downto 0) <= "0000000000000111";
    reg_839(15 downto 0) <= "0000000000000111";
    reg_846(15 downto 0) <= "0000000000001000";
    reg_852(15 downto 0) <= "0000000000001110";
    reg_858(15 downto 0) <= "0000000000001110";
    reg_864(15 downto 0) <= "0000000000001110";
    reg_871(15 downto 0) <= "0000000000001110";
    reg_878(15 downto 0) <= "0000000000010000";
    reg_884(15 downto 0) <= "0000000000011100";
    reg_890(15 downto 0) <= "0000000000011100";
    array_length_reg_1091(1 downto 0) <= "00";
    array_length_cast_reg_1096(1 downto 0) <= "00";
    array_length_cast_reg_1096(48) <= '0';
    tmp_s_reg_1226(1 downto 0) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_data_V_data_V_0_vld_out, output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state3, exitcond2_fu_921_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_state40, grp_pointwise_conv2d_fix_1_fu_588_ap_done, exitcond_fu_1043_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, grp_padding2d_fix16_1_fu_387_ap_done, grp_padding2d_fix16_4_fu_398_ap_done, grp_padding2d_fix16_2_fu_409_ap_done, grp_padding2d_fix16_3_fu_420_ap_done, grp_depthwise_conv2d_fix_1_fu_431_ap_done, grp_depthwise_conv2d_fix_3_fu_446_ap_done, grp_depthwise_conv2d_fix_fu_461_ap_done, grp_depthwise_conv2d_fix_2_fu_476_ap_done, grp_depthwise_conv2d_fix_4_fu_491_ap_done, grp_pointwise_conv2d_fix_4_fu_506_ap_done, grp_pointwise_conv2d_fix_2_fu_520_ap_done, grp_pointwise_conv2d_fix_3_fu_534_ap_done, grp_pointwise_conv2d_fix_fu_548_ap_done, grp_max_pooling2d_fix16_1_fu_562_ap_done, grp_max_pooling2d_fix16_fu_575_ap_done, grp_up_sampling2d_fix16_fu_600_ap_done, grp_up_sampling2d_fix16_1_fu_613_ap_done, grp_padding2d_fix16_fu_626_ap_done, ap_CS_fsm_state36, ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state20, ap_CS_fsm_state38, ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state22, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state32, ap_CS_fsm_state16, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state26, ap_CS_fsm_state4, ap_CS_fsm_state46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond2_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond2_fu_921_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_padding2d_fix16_fu_626_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_depthwise_conv2d_fix_4_fu_491_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_pointwise_conv2d_fix_4_fu_506_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_max_pooling2d_fix16_1_fu_562_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_padding2d_fix16_4_fu_398_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_depthwise_conv2d_fix_3_fu_446_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_pointwise_conv2d_fix_3_fu_534_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_max_pooling2d_fix16_fu_575_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_padding2d_fix16_3_fu_420_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_depthwise_conv2d_fix_2_fu_476_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_pointwise_conv2d_fix_fu_548_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_up_sampling2d_fix16_1_fu_613_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_padding2d_fix16_2_fu_409_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_depthwise_conv2d_fix_fu_461_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_pointwise_conv2d_fix_2_fu_520_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_up_sampling2d_fix16_fu_600_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_padding2d_fix16_1_fu_387_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_depthwise_conv2d_fix_1_fu_431_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_pointwise_conv2d_fix_1_fu_588_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_fu_1043_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond_fu_1043_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    MaxPooling2D_0_array_address0_assign_proc : process(grp_padding2d_fix16_4_fu_398_MaxPooling2D_0_array_address0, grp_max_pooling2d_fix16_1_fu_562_output_r_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            MaxPooling2D_0_array_address0 <= grp_max_pooling2d_fix16_1_fu_562_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            MaxPooling2D_0_array_address0 <= grp_padding2d_fix16_4_fu_398_MaxPooling2D_0_array_address0;
        else 
            MaxPooling2D_0_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    MaxPooling2D_0_array_ce0_assign_proc : process(grp_padding2d_fix16_4_fu_398_MaxPooling2D_0_array_ce0, grp_max_pooling2d_fix16_1_fu_562_output_r_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            MaxPooling2D_0_array_ce0 <= grp_max_pooling2d_fix16_1_fu_562_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            MaxPooling2D_0_array_ce0 <= grp_padding2d_fix16_4_fu_398_MaxPooling2D_0_array_ce0;
        else 
            MaxPooling2D_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    MaxPooling2D_0_array_we0_assign_proc : process(grp_max_pooling2d_fix16_1_fu_562_output_r_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            MaxPooling2D_0_array_we0 <= grp_max_pooling2d_fix16_1_fu_562_output_r_we0;
        else 
            MaxPooling2D_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    MaxPooling2D_1_array_address0_assign_proc : process(grp_padding2d_fix16_3_fu_420_MaxPooling2D_1_array_address0, grp_max_pooling2d_fix16_fu_575_output_r_address0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            MaxPooling2D_1_array_address0 <= grp_max_pooling2d_fix16_fu_575_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            MaxPooling2D_1_array_address0 <= grp_padding2d_fix16_3_fu_420_MaxPooling2D_1_array_address0;
        else 
            MaxPooling2D_1_array_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    MaxPooling2D_1_array_ce0_assign_proc : process(grp_padding2d_fix16_3_fu_420_MaxPooling2D_1_array_ce0, grp_max_pooling2d_fix16_fu_575_output_r_ce0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            MaxPooling2D_1_array_ce0 <= grp_max_pooling2d_fix16_fu_575_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            MaxPooling2D_1_array_ce0 <= grp_padding2d_fix16_3_fu_420_MaxPooling2D_1_array_ce0;
        else 
            MaxPooling2D_1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    MaxPooling2D_1_array_we0_assign_proc : process(grp_max_pooling2d_fix16_fu_575_output_r_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            MaxPooling2D_1_array_we0 <= grp_max_pooling2d_fix16_fu_575_output_r_we0;
        else 
            MaxPooling2D_1_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_0_array_address0_assign_proc : process(grp_depthwise_conv2d_fix_4_fu_491_Padding2D_0_array_address0, grp_padding2d_fix16_fu_626_output_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_address0 <= grp_padding2d_fix16_fu_626_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Padding2D_0_array_address0 <= grp_depthwise_conv2d_fix_4_fu_491_Padding2D_0_array_address0;
        else 
            Padding2D_0_array_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Padding2D_0_array_ce0_assign_proc : process(grp_depthwise_conv2d_fix_4_fu_491_Padding2D_0_array_ce0, grp_padding2d_fix16_fu_626_output_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_ce0 <= grp_padding2d_fix16_fu_626_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Padding2D_0_array_ce0 <= grp_depthwise_conv2d_fix_4_fu_491_Padding2D_0_array_ce0;
        else 
            Padding2D_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_0_array_we0_assign_proc : process(grp_padding2d_fix16_fu_626_output_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_we0 <= grp_padding2d_fix16_fu_626_output_r_we0;
        else 
            Padding2D_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_1_array_address0_assign_proc : process(grp_padding2d_fix16_4_fu_398_output_r_address0, grp_depthwise_conv2d_fix_3_fu_446_Padding2D_1_array_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Padding2D_1_array_address0 <= grp_depthwise_conv2d_fix_3_fu_446_Padding2D_1_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_1_array_address0 <= grp_padding2d_fix16_4_fu_398_output_r_address0;
        else 
            Padding2D_1_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_1_array_ce0_assign_proc : process(grp_padding2d_fix16_4_fu_398_output_r_ce0, grp_depthwise_conv2d_fix_3_fu_446_Padding2D_1_array_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Padding2D_1_array_ce0 <= grp_depthwise_conv2d_fix_3_fu_446_Padding2D_1_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_1_array_ce0 <= grp_padding2d_fix16_4_fu_398_output_r_ce0;
        else 
            Padding2D_1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_1_array_we0_assign_proc : process(grp_padding2d_fix16_4_fu_398_output_r_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_1_array_we0 <= grp_padding2d_fix16_4_fu_398_output_r_we0;
        else 
            Padding2D_1_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_2_array_address0_assign_proc : process(grp_padding2d_fix16_3_fu_420_output_r_address0, grp_depthwise_conv2d_fix_2_fu_476_Padding2D_2_array_address0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Padding2D_2_array_address0 <= grp_depthwise_conv2d_fix_2_fu_476_Padding2D_2_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Padding2D_2_array_address0 <= grp_padding2d_fix16_3_fu_420_output_r_address0;
        else 
            Padding2D_2_array_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Padding2D_2_array_ce0_assign_proc : process(grp_padding2d_fix16_3_fu_420_output_r_ce0, grp_depthwise_conv2d_fix_2_fu_476_Padding2D_2_array_ce0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Padding2D_2_array_ce0 <= grp_depthwise_conv2d_fix_2_fu_476_Padding2D_2_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Padding2D_2_array_ce0 <= grp_padding2d_fix16_3_fu_420_output_r_ce0;
        else 
            Padding2D_2_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_2_array_we0_assign_proc : process(grp_padding2d_fix16_3_fu_420_output_r_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Padding2D_2_array_we0 <= grp_padding2d_fix16_3_fu_420_output_r_we0;
        else 
            Padding2D_2_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_3_array_address0_assign_proc : process(grp_padding2d_fix16_2_fu_409_output_r_address0, grp_depthwise_conv2d_fix_fu_461_Padding2D_3_array_address0, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Padding2D_3_array_address0 <= grp_depthwise_conv2d_fix_fu_461_Padding2D_3_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Padding2D_3_array_address0 <= grp_padding2d_fix16_2_fu_409_output_r_address0;
        else 
            Padding2D_3_array_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_3_array_ce0_assign_proc : process(grp_padding2d_fix16_2_fu_409_output_r_ce0, grp_depthwise_conv2d_fix_fu_461_Padding2D_3_array_ce0, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Padding2D_3_array_ce0 <= grp_depthwise_conv2d_fix_fu_461_Padding2D_3_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Padding2D_3_array_ce0 <= grp_padding2d_fix16_2_fu_409_output_r_ce0;
        else 
            Padding2D_3_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_3_array_we0_assign_proc : process(grp_padding2d_fix16_2_fu_409_output_r_we0, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Padding2D_3_array_we0 <= grp_padding2d_fix16_2_fu_409_output_r_we0;
        else 
            Padding2D_3_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_4_array_address0_assign_proc : process(grp_padding2d_fix16_1_fu_387_output_r_address0, grp_depthwise_conv2d_fix_1_fu_431_Padding2D_4_array_address0, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            Padding2D_4_array_address0 <= grp_depthwise_conv2d_fix_1_fu_431_Padding2D_4_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Padding2D_4_array_address0 <= grp_padding2d_fix16_1_fu_387_output_r_address0;
        else 
            Padding2D_4_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_4_array_ce0_assign_proc : process(grp_padding2d_fix16_1_fu_387_output_r_ce0, grp_depthwise_conv2d_fix_1_fu_431_Padding2D_4_array_ce0, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            Padding2D_4_array_ce0 <= grp_depthwise_conv2d_fix_1_fu_431_Padding2D_4_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Padding2D_4_array_ce0 <= grp_padding2d_fix16_1_fu_387_output_r_ce0;
        else 
            Padding2D_4_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_4_array_we0_assign_proc : process(grp_padding2d_fix16_1_fu_387_output_r_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Padding2D_4_array_we0 <= grp_padding2d_fix16_1_fu_387_output_r_we0;
        else 
            Padding2D_4_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_ar_address0_assign_proc : process(grp_pointwise_conv2d_fix_4_fu_506_output_r_address0, grp_max_pooling2d_fix16_1_fu_562_SeparableConv2D_0_ar_address0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            SeparableConv2D_0_ar_address0 <= grp_max_pooling2d_fix16_1_fu_562_SeparableConv2D_0_ar_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_ar_address0 <= grp_pointwise_conv2d_fix_4_fu_506_output_r_address0;
        else 
            SeparableConv2D_0_ar_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_0_ar_ce0_assign_proc : process(grp_pointwise_conv2d_fix_4_fu_506_output_r_ce0, grp_max_pooling2d_fix16_1_fu_562_SeparableConv2D_0_ar_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            SeparableConv2D_0_ar_ce0 <= grp_max_pooling2d_fix16_1_fu_562_SeparableConv2D_0_ar_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_ar_ce0 <= grp_pointwise_conv2d_fix_4_fu_506_output_r_ce0;
        else 
            SeparableConv2D_0_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_4_fu_506_output_r_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_ar_we0 <= grp_pointwise_conv2d_fix_4_fu_506_output_r_we0;
        else 
            SeparableConv2D_0_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_4_fu_491_output_r_address0, grp_pointwise_conv2d_fix_4_fu_506_SeparableConv2D_0_m_s_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_m_s_address0 <= grp_pointwise_conv2d_fix_4_fu_506_SeparableConv2D_0_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_address0 <= grp_depthwise_conv2d_fix_4_fu_491_output_r_address0;
        else 
            SeparableConv2D_0_m_s_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_0_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_4_fu_491_output_r_ce0, grp_pointwise_conv2d_fix_4_fu_506_SeparableConv2D_0_m_s_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_m_s_ce0 <= grp_pointwise_conv2d_fix_4_fu_506_SeparableConv2D_0_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_ce0 <= grp_depthwise_conv2d_fix_4_fu_491_output_r_ce0;
        else 
            SeparableConv2D_0_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_4_fu_491_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_we0 <= grp_depthwise_conv2d_fix_4_fu_491_output_r_we0;
        else 
            SeparableConv2D_0_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_ar_address0_assign_proc : process(grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_address0, grp_max_pooling2d_fix16_fu_575_input_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            SeparableConv2D_1_ar_address0 <= grp_max_pooling2d_fix16_fu_575_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_ar_address0 <= grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_address0;
        else 
            SeparableConv2D_1_ar_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_1_ar_ce0_assign_proc : process(grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_ce0, grp_max_pooling2d_fix16_fu_575_input_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            SeparableConv2D_1_ar_ce0 <= grp_max_pooling2d_fix16_fu_575_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_ar_ce0 <= grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_ce0;
        else 
            SeparableConv2D_1_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_ar_we0 <= grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_ar_we0;
        else 
            SeparableConv2D_1_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_3_fu_446_output_r_address0, grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_m_s_address0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_m_s_address0 <= grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SeparableConv2D_1_m_s_address0 <= grp_depthwise_conv2d_fix_3_fu_446_output_r_address0;
        else 
            SeparableConv2D_1_m_s_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_1_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_3_fu_446_output_r_ce0, grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_m_s_ce0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_m_s_ce0 <= grp_pointwise_conv2d_fix_3_fu_534_SeparableConv2D_1_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SeparableConv2D_1_m_s_ce0 <= grp_depthwise_conv2d_fix_3_fu_446_output_r_ce0;
        else 
            SeparableConv2D_1_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_3_fu_446_output_r_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SeparableConv2D_1_m_s_we0 <= grp_depthwise_conv2d_fix_3_fu_446_output_r_we0;
        else 
            SeparableConv2D_1_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_2_ar_address0_assign_proc : process(grp_pointwise_conv2d_fix_fu_548_output_r_address0, grp_up_sampling2d_fix16_1_fu_613_SeparableConv2D_2_ar_address0, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            SeparableConv2D_2_ar_address0 <= grp_up_sampling2d_fix16_1_fu_613_SeparableConv2D_2_ar_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_ar_address0 <= grp_pointwise_conv2d_fix_fu_548_output_r_address0;
        else 
            SeparableConv2D_2_ar_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_2_ar_ce0_assign_proc : process(grp_pointwise_conv2d_fix_fu_548_output_r_ce0, grp_up_sampling2d_fix16_1_fu_613_SeparableConv2D_2_ar_ce0, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            SeparableConv2D_2_ar_ce0 <= grp_up_sampling2d_fix16_1_fu_613_SeparableConv2D_2_ar_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_ar_ce0 <= grp_pointwise_conv2d_fix_fu_548_output_r_ce0;
        else 
            SeparableConv2D_2_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_2_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_fu_548_output_r_we0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_ar_we0 <= grp_pointwise_conv2d_fix_fu_548_output_r_we0;
        else 
            SeparableConv2D_2_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_2_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_address0, grp_pointwise_conv2d_fix_fu_548_input_r_address0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_m_s_address0 <= grp_pointwise_conv2d_fix_fu_548_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SeparableConv2D_2_m_s_address0 <= grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_address0;
        else 
            SeparableConv2D_2_m_s_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_2_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_ce0, grp_pointwise_conv2d_fix_fu_548_input_r_ce0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_m_s_ce0 <= grp_pointwise_conv2d_fix_fu_548_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SeparableConv2D_2_m_s_ce0 <= grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_ce0;
        else 
            SeparableConv2D_2_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_2_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_we0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SeparableConv2D_2_m_s_we0 <= grp_depthwise_conv2d_fix_2_fu_476_SeparableConv2D_2_m_s_we0;
        else 
            SeparableConv2D_2_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_3_ar_address0_assign_proc : process(grp_pointwise_conv2d_fix_2_fu_520_output_r_address0, grp_up_sampling2d_fix16_fu_600_SeparableConv2D_3_ar_address0, ap_CS_fsm_state32, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            SeparableConv2D_3_ar_address0 <= grp_up_sampling2d_fix16_fu_600_SeparableConv2D_3_ar_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_ar_address0 <= grp_pointwise_conv2d_fix_2_fu_520_output_r_address0;
        else 
            SeparableConv2D_3_ar_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_3_ar_ce0_assign_proc : process(grp_pointwise_conv2d_fix_2_fu_520_output_r_ce0, grp_up_sampling2d_fix16_fu_600_SeparableConv2D_3_ar_ce0, ap_CS_fsm_state32, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            SeparableConv2D_3_ar_ce0 <= grp_up_sampling2d_fix16_fu_600_SeparableConv2D_3_ar_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_ar_ce0 <= grp_pointwise_conv2d_fix_2_fu_520_output_r_ce0;
        else 
            SeparableConv2D_3_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_3_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_2_fu_520_output_r_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_ar_we0 <= grp_pointwise_conv2d_fix_2_fu_520_output_r_we0;
        else 
            SeparableConv2D_3_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_3_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_address0, grp_pointwise_conv2d_fix_2_fu_520_input_r_address0, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_m_s_address0 <= grp_pointwise_conv2d_fix_2_fu_520_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            SeparableConv2D_3_m_s_address0 <= grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_address0;
        else 
            SeparableConv2D_3_m_s_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_3_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_ce0, grp_pointwise_conv2d_fix_2_fu_520_input_r_ce0, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_m_s_ce0 <= grp_pointwise_conv2d_fix_2_fu_520_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            SeparableConv2D_3_m_s_ce0 <= grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_ce0;
        else 
            SeparableConv2D_3_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_3_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_we0, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            SeparableConv2D_3_m_s_we0 <= grp_depthwise_conv2d_fix_fu_461_SeparableConv2D_3_m_s_we0;
        else 
            SeparableConv2D_3_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_4_ar_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state40, ap_CS_fsm_pp0_stage0, SeparableConv2D_4_ar_1_reg_1240, ap_enable_reg_pp0_iter1, grp_pointwise_conv2d_fix_1_fu_588_output_r_address0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            SeparableConv2D_4_ar_address0 <= SeparableConv2D_4_ar_1_reg_1240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_ar_address0 <= grp_pointwise_conv2d_fix_1_fu_588_output_r_address0;
        else 
            SeparableConv2D_4_ar_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_4_ar_ce0_assign_proc : process(ap_CS_fsm_state40, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_pointwise_conv2d_fix_1_fu_588_output_r_ce0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            SeparableConv2D_4_ar_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_ar_ce0 <= grp_pointwise_conv2d_fix_1_fu_588_output_r_ce0;
        else 
            SeparableConv2D_4_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_4_ar_we0_assign_proc : process(ap_CS_fsm_state40, grp_pointwise_conv2d_fix_1_fu_588_output_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_ar_we0 <= grp_pointwise_conv2d_fix_1_fu_588_output_r_we0;
        else 
            SeparableConv2D_4_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_4_m_s_address0_assign_proc : process(ap_CS_fsm_state40, grp_depthwise_conv2d_fix_1_fu_431_output_r_address0, grp_pointwise_conv2d_fix_1_fu_588_SeparableConv2D_4_m_s_address0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_m_s_address0 <= grp_pointwise_conv2d_fix_1_fu_588_SeparableConv2D_4_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SeparableConv2D_4_m_s_address0 <= grp_depthwise_conv2d_fix_1_fu_431_output_r_address0;
        else 
            SeparableConv2D_4_m_s_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_4_m_s_ce0_assign_proc : process(ap_CS_fsm_state40, grp_depthwise_conv2d_fix_1_fu_431_output_r_ce0, grp_pointwise_conv2d_fix_1_fu_588_SeparableConv2D_4_m_s_ce0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_m_s_ce0 <= grp_pointwise_conv2d_fix_1_fu_588_SeparableConv2D_4_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SeparableConv2D_4_m_s_ce0 <= grp_depthwise_conv2d_fix_1_fu_431_output_r_ce0;
        else 
            SeparableConv2D_4_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_4_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_1_fu_431_output_r_we0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SeparableConv2D_4_m_s_we0 <= grp_depthwise_conv2d_fix_1_fu_431_output_r_we0;
        else 
            SeparableConv2D_4_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    UpSampling2D_0_array_address0_assign_proc : process(grp_padding2d_fix16_2_fu_409_input_r_address0, grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_address0, ap_CS_fsm_state28, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            UpSampling2D_0_array_address0 <= grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            UpSampling2D_0_array_address0 <= grp_padding2d_fix16_2_fu_409_input_r_address0;
        else 
            UpSampling2D_0_array_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    UpSampling2D_0_array_ce0_assign_proc : process(grp_padding2d_fix16_2_fu_409_input_r_ce0, grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_ce0, ap_CS_fsm_state28, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            UpSampling2D_0_array_ce0 <= grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            UpSampling2D_0_array_ce0 <= grp_padding2d_fix16_2_fu_409_input_r_ce0;
        else 
            UpSampling2D_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    UpSampling2D_0_array_we0_assign_proc : process(grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_we0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            UpSampling2D_0_array_we0 <= grp_up_sampling2d_fix16_1_fu_613_UpSampling2D_0_array_we0;
        else 
            UpSampling2D_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    UpSampling2D_1_array_address0_assign_proc : process(grp_padding2d_fix16_1_fu_387_input_r_address0, grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_address0, ap_CS_fsm_state36, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            UpSampling2D_1_array_address0 <= grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            UpSampling2D_1_array_address0 <= grp_padding2d_fix16_1_fu_387_input_r_address0;
        else 
            UpSampling2D_1_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    UpSampling2D_1_array_ce0_assign_proc : process(grp_padding2d_fix16_1_fu_387_input_r_ce0, grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_ce0, ap_CS_fsm_state36, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            UpSampling2D_1_array_ce0 <= grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            UpSampling2D_1_array_ce0 <= grp_padding2d_fix16_1_fu_387_input_r_ce0;
        else 
            UpSampling2D_1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    UpSampling2D_1_array_we0_assign_proc : process(grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_we0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            UpSampling2D_1_array_we0 <= grp_up_sampling2d_fix16_fu_600_UpSampling2D_1_array_we0;
        else 
            UpSampling2D_1_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(40);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state43_io, ap_block_state44_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state44_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state43_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state43_io, ap_block_state44_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state44_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state43_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_state3_assign_proc : process(input_data_V_data_V_0_vld_out, exitcond2_fu_921_p2)
    begin
                ap_block_state3 <= ((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state3_ignore_call0_assign_proc : process(input_data_V_data_V_0_vld_out, exitcond2_fu_921_p2)
    begin
                ap_block_state3_ignore_call0 <= ((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state41_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state43_io_assign_proc : process(output_data_V_data_V_1_ack_in, out_enable_V_read_reg_1255)
    begin
                ap_block_state43_io <= ((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (output_data_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state43_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state44_io_assign_proc : process(output_data_V_data_V_1_ack_in, out_enable_V_read_reg_1255_pp0_iter2_reg)
    begin
                ap_block_state44_io <= ((out_enable_V_read_reg_1255_pp0_iter2_reg = ap_const_lv1_1) and (output_data_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state44_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state46_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_keep_V_1_ack_in, output_data_V_strb_V_1_ack_in, output_data_V_user_V_1_ack_in, output_data_V_last_V_1_ack_in, output_data_V_id_V_1_ack_in, output_data_V_dest_V_1_ack_in)
    begin
                ap_block_state46 <= ((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state41_assign_proc : process(exitcond_fu_1043_p2)
    begin
        if ((exitcond_fu_1043_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state41 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state46)
    begin
        if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state46)
    begin
        if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    array_length_cast_fu_917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(array_length_fu_911_p2),49));
    array_length_fu_911_p0 <= array_length_fu_911_p00(32 - 1 downto 0);
    array_length_fu_911_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_reg_1086),48));
    array_length_fu_911_p1 <= array_length_fu_911_p10(16 - 1 downto 0);
    array_length_fu_911_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_he),48));
    array_length_fu_911_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(array_length_fu_911_p0) * unsigned(array_length_fu_911_p1), 48));
    exitcond2_fu_921_p2 <= "1" when (i_reg_365 = ap_const_lv10_310) else "0";
    exitcond_fu_1043_p2 <= "1" when (i1_reg_376 = array_length_reg_1091) else "0";
    grp_depthwise_conv2d_fix_1_fu_431_ap_start <= grp_depthwise_conv2d_fix_1_fu_431_ap_start_reg;
    grp_depthwise_conv2d_fix_2_fu_476_ap_start <= grp_depthwise_conv2d_fix_2_fu_476_ap_start_reg;
    grp_depthwise_conv2d_fix_3_fu_446_ap_start <= grp_depthwise_conv2d_fix_3_fu_446_ap_start_reg;
    grp_depthwise_conv2d_fix_4_fu_491_ap_start <= grp_depthwise_conv2d_fix_4_fu_491_ap_start_reg;
    grp_depthwise_conv2d_fix_fu_461_ap_start <= grp_depthwise_conv2d_fix_fu_461_ap_start_reg;
    grp_max_pooling2d_fix16_1_fu_562_ap_start <= grp_max_pooling2d_fix16_1_fu_562_ap_start_reg;
    grp_max_pooling2d_fix16_fu_575_ap_start <= grp_max_pooling2d_fix16_fu_575_ap_start_reg;
    grp_padding2d_fix16_1_fu_387_ap_start <= grp_padding2d_fix16_1_fu_387_ap_start_reg;
    grp_padding2d_fix16_2_fu_409_ap_start <= grp_padding2d_fix16_2_fu_409_ap_start_reg;
    grp_padding2d_fix16_3_fu_420_ap_start <= grp_padding2d_fix16_3_fu_420_ap_start_reg;
    grp_padding2d_fix16_4_fu_398_ap_start <= grp_padding2d_fix16_4_fu_398_ap_start_reg;
    grp_padding2d_fix16_fu_626_ap_start <= grp_padding2d_fix16_fu_626_ap_start_reg;
    grp_pointwise_conv2d_fix_1_fu_588_ap_start <= grp_pointwise_conv2d_fix_1_fu_588_ap_start_reg;
    grp_pointwise_conv2d_fix_2_fu_520_ap_start <= grp_pointwise_conv2d_fix_2_fu_520_ap_start_reg;
    grp_pointwise_conv2d_fix_3_fu_534_ap_start <= grp_pointwise_conv2d_fix_3_fu_534_ap_start_reg;
    grp_pointwise_conv2d_fix_4_fu_506_ap_start <= grp_pointwise_conv2d_fix_4_fu_506_ap_start_reg;
    grp_pointwise_conv2d_fix_fu_548_ap_start <= grp_pointwise_conv2d_fix_fu_548_ap_start_reg;
    grp_up_sampling2d_fix16_1_fu_613_ap_start <= grp_up_sampling2d_fix16_1_fu_613_ap_start_reg;
    grp_up_sampling2d_fix16_fu_600_ap_start <= grp_up_sampling2d_fix16_fu_600_ap_start_reg;
    i1_cast2_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_376),64));
    i1_cast_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_376),49));
    i_3_fu_927_p2 <= std_logic_vector(unsigned(i_reg_365) + unsigned(ap_const_lv10_1));
    i_4_fu_1048_p2 <= std_logic_vector(unsigned(i1_reg_376) + unsigned(ap_const_lv48_1));

    input_0_array_address0_assign_proc : process(ap_CS_fsm_state3, exitcond2_fu_921_p2, grp_padding2d_fix16_fu_626_input_r_address0, ap_CS_fsm_state4, tmp_70_fu_938_p1)
    begin
        if (((exitcond2_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_array_address0 <= tmp_70_fu_938_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_array_address0 <= grp_padding2d_fix16_fu_626_input_r_address0;
        else 
            input_0_array_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_0_array_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond2_fu_921_p2, grp_padding2d_fix16_fu_626_input_r_ce0, ap_CS_fsm_state4)
    begin
        if ((not(((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond2_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_array_ce0 <= grp_padding2d_fix16_fu_626_input_r_ce0;
        else 
            input_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_array_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond2_fu_921_p2)
    begin
        if ((not(((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond2_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_array_we0 <= ap_const_logic_1;
        else 
            input_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_data_TDATA_blk_n_assign_proc : process(input_data_V_data_V_0_state, ap_CS_fsm_state3, exitcond2_fu_921_p2)
    begin
        if (((exitcond2_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_TDATA_blk_n <= input_data_V_data_V_0_state(0);
        else 
            input_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_data_TREADY <= input_data_V_dest_V_0_state(1);
    input_data_V_data_V_0_ack_in <= input_data_V_data_V_0_state(1);

    input_data_V_data_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond2_fu_921_p2)
    begin
        if ((not(((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond2_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_data_V_0_data_out_assign_proc : process(input_data_V_data_V_0_payload_A, input_data_V_data_V_0_payload_B, input_data_V_data_V_0_sel)
    begin
        if ((input_data_V_data_V_0_sel = ap_const_logic_1)) then 
            input_data_V_data_V_0_data_out <= input_data_V_data_V_0_payload_B;
        else 
            input_data_V_data_V_0_data_out <= input_data_V_data_V_0_payload_A;
        end if; 
    end process;

    input_data_V_data_V_0_load_A <= (input_data_V_data_V_0_state_cmp_full and not(input_data_V_data_V_0_sel_wr));
    input_data_V_data_V_0_load_B <= (input_data_V_data_V_0_state_cmp_full and input_data_V_data_V_0_sel_wr);
    input_data_V_data_V_0_sel <= input_data_V_data_V_0_sel_rd;
    input_data_V_data_V_0_state_cmp_full <= '0' when (input_data_V_data_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_data_V_0_vld_in <= input_data_TVALID;
    input_data_V_data_V_0_vld_out <= input_data_V_data_V_0_state(0);

    input_data_V_dest_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond2_fu_921_p2)
    begin
        if ((not(((exitcond2_fu_921_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond2_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    input_data_V_dest_V_0_vld_in <= input_data_TVALID;
    out_enable_V_dout <= ap_const_lv1_0;
    output_data_TDATA <= output_data_V_data_V_1_data_out;

    output_data_TDATA_blk_n_assign_proc : process(output_data_V_data_V_1_state, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, out_enable_V_read_reg_1255, ap_enable_reg_pp0_iter3, out_enable_V_read_reg_1255_pp0_iter2_reg)
    begin
        if ((((out_enable_V_read_reg_1255_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            output_data_TDATA_blk_n <= output_data_V_data_V_1_state(1);
        else 
            output_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_data_TDEST <= output_data_V_dest_V_1_data_out;
    output_data_TID <= output_data_V_id_V_1_data_out;
    output_data_TKEEP <= output_data_V_keep_V_1_data_out;
    output_data_TLAST <= output_data_V_last_V_1_data_out;
    output_data_TSTRB <= output_data_V_strb_V_1_data_out;
    output_data_TUSER <= output_data_V_user_V_1_data_out;
    output_data_TVALID <= output_data_V_dest_V_1_state(0);
    output_data_V_data_V_1_ack_in <= output_data_V_data_V_1_state(1);
    output_data_V_data_V_1_ack_out <= output_data_TREADY;

    output_data_V_data_V_1_data_out_assign_proc : process(output_data_V_data_V_1_payload_A, output_data_V_data_V_1_payload_B, output_data_V_data_V_1_sel)
    begin
        if ((output_data_V_data_V_1_sel = ap_const_logic_1)) then 
            output_data_V_data_V_1_data_out <= output_data_V_data_V_1_payload_B;
        else 
            output_data_V_data_V_1_data_out <= output_data_V_data_V_1_payload_A;
        end if; 
    end process;

    output_data_V_data_V_1_load_A <= (output_data_V_data_V_1_state_cmp_full and not(output_data_V_data_V_1_sel_wr));
    output_data_V_data_V_1_load_B <= (output_data_V_data_V_1_state_cmp_full and output_data_V_data_V_1_sel_wr);
    output_data_V_data_V_1_sel <= output_data_V_data_V_1_sel_rd;
    output_data_V_data_V_1_state_cmp_full <= '0' when (output_data_V_data_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, out_enable_V_read_reg_1255, ap_block_pp0_stage0_11001)
    begin
        if (((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_data_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_data_V_1_vld_out <= output_data_V_data_V_1_state(0);
    output_data_V_dest_V_1_ack_in <= output_data_V_dest_V_1_state(1);
    output_data_V_dest_V_1_ack_out <= output_data_TREADY;
    output_data_V_dest_V_1_data_out <= ap_const_lv1_0;
    output_data_V_dest_V_1_sel <= output_data_V_dest_V_1_sel_rd;

    output_data_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, out_enable_V_read_reg_1255, ap_block_pp0_stage0_11001)
    begin
        if (((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_data_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_dest_V_1_vld_out <= output_data_V_dest_V_1_state(0);
    output_data_V_id_V_1_ack_in <= output_data_V_id_V_1_state(1);
    output_data_V_id_V_1_ack_out <= output_data_TREADY;
    output_data_V_id_V_1_data_out <= ap_const_lv1_0;
    output_data_V_id_V_1_sel <= output_data_V_id_V_1_sel_rd;

    output_data_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, out_enable_V_read_reg_1255, ap_block_pp0_stage0_11001)
    begin
        if (((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_data_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_id_V_1_vld_out <= output_data_V_id_V_1_state(0);
    output_data_V_keep_V_1_ack_in <= output_data_V_keep_V_1_state(1);
    output_data_V_keep_V_1_ack_out <= output_data_TREADY;
    output_data_V_keep_V_1_data_out <= ap_const_lv2_0;
    output_data_V_keep_V_1_sel <= output_data_V_keep_V_1_sel_rd;

    output_data_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, out_enable_V_read_reg_1255, ap_block_pp0_stage0_11001)
    begin
        if (((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_data_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_keep_V_1_vld_out <= output_data_V_keep_V_1_state(0);
    output_data_V_last_V_1_ack_in <= output_data_V_last_V_1_state(1);
    output_data_V_last_V_1_ack_out <= output_data_TREADY;

    output_data_V_last_V_1_data_out_assign_proc : process(output_data_V_last_V_1_payload_A, output_data_V_last_V_1_payload_B, output_data_V_last_V_1_sel)
    begin
        if ((output_data_V_last_V_1_sel = ap_const_logic_1)) then 
            output_data_V_last_V_1_data_out <= output_data_V_last_V_1_payload_B;
        else 
            output_data_V_last_V_1_data_out <= output_data_V_last_V_1_payload_A;
        end if; 
    end process;

    output_data_V_last_V_1_load_A <= (output_data_V_last_V_1_state_cmp_full and not(output_data_V_last_V_1_sel_wr));
    output_data_V_last_V_1_load_B <= (output_data_V_last_V_1_state_cmp_full and output_data_V_last_V_1_sel_wr);
    output_data_V_last_V_1_sel <= output_data_V_last_V_1_sel_rd;
    output_data_V_last_V_1_state_cmp_full <= '0' when (output_data_V_last_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, out_enable_V_read_reg_1255, ap_block_pp0_stage0_11001)
    begin
        if (((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_data_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_last_V_1_vld_out <= output_data_V_last_V_1_state(0);
    output_data_V_strb_V_1_ack_in <= output_data_V_strb_V_1_state(1);
    output_data_V_strb_V_1_ack_out <= output_data_TREADY;
    output_data_V_strb_V_1_data_out <= ap_const_lv2_0;
    output_data_V_strb_V_1_sel <= output_data_V_strb_V_1_sel_rd;

    output_data_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, out_enable_V_read_reg_1255, ap_block_pp0_stage0_11001)
    begin
        if (((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_data_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_strb_V_1_vld_out <= output_data_V_strb_V_1_state(0);
    output_data_V_user_V_1_ack_in <= output_data_V_user_V_1_state(1);
    output_data_V_user_V_1_ack_out <= output_data_TREADY;

    output_data_V_user_V_1_data_out_assign_proc : process(output_data_V_user_V_1_payload_A, output_data_V_user_V_1_payload_B, output_data_V_user_V_1_sel)
    begin
        if ((output_data_V_user_V_1_sel = ap_const_logic_1)) then 
            output_data_V_user_V_1_data_out <= output_data_V_user_V_1_payload_B;
        else 
            output_data_V_user_V_1_data_out <= output_data_V_user_V_1_payload_A;
        end if; 
    end process;

    output_data_V_user_V_1_load_A <= (output_data_V_user_V_1_state_cmp_full and not(output_data_V_user_V_1_sel_wr));
    output_data_V_user_V_1_load_B <= (output_data_V_user_V_1_state_cmp_full and output_data_V_user_V_1_sel_wr);
    output_data_V_user_V_1_sel <= output_data_V_user_V_1_sel_rd;
    output_data_V_user_V_1_state_cmp_full <= '0' when (output_data_V_user_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, out_enable_V_read_reg_1255, ap_block_pp0_stage0_11001)
    begin
        if (((out_enable_V_read_reg_1255 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            output_data_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_user_V_1_vld_out <= output_data_V_user_V_1_state(0);
    tmp1_fu_1074_p0 <= tmp1_fu_1074_p00(16 - 1 downto 0);
    tmp1_fu_1074_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_de),32));
    tmp1_fu_1074_p1 <= tmp1_fu_1074_p10(16 - 1 downto 0);
    tmp1_fu_1074_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_wi),32));
    tmp_70_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_365),64));
    tmp_last_V_fu_1069_p2 <= "1" when (i1_cast_fu_1059_p1 = tmp_s_reg_1226) else "0";
    tmp_s_fu_1038_p2 <= std_logic_vector(unsigned(array_length_cast_reg_1096) + unsigned(ap_const_lv49_1FFFFFFFFFFFF));
    tmp_user_V_fu_1063_p2 <= "1" when (i1_reg_376 = ap_const_lv48_0) else "0";
end behav;
