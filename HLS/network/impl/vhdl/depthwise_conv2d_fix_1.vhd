-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_cast_fu_238_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_reg_525 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_96_cast_fu_242_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_96_cast_reg_530 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_97_cast_fu_246_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_97_cast_reg_535 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_98_cast_fu_250_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_98_cast_reg_540 : STD_LOGIC_VECTOR (10 downto 0);
    signal next_mul3_fu_254_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul3_reg_545 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_259_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul_reg_550 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_d_4_fu_270_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_4_reg_558 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_addr_reg_563 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond4_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_cast_fu_293_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_4_fu_306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_4_reg_576 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp3_fu_326_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_reg_581 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_4_fu_340_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_4_reg_589 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_105_cast_fu_346_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_105_cast_reg_599 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_h_1_fu_356_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_h_1_reg_607 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_fu_402_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_612 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp6_reg_617 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_425_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_reg_622 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal k_w_1_fu_436_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_1_reg_630 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_75_fu_456_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_75_reg_635 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_77_fu_471_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_77_reg_640 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal input_load_reg_655 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal kernel_0_load_reg_660 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_79_fu_509_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_79_reg_665 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal buffer_6_fu_503_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal out_d_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_145 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul2_reg_157 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_181 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer6_reg_193 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_h_reg_204 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_1_reg_215 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_w_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_fu_417_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_281_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_fu_285_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_h_cast_fu_297_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_104_cast_fu_312_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_316_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_326_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_326_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_cast_fu_331_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl5_fu_370_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl5_cast_fu_378_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_108_cast9_fu_362_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_74_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_108_cast_fu_366_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp4_fu_392_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp4_cast_fu_398_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_109_cast_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_413_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_fu_425_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_425_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_110_cast_fu_442_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp5_fu_446_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp5_cast_fu_452_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_fu_461_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp7_cast_fu_467_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_117_cast_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_fu_494_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_fu_425_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_326_p00 : STD_LOGIC_VECTOR (10 downto 0);

    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_1_1_U39 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_reg_660,
        din1 => input_load_reg_655,
        dout => tmp_79_fu_509_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer6_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_430_p2 = ap_const_lv1_1))) then 
                buffer6_reg_193 <= buffer_1_reg_215;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                buffer6_reg_193 <= bias_q0;
            end if; 
        end if;
    end process;

    buffer_1_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                buffer_1_reg_215 <= buffer6_reg_193;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                buffer_1_reg_215 <= buffer_6_fu_503_p2;
            end if; 
        end if;
    end process;

    k_h_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_430_p2 = ap_const_lv1_1))) then 
                k_h_reg_204 <= k_h_1_reg_607;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_h_reg_204 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_w_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_w_reg_227 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_w_reg_227 <= k_w_1_reg_630;
            end if; 
        end if;
    end process;

    out_d_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_301_p2 = ap_const_lv1_1))) then 
                out_d_reg_133 <= out_d_4_reg_558;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_133 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_335_p2 = ap_const_lv1_1))) then 
                out_h_reg_169 <= out_h_4_reg_576;
            elsif (((exitcond4_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_169 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_w_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_reg_181 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_350_p2 = ap_const_lv1_1))) then 
                out_w_reg_181 <= out_w_4_reg_589;
            end if; 
        end if;
    end process;

    phi_mul2_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_301_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_157 <= next_mul3_reg_545;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_157 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_301_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_145 <= next_mul_reg_550;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_145 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bias_addr_reg_563 <= tmp_s_fu_276_p1(3 - 1 downto 0);
                    p_shl_cast_reg_568(5 downto 3) <= p_shl_cast_fu_293_p1(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_reg_655 <= input_r_q0;
                kernel_0_load_reg_660 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_h_1_reg_607 <= k_h_1_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                k_w_1_reg_630 <= k_w_1_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_545 <= next_mul3_fu_254_p2;
                next_mul_reg_550 <= next_mul_fu_259_p2;
                out_d_4_reg_558 <= out_d_4_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_4_reg_576 <= out_h_4_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_4_reg_589 <= out_w_4_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp1_reg_622 <= tmp1_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp3_reg_581 <= tmp3_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp6_reg_617 <= tmp6_fu_408_p2;
                tmp_reg_612 <= tmp_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    tmp_105_cast_reg_599(3 downto 0) <= tmp_105_cast_fu_346_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_430_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_75_reg_635 <= tmp_75_fu_456_p2;
                tmp_77_reg_640 <= tmp_77_fu_471_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_79_reg_665 <= tmp_79_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_96_cast_reg_530(5 downto 0) <= tmp_96_cast_fu_242_p1(5 downto 0);
                    tmp_97_cast_reg_535(4 downto 0) <= tmp_97_cast_fu_246_p1(4 downto 0);
                    tmp_98_cast_reg_540(4 downto 0) <= tmp_98_cast_fu_250_p1(4 downto 0);
                    tmp_cast_reg_525(5 downto 0) <= tmp_cast_fu_238_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_cast_reg_525(6) <= '0';
    tmp_96_cast_reg_530(10 downto 6) <= "00000";
    tmp_97_cast_reg_535(6 downto 5) <= "00";
    tmp_98_cast_reg_540(10 downto 5) <= "000000";
    p_shl_cast_reg_568(2 downto 0) <= "000";
    p_shl_cast_reg_568(7 downto 6) <= "00";
    tmp_105_cast_reg_599(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_264_p2, ap_CS_fsm_state3, exitcond3_fu_301_p2, ap_CS_fsm_state4, ap_CS_fsm_state6, exitcond1_fu_350_p2, ap_CS_fsm_state8, exitcond_fu_430_p2, exitcond2_fu_335_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_301_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_335_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_264_p2)
    begin
        if ((((exitcond4_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_264_p2)
    begin
        if (((exitcond4_fu_264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_563;

    bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_fu_503_p2 <= std_logic_vector(unsigned(tmp_80_fu_494_p4) + unsigned(buffer_1_reg_215));
    exitcond1_fu_350_p2 <= "1" when (k_h_reg_204 = ap_const_lv2_3) else "0";
    exitcond2_fu_335_p2 <= "1" when (out_w_cast_fu_331_p1 = output_width) else "0";
    exitcond3_fu_301_p2 <= "1" when (out_h_cast_fu_297_p1 = output_height) else "0";
    exitcond4_fu_264_p2 <= "1" when (out_d_reg_133 = ap_const_lv4_8) else "0";
    exitcond_fu_430_p2 <= "1" when (k_w_reg_227 = ap_const_lv2_3) else "0";
    input_r_address0 <= tmp_76_fu_476_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    k_h_1_fu_356_p2 <= std_logic_vector(unsigned(k_h_reg_204) + unsigned(ap_const_lv2_1));
    k_w_1_fu_436_p2 <= std_logic_vector(unsigned(k_w_reg_227) + unsigned(ap_const_lv2_1));
    kernel_0_address0 <= tmp_78_fu_483_p1(7 - 1 downto 0);

    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_254_p2 <= std_logic_vector(unsigned(phi_mul2_reg_157) + unsigned(tmp_97_cast_reg_535));
    next_mul_fu_259_p2 <= std_logic_vector(unsigned(phi_mul_reg_145) + unsigned(tmp_cast_reg_525));
    out_d_4_fu_270_p2 <= std_logic_vector(unsigned(out_d_reg_133) + unsigned(ap_const_lv4_1));
    out_h_4_fu_306_p2 <= std_logic_vector(unsigned(out_h_reg_169) + unsigned(ap_const_lv4_1));
    out_h_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_169),5));
    out_w_4_fu_340_p2 <= std_logic_vector(unsigned(out_w_reg_181) + unsigned(ap_const_lv4_1));
    out_w_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_181),5));
    output_r_address0 <= tmp_73_fu_417_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer6_reg_193;

    output_r_we0_assign_proc : process(ap_CS_fsm_state6, exitcond1_fu_350_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_350_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl5_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_370_p3),5));
    p_shl5_fu_370_p3 <= (k_h_reg_204 & ap_const_lv2_0);
    p_shl_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_285_p3),8));
    p_shl_fu_285_p3 <= (tmp_64_fu_281_p1 & ap_const_lv3_0);
    tmp1_fu_425_p0 <= tmp_96_cast_reg_530(6 - 1 downto 0);
    tmp1_fu_425_p1 <= tmp1_fu_425_p10(7 - 1 downto 0);
    tmp1_fu_425_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_612),11));
    tmp1_fu_425_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_425_p0) * unsigned(tmp1_fu_425_p1), 11));
    tmp2_fu_316_p2 <= std_logic_vector(unsigned(phi_mul2_reg_157) + unsigned(tmp_104_cast_fu_312_p1));
    tmp3_fu_326_p0 <= tmp3_fu_326_p00(7 - 1 downto 0);
    tmp3_fu_326_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_316_p2),11));
    tmp3_fu_326_p1 <= tmp_98_cast_reg_540(5 - 1 downto 0);
    tmp3_fu_326_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_326_p0) * unsigned(tmp3_fu_326_p1), 11));
    tmp4_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_392_p2),7));
    tmp4_fu_392_p2 <= std_logic_vector(unsigned(tmp_108_cast_fu_366_p1) + unsigned(out_h_reg_169));
    tmp5_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_446_p2),11));
    tmp5_fu_446_p2 <= std_logic_vector(unsigned(tmp_110_cast_fu_442_p1) + unsigned(out_w_reg_181));
    tmp6_fu_408_p2 <= std_logic_vector(signed(tmp_109_cast_fu_388_p1) + signed(p_shl_cast_reg_568));
    tmp7_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_461_p2),8));
    tmp7_fu_461_p2 <= std_logic_vector(unsigned(out_d_reg_133) + unsigned(tmp_110_cast_fu_442_p1));
    tmp_104_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_169),7));
    tmp_105_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_181),11));
    tmp_108_cast9_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_reg_204),5));
    tmp_108_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_reg_204),4));
        tmp_109_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_74_fu_382_p2),8));

    tmp_110_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_reg_227),4));
        tmp_117_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_77_reg_640),32));

    tmp_64_fu_281_p1 <= out_d_reg_133(3 - 1 downto 0);
    tmp_72_fu_413_p2 <= std_logic_vector(unsigned(tmp3_reg_581) + unsigned(tmp_105_cast_reg_599));
    tmp_73_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_fu_413_p2),64));
    tmp_74_fu_382_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_378_p1) - unsigned(tmp_108_cast9_fu_362_p1));
    tmp_75_fu_456_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_452_p1) + unsigned(tmp1_reg_622));
    tmp_76_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_reg_635),64));
    tmp_77_fu_471_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_467_p1) + unsigned(tmp6_reg_617));
    tmp_78_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_cast_fu_480_p1),64));
    tmp_80_fu_494_p4 <= tmp_79_reg_665(29 downto 14);
    tmp_96_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),11));
    tmp_97_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
    tmp_98_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),11));
    tmp_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    tmp_fu_402_p2 <= std_logic_vector(unsigned(phi_mul_reg_145) + unsigned(tmp4_cast_fu_398_p1));
    tmp_s_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_133),64));
end behav;
