-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of max_pooling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_cast_fu_213_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_467 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_71_cast_fu_217_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_71_cast_reg_472 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_72_cast_fu_221_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_cast_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_cast_fu_225_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_cast_reg_482 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul3_fu_229_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul3_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_234_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_492 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_3_fu_248_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_3_reg_500 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_3_fu_263_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_3_reg_508 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_78_cast_fu_281_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_78_cast_reg_513 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_295_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_reg_518 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_w_3_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_3_reg_526 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_80_cast1_fu_315_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_80_cast1_reg_531 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_319_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_53_reg_536 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_52_fu_327_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_541 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal in_h_1_fu_337_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_h_1_reg_549 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_362_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_reg_554 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_376_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_559 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_w_1_fu_386_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_1_reg_567 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_reg_118 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_129 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_141 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_reg_153 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_164 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_h_reg_175 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_55_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_fu_58 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_6_fu_433_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast3_fu_201_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_height_cast2_fu_205_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_width_cast_fu_209_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_height_cast2_fu_205_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_width_cast3_fu_201_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_d_cast_fu_239_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_h_cast_fu_254_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_258_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_273_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_77_cast1_fu_269_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_285_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_295_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_295_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_w_cast_fu_300_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_304_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_84_cast_fu_343_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_347_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_353_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_362_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_362_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_fu_367_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_88_cast_fu_392_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_fu_396_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_cast_fu_401_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_58_fu_405_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_60_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_5_buffer_4_fu_425_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_362_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_295_p10 : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_h_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_380_p2 = ap_const_lv1_1))) then 
                in_h_reg_175 <= in_h_1_reg_549;
            elsif (((exitcond2_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                in_h_reg_175 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    in_w_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_w_reg_186 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                in_w_reg_186 <= in_w_1_reg_567;
            end if; 
        end if;
    end process;

    out_d_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_reg_118 <= out_d_3_reg_500;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_118 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_153 <= ap_const_lv4_0;
            elsif (((exitcond2_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_h_reg_153 <= out_h_3_reg_508;
            end if; 
        end if;
    end process;

    out_w_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_reg_164 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_331_p2 = ap_const_lv1_1))) then 
                out_w_reg_164 <= out_w_3_reg_526;
            end if; 
        end if;
    end process;

    phi_mul2_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul2_reg_141 <= next_mul3_reg_487;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_141 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_129 <= next_mul_reg_492;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_129 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                buffer_fu_58 <= buffer_6_fu_433_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                in_h_1_reg_549 <= in_h_1_fu_337_p2;
                tmp_52_reg_541 <= tmp_52_fu_327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_w_1_reg_567 <= in_w_1_fu_386_p2;
                tmp_56_reg_559 <= tmp_56_fu_376_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_487 <= next_mul3_fu_229_p2;
                next_mul_reg_492 <= next_mul_fu_234_p2;
                out_d_3_reg_500 <= out_d_3_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_3_reg_508 <= out_h_3_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_3_reg_526 <= out_w_3_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp1_reg_554 <= tmp1_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp3_reg_518 <= tmp3_fu_295_p2;
                    tmp_78_cast_reg_513(4 downto 1) <= tmp_78_cast_fu_281_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_53_reg_536(4 downto 1) <= tmp_53_fu_319_p3(4 downto 1);
                    tmp_80_cast1_reg_531(3 downto 0) <= tmp_80_cast1_fu_315_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_71_cast_reg_472(6 downto 0) <= tmp_71_cast_fu_217_p1(6 downto 0);
                    tmp_72_cast_reg_477(5 downto 0) <= tmp_72_cast_fu_221_p1(5 downto 0);
                    tmp_73_cast_reg_482(5 downto 0) <= tmp_73_cast_fu_225_p1(5 downto 0);
                    tmp_cast_reg_467(6 downto 0) <= tmp_cast_fu_213_p1(6 downto 0);
            end if;
        end if;
    end process;
    tmp_cast_reg_467(8 downto 7) <= "00";
    tmp_71_cast_reg_472(13 downto 7) <= "0000000";
    tmp_72_cast_reg_477(7 downto 6) <= "00";
    tmp_73_cast_reg_482(11 downto 6) <= "000000";
    tmp_78_cast_reg_513(0) <= '0';
    tmp_78_cast_reg_513(8 downto 5) <= "0000";
    tmp_80_cast1_reg_531(11 downto 4) <= "00000000";
    tmp_53_reg_536(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_258_p2, ap_CS_fsm_state4, exitcond2_fu_304_p2, ap_CS_fsm_state5, exitcond1_fu_331_p2, ap_CS_fsm_state6, exitcond_fu_380_p2, exitcond4_fu_243_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_243_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_380_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_243_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_243_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_243_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_243_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_buffer_4_fu_425_p3 <= 
        input_r_q0 when (tmp_60_fu_419_p2(0) = '1') else 
        buffer_fu_58;
    buffer_6_fu_433_p3 <= 
        buffer_5_buffer_4_fu_425_p3 when (tmp_57_fu_415_p2(0) = '1') else 
        input_r_q0;
    exitcond1_fu_331_p2 <= "1" when (in_h_reg_175 = ap_const_lv2_2) else "0";
    exitcond2_fu_304_p1 <= output_width;
    exitcond2_fu_304_p2 <= "1" when (out_w_cast_fu_300_p1 = exitcond2_fu_304_p1) else "0";
    exitcond3_fu_258_p1 <= output_height;
    exitcond3_fu_258_p2 <= "1" when (out_h_cast_fu_254_p1 = exitcond3_fu_258_p1) else "0";
    exitcond4_fu_243_p2 <= "1" when (out_d_cast_fu_239_p1 = output_depth) else "0";
    exitcond_fu_380_p2 <= "1" when (in_w_reg_186 = ap_const_lv2_2) else "0";
    in_h_1_fu_337_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_h_reg_175));
    in_w_1_fu_386_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_w_reg_186));
    input_r_address0 <= tmp_59_fu_410_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        input_width_cast_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    next_mul3_fu_229_p2 <= std_logic_vector(unsigned(phi_mul2_reg_141) + unsigned(tmp_72_cast_reg_477));
    next_mul_fu_234_p2 <= std_logic_vector(unsigned(phi_mul_reg_129) + unsigned(tmp_cast_reg_467));
    out_d_3_fu_248_p2 <= std_logic_vector(unsigned(out_d_reg_118) + unsigned(ap_const_lv5_1));
    out_d_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_118),6));
    out_h_3_fu_263_p2 <= std_logic_vector(unsigned(out_h_reg_153) + unsigned(ap_const_lv4_1));
    out_h_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_153),5));
    out_w_3_fu_309_p2 <= std_logic_vector(unsigned(out_w_reg_164) + unsigned(ap_const_lv4_1));
    out_w_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_164),5));
    output_height_cast2_fu_205_p0 <= output_height;
        output_height_cast2_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_height_cast2_fu_205_p0),6));

    output_r_address0 <= tmp_55_fu_371_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer_fu_58;

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_331_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_331_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast3_fu_201_p0 <= output_width;
        output_width_cast3_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_width_cast3_fu_201_p0),6));

    tmp1_fu_362_p0 <= tmp1_fu_362_p00(9 - 1 downto 0);
    tmp1_fu_362_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_353_p2),14));
    tmp1_fu_362_p1 <= tmp_71_cast_reg_472(7 - 1 downto 0);
    tmp1_fu_362_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_362_p0) * unsigned(tmp1_fu_362_p1), 14));
    tmp2_fu_285_p2 <= std_logic_vector(unsigned(tmp_77_cast1_fu_269_p1) + unsigned(phi_mul2_reg_141));
    tmp3_fu_295_p0 <= tmp_73_cast_reg_482(6 - 1 downto 0);
    tmp3_fu_295_p1 <= tmp3_fu_295_p10(8 - 1 downto 0);
    tmp3_fu_295_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_285_p2),12));
    tmp3_fu_295_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_295_p0) * unsigned(tmp3_fu_295_p1), 12));
    tmp4_fu_347_p2 <= std_logic_vector(unsigned(phi_mul_reg_129) + unsigned(tmp_84_cast_fu_343_p1));
    tmp5_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_396_p2),14));
    tmp5_fu_396_p2 <= std_logic_vector(unsigned(tmp_53_reg_536) + unsigned(tmp_88_cast_fu_392_p1));
    tmp_52_fu_327_p1 <= in_h_reg_175(1 - 1 downto 0);
    tmp_53_fu_319_p3 <= (out_w_reg_164 & ap_const_lv1_0);
    tmp_54_fu_367_p2 <= std_logic_vector(unsigned(tmp3_reg_518) + unsigned(tmp_80_cast1_reg_531));
    tmp_55_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_367_p2),64));
    tmp_56_fu_376_p1 <= in_w_reg_186(1 - 1 downto 0);
    tmp_57_fu_415_p2 <= (tmp_56_reg_559 or tmp_52_reg_541);
    tmp_58_fu_405_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_401_p1) + unsigned(tmp1_reg_554));
    tmp_59_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_fu_405_p2),64));
    tmp_60_fu_419_p2 <= "1" when (signed(buffer_fu_58) < signed(input_r_q0)) else "0";
    tmp_71_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_209_p1),14));
    tmp_72_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height_cast2_fu_205_p1),8));
    tmp_73_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width_cast3_fu_201_p1),12));
    tmp_77_cast1_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_153),8));
    tmp_78_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_273_p3),9));
    tmp_80_cast1_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_164),12));
    tmp_84_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_h_reg_175),9));
    tmp_88_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_reg_186),5));
    tmp_cast_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    tmp_fu_353_p2 <= std_logic_vector(unsigned(tmp4_fu_347_p2) + unsigned(tmp_78_cast_reg_513));
    tmp_s_fu_273_p3 <= (out_h_reg_153 & ap_const_lv1_0);
end behav;
