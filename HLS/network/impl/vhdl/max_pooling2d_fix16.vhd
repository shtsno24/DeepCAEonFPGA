-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of max_pooling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_cast_fu_247_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_540 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_73_cast1_fu_251_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_73_cast1_reg_545 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_74_cast_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_74_cast_reg_551 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_cast_fu_259_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_75_cast_reg_556 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul3_fu_263_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul3_reg_561 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_566 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_3_fu_282_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_3_reg_574 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_3_fu_297_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_3_reg_582 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp4_fu_329_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_reg_587 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond3_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_1_fu_344_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_1_reg_592 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_359_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_reg_597 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_w_3_fu_376_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_3_reg_610 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_81_cast9_fu_382_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_81_cast9_reg_615 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_386_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_54_reg_620 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_w_1_fu_400_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_1_reg_629 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_55_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_634 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_6_fu_449_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_w_1_1_fu_462_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_1_1_reg_652 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_1_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer_6_1_fu_511_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal out_d_reg_134 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_145 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal buffer_4_reg_191 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_w_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal buffer_4_1_reg_212 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_w_s_reg_224 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_57_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_95_1_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_fu_66 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast3_fu_235_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_height_cast2_fu_239_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_width_cast_fu_243_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_height_cast2_fu_239_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_width_cast3_fu_235_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_d_cast_fu_273_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_h_cast_fu_288_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_292_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_307_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_80_cast_fu_315_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_319_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_fu_329_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp4_fu_329_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_334_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_1_fu_344_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_1_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_79_cast1_fu_303_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_359_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_w_cast_fu_367_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_371_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_87_cast_fu_412_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_fu_416_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_cast_fu_421_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_56_fu_425_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_58_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_buffer_4_fu_441_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_93_1_cast_fu_468_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp6_fu_472_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp6_cast_fu_477_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_94_1_fu_481_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_59_fu_491_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_99_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_1_fu_344_p10 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_359_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp4_fu_329_p10 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    buffer_4_1_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buffer_4_1_reg_212 <= buffer_6_1_fu_511_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_394_p2 = ap_const_lv1_1))) then 
                buffer_4_1_reg_212 <= buffer_4_reg_191;
            end if; 
        end if;
    end process;

    buffer_4_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                buffer_4_reg_191 <= buffer_6_fu_449_p3;
            elsif (((exitcond2_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buffer_4_reg_191 <= buffer_fu_66;
            end if; 
        end if;
    end process;

    in_w_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                in_w_reg_201 <= in_w_1_reg_629;
            elsif (((exitcond2_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                in_w_reg_201 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    in_w_s_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                in_w_s_reg_224 <= in_w_1_1_reg_652;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_394_p2 = ap_const_lv1_1))) then 
                in_w_s_reg_224 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    out_d_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_reg_134 <= out_d_3_reg_574;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_134 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_169 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_371_p2 = ap_const_lv1_1))) then 
                out_h_reg_169 <= out_h_3_reg_582;
            end if; 
        end if;
    end process;

    out_w_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_reg_180 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_1_fu_456_p2 = ap_const_lv1_1))) then 
                out_w_reg_180 <= out_w_3_reg_610;
            end if; 
        end if;
    end process;

    phi_mul2_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul2_reg_157 <= next_mul3_reg_561;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_157 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_145 <= next_mul_reg_566;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_145 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_1_fu_456_p2 = ap_const_lv1_1))) then
                buffer_fu_66 <= buffer_4_1_reg_212;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                in_w_1_1_reg_652 <= in_w_1_1_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                in_w_1_reg_629 <= in_w_1_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_561 <= next_mul3_fu_263_p2;
                next_mul_reg_566 <= next_mul_fu_268_p2;
                out_d_3_reg_574 <= out_d_3_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_3_reg_582 <= out_h_3_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_3_reg_610 <= out_w_3_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp1_1_reg_592 <= tmp1_1_fu_344_p2;
                tmp3_reg_597 <= tmp3_fu_359_p2;
                tmp4_reg_587 <= tmp4_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_54_reg_620(4 downto 1) <= tmp_54_fu_386_p3(4 downto 1);
                    tmp_81_cast9_reg_615(3 downto 0) <= tmp_81_cast9_fu_382_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_394_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_55_reg_634 <= tmp_55_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_73_cast1_reg_545(6 downto 0) <= tmp_73_cast1_fu_251_p1(6 downto 0);
                    tmp_74_cast_reg_551(5 downto 0) <= tmp_74_cast_fu_255_p1(5 downto 0);
                    tmp_75_cast_reg_556(5 downto 0) <= tmp_75_cast_fu_259_p1(5 downto 0);
                    tmp_cast_reg_540(6 downto 0) <= tmp_cast_fu_247_p1(6 downto 0);
            end if;
        end if;
    end process;
    tmp_cast_reg_540(8 downto 7) <= "00";
    tmp_73_cast1_reg_545(13 downto 7) <= "0000000";
    tmp_74_cast_reg_551(7 downto 6) <= "00";
    tmp_75_cast_reg_556(11 downto 6) <= "000000";
    tmp_81_cast9_reg_615(11 downto 4) <= "00000000";
    tmp_54_reg_620(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_292_p2, ap_CS_fsm_state4, exitcond2_fu_371_p2, ap_CS_fsm_state5, exitcond_fu_394_p2, ap_CS_fsm_state7, exitcond_1_fu_456_p2, exitcond4_fu_277_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_277_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_371_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_394_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_1_fu_456_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_277_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_277_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_277_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_277_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_1_fu_511_p3 <= 
        input_r_q0 when (tmp_99_1_fu_505_p2(0) = '1') else 
        buffer_4_1_reg_212;
    buffer_6_fu_449_p3 <= 
        input_r_q0 when (tmp_55_reg_634(0) = '1') else 
        input_load_buffer_4_fu_441_p3;
    exitcond2_fu_371_p1 <= output_width;
    exitcond2_fu_371_p2 <= "1" when (out_w_cast_fu_367_p1 = exitcond2_fu_371_p1) else "0";
    exitcond3_fu_292_p1 <= output_height;
    exitcond3_fu_292_p2 <= "1" when (out_h_cast_fu_288_p1 = exitcond3_fu_292_p1) else "0";
    exitcond4_fu_277_p2 <= "1" when (out_d_cast_fu_273_p1 = output_depth) else "0";
    exitcond_1_fu_456_p2 <= "1" when (in_w_s_reg_224 = ap_const_lv2_2) else "0";
    exitcond_fu_394_p2 <= "1" when (in_w_reg_201 = ap_const_lv2_2) else "0";
    in_w_1_1_fu_462_p2 <= std_logic_vector(unsigned(in_w_s_reg_224) + unsigned(ap_const_lv2_1));
    in_w_1_fu_400_p2 <= std_logic_vector(unsigned(in_w_reg_201) + unsigned(ap_const_lv2_1));
    input_load_buffer_4_fu_441_p3 <= 
        input_r_q0 when (tmp_58_fu_435_p2(0) = '1') else 
        buffer_4_reg_191;

    input_r_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, tmp_57_fu_430_p1, tmp_95_1_fu_486_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= tmp_95_1_fu_486_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= tmp_57_fu_430_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        input_width_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    next_mul3_fu_263_p2 <= std_logic_vector(unsigned(phi_mul2_reg_157) + unsigned(tmp_74_cast_reg_551));
    next_mul_fu_268_p2 <= std_logic_vector(unsigned(phi_mul_reg_145) + unsigned(tmp_cast_reg_540));
    out_d_3_fu_282_p2 <= std_logic_vector(unsigned(out_d_reg_134) + unsigned(ap_const_lv5_1));
    out_d_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_134),6));
    out_h_3_fu_297_p2 <= std_logic_vector(unsigned(out_h_reg_169) + unsigned(ap_const_lv4_1));
    out_h_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_169),5));
    out_w_3_fu_376_p2 <= std_logic_vector(unsigned(out_w_reg_180) + unsigned(ap_const_lv4_1));
    out_w_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_180),5));
    output_height_cast2_fu_239_p0 <= output_height;
        output_height_cast2_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_height_cast2_fu_239_p0),6));

    output_r_address0 <= tmp_60_fu_495_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer_4_1_reg_212;

    output_r_we0_assign_proc : process(ap_CS_fsm_state7, exitcond_1_fu_456_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_1_fu_456_p2 = ap_const_lv1_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast3_fu_235_p0 <= output_width;
        output_width_cast3_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_width_cast3_fu_235_p0),6));

    tmp1_1_fu_344_p0 <= tmp_73_cast1_reg_545(7 - 1 downto 0);
    tmp1_1_fu_344_p1 <= tmp1_1_fu_344_p10(9 - 1 downto 0);
    tmp1_1_fu_344_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_334_p2),14));
    tmp1_1_fu_344_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_1_fu_344_p0) * unsigned(tmp1_1_fu_344_p1), 14));
    tmp1_fu_319_p2 <= std_logic_vector(unsigned(phi_mul_reg_145) + unsigned(tmp_80_cast_fu_315_p1));
    tmp2_fu_349_p2 <= std_logic_vector(unsigned(tmp_79_cast1_fu_303_p1) + unsigned(phi_mul2_reg_157));
    tmp3_fu_359_p0 <= tmp_75_cast_reg_556(6 - 1 downto 0);
    tmp3_fu_359_p1 <= tmp3_fu_359_p10(8 - 1 downto 0);
    tmp3_fu_359_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_349_p2),12));
    tmp3_fu_359_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_359_p0) * unsigned(tmp3_fu_359_p1), 12));
    tmp4_fu_329_p0 <= tmp_73_cast1_reg_545(7 - 1 downto 0);
    tmp4_fu_329_p1 <= tmp4_fu_329_p10(9 - 1 downto 0);
    tmp4_fu_329_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_319_p2),14));
    tmp4_fu_329_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_329_p0) * unsigned(tmp4_fu_329_p1), 14));
    tmp5_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_416_p2),14));
    tmp5_fu_416_p2 <= std_logic_vector(unsigned(tmp_54_reg_620) + unsigned(tmp_87_cast_fu_412_p1));
    tmp6_cast_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_472_p2),14));
    tmp6_fu_472_p2 <= std_logic_vector(unsigned(tmp_54_reg_620) + unsigned(tmp_93_1_cast_fu_468_p1));
    tmp_1_fu_334_p2 <= std_logic_vector(unsigned(tmp1_fu_319_p2) + unsigned(ap_const_lv9_1));
    tmp_54_fu_386_p3 <= (out_w_reg_180 & ap_const_lv1_0);
    tmp_55_fu_406_p2 <= "1" when (in_w_reg_201 = ap_const_lv2_0) else "0";
    tmp_56_fu_425_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_421_p1) + unsigned(tmp4_reg_587));
    tmp_57_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_425_p2),64));
    tmp_58_fu_435_p2 <= "1" when (signed(buffer_4_reg_191) < signed(input_r_q0)) else "0";
    tmp_59_fu_491_p2 <= std_logic_vector(unsigned(tmp3_reg_597) + unsigned(tmp_81_cast9_reg_615));
    tmp_60_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_491_p2),64));
    tmp_73_cast1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_243_p1),14));
    tmp_74_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height_cast2_fu_239_p1),8));
    tmp_75_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width_cast3_fu_235_p1),12));
    tmp_79_cast1_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_169),8));
    tmp_80_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_307_p3),9));
    tmp_81_cast9_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_180),12));
    tmp_87_cast_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_reg_201),5));
    tmp_93_1_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_s_reg_224),5));
    tmp_94_1_fu_481_p2 <= std_logic_vector(unsigned(tmp6_cast_fu_477_p1) + unsigned(tmp1_1_reg_592));
    tmp_95_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_1_fu_481_p2),64));
    tmp_99_1_fu_505_p2 <= "1" when (signed(buffer_4_1_reg_212) < signed(input_r_q0)) else "0";
    tmp_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    tmp_s_fu_307_p3 <= (out_h_reg_169 & ap_const_lv1_0);
end behav;
