-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv14_310 : STD_LOGIC_VECTOR (13 downto 0) := "00001100010000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv16_D60D : STD_LOGIC_VECTOR (15 downto 0) := "1101011000001101";
    constant ap_const_lv15_560D : STD_LOGIC_VECTOR (14 downto 0) := "101011000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv30_3FFFE69A : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111110011010011010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_h_2_fu_140_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_2_reg_319 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_170_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_reg_324 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_cast_fu_176_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_22_cast_reg_329 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_w_2_fu_186_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_2_reg_337 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_23_cast3_fu_192_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_23_cast3_reg_342 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_347 : STD_LOGIC_VECTOR (13 downto 0);
    signal in_d_1_fu_220_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_d_1_reg_355 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal next_mul_fu_226_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul_reg_360 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_6_reg_375 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_s_fu_267_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal out_h_reg_77 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_88 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal output_load_1_reg_99 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_reg_112 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_123 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_tmp_cast_fu_304_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_146_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_fu_158_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_154_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_166_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_cast_fu_196_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_200_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_cast_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_232_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_cast_fu_237_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_241_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_32_cast_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_309_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_3_fu_272_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_276_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_cast_fu_282_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_tmp_s_fu_296_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_fu_309_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component network_mul_mul_16s_14s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_14s_30_1_1_U66 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => input_load_reg_370,
        din1 => tmp_9_fu_309_p1,
        dout => tmp_9_fu_309_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_d_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                in_d_reg_112 <= in_d_1_reg_355;
            elsif (((exitcond1_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                in_d_reg_112 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_77_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_h_reg_77 <= out_h_2_reg_319;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_h_reg_77 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_w_reg_88 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                out_w_reg_88 <= out_w_2_reg_337;
            end if; 
        end if;
    end process;

    output_load_1_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                output_load_1_reg_99 <= tmp_s_fu_267_p2;
            elsif (((exitcond1_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                output_load_1_reg_99 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                phi_mul_reg_123 <= next_mul_reg_360;
            elsif (((exitcond1_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_123 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                in_d_1_reg_355 <= in_d_1_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_load_reg_370 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_214_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                next_mul_reg_360 <= next_mul_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                out_h_2_reg_319 <= out_h_2_fu_140_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_w_2_reg_337 <= out_w_2_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                output_addr_reg_347 <= tmp_2_fu_209_p1(14 - 1 downto 0);
                    tmp_23_cast3_reg_342(4 downto 0) <= tmp_23_cast3_fu_192_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_134_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_1_reg_324(10 downto 2) <= tmp_1_fu_170_p2(10 downto 2);
                    tmp_22_cast_reg_329(14 downto 2) <= tmp_22_cast_fu_176_p1(14 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_6_reg_375 <= tmp_9_fu_309_p2(29 downto 14);
            end if;
        end if;
    end process;
    tmp_1_reg_324(1 downto 0) <= "00";
    tmp_22_cast_reg_329(1 downto 0) <= "00";
    tmp_23_cast3_reg_342(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_134_p2, ap_CS_fsm_state3, exitcond1_fu_180_p2, ap_CS_fsm_state4, exitcond_fu_214_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond1_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_214_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_134_p2)
    begin
        if ((((exitcond2_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_134_p2)
    begin
        if (((exitcond2_fu_134_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_180_p2 <= "1" when (out_w_reg_88 = ap_const_lv5_1C) else "0";
    exitcond2_fu_134_p2 <= "1" when (out_h_reg_77 = ap_const_lv5_1C) else "0";
    exitcond_fu_214_p2 <= "1" when (in_d_reg_112 = ap_const_lv5_10) else "0";
    in_d_1_fu_220_p2 <= std_logic_vector(unsigned(in_d_reg_112) + unsigned(ap_const_lv5_1));
    input_r_address0 <= tmp_8_fu_250_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_226_p2 <= std_logic_vector(unsigned(phi_mul_reg_123) + unsigned(ap_const_lv14_310));
    out_h_2_fu_140_p2 <= std_logic_vector(unsigned(out_h_reg_77) + unsigned(ap_const_lv5_1));
    out_w_2_fu_186_p2 <= std_logic_vector(unsigned(out_w_reg_88) + unsigned(ap_const_lv5_1));
    output_r_address0 <= output_addr_reg_347;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8, output_load_1_reg_99, p_tmp_cast_fu_304_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_d0 <= p_tmp_cast_fu_304_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_d0 <= output_load_1_reg_99;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl4_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_158_p3),11));
    p_shl4_fu_158_p3 <= (out_h_reg_77 & ap_const_lv2_0);
    p_shl_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_146_p3),11));
    p_shl_fu_146_p3 <= (out_h_reg_77 & ap_const_lv5_0);
    p_tmp_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_tmp_s_fu_296_p3),16));
    p_tmp_s_fu_296_p3 <= 
        ap_const_lv15_0 when (tmp_5_fu_288_p3(0) = '1') else 
        tmp_27_cast_fu_282_p2;
    tmp1_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_232_p2),15));
    tmp1_fu_232_p2 <= std_logic_vector(unsigned(phi_mul_reg_123) + unsigned(tmp_23_cast3_reg_342));
    tmp_1_fu_170_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_154_p1) - unsigned(p_shl4_cast_fu_166_p1));
        tmp_22_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_170_p2),15));

    tmp_23_cast3_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_88),14));
    tmp_23_cast_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_88),11));
        tmp_25_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_200_p2),32));

    tmp_27_cast_fu_282_p2 <= std_logic_vector(signed(ap_const_lv15_560D) + signed(tmp_3_fu_272_p1));
    tmp_2_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_cast_fu_205_p1),64));
        tmp_32_cast_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_241_p2),32));

    tmp_3_fu_272_p1 <= output_load_1_reg_99(15 - 1 downto 0);
    tmp_4_fu_276_p2 <= std_logic_vector(signed(ap_const_lv16_D60D) + signed(output_load_1_reg_99));
    tmp_5_fu_288_p3 <= tmp_4_fu_276_p2(15 downto 15);
    tmp_7_fu_241_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_237_p1) + unsigned(tmp_22_cast_reg_329));
    tmp_8_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_cast_fu_246_p1),64));
    tmp_9_fu_309_p1 <= ap_const_lv30_3FFFE69A(14 - 1 downto 0);
    tmp_fu_200_p2 <= std_logic_vector(signed(tmp_1_reg_324) + signed(tmp_23_cast_fu_196_p1));
    tmp_s_fu_267_p2 <= std_logic_vector(unsigned(output_load_1_reg_99) + unsigned(tmp_6_reg_375));
end behav;
