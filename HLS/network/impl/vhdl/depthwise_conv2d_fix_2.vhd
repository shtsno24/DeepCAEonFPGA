-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_cast_fu_222_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_517 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_100_cast_fu_226_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_100_cast_reg_522 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_101_cast_fu_230_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_101_cast_reg_527 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_102_cast_fu_234_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_102_cast_reg_532 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul3_fu_238_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul3_reg_537 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_243_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_542 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_4_fu_254_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_4_reg_550 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_272_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_reg_555 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond4_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_addr_reg_560 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_4_fu_290_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_4_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp1_fu_310_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_reg_573 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond3_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_4_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_4_reg_581 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal output_addr_reg_586 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_h_1_fu_350_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_h_1_reg_594 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp3_fu_402_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_reg_599 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_reg_604 : STD_LOGIC_VECTOR (8 downto 0);
    signal k_w_1_fu_418_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_1_reg_612 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_627 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal kernel_0_load_reg_632 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_73_reg_637 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal out_d_reg_136 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_148 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_160 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_reg_172 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_184 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal k_h_reg_196 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_reg_207 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_s_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_487_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_66_fu_493_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_width_cast_fu_218_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_260_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_264_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_cast_fu_281_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_108_cast_fu_296_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_300_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_310_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_310_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_w_cast_fu_315_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_109_cast_fu_330_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_64_fu_334_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl5_fu_360_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl5_cast_fu_368_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_113_cast9_fu_356_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp4_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp4_cast_fu_388_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_392_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_402_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp3_fu_402_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_114_cast_fu_378_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_115_cast_fu_424_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_fu_428_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp5_cast_fu_434_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_68_fu_438_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp7_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp7_cast_fu_454_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_70_fu_458_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_122_cast_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_72_fu_500_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_310_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_402_p10 : STD_LOGIC_VECTOR (13 downto 0);

    component network_mul_mul_16s_16s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_1_1_U26 : component network_mul_mul_16s_16s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        din0 => kernel_0_load_reg_632,
        din1 => input_load_reg_627,
        dout => tmp_72_fu_500_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    k_h_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_412_p2 = ap_const_lv1_1))) then 
                k_h_reg_196 <= k_h_1_reg_594;
            elsif (((exitcond2_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_h_reg_196 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_w_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_w_reg_207 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_w_reg_207 <= k_w_1_reg_612;
            end if; 
        end if;
    end process;

    out_d_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_285_p2 = ap_const_lv1_1))) then 
                out_d_reg_136 <= out_d_4_reg_550;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_136 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_319_p2 = ap_const_lv1_1))) then 
                out_h_reg_172 <= out_h_4_reg_568;
            elsif (((exitcond4_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_172 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_w_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_reg_184 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                out_w_reg_184 <= out_w_4_reg_581;
            end if; 
        end if;
    end process;

    phi_mul2_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_285_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_160 <= next_mul3_reg_537;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_160 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_285_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_148 <= next_mul_reg_542;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_148 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_248_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bias_addr_reg_560 <= tmp_s_fu_276_p1(4 - 1 downto 0);
                    p_shl_cast_reg_555(6 downto 3) <= p_shl_cast_fu_272_p1(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_627 <= input_r_q0;
                kernel_0_load_reg_632 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_h_1_reg_594 <= k_h_1_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_w_1_reg_612 <= k_w_1_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_537 <= next_mul3_fu_238_p2;
                next_mul_reg_542 <= next_mul_fu_243_p2;
                out_d_4_reg_550 <= out_d_4_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_4_reg_568 <= out_h_4_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_4_reg_581 <= out_w_4_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                output_addr_reg_586 <= tmp_65_fu_339_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp1_reg_573 <= tmp1_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp3_reg_599 <= tmp3_fu_402_p2;
                tmp6_reg_604 <= tmp6_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_100_cast_reg_522(5 downto 0) <= tmp_100_cast_fu_226_p1(5 downto 0);
                    tmp_101_cast_reg_527(6 downto 0) <= tmp_101_cast_fu_230_p1(6 downto 0);
                    tmp_102_cast_reg_532(6 downto 0) <= tmp_102_cast_fu_234_p1(6 downto 0);
                    tmp_cast_reg_517(5 downto 0) <= tmp_cast_fu_222_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_73_reg_637 <= tmp_72_fu_500_p2(29 downto 14);
            end if;
        end if;
    end process;
    tmp_cast_reg_517(8 downto 6) <= "000";
    tmp_100_cast_reg_522(13 downto 6) <= "00000000";
    tmp_101_cast_reg_527(8 downto 7) <= "00";
    tmp_102_cast_reg_532(13 downto 7) <= "0000000";
    p_shl_cast_reg_555(2 downto 0) <= "000";
    p_shl_cast_reg_555(8 downto 7) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_248_p2, ap_CS_fsm_state3, exitcond3_fu_285_p2, ap_CS_fsm_state4, exitcond2_fu_319_p2, ap_CS_fsm_state5, exitcond1_fu_344_p2, ap_CS_fsm_state6, exitcond_fu_412_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_319_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_344_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_412_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_248_p2)
    begin
        if ((((exitcond4_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_248_p2)
    begin
        if (((exitcond4_fu_248_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_560;

    bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_344_p2 <= "1" when (k_h_reg_196 = ap_const_lv2_3) else "0";
    exitcond2_fu_319_p2 <= "1" when (out_w_cast_fu_315_p1 = output_width) else "0";
    exitcond3_fu_285_p2 <= "1" when (out_h_cast_fu_281_p1 = output_height) else "0";
    exitcond4_fu_248_p2 <= "1" when (out_d_reg_136 = ap_const_lv5_10) else "0";
    exitcond_fu_412_p2 <= "1" when (k_w_reg_207 = ap_const_lv2_3) else "0";
    input_r_address0 <= tmp_69_fu_443_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        input_width_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    k_h_1_fu_350_p2 <= std_logic_vector(unsigned(k_h_reg_196) + unsigned(ap_const_lv2_1));
    k_w_1_fu_418_p2 <= std_logic_vector(unsigned(k_w_reg_207) + unsigned(ap_const_lv2_1));
    kernel_0_address0 <= tmp_71_fu_467_p1(8 - 1 downto 0);

    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_238_p2 <= std_logic_vector(unsigned(phi_mul2_reg_160) + unsigned(tmp_101_cast_reg_527));
    next_mul_fu_243_p2 <= std_logic_vector(unsigned(phi_mul_reg_148) + unsigned(tmp_cast_reg_517));
    out_d_4_fu_254_p2 <= std_logic_vector(unsigned(out_d_reg_136) + unsigned(ap_const_lv5_1));
    out_h_4_fu_290_p2 <= std_logic_vector(unsigned(out_h_reg_172) + unsigned(ap_const_lv5_1));
    out_h_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_172),6));
    out_w_4_fu_324_p2 <= std_logic_vector(unsigned(out_w_reg_184) + unsigned(ap_const_lv5_1));
    out_w_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_184),6));

    output_r_address0_assign_proc : process(ap_CS_fsm_state4, output_addr_reg_586, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9, tmp_65_fu_339_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_address0 <= output_addr_reg_586;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= tmp_65_fu_339_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state9, tmp_74_fu_487_p2, tmp_66_fu_493_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d0 <= tmp_66_fu_493_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d0 <= tmp_74_fu_487_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state4, exitcond2_fu_319_p2, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((exitcond2_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl5_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_360_p3),5));
    p_shl5_fu_360_p3 <= (k_h_reg_196 & ap_const_lv2_0);
    p_shl_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_264_p3),9));
    p_shl_fu_264_p3 <= (tmp_29_fu_260_p1 & ap_const_lv3_0);
    tmp1_fu_310_p0 <= tmp1_fu_310_p00(9 - 1 downto 0);
    tmp1_fu_310_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_300_p2),14));
    tmp1_fu_310_p1 <= tmp_100_cast_reg_522(6 - 1 downto 0);
    tmp1_fu_310_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_310_p0) * unsigned(tmp1_fu_310_p1), 14));
    tmp2_fu_392_p2 <= std_logic_vector(unsigned(phi_mul2_reg_160) + unsigned(tmp4_cast_fu_388_p1));
    tmp3_fu_402_p0 <= tmp_102_cast_reg_532(7 - 1 downto 0);
    tmp3_fu_402_p1 <= tmp3_fu_402_p10(9 - 1 downto 0);
    tmp3_fu_402_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_392_p2),14));
    tmp3_fu_402_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_402_p0) * unsigned(tmp3_fu_402_p1), 14));
    tmp4_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_382_p2),9));
    tmp4_fu_382_p2 <= std_logic_vector(unsigned(tmp_113_cast9_fu_356_p1) + unsigned(out_h_reg_172));
    tmp5_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_428_p2),14));
    tmp5_fu_428_p2 <= std_logic_vector(unsigned(tmp_115_cast_fu_424_p1) + unsigned(out_w_reg_184));
    tmp6_fu_407_p2 <= std_logic_vector(signed(tmp_114_cast_fu_378_p1) + signed(p_shl_cast_reg_555));
    tmp7_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_448_p2),9));
    tmp7_fu_448_p2 <= std_logic_vector(unsigned(out_d_reg_136) + unsigned(tmp_115_cast_fu_424_p1));
    tmp_100_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    tmp_101_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    tmp_102_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_218_p1),14));
    tmp_108_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_172),9));
    tmp_109_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_184),14));
    tmp_113_cast9_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_reg_196),5));
        tmp_114_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_67_fu_372_p2),9));

    tmp_115_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_reg_207),5));
        tmp_122_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_70_fu_458_p2),32));

    tmp_29_fu_260_p1 <= out_d_reg_136(4 - 1 downto 0);
    tmp_64_fu_334_p2 <= std_logic_vector(unsigned(tmp1_reg_573) + unsigned(tmp_109_cast_fu_330_p1));
    tmp_65_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_64_fu_334_p2),64));
    tmp_66_fu_493_p2 <= std_logic_vector(unsigned(output_r_q0) + unsigned(bias_q0));
    tmp_67_fu_372_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_368_p1) - unsigned(tmp_113_cast9_fu_356_p1));
    tmp_68_fu_438_p2 <= std_logic_vector(unsigned(tmp5_cast_fu_434_p1) + unsigned(tmp3_reg_599));
    tmp_69_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_438_p2),64));
    tmp_70_fu_458_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_454_p1) + unsigned(tmp6_reg_604));
    tmp_71_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_122_cast_fu_463_p1),64));
    tmp_74_fu_487_p2 <= std_logic_vector(unsigned(output_r_q0) + unsigned(tmp_73_reg_637));
    tmp_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
    tmp_fu_300_p2 <= std_logic_vector(unsigned(phi_mul_reg_148) + unsigned(tmp_108_cast_fu_296_p1));
    tmp_s_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_136),64));
end behav;
