-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity up_sampling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (4 downto 0);
    input_width : IN STD_LOGIC_VECTOR (4 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of up_sampling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000101";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_282 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal output_width_cast_fu_287_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast_reg_722 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_width_cast_cas_fu_291_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal input_width_cast_cas_reg_733 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_cast_fu_295_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_reg_738 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_fu_299_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_cast_reg_743 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_cast_cast_fu_303_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_cast_cast_reg_748 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul3_fu_307_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul3_reg_753 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_312_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_758 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_d_1_fu_326_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_1_reg_766 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_1_fu_341_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_1_reg_774 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_365_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_779 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_371_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_reg_784 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_385_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_cast_reg_789 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp3_cast_fu_397_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp3_cast_reg_800 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_811 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_s_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_815 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_2_fu_433_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_reg_825 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_1_fu_438_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_1_reg_830 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_1_reg_837 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_10_1_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_1_reg_841 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_13_1_fu_477_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_1_reg_851 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_1_1_fu_482_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_1_1_reg_856 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_2_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_2_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_10_2_fu_509_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_2_reg_867 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_13_2_fu_521_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_2_reg_877 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_1_2_fu_526_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_1_2_reg_882 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_3_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_3_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_10_3_fu_553_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_3_reg_893 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_13_3_fu_565_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_3_reg_903 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_1_3_fu_570_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_1_3_reg_908 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_4_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_4_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_10_4_fu_597_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_4_reg_919 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_13_4_fu_609_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_4_reg_929 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_1_4_fu_614_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_1_4_reg_934 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_5_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_5_reg_941 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_10_5_fu_641_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_5_reg_945 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal input_load_5_reg_955 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_13_5_fu_653_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_5_reg_960 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_1_5_fu_658_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_1_5_reg_965 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_6_fu_685_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_6_reg_975 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal exitcond_6_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_6_fu_693_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_6_reg_980 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_1_6_fu_698_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_1_6_reg_985 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal out_d_reg_224 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_235 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul2_reg_247 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_reg_259 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_270 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_1_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_1_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_1_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_2_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_2_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_3_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_3_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_4_fu_602_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_4_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_5_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_5_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_6_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_6_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_d_cast_fu_317_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_h_cast_fu_332_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal div_fu_347_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_cast_fu_357_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_361_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_380_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_380_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_380_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_392_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_392_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_392_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal div1_fu_406_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_4_fu_416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_cast_fu_429_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal div1_1_fu_452_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_fu_461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_1_cast_fu_474_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal div1_2_fu_496_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_fu_505_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_2_cast_fu_518_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal div1_3_fu_540_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_fu_549_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_3_cast_fu_562_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal div1_4_fu_584_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_fu_593_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_4_cast_fu_606_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal div1_5_fu_628_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_fu_637_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_5_cast_fu_650_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal div1_6_fu_672_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_fu_681_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_6_cast_fu_690_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp1_fu_380_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_392_p00 : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_336_p2 = ap_const_lv1_1))) then 
                out_d_reg_224 <= out_d_1_reg_766;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_224 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_321_p2 = ap_const_lv1_0))) then 
                out_h_reg_259 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state23) and ((exitcond_reg_811 = ap_const_lv1_1) or ((exitcond_1_reg_837 = ap_const_lv1_1) or ((exitcond_2_reg_863 = ap_const_lv1_1) or ((exitcond_3_reg_889 = ap_const_lv1_1) or ((exitcond_4_reg_915 = ap_const_lv1_1) or ((exitcond_6_fu_668_p2 = ap_const_lv1_1) or (exitcond_5_reg_941 = ap_const_lv1_1))))))))) then 
                out_h_reg_259 <= out_h_1_reg_774;
            end if; 
        end if;
    end process;

    out_w_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_reg_270 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                out_w_reg_270 <= out_w_1_6_reg_985;
            end if; 
        end if;
    end process;

    phi_mul2_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_336_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_247 <= next_mul3_reg_753;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_247 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_336_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_235 <= next_mul_reg_758;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_235 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                exitcond_1_reg_837 <= exitcond_1_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                exitcond_2_reg_863 <= exitcond_2_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                exitcond_3_reg_889 <= exitcond_3_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                exitcond_4_reg_915 <= exitcond_4_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                exitcond_5_reg_941 <= exitcond_5_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                exitcond_reg_811 <= exitcond_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                input_load_5_reg_955 <= input_r_q0;
                out_w_1_5_reg_965 <= out_w_1_5_fu_658_p2;
                tmp_13_5_reg_960 <= tmp_13_5_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    input_width_cast_cas_reg_733(4 downto 0) <= input_width_cast_cas_fu_291_p1(4 downto 0);
                    output_width_cast_reg_722(5 downto 0) <= output_width_cast_fu_287_p1(5 downto 0);
                    tmp_1_cast_reg_738(4 downto 0) <= tmp_1_cast_fu_295_p1(4 downto 0);
                    tmp_3_cast_reg_743(5 downto 0) <= tmp_3_cast_fu_299_p1(5 downto 0);
                    tmp_4_cast_cast_reg_748(5 downto 0) <= tmp_4_cast_cast_fu_303_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_753 <= next_mul3_fu_307_p2;
                next_mul_reg_758 <= next_mul_fu_312_p2;
                out_d_1_reg_766 <= out_d_1_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_1_reg_774 <= out_h_1_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                out_w_1_1_reg_856 <= out_w_1_1_fu_482_p2;
                tmp_13_1_reg_851 <= tmp_13_1_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                out_w_1_2_reg_882 <= out_w_1_2_fu_526_p2;
                tmp_13_2_reg_877 <= tmp_13_2_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                out_w_1_3_reg_908 <= out_w_1_3_fu_570_p2;
                tmp_13_3_reg_903 <= tmp_13_3_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                out_w_1_4_reg_934 <= out_w_1_4_fu_614_p2;
                tmp_13_4_reg_929 <= tmp_13_4_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond_6_fu_668_p2 = ap_const_lv1_0) and (exitcond_5_reg_941 = ap_const_lv1_0) and (exitcond_4_reg_915 = ap_const_lv1_0) and (exitcond_3_reg_889 = ap_const_lv1_0) and (exitcond_2_reg_863 = ap_const_lv1_0) and (exitcond_1_reg_837 = ap_const_lv1_0) and (exitcond_reg_811 = ap_const_lv1_0))) then
                out_w_1_6_reg_985 <= out_w_1_6_fu_698_p2;
                tmp_10_6_reg_975 <= tmp_10_6_fu_685_p2;
                tmp_13_6_reg_980 <= tmp_13_6_fu_693_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                out_w_1_reg_830 <= out_w_1_fu_438_p2;
                tmp_2_reg_825 <= tmp_2_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_282 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp1_cast_reg_789(12 downto 0) <= tmp1_cast_fu_385_p1(12 downto 0);
                    tmp3_cast_reg_800(14 downto 0) <= tmp3_cast_fu_397_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_336_p2 = ap_const_lv1_0))) then
                tmp2_reg_784 <= tmp2_fu_371_p2;
                tmp_reg_779 <= tmp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_1_fu_448_p2 = ap_const_lv1_0))) then
                tmp_10_1_reg_841 <= tmp_10_1_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_2_fu_492_p2 = ap_const_lv1_0))) then
                tmp_10_2_reg_867 <= tmp_10_2_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond_3_fu_536_p2 = ap_const_lv1_0))) then
                tmp_10_3_reg_893 <= tmp_10_3_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (exitcond_4_fu_580_p2 = ap_const_lv1_0))) then
                tmp_10_4_reg_919 <= tmp_10_4_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond_5_fu_624_p2 = ap_const_lv1_0))) then
                tmp_10_5_reg_945 <= tmp_10_5_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_401_p2 = ap_const_lv1_0))) then
                tmp_s_reg_815 <= tmp_s_fu_420_p2;
            end if;
        end if;
    end process;
    output_width_cast_reg_722(15 downto 6) <= "0000000000";
    input_width_cast_cas_reg_733(12 downto 5) <= "00000000";
    tmp_1_cast_reg_738(7 downto 5) <= "000";
    tmp_3_cast_reg_743(8 downto 6) <= "000";
    tmp_4_cast_cast_reg_748(14 downto 6) <= "000000000";
    tmp1_cast_reg_789(15 downto 13) <= "000";
    tmp3_cast_reg_800(16 downto 15) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_336_p2, exitcond_fu_401_p2, exitcond_reg_811, ap_CS_fsm_state5, exitcond_1_fu_448_p2, exitcond_1_reg_837, ap_CS_fsm_state8, exitcond_2_fu_492_p2, exitcond_2_reg_863, ap_CS_fsm_state11, exitcond_3_fu_536_p2, exitcond_3_reg_889, ap_CS_fsm_state14, exitcond_4_fu_580_p2, exitcond_4_reg_915, ap_CS_fsm_state17, exitcond_5_fu_624_p2, exitcond_5_reg_941, ap_CS_fsm_state20, ap_CS_fsm_state23, exitcond_6_fu_668_p2, exitcond3_fu_321_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_401_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond_1_fu_448_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_2_fu_492_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((exitcond_3_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((exitcond_4_fu_580_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((exitcond_5_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and ((exitcond_reg_811 = ap_const_lv1_1) or ((exitcond_1_reg_837 = ap_const_lv1_1) or ((exitcond_2_reg_863 = ap_const_lv1_1) or ((exitcond_3_reg_889 = ap_const_lv1_1) or ((exitcond_4_reg_915 = ap_const_lv1_1) or ((exitcond_6_fu_668_p2 = ap_const_lv1_1) or (exitcond_5_reg_941 = ap_const_lv1_1))))))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_321_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond3_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_321_p2)
    begin
        if (((exitcond3_fu_321_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    div1_1_fu_452_p4 <= out_w_1_reg_830(15 downto 1);
    div1_2_fu_496_p4 <= out_w_1_1_reg_856(15 downto 1);
    div1_3_fu_540_p4 <= out_w_1_2_reg_882(15 downto 1);
    div1_4_fu_584_p4 <= out_w_1_3_reg_908(15 downto 1);
    div1_5_fu_628_p4 <= out_w_1_4_reg_934(15 downto 1);
    div1_6_fu_672_p4 <= out_w_1_5_reg_965(15 downto 1);
    div1_fu_406_p4 <= out_w_reg_270(15 downto 1);
    div_fu_347_p4 <= out_h_reg_259(4 downto 1);
    exitcond2_fu_336_p2 <= "1" when (out_h_cast_fu_332_p1 = output_height) else "0";
    exitcond3_fu_321_p2 <= "1" when (out_d_cast_fu_317_p1 = output_depth) else "0";
    exitcond_1_fu_448_p2 <= "1" when (out_w_1_reg_830 = output_width_cast_reg_722) else "0";
    exitcond_2_fu_492_p2 <= "1" when (out_w_1_1_reg_856 = output_width_cast_reg_722) else "0";
    exitcond_3_fu_536_p2 <= "1" when (out_w_1_2_reg_882 = output_width_cast_reg_722) else "0";
    exitcond_4_fu_580_p2 <= "1" when (out_w_1_3_reg_908 = output_width_cast_reg_722) else "0";
    exitcond_5_fu_624_p2 <= "1" when (out_w_1_4_reg_934 = output_width_cast_reg_722) else "0";
    exitcond_6_fu_668_p2 <= "1" when (out_w_1_5_reg_965 = output_width_cast_reg_722) else "0";
    exitcond_fu_401_p2 <= "1" when (out_w_reg_270 = output_width_cast_reg_722) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state24, tmp_1_fu_425_p1, tmp_11_1_fu_470_p1, tmp_11_2_fu_514_p1, tmp_11_3_fu_558_p1, tmp_11_4_fu_602_p1, tmp_11_5_fu_646_p1, tmp_11_6_fu_704_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_r_address0 <= tmp_11_6_fu_704_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_r_address0 <= tmp_11_5_fu_646_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_address0 <= tmp_11_4_fu_602_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address0 <= tmp_11_3_fu_558_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= tmp_11_2_fu_514_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= tmp_11_1_fu_470_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= tmp_1_fu_425_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_width_cast_cas_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),13));
    next_mul3_fu_307_p2 <= std_logic_vector(unsigned(phi_mul2_reg_247) + unsigned(tmp_3_cast_reg_743));
    next_mul_fu_312_p2 <= std_logic_vector(unsigned(phi_mul_reg_235) + unsigned(tmp_1_cast_reg_738));
    out_d_1_fu_326_p2 <= std_logic_vector(unsigned(out_d_reg_224) + unsigned(ap_const_lv5_1));
    out_d_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_224),6));
    out_h_1_fu_341_p2 <= std_logic_vector(unsigned(out_h_reg_259) + unsigned(ap_const_lv5_1));
    out_h_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_259),6));
    out_w_1_1_fu_482_p2 <= std_logic_vector(unsigned(out_w_reg_270) + unsigned(ap_const_lv16_2));
    out_w_1_2_fu_526_p2 <= std_logic_vector(unsigned(out_w_reg_270) + unsigned(ap_const_lv16_3));
    out_w_1_3_fu_570_p2 <= std_logic_vector(unsigned(out_w_reg_270) + unsigned(ap_const_lv16_4));
    out_w_1_4_fu_614_p2 <= std_logic_vector(unsigned(out_w_reg_270) + unsigned(ap_const_lv16_5));
    out_w_1_5_fu_658_p2 <= std_logic_vector(unsigned(out_w_reg_270) + unsigned(ap_const_lv16_6));
    out_w_1_6_fu_698_p2 <= std_logic_vector(unsigned(out_w_reg_270) + unsigned(ap_const_lv16_7));
    out_w_1_fu_438_p2 <= std_logic_vector(unsigned(out_w_reg_270) + unsigned(ap_const_lv16_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26, tmp_3_fu_444_p1, tmp_14_1_fu_488_p1, tmp_14_2_fu_532_p1, tmp_14_3_fu_576_p1, tmp_14_4_fu_620_p1, tmp_14_5_fu_664_p1, tmp_14_6_fu_708_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            output_r_address0 <= tmp_14_6_fu_708_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_address0 <= tmp_14_5_fu_664_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_address0 <= tmp_14_4_fu_620_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_address0 <= tmp_14_3_fu_576_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_address0 <= tmp_14_2_fu_532_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address0 <= tmp_14_1_fu_488_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= tmp_3_fu_444_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(reg_282, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state20, input_load_5_reg_955, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            output_r_d0 <= input_load_5_reg_955;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_d0 <= reg_282;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(exitcond_reg_811, exitcond_1_reg_837, ap_CS_fsm_state8, exitcond_2_reg_863, ap_CS_fsm_state11, exitcond_3_reg_889, ap_CS_fsm_state14, exitcond_4_reg_915, ap_CS_fsm_state17, exitcond_5_reg_941, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state23) and (exitcond_5_reg_941 = ap_const_lv1_0) and (exitcond_4_reg_915 = ap_const_lv1_0) and (exitcond_3_reg_889 = ap_const_lv1_0) and (exitcond_2_reg_863 = ap_const_lv1_0) and (exitcond_1_reg_837 = ap_const_lv1_0) and (exitcond_reg_811 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),16));
    tmp1_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_380_p2),16));
    tmp1_fu_380_p0 <= tmp1_fu_380_p00(8 - 1 downto 0);
    tmp1_fu_380_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_779),13));
    tmp1_fu_380_p1 <= input_width_cast_cas_reg_733(5 - 1 downto 0);
    tmp1_fu_380_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_380_p0) * unsigned(tmp1_fu_380_p1), 13));
    tmp2_fu_371_p2 <= std_logic_vector(unsigned(phi_mul2_reg_247) + unsigned(tmp_cast_fu_361_p1));
    tmp3_cast_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_392_p2),17));
    tmp3_fu_392_p0 <= tmp3_fu_392_p00(9 - 1 downto 0);
    tmp3_fu_392_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_784),15));
    tmp3_fu_392_p1 <= tmp_4_cast_cast_reg_748(6 - 1 downto 0);
    tmp3_fu_392_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_392_p0) * unsigned(tmp3_fu_392_p1), 15));
    tmp_10_1_fu_465_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_789) + unsigned(tmp_5_fu_461_p1));
    tmp_10_2_fu_509_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_789) + unsigned(tmp_8_fu_505_p1));
    tmp_10_3_fu_553_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_789) + unsigned(tmp_9_fu_549_p1));
    tmp_10_4_fu_597_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_789) + unsigned(tmp_6_fu_593_p1));
    tmp_10_5_fu_641_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_789) + unsigned(tmp_7_fu_637_p1));
    tmp_10_6_fu_685_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_789) + unsigned(tmp_10_fu_681_p1));
    tmp_10_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_6_fu_672_p4),16));
    tmp_11_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_1_reg_841),64));
    tmp_11_2_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_2_reg_867),64));
    tmp_11_3_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_3_reg_893),64));
    tmp_11_4_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_4_reg_919),64));
    tmp_11_5_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_5_reg_945),64));
    tmp_11_6_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_6_reg_975),64));
    tmp_12_1_cast_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_1_reg_830),17));
    tmp_12_2_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_1_1_reg_856),17));
    tmp_12_3_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_1_2_reg_882),17));
    tmp_12_4_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_1_3_reg_908),17));
    tmp_12_5_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_1_4_reg_934),17));
    tmp_12_6_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_1_5_reg_965),17));
    tmp_12_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_270),17));
    tmp_13_1_fu_477_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_800) + unsigned(tmp_12_1_cast_fu_474_p1));
    tmp_13_2_fu_521_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_800) + unsigned(tmp_12_2_cast_fu_518_p1));
    tmp_13_3_fu_565_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_800) + unsigned(tmp_12_3_cast_fu_562_p1));
    tmp_13_4_fu_609_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_800) + unsigned(tmp_12_4_cast_fu_606_p1));
    tmp_13_5_fu_653_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_800) + unsigned(tmp_12_5_cast_fu_650_p1));
    tmp_13_6_fu_693_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_800) + unsigned(tmp_12_6_cast_fu_690_p1));
    tmp_14_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_1_reg_851),64));
    tmp_14_2_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_2_reg_877),64));
    tmp_14_3_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_3_reg_903),64));
    tmp_14_4_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_4_reg_929),64));
    tmp_14_5_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_5_reg_960),64));
    tmp_14_6_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_6_reg_980),64));
    tmp_1_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),8));
    tmp_1_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_815),64));
    tmp_2_fu_433_p2 <= std_logic_vector(unsigned(tmp3_cast_reg_800) + unsigned(tmp_12_cast_fu_429_p1));
    tmp_3_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
    tmp_3_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_825),64));
    tmp_4_cast_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),15));
    tmp_4_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_fu_406_p4),16));
    tmp_5_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_1_fu_452_p4),16));
    tmp_6_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_4_fu_584_p4),16));
    tmp_7_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_5_fu_628_p4),16));
    tmp_8_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_2_fu_496_p4),16));
    tmp_9_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_fu_347_p4),8));
    tmp_9_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_3_fu_540_p4),16));
    tmp_cast_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_259),9));
    tmp_fu_365_p2 <= std_logic_vector(unsigned(phi_mul_reg_235) + unsigned(tmp_9_cast_fu_357_p1));
    tmp_s_fu_420_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_789) + unsigned(tmp_4_fu_416_p1));
end behav;
