// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_depth;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] tmp_cast_fu_247_p1;
reg   [8:0] tmp_cast_reg_540;
wire   [13:0] tmp_73_cast1_fu_251_p1;
reg   [13:0] tmp_73_cast1_reg_545;
wire   [7:0] tmp_74_cast_fu_255_p1;
reg   [7:0] tmp_74_cast_reg_551;
wire   [11:0] tmp_75_cast_fu_259_p1;
reg   [11:0] tmp_75_cast_reg_556;
wire   [7:0] next_mul3_fu_263_p2;
reg   [7:0] next_mul3_reg_561;
wire    ap_CS_fsm_state2;
wire   [8:0] next_mul_fu_268_p2;
reg   [8:0] next_mul_reg_566;
wire   [4:0] out_d_3_fu_282_p2;
reg   [4:0] out_d_3_reg_574;
wire   [3:0] out_h_3_fu_297_p2;
reg   [3:0] out_h_3_reg_582;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp4_fu_329_p2;
reg   [13:0] tmp4_reg_587;
wire   [0:0] exitcond3_fu_292_p2;
wire   [13:0] tmp1_1_fu_344_p2;
reg   [13:0] tmp1_1_reg_592;
wire   [11:0] tmp3_fu_359_p2;
reg   [11:0] tmp3_reg_597;
wire    ap_CS_fsm_state4;
wire   [3:0] out_w_3_fu_376_p2;
reg   [3:0] out_w_3_reg_610;
wire   [11:0] tmp_81_cast9_fu_382_p1;
reg   [11:0] tmp_81_cast9_reg_615;
wire   [0:0] exitcond2_fu_371_p2;
wire   [4:0] tmp_54_fu_386_p3;
reg   [4:0] tmp_54_reg_620;
wire   [1:0] in_w_1_fu_400_p2;
reg   [1:0] in_w_1_reg_629;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_55_fu_406_p2;
reg   [0:0] tmp_55_reg_634;
wire   [0:0] exitcond_fu_394_p2;
wire   [15:0] buffer_6_fu_449_p3;
wire    ap_CS_fsm_state6;
wire   [1:0] in_w_1_1_fu_462_p2;
reg   [1:0] in_w_1_1_reg_652;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_1_fu_456_p2;
wire   [15:0] buffer_6_1_fu_511_p3;
wire    ap_CS_fsm_state8;
reg   [4:0] out_d_reg_134;
reg   [8:0] phi_mul_reg_145;
reg   [7:0] phi_mul2_reg_157;
reg   [3:0] out_h_reg_169;
wire   [0:0] exitcond4_fu_277_p2;
reg   [3:0] out_w_reg_180;
reg   [15:0] buffer_4_reg_191;
reg   [1:0] in_w_reg_201;
reg   [15:0] buffer_4_1_reg_212;
reg   [1:0] in_w_s_reg_224;
wire   [63:0] tmp_57_fu_430_p1;
wire   [63:0] tmp_95_1_fu_486_p1;
wire   [63:0] tmp_60_fu_495_p1;
reg   [15:0] buffer_fu_66;
wire  signed [4:0] output_width_cast3_fu_235_p0;
wire  signed [4:0] output_height_cast2_fu_239_p0;
wire  signed [6:0] input_width_cast_fu_243_p1;
wire  signed [5:0] output_height_cast2_fu_239_p1;
wire  signed [5:0] output_width_cast3_fu_235_p1;
wire   [5:0] out_d_cast_fu_273_p1;
wire   [4:0] out_h_cast_fu_288_p1;
wire  signed [4:0] exitcond3_fu_292_p1;
wire   [4:0] tmp_s_fu_307_p3;
wire   [8:0] tmp_80_cast_fu_315_p1;
wire   [8:0] tmp1_fu_319_p2;
wire   [6:0] tmp4_fu_329_p0;
wire   [8:0] tmp4_fu_329_p1;
wire   [8:0] tmp_1_fu_334_p2;
wire   [6:0] tmp1_1_fu_344_p0;
wire   [8:0] tmp1_1_fu_344_p1;
wire   [7:0] tmp_79_cast1_fu_303_p1;
wire   [7:0] tmp2_fu_349_p2;
wire   [5:0] tmp3_fu_359_p0;
wire   [7:0] tmp3_fu_359_p1;
wire   [4:0] out_w_cast_fu_367_p1;
wire  signed [4:0] exitcond2_fu_371_p1;
wire   [4:0] tmp_87_cast_fu_412_p1;
wire   [4:0] tmp5_fu_416_p2;
wire   [13:0] tmp5_cast_fu_421_p1;
wire   [13:0] tmp_56_fu_425_p2;
wire   [0:0] tmp_58_fu_435_p2;
wire   [15:0] input_load_buffer_4_fu_441_p3;
wire   [4:0] tmp_93_1_cast_fu_468_p1;
wire   [4:0] tmp6_fu_472_p2;
wire   [13:0] tmp6_cast_fu_477_p1;
wire   [13:0] tmp_94_1_fu_481_p2;
wire   [11:0] tmp_59_fu_491_p2;
wire   [0:0] tmp_99_1_fu_505_p2;
reg   [7:0] ap_NS_fsm;
wire   [13:0] tmp1_1_fu_344_p10;
wire   [11:0] tmp3_fu_359_p10;
wire   [13:0] tmp4_fu_329_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_4_1_reg_212 <= buffer_6_1_fu_511_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_394_p2 == 1'd1))) begin
        buffer_4_1_reg_212 <= buffer_4_reg_191;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_4_reg_191 <= buffer_6_fu_449_p3;
    end else if (((exitcond2_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buffer_4_reg_191 <= buffer_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_w_reg_201 <= in_w_1_reg_629;
    end else if (((exitcond2_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_w_reg_201 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_w_s_reg_224 <= in_w_1_1_reg_652;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_394_p2 == 1'd1))) begin
        in_w_s_reg_224 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_d_reg_134 <= out_d_3_reg_574;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_134 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_h_reg_169 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_371_p2 == 1'd1))) begin
        out_h_reg_169 <= out_h_3_reg_582;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_w_reg_180 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_1_fu_456_p2 == 1'd1))) begin
        out_w_reg_180 <= out_w_3_reg_610;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul2_reg_157 <= next_mul3_reg_561;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_157 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_145 <= next_mul_reg_566;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_145 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_1_fu_456_p2 == 1'd1))) begin
        buffer_fu_66 <= buffer_4_1_reg_212;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_w_1_1_reg_652 <= in_w_1_1_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_w_1_reg_629 <= in_w_1_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul3_reg_561 <= next_mul3_fu_263_p2;
        next_mul_reg_566 <= next_mul_fu_268_p2;
        out_d_3_reg_574 <= out_d_3_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_3_reg_582 <= out_h_3_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_3_reg_610 <= out_w_3_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp1_1_reg_592 <= tmp1_1_fu_344_p2;
        tmp3_reg_597 <= tmp3_fu_359_p2;
        tmp4_reg_587 <= tmp4_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_371_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_54_reg_620[4 : 1] <= tmp_54_fu_386_p3[4 : 1];
        tmp_81_cast9_reg_615[3 : 0] <= tmp_81_cast9_fu_382_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_394_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_55_reg_634 <= tmp_55_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_73_cast1_reg_545[6 : 0] <= tmp_73_cast1_fu_251_p1[6 : 0];
        tmp_74_cast_reg_551[5 : 0] <= tmp_74_cast_fu_255_p1[5 : 0];
        tmp_75_cast_reg_556[5 : 0] <= tmp_75_cast_fu_259_p1[5 : 0];
        tmp_cast_reg_540[6 : 0] <= tmp_cast_fu_247_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_277_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_277_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = tmp_95_1_fu_486_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = tmp_57_fu_430_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_1_fu_456_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_277_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_371_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_394_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_1_fu_456_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign buffer_6_1_fu_511_p3 = ((tmp_99_1_fu_505_p2[0:0] === 1'b1) ? input_r_q0 : buffer_4_1_reg_212);

assign buffer_6_fu_449_p3 = ((tmp_55_reg_634[0:0] === 1'b1) ? input_r_q0 : input_load_buffer_4_fu_441_p3);

assign exitcond2_fu_371_p1 = output_width;

assign exitcond2_fu_371_p2 = ((out_w_cast_fu_367_p1 == exitcond2_fu_371_p1) ? 1'b1 : 1'b0);

assign exitcond3_fu_292_p1 = output_height;

assign exitcond3_fu_292_p2 = ((out_h_cast_fu_288_p1 == exitcond3_fu_292_p1) ? 1'b1 : 1'b0);

assign exitcond4_fu_277_p2 = ((out_d_cast_fu_273_p1 == output_depth) ? 1'b1 : 1'b0);

assign exitcond_1_fu_456_p2 = ((in_w_s_reg_224 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_394_p2 = ((in_w_reg_201 == 2'd2) ? 1'b1 : 1'b0);

assign in_w_1_1_fu_462_p2 = (in_w_s_reg_224 + 2'd1);

assign in_w_1_fu_400_p2 = (in_w_reg_201 + 2'd1);

assign input_load_buffer_4_fu_441_p3 = ((tmp_58_fu_435_p2[0:0] === 1'b1) ? input_r_q0 : buffer_4_reg_191);

assign input_width_cast_fu_243_p1 = $signed(input_width);

assign next_mul3_fu_263_p2 = (phi_mul2_reg_157 + tmp_74_cast_reg_551);

assign next_mul_fu_268_p2 = (phi_mul_reg_145 + tmp_cast_reg_540);

assign out_d_3_fu_282_p2 = (out_d_reg_134 + 5'd1);

assign out_d_cast_fu_273_p1 = out_d_reg_134;

assign out_h_3_fu_297_p2 = (out_h_reg_169 + 4'd1);

assign out_h_cast_fu_288_p1 = out_h_reg_169;

assign out_w_3_fu_376_p2 = (out_w_reg_180 + 4'd1);

assign out_w_cast_fu_367_p1 = out_w_reg_180;

assign output_height_cast2_fu_239_p0 = output_height;

assign output_height_cast2_fu_239_p1 = output_height_cast2_fu_239_p0;

assign output_r_address0 = tmp_60_fu_495_p1;

assign output_r_d0 = buffer_4_1_reg_212;

assign output_width_cast3_fu_235_p0 = output_width;

assign output_width_cast3_fu_235_p1 = output_width_cast3_fu_235_p0;

assign tmp1_1_fu_344_p0 = tmp_73_cast1_reg_545;

assign tmp1_1_fu_344_p1 = tmp1_1_fu_344_p10;

assign tmp1_1_fu_344_p10 = tmp_1_fu_334_p2;

assign tmp1_1_fu_344_p2 = (tmp1_1_fu_344_p0 * tmp1_1_fu_344_p1);

assign tmp1_fu_319_p2 = (phi_mul_reg_145 + tmp_80_cast_fu_315_p1);

assign tmp2_fu_349_p2 = (tmp_79_cast1_fu_303_p1 + phi_mul2_reg_157);

assign tmp3_fu_359_p0 = tmp_75_cast_reg_556;

assign tmp3_fu_359_p1 = tmp3_fu_359_p10;

assign tmp3_fu_359_p10 = tmp2_fu_349_p2;

assign tmp3_fu_359_p2 = (tmp3_fu_359_p0 * tmp3_fu_359_p1);

assign tmp4_fu_329_p0 = tmp_73_cast1_reg_545;

assign tmp4_fu_329_p1 = tmp4_fu_329_p10;

assign tmp4_fu_329_p10 = tmp1_fu_319_p2;

assign tmp4_fu_329_p2 = (tmp4_fu_329_p0 * tmp4_fu_329_p1);

assign tmp5_cast_fu_421_p1 = tmp5_fu_416_p2;

assign tmp5_fu_416_p2 = (tmp_54_reg_620 + tmp_87_cast_fu_412_p1);

assign tmp6_cast_fu_477_p1 = tmp6_fu_472_p2;

assign tmp6_fu_472_p2 = (tmp_54_reg_620 + tmp_93_1_cast_fu_468_p1);

assign tmp_1_fu_334_p2 = (tmp1_fu_319_p2 + 9'd1);

assign tmp_54_fu_386_p3 = {{out_w_reg_180}, {1'd0}};

assign tmp_55_fu_406_p2 = ((in_w_reg_201 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_56_fu_425_p2 = (tmp5_cast_fu_421_p1 + tmp4_reg_587);

assign tmp_57_fu_430_p1 = tmp_56_fu_425_p2;

assign tmp_58_fu_435_p2 = (($signed(buffer_4_reg_191) < $signed(input_r_q0)) ? 1'b1 : 1'b0);

assign tmp_59_fu_491_p2 = (tmp3_reg_597 + tmp_81_cast9_reg_615);

assign tmp_60_fu_495_p1 = tmp_59_fu_491_p2;

assign tmp_73_cast1_fu_251_p1 = $unsigned(input_width_cast_fu_243_p1);

assign tmp_74_cast_fu_255_p1 = $unsigned(output_height_cast2_fu_239_p1);

assign tmp_75_cast_fu_259_p1 = $unsigned(output_width_cast3_fu_235_p1);

assign tmp_79_cast1_fu_303_p1 = out_h_reg_169;

assign tmp_80_cast_fu_315_p1 = tmp_s_fu_307_p3;

assign tmp_81_cast9_fu_382_p1 = out_w_reg_180;

assign tmp_87_cast_fu_412_p1 = in_w_reg_201;

assign tmp_93_1_cast_fu_468_p1 = in_w_s_reg_224;

assign tmp_94_1_fu_481_p2 = (tmp6_cast_fu_477_p1 + tmp1_1_reg_592);

assign tmp_95_1_fu_486_p1 = tmp_94_1_fu_481_p2;

assign tmp_99_1_fu_505_p2 = (($signed(buffer_4_1_reg_212) < $signed(input_r_q0)) ? 1'b1 : 1'b0);

assign tmp_cast_fu_247_p1 = input_height;

assign tmp_s_fu_307_p3 = {{out_h_reg_169}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_cast_reg_540[8:7] <= 2'b00;
    tmp_73_cast1_reg_545[13:7] <= 7'b0000000;
    tmp_74_cast_reg_551[7:6] <= 2'b00;
    tmp_75_cast_reg_556[11:6] <= 6'b000000;
    tmp_81_cast9_reg_615[11:4] <= 8'b00000000;
    tmp_54_reg_620[0] <= 1'b0;
end

endmodule //max_pooling2d_fix16
