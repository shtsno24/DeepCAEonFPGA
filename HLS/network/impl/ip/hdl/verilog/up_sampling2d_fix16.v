// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module up_sampling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [4:0] input_height;
input  [4:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_depth;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] tmp_1_cast_fu_157_p1;
reg   [7:0] tmp_1_cast_reg_328;
wire   [8:0] tmp_3_cast_fu_161_p1;
reg   [8:0] tmp_3_cast_reg_333;
wire   [13:0] tmp_4_cast_fu_165_p1;
reg   [13:0] tmp_4_cast_reg_338;
wire   [11:0] tmp_2_fu_169_p1;
reg   [11:0] tmp_2_reg_343;
wire   [8:0] next_mul3_fu_173_p2;
reg   [8:0] next_mul3_reg_348;
wire    ap_CS_fsm_state2;
wire   [7:0] next_mul_fu_178_p2;
reg   [7:0] next_mul_reg_353;
wire   [4:0] out_d_1_fu_192_p2;
reg   [4:0] out_d_1_reg_361;
wire   [4:0] out_h_1_fu_207_p2;
reg   [4:0] out_h_1_reg_369;
wire    ap_CS_fsm_state3;
wire   [11:0] tmp1_cast_fu_241_p2;
reg   [11:0] tmp1_cast_reg_374;
wire   [0:0] exitcond2_fu_202_p2;
wire   [13:0] tmp3_fu_256_p2;
reg   [13:0] tmp3_reg_379;
wire   [4:0] out_w_1_fu_270_p2;
reg   [4:0] out_w_1_reg_387;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_265_p2;
wire   [13:0] tmp_4_fu_304_p2;
reg   [13:0] tmp_4_reg_397;
reg   [15:0] input_load_reg_402;
wire    ap_CS_fsm_state5;
reg   [4:0] out_d_reg_100;
reg   [7:0] phi_mul_reg_111;
reg   [8:0] phi_mul2_reg_123;
reg   [4:0] out_h_reg_135;
wire   [0:0] exitcond3_fu_187_p2;
reg   [4:0] out_w_reg_146;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_3_fu_295_p1;
wire   [63:0] tmp_5_fu_309_p1;
wire   [5:0] out_d_cast_fu_183_p1;
wire   [5:0] out_h_cast_fu_198_p1;
wire   [3:0] div_fu_213_p4;
wire   [7:0] tmp_9_cast_fu_223_p1;
wire   [7:0] tmp_fu_231_p2;
wire   [7:0] tmp1_cast_fu_241_p0;
wire   [4:0] tmp1_cast_fu_241_p1;
wire   [8:0] tmp_cast_fu_227_p1;
wire   [8:0] tmp2_fu_246_p2;
wire   [8:0] tmp3_fu_256_p0;
wire   [5:0] tmp3_fu_256_p1;
wire   [5:0] out_w_cast_fu_261_p1;
wire   [3:0] div1_fu_276_p4;
wire   [11:0] tmp_8_cast_fu_286_p1;
wire   [11:0] tmp_s_fu_290_p2;
wire   [13:0] tmp_12_cast_fu_300_p1;
reg   [5:0] ap_NS_fsm;
wire   [11:0] tmp1_cast_fu_241_p00;
wire   [13:0] tmp3_fu_256_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_d_reg_100 <= out_d_1_reg_361;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_100 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_h_reg_135 <= 5'd0;
    end else if (((exitcond_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_h_reg_135 <= out_h_1_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_w_reg_146 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_w_reg_146 <= out_w_1_reg_387;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul2_reg_123 <= next_mul3_reg_348;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_123 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_111 <= next_mul_reg_353;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_111 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_load_reg_402 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul3_reg_348 <= next_mul3_fu_173_p2;
        next_mul_reg_353 <= next_mul_fu_178_p2;
        out_d_1_reg_361 <= out_d_1_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_1_reg_369 <= out_h_1_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_1_reg_387 <= out_w_1_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp1_cast_reg_374 <= tmp1_cast_fu_241_p2;
        tmp3_reg_379 <= tmp3_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_1_cast_reg_328[4 : 0] <= tmp_1_cast_fu_157_p1[4 : 0];
        tmp_2_reg_343[4 : 0] <= tmp_2_fu_169_p1[4 : 0];
        tmp_3_cast_reg_333[5 : 0] <= tmp_3_cast_fu_161_p1[5 : 0];
        tmp_4_cast_reg_338[5 : 0] <= tmp_4_cast_fu_165_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_4_reg_397 <= tmp_4_fu_304_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_187_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_187_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_187_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign div1_fu_276_p4 = {{out_w_reg_146[4:1]}};

assign div_fu_213_p4 = {{out_h_reg_135[4:1]}};

assign exitcond2_fu_202_p2 = ((out_h_cast_fu_198_p1 == output_height) ? 1'b1 : 1'b0);

assign exitcond3_fu_187_p2 = ((out_d_cast_fu_183_p1 == output_depth) ? 1'b1 : 1'b0);

assign exitcond_fu_265_p2 = ((out_w_cast_fu_261_p1 == output_width) ? 1'b1 : 1'b0);

assign input_r_address0 = tmp_3_fu_295_p1;

assign next_mul3_fu_173_p2 = (phi_mul2_reg_123 + tmp_3_cast_reg_333);

assign next_mul_fu_178_p2 = (phi_mul_reg_111 + tmp_1_cast_reg_328);

assign out_d_1_fu_192_p2 = (out_d_reg_100 + 5'd1);

assign out_d_cast_fu_183_p1 = out_d_reg_100;

assign out_h_1_fu_207_p2 = (out_h_reg_135 + 5'd1);

assign out_h_cast_fu_198_p1 = out_h_reg_135;

assign out_w_1_fu_270_p2 = (out_w_reg_146 + 5'd1);

assign out_w_cast_fu_261_p1 = out_w_reg_146;

assign output_r_address0 = tmp_5_fu_309_p1;

assign output_r_d0 = input_load_reg_402;

assign tmp1_cast_fu_241_p0 = tmp1_cast_fu_241_p00;

assign tmp1_cast_fu_241_p00 = tmp_fu_231_p2;

assign tmp1_cast_fu_241_p1 = tmp_2_reg_343;

assign tmp1_cast_fu_241_p2 = (tmp1_cast_fu_241_p0 * tmp1_cast_fu_241_p1);

assign tmp2_fu_246_p2 = (phi_mul2_reg_123 + tmp_cast_fu_227_p1);

assign tmp3_fu_256_p0 = tmp3_fu_256_p00;

assign tmp3_fu_256_p00 = tmp2_fu_246_p2;

assign tmp3_fu_256_p1 = tmp_4_cast_reg_338;

assign tmp3_fu_256_p2 = (tmp3_fu_256_p0 * tmp3_fu_256_p1);

assign tmp_12_cast_fu_300_p1 = out_w_reg_146;

assign tmp_1_cast_fu_157_p1 = input_height;

assign tmp_2_fu_169_p1 = input_width;

assign tmp_3_cast_fu_161_p1 = output_height;

assign tmp_3_fu_295_p1 = tmp_s_fu_290_p2;

assign tmp_4_cast_fu_165_p1 = output_width;

assign tmp_4_fu_304_p2 = (tmp_12_cast_fu_300_p1 + tmp3_reg_379);

assign tmp_5_fu_309_p1 = tmp_4_reg_397;

assign tmp_8_cast_fu_286_p1 = div1_fu_276_p4;

assign tmp_9_cast_fu_223_p1 = div_fu_213_p4;

assign tmp_cast_fu_227_p1 = out_h_reg_135;

assign tmp_fu_231_p2 = (phi_mul_reg_111 + tmp_9_cast_fu_223_p1);

assign tmp_s_fu_290_p2 = (tmp_8_cast_fu_286_p1 + tmp1_cast_reg_374);

always @ (posedge ap_clk) begin
    tmp_1_cast_reg_328[7:5] <= 3'b000;
    tmp_3_cast_reg_333[8:6] <= 3'b000;
    tmp_4_cast_reg_338[13:6] <= 8'b00000000;
    tmp_2_reg_343[11:5] <= 7'b0000000;
end

endmodule //up_sampling2d_fix16
