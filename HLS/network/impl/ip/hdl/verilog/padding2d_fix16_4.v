// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [15:0] input_0_q0;
input  [15:0] output_width;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg[9:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [20:0] tmp_15_cast1_fu_162_p1;
reg   [20:0] tmp_15_cast1_reg_342;
wire   [20:0] next_mul_fu_166_p2;
reg   [20:0] next_mul_reg_347;
wire    ap_CS_fsm_state2;
wire   [4:0] height_1_fu_177_p2;
reg   [4:0] height_1_reg_355;
wire   [0:0] tmp_s_fu_183_p2;
reg   [0:0] tmp_s_reg_360;
wire   [0:0] exitcond1_fu_171_p2;
wire   [0:0] tmp_15_fu_189_p2;
reg   [0:0] tmp_15_reg_364;
reg   [9:0] output_addr_2_reg_368;
wire   [10:0] tmp7_fu_230_p2;
reg   [10:0] tmp7_reg_373;
wire   [4:0] width_2_fu_246_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] width_3_fu_274_p2;
reg   [4:0] width_3_reg_389;
wire   [0:0] tmp_18_fu_280_p2;
reg   [0:0] tmp_18_reg_394;
wire   [0:0] exitcond9_fu_268_p2;
wire   [0:0] tmp_20_fu_286_p2;
reg   [0:0] tmp_20_reg_398;
wire   [20:0] grp_fu_157_p2;
reg   [20:0] tmp_23_reg_407;
wire   [4:0] width_1_fu_327_p2;
reg   [4:0] height_reg_101;
wire   [0:0] exitcond2_fu_321_p2;
wire   [0:0] exitcond8_fu_240_p2;
reg   [20:0] phi_mul_reg_112;
reg   [4:0] width2_reg_124;
reg   [4:0] width1_reg_135;
wire    ap_CS_fsm_state4;
reg   [4:0] width_reg_146;
wire   [63:0] tmp_16_fu_195_p1;
wire   [63:0] tmp_19_fu_258_p1;
wire   [63:0] tmp_26_fu_292_p1;
wire   [63:0] tmp_22_fu_316_p1;
wire   [63:0] tmp_17_fu_333_p1;
wire   [63:0] tmp_24_fu_338_p1;
wire   [20:0] tmp_32_cast6_fu_263_p1;
wire   [4:0] tmp2_fu_200_p2;
wire   [9:0] p_shl3_fu_206_p3;
wire   [6:0] p_shl4_fu_218_p3;
wire   [10:0] p_shl3_cast_fu_214_p1;
wire   [10:0] p_shl4_cast_fu_226_p1;
wire   [20:0] tmp_30_cast_fu_236_p1;
wire   [20:0] tmp4_fu_252_p2;
wire   [4:0] tmp3_fu_297_p2;
wire   [10:0] tmp3_cast_fu_303_p1;
wire   [10:0] tmp_21_fu_307_p2;
wire  signed [31:0] tmp_38_cast_fu_312_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        height_reg_101 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & ((((exitcond9_fu_268_p2 == 1'd1) & (tmp_15_reg_364 == 1'd1) & (tmp_s_reg_360 == 1'd0)) | ((exitcond2_fu_321_p2 == 1'd1) & (tmp_s_reg_360 == 1'd1))) | ((exitcond8_fu_240_p2 == 1'd1) & (tmp_15_reg_364 == 1'd0) & (tmp_s_reg_360 == 1'd0))))) begin
        height_reg_101 <= height_1_reg_355;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_112 <= 21'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & ((((exitcond9_fu_268_p2 == 1'd1) & (tmp_15_reg_364 == 1'd1) & (tmp_s_reg_360 == 1'd0)) | ((exitcond2_fu_321_p2 == 1'd1) & (tmp_s_reg_360 == 1'd1))) | ((exitcond8_fu_240_p2 == 1'd1) & (tmp_15_reg_364 == 1'd0) & (tmp_s_reg_360 == 1'd0))))) begin
        phi_mul_reg_112 <= next_mul_reg_347;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_fu_189_p2 == 1'd1) & (exitcond1_fu_171_p2 == 1'd0) & (tmp_s_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        width1_reg_135 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        width1_reg_135 <= width_3_reg_389;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_fu_189_p2 == 1'd0) & (exitcond1_fu_171_p2 == 1'd0) & (tmp_s_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        width2_reg_124 <= 5'd0;
    end else if (((tmp_15_reg_364 == 1'd0) & (exitcond8_fu_240_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        width2_reg_124 <= width_2_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_171_p2 == 1'd0) & (tmp_s_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        width_reg_146 <= 5'd0;
    end else if (((exitcond2_fu_321_p2 == 1'd0) & (tmp_s_reg_360 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        width_reg_146 <= width_1_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        height_1_reg_355 <= height_1_fu_177_p2;
        next_mul_reg_347 <= next_mul_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_fu_189_p2 == 1'd1) & (exitcond1_fu_171_p2 == 1'd0) & (tmp_s_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        output_addr_2_reg_368 <= tmp_16_fu_195_p1;
        tmp7_reg_373[10 : 2] <= tmp7_fu_230_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_15_cast1_reg_342[15 : 0] <= tmp_15_cast1_fu_162_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_171_p2 == 1'd0) & (tmp_s_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_15_reg_364 <= tmp_15_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_reg_364 == 1'd1) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_18_reg_394 <= tmp_18_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_reg_364 == 1'd1) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_18_fu_280_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_20_reg_398 <= tmp_20_fu_286_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_fu_286_p2 == 1'd1) & (tmp_15_reg_364 == 1'd1) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_18_fu_280_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_23_reg_407 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_360 <= tmp_s_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_reg_364 == 1'd1) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        width_3_reg_389 <= width_3_fu_274_p2;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = tmp_24_fu_338_p1;
    end else if (((exitcond2_fu_321_p2 == 1'd0) & (tmp_s_reg_360 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        output_r_address0 = tmp_17_fu_333_p1;
    end else if (((tmp_18_fu_280_p2 == 1'd1) & (tmp_15_reg_364 == 1'd1) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_r_address0 = output_addr_2_reg_368;
    end else if (((tmp_15_reg_364 == 1'd1) & (tmp_20_fu_286_p2 == 1'd0) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_18_fu_280_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_r_address0 = tmp_26_fu_292_p1;
    end else if (((tmp_15_reg_364 == 1'd0) & (exitcond8_fu_240_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_r_address0 = tmp_19_fu_258_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((tmp_15_reg_364 == 1'd1) & (tmp_20_fu_286_p2 == 1'd0) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_18_fu_280_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_18_fu_280_p2 == 1'd1) & (tmp_15_reg_364 == 1'd1) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_15_reg_364 == 1'd0) & (exitcond8_fu_240_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((exitcond2_fu_321_p2 == 1'd0) & (tmp_s_reg_360 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_d0 = input_0_q0;
    end else if ((((tmp_15_reg_364 == 1'd1) & (tmp_20_fu_286_p2 == 1'd0) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_18_fu_280_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_18_fu_280_p2 == 1'd1) & (tmp_15_reg_364 == 1'd1) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_15_reg_364 == 1'd0) & (exitcond8_fu_240_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((exitcond2_fu_321_p2 == 1'd0) & (tmp_s_reg_360 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_15_reg_364 == 1'd1) & (tmp_20_fu_286_p2 == 1'd0) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_18_fu_280_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_18_fu_280_p2 == 1'd1) & (tmp_15_reg_364 == 1'd1) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_15_reg_364 == 1'd0) & (exitcond8_fu_240_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((exitcond2_fu_321_p2 == 1'd0) & (tmp_s_reg_360 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_20_reg_398 == 1'd1) & (tmp_18_reg_394 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((((exitcond9_fu_268_p2 == 1'd1) & (tmp_15_reg_364 == 1'd1) & (tmp_s_reg_360 == 1'd0)) | ((exitcond2_fu_321_p2 == 1'd1) & (tmp_s_reg_360 == 1'd1))) | ((exitcond8_fu_240_p2 == 1'd1) & (tmp_15_reg_364 == 1'd0) & (tmp_s_reg_360 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_15_reg_364 == 1'd1) & (exitcond9_fu_268_p2 == 1'd0) & (tmp_s_reg_360 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign exitcond1_fu_171_p2 = ((height_reg_101 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond2_fu_321_p2 = ((width_reg_146 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond8_fu_240_p2 = ((width2_reg_124 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond9_fu_268_p2 = ((width1_reg_135 == 5'd30) ? 1'b1 : 1'b0);

assign grp_fu_157_p2 = (phi_mul_reg_112 + tmp_32_cast6_fu_263_p1);

assign height_1_fu_177_p2 = (height_reg_101 + 5'd1);

assign input_0_address0 = tmp_22_fu_316_p1;

assign next_mul_fu_166_p2 = (phi_mul_reg_112 + tmp_15_cast1_reg_342);

assign p_shl3_cast_fu_214_p1 = p_shl3_fu_206_p3;

assign p_shl3_fu_206_p3 = {{tmp2_fu_200_p2}, {5'd0}};

assign p_shl4_cast_fu_226_p1 = p_shl4_fu_218_p3;

assign p_shl4_fu_218_p3 = {{tmp2_fu_200_p2}, {2'd0}};

assign tmp2_fu_200_p2 = ($signed(height_reg_101) + $signed(5'd31));

assign tmp3_cast_fu_303_p1 = tmp3_fu_297_p2;

assign tmp3_fu_297_p2 = ($signed(width1_reg_135) + $signed(5'd31));

assign tmp4_fu_252_p2 = (phi_mul_reg_112 + tmp_30_cast_fu_236_p1);

assign tmp7_fu_230_p2 = (p_shl3_cast_fu_214_p1 - p_shl4_cast_fu_226_p1);

assign tmp_15_cast1_fu_162_p1 = output_width;

assign tmp_15_fu_189_p2 = ((height_reg_101 < 5'd29) ? 1'b1 : 1'b0);

assign tmp_16_fu_195_p1 = phi_mul_reg_112;

assign tmp_17_fu_333_p1 = width_reg_146;

assign tmp_18_fu_280_p2 = ((width1_reg_135 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_19_fu_258_p1 = tmp4_fu_252_p2;

assign tmp_20_fu_286_p2 = ((width1_reg_135 < 5'd29) ? 1'b1 : 1'b0);

assign tmp_21_fu_307_p2 = (tmp3_cast_fu_303_p1 + tmp7_reg_373);

assign tmp_22_fu_316_p1 = $unsigned(tmp_38_cast_fu_312_p1);

assign tmp_24_fu_338_p1 = tmp_23_reg_407;

assign tmp_26_fu_292_p1 = grp_fu_157_p2;

assign tmp_30_cast_fu_236_p1 = width2_reg_124;

assign tmp_32_cast6_fu_263_p1 = width1_reg_135;

assign tmp_38_cast_fu_312_p1 = $signed(tmp_21_fu_307_p2);

assign tmp_s_fu_183_p2 = ((height_reg_101 == 5'd0) ? 1'b1 : 1'b0);

assign width_1_fu_327_p2 = (width_reg_146 + 5'd1);

assign width_2_fu_246_p2 = (width2_reg_124 + 5'd1);

assign width_3_fu_274_p2 = (width1_reg_135 + 5'd1);

always @ (posedge ap_clk) begin
    tmp_15_cast1_reg_342[20:16] <= 5'b00000;
    tmp7_reg_373[1:0] <= 2'b00;
end

endmodule //padding2d_fix16_4
