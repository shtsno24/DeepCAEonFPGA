-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_fix16_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Padding2D_2_array_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Padding2D_2_array_ce0 : OUT STD_LOGIC;
    Padding2D_2_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Padding2D_2_array_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    Padding2D_2_array_ce1 : OUT STD_LOGIC;
    Padding2D_2_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2d_fix16_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Conv2D_2_b_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Conv2D_2_b_ce0 : STD_LOGIC;
    signal Conv2D_2_b_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Conv2D_2_w_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Conv2D_2_w_ce0 : STD_LOGIC;
    signal Conv2D_2_w_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Conv2D_2_w_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Conv2D_2_w_ce1 : STD_LOGIC;
    signal Conv2D_2_w_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal Conv2D_2_w_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal Conv2D_2_w_ce2 : STD_LOGIC;
    signal Conv2D_2_w_q2 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_374 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_386 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1055 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_reg_1060 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_reg_1065 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_402_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_reg_1070 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul5_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul5_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul2_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_d_3_fu_425_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_3_reg_1095 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond5_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Conv2D_2_b_load_cast_fu_436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Conv2D_2_b_load_cast_reg_1105 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_fu_440_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_reg_1110 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_h_3_fu_449_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_reg_1118 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_108_fu_455_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_w_3_fu_474_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_3_reg_1141 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_109_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr11_reg_1153 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_127_0_1_cast_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_1_cast_reg_1158 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_2_cast_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_2_cast_reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_d_1_fu_523_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_1_reg_1175 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal next_mul_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_114_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp4_1_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_1_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_2_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_2_reg_1210 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp5_1_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_1_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_2_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_2_reg_1249 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_reg_1281 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_2_array_lo_3_reg_1286 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_2_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_reg_1311 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_1_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_1_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_2_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_2_reg_1321 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_137_0_1_reg_1326 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_0_2_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_reg_1336 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_807_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_1366 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_1_reg_1371 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_2_reg_1376 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_859_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_1386 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_reg_1391 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_1_reg_1396 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_fu_898_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_reg_1401 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_2_reg_1406 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_138_2_2_fu_933_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_138_2_2_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_tmp_s_fu_960_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_tmp_s_reg_1416 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal out_d_reg_291 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul4_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_h_reg_326 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_reg_337 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal in_d_reg_348 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal phi_mul_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_111_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_118_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_0_1_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_0_1_fu_609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_0_2_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_0_2_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_1_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_1_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_2_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_2_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_1_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_1_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_2_fu_802_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_2_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_tmp_cast_fu_968_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Conv2D_2_b_load_cast_fu_436_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_440_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_fu_465_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_cast_fu_484_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_127_0_1_fu_498_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_127_0_2_fu_508_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_113_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_549_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_563_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_116_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_0_1_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_1_fu_596_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_2_fu_600_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_132_0_1_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_0_2_fu_614_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_0_2_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_1_fu_633_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_fu_972_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_128_1_1_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_1_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_1_2_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_2_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_0_1_fu_979_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_135_0_2_fu_986_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_135_1_fu_993_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_132_2_fu_773_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_2_1_fu_787_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_2_2_fu_797_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_1_1_fu_1000_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_135_1_2_fu_1007_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp7_fu_850_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_854_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_135_2_fu_1014_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_135_2_1_fu_1021_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_135_2_2_fu_1028_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp11_fu_919_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_923_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_fu_928_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_938_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_112_fu_942_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_952_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_cast_fu_947_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component network_mul_mul_16s_14s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component conv2d_fix16_3_Conv2D_2_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component conv2d_fix16_3_Conv2D_2_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    Conv2D_2_b_U : component conv2d_fix16_3_Conv2D_2_b
    generic map (
        DataWidth => 11,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv2D_2_b_address0,
        ce0 => Conv2D_2_b_ce0,
        q0 => Conv2D_2_b_q0);

    Conv2D_2_w_U : component conv2d_fix16_3_Conv2D_2_w
    generic map (
        DataWidth => 14,
        AddressRange => 576,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv2D_2_w_address0,
        ce0 => Conv2D_2_w_ce0,
        q0 => Conv2D_2_w_q0,
        address1 => Conv2D_2_w_address1,
        ce1 => Conv2D_2_w_ce1,
        q1 => Conv2D_2_w_q1,
        address2 => Conv2D_2_w_address2,
        ce2 => Conv2D_2_w_ce2,
        q2 => Conv2D_2_w_q2);

    network_mul_mul_16s_14s_30_1_1_U78 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => reg_370,
        din1 => reg_374,
        dout => tmp_119_fu_972_p2);

    network_mul_mul_16s_14s_30_1_1_U79 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => reg_378,
        din1 => reg_374,
        dout => tmp_135_0_1_fu_979_p2);

    network_mul_mul_16s_14s_30_1_1_U80 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => reg_370,
        din1 => reg_382,
        dout => tmp_135_0_2_fu_986_p2);

    network_mul_mul_16s_14s_30_1_1_U81 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => Padding2D_2_array_lo_3_reg_1286,
        din1 => reg_386,
        dout => tmp_135_1_fu_993_p2);

    network_mul_mul_16s_14s_30_1_1_U82 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => reg_370,
        din1 => reg_374,
        dout => tmp_135_1_1_fu_1000_p2);

    network_mul_mul_16s_14s_30_1_1_U83 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => reg_378,
        din1 => reg_382,
        dout => tmp_135_1_2_fu_1007_p2);

    network_mul_mul_16s_14s_30_1_1_U84 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => reg_370,
        din1 => reg_374,
        dout => tmp_135_2_fu_1014_p2);

    network_mul_mul_16s_14s_30_1_1_U85 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => reg_378,
        din1 => reg_382,
        dout => tmp_135_2_1_fu_1021_p2);

    network_mul_mul_16s_14s_30_1_1_U86 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => reg_370,
        din1 => reg_386,
        dout => tmp_135_2_2_fu_1028_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_d_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                in_d_reg_348 <= in_d_1_reg_1175;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_469_p2 = ap_const_lv1_0))) then 
                in_d_reg_348 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_d_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_444_p2 = ap_const_lv1_1))) then 
                out_d_reg_291 <= out_d_3_reg_1095;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_291 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_h_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_469_p2 = ap_const_lv1_1))) then 
                out_h_reg_326 <= out_h_3_reg_1118;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_reg_326 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_w_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_w_reg_337 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                out_w_reg_337 <= out_w_3_reg_1141;
            end if; 
        end if;
    end process;

    phi_mul1_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_444_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_302 <= next_mul2_reg_1087;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul1_reg_302 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul4_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_444_p2 = ap_const_lv1_1))) then 
                phi_mul4_reg_314 <= next_mul5_reg_1082;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul4_reg_314 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                phi_mul_reg_359 <= next_mul_reg_1180;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_469_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_359 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Conv2D_2_b_load_cast_reg_1105 <= Conv2D_2_b_load_cast_fu_436_p1;
                tmp_5_reg_1110 <= tmp_5_fu_440_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Padding2D_2_array_lo_3_reg_1286 <= Padding2D_2_array_q1;
                tmp_120_reg_1281 <= tmp_119_fu_972_p2(29 downto 14);
                tmp_128_2_1_reg_1316 <= tmp_128_2_1_fu_711_p2;
                tmp_128_2_2_reg_1321 <= tmp_128_2_2_fu_715_p2;
                tmp_128_2_reg_1311 <= tmp_128_2_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                in_d_1_reg_1175 <= in_d_1_fu_523_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul2_reg_1087 <= next_mul2_fu_415_p2;
                next_mul5_reg_1082 <= next_mul5_fu_410_p2;
                out_d_3_reg_1095 <= out_d_3_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_518_p2 = ap_const_lv1_0))) then
                next_mul_reg_1180 <= next_mul_fu_533_p2;
                tmp4_reg_1191 <= tmp4_fu_544_p2;
                tmp_114_reg_1185 <= tmp_114_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_3_reg_1118 <= out_h_3_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_w_3_reg_1141 <= out_w_3_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_469_p2 = ap_const_lv1_0))) then
                output_addr11_reg_1153 <= tmp_111_fu_493_p1(9 - 1 downto 0);
                    tmp_109_reg_1146(15 downto 0) <= tmp_109_fu_480_p1(15 downto 0);
                    tmp_127_0_1_cast_reg_1158(16 downto 0) <= tmp_127_0_1_cast_fu_504_p1(16 downto 0);
                    tmp_127_0_2_cast_reg_1165(16 downto 0) <= tmp_127_0_2_cast_fu_514_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                p_tmp_s_reg_1416 <= p_tmp_s_fu_960_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_370 <= Padding2D_2_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_374 <= Conv2D_2_w_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_378 <= Padding2D_2_array_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_382 <= Conv2D_2_w_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_386 <= Conv2D_2_w_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp1_reg_1386 <= tmp1_fu_859_p2;
                tmp_137_1_1_reg_1371 <= tmp_135_1_1_fu_1000_p2(29 downto 14);
                tmp_137_1_2_reg_1376 <= tmp_135_1_2_fu_1007_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp2_reg_1366 <= tmp2_fu_807_p2;
                tmp_137_0_1_reg_1326 <= tmp_135_0_1_fu_979_p2(29 downto 14);
                tmp_137_0_2_reg_1331 <= tmp_135_0_2_fu_986_p2(29 downto 14);
                tmp_137_1_reg_1336 <= tmp_135_1_fu_993_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp3_reg_1133 <= tmp3_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp4_1_reg_1205 <= tmp4_1_fu_553_p2;
                tmp4_2_reg_1210 <= tmp4_2_fu_558_p2;
                tmp5_reg_1198 <= tmp5_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp5_1_reg_1242 <= tmp5_1_fu_596_p2;
                tmp5_2_reg_1249 <= tmp5_2_fu_600_p2;
                tmp_115_reg_1215 <= tmp_115_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp9_reg_1401 <= tmp9_fu_898_p2;
                tmp_137_2_1_reg_1396 <= tmp_135_2_1_fu_1021_p2(29 downto 14);
                tmp_137_2_reg_1391 <= tmp_135_2_fu_1014_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_103_reg_1060(15 downto 0) <= tmp_103_fu_394_p1(15 downto 0);
                    tmp_104_reg_1065(15 downto 0) <= tmp_104_fu_398_p1(15 downto 0);
                    tmp_105_reg_1070(15 downto 0) <= tmp_105_fu_402_p1(15 downto 0);
                    tmp_106_reg_1077(15 downto 0) <= tmp_106_fu_406_p1(15 downto 0);
                    tmp_s_reg_1055(15 downto 0) <= tmp_s_fu_390_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_444_p2 = ap_const_lv1_0))) then
                    tmp_108_reg_1123(15 downto 0) <= tmp_108_fu_455_p1(15 downto 0);
                tmp_reg_1128 <= tmp_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_137_2_2_reg_1406 <= tmp_135_2_2_fu_1028_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_138_2_2_reg_1411 <= tmp_138_2_2_fu_933_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_1055(31 downto 16) <= "0000000000000000";
    tmp_103_reg_1060(31 downto 16) <= "0000000000000000";
    tmp_104_reg_1065(31 downto 16) <= "0000000000000000";
    tmp_105_reg_1070(31 downto 16) <= "0000000000000000";
    tmp_106_reg_1077(31 downto 16) <= "0000000000000000";
    tmp_108_reg_1123(31 downto 16) <= "0000000000000000";
    tmp_109_reg_1146(31 downto 16) <= "0000000000000000";
    tmp_127_0_1_cast_reg_1158(31 downto 17) <= "000000000000000";
    tmp_127_0_2_cast_reg_1165(31 downto 17) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_420_p2, ap_CS_fsm_state4, exitcond4_fu_444_p2, ap_CS_fsm_state6, exitcond3_fu_469_p2, ap_CS_fsm_state7, exitcond2_fu_518_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_420_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_444_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_469_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond2_fu_518_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Conv2D_2_b_address0 <= tmp_107_fu_431_p1(3 - 1 downto 0);

    Conv2D_2_b_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Conv2D_2_b_ce0 <= ap_const_logic_1;
        else 
            Conv2D_2_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Conv2D_2_b_load_cast_fu_436_p0 <= Conv2D_2_b_q0;
        Conv2D_2_b_load_cast_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Conv2D_2_b_load_cast_fu_436_p0),16));


    Conv2D_2_w_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_118_fu_582_p1, tmp_133_0_1_fu_609_p1, tmp_133_1_1_fu_683_p1, tmp_133_2_fu_778_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Conv2D_2_w_address0 <= tmp_133_2_fu_778_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Conv2D_2_w_address0 <= tmp_133_1_1_fu_683_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Conv2D_2_w_address0 <= tmp_133_0_1_fu_609_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Conv2D_2_w_address0 <= tmp_118_fu_582_p1(10 - 1 downto 0);
        else 
            Conv2D_2_w_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Conv2D_2_w_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, tmp_133_0_2_fu_628_p1, tmp_133_1_2_fu_702_p1, tmp_133_2_1_fu_792_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Conv2D_2_w_address1 <= tmp_133_2_1_fu_792_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Conv2D_2_w_address1 <= tmp_133_1_2_fu_702_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Conv2D_2_w_address1 <= tmp_133_0_2_fu_628_p1(10 - 1 downto 0);
        else 
            Conv2D_2_w_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    Conv2D_2_w_address2_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12, tmp_133_1_fu_647_p1, tmp_133_2_2_fu_802_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Conv2D_2_w_address2 <= tmp_133_2_2_fu_802_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Conv2D_2_w_address2 <= tmp_133_1_fu_647_p1(10 - 1 downto 0);
        else 
            Conv2D_2_w_address2 <= "XXXXXXXXXX";
        end if; 
    end process;


    Conv2D_2_w_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Conv2D_2_w_ce0 <= ap_const_logic_1;
        else 
            Conv2D_2_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Conv2D_2_w_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            Conv2D_2_w_ce1 <= ap_const_logic_1;
        else 
            Conv2D_2_w_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Conv2D_2_w_ce2_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            Conv2D_2_w_ce2 <= ap_const_logic_1;
        else 
            Conv2D_2_w_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_2_array_address0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state9, tmp_117_fu_577_p1, tmp_129_0_2_fu_618_p1, tmp_129_1_1_fu_673_p1, tmp_129_2_fu_769_p1, tmp_129_2_2_fu_846_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Padding2D_2_array_address0 <= tmp_129_2_2_fu_846_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_2_array_address0 <= tmp_129_2_fu_769_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Padding2D_2_array_address0 <= tmp_129_1_1_fu_673_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Padding2D_2_array_address0 <= tmp_129_0_2_fu_618_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Padding2D_2_array_address0 <= tmp_117_fu_577_p1(10 - 1 downto 0);
        else 
            Padding2D_2_array_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Padding2D_2_array_address1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9, tmp_129_0_1_fu_591_p1, tmp_129_1_fu_637_p1, tmp_129_1_2_fu_692_p1, tmp_129_2_1_fu_783_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_2_array_address1 <= tmp_129_2_1_fu_783_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Padding2D_2_array_address1 <= tmp_129_1_2_fu_692_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Padding2D_2_array_address1 <= tmp_129_1_fu_637_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Padding2D_2_array_address1 <= tmp_129_0_1_fu_591_p1(10 - 1 downto 0);
        else 
            Padding2D_2_array_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    Padding2D_2_array_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            Padding2D_2_array_ce0 <= ap_const_logic_1;
        else 
            Padding2D_2_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_2_array_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Padding2D_2_array_ce1 <= ap_const_logic_1;
        else 
            Padding2D_2_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_420_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_420_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_420_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_420_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_518_p2 <= "1" when (in_d_reg_348 = input_depth) else "0";
    exitcond3_fu_469_p2 <= "1" when (out_w_reg_337 = output_width) else "0";
    exitcond4_fu_444_p2 <= "1" when (out_h_reg_326 = output_height) else "0";
    exitcond5_fu_420_p2 <= "1" when (out_d_reg_291 = output_depth) else "0";
    in_d_1_fu_523_p2 <= std_logic_vector(unsigned(in_d_reg_348) + unsigned(ap_const_lv16_1));
    next_mul2_fu_415_p2 <= std_logic_vector(unsigned(phi_mul1_reg_302) + unsigned(tmp_s_reg_1055));
    next_mul5_fu_410_p2 <= std_logic_vector(unsigned(phi_mul4_reg_314) + unsigned(tmp_106_reg_1077));
    next_mul_fu_533_p2 <= std_logic_vector(unsigned(tmp_104_reg_1065) + unsigned(phi_mul_reg_359));
    out_d_3_fu_425_p2 <= std_logic_vector(unsigned(out_d_reg_291) + unsigned(ap_const_lv16_1));
    out_h_3_fu_449_p2 <= std_logic_vector(unsigned(out_h_reg_326) + unsigned(ap_const_lv16_1));
    out_w_3_fu_474_p2 <= std_logic_vector(unsigned(out_w_reg_337) + unsigned(ap_const_lv16_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state6, output_addr11_reg_1153, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state17, tmp_111_fu_493_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_address0 <= output_addr11_reg_1153;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= tmp_111_fu_493_p1(9 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state6, tmp_138_2_2_reg_1411, ap_CS_fsm_state19, ap_CS_fsm_state17, p_tmp_cast_fu_968_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            output_r_d0 <= p_tmp_cast_fu_968_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            output_r_d0 <= tmp_138_2_2_reg_1411;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_469_p2, ap_CS_fsm_state19, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_469_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_tmp_cast_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_tmp_s_reg_1416),16));
    p_tmp_s_fu_960_p3 <= 
        ap_const_lv15_0 when (tmp_23_fu_952_p3(0) = '1') else 
        tmp_117_cast_fu_947_p2;
    tmp10_fu_923_p2 <= std_logic_vector(unsigned(tmp_137_2_reg_1391) + unsigned(tmp11_fu_919_p2));
    tmp11_fu_919_p2 <= std_logic_vector(unsigned(tmp_137_2_2_reg_1406) + unsigned(tmp_137_2_1_reg_1396));
    tmp1_fu_859_p2 <= std_logic_vector(unsigned(tmp2_reg_1366) + unsigned(tmp6_fu_854_p2));
    tmp2_fu_807_p2 <= std_logic_vector(unsigned(tmp_120_reg_1281) + unsigned(output_r_q0));
    tmp3_fu_465_p1 <= tmp_103_reg_1060(16 - 1 downto 0);
    tmp3_fu_465_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_1128) * signed('0' &tmp3_fu_465_p1))), 32));
    tmp4_1_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp4_reg_1191));
    tmp4_2_fu_558_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp4_reg_1191));
    tmp4_fu_544_p2 <= std_logic_vector(unsigned(tmp_108_reg_1123) + unsigned(phi_mul_reg_359));
    tmp5_1_fu_596_p0 <= tmp_105_reg_1070(16 - 1 downto 0);
    tmp5_1_fu_596_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp5_1_fu_596_p0) * signed(tmp4_1_reg_1205))), 32));
    tmp5_2_fu_600_p0 <= tmp_105_reg_1070(16 - 1 downto 0);
    tmp5_2_fu_600_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp5_2_fu_600_p0) * signed(tmp4_2_reg_1210))), 32));
    tmp5_fu_549_p0 <= tmp_105_reg_1070(16 - 1 downto 0);
    tmp5_fu_549_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp5_fu_549_p0) * signed(tmp4_reg_1191))), 32));
    tmp6_fu_854_p2 <= std_logic_vector(unsigned(tmp_137_0_1_reg_1326) + unsigned(tmp7_fu_850_p2));
    tmp7_fu_850_p2 <= std_logic_vector(unsigned(tmp_137_1_reg_1336) + unsigned(tmp_137_0_2_reg_1331));
    tmp8_fu_928_p2 <= std_logic_vector(unsigned(tmp9_reg_1401) + unsigned(tmp10_fu_923_p2));
    tmp9_fu_898_p2 <= std_logic_vector(unsigned(tmp_137_1_2_reg_1376) + unsigned(tmp_137_1_1_reg_1371));
    tmp_103_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),32));
    tmp_104_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
    tmp_105_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    tmp_106_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_depth),32));
    tmp_107_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_291),64));
    tmp_108_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_326),32));
    tmp_109_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_337),32));
    tmp_110_fu_488_p2 <= std_logic_vector(unsigned(tmp3_reg_1133) + unsigned(tmp_109_fu_480_p1));
        tmp_111_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_110_fu_488_p2),64));

    tmp_112_fu_942_p2 <= std_logic_vector(signed(Conv2D_2_b_load_cast_reg_1105) + signed(output_r_q0));
    tmp_113_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_reg_348),32));
    tmp_114_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_337),17));
    tmp_114_fu_538_p2 <= std_logic_vector(unsigned(tmp_113_fu_529_p1) + unsigned(phi_mul4_reg_314));
    tmp_115_fu_568_p2 <= std_logic_vector(unsigned(tmp_114_reg_1185) + unsigned(tmp_24_fu_563_p2));
    tmp_116_fu_573_p2 <= std_logic_vector(unsigned(tmp_109_reg_1146) + unsigned(tmp5_reg_1198));
    tmp_117_cast_fu_947_p2 <= std_logic_vector(unsigned(tmp_22_fu_938_p1) + unsigned(tmp_5_reg_1110));
        tmp_117_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_116_fu_573_p2),64));

        tmp_118_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_115_fu_568_p2),64));

    tmp_127_0_1_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_0_1_fu_498_p2),32));
    tmp_127_0_1_fu_498_p2 <= std_logic_vector(unsigned(tmp_114_cast_fu_484_p1) + unsigned(ap_const_lv17_1));
    tmp_127_0_2_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_0_2_fu_508_p2),32));
    tmp_127_0_2_fu_508_p2 <= std_logic_vector(unsigned(tmp_114_cast_fu_484_p1) + unsigned(ap_const_lv17_2));
    tmp_128_0_1_fu_587_p2 <= std_logic_vector(unsigned(tmp5_reg_1198) + unsigned(tmp_127_0_1_cast_reg_1158));
    tmp_128_0_2_fu_614_p2 <= std_logic_vector(unsigned(tmp5_reg_1198) + unsigned(tmp_127_0_2_cast_reg_1165));
    tmp_128_1_1_fu_669_p2 <= std_logic_vector(unsigned(tmp5_1_reg_1242) + unsigned(tmp_127_0_1_cast_reg_1158));
    tmp_128_1_2_fu_688_p2 <= std_logic_vector(unsigned(tmp5_1_reg_1242) + unsigned(tmp_127_0_2_cast_reg_1165));
    tmp_128_1_fu_633_p2 <= std_logic_vector(unsigned(tmp_109_reg_1146) + unsigned(tmp5_1_reg_1242));
    tmp_128_2_1_fu_711_p2 <= std_logic_vector(unsigned(tmp5_2_reg_1249) + unsigned(tmp_127_0_1_cast_reg_1158));
    tmp_128_2_2_fu_715_p2 <= std_logic_vector(unsigned(tmp5_2_reg_1249) + unsigned(tmp_127_0_2_cast_reg_1165));
    tmp_128_2_fu_707_p2 <= std_logic_vector(unsigned(tmp_109_reg_1146) + unsigned(tmp5_2_reg_1249));
        tmp_129_0_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_0_1_fu_587_p2),64));

        tmp_129_0_2_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_0_2_fu_614_p2),64));

        tmp_129_1_1_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_1_fu_669_p2),64));

        tmp_129_1_2_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_2_fu_688_p2),64));

        tmp_129_1_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_fu_633_p2),64));

        tmp_129_2_1_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_1_reg_1316),64));

        tmp_129_2_2_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_2_reg_1321),64));

        tmp_129_2_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_reg_1311),64));

    tmp_132_0_1_fu_604_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_115_reg_1215));
    tmp_132_0_2_fu_623_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp_115_reg_1215));
    tmp_132_1_1_fu_678_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(tmp_115_reg_1215));
    tmp_132_1_2_fu_697_p2 <= std_logic_vector(unsigned(ap_const_lv32_5) + unsigned(tmp_115_reg_1215));
    tmp_132_1_fu_642_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(tmp_115_reg_1215));
    tmp_132_2_1_fu_787_p2 <= std_logic_vector(unsigned(ap_const_lv32_7) + unsigned(tmp_115_reg_1215));
    tmp_132_2_2_fu_797_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) + unsigned(tmp_115_reg_1215));
    tmp_132_2_fu_773_p2 <= std_logic_vector(unsigned(ap_const_lv32_6) + unsigned(tmp_115_reg_1215));
        tmp_133_0_1_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_0_1_fu_604_p2),64));

        tmp_133_0_2_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_0_2_fu_623_p2),64));

        tmp_133_1_1_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_1_fu_678_p2),64));

        tmp_133_1_2_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_2_fu_697_p2),64));

        tmp_133_1_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_fu_642_p2),64));

        tmp_133_2_1_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_1_fu_787_p2),64));

        tmp_133_2_2_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_2_fu_797_p2),64));

        tmp_133_2_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_fu_773_p2),64));

    tmp_138_2_2_fu_933_p2 <= std_logic_vector(unsigned(tmp1_reg_1386) + unsigned(tmp8_fu_928_p2));
    tmp_22_fu_938_p1 <= output_r_q0(15 - 1 downto 0);
    tmp_23_fu_952_p3 <= tmp_112_fu_942_p2(15 downto 15);
    tmp_24_fu_563_p2 <= std_logic_vector(shift_left(unsigned(tmp_114_reg_1185),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_5_fu_440_p0 <= Conv2D_2_b_q0;
        tmp_5_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_440_p0),15));

    tmp_fu_459_p2 <= std_logic_vector(unsigned(phi_mul1_reg_302) + unsigned(tmp_108_fu_455_p1));
    tmp_s_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),32));
end behav;
