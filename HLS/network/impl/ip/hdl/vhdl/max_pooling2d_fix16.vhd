-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of max_pooling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_cast_fu_226_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_474 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_69_cast_fu_230_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_69_cast_reg_479 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_70_cast_fu_234_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_70_cast_reg_484 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_cast_fu_238_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_71_cast_reg_489 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul3_fu_242_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul3_reg_494 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_247_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_499 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_3_fu_261_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_3_reg_507 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_3_fu_276_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_3_reg_515 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp2_fu_286_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_reg_520 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond4_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_cast_fu_300_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_cast_reg_525 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp3_fu_307_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_reg_530 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_w_3_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_3_reg_538 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_78_cast1_fu_327_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_78_cast1_reg_543 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond3_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_cast_fu_339_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_79_cast_reg_548 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_52_fu_343_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_h_1_fu_353_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_h_1_reg_561 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp4_fu_363_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp4_reg_566 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_369_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_reg_571 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_373_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_reg_576 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp1_fu_380_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_reg_581 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_55_fu_385_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_586 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal in_w_1_fu_395_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_1_reg_594 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp5_fu_405_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp5_reg_599 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_410_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_56_reg_604 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_62_reg_614 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_60_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_reg_130 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_141 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_153 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_177 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal in_h_reg_188 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_reg_199 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_57_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buffer_fu_70 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_5_fu_438_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast3_fu_214_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_height_cast2_fu_218_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_width_cast_fu_222_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_height_cast2_fu_218_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_width_cast3_fu_214_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_d_cast_fu_252_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_h_cast_fu_267_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_271_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_75_cast1_fu_282_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_292_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_fu_307_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp3_fu_307_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_w_cast_fu_312_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_316_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_51_fu_331_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_82_cast_fu_359_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_380_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_380_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_83_cast_fu_401_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_58_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond6_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp1_fu_380_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_fu_307_p10 : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_h_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_389_p2 = ap_const_lv1_1))) then 
                in_h_reg_188 <= in_h_1_reg_561;
            elsif (((exitcond3_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_h_reg_188 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    in_w_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                in_w_reg_199 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                in_w_reg_199 <= in_w_1_reg_594;
            end if; 
        end if;
    end process;

    out_d_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_reg_130 <= out_d_3_reg_507;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_130 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_165 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_316_p2 = ap_const_lv1_1))) then 
                out_h_reg_165 <= out_h_3_reg_515;
            end if; 
        end if;
    end process;

    out_w_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_reg_177 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                out_w_reg_177 <= out_w_3_reg_538;
            end if; 
        end if;
    end process;

    phi_mul2_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul2_reg_153 <= next_mul3_reg_494;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_153 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_141 <= next_mul_reg_499;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_141 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                buffer_fu_70 <= buffer_5_fu_438_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_h_1_reg_561 <= in_h_1_fu_353_p2;
                tmp_52_reg_553 <= tmp_52_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                in_w_1_reg_594 <= in_w_1_fu_395_p2;
                tmp_55_reg_586 <= tmp_55_fu_385_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_494 <= next_mul3_fu_242_p2;
                next_mul_reg_499 <= next_mul_fu_247_p2;
                out_d_3_reg_507 <= out_d_3_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_3_reg_515 <= out_h_3_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_3_reg_538 <= out_w_3_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp1_reg_581 <= tmp1_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp2_reg_520 <= tmp2_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp3_reg_530 <= tmp3_fu_307_p2;
                    tmp_76_cast_reg_525(4 downto 1) <= tmp_76_cast_fu_300_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp4_reg_566 <= tmp4_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_389_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp5_reg_599 <= tmp5_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_347_p2 = ap_const_lv1_1))) then
                tmp_53_reg_571 <= tmp_53_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_56_reg_604 <= tmp_56_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_60_reg_625 <= tmp_60_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_62_reg_614 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_69_cast_reg_479(6 downto 0) <= tmp_69_cast_fu_230_p1(6 downto 0);
                    tmp_70_cast_reg_484(5 downto 0) <= tmp_70_cast_fu_234_p1(5 downto 0);
                    tmp_71_cast_reg_489(5 downto 0) <= tmp_71_cast_fu_238_p1(5 downto 0);
                    tmp_cast_reg_474(6 downto 0) <= tmp_cast_fu_226_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_316_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_78_cast1_reg_543(3 downto 0) <= tmp_78_cast1_fu_327_p1(3 downto 0);
                    tmp_79_cast_reg_548(4 downto 1) <= tmp_79_cast_fu_339_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_reg_576 <= tmp_fu_373_p2;
            end if;
        end if;
    end process;
    tmp_cast_reg_474(8 downto 7) <= "00";
    tmp_69_cast_reg_479(13 downto 7) <= "0000000";
    tmp_70_cast_reg_484(7 downto 6) <= "00";
    tmp_71_cast_reg_489(11 downto 6) <= "000000";
    tmp_76_cast_reg_525(0) <= '0';
    tmp_76_cast_reg_525(8 downto 5) <= "0000";
    tmp_78_cast1_reg_543(11 downto 4) <= "00000000";
    tmp_79_cast_reg_548(0) <= '0';
    tmp_79_cast_reg_548(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond4_fu_271_p2, ap_CS_fsm_state5, exitcond3_fu_316_p2, ap_CS_fsm_state6, exitcond2_fu_347_p2, ap_CS_fsm_state9, exitcond_fu_389_p2, exitcond5_fu_256_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_256_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond4_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_316_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_347_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_389_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_256_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_256_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_256_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_256_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_5_fu_438_p3 <= 
        tmp_62_reg_614 when (or_cond6_fu_433_p2(0) = '1') else 
        buffer_fu_70;
    exitcond2_fu_347_p2 <= "1" when (in_h_reg_188 = ap_const_lv2_2) else "0";
    exitcond3_fu_316_p1 <= output_width;
    exitcond3_fu_316_p2 <= "1" when (out_w_cast_fu_312_p1 = exitcond3_fu_316_p1) else "0";
    exitcond4_fu_271_p1 <= output_height;
    exitcond4_fu_271_p2 <= "1" when (out_h_cast_fu_267_p1 = exitcond4_fu_271_p1) else "0";
    exitcond5_fu_256_p2 <= "1" when (out_d_cast_fu_252_p1 = output_depth) else "0";
    exitcond_fu_389_p2 <= "1" when (in_w_reg_199 = ap_const_lv2_2) else "0";
    in_h_1_fu_353_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_h_reg_188));
    in_w_1_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_w_reg_199));
    input_r_address0 <= tmp_57_fu_414_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        input_width_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    next_mul3_fu_242_p2 <= std_logic_vector(unsigned(phi_mul2_reg_153) + unsigned(tmp_70_cast_reg_484));
    next_mul_fu_247_p2 <= std_logic_vector(unsigned(phi_mul_reg_141) + unsigned(tmp_cast_reg_474));
    or_cond6_fu_433_p2 <= (tmp_60_reg_625 or tmp_59_fu_427_p2);
    out_d_3_fu_261_p2 <= std_logic_vector(unsigned(out_d_reg_130) + unsigned(ap_const_lv5_1));
    out_d_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_130),6));
    out_h_3_fu_276_p2 <= std_logic_vector(unsigned(out_h_reg_165) + unsigned(ap_const_lv4_1));
    out_h_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_165),5));
    out_w_3_fu_321_p2 <= std_logic_vector(unsigned(out_w_reg_177) + unsigned(ap_const_lv4_1));
    out_w_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_177),5));
    output_height_cast2_fu_218_p0 <= output_height;
        output_height_cast2_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_height_cast2_fu_218_p0),6));

    output_r_address0 <= tmp_54_fu_449_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= buffer_fu_70;

    output_r_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast3_fu_214_p0 <= output_width;
        output_width_cast3_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_width_cast3_fu_214_p0),6));

    tmp1_fu_380_p0 <= tmp1_fu_380_p00(9 - 1 downto 0);
    tmp1_fu_380_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_576),14));
    tmp1_fu_380_p1 <= tmp_69_cast_reg_479(7 - 1 downto 0);
    tmp1_fu_380_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_380_p0) * unsigned(tmp1_fu_380_p1), 14));
    tmp2_fu_286_p2 <= std_logic_vector(unsigned(tmp_75_cast1_fu_282_p1) + unsigned(phi_mul2_reg_153));
    tmp3_fu_307_p0 <= tmp_71_cast_reg_489(6 - 1 downto 0);
    tmp3_fu_307_p1 <= tmp3_fu_307_p10(8 - 1 downto 0);
    tmp3_fu_307_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_520),12));
    tmp3_fu_307_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_307_p0) * unsigned(tmp3_fu_307_p1), 12));
    tmp4_fu_363_p2 <= std_logic_vector(unsigned(phi_mul_reg_141) + unsigned(tmp_82_cast_fu_359_p1));
    tmp5_fu_405_p2 <= std_logic_vector(unsigned(tmp1_reg_581) + unsigned(tmp_83_cast_fu_401_p1));
    tmp_51_fu_331_p3 <= (out_w_reg_177 & ap_const_lv1_0);
    tmp_52_fu_343_p1 <= in_h_reg_188(1 - 1 downto 0);
    tmp_53_fu_369_p2 <= std_logic_vector(unsigned(tmp3_reg_530) + unsigned(tmp_78_cast1_reg_543));
    tmp_54_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_reg_571),64));
    tmp_55_fu_385_p1 <= in_w_reg_199(1 - 1 downto 0);
    tmp_56_fu_410_p2 <= std_logic_vector(unsigned(tmp5_reg_599) + unsigned(tmp_79_cast_reg_548));
    tmp_57_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_reg_604),64));
    tmp_58_fu_423_p2 <= (tmp_55_reg_586 or tmp_52_reg_553);
    tmp_59_fu_427_p2 <= (tmp_58_fu_423_p2 xor ap_const_lv1_1);
    tmp_60_fu_418_p2 <= "1" when (signed(buffer_fu_70) < signed(tmp_62_reg_614)) else "0";
    tmp_69_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_222_p1),14));
    tmp_70_cast_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height_cast2_fu_218_p1),8));
    tmp_71_cast_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width_cast3_fu_214_p1),12));
    tmp_75_cast1_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_165),8));
    tmp_76_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_292_p3),9));
    tmp_78_cast1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_177),12));
    tmp_79_cast_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_331_p3),14));
    tmp_82_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_h_reg_188),9));
    tmp_83_cast_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_reg_199),14));
    tmp_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    tmp_fu_373_p2 <= std_logic_vector(unsigned(tmp4_reg_566) + unsigned(tmp_76_cast_reg_525));
    tmp_s_fu_292_p3 <= (out_h_reg_165 & ap_const_lv1_0);
end behav;
