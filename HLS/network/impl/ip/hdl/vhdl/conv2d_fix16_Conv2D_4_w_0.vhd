-- ==============================================================
-- File generated on Mon Oct 28 11:35:02 JST 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv2d_fix16_Conv2D_4_w_0_rom is 
    generic(
             DWIDTH     : integer := 13; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          addr1      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(DWIDTH-1 downto 0);
          addr2      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv2d_fix16_Conv2D_4_w_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr1_tmp : std_logic_vector(AWIDTH-1 downto 0); 
signal addr2_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem0 : mem_array := (
    0 => "0101000000000", 1 => "1111110110010", 2 => "1100101111000", 
    3 => "0010010111100", 4 => "0101101100100", 5 => "0001111110011", 
    6 => "1101110011000", 7 => "0010110011011", 8 => "0110001111100", 
    9 => "1001011111001", 10 => "1101010011101", 11 => "0101101101111", 
    12 => "1110111101111", 13 => "1111010100100", 14 => "1001001100001", 
    15 => "0001001011110", 16 => "1011101010000", 17 => "0010010100010", 
    18 => "1111010100011", 19 => "1001101111100", 20 => "1011010010111", 
    21 => "0011000011101", 22 => "1110000111001", 23 => "1011100111110", 
    24 => "1100111011110", 25 => "0100011110000", 26 => "0101100011001", 
    27 => "1100011000011", 28 => "1110000111111", 29 => "1010100101110", 
    30 => "0010111011100", 31 => "1110111110110", 32 => "0010000001110", 
    33 => "1010100011000", 34 => "1001111000110", 35 => "0100100000100", 
    36 => "0100110011000", 37 => "0000100100101", 38 => "0100100000010", 
    39 => "1011010101011", 40 => "0010101000011", 41 => "0100010011110", 
    42 => "0000011001101", 43 => "1110011111111", 44 => "1101100000101", 
    45 => "0101000000110", 46 => "1111100101011", 47 => "1111100100010", 
    48 => "1101100011001", 49 => "0101010111011", 50 => "0110010010001", 
    51 => "1100110100111", 52 => "1010101111101", 53 => "1011101000001", 
    54 => "0100111001101", 55 => "0101001001111", 56 => "1100000000110", 
    57 => "0001011111010", 58 => "0001001100100", 59 => "0001011010010", 
    60 => "0001110000001", 61 => "0110000010001", 62 => "1101000001101", 
    63 => "0010111010111", 64 => "0011111000100", 65 => "1100011100010", 
    66 => "1110011110011", 67 => "1011111011011", 68 => "1101010010100", 
    69 => "0010110111001", 70 => "1001110110110", 71 => "1001000110010", 
    72 => "0101110010000", 73 => "0011111111111", 74 => "0010010011001", 
    75 => "0100101100111", 76 => "1111011010011", 77 => "1011010111001", 
    78 => "0001011011101", 79 => "1101100010110", 80 => "0101101111111", 
    81 => "0001110110001", 82 => "0100100000110", 83 => "0100001000011", 
    84 => "0100000101101", 85 => "0100101111101", 86 => "0110001010001", 
    87 => "1111100111111", 88 => "0010000111101", 89 => "0000010111111", 
    90 => "1011110010011", 91 => "0011000101010", 92 => "1111111011000", 
    93 => "1100101000001", 94 => "1110000010101", 95 => "1011111100001", 
    96 => "0001110100110", 97 => "0010111111110", 98 => "1001100111000", 
    99 => "0010111101000", 100 => "1110101110000", 101 => "1001101100011", 
    102 => "0000100110000", 103 => "0100110010010", 104 => "1010011001011", 
    105 => "0101010101110", 106 => "1110000110000", 107 => "1010101010110", 
    108 => "1111000001010", 109 => "1101010100000", 110 => "1001010010010", 
    111 => "0000001000010", 112 => "0000011000100", 113 => "0011010011111", 
    114 => "1100111000010", 115 => "1011100011100", 116 => "1001110000111", 
    117 => "0000111110010", 118 => "1001110110100", 119 => "0000100010000", 
    120 => "1010011110101", 121 => "1001101010101", 122 => "0011000000000", 
    123 => "1010111011101", 124 => "0010101111011", 125 => "0011000010000", 
    126 => "1101001001000", 127 => "1011101000000", 128 => "1000110000101", 
    129 => "1011010111001", 130 => "1010101011010", 131 => "1111000000100", 
    132 => "0010111110010", 133 => "1011100101001", 134 => "1101111001001", 
    135 => "1010101001010", 136 => "1111001111110", 137 => "0001010000100", 
    138 => "0000001100101", 139 => "1010010001110", 140 => "1000110010001", 
    141 => "0001111000011", 142 => "1001010000101", 143 => "1100010010100" );
signal mem1 : mem_array := (
    0 => "0101000000000", 1 => "1111110110010", 2 => "1100101111000", 
    3 => "0010010111100", 4 => "0101101100100", 5 => "0001111110011", 
    6 => "1101110011000", 7 => "0010110011011", 8 => "0110001111100", 
    9 => "1001011111001", 10 => "1101010011101", 11 => "0101101101111", 
    12 => "1110111101111", 13 => "1111010100100", 14 => "1001001100001", 
    15 => "0001001011110", 16 => "1011101010000", 17 => "0010010100010", 
    18 => "1111010100011", 19 => "1001101111100", 20 => "1011010010111", 
    21 => "0011000011101", 22 => "1110000111001", 23 => "1011100111110", 
    24 => "1100111011110", 25 => "0100011110000", 26 => "0101100011001", 
    27 => "1100011000011", 28 => "1110000111111", 29 => "1010100101110", 
    30 => "0010111011100", 31 => "1110111110110", 32 => "0010000001110", 
    33 => "1010100011000", 34 => "1001111000110", 35 => "0100100000100", 
    36 => "0100110011000", 37 => "0000100100101", 38 => "0100100000010", 
    39 => "1011010101011", 40 => "0010101000011", 41 => "0100010011110", 
    42 => "0000011001101", 43 => "1110011111111", 44 => "1101100000101", 
    45 => "0101000000110", 46 => "1111100101011", 47 => "1111100100010", 
    48 => "1101100011001", 49 => "0101010111011", 50 => "0110010010001", 
    51 => "1100110100111", 52 => "1010101111101", 53 => "1011101000001", 
    54 => "0100111001101", 55 => "0101001001111", 56 => "1100000000110", 
    57 => "0001011111010", 58 => "0001001100100", 59 => "0001011010010", 
    60 => "0001110000001", 61 => "0110000010001", 62 => "1101000001101", 
    63 => "0010111010111", 64 => "0011111000100", 65 => "1100011100010", 
    66 => "1110011110011", 67 => "1011111011011", 68 => "1101010010100", 
    69 => "0010110111001", 70 => "1001110110110", 71 => "1001000110010", 
    72 => "0101110010000", 73 => "0011111111111", 74 => "0010010011001", 
    75 => "0100101100111", 76 => "1111011010011", 77 => "1011010111001", 
    78 => "0001011011101", 79 => "1101100010110", 80 => "0101101111111", 
    81 => "0001110110001", 82 => "0100100000110", 83 => "0100001000011", 
    84 => "0100000101101", 85 => "0100101111101", 86 => "0110001010001", 
    87 => "1111100111111", 88 => "0010000111101", 89 => "0000010111111", 
    90 => "1011110010011", 91 => "0011000101010", 92 => "1111111011000", 
    93 => "1100101000001", 94 => "1110000010101", 95 => "1011111100001", 
    96 => "0001110100110", 97 => "0010111111110", 98 => "1001100111000", 
    99 => "0010111101000", 100 => "1110101110000", 101 => "1001101100011", 
    102 => "0000100110000", 103 => "0100110010010", 104 => "1010011001011", 
    105 => "0101010101110", 106 => "1110000110000", 107 => "1010101010110", 
    108 => "1111000001010", 109 => "1101010100000", 110 => "1001010010010", 
    111 => "0000001000010", 112 => "0000011000100", 113 => "0011010011111", 
    114 => "1100111000010", 115 => "1011100011100", 116 => "1001110000111", 
    117 => "0000111110010", 118 => "1001110110100", 119 => "0000100010000", 
    120 => "1010011110101", 121 => "1001101010101", 122 => "0011000000000", 
    123 => "1010111011101", 124 => "0010101111011", 125 => "0011000010000", 
    126 => "1101001001000", 127 => "1011101000000", 128 => "1000110000101", 
    129 => "1011010111001", 130 => "1010101011010", 131 => "1111000000100", 
    132 => "0010111110010", 133 => "1011100101001", 134 => "1101111001001", 
    135 => "1010101001010", 136 => "1111001111110", 137 => "0001010000100", 
    138 => "0000001100101", 139 => "1010010001110", 140 => "1000110010001", 
    141 => "0001111000011", 142 => "1001010000101", 143 => "1100010010100" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem0 : signal is "block_rom";
attribute syn_rom_style of mem1 : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem0 : signal is "block";
attribute ROM_STYLE of mem1 : signal is "block";

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (addr2) 
begin
      addr2_tmp <= addr2;
--synthesis translate_off
      if (CONV_INTEGER(addr2) > mem_size-1) then
           addr2_tmp <= (others => '0');
      else 
           addr2_tmp <= addr2;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem0(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1 <= mem0(CONV_INTEGER(addr1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2 <= mem1(CONV_INTEGER(addr2_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv2d_fix16_Conv2D_4_w_0 is
    generic (
        DataWidth : INTEGER := 13;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address2 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv2d_fix16_Conv2D_4_w_0 is
    component conv2d_fix16_Conv2D_4_w_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR;
            addr2 : IN STD_LOGIC_VECTOR;
            ce2 : IN STD_LOGIC;
            q2 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv2d_fix16_Conv2D_4_w_0_rom_U :  component conv2d_fix16_Conv2D_4_w_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1,
        addr2 => address2,
        ce2 => ce2,
        q2 => q2);

end architecture;


