-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity up_sampling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (4 downto 0);
    input_width : IN STD_LOGIC_VECTOR (4 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of up_sampling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_cast_fu_157_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_reg_325 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_fu_161_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_cast_reg_330 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_cast_fu_165_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_cast_reg_335 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_fu_169_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_reg_340 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul3_fu_173_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul3_reg_345 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_350 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_d_1_fu_192_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_1_reg_358 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_1_fu_207_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_1_reg_366 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_237_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_reg_376 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_246_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_cast_reg_381 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp3_fu_254_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp3_reg_386 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_w_1_fu_268_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_1_reg_394 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_s_fu_288_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_reg_399 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_297_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_4_reg_404 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_load_reg_414 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal out_d_reg_100 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_111 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul2_reg_123 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_reg_135 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_146 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_3_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_d_cast_fu_183_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_h_cast_fu_198_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal div_fu_213_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_cast_fu_223_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_227_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_246_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_246_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_fu_254_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_254_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_w_cast_fu_259_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal div1_fu_274_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_cast_fu_284_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_cast_fu_293_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_246_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp3_fu_254_p00 : STD_LOGIC_VECTOR (13 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_reg_100 <= out_d_1_reg_358;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_100 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_187_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_135 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_263_p2 = ap_const_lv1_1))) then 
                out_h_reg_135 <= out_h_1_reg_366;
            end if; 
        end if;
    end process;

    out_w_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_reg_146 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                out_w_reg_146 <= out_w_1_reg_394;
            end if; 
        end if;
    end process;

    phi_mul2_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul2_reg_123 <= next_mul3_reg_345;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_123 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_111 <= next_mul_reg_350;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_111 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_414 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_345 <= next_mul3_fu_173_p2;
                next_mul_reg_350 <= next_mul_fu_178_p2;
                out_d_1_reg_358 <= out_d_1_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_1_reg_366 <= out_h_1_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_1_reg_394 <= out_w_1_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp1_cast_reg_381 <= tmp1_cast_fu_246_p2;
                tmp3_reg_386 <= tmp3_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_202_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp2_reg_376 <= tmp2_fu_237_p2;
                tmp_reg_371 <= tmp_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_1_cast_reg_325(4 downto 0) <= tmp_1_cast_fu_157_p1(4 downto 0);
                    tmp_2_reg_340(4 downto 0) <= tmp_2_fu_169_p1(4 downto 0);
                    tmp_3_cast_reg_330(5 downto 0) <= tmp_3_cast_fu_161_p1(5 downto 0);
                    tmp_4_cast_reg_335(5 downto 0) <= tmp_4_cast_fu_165_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_4_reg_404 <= tmp_4_fu_297_p2;
                tmp_s_reg_399 <= tmp_s_fu_288_p2;
            end if;
        end if;
    end process;
    tmp_1_cast_reg_325(7 downto 5) <= "000";
    tmp_3_cast_reg_330(8 downto 6) <= "000";
    tmp_4_cast_reg_335(13 downto 6) <= "00000000";
    tmp_2_reg_340(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_202_p2, ap_CS_fsm_state5, exitcond_fu_263_p2, exitcond3_fu_187_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_187_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_202_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_187_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_187_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_187_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_187_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    div1_fu_274_p4 <= out_w_reg_146(4 downto 1);
    div_fu_213_p4 <= out_h_reg_135(4 downto 1);
    exitcond2_fu_202_p2 <= "1" when (out_h_cast_fu_198_p1 = output_height) else "0";
    exitcond3_fu_187_p2 <= "1" when (out_d_cast_fu_183_p1 = output_depth) else "0";
    exitcond_fu_263_p2 <= "1" when (out_w_cast_fu_259_p1 = output_width) else "0";
    input_r_address0 <= tmp_3_fu_302_p1(14 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_173_p2 <= std_logic_vector(unsigned(phi_mul2_reg_123) + unsigned(tmp_3_cast_reg_330));
    next_mul_fu_178_p2 <= std_logic_vector(unsigned(phi_mul_reg_111) + unsigned(tmp_1_cast_reg_325));
    out_d_1_fu_192_p2 <= std_logic_vector(unsigned(out_d_reg_100) + unsigned(ap_const_lv5_1));
    out_d_cast_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_100),6));
    out_h_1_fu_207_p2 <= std_logic_vector(unsigned(out_h_reg_135) + unsigned(ap_const_lv5_1));
    out_h_cast_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_135),6));
    out_w_1_fu_268_p2 <= std_logic_vector(unsigned(out_w_reg_146) + unsigned(ap_const_lv5_1));
    out_w_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_146),6));
    output_r_address0 <= tmp_5_fu_306_p1(14 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= input_load_reg_414;

    output_r_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_246_p0 <= tmp1_cast_fu_246_p00(8 - 1 downto 0);
    tmp1_cast_fu_246_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_371),12));
    tmp1_cast_fu_246_p1 <= tmp_2_reg_340(5 - 1 downto 0);
    tmp1_cast_fu_246_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_cast_fu_246_p0) * unsigned(tmp1_cast_fu_246_p1), 12));
    tmp2_fu_237_p2 <= std_logic_vector(unsigned(phi_mul2_reg_123) + unsigned(tmp_cast_fu_227_p1));
    tmp3_fu_254_p0 <= tmp3_fu_254_p00(9 - 1 downto 0);
    tmp3_fu_254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_376),14));
    tmp3_fu_254_p1 <= tmp_4_cast_reg_335(6 - 1 downto 0);
    tmp3_fu_254_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_254_p0) * unsigned(tmp3_fu_254_p1), 14));
    tmp_12_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_146),14));
    tmp_1_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),8));
    tmp_2_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),12));
    tmp_3_cast_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
    tmp_3_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_399),64));
    tmp_4_cast_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),14));
    tmp_4_fu_297_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_293_p1) + unsigned(tmp3_reg_386));
    tmp_5_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_404),64));
    tmp_8_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div1_fu_274_p4),12));
    tmp_9_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_fu_213_p4),8));
    tmp_cast_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_135),9));
    tmp_fu_231_p2 <= std_logic_vector(unsigned(phi_mul_reg_111) + unsigned(tmp_9_cast_fu_223_p1));
    tmp_s_fu_288_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_284_p1) + unsigned(tmp1_cast_reg_381));
end behav;
