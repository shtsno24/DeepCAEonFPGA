-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_234_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_15_reg_537 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_556 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_256_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_19_reg_561 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_fu_262_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_20_reg_566 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_fu_268_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_21_reg_571 : STD_LOGIC_VECTOR (16 downto 0);
    signal next_mul3_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal depth_1_fu_289_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal depth_1_reg_589 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal width_1_fu_313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_53_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_611 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_29_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_616 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp3_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_44_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal width_3_fu_409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_3_reg_646 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_5_fu_424_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal height_fu_453_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal height_2_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_2_reg_664 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_42_fu_512_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal width_4_fu_491_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal depth_reg_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul2_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_reg_163 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal height1_reg_174 : STD_LOGIC_VECTOR (15 downto 0);
    signal width3_reg_186 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal width4_0_in_reg_197 : STD_LOGIC_VECTOR (15 downto 0);
    signal height5_0_in_reg_206 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal width6_reg_215 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_372_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_230_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_cast_fu_252_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_24_fu_295_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_cast_fu_304_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_333_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_348_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp2_cast_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_364_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_43_cast_fu_380_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_fu_389_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_cast_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_cast_fu_434_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_56_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_cast_fu_469_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_45_cast_fu_482_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_45_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_54_fu_502_p2 : signal is "no";
    signal tmp_42_fu_512_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_512_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_42_fu_512_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component network_mul_mul_16ns_16ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    network_mul_mul_16ns_16ns_32_1_1_U70 : component network_mul_mul_16ns_16ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_42_fu_512_p0,
        din1 => tmp_42_fu_512_p1,
        dout => tmp_42_fu_512_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    depth_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_38_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                depth_reg_128 <= depth_1_reg_589;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                depth_reg_128 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    height1_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_31_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                height1_reg_174 <= ap_const_lv16_1;
            elsif (((tmp_57_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                height1_reg_174 <= height_fu_453_p2;
            end if; 
        end if;
    end process;

    height5_0_in_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                height5_0_in_reg_206 <= input_height;
            elsif (((tmp_46_fu_486_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                height5_0_in_reg_206 <= height_2_reg_664;
            end if; 
        end if;
    end process;

    phi_mul2_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_38_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_mul2_reg_151 <= next_mul3_reg_576;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_151 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_38_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                phi_mul_reg_139 <= next_mul_reg_581;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_139 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    width3_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                width3_reg_186 <= ap_const_lv16_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                width3_reg_186 <= width_3_reg_646;
            end if; 
        end if;
    end process;

    width4_0_in_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_44_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                width4_0_in_reg_197 <= input_width;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_57_fu_438_p2 = ap_const_lv1_1))) then 
                width4_0_in_reg_197 <= width_5_fu_424_p2;
            end if; 
        end if;
    end process;

    width6_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_38_fu_473_p2 = ap_const_lv1_1))) then 
                width6_reg_215 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_46_fu_486_p2 = ap_const_lv1_1))) then 
                width6_reg_215 <= width_4_fu_491_p2;
            end if; 
        end if;
    end process;

    width_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                width_reg_163 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_31_fu_308_p2 = ap_const_lv1_1))) then 
                width_reg_163 <= width_1_fu_313_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                depth_1_reg_589 <= depth_1_fu_289_p2;
                next_mul3_reg_576 <= next_mul3_fu_274_p2;
                next_mul_reg_581 <= next_mul_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                height_2_reg_664 <= height_2_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp3_reg_628 <= tmp3_fu_368_p2;
                tmp_33_reg_621 <= tmp_33_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_15_reg_537 <= tmp_15_fu_234_p2;
                    tmp_16_reg_544(15 downto 0) <= tmp_16_fu_240_p1(15 downto 0);
                    tmp_17_reg_549(15 downto 0) <= tmp_17_fu_244_p1(15 downto 0);
                    tmp_18_reg_556(15 downto 0) <= tmp_18_fu_248_p1(15 downto 0);
                tmp_19_reg_561 <= tmp_19_fu_256_p2;
                tmp_20_reg_566 <= tmp_20_fu_262_p2;
                tmp_21_reg_571 <= tmp_21_fu_268_p2;
                    tmp_s_reg_532(15 downto 0) <= tmp_s_fu_226_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_284_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_24_reg_594 <= tmp_24_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_38_fu_473_p2 = ap_const_lv1_1))) then
                tmp_42_reg_672 <= tmp_42_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    tmp_43_reg_633(15 downto 0) <= tmp_43_fu_376_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_29_fu_337_p2 = ap_const_lv1_1))) then
                tmp_53_reg_611 <= tmp_53_fu_342_p2;
                tmp_reg_616 <= tmp_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_44_fu_384_p2 = ap_const_lv1_1))) then
                width_3_reg_646 <= width_3_fu_409_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_532(31 downto 16) <= "0000000000000000";
    tmp_16_reg_544(31 downto 16) <= "0000000000000000";
    tmp_17_reg_549(31 downto 16) <= "0000000000000000";
    tmp_18_reg_556(31 downto 16) <= "0000000000000000";
    tmp_43_reg_633(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_284_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_29_fu_337_p2, ap_CS_fsm_state7, tmp_44_fu_384_p2, ap_CS_fsm_state9, tmp_57_fu_438_p2, ap_CS_fsm_state10, tmp_38_fu_473_p2, ap_CS_fsm_state11, tmp_31_fu_308_p2, tmp_46_fu_486_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_31_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_29_fu_337_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((tmp_44_fu_384_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((tmp_57_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((tmp_38_fu_473_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((tmp_46_fu_486_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_284_p2)
    begin
        if ((((exitcond2_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond2_fu_284_p2)
    begin
        if (((exitcond2_fu_284_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    depth_1_fu_289_p2 <= std_logic_vector(unsigned(depth_reg_128) + unsigned(ap_const_lv16_1));
    exitcond2_fu_284_p2 <= "1" when (depth_reg_128 = input_depth) else "0";
    height_2_fu_459_p2 <= std_logic_vector(unsigned(height5_0_in_reg_206) + unsigned(ap_const_lv16_1));
    height_fu_453_p2 <= std_logic_vector(unsigned(height1_reg_174) + unsigned(ap_const_lv16_1));
    input_r_address0 <= tmp_50_fu_404_p1(9 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_274_p2 <= std_logic_vector(signed(phi_mul2_reg_151) + signed(tmp_16_reg_544));
    next_mul_fu_279_p2 <= std_logic_vector(unsigned(phi_mul_reg_139) + unsigned(tmp_18_reg_556));

    output_r_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state8, ap_CS_fsm_state6, tmp_36_fu_324_p1, tmp_41_fu_372_p1, tmp_52_fu_419_p1, tmp_59_fu_448_p1, tmp_55_fu_507_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            output_r_address0 <= tmp_55_fu_507_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_59_fu_448_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_address0 <= tmp_52_fu_419_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= tmp_41_fu_372_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_address0 <= tmp_36_fu_324_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_r_q0, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_d0 <= input_r_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, tmp_57_fu_438_p2, ap_CS_fsm_state11, tmp_31_fu_308_p2, ap_CS_fsm_state8, ap_CS_fsm_state6, tmp_46_fu_486_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_31_fu_308_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_46_fu_486_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_57_fu_438_p2 = ap_const_lv1_1)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp2_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_348_p2),32));

    tmp2_fu_348_p2 <= std_logic_vector(unsigned(tmp_28_cast_fu_333_p1) + unsigned(ap_const_lv17_1FFFF));
    tmp3_fu_368_p1 <= tmp_s_reg_532(16 - 1 downto 0);
    tmp3_fu_368_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_616) * signed('0' &tmp3_fu_368_p1))), 32));
        tmp4_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_389_p2),32));

    tmp4_fu_389_p2 <= std_logic_vector(unsigned(tmp_43_cast_fu_380_p1) + unsigned(ap_const_lv17_1FFFF));
    tmp5_fu_497_p2 <= std_logic_vector(unsigned(tmp_24_reg_594) + unsigned(tmp_45_fu_478_p1));
    tmp_15_fu_234_p2 <= std_logic_vector(unsigned(tmp_cast_fu_230_p1) + unsigned(ap_const_lv17_2));
    tmp_16_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),32));
    tmp_17_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),32));
    tmp_18_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),17));
    tmp_18_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
    tmp_19_fu_256_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_252_p1) + unsigned(ap_const_lv17_1));
    tmp_20_fu_262_p2 <= std_logic_vector(unsigned(tmp_cast_fu_230_p1) + unsigned(ap_const_lv17_1));
    tmp_21_fu_268_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_252_p1) + unsigned(ap_const_lv17_2));
    tmp_24_fu_295_p1 <= tmp_17_reg_549(16 - 1 downto 0);
    tmp_24_fu_295_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(phi_mul2_reg_151) * signed('0' &tmp_24_fu_295_p1))), 32));
    tmp_28_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height1_reg_174),17));
    tmp_28_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height1_reg_174),32));
    tmp_29_fu_337_p2 <= "1" when (unsigned(tmp_28_cast_fu_333_p1) < unsigned(tmp_19_reg_561)) else "0";
    tmp_30_cast_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_reg_163),17));
    tmp_30_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_reg_163),32));
    tmp_31_fu_308_p2 <= "1" when (unsigned(tmp_30_cast_fu_304_p1) < unsigned(tmp_15_reg_537)) else "0";
    tmp_33_fu_364_p0 <= tmp_17_reg_549(16 - 1 downto 0);
    tmp_33_fu_364_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp_33_fu_364_p0) * signed(tmp_53_reg_611))), 32));
    tmp_35_fu_319_p2 <= std_logic_vector(unsigned(tmp_24_reg_594) + unsigned(tmp_30_fu_300_p1));
        tmp_36_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_fu_319_p2),64));

    tmp_37_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_2_fu_459_p2),17));
    tmp_38_fu_473_p2 <= "1" when (unsigned(tmp_37_cast_fu_469_p1) < unsigned(tmp_21_reg_571)) else "0";
        tmp_41_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_33_reg_621),64));

    tmp_42_fu_512_p0 <= tmp_42_fu_512_p00(16 - 1 downto 0);
    tmp_42_fu_512_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_2_fu_459_p2),32));
    tmp_42_fu_512_p1 <= tmp_17_reg_549(16 - 1 downto 0);
    tmp_43_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width3_reg_186),17));
    tmp_43_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width3_reg_186),32));
    tmp_44_fu_384_p2 <= "1" when (unsigned(tmp_43_cast_fu_380_p1) < unsigned(tmp_20_reg_566)) else "0";
    tmp_45_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width6_reg_215),17));
    tmp_45_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width6_reg_215),32));
    tmp_46_fu_486_p2 <= "1" when (unsigned(tmp_45_cast_fu_482_p1) < unsigned(tmp_15_reg_537)) else "0";
    tmp_49_fu_399_p2 <= std_logic_vector(signed(tmp4_cast_fu_395_p1) + signed(tmp3_reg_628));
        tmp_50_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_49_fu_399_p2),64));

    tmp_51_fu_415_p2 <= std_logic_vector(signed(tmp_33_reg_621) + signed(tmp_43_reg_633));
        tmp_52_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_51_fu_415_p2),64));

    tmp_53_fu_342_p2 <= std_logic_vector(unsigned(tmp_28_fu_329_p1) + unsigned(phi_mul2_reg_151));
    tmp_54_fu_502_p2 <= std_logic_vector(unsigned(tmp5_fu_497_p2) + unsigned(tmp_42_reg_672));
        tmp_55_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_54_fu_502_p2),64));

    tmp_56_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_5_fu_424_p2),17));
    tmp_56_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_5_fu_424_p2),32));
    tmp_57_fu_438_p2 <= "1" when (unsigned(tmp_56_cast_fu_434_p1) < unsigned(tmp_15_reg_537)) else "0";
    tmp_58_fu_443_p2 <= std_logic_vector(signed(tmp_33_reg_621) + signed(tmp_56_fu_430_p1));
        tmp_59_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_fu_443_p2),64));

    tmp_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),17));
    tmp_fu_358_p2 <= std_logic_vector(signed(tmp2_cast_fu_354_p1) + signed(phi_mul_reg_139));
    tmp_s_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    width_1_fu_313_p2 <= std_logic_vector(unsigned(width_reg_163) + unsigned(ap_const_lv16_1));
    width_3_fu_409_p2 <= std_logic_vector(unsigned(width3_reg_186) + unsigned(ap_const_lv16_1));
    width_4_fu_491_p2 <= std_logic_vector(unsigned(width6_reg_215) + unsigned(ap_const_lv16_1));
    width_5_fu_424_p2 <= std_logic_vector(unsigned(width4_0_in_reg_197) + unsigned(ap_const_lv16_1));
end behav;
