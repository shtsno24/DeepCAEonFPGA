-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Padding2D_4_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Padding2D_4_array_ce0 : OUT STD_LOGIC;
    Padding2D_4_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Padding2D_4_array_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Padding2D_4_array_ce1 : OUT STD_LOGIC;
    Padding2D_4_array_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv16_FB0B : STD_LOGIC_VECTOR (15 downto 0) := "1111101100001011";
    constant ap_const_lv15_7B0B : STD_LOGIC_VECTOR (14 downto 0) := "111101100001011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Conv2D_4_w_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Conv2D_4_w_0_ce0 : STD_LOGIC;
    signal Conv2D_4_w_0_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal Conv2D_4_w_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Conv2D_4_w_0_ce1 : STD_LOGIC;
    signal Conv2D_4_w_0_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal Conv2D_4_w_0_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Conv2D_4_w_0_ce2 : STD_LOGIC;
    signal Conv2D_4_w_0_q2 : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_359 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_363 : STD_LOGIC_VECTOR (12 downto 0);
    signal reg_367 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_371 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_reg_1072 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_reg_1089 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul5_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul5_reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul2_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_d_3_fu_410_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_3_reg_1107 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_fu_421_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_reg_1115 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_113_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_113_reg_1120 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_1130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_w_3_fu_446_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_3_reg_1138 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_114_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr11_reg_1150 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_127_0_1_cast_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_1_cast_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_2_cast_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_127_0_2_cast_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_d_1_fu_495_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_1_reg_1172 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal next_mul_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_reg_1188 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp4_1_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_1_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_2_fu_530_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_2_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_122_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp5_1_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_1_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_2_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_2_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_reg_1277 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_56_reg_1282 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_128_2_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_1_fu_701_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_1_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_2_fu_705_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_2_2_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_reg_1322 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_58_reg_1327 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_59_reg_1357 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_60_reg_1362 : STD_LOGIC_VECTOR (14 downto 0);
    signal Conv2D_4_w_0_load_8_reg_1372 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp6_fu_834_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_reg_1377 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_reg_1382 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_62_reg_1387 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_63_reg_1392 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp2_fu_908_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_1397 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp8_fu_932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_reg_1402 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_tmp_s_fu_972_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_tmp_s_reg_1407 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal out_d_reg_280 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_291 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul4_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_h_reg_315 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond5_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_326 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal in_d_reg_337 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal phi_mul_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_116_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_0_1_fu_563_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_0_1_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_0_2_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_0_2_fu_601_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_1_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_1_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_1_2_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_1_2_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_1_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_1_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_2_2_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_2_2_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_2_2_fu_942_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_tmp_cast_fu_980_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_437_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_115_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_cast_fu_456_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_127_0_1_fu_470_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_127_0_2_fu_480_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_119_fu_501_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_521_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_535_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_0_1_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_0_1_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_1_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_2_fu_583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_0_2_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_0_2_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_1_fu_606_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_fu_984_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_0_1_fu_991_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_128_1_1_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_1_fu_668_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_1_2_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_1_2_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_0_2_fu_998_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_1_fu_1005_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_132_2_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_2_1_fu_761_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_132_2_2_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_135_1_1_fu_1012_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_1_2_fu_1019_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_137_0_2_fu_784_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_fu_787_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_828_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_0_1_fu_781_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_135_2_fu_1026_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_2_1_fu_1033_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_135_2_2_fu_1040_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_136_fu_890_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_1_fu_893_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_1_2_fu_896_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_1_fu_902_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_2_fu_905_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_fu_920_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_137_2_fu_899_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_926_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_fu_914_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_938_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_948_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_117_fu_952_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_964_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_117_cast_fu_958_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component network_mul_mul_13s_16s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component conv2d_fix16_Conv2D_4_w_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    Conv2D_4_w_0_U : component conv2d_fix16_Conv2D_4_w_0
    generic map (
        DataWidth => 13,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv2D_4_w_0_address0,
        ce0 => Conv2D_4_w_0_ce0,
        q0 => Conv2D_4_w_0_q0,
        address1 => Conv2D_4_w_0_address1,
        ce1 => Conv2D_4_w_0_ce1,
        q1 => Conv2D_4_w_0_q1,
        address2 => Conv2D_4_w_0_address2,
        ce2 => Conv2D_4_w_0_ce2,
        q2 => Conv2D_4_w_0_q2);

    network_mul_mul_13s_16s_29_1_1_U146 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_363,
        din1 => reg_359,
        dout => tmp_135_fu_984_p2);

    network_mul_mul_13s_16s_29_1_1_U147 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_371,
        din1 => reg_367,
        dout => tmp_135_0_1_fu_991_p2);

    network_mul_mul_13s_16s_29_1_1_U148 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_363,
        din1 => reg_359,
        dout => tmp_135_0_2_fu_998_p2);

    network_mul_mul_13s_16s_29_1_1_U149 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_371,
        din1 => reg_367,
        dout => tmp_135_1_fu_1005_p2);

    network_mul_mul_13s_16s_29_1_1_U150 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_363,
        din1 => reg_359,
        dout => tmp_135_1_1_fu_1012_p2);

    network_mul_mul_13s_16s_29_1_1_U151 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_371,
        din1 => reg_367,
        dout => tmp_135_1_2_fu_1019_p2);

    network_mul_mul_13s_16s_29_1_1_U152 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_363,
        din1 => reg_359,
        dout => tmp_135_2_fu_1026_p2);

    network_mul_mul_13s_16s_29_1_1_U153 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => reg_371,
        din1 => reg_367,
        dout => tmp_135_2_1_fu_1033_p2);

    network_mul_mul_13s_16s_29_1_1_U154 : component network_mul_mul_13s_16s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 16,
        dout_WIDTH => 29)
    port map (
        din0 => Conv2D_4_w_0_load_8_reg_1372,
        din1 => reg_359,
        dout => tmp_135_2_2_fu_1040_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_d_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                in_d_reg_337 <= in_d_1_reg_1172;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_441_p2 = ap_const_lv1_0))) then 
                in_d_reg_337 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_d_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_416_p2 = ap_const_lv1_1))) then 
                out_d_reg_280 <= out_d_3_reg_1107;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_280 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_h_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_405_p2 = ap_const_lv1_0))) then 
                out_h_reg_315 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_441_p2 = ap_const_lv1_1))) then 
                out_h_reg_315 <= out_h_3_reg_1115;
            end if; 
        end if;
    end process;

    out_w_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_reg_326 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                out_w_reg_326 <= out_w_3_reg_1138;
            end if; 
        end if;
    end process;

    phi_mul1_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_416_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_291 <= next_mul2_reg_1099;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul1_reg_291 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul4_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_416_p2 = ap_const_lv1_1))) then 
                phi_mul4_reg_303 <= next_mul5_reg_1094;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul4_reg_303 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                phi_mul_reg_348 <= next_mul_reg_1177;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_441_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_348 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Conv2D_4_w_0_load_8_reg_1372 <= Conv2D_4_w_0_q2;
                tmp6_reg_1377 <= tmp6_fu_834_p2;
                tmp_59_reg_1357 <= tmp_135_1_1_fu_1012_p2(28 downto 14);
                tmp_60_reg_1362 <= tmp_135_1_2_fu_1019_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_d_1_reg_1172 <= in_d_1_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul2_reg_1099 <= next_mul2_fu_400_p2;
                next_mul5_reg_1094 <= next_mul5_fu_395_p2;
                out_d_3_reg_1107 <= out_d_3_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_490_p2 = ap_const_lv1_0))) then
                next_mul_reg_1177 <= next_mul_fu_505_p2;
                tmp4_reg_1188 <= tmp4_fu_516_p2;
                tmp_121_reg_1182 <= tmp_121_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_3_reg_1115 <= out_h_3_fu_421_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_3_reg_1138 <= out_w_3_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_441_p2 = ap_const_lv1_0))) then
                output_addr11_reg_1150 <= tmp_116_fu_465_p1(10 - 1 downto 0);
                    tmp_114_reg_1143(15 downto 0) <= tmp_114_fu_452_p1(15 downto 0);
                    tmp_127_0_1_cast_reg_1155(16 downto 0) <= tmp_127_0_1_cast_fu_476_p1(16 downto 0);
                    tmp_127_0_2_cast_reg_1162(16 downto 0) <= tmp_127_0_2_cast_fu_486_p1(16 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                p_tmp_s_reg_1407 <= p_tmp_s_fu_972_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_359 <= Padding2D_4_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_363 <= Conv2D_4_w_0_q0;
                reg_367 <= Padding2D_4_array_q1;
                reg_371 <= Conv2D_4_w_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp2_reg_1397 <= tmp2_fu_908_p2;
                tmp8_reg_1402 <= tmp8_fu_932_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp3_reg_1130 <= tmp3_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp4_1_reg_1202 <= tmp4_1_fu_525_p2;
                tmp4_2_reg_1207 <= tmp4_2_fu_530_p2;
                tmp5_reg_1195 <= tmp5_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp5_1_reg_1243 <= tmp5_1_fu_579_p2;
                tmp5_2_reg_1250 <= tmp5_2_fu_583_p2;
                tmp_122_reg_1212 <= tmp_122_fu_540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_105_reg_1072(15 downto 0) <= tmp_105_fu_379_p1(15 downto 0);
                    tmp_106_reg_1077(15 downto 0) <= tmp_106_fu_383_p1(15 downto 0);
                    tmp_107_reg_1082(15 downto 0) <= tmp_107_fu_387_p1(15 downto 0);
                    tmp_108_reg_1089(15 downto 0) <= tmp_108_fu_391_p1(15 downto 0);
                    tmp_s_reg_1067(15 downto 0) <= tmp_s_fu_375_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_416_p2 = ap_const_lv1_0))) then
                    tmp_113_reg_1120(15 downto 0) <= tmp_113_fu_427_p1(15 downto 0);
                tmp_reg_1125 <= tmp_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_128_2_1_reg_1312 <= tmp_128_2_1_fu_701_p2;
                tmp_128_2_2_reg_1317 <= tmp_128_2_2_fu_705_p2;
                tmp_128_2_reg_1307 <= tmp_128_2_fu_697_p2;
                tmp_55_reg_1277 <= tmp_135_fu_984_p2(28 downto 14);
                tmp_56_reg_1282 <= tmp_135_0_1_fu_991_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_57_reg_1322 <= tmp_135_0_2_fu_998_p2(28 downto 14);
                tmp_58_reg_1327 <= tmp_135_1_fu_1005_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_61_reg_1382 <= tmp_135_2_fu_1026_p2(28 downto 14);
                tmp_62_reg_1387 <= tmp_135_2_1_fu_1033_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_63_reg_1392 <= tmp_135_2_2_fu_1040_p2(28 downto 14);
            end if;
        end if;
    end process;
    tmp_s_reg_1067(31 downto 16) <= "0000000000000000";
    tmp_105_reg_1072(31 downto 16) <= "0000000000000000";
    tmp_106_reg_1077(31 downto 16) <= "0000000000000000";
    tmp_107_reg_1082(31 downto 16) <= "0000000000000000";
    tmp_108_reg_1089(31 downto 16) <= "0000000000000000";
    tmp_113_reg_1120(31 downto 16) <= "0000000000000000";
    tmp_114_reg_1143(31 downto 16) <= "0000000000000000";
    tmp_127_0_1_cast_reg_1155(31 downto 17) <= "000000000000000";
    tmp_127_0_2_cast_reg_1162(31 downto 17) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond4_fu_416_p2, ap_CS_fsm_state5, exitcond3_fu_441_p2, ap_CS_fsm_state6, exitcond2_fu_490_p2, exitcond5_fu_405_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_416_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_490_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Conv2D_4_w_0_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8, tmp_133_fu_554_p1, tmp_133_0_2_fu_601_p1, tmp_133_1_1_fu_673_p1, tmp_133_2_fu_752_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Conv2D_4_w_0_address0 <= tmp_133_2_fu_752_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Conv2D_4_w_0_address0 <= tmp_133_1_1_fu_673_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Conv2D_4_w_0_address0 <= tmp_133_0_2_fu_601_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Conv2D_4_w_0_address0 <= tmp_133_fu_554_p1(8 - 1 downto 0);
        else 
            Conv2D_4_w_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    Conv2D_4_w_0_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8, tmp_133_0_1_fu_574_p1, tmp_133_1_fu_620_p1, tmp_133_1_2_fu_692_p1, tmp_133_2_1_fu_766_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Conv2D_4_w_0_address1 <= tmp_133_2_1_fu_766_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Conv2D_4_w_0_address1 <= tmp_133_1_2_fu_692_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Conv2D_4_w_0_address1 <= tmp_133_1_fu_620_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Conv2D_4_w_0_address1 <= tmp_133_0_1_fu_574_p1(8 - 1 downto 0);
        else 
            Conv2D_4_w_0_address1 <= "XXXXXXXX";
        end if; 
    end process;

    Conv2D_4_w_0_address2 <= tmp_133_2_2_fu_776_p1(8 - 1 downto 0);

    Conv2D_4_w_0_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            Conv2D_4_w_0_ce0 <= ap_const_logic_1;
        else 
            Conv2D_4_w_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Conv2D_4_w_0_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            Conv2D_4_w_0_ce1 <= ap_const_logic_1;
        else 
            Conv2D_4_w_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Conv2D_4_w_0_ce2_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Conv2D_4_w_0_ce2 <= ap_const_logic_1;
        else 
            Conv2D_4_w_0_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_4_array_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state8, tmp_129_fu_549_p1, tmp_129_0_2_fu_591_p1, tmp_129_1_1_fu_663_p1, tmp_129_2_fu_743_p1, tmp_129_2_2_fu_824_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_4_array_address0 <= tmp_129_2_2_fu_824_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Padding2D_4_array_address0 <= tmp_129_2_fu_743_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Padding2D_4_array_address0 <= tmp_129_1_1_fu_663_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Padding2D_4_array_address0 <= tmp_129_0_2_fu_591_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Padding2D_4_array_address0 <= tmp_129_fu_549_p1(14 - 1 downto 0);
        else 
            Padding2D_4_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_4_array_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8, tmp_129_0_1_fu_563_p1, tmp_129_1_fu_610_p1, tmp_129_1_2_fu_682_p1, tmp_129_2_1_fu_757_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Padding2D_4_array_address1 <= tmp_129_2_1_fu_757_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Padding2D_4_array_address1 <= tmp_129_1_2_fu_682_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Padding2D_4_array_address1 <= tmp_129_1_fu_610_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Padding2D_4_array_address1 <= tmp_129_0_1_fu_563_p1(14 - 1 downto 0);
        else 
            Padding2D_4_array_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_4_array_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            Padding2D_4_array_ce0 <= ap_const_logic_1;
        else 
            Padding2D_4_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_4_array_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            Padding2D_4_array_ce1 <= ap_const_logic_1;
        else 
            Padding2D_4_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_405_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond5_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_405_p2)
    begin
        if (((exitcond5_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_490_p2 <= "1" when (in_d_reg_337 = input_depth) else "0";
    exitcond3_fu_441_p2 <= "1" when (out_w_reg_326 = output_width) else "0";
    exitcond4_fu_416_p2 <= "1" when (out_h_reg_315 = output_height) else "0";
    exitcond5_fu_405_p2 <= "1" when (out_d_reg_280 = output_depth) else "0";
    in_d_1_fu_495_p2 <= std_logic_vector(unsigned(in_d_reg_337) + unsigned(ap_const_lv16_1));
    next_mul2_fu_400_p2 <= std_logic_vector(unsigned(phi_mul1_reg_291) + unsigned(tmp_s_reg_1067));
    next_mul5_fu_395_p2 <= std_logic_vector(unsigned(phi_mul4_reg_303) + unsigned(tmp_108_reg_1089));
    next_mul_fu_505_p2 <= std_logic_vector(unsigned(phi_mul_reg_348) + unsigned(tmp_106_reg_1077));
    out_d_3_fu_410_p2 <= std_logic_vector(unsigned(out_d_reg_280) + unsigned(ap_const_lv16_1));
    out_h_3_fu_421_p2 <= std_logic_vector(unsigned(out_h_reg_315) + unsigned(ap_const_lv16_1));
    out_w_3_fu_446_p2 <= std_logic_vector(unsigned(out_w_reg_326) + unsigned(ap_const_lv16_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state5, output_addr11_reg_1150, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state16, tmp_116_fu_465_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_address0 <= output_addr11_reg_1150;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_116_fu_465_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state18, ap_CS_fsm_state16, tmp_138_2_2_fu_942_p2, p_tmp_cast_fu_980_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            output_r_d0 <= p_tmp_cast_fu_980_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_r_d0 <= tmp_138_2_2_fu_942_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, exitcond3_fu_441_p2, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_441_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_tmp_cast_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_tmp_s_reg_1407),16));
    p_tmp_s_fu_972_p3 <= 
        ap_const_lv15_0 when (tmp_53_fu_964_p3(0) = '1') else 
        tmp_117_cast_fu_958_p2;
    tmp10_fu_926_p2 <= std_logic_vector(unsigned(tmp11_fu_920_p2) + unsigned(tmp_137_2_fu_899_p1));
    tmp11_fu_920_p2 <= std_logic_vector(signed(tmp_137_2_1_fu_902_p1) + signed(tmp_137_2_2_fu_905_p1));
    tmp1_fu_938_p2 <= std_logic_vector(unsigned(tmp6_reg_1377) + unsigned(tmp2_reg_1397));
    tmp2_fu_908_p2 <= std_logic_vector(unsigned(output_r_q0) + unsigned(tmp_136_fu_890_p1));
    tmp3_fu_437_p1 <= tmp_105_reg_1072(16 - 1 downto 0);
    tmp3_fu_437_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_1125) * signed('0' &tmp3_fu_437_p1))), 32));
    tmp4_1_fu_525_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp4_reg_1188));
    tmp4_2_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp4_reg_1188));
    tmp4_fu_516_p2 <= std_logic_vector(unsigned(phi_mul_reg_348) + unsigned(tmp_113_reg_1120));
    tmp5_1_fu_579_p1 <= tmp_107_reg_1082(16 - 1 downto 0);
    tmp5_1_fu_579_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_1_reg_1202) * signed('0' &tmp5_1_fu_579_p1))), 32));
    tmp5_2_fu_583_p1 <= tmp_107_reg_1082(16 - 1 downto 0);
    tmp5_2_fu_583_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_2_reg_1207) * signed('0' &tmp5_2_fu_583_p1))), 32));
    tmp5_fu_521_p1 <= tmp_107_reg_1082(16 - 1 downto 0);
    tmp5_fu_521_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp4_reg_1188) * signed('0' &tmp5_fu_521_p1))), 32));
    tmp6_fu_834_p2 <= std_logic_vector(unsigned(tmp7_fu_828_p2) + unsigned(tmp_137_0_1_fu_781_p1));
    tmp7_fu_828_p2 <= std_logic_vector(signed(tmp_137_0_2_fu_784_p1) + signed(tmp_137_1_fu_787_p1));
    tmp8_fu_932_p2 <= std_logic_vector(unsigned(tmp10_fu_926_p2) + unsigned(tmp9_fu_914_p2));
    tmp9_fu_914_p2 <= std_logic_vector(signed(tmp_137_1_1_fu_893_p1) + signed(tmp_137_1_2_fu_896_p1));
    tmp_105_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),32));
    tmp_106_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
    tmp_107_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    tmp_108_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_depth),32));
    tmp_113_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_315),32));
    tmp_114_cast_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_326),17));
    tmp_114_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_326),32));
    tmp_115_fu_460_p2 <= std_logic_vector(unsigned(tmp3_reg_1130) + unsigned(tmp_114_fu_452_p1));
        tmp_116_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_115_fu_460_p2),64));

    tmp_117_cast_fu_958_p2 <= std_logic_vector(signed(ap_const_lv15_7B0B) + signed(tmp_52_fu_948_p1));
    tmp_117_fu_952_p2 <= std_logic_vector(signed(ap_const_lv16_FB0B) + signed(output_r_q0));
    tmp_119_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_reg_337),32));
    tmp_121_fu_510_p2 <= std_logic_vector(unsigned(phi_mul4_reg_303) + unsigned(tmp_119_fu_501_p1));
    tmp_122_fu_540_p2 <= std_logic_vector(unsigned(tmp_54_fu_535_p2) + unsigned(tmp_121_reg_1182));
    tmp_127_0_1_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_0_1_fu_470_p2),32));
    tmp_127_0_1_fu_470_p2 <= std_logic_vector(unsigned(tmp_114_cast_fu_456_p1) + unsigned(ap_const_lv17_1));
    tmp_127_0_2_cast_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_0_2_fu_480_p2),32));
    tmp_127_0_2_fu_480_p2 <= std_logic_vector(unsigned(tmp_114_cast_fu_456_p1) + unsigned(ap_const_lv17_2));
    tmp_128_0_1_fu_559_p2 <= std_logic_vector(unsigned(tmp_127_0_1_cast_reg_1155) + unsigned(tmp5_reg_1195));
    tmp_128_0_2_fu_587_p2 <= std_logic_vector(unsigned(tmp_127_0_2_cast_reg_1162) + unsigned(tmp5_reg_1195));
    tmp_128_1_1_fu_659_p2 <= std_logic_vector(unsigned(tmp_127_0_1_cast_reg_1155) + unsigned(tmp5_1_reg_1243));
    tmp_128_1_2_fu_678_p2 <= std_logic_vector(unsigned(tmp_127_0_2_cast_reg_1162) + unsigned(tmp5_1_reg_1243));
    tmp_128_1_fu_606_p2 <= std_logic_vector(unsigned(tmp5_1_reg_1243) + unsigned(tmp_114_reg_1143));
    tmp_128_2_1_fu_701_p2 <= std_logic_vector(unsigned(tmp_127_0_1_cast_reg_1155) + unsigned(tmp5_2_reg_1250));
    tmp_128_2_2_fu_705_p2 <= std_logic_vector(unsigned(tmp_127_0_2_cast_reg_1162) + unsigned(tmp5_2_reg_1250));
    tmp_128_2_fu_697_p2 <= std_logic_vector(unsigned(tmp5_2_reg_1250) + unsigned(tmp_114_reg_1143));
    tmp_128_fu_545_p2 <= std_logic_vector(unsigned(tmp5_reg_1195) + unsigned(tmp_114_reg_1143));
        tmp_129_0_1_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_0_1_fu_559_p2),64));

        tmp_129_0_2_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_0_2_fu_587_p2),64));

        tmp_129_1_1_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_1_fu_659_p2),64));

        tmp_129_1_2_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_2_fu_678_p2),64));

        tmp_129_1_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_1_fu_606_p2),64));

        tmp_129_2_1_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_1_reg_1312),64));

        tmp_129_2_2_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_2_reg_1317),64));

        tmp_129_2_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_2_reg_1307),64));

        tmp_129_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_fu_545_p2),64));

    tmp_132_0_1_fu_568_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(tmp_122_fu_540_p2));
    tmp_132_0_2_fu_596_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp_122_reg_1212));
    tmp_132_1_1_fu_668_p2 <= std_logic_vector(unsigned(ap_const_lv32_4) + unsigned(tmp_122_reg_1212));
    tmp_132_1_2_fu_687_p2 <= std_logic_vector(unsigned(ap_const_lv32_5) + unsigned(tmp_122_reg_1212));
    tmp_132_1_fu_615_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(tmp_122_reg_1212));
    tmp_132_2_1_fu_761_p2 <= std_logic_vector(unsigned(ap_const_lv32_7) + unsigned(tmp_122_reg_1212));
    tmp_132_2_2_fu_771_p2 <= std_logic_vector(unsigned(ap_const_lv32_8) + unsigned(tmp_122_reg_1212));
    tmp_132_2_fu_747_p2 <= std_logic_vector(unsigned(ap_const_lv32_6) + unsigned(tmp_122_reg_1212));
        tmp_133_0_1_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_0_1_fu_568_p2),64));

        tmp_133_0_2_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_0_2_fu_596_p2),64));

        tmp_133_1_1_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_1_fu_668_p2),64));

        tmp_133_1_2_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_2_fu_687_p2),64));

        tmp_133_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_1_fu_615_p2),64));

        tmp_133_2_1_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_1_fu_761_p2),64));

        tmp_133_2_2_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_2_fu_771_p2),64));

        tmp_133_2_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_132_2_fu_747_p2),64));

        tmp_133_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_122_fu_540_p2),64));

        tmp_136_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_55_reg_1277),16));

        tmp_137_0_1_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_56_reg_1282),16));

        tmp_137_0_2_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_57_reg_1322),16));

        tmp_137_1_1_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_59_reg_1357),16));

        tmp_137_1_2_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_60_reg_1362),16));

        tmp_137_1_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_58_reg_1327),16));

        tmp_137_2_1_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_reg_1387),16));

        tmp_137_2_2_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_63_reg_1392),16));

        tmp_137_2_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_61_reg_1382),16));

    tmp_138_2_2_fu_942_p2 <= std_logic_vector(unsigned(tmp8_reg_1402) + unsigned(tmp1_fu_938_p2));
    tmp_52_fu_948_p1 <= output_r_q0(15 - 1 downto 0);
    tmp_53_fu_964_p3 <= tmp_117_fu_952_p2(15 downto 15);
    tmp_54_fu_535_p2 <= std_logic_vector(shift_left(unsigned(tmp_121_reg_1182),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_fu_431_p2 <= std_logic_vector(unsigned(phi_mul1_reg_291) + unsigned(tmp_113_fu_427_p1));
    tmp_s_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),32));
end behav;
