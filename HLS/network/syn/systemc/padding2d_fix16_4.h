// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _padding2d_fix16_4_HH_
#define _padding2d_fix16_4_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct padding2d_fix16_4 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > input_0_address0;
    sc_out< sc_logic > input_0_ce0;
    sc_in< sc_lv<16> > input_0_q0;
    sc_in< sc_lv<16> > output_width;
    sc_out< sc_lv<10> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<16> > output_r_d0;


    // Module declarations
    padding2d_fix16_4(sc_module_name name);
    SC_HAS_PROCESS(padding2d_fix16_4);

    ~padding2d_fix16_4();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<21> > tmp_15_cast1_fu_162_p1;
    sc_signal< sc_lv<21> > tmp_15_cast1_reg_342;
    sc_signal< sc_lv<21> > next_mul_fu_166_p2;
    sc_signal< sc_lv<21> > next_mul_reg_347;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > height_1_fu_177_p2;
    sc_signal< sc_lv<5> > height_1_reg_355;
    sc_signal< sc_lv<1> > tmp_s_fu_183_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_360;
    sc_signal< sc_lv<1> > exitcond1_fu_171_p2;
    sc_signal< sc_lv<1> > tmp_15_fu_189_p2;
    sc_signal< sc_lv<1> > tmp_15_reg_364;
    sc_signal< sc_lv<10> > output_addr_2_reg_368;
    sc_signal< sc_lv<11> > tmp7_fu_230_p2;
    sc_signal< sc_lv<11> > tmp7_reg_373;
    sc_signal< sc_lv<5> > width_2_fu_246_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > width_3_fu_274_p2;
    sc_signal< sc_lv<5> > width_3_reg_389;
    sc_signal< sc_lv<1> > tmp_18_fu_280_p2;
    sc_signal< sc_lv<1> > tmp_18_reg_394;
    sc_signal< sc_lv<1> > exitcond9_fu_268_p2;
    sc_signal< sc_lv<1> > tmp_20_fu_286_p2;
    sc_signal< sc_lv<1> > tmp_20_reg_398;
    sc_signal< sc_lv<21> > grp_fu_157_p2;
    sc_signal< sc_lv<21> > tmp_23_reg_407;
    sc_signal< sc_lv<5> > width_1_fu_327_p2;
    sc_signal< sc_lv<5> > height_reg_101;
    sc_signal< sc_lv<1> > exitcond2_fu_321_p2;
    sc_signal< sc_lv<1> > exitcond8_fu_240_p2;
    sc_signal< sc_lv<21> > phi_mul_reg_112;
    sc_signal< sc_lv<5> > width2_reg_124;
    sc_signal< sc_lv<5> > width1_reg_135;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<5> > width_reg_146;
    sc_signal< sc_lv<64> > tmp_16_fu_195_p1;
    sc_signal< sc_lv<64> > tmp_19_fu_258_p1;
    sc_signal< sc_lv<64> > tmp_26_fu_292_p1;
    sc_signal< sc_lv<64> > tmp_22_fu_316_p1;
    sc_signal< sc_lv<64> > tmp_17_fu_333_p1;
    sc_signal< sc_lv<64> > tmp_24_fu_338_p1;
    sc_signal< sc_lv<21> > tmp_32_cast6_fu_263_p1;
    sc_signal< sc_lv<5> > tmp2_fu_200_p2;
    sc_signal< sc_lv<10> > p_shl3_fu_206_p3;
    sc_signal< sc_lv<7> > p_shl4_fu_218_p3;
    sc_signal< sc_lv<11> > p_shl3_cast_fu_214_p1;
    sc_signal< sc_lv<11> > p_shl4_cast_fu_226_p1;
    sc_signal< sc_lv<21> > tmp_30_cast_fu_236_p1;
    sc_signal< sc_lv<21> > tmp4_fu_252_p2;
    sc_signal< sc_lv<5> > tmp3_fu_297_p2;
    sc_signal< sc_lv<11> > tmp3_cast_fu_303_p1;
    sc_signal< sc_lv<11> > tmp_21_fu_307_p2;
    sc_signal< sc_lv<32> > tmp_38_cast_fu_312_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<21> ap_const_lv21_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<5> ap_const_lv5_1E;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_1D;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_171_p2();
    void thread_exitcond2_fu_321_p2();
    void thread_exitcond8_fu_240_p2();
    void thread_exitcond9_fu_268_p2();
    void thread_grp_fu_157_p2();
    void thread_height_1_fu_177_p2();
    void thread_input_0_address0();
    void thread_input_0_ce0();
    void thread_next_mul_fu_166_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_p_shl3_cast_fu_214_p1();
    void thread_p_shl3_fu_206_p3();
    void thread_p_shl4_cast_fu_226_p1();
    void thread_p_shl4_fu_218_p3();
    void thread_tmp2_fu_200_p2();
    void thread_tmp3_cast_fu_303_p1();
    void thread_tmp3_fu_297_p2();
    void thread_tmp4_fu_252_p2();
    void thread_tmp7_fu_230_p2();
    void thread_tmp_15_cast1_fu_162_p1();
    void thread_tmp_15_fu_189_p2();
    void thread_tmp_16_fu_195_p1();
    void thread_tmp_17_fu_333_p1();
    void thread_tmp_18_fu_280_p2();
    void thread_tmp_19_fu_258_p1();
    void thread_tmp_20_fu_286_p2();
    void thread_tmp_21_fu_307_p2();
    void thread_tmp_22_fu_316_p1();
    void thread_tmp_24_fu_338_p1();
    void thread_tmp_26_fu_292_p1();
    void thread_tmp_30_cast_fu_236_p1();
    void thread_tmp_32_cast6_fu_263_p1();
    void thread_tmp_38_cast_fu_312_p1();
    void thread_tmp_s_fu_183_p2();
    void thread_width_1_fu_327_p2();
    void thread_width_2_fu_246_p2();
    void thread_width_3_fu_274_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
