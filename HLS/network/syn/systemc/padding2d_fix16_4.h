// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _padding2d_fix16_4_HH_
#define _padding2d_fix16_4_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "network_mul_mul_5ns_16ns_21_1_1.h"

namespace ap_rtl {

struct padding2d_fix16_4 : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > input_0_address0;
    sc_out< sc_logic > input_0_ce0;
    sc_in< sc_lv<16> > input_0_q0;
    sc_in< sc_lv<16> > output_width;
    sc_out< sc_lv<10> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<16> > output_r_d0;


    // Module declarations
    padding2d_fix16_4(sc_module_name name);
    SC_HAS_PROCESS(padding2d_fix16_4);

    ~padding2d_fix16_4();

    sc_trace_file* mVcdFile;

    network_mul_mul_5ns_16ns_21_1_1<1,1,5,16,21>* network_mul_mul_5ns_16ns_21_1_1_U1;
    network_mul_mul_5ns_16ns_21_1_1<1,1,5,16,21>* network_mul_mul_5ns_16ns_21_1_1_U2;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<21> > tmp_15_cast_fu_176_p1;
    sc_signal< sc_lv<21> > tmp_15_cast_reg_388;
    sc_signal< sc_lv<5> > width_1_fu_186_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<21> > tmp_15_fu_378_p2;
    sc_signal< sc_lv<21> > tmp_15_reg_405;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > exitcond9_fu_197_p2;
    sc_signal< sc_lv<11> > tmp3_fu_241_p2;
    sc_signal< sc_lv<11> > tmp3_reg_412;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<21> > tmp_26_cast_fu_247_p1;
    sc_signal< sc_lv<21> > tmp_26_cast_reg_417;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > exitcond8_fu_251_p2;
    sc_signal< sc_lv<5> > width_2_fu_281_p2;
    sc_signal< sc_lv<5> > width_2_reg_430;
    sc_signal< sc_lv<3> > phitmp_fu_320_p2;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<1> > exitcond7_fu_304_p2;
    sc_signal< sc_lv<5> > height_1_fu_326_p2;
    sc_signal< sc_lv<21> > tmp_17_fu_383_p2;
    sc_signal< sc_lv<21> > tmp_17_reg_451;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<1> > exitcond6_fu_340_p2;
    sc_signal< sc_lv<5> > width_4_fu_356_p2;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<3> > phitmp5_fu_372_p2;
    sc_signal< sc_lv<1> > exitcond_fu_350_p2;
    sc_signal< sc_lv<5> > width_reg_108;
    sc_signal< sc_lv<1> > exitcond1_fu_180_p2;
    sc_signal< sc_lv<5> > height1_reg_119;
    sc_signal< sc_lv<5> > width3_reg_131;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > width_3_reg_142;
    sc_signal< sc_lv<3> > height_reg_153;
    sc_signal< sc_lv<5> > width6_reg_165;
    sc_signal< sc_lv<64> > tmp_s_fu_192_p1;
    sc_signal< sc_lv<64> > tmp_16_fu_207_p1;
    sc_signal< sc_lv<64> > tmp_19_fu_276_p1;
    sc_signal< sc_lv<64> > tmp_21_fu_291_p1;
    sc_signal< sc_lv<64> > tmp_24_fu_315_p1;
    sc_signal< sc_lv<64> > tmp_22_fu_367_p1;
    sc_signal< sc_lv<5> > tmp2_fu_211_p2;
    sc_signal< sc_lv<10> > p_shl3_fu_217_p3;
    sc_signal< sc_lv<7> > p_shl4_fu_229_p3;
    sc_signal< sc_lv<11> > p_shl3_cast_fu_225_p1;
    sc_signal< sc_lv<11> > p_shl4_cast_fu_237_p1;
    sc_signal< sc_lv<5> > tmp4_fu_257_p2;
    sc_signal< sc_lv<11> > tmp4_cast_fu_263_p1;
    sc_signal< sc_lv<11> > tmp_18_fu_267_p2;
    sc_signal< sc_lv<32> > tmp_33_cast_fu_272_p1;
    sc_signal< sc_lv<21> > tmp_20_fu_287_p2;
    sc_signal< sc_lv<5> > width_3_cast_fu_296_p1;
    sc_signal< sc_lv<21> > tmp_38_cast_fu_300_p1;
    sc_signal< sc_lv<21> > tmp_23_fu_310_p2;
    sc_signal< sc_lv<5> > height_cast_fu_332_p1;
    sc_signal< sc_lv<21> > tmp_37_cast_fu_346_p1;
    sc_signal< sc_lv<21> > tmp5_fu_362_p2;
    sc_signal< sc_lv<5> > tmp_15_fu_378_p0;
    sc_signal< sc_lv<16> > tmp_15_fu_378_p1;
    sc_signal< sc_lv<5> > tmp_17_fu_383_p0;
    sc_signal< sc_lv<16> > tmp_17_fu_383_p1;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_lv<21> > tmp_15_fu_378_p00;
    sc_signal< sc_lv<21> > tmp_17_fu_383_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<5> ap_const_lv5_1E;
    static const sc_lv<5> ap_const_lv5_1D;
    static const sc_lv<5> ap_const_lv5_1F;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_180_p2();
    void thread_exitcond6_fu_340_p2();
    void thread_exitcond7_fu_304_p2();
    void thread_exitcond8_fu_251_p2();
    void thread_exitcond9_fu_197_p2();
    void thread_exitcond_fu_350_p2();
    void thread_height_1_fu_326_p2();
    void thread_height_cast_fu_332_p1();
    void thread_input_0_address0();
    void thread_input_0_ce0();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_p_shl3_cast_fu_225_p1();
    void thread_p_shl3_fu_217_p3();
    void thread_p_shl4_cast_fu_237_p1();
    void thread_p_shl4_fu_229_p3();
    void thread_phitmp5_fu_372_p2();
    void thread_phitmp_fu_320_p2();
    void thread_tmp2_fu_211_p2();
    void thread_tmp3_fu_241_p2();
    void thread_tmp4_cast_fu_263_p1();
    void thread_tmp4_fu_257_p2();
    void thread_tmp5_fu_362_p2();
    void thread_tmp_15_cast_fu_176_p1();
    void thread_tmp_15_fu_378_p0();
    void thread_tmp_15_fu_378_p00();
    void thread_tmp_15_fu_378_p1();
    void thread_tmp_16_fu_207_p1();
    void thread_tmp_17_fu_383_p0();
    void thread_tmp_17_fu_383_p00();
    void thread_tmp_17_fu_383_p1();
    void thread_tmp_18_fu_267_p2();
    void thread_tmp_19_fu_276_p1();
    void thread_tmp_20_fu_287_p2();
    void thread_tmp_21_fu_291_p1();
    void thread_tmp_22_fu_367_p1();
    void thread_tmp_23_fu_310_p2();
    void thread_tmp_24_fu_315_p1();
    void thread_tmp_26_cast_fu_247_p1();
    void thread_tmp_33_cast_fu_272_p1();
    void thread_tmp_37_cast_fu_346_p1();
    void thread_tmp_38_cast_fu_300_p1();
    void thread_tmp_s_fu_192_p1();
    void thread_width_1_fu_186_p2();
    void thread_width_2_fu_281_p2();
    void thread_width_3_cast_fu_296_p1();
    void thread_width_4_fu_356_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
