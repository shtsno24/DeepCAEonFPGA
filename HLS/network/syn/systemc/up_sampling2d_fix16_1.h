// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _up_sampling2d_fix16_1_HH_
#define _up_sampling2d_fix16_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct up_sampling2d_fix16_1 : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > input_height;
    sc_in< sc_lv<16> > input_width;
    sc_in< sc_lv<16> > output_depth;
    sc_in< sc_lv<16> > output_height;
    sc_in< sc_lv<16> > output_width;
    sc_out< sc_lv<9> > SeparableConv2D_2_ar_address0;
    sc_out< sc_logic > SeparableConv2D_2_ar_ce0;
    sc_in< sc_lv<16> > SeparableConv2D_2_ar_q0;
    sc_out< sc_lv<11> > UpSampling2D_0_array_address0;
    sc_out< sc_logic > UpSampling2D_0_array_ce0;
    sc_out< sc_logic > UpSampling2D_0_array_we0;
    sc_out< sc_lv<16> > UpSampling2D_0_array_d0;


    // Module declarations
    up_sampling2d_fix16_1(sc_module_name name);
    SC_HAS_PROCESS(up_sampling2d_fix16_1);

    ~up_sampling2d_fix16_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > tmp_1_fu_144_p1;
    sc_signal< sc_lv<32> > tmp_1_reg_293;
    sc_signal< sc_lv<32> > tmp_2_fu_148_p1;
    sc_signal< sc_lv<32> > tmp_2_reg_298;
    sc_signal< sc_lv<32> > tmp_3_fu_152_p1;
    sc_signal< sc_lv<32> > tmp_3_reg_303;
    sc_signal< sc_lv<32> > tmp_4_fu_156_p1;
    sc_signal< sc_lv<32> > tmp_4_reg_308;
    sc_signal< sc_lv<32> > next_mul3_fu_160_p2;
    sc_signal< sc_lv<32> > next_mul3_reg_313;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > next_mul_fu_165_p2;
    sc_signal< sc_lv<32> > next_mul_reg_318;
    sc_signal< sc_lv<16> > out_d_1_fu_175_p2;
    sc_signal< sc_lv<16> > out_d_1_reg_326;
    sc_signal< sc_lv<16> > out_h_1_fu_186_p2;
    sc_signal< sc_lv<16> > out_h_1_reg_334;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > tmp_fu_210_p2;
    sc_signal< sc_lv<32> > tmp_reg_339;
    sc_signal< sc_lv<1> > exitcond2_fu_181_p2;
    sc_signal< sc_lv<32> > tmp2_fu_216_p2;
    sc_signal< sc_lv<32> > tmp2_reg_344;
    sc_signal< sc_lv<32> > tmp1_fu_222_p2;
    sc_signal< sc_lv<32> > tmp1_reg_349;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > tmp3_fu_226_p2;
    sc_signal< sc_lv<32> > tmp3_reg_354;
    sc_signal< sc_lv<16> > out_w_1_fu_235_p2;
    sc_signal< sc_lv<16> > out_w_1_reg_362;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > exitcond_fu_230_p2;
    sc_signal< sc_lv<32> > tmp_10_fu_269_p2;
    sc_signal< sc_lv<32> > tmp_10_reg_372;
    sc_signal< sc_lv<16> > out_d_reg_87;
    sc_signal< sc_lv<32> > phi_mul_reg_98;
    sc_signal< sc_lv<32> > phi_mul2_reg_110;
    sc_signal< sc_lv<16> > out_h_reg_122;
    sc_signal< sc_lv<1> > exitcond3_fu_170_p2;
    sc_signal< sc_lv<16> > out_w_reg_133;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > tmp_6_fu_260_p1;
    sc_signal< sc_lv<64> > tmp_11_fu_274_p1;
    sc_signal< sc_lv<15> > div_fu_192_p4;
    sc_signal< sc_lv<32> > tmp_9_fu_202_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_206_p1;
    sc_signal< sc_lv<16> > tmp1_fu_222_p0;
    sc_signal< sc_lv<16> > tmp3_fu_226_p0;
    sc_signal< sc_lv<15> > div1_fu_241_p4;
    sc_signal< sc_lv<32> > tmp_8_fu_251_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_255_p2;
    sc_signal< sc_lv<32> > tmp_7_fu_265_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<32> ap_const_lv32_F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_SeparableConv2D_2_ar_address0();
    void thread_SeparableConv2D_2_ar_ce0();
    void thread_UpSampling2D_0_array_address0();
    void thread_UpSampling2D_0_array_ce0();
    void thread_UpSampling2D_0_array_d0();
    void thread_UpSampling2D_0_array_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_div1_fu_241_p4();
    void thread_div_fu_192_p4();
    void thread_exitcond2_fu_181_p2();
    void thread_exitcond3_fu_170_p2();
    void thread_exitcond_fu_230_p2();
    void thread_next_mul3_fu_160_p2();
    void thread_next_mul_fu_165_p2();
    void thread_out_d_1_fu_175_p2();
    void thread_out_h_1_fu_186_p2();
    void thread_out_w_1_fu_235_p2();
    void thread_tmp1_fu_222_p0();
    void thread_tmp1_fu_222_p2();
    void thread_tmp2_fu_216_p2();
    void thread_tmp3_fu_226_p0();
    void thread_tmp3_fu_226_p2();
    void thread_tmp_10_fu_269_p2();
    void thread_tmp_11_fu_274_p1();
    void thread_tmp_1_fu_144_p1();
    void thread_tmp_2_fu_148_p1();
    void thread_tmp_3_fu_152_p1();
    void thread_tmp_4_fu_156_p1();
    void thread_tmp_5_fu_255_p2();
    void thread_tmp_6_fu_260_p1();
    void thread_tmp_7_fu_265_p1();
    void thread_tmp_8_fu_251_p1();
    void thread_tmp_9_fu_202_p1();
    void thread_tmp_fu_210_p2();
    void thread_tmp_s_fu_206_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
