// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "up_sampling2d_fix16.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic up_sampling2d_fix16::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic up_sampling2d_fix16::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> up_sampling2d_fix16::ap_ST_fsm_state1 = "1";
const sc_lv<6> up_sampling2d_fix16::ap_ST_fsm_state2 = "10";
const sc_lv<6> up_sampling2d_fix16::ap_ST_fsm_state3 = "100";
const sc_lv<6> up_sampling2d_fix16::ap_ST_fsm_state4 = "1000";
const sc_lv<6> up_sampling2d_fix16::ap_ST_fsm_state5 = "10000";
const sc_lv<6> up_sampling2d_fix16::ap_ST_fsm_state6 = "100000";
const sc_lv<32> up_sampling2d_fix16::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> up_sampling2d_fix16::ap_const_lv32_1 = "1";
const sc_lv<32> up_sampling2d_fix16::ap_const_lv32_2 = "10";
const sc_lv<1> up_sampling2d_fix16::ap_const_lv1_0 = "0";
const sc_lv<32> up_sampling2d_fix16::ap_const_lv32_3 = "11";
const sc_lv<32> up_sampling2d_fix16::ap_const_lv32_4 = "100";
const sc_lv<5> up_sampling2d_fix16::ap_const_lv5_0 = "00000";
const sc_lv<1> up_sampling2d_fix16::ap_const_lv1_1 = "1";
const sc_lv<8> up_sampling2d_fix16::ap_const_lv8_0 = "00000000";
const sc_lv<9> up_sampling2d_fix16::ap_const_lv9_0 = "000000000";
const sc_lv<32> up_sampling2d_fix16::ap_const_lv32_5 = "101";
const sc_lv<5> up_sampling2d_fix16::ap_const_lv5_1 = "1";
const bool up_sampling2d_fix16::ap_const_boolean_1 = true;

up_sampling2d_fix16::up_sampling2d_fix16(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_187_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond3_fu_187_p2 );

    SC_METHOD(thread_div1_fu_276_p4);
    sensitive << ( out_w_reg_146 );

    SC_METHOD(thread_div_fu_213_p4);
    sensitive << ( out_h_reg_135 );

    SC_METHOD(thread_exitcond2_fu_202_p2);
    sensitive << ( output_height );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( out_h_cast_fu_198_p1 );

    SC_METHOD(thread_exitcond3_fu_187_p2);
    sensitive << ( output_depth );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( out_d_cast_fu_183_p1 );

    SC_METHOD(thread_exitcond_fu_265_p2);
    sensitive << ( output_width );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( out_w_cast_fu_261_p1 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_295_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_next_mul3_fu_173_p2);
    sensitive << ( tmp_3_cast_reg_333 );
    sensitive << ( phi_mul2_reg_123 );

    SC_METHOD(thread_next_mul_fu_178_p2);
    sensitive << ( tmp_1_cast_reg_328 );
    sensitive << ( phi_mul_reg_111 );

    SC_METHOD(thread_out_d_1_fu_192_p2);
    sensitive << ( out_d_reg_100 );

    SC_METHOD(thread_out_d_cast_fu_183_p1);
    sensitive << ( out_d_reg_100 );

    SC_METHOD(thread_out_h_1_fu_207_p2);
    sensitive << ( out_h_reg_135 );

    SC_METHOD(thread_out_h_cast_fu_198_p1);
    sensitive << ( out_h_reg_135 );

    SC_METHOD(thread_out_w_1_fu_270_p2);
    sensitive << ( out_w_reg_146 );

    SC_METHOD(thread_out_w_cast_fu_261_p1);
    sensitive << ( out_w_reg_146 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_5_fu_309_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( input_load_reg_402 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp1_cast_fu_241_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp1_cast_fu_241_p00 );

    SC_METHOD(thread_tmp1_cast_fu_241_p00);
    sensitive << ( tmp_fu_231_p2 );

    SC_METHOD(thread_tmp1_cast_fu_241_p1);
    sensitive << ( tmp_2_reg_343 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp1_cast_fu_241_p2);
    sensitive << ( tmp1_cast_fu_241_p0 );
    sensitive << ( tmp1_cast_fu_241_p1 );

    SC_METHOD(thread_tmp2_fu_246_p2);
    sensitive << ( phi_mul2_reg_123 );
    sensitive << ( tmp_cast_fu_227_p1 );

    SC_METHOD(thread_tmp3_fu_256_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp3_fu_256_p00 );

    SC_METHOD(thread_tmp3_fu_256_p00);
    sensitive << ( tmp2_fu_246_p2 );

    SC_METHOD(thread_tmp3_fu_256_p1);
    sensitive << ( tmp_4_cast_reg_338 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp3_fu_256_p2);
    sensitive << ( tmp3_fu_256_p0 );
    sensitive << ( tmp3_fu_256_p1 );

    SC_METHOD(thread_tmp_12_cast_fu_300_p1);
    sensitive << ( out_w_reg_146 );

    SC_METHOD(thread_tmp_1_cast_fu_157_p1);
    sensitive << ( input_height );

    SC_METHOD(thread_tmp_2_fu_169_p1);
    sensitive << ( input_width );

    SC_METHOD(thread_tmp_3_cast_fu_161_p1);
    sensitive << ( output_height );

    SC_METHOD(thread_tmp_3_fu_295_p1);
    sensitive << ( tmp_s_fu_290_p2 );

    SC_METHOD(thread_tmp_4_cast_fu_165_p1);
    sensitive << ( output_width );

    SC_METHOD(thread_tmp_4_fu_304_p2);
    sensitive << ( tmp3_reg_379 );
    sensitive << ( tmp_12_cast_fu_300_p1 );

    SC_METHOD(thread_tmp_5_fu_309_p1);
    sensitive << ( tmp_4_reg_397 );

    SC_METHOD(thread_tmp_8_cast_fu_286_p1);
    sensitive << ( div1_fu_276_p4 );

    SC_METHOD(thread_tmp_9_cast_fu_223_p1);
    sensitive << ( div_fu_213_p4 );

    SC_METHOD(thread_tmp_cast_fu_227_p1);
    sensitive << ( out_h_reg_135 );

    SC_METHOD(thread_tmp_fu_231_p2);
    sensitive << ( phi_mul_reg_111 );
    sensitive << ( tmp_9_cast_fu_223_p1 );

    SC_METHOD(thread_tmp_s_fu_290_p2);
    sensitive << ( tmp1_cast_reg_374 );
    sensitive << ( tmp_8_cast_fu_286_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_fu_202_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_265_p2 );
    sensitive << ( exitcond3_fu_187_p2 );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "up_sampling2d_fix16_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_height, "(port)input_height");
    sc_trace(mVcdFile, input_width, "(port)input_width");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
    sc_trace(mVcdFile, output_depth, "(port)output_depth");
    sc_trace(mVcdFile, output_height, "(port)output_height");
    sc_trace(mVcdFile, output_width, "(port)output_width");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_1_cast_fu_157_p1, "tmp_1_cast_fu_157_p1");
    sc_trace(mVcdFile, tmp_1_cast_reg_328, "tmp_1_cast_reg_328");
    sc_trace(mVcdFile, tmp_3_cast_fu_161_p1, "tmp_3_cast_fu_161_p1");
    sc_trace(mVcdFile, tmp_3_cast_reg_333, "tmp_3_cast_reg_333");
    sc_trace(mVcdFile, tmp_4_cast_fu_165_p1, "tmp_4_cast_fu_165_p1");
    sc_trace(mVcdFile, tmp_4_cast_reg_338, "tmp_4_cast_reg_338");
    sc_trace(mVcdFile, tmp_2_fu_169_p1, "tmp_2_fu_169_p1");
    sc_trace(mVcdFile, tmp_2_reg_343, "tmp_2_reg_343");
    sc_trace(mVcdFile, next_mul3_fu_173_p2, "next_mul3_fu_173_p2");
    sc_trace(mVcdFile, next_mul3_reg_348, "next_mul3_reg_348");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, next_mul_fu_178_p2, "next_mul_fu_178_p2");
    sc_trace(mVcdFile, next_mul_reg_353, "next_mul_reg_353");
    sc_trace(mVcdFile, out_d_1_fu_192_p2, "out_d_1_fu_192_p2");
    sc_trace(mVcdFile, out_d_1_reg_361, "out_d_1_reg_361");
    sc_trace(mVcdFile, out_h_1_fu_207_p2, "out_h_1_fu_207_p2");
    sc_trace(mVcdFile, out_h_1_reg_369, "out_h_1_reg_369");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp1_cast_fu_241_p2, "tmp1_cast_fu_241_p2");
    sc_trace(mVcdFile, tmp1_cast_reg_374, "tmp1_cast_reg_374");
    sc_trace(mVcdFile, exitcond2_fu_202_p2, "exitcond2_fu_202_p2");
    sc_trace(mVcdFile, tmp3_fu_256_p2, "tmp3_fu_256_p2");
    sc_trace(mVcdFile, tmp3_reg_379, "tmp3_reg_379");
    sc_trace(mVcdFile, out_w_1_fu_270_p2, "out_w_1_fu_270_p2");
    sc_trace(mVcdFile, out_w_1_reg_387, "out_w_1_reg_387");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, exitcond_fu_265_p2, "exitcond_fu_265_p2");
    sc_trace(mVcdFile, tmp_4_fu_304_p2, "tmp_4_fu_304_p2");
    sc_trace(mVcdFile, tmp_4_reg_397, "tmp_4_reg_397");
    sc_trace(mVcdFile, input_load_reg_402, "input_load_reg_402");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, out_d_reg_100, "out_d_reg_100");
    sc_trace(mVcdFile, phi_mul_reg_111, "phi_mul_reg_111");
    sc_trace(mVcdFile, phi_mul2_reg_123, "phi_mul2_reg_123");
    sc_trace(mVcdFile, out_h_reg_135, "out_h_reg_135");
    sc_trace(mVcdFile, exitcond3_fu_187_p2, "exitcond3_fu_187_p2");
    sc_trace(mVcdFile, out_w_reg_146, "out_w_reg_146");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_3_fu_295_p1, "tmp_3_fu_295_p1");
    sc_trace(mVcdFile, tmp_5_fu_309_p1, "tmp_5_fu_309_p1");
    sc_trace(mVcdFile, out_d_cast_fu_183_p1, "out_d_cast_fu_183_p1");
    sc_trace(mVcdFile, out_h_cast_fu_198_p1, "out_h_cast_fu_198_p1");
    sc_trace(mVcdFile, div_fu_213_p4, "div_fu_213_p4");
    sc_trace(mVcdFile, tmp_9_cast_fu_223_p1, "tmp_9_cast_fu_223_p1");
    sc_trace(mVcdFile, tmp_fu_231_p2, "tmp_fu_231_p2");
    sc_trace(mVcdFile, tmp1_cast_fu_241_p0, "tmp1_cast_fu_241_p0");
    sc_trace(mVcdFile, tmp1_cast_fu_241_p1, "tmp1_cast_fu_241_p1");
    sc_trace(mVcdFile, tmp_cast_fu_227_p1, "tmp_cast_fu_227_p1");
    sc_trace(mVcdFile, tmp2_fu_246_p2, "tmp2_fu_246_p2");
    sc_trace(mVcdFile, tmp3_fu_256_p0, "tmp3_fu_256_p0");
    sc_trace(mVcdFile, tmp3_fu_256_p1, "tmp3_fu_256_p1");
    sc_trace(mVcdFile, out_w_cast_fu_261_p1, "out_w_cast_fu_261_p1");
    sc_trace(mVcdFile, div1_fu_276_p4, "div1_fu_276_p4");
    sc_trace(mVcdFile, tmp_8_cast_fu_286_p1, "tmp_8_cast_fu_286_p1");
    sc_trace(mVcdFile, tmp_s_fu_290_p2, "tmp_s_fu_290_p2");
    sc_trace(mVcdFile, tmp_12_cast_fu_300_p1, "tmp_12_cast_fu_300_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, tmp1_cast_fu_241_p00, "tmp1_cast_fu_241_p00");
    sc_trace(mVcdFile, tmp3_fu_256_p00, "tmp3_fu_256_p00");
#endif

    }
}

up_sampling2d_fix16::~up_sampling2d_fix16() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void up_sampling2d_fix16::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_202_p2.read(), ap_const_lv1_1))) {
        out_d_reg_100 = out_d_1_reg_361.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        out_d_reg_100 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_fu_187_p2.read()))) {
        out_h_reg_135 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_265_p2.read(), ap_const_lv1_1))) {
        out_h_reg_135 = out_h_1_reg_369.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_202_p2.read(), ap_const_lv1_0))) {
        out_w_reg_146 = ap_const_lv5_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_w_reg_146 = out_w_1_reg_387.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_202_p2.read(), ap_const_lv1_1))) {
        phi_mul2_reg_123 = next_mul3_reg_348.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul2_reg_123 = ap_const_lv9_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_202_p2.read(), ap_const_lv1_1))) {
        phi_mul_reg_111 = next_mul_reg_353.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul_reg_111 = ap_const_lv8_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        input_load_reg_402 = input_r_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        next_mul3_reg_348 = next_mul3_fu_173_p2.read();
        next_mul_reg_353 = next_mul_fu_178_p2.read();
        out_d_1_reg_361 = out_d_1_fu_192_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        out_h_1_reg_369 = out_h_1_fu_207_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        out_w_1_reg_387 = out_w_1_fu_270_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_202_p2.read(), ap_const_lv1_0))) {
        tmp1_cast_reg_374 = tmp1_cast_fu_241_p2.read();
        tmp3_reg_379 = tmp3_fu_256_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_1_cast_reg_328 = tmp_1_cast_fu_157_p1.read();
        tmp_2_reg_343 = tmp_2_fu_169_p1.read();
        tmp_3_cast_reg_333 = tmp_3_cast_fu_161_p1.read();
        tmp_4_cast_reg_338 = tmp_4_cast_fu_165_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_265_p2.read()))) {
        tmp_4_reg_397 = tmp_4_fu_304_p2.read();
    }
}

void up_sampling2d_fix16::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void up_sampling2d_fix16::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void up_sampling2d_fix16::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void up_sampling2d_fix16::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void up_sampling2d_fix16::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void up_sampling2d_fix16::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void up_sampling2d_fix16::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_187_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void up_sampling2d_fix16::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void up_sampling2d_fix16::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_187_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void up_sampling2d_fix16::thread_div1_fu_276_p4() {
    div1_fu_276_p4 = out_w_reg_146.read().range(4, 1);
}

void up_sampling2d_fix16::thread_div_fu_213_p4() {
    div_fu_213_p4 = out_h_reg_135.read().range(4, 1);
}

void up_sampling2d_fix16::thread_exitcond2_fu_202_p2() {
    exitcond2_fu_202_p2 = (!out_h_cast_fu_198_p1.read().is_01() || !output_height.read().is_01())? sc_lv<1>(): sc_lv<1>(out_h_cast_fu_198_p1.read() == output_height.read());
}

void up_sampling2d_fix16::thread_exitcond3_fu_187_p2() {
    exitcond3_fu_187_p2 = (!out_d_cast_fu_183_p1.read().is_01() || !output_depth.read().is_01())? sc_lv<1>(): sc_lv<1>(out_d_cast_fu_183_p1.read() == output_depth.read());
}

void up_sampling2d_fix16::thread_exitcond_fu_265_p2() {
    exitcond_fu_265_p2 = (!out_w_cast_fu_261_p1.read().is_01() || !output_width.read().is_01())? sc_lv<1>(): sc_lv<1>(out_w_cast_fu_261_p1.read() == output_width.read());
}

void up_sampling2d_fix16::thread_input_r_address0() {
    input_r_address0 =  (sc_lv<14>) (tmp_3_fu_295_p1.read());
}

void up_sampling2d_fix16::thread_input_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void up_sampling2d_fix16::thread_next_mul3_fu_173_p2() {
    next_mul3_fu_173_p2 = (!phi_mul2_reg_123.read().is_01() || !tmp_3_cast_reg_333.read().is_01())? sc_lv<9>(): (sc_biguint<9>(phi_mul2_reg_123.read()) + sc_biguint<9>(tmp_3_cast_reg_333.read()));
}

void up_sampling2d_fix16::thread_next_mul_fu_178_p2() {
    next_mul_fu_178_p2 = (!phi_mul_reg_111.read().is_01() || !tmp_1_cast_reg_328.read().is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul_reg_111.read()) + sc_biguint<8>(tmp_1_cast_reg_328.read()));
}

void up_sampling2d_fix16::thread_out_d_1_fu_192_p2() {
    out_d_1_fu_192_p2 = (!out_d_reg_100.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(out_d_reg_100.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void up_sampling2d_fix16::thread_out_d_cast_fu_183_p1() {
    out_d_cast_fu_183_p1 = esl_zext<6,5>(out_d_reg_100.read());
}

void up_sampling2d_fix16::thread_out_h_1_fu_207_p2() {
    out_h_1_fu_207_p2 = (!out_h_reg_135.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(out_h_reg_135.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void up_sampling2d_fix16::thread_out_h_cast_fu_198_p1() {
    out_h_cast_fu_198_p1 = esl_zext<6,5>(out_h_reg_135.read());
}

void up_sampling2d_fix16::thread_out_w_1_fu_270_p2() {
    out_w_1_fu_270_p2 = (!out_w_reg_146.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(out_w_reg_146.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void up_sampling2d_fix16::thread_out_w_cast_fu_261_p1() {
    out_w_cast_fu_261_p1 = esl_zext<6,5>(out_w_reg_146.read());
}

void up_sampling2d_fix16::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<14>) (tmp_5_fu_309_p1.read());
}

void up_sampling2d_fix16::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void up_sampling2d_fix16::thread_output_r_d0() {
    output_r_d0 = input_load_reg_402.read();
}

void up_sampling2d_fix16::thread_output_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void up_sampling2d_fix16::thread_tmp1_cast_fu_241_p0() {
    tmp1_cast_fu_241_p0 =  (sc_lv<8>) (tmp1_cast_fu_241_p00.read());
}

void up_sampling2d_fix16::thread_tmp1_cast_fu_241_p00() {
    tmp1_cast_fu_241_p00 = esl_zext<12,8>(tmp_fu_231_p2.read());
}

void up_sampling2d_fix16::thread_tmp1_cast_fu_241_p1() {
    tmp1_cast_fu_241_p1 =  (sc_lv<5>) (tmp_2_reg_343.read());
}

void up_sampling2d_fix16::thread_tmp1_cast_fu_241_p2() {
    tmp1_cast_fu_241_p2 = (!tmp1_cast_fu_241_p0.read().is_01() || !tmp1_cast_fu_241_p1.read().is_01())? sc_lv<12>(): sc_biguint<8>(tmp1_cast_fu_241_p0.read()) * sc_biguint<5>(tmp1_cast_fu_241_p1.read());
}

void up_sampling2d_fix16::thread_tmp2_fu_246_p2() {
    tmp2_fu_246_p2 = (!phi_mul2_reg_123.read().is_01() || !tmp_cast_fu_227_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(phi_mul2_reg_123.read()) + sc_biguint<9>(tmp_cast_fu_227_p1.read()));
}

void up_sampling2d_fix16::thread_tmp3_fu_256_p0() {
    tmp3_fu_256_p0 =  (sc_lv<9>) (tmp3_fu_256_p00.read());
}

void up_sampling2d_fix16::thread_tmp3_fu_256_p00() {
    tmp3_fu_256_p00 = esl_zext<14,9>(tmp2_fu_246_p2.read());
}

void up_sampling2d_fix16::thread_tmp3_fu_256_p1() {
    tmp3_fu_256_p1 =  (sc_lv<6>) (tmp_4_cast_reg_338.read());
}

void up_sampling2d_fix16::thread_tmp3_fu_256_p2() {
    tmp3_fu_256_p2 = (!tmp3_fu_256_p0.read().is_01() || !tmp3_fu_256_p1.read().is_01())? sc_lv<14>(): sc_biguint<9>(tmp3_fu_256_p0.read()) * sc_biguint<6>(tmp3_fu_256_p1.read());
}

void up_sampling2d_fix16::thread_tmp_12_cast_fu_300_p1() {
    tmp_12_cast_fu_300_p1 = esl_zext<14,5>(out_w_reg_146.read());
}

void up_sampling2d_fix16::thread_tmp_1_cast_fu_157_p1() {
    tmp_1_cast_fu_157_p1 = esl_zext<8,5>(input_height.read());
}

void up_sampling2d_fix16::thread_tmp_2_fu_169_p1() {
    tmp_2_fu_169_p1 = esl_zext<12,5>(input_width.read());
}

void up_sampling2d_fix16::thread_tmp_3_cast_fu_161_p1() {
    tmp_3_cast_fu_161_p1 = esl_zext<9,6>(output_height.read());
}

void up_sampling2d_fix16::thread_tmp_3_fu_295_p1() {
    tmp_3_fu_295_p1 = esl_zext<64,12>(tmp_s_fu_290_p2.read());
}

void up_sampling2d_fix16::thread_tmp_4_cast_fu_165_p1() {
    tmp_4_cast_fu_165_p1 = esl_zext<14,6>(output_width.read());
}

void up_sampling2d_fix16::thread_tmp_4_fu_304_p2() {
    tmp_4_fu_304_p2 = (!tmp_12_cast_fu_300_p1.read().is_01() || !tmp3_reg_379.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_12_cast_fu_300_p1.read()) + sc_biguint<14>(tmp3_reg_379.read()));
}

void up_sampling2d_fix16::thread_tmp_5_fu_309_p1() {
    tmp_5_fu_309_p1 = esl_zext<64,14>(tmp_4_reg_397.read());
}

void up_sampling2d_fix16::thread_tmp_8_cast_fu_286_p1() {
    tmp_8_cast_fu_286_p1 = esl_zext<12,4>(div1_fu_276_p4.read());
}

void up_sampling2d_fix16::thread_tmp_9_cast_fu_223_p1() {
    tmp_9_cast_fu_223_p1 = esl_zext<8,4>(div_fu_213_p4.read());
}

void up_sampling2d_fix16::thread_tmp_cast_fu_227_p1() {
    tmp_cast_fu_227_p1 = esl_zext<9,5>(out_h_reg_135.read());
}

void up_sampling2d_fix16::thread_tmp_fu_231_p2() {
    tmp_fu_231_p2 = (!phi_mul_reg_111.read().is_01() || !tmp_9_cast_fu_223_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul_reg_111.read()) + sc_biguint<8>(tmp_9_cast_fu_223_p1.read()));
}

void up_sampling2d_fix16::thread_tmp_s_fu_290_p2() {
    tmp_s_fu_290_p2 = (!tmp_8_cast_fu_286_p1.read().is_01() || !tmp1_cast_reg_374.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_8_cast_fu_286_p1.read()) + sc_biguint<12>(tmp1_cast_reg_374.read()));
}

void up_sampling2d_fix16::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_187_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond2_fu_202_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_265_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

