// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _pointwise_conv2d_fix_HH_
#define _pointwise_conv2d_fix_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "network_mul_mul_12s_16s_28_1_1.h"

namespace ap_rtl {

struct pointwise_conv2d_fix : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<14> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<16> > input_r_q0;
    sc_out< sc_lv<14> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<16> > output_r_d0;


    // Module declarations
    pointwise_conv2d_fix(sc_module_name name);
    SC_HAS_PROCESS(pointwise_conv2d_fix);

    ~pointwise_conv2d_fix();

    sc_trace_file* mVcdFile;

    network_mul_mul_12s_16s_28_1_1<1,1,12,16,28>* network_mul_mul_12s_16s_28_1_1_U8;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<15> > phi_mul_cast_fu_110_p1;
    sc_signal< sc_lv<15> > phi_mul_cast_reg_264;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<14> > next_mul_fu_114_p2;
    sc_signal< sc_lv<14> > next_mul_reg_269;
    sc_signal< sc_lv<5> > out_d_1_fu_126_p2;
    sc_signal< sc_lv<5> > out_d_1_reg_277;
    sc_signal< sc_lv<5> > out_h_1_fu_138_p2;
    sc_signal< sc_lv<5> > out_h_1_reg_285;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<11> > tmp_4_fu_168_p2;
    sc_signal< sc_lv<11> > tmp_4_reg_290;
    sc_signal< sc_lv<1> > exitcond2_fu_132_p2;
    sc_signal< sc_lv<5> > out_w_1_fu_180_p2;
    sc_signal< sc_lv<5> > out_w_1_reg_298;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<15> > tmp_8_fu_199_p2;
    sc_signal< sc_lv<15> > tmp_8_reg_303;
    sc_signal< sc_lv<1> > exitcond1_fu_174_p2;
    sc_signal< sc_lv<16> > input_load_reg_313;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<14> > p_tmp_s_fu_232_p3;
    sc_signal< sc_lv<14> > p_tmp_s_reg_318;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > out_d_reg_66;
    sc_signal< sc_lv<14> > phi_mul_reg_77;
    sc_signal< sc_lv<5> > out_h_reg_88;
    sc_signal< sc_lv<1> > exitcond3_fu_120_p2;
    sc_signal< sc_lv<5> > out_w_reg_99;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > tmp_5_fu_208_p1;
    sc_signal< sc_lv<64> > tmp_9_fu_243_p1;
    sc_signal< sc_lv<10> > p_shl_fu_144_p3;
    sc_signal< sc_lv<7> > p_shl5_fu_156_p3;
    sc_signal< sc_lv<11> > p_shl_cast_fu_152_p1;
    sc_signal< sc_lv<11> > p_shl5_cast_fu_164_p1;
    sc_signal< sc_lv<11> > tmp_6_cast_fu_186_p1;
    sc_signal< sc_lv<11> > tmp1_fu_190_p2;
    sc_signal< sc_lv<15> > tmp1_cast_fu_195_p1;
    sc_signal< sc_lv<32> > tmp_2_cast_fu_204_p1;
    sc_signal< sc_lv<28> > tmp_3_fu_256_p2;
    sc_signal< sc_lv<1> > tmp_fu_225_p3;
    sc_signal< sc_lv<14> > tmp_6_fu_216_p4;
    sc_signal< sc_lv<32> > tmp_8_cast_fu_240_p1;
    sc_signal< sc_lv<15> > p_tmp_cast1_fu_248_p1;
    sc_signal< sc_lv<12> > tmp_3_fu_256_p0;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<14> ap_const_lv14_310;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<5> ap_const_lv5_1C;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_1B;
    static const sc_lv<28> ap_const_lv28_FFFF916;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_174_p2();
    void thread_exitcond2_fu_132_p2();
    void thread_exitcond3_fu_120_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_next_mul_fu_114_p2();
    void thread_out_d_1_fu_126_p2();
    void thread_out_h_1_fu_138_p2();
    void thread_out_w_1_fu_180_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_p_shl5_cast_fu_164_p1();
    void thread_p_shl5_fu_156_p3();
    void thread_p_shl_cast_fu_152_p1();
    void thread_p_shl_fu_144_p3();
    void thread_p_tmp_cast1_fu_248_p1();
    void thread_p_tmp_s_fu_232_p3();
    void thread_phi_mul_cast_fu_110_p1();
    void thread_tmp1_cast_fu_195_p1();
    void thread_tmp1_fu_190_p2();
    void thread_tmp_2_cast_fu_204_p1();
    void thread_tmp_3_fu_256_p0();
    void thread_tmp_4_fu_168_p2();
    void thread_tmp_5_fu_208_p1();
    void thread_tmp_6_cast_fu_186_p1();
    void thread_tmp_6_fu_216_p4();
    void thread_tmp_8_cast_fu_240_p1();
    void thread_tmp_8_fu_199_p2();
    void thread_tmp_9_fu_243_p1();
    void thread_tmp_fu_225_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
