// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [6:0] input_height_cast3_fu_328_p1;
reg  signed [6:0] input_height_cast3_reg_693;
wire   [4:0] tmp_28_fu_332_p1;
reg   [4:0] tmp_28_reg_698;
wire   [4:0] tmp_fu_336_p2;
reg   [4:0] tmp_reg_704;
wire   [11:0] tmp_30_fu_350_p2;
reg   [11:0] tmp_30_reg_709;
wire   [9:0] tmp_29_fu_356_p1;
reg   [9:0] tmp_29_reg_714;
wire   [4:0] tmp_31_fu_360_p2;
reg   [4:0] tmp_31_reg_720;
wire   [4:0] tmp_37_fu_366_p1;
reg   [4:0] tmp_37_reg_730;
wire   [13:0] tmp_cast_fu_373_p1;
reg   [13:0] tmp_cast_reg_735;
wire    ap_CS_fsm_state2;
wire   [13:0] input_width_cast2_fu_376_p1;
reg   [13:0] input_width_cast2_reg_742;
wire   [13:0] tmp_s_fu_383_p2;
reg   [13:0] tmp_s_reg_747;
wire   [15:0] tmp_39_cast1_fu_389_p1;
reg   [15:0] tmp_39_cast1_reg_752;
wire   [15:0] tmp_40_cast9_fu_392_p1;
reg   [15:0] tmp_40_cast9_reg_757;
wire   [13:0] tmp_40_cast_fu_401_p1;
wire   [15:0] tmp_41_cast6_fu_409_p1;
reg   [15:0] tmp_41_cast6_reg_767;
wire   [13:0] tmp_43_cast_fu_428_p1;
reg   [13:0] tmp_43_cast_reg_772;
wire   [13:0] tmp_44_cast_fu_437_p1;
wire   [13:0] tmp_49_cast_fu_456_p1;
wire   [4:0] tmp_8_fu_469_p2;
wire   [4:0] tmp_9_fu_475_p2;
reg   [4:0] tmp_9_reg_793;
wire   [5:0] tmp_38_fu_481_p1;
reg   [5:0] tmp_38_reg_799;
wire   [13:0] p_cast_fu_496_p1;
reg   [13:0] p_cast_reg_804;
wire   [4:0] depth_1_fu_509_p2;
reg   [4:0] depth_1_reg_812;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_41_fu_530_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond2_fu_519_p2;
wire   [13:0] i_count_3_fu_536_p2;
reg   [13:0] i_count_3_reg_825;
wire   [15:0] tmp_39_fu_546_p2;
reg   [15:0] tmp_39_reg_830;
wire   [4:0] height_1_fu_560_p2;
reg   [4:0] height_1_reg_839;
wire    ap_CS_fsm_state5;
wire   [13:0] tmp_43_fu_566_p2;
reg   [13:0] tmp_43_reg_844;
wire   [0:0] exitcond7_fu_555_p2;
wire   [15:0] tmp_42_fu_571_p2;
reg   [15:0] tmp_42_reg_849;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_575_p2;
wire   [13:0] tmp_48_fu_586_p2;
reg   [13:0] tmp_48_reg_862;
wire   [13:0] tmp_45_fu_592_p2;
reg   [13:0] tmp_45_reg_867;
wire   [13:0] o_count_8_fu_602_p2;
wire    ap_CS_fsm_state7;
wire   [13:0] o_count_9_fu_619_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond5_fu_608_p2;
wire   [13:0] indvars_iv_next5_fu_625_p2;
wire   [13:0] indvars_iv_next4_fu_630_p2;
wire   [15:0] o_count_7_fu_650_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond8_fu_639_p2;
wire   [13:0] indvars_iv_next_fu_656_p2;
wire   [13:0] indvars_iv_next1_fu_661_p2;
wire   [13:0] indvars_iv_next2_fu_666_p2;
wire   [4:0] indvars_iv_next6_fu_671_p2;
wire   [4:0] indvars_iv_next3_fu_676_p2;
reg   [4:0] indvars_iv9_reg_138;
reg   [4:0] indvars_iv4_reg_148;
reg   [13:0] indvars_iv1_reg_158;
reg   [13:0] indvars_iv_reg_168;
reg   [13:0] indvars_iv2_reg_178;
reg   [15:0] o_count_reg_188;
reg   [13:0] i_count_reg_200;
reg   [4:0] depth_reg_212;
reg   [15:0] o_count_1_reg_223;
wire   [0:0] exitcond1_fu_504_p2;
reg   [13:0] indvars_iv3_reg_233;
reg   [13:0] o_count_6_reg_244;
reg   [13:0] o_count_2_reg_255;
reg   [13:0] i_count_1_reg_266;
reg   [4:0] height_reg_277;
reg   [13:0] o_count_3_reg_288;
reg   [13:0] i_count_2_reg_299;
reg   [13:0] o_count_4_reg_309;
reg   [15:0] o_count_5_reg_319;
wire   [63:0] tmp_40_fu_525_p1;
wire   [63:0] tmp_46_fu_581_p1;
wire   [63:0] tmp_47_fu_597_p1;
wire   [63:0] tmp_49_fu_614_p1;
wire   [63:0] tmp_44_fu_645_p1;
wire  signed [5:0] input_height_cast3_fu_328_p0;
wire  signed [5:0] tmp_28_fu_332_p0;
wire   [4:0] tmp_30_fu_350_p0;
wire   [6:0] tmp_30_fu_350_p1;
wire  signed [5:0] input_width_cast_fu_370_p0;
wire  signed [6:0] input_width_cast_fu_370_p1;
wire   [6:0] tmp_s_fu_383_p0;
wire   [6:0] tmp_s_fu_383_p1;
wire   [4:0] tmp_32_fu_404_p2;
wire   [9:0] tmp_40_cast7_fu_398_p1;
wire   [9:0] tmp1_fu_417_p2;
wire   [9:0] tmp_41_cast_fu_413_p1;
wire   [9:0] tmp_33_fu_422_p2;
wire   [5:0] tmp_40_cast8_fu_395_p1;
wire  signed [5:0] tmp_34_fu_432_p1;
wire   [5:0] tmp_34_fu_432_p2;
wire  signed [5:0] tmp_35_fu_441_p0;
wire   [5:0] tmp_35_fu_441_p2;
wire   [5:0] tmp_36_fu_450_p2;
wire   [4:0] tmp_6_fu_460_p2;
wire   [4:0] tmp_7_fu_464_p2;
wire   [9:0] tmp_48_cast_fu_446_p1;
wire   [9:0] tmp3_fu_485_p2;
wire   [9:0] tmp_3_fu_490_p2;
wire   [5:0] depth_cast_fu_500_p1;
wire   [4:0] tmp_50_fu_515_p1;
wire   [15:0] tmp2_fu_541_p2;
wire   [5:0] height_cast_fu_551_p1;
wire  signed [5:0] exitcond7_fu_555_p1;
wire   [4:0] tmp_51_fu_635_p1;
reg   [8:0] ap_NS_fsm;
wire   [11:0] tmp_30_fu_350_p00;
wire   [11:0] tmp_30_fu_350_p10;
wire   [13:0] tmp_s_fu_383_p00;
wire   [13:0] tmp_s_fu_383_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_reg_212 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
        depth_reg_212 <= depth_1_reg_812;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd1))) begin
        height_reg_277 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_608_p2 == 1'd1))) begin
        height_reg_277 <= height_1_reg_839;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd1))) begin
        i_count_1_reg_266 <= i_count_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_608_p2 == 1'd1))) begin
        i_count_1_reg_266 <= tmp_43_reg_844;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_count_2_reg_299 <= tmp_48_reg_862;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_555_p2 == 1'd0))) begin
        i_count_2_reg_299 <= i_count_1_reg_266;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_reg_200 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
        i_count_reg_200 <= i_count_3_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv1_reg_158 <= tmp_49_cast_fu_456_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
        indvars_iv1_reg_158 <= indvars_iv_next2_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv2_reg_178 <= tmp_40_cast_fu_401_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
        indvars_iv2_reg_178 <= indvars_iv_next_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd1))) begin
        indvars_iv3_reg_233 <= indvars_iv1_reg_158;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_608_p2 == 1'd1))) begin
        indvars_iv3_reg_233 <= indvars_iv_next4_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv4_reg_148 <= tmp_8_fu_469_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
        indvars_iv4_reg_148 <= indvars_iv_next6_fu_671_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv9_reg_138 <= tmp_31_reg_720;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
        indvars_iv9_reg_138 <= indvars_iv_next3_fu_676_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_168 <= tmp_44_cast_fu_437_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
        indvars_iv_reg_168 <= indvars_iv_next1_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_504_p2 == 1'd0))) begin
        o_count_1_reg_223 <= o_count_reg_188;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd0))) begin
        o_count_1_reg_223 <= tmp_41_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd1))) begin
        o_count_2_reg_255 <= indvars_iv2_reg_178;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_608_p2 == 1'd1))) begin
        o_count_2_reg_255 <= tmp_45_reg_867;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o_count_3_reg_288 <= o_count_8_fu_602_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_555_p2 == 1'd0))) begin
        o_count_3_reg_288 <= o_count_2_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_608_p2 == 1'd0))) begin
        o_count_4_reg_309 <= o_count_9_fu_619_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_575_p2 == 1'd1))) begin
        o_count_4_reg_309 <= o_count_6_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd0))) begin
        o_count_5_reg_319 <= o_count_7_fu_650_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_555_p2 == 1'd1))) begin
        o_count_5_reg_319 <= tmp_39_reg_830;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd1))) begin
        o_count_6_reg_244 <= indvars_iv_reg_168;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_608_p2 == 1'd1))) begin
        o_count_6_reg_244 <= indvars_iv_next5_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_count_reg_188 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
        o_count_reg_188 <= tmp_42_reg_849;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_1_reg_812 <= depth_1_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        height_1_reg_839 <= height_1_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd1))) begin
        i_count_3_reg_825 <= i_count_3_fu_536_p2;
        tmp_39_reg_830 <= tmp_39_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_height_cast3_reg_693 <= input_height_cast3_fu_328_p1;
        tmp_28_reg_698 <= tmp_28_fu_332_p1;
        tmp_29_reg_714 <= tmp_29_fu_356_p1;
        tmp_30_reg_709 <= tmp_30_fu_350_p2;
        tmp_31_reg_720 <= tmp_31_fu_360_p2;
        tmp_37_reg_730 <= tmp_37_fu_366_p1;
        tmp_reg_704 <= tmp_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_width_cast2_reg_742[6 : 0] <= input_width_cast2_fu_376_p1[6 : 0];
        p_cast_reg_804[9 : 0] <= p_cast_fu_496_p1[9 : 0];
        tmp_38_reg_799 <= tmp_38_fu_481_p1;
        tmp_39_cast1_reg_752[11 : 0] <= tmp_39_cast1_fu_389_p1[11 : 0];
        tmp_40_cast9_reg_757[4 : 0] <= tmp_40_cast9_fu_392_p1[4 : 0];
        tmp_41_cast6_reg_767[4 : 0] <= tmp_41_cast6_fu_409_p1[4 : 0];
        tmp_43_cast_reg_772[9 : 0] <= tmp_43_cast_fu_428_p1[9 : 0];
        tmp_9_reg_793 <= tmp_9_fu_475_p2;
        tmp_cast_reg_735[4 : 0] <= tmp_cast_fu_373_p1[4 : 0];
        tmp_s_reg_747 <= tmp_s_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_555_p2 == 1'd1))) begin
        tmp_42_reg_849 <= tmp_42_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_555_p2 == 1'd0))) begin
        tmp_43_reg_844 <= tmp_43_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_575_p2 == 1'd1))) begin
        tmp_45_reg_867 <= tmp_45_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_575_p2 == 1'd0))) begin
        tmp_48_reg_862 <= tmp_48_fu_586_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_504_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_504_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_44_fu_645_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_49_fu_614_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_47_fu_597_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = tmp_40_fu_525_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_608_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_504_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_519_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_555_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_575_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_608_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_639_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_1_fu_509_p2 = (depth_reg_212 + 5'd1);

assign depth_cast_fu_500_p1 = depth_reg_212;

assign exitcond1_fu_504_p2 = ((depth_cast_fu_500_p1 == tmp_38_reg_799) ? 1'b1 : 1'b0);

assign exitcond2_fu_519_p2 = ((tmp_50_fu_515_p1 == indvars_iv9_reg_138) ? 1'b1 : 1'b0);

assign exitcond5_fu_608_p2 = ((o_count_4_reg_309 == indvars_iv3_reg_233) ? 1'b1 : 1'b0);

assign exitcond7_fu_555_p1 = input_height;

assign exitcond7_fu_555_p2 = ((height_cast_fu_551_p1 == exitcond7_fu_555_p1) ? 1'b1 : 1'b0);

assign exitcond8_fu_639_p2 = ((tmp_51_fu_635_p1 == indvars_iv4_reg_148) ? 1'b1 : 1'b0);

assign exitcond_fu_575_p2 = ((o_count_3_reg_288 == o_count_6_reg_244) ? 1'b1 : 1'b0);

assign height_1_fu_560_p2 = (height_reg_277 + 5'd1);

assign height_cast_fu_551_p1 = height_reg_277;

assign i_count_3_fu_536_p2 = (tmp_s_reg_747 + i_count_reg_200);

assign indvars_iv_next1_fu_661_p2 = (tmp_43_cast_reg_772 + indvars_iv_reg_168);

assign indvars_iv_next2_fu_666_p2 = (indvars_iv1_reg_158 + p_cast_reg_804);

assign indvars_iv_next3_fu_676_p2 = (tmp_9_reg_793 + indvars_iv9_reg_138);

assign indvars_iv_next4_fu_630_p2 = (tmp_cast_reg_735 + indvars_iv3_reg_233);

assign indvars_iv_next5_fu_625_p2 = (tmp_cast_reg_735 + o_count_6_reg_244);

assign indvars_iv_next6_fu_671_p2 = (tmp_9_reg_793 + indvars_iv4_reg_148);

assign indvars_iv_next_fu_656_p2 = (tmp_43_cast_reg_772 + indvars_iv2_reg_178);

assign input_height_cast3_fu_328_p0 = input_height;

assign input_height_cast3_fu_328_p1 = input_height_cast3_fu_328_p0;

assign input_r_address0 = tmp_46_fu_581_p1;

assign input_width_cast2_fu_376_p1 = $unsigned(input_width_cast_fu_370_p1);

assign input_width_cast_fu_370_p0 = input_width;

assign input_width_cast_fu_370_p1 = input_width_cast_fu_370_p0;

assign o_count_7_fu_650_p2 = (o_count_5_reg_319 + 16'd1);

assign o_count_8_fu_602_p2 = (o_count_3_reg_288 + 14'd1);

assign o_count_9_fu_619_p2 = (o_count_4_reg_309 + 14'd1);

assign p_cast_fu_496_p1 = tmp_3_fu_490_p2;

assign tmp1_fu_417_p2 = (tmp_40_cast7_fu_398_p1 + tmp_29_reg_714);

assign tmp2_fu_541_p2 = (tmp_40_cast9_reg_757 + o_count_reg_188);

assign tmp3_fu_485_p2 = (10'd4 + tmp_29_reg_714);

assign tmp_28_fu_332_p0 = input_width;

assign tmp_28_fu_332_p1 = tmp_28_fu_332_p0[4:0];

assign tmp_29_fu_356_p1 = tmp_30_fu_350_p2[9:0];

assign tmp_30_fu_350_p0 = tmp_30_fu_350_p00;

assign tmp_30_fu_350_p00 = tmp_fu_336_p2;

assign tmp_30_fu_350_p1 = tmp_30_fu_350_p10;

assign tmp_30_fu_350_p10 = $unsigned(input_height_cast3_fu_328_p1);

assign tmp_30_fu_350_p2 = (tmp_30_fu_350_p0 * tmp_30_fu_350_p1);

assign tmp_31_fu_360_p2 = (5'd3 + tmp_28_fu_332_p1);

assign tmp_32_fu_404_p2 = (5'd1 + tmp_28_reg_698);

assign tmp_33_fu_422_p2 = (tmp1_fu_417_p2 + tmp_41_cast_fu_413_p1);

assign tmp_34_fu_432_p1 = input_width;

assign tmp_34_fu_432_p2 = ($signed(tmp_40_cast8_fu_395_p1) + $signed(tmp_34_fu_432_p1));

assign tmp_35_fu_441_p0 = input_width;

assign tmp_35_fu_441_p2 = tmp_35_fu_441_p0 << 6'd1;

assign tmp_36_fu_450_p2 = (6'd5 + tmp_35_fu_441_p2);

assign tmp_37_fu_366_p1 = tmp_30_fu_350_p2[4:0];

assign tmp_38_fu_481_p1 = input_depth[5:0];

assign tmp_39_cast1_fu_389_p1 = tmp_30_reg_709;

assign tmp_39_fu_546_p2 = (tmp2_fu_541_p2 + tmp_39_cast1_reg_752);

assign tmp_3_fu_490_p2 = (tmp_48_cast_fu_446_p1 + tmp3_fu_485_p2);

assign tmp_40_cast7_fu_398_p1 = tmp_31_reg_720;

assign tmp_40_cast8_fu_395_p1 = tmp_31_reg_720;

assign tmp_40_cast9_fu_392_p1 = tmp_31_reg_720;

assign tmp_40_cast_fu_401_p1 = tmp_31_reg_720;

assign tmp_40_fu_525_p1 = o_count_1_reg_223;

assign tmp_41_cast6_fu_409_p1 = tmp_32_fu_404_p2;

assign tmp_41_cast_fu_413_p1 = tmp_32_fu_404_p2;

assign tmp_41_fu_530_p2 = (o_count_1_reg_223 + 16'd1);

assign tmp_42_fu_571_p2 = (tmp_39_reg_830 + tmp_41_cast6_reg_767);

assign tmp_43_cast_fu_428_p1 = tmp_33_fu_422_p2;

assign tmp_43_fu_566_p2 = (input_width_cast2_reg_742 + i_count_1_reg_266);

assign tmp_44_cast_fu_437_p1 = tmp_34_fu_432_p2;

assign tmp_44_fu_645_p1 = o_count_5_reg_319;

assign tmp_45_fu_592_p2 = (tmp_cast_reg_735 + o_count_2_reg_255);

assign tmp_46_fu_581_p1 = i_count_2_reg_299;

assign tmp_47_fu_597_p1 = o_count_3_reg_288;

assign tmp_48_cast_fu_446_p1 = tmp_35_fu_441_p2;

assign tmp_48_fu_586_p2 = (i_count_2_reg_299 + 14'd1);

assign tmp_49_cast_fu_456_p1 = tmp_36_fu_450_p2;

assign tmp_49_fu_614_p1 = o_count_4_reg_309;

assign tmp_50_fu_515_p1 = o_count_1_reg_223[4:0];

assign tmp_51_fu_635_p1 = o_count_5_reg_319[4:0];

assign tmp_6_fu_460_p2 = (tmp_37_reg_730 + tmp_31_reg_720);

assign tmp_7_fu_464_p2 = (tmp_28_reg_698 + tmp_6_fu_460_p2);

assign tmp_8_fu_469_p2 = (5'd1 + tmp_7_fu_464_p2);

assign tmp_9_fu_475_p2 = (tmp_6_fu_460_p2 + tmp_32_fu_404_p2);

assign tmp_cast_fu_373_p1 = tmp_reg_704;

assign tmp_fu_336_p2 = (5'd2 + tmp_28_fu_332_p1);

assign tmp_s_fu_383_p0 = tmp_s_fu_383_p00;

assign tmp_s_fu_383_p00 = $unsigned(input_width_cast_fu_370_p1);

assign tmp_s_fu_383_p1 = tmp_s_fu_383_p10;

assign tmp_s_fu_383_p10 = $unsigned(input_height_cast3_reg_693);

assign tmp_s_fu_383_p2 = (tmp_s_fu_383_p0 * tmp_s_fu_383_p1);

always @ (posedge ap_clk) begin
    tmp_cast_reg_735[13:5] <= 9'b000000000;
    input_width_cast2_reg_742[13:7] <= 7'b0000000;
    tmp_39_cast1_reg_752[15:12] <= 4'b0000;
    tmp_40_cast9_reg_757[15:5] <= 11'b00000000000;
    tmp_41_cast6_reg_767[15:5] <= 11'b00000000000;
    tmp_43_cast_reg_772[13:10] <= 4'b0000;
    p_cast_reg_804[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
