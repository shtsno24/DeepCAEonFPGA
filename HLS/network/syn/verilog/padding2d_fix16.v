// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] tmp_28_fu_327_p1;
reg   [4:0] tmp_28_reg_673;
wire   [4:0] tmp_fu_331_p2;
reg   [4:0] tmp_reg_680;
wire    ap_CS_fsm_state2;
wire  signed [6:0] input_height_cast3_fu_337_p1;
reg  signed [6:0] input_height_cast3_reg_691;
wire   [11:0] tmp_30_fu_348_p2;
reg   [11:0] tmp_30_reg_696;
wire   [9:0] tmp_29_fu_354_p1;
reg   [9:0] tmp_29_reg_701;
wire   [4:0] tmp_31_fu_358_p2;
reg   [4:0] tmp_31_reg_707;
wire   [4:0] tmp_37_fu_363_p1;
reg   [4:0] tmp_37_reg_717;
wire   [4:0] tmp_6_fu_367_p2;
reg   [4:0] tmp_6_reg_722;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_7_fu_371_p2;
reg   [4:0] tmp_7_reg_728;
wire    ap_CS_fsm_state4;
wire   [4:0] tmp_32_fu_381_p2;
reg   [4:0] tmp_32_reg_733;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp1_fu_386_p2;
reg   [9:0] tmp1_reg_740;
wire   [5:0] tmp_34_fu_391_p2;
reg   [5:0] tmp_34_reg_745;
wire   [5:0] tmp_35_fu_396_p2;
reg   [5:0] tmp_35_reg_750;
wire   [5:0] tmp_36_fu_401_p2;
reg   [5:0] tmp_36_reg_755;
wire   [4:0] tmp_8_fu_407_p2;
reg   [4:0] tmp_8_reg_760;
wire   [9:0] tmp3_fu_412_p2;
reg   [9:0] tmp3_reg_765;
wire   [13:0] tmp_cast_fu_420_p1;
reg   [13:0] tmp_cast_reg_770;
wire    ap_CS_fsm_state6;
wire   [13:0] input_width_cast2_fu_423_p1;
reg   [13:0] input_width_cast2_reg_777;
wire   [13:0] tmp_s_fu_430_p2;
reg   [13:0] tmp_s_reg_782;
wire   [15:0] tmp_39_cast1_fu_436_p1;
reg   [15:0] tmp_39_cast1_reg_787;
wire   [15:0] tmp_40_cast9_fu_439_p1;
reg   [15:0] tmp_40_cast9_reg_792;
wire   [13:0] tmp_40_cast_fu_442_p1;
wire   [15:0] tmp_41_cast6_fu_445_p1;
reg   [15:0] tmp_41_cast6_reg_802;
wire   [13:0] tmp_43_cast_fu_456_p1;
reg   [13:0] tmp_43_cast_reg_807;
wire   [13:0] tmp_44_cast_fu_460_p1;
wire   [13:0] tmp_49_cast_fu_466_p1;
wire   [4:0] tmp_9_fu_469_p2;
reg   [4:0] tmp_9_reg_823;
wire   [5:0] tmp_38_fu_473_p1;
reg   [5:0] tmp_38_reg_829;
wire   [13:0] p_cast_fu_482_p1;
reg   [13:0] p_cast_reg_834;
wire   [4:0] depth_1_fu_495_p2;
reg   [4:0] depth_1_reg_842;
wire    ap_CS_fsm_state7;
wire   [15:0] tmp_41_fu_516_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond2_fu_505_p2;
wire   [13:0] i_count_3_fu_522_p2;
reg   [13:0] i_count_3_reg_855;
wire   [15:0] tmp2_fu_527_p2;
reg   [15:0] tmp2_reg_860;
wire   [15:0] tmp_39_fu_532_p2;
reg   [15:0] tmp_39_reg_865;
wire    ap_CS_fsm_state9;
wire   [4:0] height_1_fu_545_p2;
reg   [4:0] height_1_reg_874;
wire    ap_CS_fsm_state10;
wire   [13:0] tmp_43_fu_551_p2;
reg   [13:0] tmp_43_reg_879;
wire   [0:0] exitcond7_fu_540_p2;
wire   [15:0] tmp_42_fu_556_p2;
reg   [15:0] tmp_42_reg_884;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond_fu_560_p2;
wire   [13:0] tmp_48_fu_571_p2;
reg   [13:0] tmp_48_reg_897;
wire   [13:0] tmp_45_fu_577_p2;
reg   [13:0] tmp_45_reg_902;
reg   [15:0] input_load_reg_907;
wire    ap_CS_fsm_state12;
wire   [13:0] o_count_8_fu_587_p2;
wire    ap_CS_fsm_state13;
wire   [13:0] o_count_9_fu_604_p2;
wire    ap_CS_fsm_state14;
wire   [0:0] exitcond5_fu_593_p2;
wire   [13:0] indvars_iv_next5_fu_610_p2;
wire   [13:0] indvars_iv_next4_fu_615_p2;
wire   [15:0] o_count_7_fu_635_p2;
wire    ap_CS_fsm_state15;
wire   [0:0] exitcond8_fu_624_p2;
wire   [13:0] indvars_iv_next_fu_641_p2;
wire   [13:0] indvars_iv_next1_fu_646_p2;
wire   [13:0] indvars_iv_next2_fu_651_p2;
wire   [4:0] indvars_iv_next6_fu_656_p2;
wire   [4:0] indvars_iv_next3_fu_661_p2;
reg   [4:0] indvars_iv9_reg_137;
reg   [4:0] indvars_iv4_reg_147;
reg   [13:0] indvars_iv1_reg_157;
reg   [13:0] indvars_iv_reg_167;
reg   [13:0] indvars_iv2_reg_177;
reg   [15:0] o_count_reg_187;
reg   [13:0] i_count_reg_199;
reg   [4:0] depth_reg_211;
reg   [15:0] o_count_1_reg_222;
wire   [0:0] exitcond1_fu_490_p2;
reg   [13:0] indvars_iv3_reg_232;
reg   [13:0] o_count_6_reg_243;
reg   [13:0] o_count_2_reg_254;
reg   [13:0] i_count_1_reg_265;
reg   [4:0] height_reg_276;
reg   [13:0] o_count_3_reg_287;
reg   [13:0] i_count_2_reg_298;
reg   [13:0] o_count_4_reg_308;
reg   [15:0] o_count_5_reg_318;
wire   [63:0] tmp_40_fu_511_p1;
wire   [63:0] tmp_46_fu_566_p1;
wire   [63:0] tmp_47_fu_582_p1;
wire   [63:0] tmp_49_fu_599_p1;
wire   [63:0] tmp_44_fu_630_p1;
wire  signed [5:0] tmp_28_fu_327_p0;
wire  signed [5:0] input_height_cast3_fu_337_p0;
wire   [4:0] tmp_30_fu_348_p0;
wire   [6:0] tmp_30_fu_348_p1;
wire   [9:0] tmp_40_cast7_fu_378_p1;
wire   [5:0] tmp_40_cast8_fu_375_p1;
wire  signed [5:0] tmp_34_fu_391_p1;
wire  signed [5:0] tmp_35_fu_396_p0;
wire  signed [5:0] input_width_cast_fu_417_p0;
wire  signed [6:0] input_width_cast_fu_417_p1;
wire   [6:0] tmp_s_fu_430_p0;
wire   [6:0] tmp_s_fu_430_p1;
wire   [9:0] tmp_41_cast_fu_448_p1;
wire   [9:0] tmp_33_fu_451_p2;
wire   [9:0] tmp_48_cast_fu_463_p1;
wire   [9:0] tmp_3_fu_477_p2;
wire   [5:0] depth_cast_fu_486_p1;
wire   [4:0] tmp_50_fu_501_p1;
wire   [5:0] height_cast_fu_536_p1;
wire  signed [5:0] exitcond7_fu_540_p1;
wire   [4:0] tmp_51_fu_620_p1;
reg   [14:0] ap_NS_fsm;
wire   [11:0] tmp_30_fu_348_p00;
wire   [11:0] tmp_30_fu_348_p10;
wire   [13:0] tmp_s_fu_430_p00;
wire   [13:0] tmp_s_fu_430_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        depth_reg_211 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
        depth_reg_211 <= depth_1_reg_842;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        height_reg_276 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state14) & (exitcond5_fu_593_p2 == 1'd1))) begin
        height_reg_276 <= height_1_reg_874;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_count_1_reg_265 <= i_count_reg_199;
    end else if (((1'b1 == ap_CS_fsm_state14) & (exitcond5_fu_593_p2 == 1'd1))) begin
        i_count_1_reg_265 <= tmp_43_reg_879;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_count_2_reg_298 <= tmp_48_reg_897;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_540_p2 == 1'd0))) begin
        i_count_2_reg_298 <= i_count_1_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_count_reg_199 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
        i_count_reg_199 <= i_count_3_reg_855;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvars_iv1_reg_157 <= tmp_49_cast_fu_466_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
        indvars_iv1_reg_157 <= indvars_iv_next2_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvars_iv2_reg_177 <= tmp_40_cast_fu_442_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
        indvars_iv2_reg_177 <= indvars_iv_next_fu_641_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvars_iv3_reg_232 <= indvars_iv1_reg_157;
    end else if (((1'b1 == ap_CS_fsm_state14) & (exitcond5_fu_593_p2 == 1'd1))) begin
        indvars_iv3_reg_232 <= indvars_iv_next4_fu_615_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvars_iv4_reg_147 <= tmp_8_reg_760;
    end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
        indvars_iv4_reg_147 <= indvars_iv_next6_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvars_iv9_reg_137 <= tmp_31_reg_707;
    end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
        indvars_iv9_reg_137 <= indvars_iv_next3_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvars_iv_reg_167 <= tmp_44_cast_fu_460_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
        indvars_iv_reg_167 <= indvars_iv_next1_fu_646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_490_p2 == 1'd0))) begin
        o_count_1_reg_222 <= o_count_reg_187;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_505_p2 == 1'd0))) begin
        o_count_1_reg_222 <= tmp_41_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        o_count_2_reg_254 <= indvars_iv2_reg_177;
    end else if (((1'b1 == ap_CS_fsm_state14) & (exitcond5_fu_593_p2 == 1'd1))) begin
        o_count_2_reg_254 <= tmp_45_reg_902;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        o_count_3_reg_287 <= o_count_8_fu_587_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_540_p2 == 1'd0))) begin
        o_count_3_reg_287 <= o_count_2_reg_254;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (exitcond5_fu_593_p2 == 1'd0))) begin
        o_count_4_reg_308 <= o_count_9_fu_604_p2;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_560_p2 == 1'd1))) begin
        o_count_4_reg_308 <= o_count_6_reg_243;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd0))) begin
        o_count_5_reg_318 <= o_count_7_fu_635_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_540_p2 == 1'd1))) begin
        o_count_5_reg_318 <= tmp_39_reg_865;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        o_count_6_reg_243 <= indvars_iv_reg_167;
    end else if (((1'b1 == ap_CS_fsm_state14) & (exitcond5_fu_593_p2 == 1'd1))) begin
        o_count_6_reg_243 <= indvars_iv_next5_fu_610_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        o_count_reg_187 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
        o_count_reg_187 <= tmp_42_reg_884;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        depth_1_reg_842 <= depth_1_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        height_1_reg_874 <= height_1_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_505_p2 == 1'd1))) begin
        i_count_3_reg_855 <= i_count_3_fu_522_p2;
        tmp2_reg_860 <= tmp2_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_height_cast3_reg_691 <= input_height_cast3_fu_337_p1;
        tmp_29_reg_701 <= tmp_29_fu_354_p1;
        tmp_30_reg_696 <= tmp_30_fu_348_p2;
        tmp_31_reg_707 <= tmp_31_fu_358_p2;
        tmp_37_reg_717 <= tmp_37_fu_363_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_load_reg_907 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_width_cast2_reg_777[6 : 0] <= input_width_cast2_fu_423_p1[6 : 0];
        p_cast_reg_834[9 : 0] <= p_cast_fu_482_p1[9 : 0];
        tmp_38_reg_829 <= tmp_38_fu_473_p1;
        tmp_39_cast1_reg_787[11 : 0] <= tmp_39_cast1_fu_436_p1[11 : 0];
        tmp_40_cast9_reg_792[4 : 0] <= tmp_40_cast9_fu_439_p1[4 : 0];
        tmp_41_cast6_reg_802[4 : 0] <= tmp_41_cast6_fu_445_p1[4 : 0];
        tmp_43_cast_reg_807[9 : 0] <= tmp_43_cast_fu_456_p1[9 : 0];
        tmp_9_reg_823 <= tmp_9_fu_469_p2;
        tmp_cast_reg_770[4 : 0] <= tmp_cast_fu_420_p1[4 : 0];
        tmp_s_reg_782 <= tmp_s_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp1_reg_740 <= tmp1_fu_386_p2;
        tmp3_reg_765 <= tmp3_fu_412_p2;
        tmp_32_reg_733 <= tmp_32_fu_381_p2;
        tmp_34_reg_745 <= tmp_34_fu_391_p2;
        tmp_35_reg_750[5 : 1] <= tmp_35_fu_396_p2[5 : 1];
        tmp_36_reg_755[5 : 1] <= tmp_36_fu_401_p2[5 : 1];
        tmp_8_reg_760 <= tmp_8_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_28_reg_673 <= tmp_28_fu_327_p1;
        tmp_reg_680 <= tmp_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_39_reg_865 <= tmp_39_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_540_p2 == 1'd1))) begin
        tmp_42_reg_884 <= tmp_42_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_540_p2 == 1'd0))) begin
        tmp_43_reg_879 <= tmp_43_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_560_p2 == 1'd1))) begin
        tmp_45_reg_902 <= tmp_45_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_560_p2 == 1'd0))) begin
        tmp_48_reg_897 <= tmp_48_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_6_reg_722 <= tmp_6_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_7_reg_728 <= tmp_7_fu_371_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_490_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_490_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_address0 = tmp_44_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        output_r_address0 = tmp_49_fu_599_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_address0 = tmp_47_fu_582_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_40_fu_511_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_d0 = input_load_reg_907;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state14) & (exitcond5_fu_593_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_505_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond1_fu_490_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond2_fu_505_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond7_fu_540_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_560_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (exitcond5_fu_593_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (exitcond8_fu_624_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_1_fu_495_p2 = (depth_reg_211 + 5'd1);

assign depth_cast_fu_486_p1 = depth_reg_211;

assign exitcond1_fu_490_p2 = ((depth_cast_fu_486_p1 == tmp_38_reg_829) ? 1'b1 : 1'b0);

assign exitcond2_fu_505_p2 = ((tmp_50_fu_501_p1 == indvars_iv9_reg_137) ? 1'b1 : 1'b0);

assign exitcond5_fu_593_p2 = ((o_count_4_reg_308 == indvars_iv3_reg_232) ? 1'b1 : 1'b0);

assign exitcond7_fu_540_p1 = input_height;

assign exitcond7_fu_540_p2 = ((height_cast_fu_536_p1 == exitcond7_fu_540_p1) ? 1'b1 : 1'b0);

assign exitcond8_fu_624_p2 = ((tmp_51_fu_620_p1 == indvars_iv4_reg_147) ? 1'b1 : 1'b0);

assign exitcond_fu_560_p2 = ((o_count_3_reg_287 == o_count_6_reg_243) ? 1'b1 : 1'b0);

assign height_1_fu_545_p2 = (height_reg_276 + 5'd1);

assign height_cast_fu_536_p1 = height_reg_276;

assign i_count_3_fu_522_p2 = (tmp_s_reg_782 + i_count_reg_199);

assign indvars_iv_next1_fu_646_p2 = (tmp_43_cast_reg_807 + indvars_iv_reg_167);

assign indvars_iv_next2_fu_651_p2 = (indvars_iv1_reg_157 + p_cast_reg_834);

assign indvars_iv_next3_fu_661_p2 = (tmp_9_reg_823 + indvars_iv9_reg_137);

assign indvars_iv_next4_fu_615_p2 = (tmp_cast_reg_770 + indvars_iv3_reg_232);

assign indvars_iv_next5_fu_610_p2 = (tmp_cast_reg_770 + o_count_6_reg_243);

assign indvars_iv_next6_fu_656_p2 = (tmp_9_reg_823 + indvars_iv4_reg_147);

assign indvars_iv_next_fu_641_p2 = (tmp_43_cast_reg_807 + indvars_iv2_reg_177);

assign input_height_cast3_fu_337_p0 = input_height;

assign input_height_cast3_fu_337_p1 = input_height_cast3_fu_337_p0;

assign input_r_address0 = tmp_46_fu_566_p1;

assign input_width_cast2_fu_423_p1 = $unsigned(input_width_cast_fu_417_p1);

assign input_width_cast_fu_417_p0 = input_width;

assign input_width_cast_fu_417_p1 = input_width_cast_fu_417_p0;

assign o_count_7_fu_635_p2 = (o_count_5_reg_318 + 16'd1);

assign o_count_8_fu_587_p2 = (o_count_3_reg_287 + 14'd1);

assign o_count_9_fu_604_p2 = (o_count_4_reg_308 + 14'd1);

assign p_cast_fu_482_p1 = tmp_3_fu_477_p2;

assign tmp1_fu_386_p2 = (tmp_40_cast7_fu_378_p1 + tmp_29_reg_701);

assign tmp2_fu_527_p2 = (tmp_40_cast9_reg_792 + o_count_reg_187);

assign tmp3_fu_412_p2 = (10'd4 + tmp_29_reg_701);

assign tmp_28_fu_327_p0 = input_width;

assign tmp_28_fu_327_p1 = tmp_28_fu_327_p0[4:0];

assign tmp_29_fu_354_p1 = tmp_30_fu_348_p2[9:0];

assign tmp_30_fu_348_p0 = tmp_30_fu_348_p00;

assign tmp_30_fu_348_p00 = tmp_reg_680;

assign tmp_30_fu_348_p1 = tmp_30_fu_348_p10;

assign tmp_30_fu_348_p10 = $unsigned(input_height_cast3_fu_337_p1);

assign tmp_30_fu_348_p2 = (tmp_30_fu_348_p0 * tmp_30_fu_348_p1);

assign tmp_31_fu_358_p2 = (5'd3 + tmp_28_reg_673);

assign tmp_32_fu_381_p2 = (5'd1 + tmp_28_reg_673);

assign tmp_33_fu_451_p2 = (tmp1_reg_740 + tmp_41_cast_fu_448_p1);

assign tmp_34_fu_391_p1 = input_width;

assign tmp_34_fu_391_p2 = ($signed(tmp_40_cast8_fu_375_p1) + $signed(tmp_34_fu_391_p1));

assign tmp_35_fu_396_p0 = input_width;

assign tmp_35_fu_396_p2 = tmp_35_fu_396_p0 << 6'd1;

assign tmp_36_fu_401_p2 = (6'd5 + tmp_35_fu_396_p2);

assign tmp_37_fu_363_p1 = tmp_30_fu_348_p2[4:0];

assign tmp_38_fu_473_p1 = input_depth[5:0];

assign tmp_39_cast1_fu_436_p1 = tmp_30_reg_696;

assign tmp_39_fu_532_p2 = (tmp2_reg_860 + tmp_39_cast1_reg_787);

assign tmp_3_fu_477_p2 = (tmp_48_cast_fu_463_p1 + tmp3_reg_765);

assign tmp_40_cast7_fu_378_p1 = tmp_31_reg_707;

assign tmp_40_cast8_fu_375_p1 = tmp_31_reg_707;

assign tmp_40_cast9_fu_439_p1 = tmp_31_reg_707;

assign tmp_40_cast_fu_442_p1 = tmp_31_reg_707;

assign tmp_40_fu_511_p1 = o_count_1_reg_222;

assign tmp_41_cast6_fu_445_p1 = tmp_32_reg_733;

assign tmp_41_cast_fu_448_p1 = tmp_32_reg_733;

assign tmp_41_fu_516_p2 = (o_count_1_reg_222 + 16'd1);

assign tmp_42_fu_556_p2 = (tmp_39_reg_865 + tmp_41_cast6_reg_802);

assign tmp_43_cast_fu_456_p1 = tmp_33_fu_451_p2;

assign tmp_43_fu_551_p2 = (input_width_cast2_reg_777 + i_count_1_reg_265);

assign tmp_44_cast_fu_460_p1 = tmp_34_reg_745;

assign tmp_44_fu_630_p1 = o_count_5_reg_318;

assign tmp_45_fu_577_p2 = (tmp_cast_reg_770 + o_count_2_reg_254);

assign tmp_46_fu_566_p1 = i_count_2_reg_298;

assign tmp_47_fu_582_p1 = o_count_3_reg_287;

assign tmp_48_cast_fu_463_p1 = tmp_35_reg_750;

assign tmp_48_fu_571_p2 = (i_count_2_reg_298 + 14'd1);

assign tmp_49_cast_fu_466_p1 = tmp_36_reg_755;

assign tmp_49_fu_599_p1 = o_count_4_reg_308;

assign tmp_50_fu_501_p1 = o_count_1_reg_222[4:0];

assign tmp_51_fu_620_p1 = o_count_5_reg_318[4:0];

assign tmp_6_fu_367_p2 = (tmp_37_reg_717 + tmp_31_reg_707);

assign tmp_7_fu_371_p2 = (tmp_28_reg_673 + tmp_6_reg_722);

assign tmp_8_fu_407_p2 = (5'd1 + tmp_7_reg_728);

assign tmp_9_fu_469_p2 = (tmp_6_reg_722 + tmp_32_reg_733);

assign tmp_cast_fu_420_p1 = tmp_reg_680;

assign tmp_fu_331_p2 = (5'd2 + tmp_28_fu_327_p1);

assign tmp_s_fu_430_p0 = tmp_s_fu_430_p00;

assign tmp_s_fu_430_p00 = $unsigned(input_width_cast_fu_417_p1);

assign tmp_s_fu_430_p1 = tmp_s_fu_430_p10;

assign tmp_s_fu_430_p10 = $unsigned(input_height_cast3_reg_691);

assign tmp_s_fu_430_p2 = (tmp_s_fu_430_p0 * tmp_s_fu_430_p1);

always @ (posedge ap_clk) begin
    tmp_35_reg_750[0] <= 1'b0;
    tmp_36_reg_755[0] <= 1'b1;
    tmp_cast_reg_770[13:5] <= 9'b000000000;
    input_width_cast2_reg_777[13:7] <= 7'b0000000;
    tmp_39_cast1_reg_787[15:12] <= 4'b0000;
    tmp_40_cast9_reg_792[15:5] <= 11'b00000000000;
    tmp_41_cast6_reg_802[15:5] <= 11'b00000000000;
    tmp_43_cast_reg_807[13:10] <= 4'b0000;
    p_cast_reg_834[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
