// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] tmp_51_fu_317_p1;
reg   [4:0] tmp_51_reg_667;
wire   [4:0] tmp_fu_321_p2;
reg   [4:0] tmp_reg_674;
wire    ap_CS_fsm_state2;
wire  signed [6:0] input_height_cast3_fu_327_p1;
reg  signed [6:0] input_height_cast3_reg_685;
wire   [11:0] tmp_27_fu_338_p2;
reg   [11:0] tmp_27_reg_690;
wire   [9:0] tmp_52_fu_344_p1;
reg   [9:0] tmp_52_reg_695;
wire   [4:0] tmp_28_fu_348_p2;
reg   [4:0] tmp_28_reg_701;
wire   [4:0] tmp_54_fu_353_p1;
reg   [4:0] tmp_54_reg_711;
wire   [4:0] tmp_34_fu_357_p2;
reg   [4:0] tmp_34_reg_716;
wire    ap_CS_fsm_state3;
wire   [4:0] tmp_29_fu_364_p2;
reg   [4:0] tmp_29_reg_722;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_32_fu_369_p2;
reg   [5:0] tmp_32_reg_729;
wire   [5:0] tmp_53_fu_374_p2;
reg   [5:0] tmp_53_reg_734;
wire   [5:0] tmp_33_fu_379_p2;
reg   [5:0] tmp_33_reg_739;
wire   [4:0] tmp_36_fu_389_p2;
reg   [4:0] tmp_36_reg_744;
wire   [13:0] tmp_cast_fu_398_p1;
reg   [13:0] tmp_cast_reg_749;
wire    ap_CS_fsm_state5;
wire   [13:0] input_width_cast2_fu_401_p1;
reg   [13:0] input_width_cast2_reg_756;
wire   [13:0] tmp_s_fu_408_p2;
reg   [13:0] tmp_s_reg_761;
wire   [15:0] tmp_27_cast1_fu_414_p1;
reg   [15:0] tmp_27_cast1_reg_766;
wire   [15:0] tmp_28_cast9_fu_417_p1;
reg   [15:0] tmp_28_cast9_reg_771;
wire   [13:0] tmp_28_cast_fu_423_p1;
wire   [15:0] tmp_29_cast6_fu_426_p1;
reg   [15:0] tmp_29_cast6_reg_781;
wire   [13:0] tmp_31_cast_fu_443_p1;
reg   [13:0] tmp_31_cast_reg_786;
wire   [13:0] tmp_32_cast_fu_447_p1;
wire   [13:0] tmp_37_cast_fu_453_p1;
wire   [4:0] tmp_37_fu_456_p2;
reg   [4:0] tmp_37_reg_802;
wire   [5:0] tmp_55_fu_460_p1;
reg   [5:0] tmp_55_reg_808;
wire   [13:0] p_cast_fu_475_p1;
reg   [13:0] p_cast_reg_813;
wire   [4:0] depth_1_fu_488_p2;
reg   [4:0] depth_1_reg_821;
wire    ap_CS_fsm_state6;
wire   [15:0] tmp_40_fu_509_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond2_fu_498_p2;
wire   [13:0] i_count_3_fu_515_p2;
reg   [13:0] i_count_3_reg_834;
wire   [15:0] tmp_38_fu_525_p2;
reg   [15:0] tmp_38_reg_839;
wire   [4:0] height_1_fu_539_p2;
reg   [4:0] height_1_reg_848;
wire    ap_CS_fsm_state8;
wire   [13:0] tmp_42_fu_545_p2;
reg   [13:0] tmp_42_reg_853;
wire   [0:0] exitcond7_fu_534_p2;
wire   [15:0] tmp_41_fu_550_p2;
reg   [15:0] tmp_41_reg_858;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond_fu_554_p2;
wire   [13:0] tmp_47_fu_565_p2;
reg   [13:0] tmp_47_reg_871;
wire   [13:0] tmp_44_fu_571_p2;
reg   [13:0] tmp_44_reg_876;
reg   [15:0] input_load_reg_881;
wire    ap_CS_fsm_state10;
wire   [13:0] o_count_8_fu_581_p2;
wire    ap_CS_fsm_state11;
wire   [13:0] o_count_9_fu_598_p2;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond5_fu_587_p2;
wire   [13:0] indvars_iv_next5_fu_604_p2;
wire   [13:0] indvars_iv_next4_fu_609_p2;
wire   [15:0] o_count_7_fu_629_p2;
wire    ap_CS_fsm_state13;
wire   [0:0] exitcond8_fu_618_p2;
wire   [13:0] indvars_iv_next_fu_635_p2;
wire   [13:0] indvars_iv_next1_fu_640_p2;
wire   [13:0] indvars_iv_next2_fu_645_p2;
wire   [4:0] indvars_iv_next6_fu_650_p2;
wire   [4:0] indvars_iv_next3_fu_655_p2;
reg   [4:0] indvars_iv9_reg_127;
reg   [4:0] indvars_iv4_reg_137;
reg   [13:0] indvars_iv1_reg_147;
reg   [13:0] indvars_iv_reg_157;
reg   [13:0] indvars_iv2_reg_167;
reg   [15:0] o_count_reg_177;
reg   [13:0] i_count_reg_189;
reg   [4:0] depth_reg_201;
reg   [15:0] o_count_1_reg_212;
wire   [0:0] exitcond1_fu_483_p2;
reg   [13:0] indvars_iv3_reg_222;
reg   [13:0] o_count_6_reg_233;
reg   [13:0] o_count_2_reg_244;
reg   [13:0] i_count_1_reg_255;
reg   [4:0] height_reg_266;
reg   [13:0] o_count_3_reg_277;
reg   [13:0] i_count_2_reg_288;
reg   [13:0] o_count_4_reg_298;
reg   [15:0] o_count_5_reg_308;
wire   [63:0] tmp_39_fu_504_p1;
wire   [63:0] tmp_45_fu_560_p1;
wire   [63:0] tmp_46_fu_576_p1;
wire   [63:0] tmp_48_fu_593_p1;
wire   [63:0] tmp_43_fu_624_p1;
wire  signed [5:0] tmp_51_fu_317_p0;
wire  signed [5:0] input_height_cast3_fu_327_p0;
wire   [4:0] tmp_27_fu_338_p0;
wire   [6:0] tmp_27_fu_338_p1;
wire   [5:0] tmp_28_cast8_fu_361_p1;
wire  signed [5:0] tmp_32_fu_369_p1;
wire  signed [5:0] tmp_53_fu_374_p0;
wire   [4:0] tmp_35_fu_385_p2;
wire  signed [5:0] input_width_cast_fu_395_p0;
wire  signed [6:0] input_width_cast_fu_395_p1;
wire   [6:0] tmp_s_fu_408_p0;
wire   [6:0] tmp_s_fu_408_p1;
wire   [9:0] tmp_28_cast7_fu_420_p1;
wire   [9:0] tmp1_fu_432_p2;
wire   [9:0] tmp_29_cast_fu_429_p1;
wire   [9:0] tmp_31_fu_437_p2;
wire   [9:0] tmp_36_cast_fu_450_p1;
wire   [9:0] tmp3_fu_464_p2;
wire   [9:0] tmp_21_fu_469_p2;
wire   [5:0] depth_cast_fu_479_p1;
wire   [4:0] tmp_56_fu_494_p1;
wire   [15:0] tmp2_fu_520_p2;
wire   [5:0] height_cast_fu_530_p1;
wire  signed [5:0] exitcond7_fu_534_p1;
wire   [4:0] tmp_57_fu_614_p1;
reg   [12:0] ap_NS_fsm;
wire   [11:0] tmp_27_fu_338_p00;
wire   [11:0] tmp_27_fu_338_p10;
wire   [13:0] tmp_s_fu_408_p00;
wire   [13:0] tmp_s_fu_408_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        depth_reg_201 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
        depth_reg_201 <= depth_1_reg_821;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd1))) begin
        height_reg_266 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond5_fu_587_p2 == 1'd1))) begin
        height_reg_266 <= height_1_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd1))) begin
        i_count_1_reg_255 <= i_count_reg_189;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond5_fu_587_p2 == 1'd1))) begin
        i_count_1_reg_255 <= tmp_42_reg_853;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_count_2_reg_288 <= tmp_47_reg_871;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond7_fu_534_p2 == 1'd0))) begin
        i_count_2_reg_288 <= i_count_1_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_count_reg_189 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
        i_count_reg_189 <= i_count_3_reg_834;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv1_reg_147 <= tmp_37_cast_fu_453_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
        indvars_iv1_reg_147 <= indvars_iv_next2_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv2_reg_167 <= tmp_28_cast_fu_423_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
        indvars_iv2_reg_167 <= indvars_iv_next_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd1))) begin
        indvars_iv3_reg_222 <= indvars_iv1_reg_147;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond5_fu_587_p2 == 1'd1))) begin
        indvars_iv3_reg_222 <= indvars_iv_next4_fu_609_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv4_reg_137 <= tmp_36_reg_744;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
        indvars_iv4_reg_137 <= indvars_iv_next6_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv9_reg_127 <= tmp_28_reg_701;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
        indvars_iv9_reg_127 <= indvars_iv_next3_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvars_iv_reg_157 <= tmp_32_cast_fu_447_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
        indvars_iv_reg_157 <= indvars_iv_next1_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_483_p2 == 1'd0))) begin
        o_count_1_reg_212 <= o_count_reg_177;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd0))) begin
        o_count_1_reg_212 <= tmp_40_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd1))) begin
        o_count_2_reg_244 <= indvars_iv2_reg_167;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond5_fu_587_p2 == 1'd1))) begin
        o_count_2_reg_244 <= tmp_44_reg_876;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        o_count_3_reg_277 <= o_count_8_fu_581_p2;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond7_fu_534_p2 == 1'd0))) begin
        o_count_3_reg_277 <= o_count_2_reg_244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (exitcond5_fu_587_p2 == 1'd0))) begin
        o_count_4_reg_298 <= o_count_9_fu_598_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_554_p2 == 1'd1))) begin
        o_count_4_reg_298 <= o_count_6_reg_233;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd0))) begin
        o_count_5_reg_308 <= o_count_7_fu_629_p2;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond7_fu_534_p2 == 1'd1))) begin
        o_count_5_reg_308 <= tmp_38_reg_839;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd1))) begin
        o_count_6_reg_233 <= indvars_iv_reg_157;
    end else if (((1'b1 == ap_CS_fsm_state12) & (exitcond5_fu_587_p2 == 1'd1))) begin
        o_count_6_reg_233 <= indvars_iv_next5_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o_count_reg_177 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
        o_count_reg_177 <= tmp_41_reg_858;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        depth_1_reg_821 <= depth_1_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        height_1_reg_848 <= height_1_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd1))) begin
        i_count_3_reg_834 <= i_count_3_fu_515_p2;
        tmp_38_reg_839 <= tmp_38_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_height_cast3_reg_685 <= input_height_cast3_fu_327_p1;
        tmp_27_reg_690 <= tmp_27_fu_338_p2;
        tmp_28_reg_701 <= tmp_28_fu_348_p2;
        tmp_52_reg_695 <= tmp_52_fu_344_p1;
        tmp_54_reg_711 <= tmp_54_fu_353_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_load_reg_881 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_width_cast2_reg_756[6 : 0] <= input_width_cast2_fu_401_p1[6 : 0];
        p_cast_reg_813[9 : 0] <= p_cast_fu_475_p1[9 : 0];
        tmp_27_cast1_reg_766[11 : 0] <= tmp_27_cast1_fu_414_p1[11 : 0];
        tmp_28_cast9_reg_771[4 : 0] <= tmp_28_cast9_fu_417_p1[4 : 0];
        tmp_29_cast6_reg_781[4 : 0] <= tmp_29_cast6_fu_426_p1[4 : 0];
        tmp_31_cast_reg_786[9 : 0] <= tmp_31_cast_fu_443_p1[9 : 0];
        tmp_37_reg_802 <= tmp_37_fu_456_p2;
        tmp_55_reg_808 <= tmp_55_fu_460_p1;
        tmp_cast_reg_749[4 : 0] <= tmp_cast_fu_398_p1[4 : 0];
        tmp_s_reg_761 <= tmp_s_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_29_reg_722 <= tmp_29_fu_364_p2;
        tmp_32_reg_729 <= tmp_32_fu_369_p2;
        tmp_33_reg_739[5 : 1] <= tmp_33_fu_379_p2[5 : 1];
        tmp_36_reg_744 <= tmp_36_fu_389_p2;
        tmp_53_reg_734[5 : 1] <= tmp_53_fu_374_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_34_reg_716 <= tmp_34_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond7_fu_534_p2 == 1'd1))) begin
        tmp_41_reg_858 <= tmp_41_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond7_fu_534_p2 == 1'd0))) begin
        tmp_42_reg_853 <= tmp_42_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_554_p2 == 1'd1))) begin
        tmp_44_reg_876 <= tmp_44_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_554_p2 == 1'd0))) begin
        tmp_47_reg_871 <= tmp_47_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_51_reg_667 <= tmp_51_fu_317_p1;
        tmp_reg_674 <= tmp_fu_321_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_483_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_483_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_address0 = tmp_43_fu_624_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        output_r_address0 = tmp_48_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = tmp_46_fu_576_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_39_fu_504_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_d0 = input_load_reg_881;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state12) & (exitcond5_fu_587_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_483_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_498_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond7_fu_534_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_554_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (exitcond5_fu_587_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond8_fu_618_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_1_fu_488_p2 = (depth_reg_201 + 5'd1);

assign depth_cast_fu_479_p1 = depth_reg_201;

assign exitcond1_fu_483_p2 = ((depth_cast_fu_479_p1 == tmp_55_reg_808) ? 1'b1 : 1'b0);

assign exitcond2_fu_498_p2 = ((tmp_56_fu_494_p1 == indvars_iv9_reg_127) ? 1'b1 : 1'b0);

assign exitcond5_fu_587_p2 = ((o_count_4_reg_298 == indvars_iv3_reg_222) ? 1'b1 : 1'b0);

assign exitcond7_fu_534_p1 = input_height;

assign exitcond7_fu_534_p2 = ((height_cast_fu_530_p1 == exitcond7_fu_534_p1) ? 1'b1 : 1'b0);

assign exitcond8_fu_618_p2 = ((tmp_57_fu_614_p1 == indvars_iv4_reg_137) ? 1'b1 : 1'b0);

assign exitcond_fu_554_p2 = ((o_count_3_reg_277 == o_count_6_reg_233) ? 1'b1 : 1'b0);

assign height_1_fu_539_p2 = (height_reg_266 + 5'd1);

assign height_cast_fu_530_p1 = height_reg_266;

assign i_count_3_fu_515_p2 = (tmp_s_reg_761 + i_count_reg_189);

assign indvars_iv_next1_fu_640_p2 = (tmp_31_cast_reg_786 + indvars_iv_reg_157);

assign indvars_iv_next2_fu_645_p2 = (indvars_iv1_reg_147 + p_cast_reg_813);

assign indvars_iv_next3_fu_655_p2 = (tmp_37_reg_802 + indvars_iv9_reg_127);

assign indvars_iv_next4_fu_609_p2 = (tmp_cast_reg_749 + indvars_iv3_reg_222);

assign indvars_iv_next5_fu_604_p2 = (tmp_cast_reg_749 + o_count_6_reg_233);

assign indvars_iv_next6_fu_650_p2 = (tmp_37_reg_802 + indvars_iv4_reg_137);

assign indvars_iv_next_fu_635_p2 = (tmp_31_cast_reg_786 + indvars_iv2_reg_167);

assign input_height_cast3_fu_327_p0 = input_height;

assign input_height_cast3_fu_327_p1 = input_height_cast3_fu_327_p0;

assign input_r_address0 = tmp_45_fu_560_p1;

assign input_width_cast2_fu_401_p1 = $unsigned(input_width_cast_fu_395_p1);

assign input_width_cast_fu_395_p0 = input_width;

assign input_width_cast_fu_395_p1 = input_width_cast_fu_395_p0;

assign o_count_7_fu_629_p2 = (o_count_5_reg_308 + 16'd1);

assign o_count_8_fu_581_p2 = (o_count_3_reg_277 + 14'd1);

assign o_count_9_fu_598_p2 = (o_count_4_reg_298 + 14'd1);

assign p_cast_fu_475_p1 = tmp_21_fu_469_p2;

assign tmp1_fu_432_p2 = (tmp_28_cast7_fu_420_p1 + tmp_52_reg_695);

assign tmp2_fu_520_p2 = (tmp_28_cast9_reg_771 + o_count_reg_177);

assign tmp3_fu_464_p2 = (10'd4 + tmp_52_reg_695);

assign tmp_21_fu_469_p2 = (tmp_36_cast_fu_450_p1 + tmp3_fu_464_p2);

assign tmp_27_cast1_fu_414_p1 = tmp_27_reg_690;

assign tmp_27_fu_338_p0 = tmp_27_fu_338_p00;

assign tmp_27_fu_338_p00 = tmp_reg_674;

assign tmp_27_fu_338_p1 = tmp_27_fu_338_p10;

assign tmp_27_fu_338_p10 = $unsigned(input_height_cast3_fu_327_p1);

assign tmp_27_fu_338_p2 = (tmp_27_fu_338_p0 * tmp_27_fu_338_p1);

assign tmp_28_cast7_fu_420_p1 = tmp_28_reg_701;

assign tmp_28_cast8_fu_361_p1 = tmp_28_reg_701;

assign tmp_28_cast9_fu_417_p1 = tmp_28_reg_701;

assign tmp_28_cast_fu_423_p1 = tmp_28_reg_701;

assign tmp_28_fu_348_p2 = (5'd3 + tmp_51_reg_667);

assign tmp_29_cast6_fu_426_p1 = tmp_29_reg_722;

assign tmp_29_cast_fu_429_p1 = tmp_29_reg_722;

assign tmp_29_fu_364_p2 = (5'd1 + tmp_51_reg_667);

assign tmp_31_cast_fu_443_p1 = tmp_31_fu_437_p2;

assign tmp_31_fu_437_p2 = (tmp1_fu_432_p2 + tmp_29_cast_fu_429_p1);

assign tmp_32_cast_fu_447_p1 = tmp_32_reg_729;

assign tmp_32_fu_369_p1 = input_width;

assign tmp_32_fu_369_p2 = ($signed(tmp_28_cast8_fu_361_p1) + $signed(tmp_32_fu_369_p1));

assign tmp_33_fu_379_p2 = (6'd5 + tmp_53_fu_374_p2);

assign tmp_34_fu_357_p2 = (tmp_54_reg_711 + tmp_28_reg_701);

assign tmp_35_fu_385_p2 = (tmp_51_reg_667 + tmp_34_reg_716);

assign tmp_36_cast_fu_450_p1 = tmp_53_reg_734;

assign tmp_36_fu_389_p2 = (5'd1 + tmp_35_fu_385_p2);

assign tmp_37_cast_fu_453_p1 = tmp_33_reg_739;

assign tmp_37_fu_456_p2 = (tmp_34_reg_716 + tmp_29_reg_722);

assign tmp_38_fu_525_p2 = (tmp2_fu_520_p2 + tmp_27_cast1_reg_766);

assign tmp_39_fu_504_p1 = o_count_1_reg_212;

assign tmp_40_fu_509_p2 = (o_count_1_reg_212 + 16'd1);

assign tmp_41_fu_550_p2 = (tmp_38_reg_839 + tmp_29_cast6_reg_781);

assign tmp_42_fu_545_p2 = (input_width_cast2_reg_756 + i_count_1_reg_255);

assign tmp_43_fu_624_p1 = o_count_5_reg_308;

assign tmp_44_fu_571_p2 = (tmp_cast_reg_749 + o_count_2_reg_244);

assign tmp_45_fu_560_p1 = i_count_2_reg_288;

assign tmp_46_fu_576_p1 = o_count_3_reg_277;

assign tmp_47_fu_565_p2 = (i_count_2_reg_288 + 14'd1);

assign tmp_48_fu_593_p1 = o_count_4_reg_298;

assign tmp_51_fu_317_p0 = input_width;

assign tmp_51_fu_317_p1 = tmp_51_fu_317_p0[4:0];

assign tmp_52_fu_344_p1 = tmp_27_fu_338_p2[9:0];

assign tmp_53_fu_374_p0 = input_width;

assign tmp_53_fu_374_p2 = tmp_53_fu_374_p0 << 6'd1;

assign tmp_54_fu_353_p1 = tmp_27_fu_338_p2[4:0];

assign tmp_55_fu_460_p1 = input_depth[5:0];

assign tmp_56_fu_494_p1 = o_count_1_reg_212[4:0];

assign tmp_57_fu_614_p1 = o_count_5_reg_308[4:0];

assign tmp_cast_fu_398_p1 = tmp_reg_674;

assign tmp_fu_321_p2 = (5'd2 + tmp_51_fu_317_p1);

assign tmp_s_fu_408_p0 = tmp_s_fu_408_p00;

assign tmp_s_fu_408_p00 = $unsigned(input_width_cast_fu_395_p1);

assign tmp_s_fu_408_p1 = tmp_s_fu_408_p10;

assign tmp_s_fu_408_p10 = $unsigned(input_height_cast3_reg_685);

assign tmp_s_fu_408_p2 = (tmp_s_fu_408_p0 * tmp_s_fu_408_p1);

always @ (posedge ap_clk) begin
    tmp_53_reg_734[0] <= 1'b0;
    tmp_33_reg_739[0] <= 1'b1;
    tmp_cast_reg_749[13:5] <= 9'b000000000;
    input_width_cast2_reg_756[13:7] <= 7'b0000000;
    tmp_27_cast1_reg_766[15:12] <= 4'b0000;
    tmp_28_cast9_reg_771[15:5] <= 11'b00000000000;
    tmp_29_cast6_reg_781[15:5] <= 11'b00000000000;
    tmp_31_cast_reg_786[13:10] <= 4'b0000;
    p_cast_reg_813[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
