// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] SeparableConv2D_2_b_s_address0;
reg    SeparableConv2D_2_b_s_ce0;
wire   [12:0] SeparableConv2D_2_b_s_q0;
wire   [5:0] SeparableConv2D_2_w_s_address0;
reg    SeparableConv2D_2_w_s_ce0;
wire   [14:0] SeparableConv2D_2_w_s_q0;
wire   [9:0] phi_mul1_cast_fu_178_p1;
reg   [9:0] phi_mul1_cast_reg_421;
wire    ap_CS_fsm_state2;
wire   [8:0] next_mul2_fu_182_p2;
reg   [8:0] next_mul2_reg_426;
wire   [3:0] out_d_2_fu_194_p2;
reg   [3:0] out_d_2_reg_434;
wire   [2:0] tmp_11_fu_200_p1;
reg   [2:0] tmp_11_reg_439;
wire   [0:0] exitcond3_fu_188_p2;
wire   [5:0] tmp_19_fu_209_p3;
reg   [5:0] tmp_19_reg_449;
wire    ap_CS_fsm_state3;
wire  signed [15:0] SeparableConv2D_2_b_5_fu_216_p1;
reg  signed [15:0] SeparableConv2D_2_b_5_reg_454;
wire  signed [14:0] tmp_7_fu_220_p1;
reg  signed [14:0] tmp_7_reg_459;
wire   [2:0] out_h_2_fu_230_p2;
reg   [2:0] out_h_2_reg_467;
wire    ap_CS_fsm_state4;
wire  signed [6:0] tmp_22_fu_252_p2;
reg  signed [6:0] tmp_22_reg_472;
wire   [0:0] exitcond2_fu_224_p2;
wire  signed [9:0] tmp_22_cast_fu_258_p1;
reg  signed [9:0] tmp_22_cast_reg_477;
wire   [2:0] out_w_2_fu_268_p2;
reg   [2:0] out_w_2_reg_485;
wire    ap_CS_fsm_state5;
wire   [8:0] tmp_23_cast4_fu_274_p1;
reg   [8:0] tmp_23_cast4_reg_490;
wire   [0:0] exitcond1_fu_262_p2;
reg   [13:0] output_addr_reg_495;
wire   [3:0] in_d_1_fu_311_p2;
reg   [3:0] in_d_1_reg_503;
wire    ap_CS_fsm_state6;
wire   [8:0] next_mul_fu_321_p2;
reg   [8:0] next_mul_reg_508;
wire   [0:0] exitcond_fu_305_p2;
wire   [14:0] p_tmp_s_fu_382_p3;
reg   [14:0] p_tmp_s_reg_523;
reg  signed [15:0] input_load_reg_528;
wire    ap_CS_fsm_state7;
reg  signed [14:0] SeparableConv2D_2_w_3_reg_533;
reg   [15:0] tmp_32_reg_538;
wire    ap_CS_fsm_state8;
wire   [15:0] tmp_s_fu_405_p2;
wire    ap_CS_fsm_state9;
reg   [3:0] out_d_reg_99;
reg   [8:0] phi_mul1_reg_110;
reg   [2:0] out_h_reg_121;
reg   [2:0] out_w_reg_132;
wire    ap_CS_fsm_state10;
reg   [15:0] output_load_1_reg_143;
reg   [3:0] in_d_reg_156;
reg   [8:0] phi_mul_reg_167;
wire   [63:0] tmp_20_fu_204_p1;
wire   [63:0] tmp_25_fu_300_p1;
wire   [63:0] tmp_28_fu_345_p1;
wire   [63:0] tmp_30_fu_355_p1;
wire   [15:0] p_tmp_cast_fu_410_p1;
wire  signed [12:0] SeparableConv2D_2_b_5_fu_216_p0;
wire  signed [12:0] tmp_7_fu_220_p0;
wire   [5:0] p_shl_fu_240_p3;
wire   [6:0] p_shl_cast_fu_248_p1;
wire   [6:0] tmp_21_cast6_fu_236_p1;
wire   [6:0] tmp_23_cast_fu_278_p1;
wire   [6:0] tmp_fu_282_p2;
wire  signed [9:0] tmp_cast_fu_287_p1;
wire   [9:0] tmp_24_fu_291_p2;
wire  signed [31:0] tmp_25_cast_fu_296_p1;
wire   [8:0] tmp1_fu_327_p2;
wire   [9:0] tmp1_cast_fu_332_p1;
wire   [9:0] tmp_27_fu_336_p2;
wire  signed [31:0] tmp_32_cast_fu_341_p1;
wire   [5:0] tmp_29_cast2_fu_317_p1;
wire   [5:0] tmp_29_fu_350_p2;
wire   [14:0] tmp_12_fu_360_p1;
wire   [15:0] tmp_26_fu_364_p2;
wire   [0:0] tmp_13_fu_374_p3;
wire   [14:0] tmp_27_cast_fu_369_p2;
wire  signed [29:0] tmp_31_fu_414_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

pointwise_conv2d_fix_2_SeparableConv2D_2_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_2_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_2_b_s_address0),
    .ce0(SeparableConv2D_2_b_s_ce0),
    .q0(SeparableConv2D_2_b_s_q0)
);

pointwise_conv2d_fix_2_SeparableConv2D_2_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
SeparableConv2D_2_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_2_w_s_address0),
    .ce0(SeparableConv2D_2_w_s_ce0),
    .q0(SeparableConv2D_2_w_s_q0)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U48(
    .din0(input_load_reg_528),
    .din1(SeparableConv2D_2_w_3_reg_533),
    .dout(tmp_31_fu_414_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        in_d_reg_156 <= in_d_1_reg_503;
    end else if (((exitcond1_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_d_reg_156 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_reg_99 <= out_d_2_reg_434;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_99 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_262_p2 == 1'd1))) begin
        out_h_reg_121 <= out_h_2_reg_467;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_121 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_reg_132 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_w_reg_132 <= out_w_2_reg_485;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_load_1_reg_143 <= tmp_s_fu_405_p2;
    end else if (((exitcond1_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_load_1_reg_143 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul1_reg_110 <= next_mul2_reg_426;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_110 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul_reg_167 <= next_mul_reg_508;
    end else if (((exitcond1_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul_reg_167 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SeparableConv2D_2_b_5_reg_454 <= SeparableConv2D_2_b_5_fu_216_p1;
        tmp_19_reg_449[5 : 3] <= tmp_19_fu_209_p3[5 : 3];
        tmp_7_reg_459 <= tmp_7_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        SeparableConv2D_2_w_3_reg_533 <= SeparableConv2D_2_w_s_q0;
        input_load_reg_528 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_d_1_reg_503 <= in_d_1_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul2_reg_426 <= next_mul2_fu_182_p2;
        out_d_2_reg_434 <= out_d_2_fu_194_p2;
        phi_mul1_cast_reg_421[8 : 0] <= phi_mul1_cast_fu_178_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        next_mul_reg_508 <= next_mul_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_2_reg_467 <= out_h_2_fu_230_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_2_reg_485 <= out_w_2_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_addr_reg_495 <= tmp_25_fu_300_p1;
        tmp_23_cast4_reg_490[2 : 0] <= tmp_23_cast4_fu_274_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_305_p2 == 1'd1))) begin
        p_tmp_s_reg_523 <= p_tmp_s_fu_382_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_188_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_11_reg_439 <= tmp_11_fu_200_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_22_cast_reg_477 <= tmp_22_cast_fu_258_p1;
        tmp_22_reg_472 <= tmp_22_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_32_reg_538 <= {{tmp_31_fu_414_p2[29:14]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_2_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_2_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_2_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_2_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_d0 = p_tmp_cast_fu_410_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d0 = output_load_1_reg_143;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_188_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_305_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_2_b_5_fu_216_p0 = SeparableConv2D_2_b_s_q0;

assign SeparableConv2D_2_b_5_fu_216_p1 = SeparableConv2D_2_b_5_fu_216_p0;

assign SeparableConv2D_2_b_s_address0 = tmp_20_fu_204_p1;

assign SeparableConv2D_2_w_s_address0 = tmp_30_fu_355_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_262_p2 = ((out_w_reg_132 == 3'd7) ? 1'b1 : 1'b0);

assign exitcond2_fu_224_p2 = ((out_h_reg_121 == 3'd7) ? 1'b1 : 1'b0);

assign exitcond3_fu_188_p2 = ((out_d_reg_99 == 4'd8) ? 1'b1 : 1'b0);

assign exitcond_fu_305_p2 = ((in_d_reg_156 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_1_fu_311_p2 = (in_d_reg_156 + 4'd1);

assign input_r_address0 = tmp_28_fu_345_p1;

assign next_mul2_fu_182_p2 = (phi_mul1_reg_110 + 9'd49);

assign next_mul_fu_321_p2 = (phi_mul_reg_167 + 9'd49);

assign out_d_2_fu_194_p2 = (out_d_reg_99 + 4'd1);

assign out_h_2_fu_230_p2 = (out_h_reg_121 + 3'd1);

assign out_w_2_fu_268_p2 = (out_w_reg_132 + 3'd1);

assign output_r_address0 = output_addr_reg_495;

assign p_shl_cast_fu_248_p1 = p_shl_fu_240_p3;

assign p_shl_fu_240_p3 = {{out_h_reg_121}, {3'd0}};

assign p_tmp_cast_fu_410_p1 = p_tmp_s_reg_523;

assign p_tmp_s_fu_382_p3 = ((tmp_13_fu_374_p3[0:0] === 1'b1) ? 15'd0 : tmp_27_cast_fu_369_p2);

assign phi_mul1_cast_fu_178_p1 = phi_mul1_reg_110;

assign tmp1_cast_fu_332_p1 = tmp1_fu_327_p2;

assign tmp1_fu_327_p2 = (phi_mul_reg_167 + tmp_23_cast4_reg_490);

assign tmp_11_fu_200_p1 = out_d_reg_99[2:0];

assign tmp_12_fu_360_p1 = output_load_1_reg_143[14:0];

assign tmp_13_fu_374_p3 = tmp_26_fu_364_p2[32'd15];

assign tmp_19_fu_209_p3 = {{tmp_11_reg_439}, {3'd0}};

assign tmp_20_fu_204_p1 = out_d_reg_99;

assign tmp_21_cast6_fu_236_p1 = out_h_reg_121;

assign tmp_22_cast_fu_258_p1 = tmp_22_fu_252_p2;

assign tmp_22_fu_252_p2 = (p_shl_cast_fu_248_p1 - tmp_21_cast6_fu_236_p1);

assign tmp_23_cast4_fu_274_p1 = out_w_reg_132;

assign tmp_23_cast_fu_278_p1 = out_w_reg_132;

assign tmp_24_fu_291_p2 = ($signed(tmp_cast_fu_287_p1) + $signed(phi_mul1_cast_reg_421));

assign tmp_25_cast_fu_296_p1 = $signed(tmp_24_fu_291_p2);

assign tmp_25_fu_300_p1 = $unsigned(tmp_25_cast_fu_296_p1);

assign tmp_26_fu_364_p2 = ($signed(SeparableConv2D_2_b_5_reg_454) + $signed(output_load_1_reg_143));

assign tmp_27_cast_fu_369_p2 = ($signed(tmp_12_fu_360_p1) + $signed(tmp_7_reg_459));

assign tmp_27_fu_336_p2 = ($signed(tmp1_cast_fu_332_p1) + $signed(tmp_22_cast_reg_477));

assign tmp_28_fu_345_p1 = $unsigned(tmp_32_cast_fu_341_p1);

assign tmp_29_cast2_fu_317_p1 = in_d_reg_156;

assign tmp_29_fu_350_p2 = (tmp_19_reg_449 + tmp_29_cast2_fu_317_p1);

assign tmp_30_fu_355_p1 = tmp_29_fu_350_p2;

assign tmp_32_cast_fu_341_p1 = $signed(tmp_27_fu_336_p2);

assign tmp_7_fu_220_p0 = SeparableConv2D_2_b_s_q0;

assign tmp_7_fu_220_p1 = tmp_7_fu_220_p0;

assign tmp_cast_fu_287_p1 = $signed(tmp_fu_282_p2);

assign tmp_fu_282_p2 = ($signed(tmp_22_reg_472) + $signed(tmp_23_cast_fu_278_p1));

assign tmp_s_fu_405_p2 = (output_load_1_reg_143 + tmp_32_reg_538);

always @ (posedge ap_clk) begin
    phi_mul1_cast_reg_421[9] <= 1'b0;
    tmp_19_reg_449[2:0] <= 3'b000;
    tmp_23_cast4_reg_490[8:3] <= 6'b000000;
end

endmodule //pointwise_conv2d_fix_2
