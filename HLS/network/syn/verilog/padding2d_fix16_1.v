// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_depth;
input  [15:0] input_height;
input  [15:0] input_width;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [15:0] output_height;
input  [15:0] output_width;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[10:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_s_fu_220_p1;
reg   [31:0] tmp_s_reg_493;
wire   [16:0] tmp_15_fu_228_p2;
reg   [16:0] tmp_15_reg_498;
wire   [16:0] tmp_16_fu_234_p2;
reg   [16:0] tmp_16_reg_503;
wire   [31:0] tmp_17_fu_240_p1;
reg   [31:0] tmp_17_reg_508;
wire   [16:0] tmp_18_fu_248_p2;
reg   [16:0] tmp_18_reg_513;
wire   [31:0] tmp_19_fu_254_p1;
reg   [31:0] tmp_19_reg_520;
wire   [31:0] tmp_20_fu_258_p1;
reg   [31:0] tmp_20_reg_525;
wire   [16:0] tmp_21_fu_262_p2;
reg   [16:0] tmp_21_reg_532;
wire   [31:0] next_mul8_fu_268_p2;
reg   [31:0] next_mul8_reg_537;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul5_fu_273_p2;
reg   [31:0] next_mul5_reg_542;
wire   [15:0] depth_1_fu_283_p2;
reg   [15:0] depth_1_reg_550;
wire   [31:0] tmp_24_fu_289_p2;
reg   [31:0] tmp_24_reg_555;
wire   [0:0] exitcond_fu_278_p2;
wire   [31:0] next_mul_fu_294_p2;
reg   [31:0] next_mul_reg_561;
wire    ap_CS_fsm_state3;
wire   [15:0] height_1_fu_312_p2;
reg   [15:0] height_1_reg_569;
wire   [0:0] tmp_28_fu_318_p2;
reg   [0:0] tmp_28_reg_574;
wire   [0:0] tmp_27_fu_307_p2;
wire   [0:0] tmp_29_fu_324_p2;
reg   [0:0] tmp_29_reg_578;
wire  signed [31:0] tmp_56_fu_329_p2;
reg  signed [31:0] tmp_56_reg_582;
wire  signed [31:0] tmp_fu_345_p2;
reg  signed [31:0] tmp_reg_587;
wire   [15:0] width_2_fu_364_p2;
wire    ap_CS_fsm_state4;
wire  signed [31:0] tmp_33_fu_386_p2;
reg  signed [31:0] tmp_33_reg_600;
wire    ap_CS_fsm_state5;
reg   [10:0] output_addr_14_reg_605;
wire   [31:0] tmp7_fu_395_p2;
reg   [31:0] tmp7_reg_610;
wire   [15:0] width_3_fu_413_p2;
reg   [15:0] width_3_reg_618;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_41_fu_419_p2;
reg   [0:0] tmp_41_reg_623;
wire   [0:0] tmp_38_fu_408_p2;
wire   [0:0] tmp_46_fu_425_p2;
reg   [0:0] tmp_46_reg_627;
wire   [31:0] grp_fu_216_p2;
reg   [31:0] tmp_51_reg_636;
wire   [15:0] width_1_fu_472_p2;
wire    ap_CS_fsm_state8;
reg   [15:0] depth_reg_125;
reg  signed [31:0] phi_mul4_reg_136;
reg   [31:0] phi_mul7_reg_148;
reg   [15:0] height_reg_160;
reg   [31:0] phi_mul_reg_171;
reg   [15:0] width2_reg_183;
wire   [0:0] tmp_40_fu_359_p2;
reg   [15:0] width1_reg_194;
wire    ap_CS_fsm_state7;
reg   [15:0] width_reg_205;
wire   [0:0] tmp_31_fu_467_p2;
wire  signed [63:0] tmp_44_fu_381_p1;
wire  signed [63:0] tmp_45_fu_390_p1;
wire  signed [63:0] tmp_54_fu_430_p1;
wire  signed [63:0] tmp_50_fu_450_p1;
wire  signed [63:0] tmp_52_fu_455_p1;
wire  signed [63:0] tmp_36_fu_483_p1;
wire   [31:0] tmp_37_fu_399_p1;
wire   [16:0] tmp_cast_fu_224_p1;
wire   [16:0] tmp_17_cast_fu_244_p1;
wire   [15:0] tmp_24_fu_289_p1;
wire   [16:0] tmp_26_cast_fu_303_p1;
wire   [31:0] tmp_26_fu_299_p1;
wire   [16:0] tmp2_fu_335_p2;
wire  signed [31:0] tmp2_cast_fu_341_p1;
wire   [16:0] tmp_39_cast_fu_355_p1;
wire   [31:0] tmp_39_fu_351_p1;
wire   [31:0] tmp4_fu_370_p2;
wire   [31:0] tmp_43_fu_375_p2;
wire   [15:0] tmp_33_fu_386_p0;
wire   [15:0] tmp7_fu_395_p1;
wire   [16:0] tmp_37_cast_fu_404_p1;
wire   [16:0] tmp3_fu_435_p2;
wire  signed [31:0] tmp3_cast_fu_441_p1;
wire   [31:0] tmp_49_fu_445_p2;
wire   [16:0] tmp_30_cast_fu_463_p1;
wire   [31:0] tmp_30_fu_459_p1;
wire   [31:0] tmp_35_fu_478_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        depth_reg_125 <= depth_1_reg_550;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        depth_reg_125 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        height_reg_160 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & ((tmp_28_reg_574 == 1'd1) | ((tmp_29_reg_578 == 1'd0) | (tmp_38_fu_408_p2 == 1'd0))))) begin
        height_reg_160 <= height_1_reg_569;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul4_reg_136 <= next_mul5_reg_542;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul4_reg_136 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul7_reg_148 <= next_mul8_reg_537;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul7_reg_148 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_171 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & ((tmp_28_reg_574 == 1'd1) | ((tmp_29_reg_578 == 1'd0) | (tmp_38_fu_408_p2 == 1'd0))))) begin
        phi_mul_reg_171 <= next_mul_reg_561;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        width1_reg_194 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        width1_reg_194 <= width_3_reg_618;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_307_p2 == 1'd1) & (tmp_29_fu_324_p2 == 1'd0) & (tmp_28_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        width2_reg_183 <= 16'd0;
    end else if (((tmp_40_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        width2_reg_183 <= width_2_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_307_p2 == 1'd1) & (tmp_28_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        width_reg_205 <= 16'd0;
    end else if (((tmp_31_fu_467_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        width_reg_205 <= width_1_fu_472_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_1_reg_550 <= depth_1_fu_283_p2;
        next_mul5_reg_542 <= next_mul5_fu_273_p2;
        next_mul8_reg_537 <= next_mul8_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        height_1_reg_569 <= height_1_fu_312_p2;
        next_mul_reg_561 <= next_mul_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_addr_14_reg_605 <= tmp_45_fu_390_p1;
        tmp7_reg_610 <= tmp7_fu_395_p2;
        tmp_33_reg_600 <= tmp_33_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_15_reg_498 <= tmp_15_fu_228_p2;
        tmp_16_reg_503 <= tmp_16_fu_234_p2;
        tmp_17_reg_508[15 : 0] <= tmp_17_fu_240_p1[15 : 0];
        tmp_18_reg_513 <= tmp_18_fu_248_p2;
        tmp_19_reg_520[15 : 0] <= tmp_19_fu_254_p1[15 : 0];
        tmp_20_reg_525[15 : 0] <= tmp_20_fu_258_p1[15 : 0];
        tmp_21_reg_532 <= tmp_21_fu_262_p2;
        tmp_s_reg_493[15 : 0] <= tmp_s_fu_220_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_24_reg_555 <= tmp_24_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_28_reg_574 <= tmp_28_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_307_p2 == 1'd1) & (tmp_28_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_29_reg_578 <= tmp_29_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_41_reg_623 <= tmp_41_fu_419_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (tmp_41_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_46_reg_627 <= tmp_46_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_578 == 1'd1) & (tmp_46_fu_425_p2 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (tmp_41_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_51_reg_636 <= grp_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_fu_324_p2 == 1'd1) & (tmp_27_fu_307_p2 == 1'd1) & (tmp_28_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_56_reg_582 <= tmp_56_fu_329_p2;
        tmp_reg_587 <= tmp_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_578 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        width_3_reg_618 <= width_3_fu_413_p2;
    end
end

always @ (*) begin
    if ((((exitcond_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_36_fu_483_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_52_fu_455_p1;
    end else if (((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_41_fu_419_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        output_r_address0 = output_addr_14_reg_605;
    end else if (((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (tmp_46_fu_425_p2 == 1'd0) & (tmp_41_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        output_r_address0 = tmp_54_fu_430_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = tmp_44_fu_381_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | ((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_41_fu_419_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (tmp_46_fu_425_p2 == 1'd0) & (tmp_41_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | ((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_41_fu_419_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (tmp_46_fu_425_p2 == 1'd0) & (tmp_41_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_46_reg_627 == 1'd1) & (tmp_41_reg_623 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_31_fu_467_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)) | ((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_41_fu_419_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_29_reg_578 == 1'd1) & (tmp_38_fu_408_p2 == 1'd1) & (tmp_28_reg_574 == 1'd0) & (tmp_46_fu_425_p2 == 1'd0) & (tmp_41_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((tmp_40_fu_359_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_27_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_27_fu_307_p2 == 1'd1) & (tmp_28_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if (((tmp_27_fu_307_p2 == 1'd1) & (tmp_29_fu_324_p2 == 1'd0) & (tmp_28_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_40_fu_359_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & ((tmp_28_reg_574 == 1'd1) | ((tmp_29_reg_578 == 1'd0) | (tmp_38_fu_408_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((tmp_31_fu_467_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign depth_1_fu_283_p2 = (depth_reg_125 + 16'd1);

assign exitcond_fu_278_p2 = ((depth_reg_125 == input_depth) ? 1'b1 : 1'b0);

assign grp_fu_216_p2 = ($signed(tmp_33_reg_600) + $signed(tmp_37_fu_399_p1));

assign height_1_fu_312_p2 = (height_reg_160 + 16'd1);

assign input_r_address0 = tmp_50_fu_450_p1;

assign next_mul5_fu_273_p2 = ($signed(phi_mul4_reg_136) + $signed(tmp_19_reg_520));

assign next_mul8_fu_268_p2 = (phi_mul7_reg_148 + tmp_s_reg_493);

assign next_mul_fu_294_p2 = (phi_mul_reg_171 + tmp_20_reg_525);

assign tmp2_cast_fu_341_p1 = $signed(tmp2_fu_335_p2);

assign tmp2_fu_335_p2 = ($signed(tmp_26_cast_fu_303_p1) + $signed(17'd131071));

assign tmp3_cast_fu_441_p1 = $signed(tmp3_fu_435_p2);

assign tmp3_fu_435_p2 = ($signed(tmp_37_cast_fu_404_p1) + $signed(17'd131071));

assign tmp4_fu_370_p2 = (tmp_24_reg_555 + tmp_39_fu_351_p1);

assign tmp7_fu_395_p1 = tmp_17_reg_508;

assign tmp7_fu_395_p2 = ($signed(tmp_reg_587) * $signed({{1'b0}, {tmp7_fu_395_p1}}));

assign tmp_15_fu_228_p2 = (tmp_cast_fu_224_p1 + 17'd2);

assign tmp_16_fu_234_p2 = (tmp_cast_fu_224_p1 + 17'd1);

assign tmp_17_cast_fu_244_p1 = input_width;

assign tmp_17_fu_240_p1 = input_width;

assign tmp_18_fu_248_p2 = (tmp_17_cast_fu_244_p1 + 17'd2);

assign tmp_19_fu_254_p1 = output_height;

assign tmp_20_fu_258_p1 = output_width;

assign tmp_21_fu_262_p2 = (tmp_17_cast_fu_244_p1 + 17'd1);

assign tmp_24_fu_289_p1 = tmp_20_reg_525;

assign tmp_24_fu_289_p2 = ($signed(phi_mul4_reg_136) * $signed({{1'b0}, {tmp_24_fu_289_p1}}));

assign tmp_26_cast_fu_303_p1 = height_reg_160;

assign tmp_26_fu_299_p1 = height_reg_160;

assign tmp_27_fu_307_p2 = ((tmp_26_cast_fu_303_p1 < tmp_15_reg_498) ? 1'b1 : 1'b0);

assign tmp_28_fu_318_p2 = ((height_reg_160 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_29_fu_324_p2 = ((tmp_26_cast_fu_303_p1 < tmp_16_reg_503) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_463_p1 = width_reg_205;

assign tmp_30_fu_459_p1 = width_reg_205;

assign tmp_31_fu_467_p2 = ((tmp_30_cast_fu_463_p1 < tmp_18_reg_513) ? 1'b1 : 1'b0);

assign tmp_33_fu_386_p0 = tmp_20_reg_525;

assign tmp_33_fu_386_p2 = ($signed({{1'b0}, {tmp_33_fu_386_p0}}) * $signed(tmp_56_reg_582));

assign tmp_35_fu_478_p2 = (tmp_24_reg_555 + tmp_30_fu_459_p1);

assign tmp_36_fu_483_p1 = $signed(tmp_35_fu_478_p2);

assign tmp_37_cast_fu_404_p1 = width1_reg_194;

assign tmp_37_fu_399_p1 = width1_reg_194;

assign tmp_38_fu_408_p2 = ((tmp_37_cast_fu_404_p1 < tmp_18_reg_513) ? 1'b1 : 1'b0);

assign tmp_39_cast_fu_355_p1 = width2_reg_183;

assign tmp_39_fu_351_p1 = width2_reg_183;

assign tmp_40_fu_359_p2 = ((tmp_39_cast_fu_355_p1 < tmp_18_reg_513) ? 1'b1 : 1'b0);

assign tmp_41_fu_419_p2 = ((width1_reg_194 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_43_fu_375_p2 = (tmp4_fu_370_p2 + phi_mul_reg_171);

assign tmp_44_fu_381_p1 = $signed(tmp_43_fu_375_p2);

assign tmp_45_fu_390_p1 = tmp_33_fu_386_p2;

assign tmp_46_fu_425_p2 = ((tmp_37_cast_fu_404_p1 < tmp_21_reg_532) ? 1'b1 : 1'b0);

assign tmp_49_fu_445_p2 = ($signed(tmp3_cast_fu_441_p1) + $signed(tmp7_reg_610));

assign tmp_50_fu_450_p1 = $signed(tmp_49_fu_445_p2);

assign tmp_52_fu_455_p1 = $signed(tmp_51_reg_636);

assign tmp_54_fu_430_p1 = $signed(grp_fu_216_p2);

assign tmp_56_fu_329_p2 = ($signed(tmp_26_fu_299_p1) + $signed(phi_mul4_reg_136));

assign tmp_cast_fu_224_p1 = input_height;

assign tmp_fu_345_p2 = ($signed(tmp2_cast_fu_341_p1) + $signed(phi_mul7_reg_148));

assign tmp_s_fu_220_p1 = input_height;

assign width_1_fu_472_p2 = (width_reg_205 + 16'd1);

assign width_2_fu_364_p2 = (width2_reg_183 + 16'd1);

assign width_3_fu_413_p2 = (width1_reg_194 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_s_reg_493[31:16] <= 16'b0000000000000000;
    tmp_17_reg_508[31:16] <= 16'b0000000000000000;
    tmp_19_reg_520[31:16] <= 16'b0000000000000000;
    tmp_20_reg_525[31:16] <= 16'b0000000000000000;
end

endmodule //padding2d_fix16_1
