// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_depth;
input  [15:0] input_height;
input  [15:0] input_width;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[10:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
(* use_dsp48 = "no" *) wire  signed [15:0] tmp_fu_291_p2;
reg  signed [15:0] tmp_reg_554;
wire  signed [15:0] tmp_42_fu_528_p2;
reg  signed [15:0] tmp_42_reg_561;
wire    ap_CS_fsm_state2;
wire   [15:0] tmp_13_fu_297_p2;
reg   [15:0] tmp_13_reg_573;
wire  signed [15:0] tmp_41_fu_534_p2;
reg  signed [15:0] tmp_41_reg_578;
wire   [15:0] tmp_43_fu_302_p2;
reg   [15:0] tmp_43_reg_583;
wire   [16:0] tmp_45_fu_310_p2;
reg   [16:0] tmp_45_reg_589;
wire   [15:0] tmp_46_fu_316_p2;
reg   [15:0] tmp_46_reg_594;
wire   [16:0] tmp_47_fu_321_p2;
reg   [16:0] tmp_47_reg_600;
wire   [15:0] tmp_17_fu_332_p2;
reg   [15:0] tmp_17_reg_605;
wire   [15:0] tmp_18_fu_343_p2;
reg   [15:0] tmp_18_reg_610;
wire   [15:0] depth_1_fu_354_p2;
reg   [15:0] depth_1_reg_618;
wire    ap_CS_fsm_state3;
wire   [15:0] i_1_fu_369_p2;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_51_fu_380_p2;
wire   [0:0] tmp_49_fu_364_p2;
wire   [15:0] tmp_53_fu_392_p2;
(* use_dsp48 = "no" *) wire   [15:0] i_count_3_fu_397_p2;
reg   [15:0] i_count_3_reg_641;
(* use_dsp48 = "no" *) wire   [15:0] tmp_55_fu_407_p2;
reg   [15:0] tmp_55_reg_646;
wire   [15:0] height_1_fu_417_p2;
reg   [15:0] height_1_reg_655;
wire    ap_CS_fsm_state5;
wire   [15:0] tmp_56_fu_423_p2;
reg   [15:0] tmp_56_reg_660;
wire   [0:0] exitcond2_fu_412_p2;
wire   [15:0] o_count_8_fu_438_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond3_fu_427_p2;
wire   [15:0] tmp_64_fu_444_p2;
reg   [15:0] tmp_64_reg_673;
wire   [15:0] tmp_65_fu_449_p2;
reg   [15:0] tmp_65_reg_678;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_454_p2;
wire   [15:0] tmp_68_fu_465_p2;
reg   [15:0] tmp_68_reg_691;
wire   [15:0] indvars_iv_next2_fu_471_p2;
wire   [15:0] indvars_iv_next9_fu_476_p2;
wire   [15:0] o_count_9_fu_486_p2;
wire    ap_CS_fsm_state8;
wire   [15:0] i_2_fu_501_p2;
wire    ap_CS_fsm_state9;
wire   [15:0] o_count_7_fu_512_p2;
wire   [0:0] tmp_58_fu_496_p2;
wire   [15:0] indvars_iv_next1_fu_518_p2;
wire   [15:0] indvars_iv_next_fu_523_p2;
reg   [15:0] indvars_iv_reg_110;
reg   [15:0] indvars_iv2_reg_120;
reg   [15:0] o_count_reg_130;
reg   [15:0] i_count_reg_142;
reg   [15:0] depth_reg_154;
reg   [15:0] o_count_1_reg_165;
wire   [0:0] exitcond1_fu_349_p2;
reg   [15:0] i_reg_175;
reg   [15:0] o_count_6_reg_186;
reg   [15:0] indvars_iv8_reg_197;
reg   [15:0] o_count_2_reg_207;
reg   [15:0] i_count_1_reg_218;
reg   [15:0] height_reg_229;
reg   [15:0] o_count_3_reg_240;
reg   [15:0] o_count_4_reg_250;
reg   [15:0] i_count_2_reg_261;
reg   [15:0] o_count_5_reg_271;
reg   [15:0] i2_reg_280;
wire   [63:0] tmp_50_fu_375_p1;
wire   [63:0] tmp_s_fu_433_p1;
wire   [63:0] tmp_66_fu_460_p1;
wire   [63:0] tmp_67_fu_481_p1;
wire   [63:0] tmp_59_fu_507_p1;
wire  signed [15:0] tmp_fu_291_p1;
wire  signed [15:0] tmp_13_fu_297_p0;
wire  signed [15:0] tmp_43_fu_302_p1;
wire  signed [15:0] tmp_44_cast_fu_307_p0;
wire   [16:0] tmp_44_cast_fu_307_p1;
wire  signed [15:0] tmp_46_fu_316_p1;
(* use_dsp48 = "no" *) wire   [15:0] tmp3_fu_327_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp4_fu_338_p2;
wire   [16:0] tmp_48_cast_fu_360_p1;
wire   [15:0] tmp1_fu_386_p2;
wire   [15:0] tmp2_fu_402_p2;
wire  signed [15:0] exitcond2_fu_412_p1;
wire  signed [15:0] tmp_64_fu_444_p1;
wire   [16:0] tmp_57_cast_fu_492_p1;
wire  signed [15:0] tmp_42_fu_528_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

network_mul_mul_16s_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
network_mul_mul_16s_16s_16_1_1_U94(
    .din0(input_height),
    .din1(tmp_42_fu_528_p1),
    .dout(tmp_42_fu_528_p2)
);

network_mul_mul_16s_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
network_mul_mul_16s_16s_16_1_1_U95(
    .din0(input_width),
    .din1(input_height),
    .dout(tmp_41_fu_534_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_reg_154 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_58_fu_496_p2 == 1'd0))) begin
        depth_reg_154 <= depth_1_reg_618;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        height_reg_229 <= 16'd0;
    end else if (((exitcond_fu_454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        height_reg_229 <= height_1_reg_655;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_58_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i2_reg_280 <= i_2_fu_501_p2;
    end else if (((exitcond2_fu_412_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_reg_280 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_count_1_reg_218 <= i_count_reg_142;
    end else if (((exitcond_fu_454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_count_1_reg_218 <= tmp_64_reg_673;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_count_2_reg_261 <= tmp_68_reg_691;
    end else if (((exitcond3_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_count_2_reg_261 <= i_count_1_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_reg_142 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_58_fu_496_p2 == 1'd0))) begin
        i_count_reg_142 <= i_count_3_reg_641;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_349_p2 == 1'd0))) begin
        i_reg_175 <= 16'd0;
    end else if (((tmp_49_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_175 <= i_1_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv2_reg_120 <= tmp_43_fu_302_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_58_fu_496_p2 == 1'd0))) begin
        indvars_iv2_reg_120 <= indvars_iv_next1_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        indvars_iv8_reg_197 <= tmp_53_fu_392_p2;
    end else if (((exitcond_fu_454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        indvars_iv8_reg_197 <= indvars_iv_next9_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_110 <= tmp_46_fu_316_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_58_fu_496_p2 == 1'd0))) begin
        indvars_iv_reg_110 <= indvars_iv_next_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_349_p2 == 1'd0))) begin
        o_count_1_reg_165 <= o_count_reg_130;
    end else if (((tmp_49_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_1_reg_165 <= tmp_51_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_2_reg_207 <= indvars_iv2_reg_120;
    end else if (((exitcond_fu_454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        o_count_2_reg_207 <= tmp_65_reg_678;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_412_p2 == 1'd0))) begin
        o_count_3_reg_240 <= o_count_2_reg_207;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_427_p2 == 1'd0))) begin
        o_count_3_reg_240 <= o_count_8_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        o_count_4_reg_250 <= o_count_9_fu_486_p2;
    end else if (((exitcond3_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        o_count_4_reg_250 <= o_count_6_reg_186;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_58_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        o_count_5_reg_271 <= o_count_7_fu_512_p2;
    end else if (((exitcond2_fu_412_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        o_count_5_reg_271 <= tmp_55_reg_646;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_6_reg_186 <= indvars_iv_reg_110;
    end else if (((exitcond_fu_454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        o_count_6_reg_186 <= indvars_iv_next2_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_count_reg_130 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_58_fu_496_p2 == 1'd0))) begin
        o_count_reg_130 <= tmp_56_reg_660;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_1_reg_618 <= depth_1_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        height_1_reg_655 <= height_1_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_count_3_reg_641 <= i_count_3_fu_397_p2;
        tmp_55_reg_646 <= tmp_55_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_13_reg_573[15 : 1] <= tmp_13_fu_297_p2[15 : 1];
        tmp_17_reg_605 <= tmp_17_fu_332_p2;
        tmp_18_reg_610 <= tmp_18_fu_343_p2;
        tmp_41_reg_578 <= tmp_41_fu_534_p2;
        tmp_43_reg_583 <= tmp_43_fu_302_p2;
        tmp_45_reg_589 <= tmp_45_fu_310_p2;
        tmp_46_reg_594 <= tmp_46_fu_316_p2;
        tmp_47_reg_600 <= tmp_47_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_42_reg_561 <= tmp_42_fu_528_p2;
        tmp_reg_554 <= tmp_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_412_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_56_reg_660 <= tmp_56_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_64_reg_673 <= tmp_64_fu_444_p2;
        tmp_65_reg_678 <= tmp_65_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_454_p2 == 1'd0))) begin
        tmp_68_reg_691 <= tmp_68_fu_465_p2;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_59_fu_507_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_67_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = tmp_s_fu_433_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = tmp_50_fu_375_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((tmp_49_fu_364_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_58_fu_496_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_427_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_49_fu_364_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond2_fu_412_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond3_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond_fu_454_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_58_fu_496_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_1_fu_354_p2 = (depth_reg_154 + 16'd1);

assign exitcond1_fu_349_p2 = ((depth_reg_154 == input_depth) ? 1'b1 : 1'b0);

assign exitcond2_fu_412_p1 = input_height;

assign exitcond2_fu_412_p2 = ((height_reg_229 == exitcond2_fu_412_p1) ? 1'b1 : 1'b0);

assign exitcond3_fu_427_p2 = ((o_count_3_reg_240 == o_count_6_reg_186) ? 1'b1 : 1'b0);

assign exitcond_fu_454_p2 = ((o_count_4_reg_250 == indvars_iv8_reg_197) ? 1'b1 : 1'b0);

assign height_1_fu_417_p2 = (height_reg_229 + 16'd1);

assign i_1_fu_369_p2 = (i_reg_175 + 16'd1);

assign i_2_fu_501_p2 = (i2_reg_280 + 16'd1);

assign i_count_3_fu_397_p2 = ($signed(tmp_41_reg_578) + $signed(i_count_reg_142));

assign indvars_iv_next1_fu_518_p2 = (indvars_iv2_reg_120 + tmp_17_reg_605);

assign indvars_iv_next2_fu_471_p2 = ($signed(tmp_reg_554) + $signed(o_count_6_reg_186));

assign indvars_iv_next9_fu_476_p2 = ($signed(tmp_reg_554) + $signed(indvars_iv8_reg_197));

assign indvars_iv_next_fu_523_p2 = (indvars_iv_reg_110 + tmp_18_reg_610);

assign input_r_address0 = tmp_66_fu_460_p1;

assign o_count_7_fu_512_p2 = (o_count_5_reg_271 + 16'd1);

assign o_count_8_fu_438_p2 = (o_count_3_reg_240 + 16'd1);

assign o_count_9_fu_486_p2 = (o_count_4_reg_250 + 16'd1);

assign tmp1_fu_386_p2 = (o_count_reg_130 + 16'd3);

assign tmp2_fu_402_p2 = (tmp_43_reg_583 + o_count_reg_130);

assign tmp3_fu_327_p2 = ($signed(tmp_43_fu_302_p2) + $signed(tmp_42_reg_561));

assign tmp4_fu_338_p2 = ($signed(16'd4) + $signed(tmp_42_reg_561));

assign tmp_13_fu_297_p0 = input_width;

assign tmp_13_fu_297_p2 = tmp_13_fu_297_p0 << 16'd1;

assign tmp_17_fu_332_p2 = (tmp3_fu_327_p2 + tmp_46_fu_316_p2);

assign tmp_18_fu_343_p2 = (tmp4_fu_338_p2 + tmp_13_fu_297_p2);

assign tmp_42_fu_528_p1 = ($signed(16'd2) + $signed(tmp_fu_291_p1));

assign tmp_43_fu_302_p1 = input_width;

assign tmp_43_fu_302_p2 = ($signed(16'd1) + $signed(tmp_43_fu_302_p1));

assign tmp_44_cast_fu_307_p0 = input_width;

assign tmp_44_cast_fu_307_p1 = $unsigned(tmp_44_cast_fu_307_p0);

assign tmp_45_fu_310_p2 = (17'd1 + tmp_44_cast_fu_307_p1);

assign tmp_46_fu_316_p1 = input_width;

assign tmp_46_fu_316_p2 = ($signed(16'd3) + $signed(tmp_46_fu_316_p1));

assign tmp_47_fu_321_p2 = (17'd3 + tmp_44_cast_fu_307_p1);

assign tmp_48_cast_fu_360_p1 = i_reg_175;

assign tmp_49_fu_364_p2 = ((tmp_48_cast_fu_360_p1 < tmp_45_reg_589) ? 1'b1 : 1'b0);

assign tmp_50_fu_375_p1 = o_count_1_reg_165;

assign tmp_51_fu_380_p2 = (o_count_1_reg_165 + 16'd1);

assign tmp_53_fu_392_p2 = (tmp1_fu_386_p2 + tmp_13_reg_573);

assign tmp_55_fu_407_p2 = ($signed(tmp2_fu_402_p2) + $signed(tmp_42_reg_561));

assign tmp_56_fu_423_p2 = (tmp_55_reg_646 + tmp_46_reg_594);

assign tmp_57_cast_fu_492_p1 = i2_reg_280;

assign tmp_58_fu_496_p2 = ((tmp_57_cast_fu_492_p1 < tmp_47_reg_600) ? 1'b1 : 1'b0);

assign tmp_59_fu_507_p1 = o_count_5_reg_271;

assign tmp_64_fu_444_p1 = input_width;

assign tmp_64_fu_444_p2 = ($signed(i_count_1_reg_218) + $signed(tmp_64_fu_444_p1));

assign tmp_65_fu_449_p2 = ($signed(tmp_reg_554) + $signed(o_count_2_reg_207));

assign tmp_66_fu_460_p1 = i_count_2_reg_261;

assign tmp_67_fu_481_p1 = o_count_4_reg_250;

assign tmp_68_fu_465_p2 = (i_count_2_reg_261 + 16'd1);

assign tmp_fu_291_p1 = input_width;

assign tmp_fu_291_p2 = ($signed(16'd2) + $signed(tmp_fu_291_p1));

assign tmp_s_fu_433_p1 = o_count_3_reg_240;

always @ (posedge ap_clk) begin
    tmp_13_reg_573[0] <= 1'b0;
end

endmodule //padding2d_fix16_1
