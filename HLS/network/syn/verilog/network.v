// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="network,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.585000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=21,HLS_SYN_DSP=10,HLS_SYN_FF=1814,HLS_SYN_LUT=3162,HLS_VERSION=2018_3}" *)

module network (
        ap_clk,
        ap_rst_n,
        input_data_TDATA,
        input_data_TVALID,
        input_data_TREADY,
        input_data_TKEEP,
        input_data_TSTRB,
        input_data_TUSER,
        input_data_TLAST,
        input_data_TID,
        input_data_TDEST,
        output_data_TDATA,
        output_data_TVALID,
        output_data_TREADY,
        output_data_TKEEP,
        output_data_TSTRB,
        output_data_TUSER,
        output_data_TLAST,
        output_data_TID,
        output_data_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] input_data_TDATA;
input   input_data_TVALID;
output   input_data_TREADY;
input  [1:0] input_data_TKEEP;
input  [1:0] input_data_TSTRB;
input  [0:0] input_data_TUSER;
input  [0:0] input_data_TLAST;
input  [0:0] input_data_TID;
input  [0:0] input_data_TDEST;
output  [15:0] output_data_TDATA;
output   output_data_TVALID;
input   output_data_TREADY;
output  [1:0] output_data_TKEEP;
output  [1:0] output_data_TSTRB;
output  [0:0] output_data_TUSER;
output  [0:0] output_data_TLAST;
output  [0:0] output_data_TID;
output  [0:0] output_data_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [15:0] input_data_V_data_V_0_data_out;
wire    input_data_V_data_V_0_vld_in;
wire    input_data_V_data_V_0_vld_out;
wire    input_data_V_data_V_0_ack_in;
reg    input_data_V_data_V_0_ack_out;
reg   [15:0] input_data_V_data_V_0_payload_A;
reg   [15:0] input_data_V_data_V_0_payload_B;
reg    input_data_V_data_V_0_sel_rd;
reg    input_data_V_data_V_0_sel_wr;
wire    input_data_V_data_V_0_sel;
wire    input_data_V_data_V_0_load_A;
wire    input_data_V_data_V_0_load_B;
reg   [1:0] input_data_V_data_V_0_state;
wire    input_data_V_data_V_0_state_cmp_full;
reg   [1:0] input_data_V_keep_V_0_data_out;
wire    input_data_V_keep_V_0_vld_in;
wire    input_data_V_keep_V_0_vld_out;
wire    input_data_V_keep_V_0_ack_in;
reg    input_data_V_keep_V_0_ack_out;
reg   [1:0] input_data_V_keep_V_0_payload_A;
reg   [1:0] input_data_V_keep_V_0_payload_B;
reg    input_data_V_keep_V_0_sel_rd;
reg    input_data_V_keep_V_0_sel_wr;
wire    input_data_V_keep_V_0_sel;
wire    input_data_V_keep_V_0_load_A;
wire    input_data_V_keep_V_0_load_B;
reg   [1:0] input_data_V_keep_V_0_state;
wire    input_data_V_keep_V_0_state_cmp_full;
reg   [1:0] input_data_V_strb_V_0_data_out;
wire    input_data_V_strb_V_0_vld_in;
wire    input_data_V_strb_V_0_vld_out;
wire    input_data_V_strb_V_0_ack_in;
reg    input_data_V_strb_V_0_ack_out;
reg   [1:0] input_data_V_strb_V_0_payload_A;
reg   [1:0] input_data_V_strb_V_0_payload_B;
reg    input_data_V_strb_V_0_sel_rd;
reg    input_data_V_strb_V_0_sel_wr;
wire    input_data_V_strb_V_0_sel;
wire    input_data_V_strb_V_0_load_A;
wire    input_data_V_strb_V_0_load_B;
reg   [1:0] input_data_V_strb_V_0_state;
wire    input_data_V_strb_V_0_state_cmp_full;
reg   [0:0] input_data_V_id_V_0_data_out;
wire    input_data_V_id_V_0_vld_in;
wire    input_data_V_id_V_0_vld_out;
wire    input_data_V_id_V_0_ack_in;
reg    input_data_V_id_V_0_ack_out;
reg   [0:0] input_data_V_id_V_0_payload_A;
reg   [0:0] input_data_V_id_V_0_payload_B;
reg    input_data_V_id_V_0_sel_rd;
reg    input_data_V_id_V_0_sel_wr;
wire    input_data_V_id_V_0_sel;
wire    input_data_V_id_V_0_load_A;
wire    input_data_V_id_V_0_load_B;
reg   [1:0] input_data_V_id_V_0_state;
wire    input_data_V_id_V_0_state_cmp_full;
reg   [0:0] input_data_V_dest_V_0_data_out;
wire    input_data_V_dest_V_0_vld_in;
wire    input_data_V_dest_V_0_vld_out;
wire    input_data_V_dest_V_0_ack_in;
reg    input_data_V_dest_V_0_ack_out;
reg   [0:0] input_data_V_dest_V_0_payload_A;
reg   [0:0] input_data_V_dest_V_0_payload_B;
reg    input_data_V_dest_V_0_sel_rd;
reg    input_data_V_dest_V_0_sel_wr;
wire    input_data_V_dest_V_0_sel;
wire    input_data_V_dest_V_0_load_A;
wire    input_data_V_dest_V_0_load_B;
reg   [1:0] input_data_V_dest_V_0_state;
wire    input_data_V_dest_V_0_state_cmp_full;
reg   [15:0] output_data_V_data_V_1_data_out;
reg    output_data_V_data_V_1_vld_in;
wire    output_data_V_data_V_1_vld_out;
wire    output_data_V_data_V_1_ack_in;
wire    output_data_V_data_V_1_ack_out;
reg   [15:0] output_data_V_data_V_1_payload_A;
reg   [15:0] output_data_V_data_V_1_payload_B;
reg    output_data_V_data_V_1_sel_rd;
reg    output_data_V_data_V_1_sel_wr;
wire    output_data_V_data_V_1_sel;
wire    output_data_V_data_V_1_load_A;
wire    output_data_V_data_V_1_load_B;
reg   [1:0] output_data_V_data_V_1_state;
wire    output_data_V_data_V_1_state_cmp_full;
reg   [1:0] output_data_V_keep_V_1_data_out;
reg    output_data_V_keep_V_1_vld_in;
wire    output_data_V_keep_V_1_vld_out;
wire    output_data_V_keep_V_1_ack_in;
wire    output_data_V_keep_V_1_ack_out;
reg   [1:0] output_data_V_keep_V_1_payload_A;
reg   [1:0] output_data_V_keep_V_1_payload_B;
reg    output_data_V_keep_V_1_sel_rd;
reg    output_data_V_keep_V_1_sel_wr;
wire    output_data_V_keep_V_1_sel;
wire    output_data_V_keep_V_1_load_A;
wire    output_data_V_keep_V_1_load_B;
reg   [1:0] output_data_V_keep_V_1_state;
wire    output_data_V_keep_V_1_state_cmp_full;
reg   [1:0] output_data_V_strb_V_1_data_out;
reg    output_data_V_strb_V_1_vld_in;
wire    output_data_V_strb_V_1_vld_out;
wire    output_data_V_strb_V_1_ack_in;
wire    output_data_V_strb_V_1_ack_out;
reg   [1:0] output_data_V_strb_V_1_payload_A;
reg   [1:0] output_data_V_strb_V_1_payload_B;
reg    output_data_V_strb_V_1_sel_rd;
reg    output_data_V_strb_V_1_sel_wr;
wire    output_data_V_strb_V_1_sel;
wire    output_data_V_strb_V_1_load_A;
wire    output_data_V_strb_V_1_load_B;
reg   [1:0] output_data_V_strb_V_1_state;
wire    output_data_V_strb_V_1_state_cmp_full;
reg   [0:0] output_data_V_user_V_1_data_out;
reg    output_data_V_user_V_1_vld_in;
wire    output_data_V_user_V_1_vld_out;
wire    output_data_V_user_V_1_ack_in;
wire    output_data_V_user_V_1_ack_out;
reg   [0:0] output_data_V_user_V_1_payload_A;
reg   [0:0] output_data_V_user_V_1_payload_B;
reg    output_data_V_user_V_1_sel_rd;
reg    output_data_V_user_V_1_sel_wr;
wire    output_data_V_user_V_1_sel;
wire    output_data_V_user_V_1_load_A;
wire    output_data_V_user_V_1_load_B;
reg   [1:0] output_data_V_user_V_1_state;
wire    output_data_V_user_V_1_state_cmp_full;
reg   [0:0] output_data_V_last_V_1_data_out;
reg    output_data_V_last_V_1_vld_in;
wire    output_data_V_last_V_1_vld_out;
wire    output_data_V_last_V_1_ack_in;
wire    output_data_V_last_V_1_ack_out;
reg   [0:0] output_data_V_last_V_1_payload_A;
reg   [0:0] output_data_V_last_V_1_payload_B;
reg    output_data_V_last_V_1_sel_rd;
reg    output_data_V_last_V_1_sel_wr;
wire    output_data_V_last_V_1_sel;
wire    output_data_V_last_V_1_load_A;
wire    output_data_V_last_V_1_load_B;
reg   [1:0] output_data_V_last_V_1_state;
wire    output_data_V_last_V_1_state_cmp_full;
reg   [0:0] output_data_V_id_V_1_data_out;
reg    output_data_V_id_V_1_vld_in;
wire    output_data_V_id_V_1_vld_out;
wire    output_data_V_id_V_1_ack_in;
wire    output_data_V_id_V_1_ack_out;
reg   [0:0] output_data_V_id_V_1_payload_A;
reg   [0:0] output_data_V_id_V_1_payload_B;
reg    output_data_V_id_V_1_sel_rd;
reg    output_data_V_id_V_1_sel_wr;
wire    output_data_V_id_V_1_sel;
wire    output_data_V_id_V_1_load_A;
wire    output_data_V_id_V_1_load_B;
reg   [1:0] output_data_V_id_V_1_state;
wire    output_data_V_id_V_1_state_cmp_full;
reg   [0:0] output_data_V_dest_V_1_data_out;
reg    output_data_V_dest_V_1_vld_in;
wire    output_data_V_dest_V_1_vld_out;
wire    output_data_V_dest_V_1_ack_in;
wire    output_data_V_dest_V_1_ack_out;
reg   [0:0] output_data_V_dest_V_1_payload_A;
reg   [0:0] output_data_V_dest_V_1_payload_B;
reg    output_data_V_dest_V_1_sel_rd;
reg    output_data_V_dest_V_1_sel_wr;
wire    output_data_V_dest_V_1_sel;
wire    output_data_V_dest_V_1_load_A;
wire    output_data_V_dest_V_1_load_B;
reg   [1:0] output_data_V_dest_V_1_state;
wire    output_data_V_dest_V_1_state_cmp_full;
reg   [9:0] Padding2D_0_array_address0;
reg    Padding2D_0_array_ce0;
reg    Padding2D_0_array_we0;
wire   [15:0] Padding2D_0_array_q0;
reg   [15:0] Padding2D_0_depth;
reg   [15:0] Padding2D_0_height;
reg   [15:0] Padding2D_0_width;
reg   [15:0] SeparableConv2D_0_de;
reg   [15:0] SeparableConv2D_0_he;
reg   [15:0] SeparableConv2D_0_wi;
reg   [9:0] SeparableConv2D_0_m_s_address0;
reg    SeparableConv2D_0_m_s_ce0;
reg    SeparableConv2D_0_m_s_we0;
wire   [15:0] SeparableConv2D_0_m_s_q0;
reg    input_data_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_469_p2;
reg    output_data_TDATA_blk_n;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire   [4:0] height_2_fu_415_p2;
reg   [4:0] height_2_reg_801;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_3_fu_445_p2;
reg   [10:0] tmp_3_reg_806;
wire   [0:0] exitcond4_fu_409_p2;
wire   [10:0] tmp_6_fu_463_p2;
reg   [10:0] tmp_6_reg_811;
wire   [4:0] width_1_fu_475_p2;
reg    ap_block_state3;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire   [31:0] depth_fu_558_p2;
reg   [31:0] depth_reg_860;
wire    ap_CS_fsm_state9;
wire   [37:0] tmp_9_fu_588_p2;
reg   [37:0] tmp_9_reg_865;
wire   [0:0] tmp_20_fu_552_p2;
wire   [31:0] height_1_fu_604_p2;
reg   [31:0] height_1_reg_873;
wire    ap_CS_fsm_state10;
wire   [10:0] tmp_15_fu_643_p2;
reg   [10:0] tmp_15_reg_878;
wire   [0:0] tmp_23_fu_598_p2;
wire   [10:0] tmp_18_fu_673_p2;
reg   [10:0] tmp_18_reg_883;
wire   [16:0] tmp_25_cast_fu_683_p1;
reg   [16:0] tmp_25_cast_reg_888;
wire    ap_CS_fsm_state11;
wire   [31:0] width_2_fu_693_p2;
reg   [31:0] width_2_reg_896;
wire   [0:0] tmp_26_fu_687_p2;
wire   [10:0] tmp_21_fu_713_p2;
reg   [10:0] tmp_21_reg_906;
wire   [0:0] tmp_user_V_fu_730_p2;
reg   [0:0] tmp_user_V_reg_911;
wire   [0:0] tmp_29_fu_750_p2;
reg   [0:0] tmp_29_reg_916;
wire    ap_CS_fsm_state12;
reg   [15:0] tmp_data_V_1_reg_940;
wire   [1:0] out_0_keep_V_q0;
wire   [1:0] out_0_strb_V_q0;
wire   [0:0] out_0_id_V_q0;
wire   [0:0] out_0_dest_V_q0;
reg   [9:0] input_0_array_0_address0;
reg    input_0_array_0_ce0;
reg    input_0_array_0_we0;
wire   [15:0] input_0_array_0_q0;
reg   [9:0] out_0_keep_V_address0;
reg    out_0_keep_V_ce0;
reg    out_0_keep_V_we0;
reg   [9:0] out_0_strb_V_address0;
reg    out_0_strb_V_ce0;
reg    out_0_strb_V_we0;
reg   [9:0] out_0_id_V_address0;
reg    out_0_id_V_ce0;
reg    out_0_id_V_we0;
reg   [9:0] out_0_dest_V_address0;
reg    out_0_dest_V_ce0;
reg    out_0_dest_V_we0;
wire    grp_depthwise_conv2d_fix_fu_358_ap_start;
wire    grp_depthwise_conv2d_fix_fu_358_ap_done;
wire    grp_depthwise_conv2d_fix_fu_358_ap_idle;
wire    grp_depthwise_conv2d_fix_fu_358_ap_ready;
wire   [9:0] grp_depthwise_conv2d_fix_fu_358_input_r_address0;
wire    grp_depthwise_conv2d_fix_fu_358_input_r_ce0;
wire   [9:0] grp_depthwise_conv2d_fix_fu_358_output_r_address0;
wire    grp_depthwise_conv2d_fix_fu_358_output_r_ce0;
wire    grp_depthwise_conv2d_fix_fu_358_output_r_we0;
wire   [15:0] grp_depthwise_conv2d_fix_fu_358_output_r_d0;
wire    grp_pointwise_conv2d_fix_fu_373_ap_start;
wire    grp_pointwise_conv2d_fix_fu_373_ap_done;
wire    grp_pointwise_conv2d_fix_fu_373_ap_idle;
wire    grp_pointwise_conv2d_fix_fu_373_ap_ready;
wire   [9:0] grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_address0;
wire    grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_ce0;
wire    grp_padding2d_fix16_fu_387_ap_start;
wire    grp_padding2d_fix16_fu_387_ap_done;
wire    grp_padding2d_fix16_fu_387_ap_idle;
wire    grp_padding2d_fix16_fu_387_ap_ready;
wire   [9:0] grp_padding2d_fix16_fu_387_input_0_address0;
wire    grp_padding2d_fix16_fu_387_input_0_ce0;
wire   [9:0] grp_padding2d_fix16_fu_387_output_r_address0;
wire    grp_padding2d_fix16_fu_387_output_r_ce0;
wire    grp_padding2d_fix16_fu_387_output_r_we0;
wire   [15:0] grp_padding2d_fix16_fu_387_output_r_d0;
reg   [4:0] height_reg_284;
reg   [4:0] width_reg_295;
reg   [31:0] depth7_reg_306;
wire    ap_CS_fsm_state8;
reg  signed [31:0] height8_reg_318;
reg   [31:0] width9_reg_330;
reg   [0:0] tmp_last_V_reg_342;
wire   [0:0] tmp_33_fu_792_p2;
wire   [0:0] tmp_31_fu_777_p2;
reg    grp_depthwise_conv2d_fix_fu_358_ap_start_reg;
wire    ap_CS_fsm_state6;
reg    grp_pointwise_conv2d_fix_fu_373_ap_start_reg;
reg    grp_padding2d_fix16_fu_387_ap_start_reg;
wire    ap_CS_fsm_state4;
wire  signed [63:0] tmp_10_cast_fu_515_p1;
wire  signed [63:0] tmp_11_cast_fu_525_p1;
wire   [63:0] tmp_19_cast_fu_708_p1;
wire  signed [63:0] tmp_21_cast_fu_756_p1;
wire   [9:0] tmp_1_fu_421_p3;
wire   [6:0] tmp_2_fu_433_p3;
wire   [10:0] p_shl2_cast_fu_429_p1;
wire   [10:0] p_shl3_cast_fu_441_p1;
wire   [5:0] tmp_5_fu_451_p3;
wire   [10:0] p_shl1_cast_fu_459_p1;
wire   [10:0] tmp_28_cast_fu_506_p1;
wire   [10:0] tmp_10_fu_510_p2;
wire   [10:0] tmp_11_fu_520_p2;
wire   [31:0] tmp_s_fu_548_p1;
wire   [36:0] tmp_7_fu_564_p3;
wire   [32:0] tmp_8_fu_576_p3;
wire  signed [37:0] p_shl4_cast_fu_572_p1;
wire  signed [37:0] p_shl5_cast_fu_584_p1;
wire   [31:0] tmp_22_fu_594_p1;
wire  signed [37:0] tmp_24_cast_fu_610_p1;
wire   [37:0] tmp_12_fu_614_p2;
wire   [5:0] tmp_13_fu_619_p1;
wire   [9:0] tmp_14_fu_631_p1;
wire   [10:0] p_shl8_cast_fu_623_p3;
wire   [10:0] p_shl9_cast_fu_635_p3;
wire   [5:0] tmp_16_fu_649_p1;
wire   [9:0] tmp_17_fu_661_p1;
wire   [10:0] p_shl6_cast_fu_653_p3;
wire   [10:0] p_shl7_cast_fu_665_p3;
wire   [31:0] tmp_25_fu_679_p1;
wire   [10:0] tmp_24_fu_699_p1;
wire   [10:0] tmp_19_fu_703_p2;
wire   [31:0] tmp_fu_718_p2;
wire   [31:0] tmp_27_fu_724_p2;
wire   [16:0] tmp_31_cast_fu_736_p1;
wire   [16:0] tmp_28_fu_740_p2;
wire  signed [31:0] tmp_32_cast_fu_746_p1;
wire   [16:0] tmp_34_cast_fu_763_p1;
wire   [16:0] tmp_30_fu_767_p2;
wire  signed [31:0] tmp_35_cast_fu_773_p1;
wire   [16:0] tmp_32_fu_783_p2;
wire  signed [31:0] tmp_37_cast_fu_788_p1;
wire    ap_CS_fsm_state15;
reg    ap_block_state15;
reg   [14:0] ap_NS_fsm;
reg    ap_condition_1173;
reg    ap_condition_1179;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
#0 input_data_V_data_V_0_sel_rd = 1'b0;
#0 input_data_V_data_V_0_sel_wr = 1'b0;
#0 input_data_V_data_V_0_state = 2'd0;
#0 input_data_V_keep_V_0_sel_rd = 1'b0;
#0 input_data_V_keep_V_0_sel_wr = 1'b0;
#0 input_data_V_keep_V_0_state = 2'd0;
#0 input_data_V_strb_V_0_sel_rd = 1'b0;
#0 input_data_V_strb_V_0_sel_wr = 1'b0;
#0 input_data_V_strb_V_0_state = 2'd0;
#0 input_data_V_id_V_0_sel_rd = 1'b0;
#0 input_data_V_id_V_0_sel_wr = 1'b0;
#0 input_data_V_id_V_0_state = 2'd0;
#0 input_data_V_dest_V_0_sel_rd = 1'b0;
#0 input_data_V_dest_V_0_sel_wr = 1'b0;
#0 input_data_V_dest_V_0_state = 2'd0;
#0 output_data_V_data_V_1_sel_rd = 1'b0;
#0 output_data_V_data_V_1_sel_wr = 1'b0;
#0 output_data_V_data_V_1_state = 2'd0;
#0 output_data_V_keep_V_1_sel_rd = 1'b0;
#0 output_data_V_keep_V_1_sel_wr = 1'b0;
#0 output_data_V_keep_V_1_state = 2'd0;
#0 output_data_V_strb_V_1_sel_rd = 1'b0;
#0 output_data_V_strb_V_1_sel_wr = 1'b0;
#0 output_data_V_strb_V_1_state = 2'd0;
#0 output_data_V_user_V_1_sel_rd = 1'b0;
#0 output_data_V_user_V_1_sel_wr = 1'b0;
#0 output_data_V_user_V_1_state = 2'd0;
#0 output_data_V_last_V_1_sel_rd = 1'b0;
#0 output_data_V_last_V_1_sel_wr = 1'b0;
#0 output_data_V_last_V_1_state = 2'd0;
#0 output_data_V_id_V_1_sel_rd = 1'b0;
#0 output_data_V_id_V_1_sel_wr = 1'b0;
#0 output_data_V_id_V_1_state = 2'd0;
#0 output_data_V_dest_V_1_sel_rd = 1'b0;
#0 output_data_V_dest_V_1_sel_wr = 1'b0;
#0 output_data_V_dest_V_1_state = 2'd0;
#0 Padding2D_0_depth = 16'd1;
#0 Padding2D_0_height = 16'd30;
#0 Padding2D_0_width = 16'd30;
#0 SeparableConv2D_0_de = 16'd16;
#0 SeparableConv2D_0_he = 16'd28;
#0 SeparableConv2D_0_wi = 16'd28;
#0 grp_depthwise_conv2d_fix_fu_358_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_fu_373_ap_start_reg = 1'b0;
#0 grp_padding2d_fix16_fu_387_ap_start_reg = 1'b0;
end

network_Padding2D_0_array #(
    .DataWidth( 16 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
Padding2D_0_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Padding2D_0_array_address0),
    .ce0(Padding2D_0_array_ce0),
    .we0(Padding2D_0_array_we0),
    .d0(grp_padding2d_fix16_fu_387_output_r_d0),
    .q0(Padding2D_0_array_q0)
);

network_SeparableConv2D_0_m_s #(
    .DataWidth( 16 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
SeparableConv2D_0_m_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_0_m_s_address0),
    .ce0(SeparableConv2D_0_m_s_ce0),
    .we0(SeparableConv2D_0_m_s_we0),
    .d0(grp_depthwise_conv2d_fix_fu_358_output_r_d0),
    .q0(SeparableConv2D_0_m_s_q0)
);

network_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
network_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

network_input_0_array_0 #(
    .DataWidth( 16 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
input_0_array_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_0_array_0_address0),
    .ce0(input_0_array_0_ce0),
    .we0(input_0_array_0_we0),
    .d0(input_data_V_data_V_0_data_out),
    .q0(input_0_array_0_q0)
);

network_out_0_keep_V #(
    .DataWidth( 2 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
out_0_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_0_keep_V_address0),
    .ce0(out_0_keep_V_ce0),
    .we0(out_0_keep_V_we0),
    .d0(input_data_V_keep_V_0_data_out),
    .q0(out_0_keep_V_q0)
);

network_out_0_keep_V #(
    .DataWidth( 2 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
out_0_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_0_strb_V_address0),
    .ce0(out_0_strb_V_ce0),
    .we0(out_0_strb_V_we0),
    .d0(input_data_V_strb_V_0_data_out),
    .q0(out_0_strb_V_q0)
);

network_out_0_id_V #(
    .DataWidth( 1 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
out_0_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_0_id_V_address0),
    .ce0(out_0_id_V_ce0),
    .we0(out_0_id_V_we0),
    .d0(input_data_V_id_V_0_data_out),
    .q0(out_0_id_V_q0)
);

network_out_0_id_V #(
    .DataWidth( 1 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
out_0_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(out_0_dest_V_address0),
    .ce0(out_0_dest_V_ce0),
    .we0(out_0_dest_V_we0),
    .d0(input_data_V_dest_V_0_data_out),
    .q0(out_0_dest_V_q0)
);

depthwise_conv2d_fix grp_depthwise_conv2d_fix_fu_358(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_fu_358_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_fu_358_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_fu_358_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_fu_358_ap_ready),
    .input_height(Padding2D_0_height),
    .input_width(Padding2D_0_width),
    .input_r_address0(grp_depthwise_conv2d_fix_fu_358_input_r_address0),
    .input_r_ce0(grp_depthwise_conv2d_fix_fu_358_input_r_ce0),
    .input_r_q0(Padding2D_0_array_q0),
    .output_depth(Padding2D_0_depth),
    .output_height(SeparableConv2D_0_he),
    .output_width(SeparableConv2D_0_wi),
    .output_r_address0(grp_depthwise_conv2d_fix_fu_358_output_r_address0),
    .output_r_ce0(grp_depthwise_conv2d_fix_fu_358_output_r_ce0),
    .output_r_we0(grp_depthwise_conv2d_fix_fu_358_output_r_we0),
    .output_r_d0(grp_depthwise_conv2d_fix_fu_358_output_r_d0),
    .output_r_q0(SeparableConv2D_0_m_s_q0)
);

pointwise_conv2d_fix grp_pointwise_conv2d_fix_fu_373(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_fu_373_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_fu_373_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_fu_373_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_fu_373_ap_ready),
    .input_depth(Padding2D_0_depth),
    .input_height(SeparableConv2D_0_he),
    .input_width(SeparableConv2D_0_wi),
    .output_depth(SeparableConv2D_0_de),
    .SeparableConv2D_0_m_s_address0(grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_address0),
    .SeparableConv2D_0_m_s_ce0(grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_ce0),
    .SeparableConv2D_0_m_s_q0(SeparableConv2D_0_m_s_q0)
);

padding2d_fix16 grp_padding2d_fix16_fu_387(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_padding2d_fix16_fu_387_ap_start),
    .ap_done(grp_padding2d_fix16_fu_387_ap_done),
    .ap_idle(grp_padding2d_fix16_fu_387_ap_idle),
    .ap_ready(grp_padding2d_fix16_fu_387_ap_ready),
    .input_0_address0(grp_padding2d_fix16_fu_387_input_0_address0),
    .input_0_ce0(grp_padding2d_fix16_fu_387_input_0_ce0),
    .input_0_q0(input_0_array_0_q0),
    .output_r_address0(grp_padding2d_fix16_fu_387_output_r_address0),
    .output_r_ce0(grp_padding2d_fix16_fu_387_output_r_ce0),
    .output_r_we0(grp_padding2d_fix16_fu_387_output_r_we0),
    .output_r_d0(grp_padding2d_fix16_fu_387_output_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_fu_358_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_depthwise_conv2d_fix_fu_358_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_fu_358_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_fu_358_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_padding2d_fix16_fu_387_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond4_fu_409_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_padding2d_fix16_fu_387_ap_start_reg <= 1'b1;
        end else if ((grp_padding2d_fix16_fu_387_ap_ready == 1'b1)) begin
            grp_padding2d_fix16_fu_387_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_fu_373_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_pointwise_conv2d_fix_fu_373_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_fu_373_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_fu_373_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_V_data_V_0_ack_out == 1'b1) & (input_data_V_data_V_0_vld_out == 1'b1))) begin
            input_data_V_data_V_0_sel_rd <= ~input_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_V_data_V_0_ack_in == 1'b1) & (input_data_V_data_V_0_vld_in == 1'b1))) begin
            input_data_V_data_V_0_sel_wr <= ~input_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_V_data_V_0_state == 2'd2) & (input_data_V_data_V_0_vld_in == 1'b0)) | ((input_data_V_data_V_0_state == 2'd3) & (input_data_V_data_V_0_vld_in == 1'b0) & (input_data_V_data_V_0_ack_out == 1'b1)))) begin
            input_data_V_data_V_0_state <= 2'd2;
        end else if ((((input_data_V_data_V_0_state == 2'd1) & (input_data_V_data_V_0_ack_out == 1'b0)) | ((input_data_V_data_V_0_state == 2'd3) & (input_data_V_data_V_0_ack_out == 1'b0) & (input_data_V_data_V_0_vld_in == 1'b1)))) begin
            input_data_V_data_V_0_state <= 2'd1;
        end else if (((~((input_data_V_data_V_0_vld_in == 1'b0) & (input_data_V_data_V_0_ack_out == 1'b1)) & ~((input_data_V_data_V_0_ack_out == 1'b0) & (input_data_V_data_V_0_vld_in == 1'b1)) & (input_data_V_data_V_0_state == 2'd3)) | ((input_data_V_data_V_0_state == 2'd1) & (input_data_V_data_V_0_ack_out == 1'b1)) | ((input_data_V_data_V_0_state == 2'd2) & (input_data_V_data_V_0_vld_in == 1'b1)))) begin
            input_data_V_data_V_0_state <= 2'd3;
        end else begin
            input_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_V_dest_V_0_ack_out == 1'b1) & (input_data_V_dest_V_0_vld_out == 1'b1))) begin
            input_data_V_dest_V_0_sel_rd <= ~input_data_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_V_dest_V_0_ack_in == 1'b1) & (input_data_V_dest_V_0_vld_in == 1'b1))) begin
            input_data_V_dest_V_0_sel_wr <= ~input_data_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_V_dest_V_0_state == 2'd2) & (input_data_V_dest_V_0_vld_in == 1'b0)) | ((input_data_V_dest_V_0_state == 2'd3) & (input_data_V_dest_V_0_vld_in == 1'b0) & (input_data_V_dest_V_0_ack_out == 1'b1)))) begin
            input_data_V_dest_V_0_state <= 2'd2;
        end else if ((((input_data_V_dest_V_0_state == 2'd1) & (input_data_V_dest_V_0_ack_out == 1'b0)) | ((input_data_V_dest_V_0_state == 2'd3) & (input_data_V_dest_V_0_ack_out == 1'b0) & (input_data_V_dest_V_0_vld_in == 1'b1)))) begin
            input_data_V_dest_V_0_state <= 2'd1;
        end else if (((~((input_data_V_dest_V_0_vld_in == 1'b0) & (input_data_V_dest_V_0_ack_out == 1'b1)) & ~((input_data_V_dest_V_0_ack_out == 1'b0) & (input_data_V_dest_V_0_vld_in == 1'b1)) & (input_data_V_dest_V_0_state == 2'd3)) | ((input_data_V_dest_V_0_state == 2'd1) & (input_data_V_dest_V_0_ack_out == 1'b1)) | ((input_data_V_dest_V_0_state == 2'd2) & (input_data_V_dest_V_0_vld_in == 1'b1)))) begin
            input_data_V_dest_V_0_state <= 2'd3;
        end else begin
            input_data_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_V_id_V_0_ack_out == 1'b1) & (input_data_V_id_V_0_vld_out == 1'b1))) begin
            input_data_V_id_V_0_sel_rd <= ~input_data_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_V_id_V_0_ack_in == 1'b1) & (input_data_V_id_V_0_vld_in == 1'b1))) begin
            input_data_V_id_V_0_sel_wr <= ~input_data_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_V_id_V_0_state == 2'd2) & (input_data_V_id_V_0_vld_in == 1'b0)) | ((input_data_V_id_V_0_state == 2'd3) & (input_data_V_id_V_0_vld_in == 1'b0) & (input_data_V_id_V_0_ack_out == 1'b1)))) begin
            input_data_V_id_V_0_state <= 2'd2;
        end else if ((((input_data_V_id_V_0_state == 2'd1) & (input_data_V_id_V_0_ack_out == 1'b0)) | ((input_data_V_id_V_0_state == 2'd3) & (input_data_V_id_V_0_ack_out == 1'b0) & (input_data_V_id_V_0_vld_in == 1'b1)))) begin
            input_data_V_id_V_0_state <= 2'd1;
        end else if (((~((input_data_V_id_V_0_vld_in == 1'b0) & (input_data_V_id_V_0_ack_out == 1'b1)) & ~((input_data_V_id_V_0_ack_out == 1'b0) & (input_data_V_id_V_0_vld_in == 1'b1)) & (input_data_V_id_V_0_state == 2'd3)) | ((input_data_V_id_V_0_state == 2'd1) & (input_data_V_id_V_0_ack_out == 1'b1)) | ((input_data_V_id_V_0_state == 2'd2) & (input_data_V_id_V_0_vld_in == 1'b1)))) begin
            input_data_V_id_V_0_state <= 2'd3;
        end else begin
            input_data_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_V_keep_V_0_ack_out == 1'b1) & (input_data_V_keep_V_0_vld_out == 1'b1))) begin
            input_data_V_keep_V_0_sel_rd <= ~input_data_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_V_keep_V_0_ack_in == 1'b1) & (input_data_V_keep_V_0_vld_in == 1'b1))) begin
            input_data_V_keep_V_0_sel_wr <= ~input_data_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_V_keep_V_0_state == 2'd2) & (input_data_V_keep_V_0_vld_in == 1'b0)) | ((input_data_V_keep_V_0_state == 2'd3) & (input_data_V_keep_V_0_vld_in == 1'b0) & (input_data_V_keep_V_0_ack_out == 1'b1)))) begin
            input_data_V_keep_V_0_state <= 2'd2;
        end else if ((((input_data_V_keep_V_0_state == 2'd1) & (input_data_V_keep_V_0_ack_out == 1'b0)) | ((input_data_V_keep_V_0_state == 2'd3) & (input_data_V_keep_V_0_ack_out == 1'b0) & (input_data_V_keep_V_0_vld_in == 1'b1)))) begin
            input_data_V_keep_V_0_state <= 2'd1;
        end else if (((~((input_data_V_keep_V_0_vld_in == 1'b0) & (input_data_V_keep_V_0_ack_out == 1'b1)) & ~((input_data_V_keep_V_0_ack_out == 1'b0) & (input_data_V_keep_V_0_vld_in == 1'b1)) & (input_data_V_keep_V_0_state == 2'd3)) | ((input_data_V_keep_V_0_state == 2'd1) & (input_data_V_keep_V_0_ack_out == 1'b1)) | ((input_data_V_keep_V_0_state == 2'd2) & (input_data_V_keep_V_0_vld_in == 1'b1)))) begin
            input_data_V_keep_V_0_state <= 2'd3;
        end else begin
            input_data_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_V_strb_V_0_ack_out == 1'b1) & (input_data_V_strb_V_0_vld_out == 1'b1))) begin
            input_data_V_strb_V_0_sel_rd <= ~input_data_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_V_strb_V_0_ack_in == 1'b1) & (input_data_V_strb_V_0_vld_in == 1'b1))) begin
            input_data_V_strb_V_0_sel_wr <= ~input_data_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_V_strb_V_0_state == 2'd2) & (input_data_V_strb_V_0_vld_in == 1'b0)) | ((input_data_V_strb_V_0_state == 2'd3) & (input_data_V_strb_V_0_vld_in == 1'b0) & (input_data_V_strb_V_0_ack_out == 1'b1)))) begin
            input_data_V_strb_V_0_state <= 2'd2;
        end else if ((((input_data_V_strb_V_0_state == 2'd1) & (input_data_V_strb_V_0_ack_out == 1'b0)) | ((input_data_V_strb_V_0_state == 2'd3) & (input_data_V_strb_V_0_ack_out == 1'b0) & (input_data_V_strb_V_0_vld_in == 1'b1)))) begin
            input_data_V_strb_V_0_state <= 2'd1;
        end else if (((~((input_data_V_strb_V_0_vld_in == 1'b0) & (input_data_V_strb_V_0_ack_out == 1'b1)) & ~((input_data_V_strb_V_0_ack_out == 1'b0) & (input_data_V_strb_V_0_vld_in == 1'b1)) & (input_data_V_strb_V_0_state == 2'd3)) | ((input_data_V_strb_V_0_state == 2'd1) & (input_data_V_strb_V_0_ack_out == 1'b1)) | ((input_data_V_strb_V_0_state == 2'd2) & (input_data_V_strb_V_0_vld_in == 1'b1)))) begin
            input_data_V_strb_V_0_state <= 2'd3;
        end else begin
            input_data_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_data_V_1_ack_out == 1'b1) & (output_data_V_data_V_1_vld_out == 1'b1))) begin
            output_data_V_data_V_1_sel_rd <= ~output_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_data_V_1_ack_in == 1'b1) & (output_data_V_data_V_1_vld_in == 1'b1))) begin
            output_data_V_data_V_1_sel_wr <= ~output_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_data_V_1_state == 2'd2) & (output_data_V_data_V_1_vld_in == 1'b0)) | ((output_data_V_data_V_1_state == 2'd3) & (output_data_V_data_V_1_vld_in == 1'b0) & (output_data_V_data_V_1_ack_out == 1'b1)))) begin
            output_data_V_data_V_1_state <= 2'd2;
        end else if ((((output_data_V_data_V_1_state == 2'd1) & (output_data_V_data_V_1_ack_out == 1'b0)) | ((output_data_V_data_V_1_state == 2'd3) & (output_data_V_data_V_1_ack_out == 1'b0) & (output_data_V_data_V_1_vld_in == 1'b1)))) begin
            output_data_V_data_V_1_state <= 2'd1;
        end else if (((~((output_data_V_data_V_1_vld_in == 1'b0) & (output_data_V_data_V_1_ack_out == 1'b1)) & ~((output_data_V_data_V_1_ack_out == 1'b0) & (output_data_V_data_V_1_vld_in == 1'b1)) & (output_data_V_data_V_1_state == 2'd3)) | ((output_data_V_data_V_1_state == 2'd1) & (output_data_V_data_V_1_ack_out == 1'b1)) | ((output_data_V_data_V_1_state == 2'd2) & (output_data_V_data_V_1_vld_in == 1'b1)))) begin
            output_data_V_data_V_1_state <= 2'd3;
        end else begin
            output_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_dest_V_1_ack_out == 1'b1) & (output_data_V_dest_V_1_vld_out == 1'b1))) begin
            output_data_V_dest_V_1_sel_rd <= ~output_data_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_dest_V_1_ack_in == 1'b1) & (output_data_V_dest_V_1_vld_in == 1'b1))) begin
            output_data_V_dest_V_1_sel_wr <= ~output_data_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_dest_V_1_state == 2'd2) & (output_data_V_dest_V_1_vld_in == 1'b0)) | ((output_data_V_dest_V_1_state == 2'd3) & (output_data_V_dest_V_1_vld_in == 1'b0) & (output_data_V_dest_V_1_ack_out == 1'b1)))) begin
            output_data_V_dest_V_1_state <= 2'd2;
        end else if ((((output_data_V_dest_V_1_state == 2'd1) & (output_data_V_dest_V_1_ack_out == 1'b0)) | ((output_data_V_dest_V_1_state == 2'd3) & (output_data_V_dest_V_1_ack_out == 1'b0) & (output_data_V_dest_V_1_vld_in == 1'b1)))) begin
            output_data_V_dest_V_1_state <= 2'd1;
        end else if (((~((output_data_V_dest_V_1_vld_in == 1'b0) & (output_data_V_dest_V_1_ack_out == 1'b1)) & ~((output_data_V_dest_V_1_ack_out == 1'b0) & (output_data_V_dest_V_1_vld_in == 1'b1)) & (output_data_V_dest_V_1_state == 2'd3)) | ((output_data_V_dest_V_1_state == 2'd1) & (output_data_V_dest_V_1_ack_out == 1'b1)) | ((output_data_V_dest_V_1_state == 2'd2) & (output_data_V_dest_V_1_vld_in == 1'b1)))) begin
            output_data_V_dest_V_1_state <= 2'd3;
        end else begin
            output_data_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_id_V_1_ack_out == 1'b1) & (output_data_V_id_V_1_vld_out == 1'b1))) begin
            output_data_V_id_V_1_sel_rd <= ~output_data_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_id_V_1_ack_in == 1'b1) & (output_data_V_id_V_1_vld_in == 1'b1))) begin
            output_data_V_id_V_1_sel_wr <= ~output_data_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_id_V_1_state == 2'd2) & (output_data_V_id_V_1_vld_in == 1'b0)) | ((output_data_V_id_V_1_state == 2'd3) & (output_data_V_id_V_1_vld_in == 1'b0) & (output_data_V_id_V_1_ack_out == 1'b1)))) begin
            output_data_V_id_V_1_state <= 2'd2;
        end else if ((((output_data_V_id_V_1_state == 2'd1) & (output_data_V_id_V_1_ack_out == 1'b0)) | ((output_data_V_id_V_1_state == 2'd3) & (output_data_V_id_V_1_ack_out == 1'b0) & (output_data_V_id_V_1_vld_in == 1'b1)))) begin
            output_data_V_id_V_1_state <= 2'd1;
        end else if (((~((output_data_V_id_V_1_vld_in == 1'b0) & (output_data_V_id_V_1_ack_out == 1'b1)) & ~((output_data_V_id_V_1_ack_out == 1'b0) & (output_data_V_id_V_1_vld_in == 1'b1)) & (output_data_V_id_V_1_state == 2'd3)) | ((output_data_V_id_V_1_state == 2'd1) & (output_data_V_id_V_1_ack_out == 1'b1)) | ((output_data_V_id_V_1_state == 2'd2) & (output_data_V_id_V_1_vld_in == 1'b1)))) begin
            output_data_V_id_V_1_state <= 2'd3;
        end else begin
            output_data_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_keep_V_1_ack_out == 1'b1) & (output_data_V_keep_V_1_vld_out == 1'b1))) begin
            output_data_V_keep_V_1_sel_rd <= ~output_data_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_keep_V_1_ack_in == 1'b1) & (output_data_V_keep_V_1_vld_in == 1'b1))) begin
            output_data_V_keep_V_1_sel_wr <= ~output_data_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_keep_V_1_state == 2'd2) & (output_data_V_keep_V_1_vld_in == 1'b0)) | ((output_data_V_keep_V_1_state == 2'd3) & (output_data_V_keep_V_1_vld_in == 1'b0) & (output_data_V_keep_V_1_ack_out == 1'b1)))) begin
            output_data_V_keep_V_1_state <= 2'd2;
        end else if ((((output_data_V_keep_V_1_state == 2'd1) & (output_data_V_keep_V_1_ack_out == 1'b0)) | ((output_data_V_keep_V_1_state == 2'd3) & (output_data_V_keep_V_1_ack_out == 1'b0) & (output_data_V_keep_V_1_vld_in == 1'b1)))) begin
            output_data_V_keep_V_1_state <= 2'd1;
        end else if (((~((output_data_V_keep_V_1_vld_in == 1'b0) & (output_data_V_keep_V_1_ack_out == 1'b1)) & ~((output_data_V_keep_V_1_ack_out == 1'b0) & (output_data_V_keep_V_1_vld_in == 1'b1)) & (output_data_V_keep_V_1_state == 2'd3)) | ((output_data_V_keep_V_1_state == 2'd1) & (output_data_V_keep_V_1_ack_out == 1'b1)) | ((output_data_V_keep_V_1_state == 2'd2) & (output_data_V_keep_V_1_vld_in == 1'b1)))) begin
            output_data_V_keep_V_1_state <= 2'd3;
        end else begin
            output_data_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_last_V_1_ack_out == 1'b1) & (output_data_V_last_V_1_vld_out == 1'b1))) begin
            output_data_V_last_V_1_sel_rd <= ~output_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_last_V_1_ack_in == 1'b1) & (output_data_V_last_V_1_vld_in == 1'b1))) begin
            output_data_V_last_V_1_sel_wr <= ~output_data_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_last_V_1_state == 2'd2) & (output_data_V_last_V_1_vld_in == 1'b0)) | ((output_data_V_last_V_1_state == 2'd3) & (output_data_V_last_V_1_vld_in == 1'b0) & (output_data_V_last_V_1_ack_out == 1'b1)))) begin
            output_data_V_last_V_1_state <= 2'd2;
        end else if ((((output_data_V_last_V_1_state == 2'd1) & (output_data_V_last_V_1_ack_out == 1'b0)) | ((output_data_V_last_V_1_state == 2'd3) & (output_data_V_last_V_1_ack_out == 1'b0) & (output_data_V_last_V_1_vld_in == 1'b1)))) begin
            output_data_V_last_V_1_state <= 2'd1;
        end else if (((~((output_data_V_last_V_1_vld_in == 1'b0) & (output_data_V_last_V_1_ack_out == 1'b1)) & ~((output_data_V_last_V_1_ack_out == 1'b0) & (output_data_V_last_V_1_vld_in == 1'b1)) & (output_data_V_last_V_1_state == 2'd3)) | ((output_data_V_last_V_1_state == 2'd1) & (output_data_V_last_V_1_ack_out == 1'b1)) | ((output_data_V_last_V_1_state == 2'd2) & (output_data_V_last_V_1_vld_in == 1'b1)))) begin
            output_data_V_last_V_1_state <= 2'd3;
        end else begin
            output_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_strb_V_1_ack_out == 1'b1) & (output_data_V_strb_V_1_vld_out == 1'b1))) begin
            output_data_V_strb_V_1_sel_rd <= ~output_data_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_strb_V_1_ack_in == 1'b1) & (output_data_V_strb_V_1_vld_in == 1'b1))) begin
            output_data_V_strb_V_1_sel_wr <= ~output_data_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_strb_V_1_state == 2'd2) & (output_data_V_strb_V_1_vld_in == 1'b0)) | ((output_data_V_strb_V_1_state == 2'd3) & (output_data_V_strb_V_1_vld_in == 1'b0) & (output_data_V_strb_V_1_ack_out == 1'b1)))) begin
            output_data_V_strb_V_1_state <= 2'd2;
        end else if ((((output_data_V_strb_V_1_state == 2'd1) & (output_data_V_strb_V_1_ack_out == 1'b0)) | ((output_data_V_strb_V_1_state == 2'd3) & (output_data_V_strb_V_1_ack_out == 1'b0) & (output_data_V_strb_V_1_vld_in == 1'b1)))) begin
            output_data_V_strb_V_1_state <= 2'd1;
        end else if (((~((output_data_V_strb_V_1_vld_in == 1'b0) & (output_data_V_strb_V_1_ack_out == 1'b1)) & ~((output_data_V_strb_V_1_ack_out == 1'b0) & (output_data_V_strb_V_1_vld_in == 1'b1)) & (output_data_V_strb_V_1_state == 2'd3)) | ((output_data_V_strb_V_1_state == 2'd1) & (output_data_V_strb_V_1_ack_out == 1'b1)) | ((output_data_V_strb_V_1_state == 2'd2) & (output_data_V_strb_V_1_vld_in == 1'b1)))) begin
            output_data_V_strb_V_1_state <= 2'd3;
        end else begin
            output_data_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_user_V_1_ack_out == 1'b1) & (output_data_V_user_V_1_vld_out == 1'b1))) begin
            output_data_V_user_V_1_sel_rd <= ~output_data_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_user_V_1_ack_in == 1'b1) & (output_data_V_user_V_1_vld_in == 1'b1))) begin
            output_data_V_user_V_1_sel_wr <= ~output_data_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_user_V_1_state == 2'd2) & (output_data_V_user_V_1_vld_in == 1'b0)) | ((output_data_V_user_V_1_state == 2'd3) & (output_data_V_user_V_1_vld_in == 1'b0) & (output_data_V_user_V_1_ack_out == 1'b1)))) begin
            output_data_V_user_V_1_state <= 2'd2;
        end else if ((((output_data_V_user_V_1_state == 2'd1) & (output_data_V_user_V_1_ack_out == 1'b0)) | ((output_data_V_user_V_1_state == 2'd3) & (output_data_V_user_V_1_ack_out == 1'b0) & (output_data_V_user_V_1_vld_in == 1'b1)))) begin
            output_data_V_user_V_1_state <= 2'd1;
        end else if (((~((output_data_V_user_V_1_vld_in == 1'b0) & (output_data_V_user_V_1_ack_out == 1'b1)) & ~((output_data_V_user_V_1_ack_out == 1'b0) & (output_data_V_user_V_1_vld_in == 1'b1)) & (output_data_V_user_V_1_state == 2'd3)) | ((output_data_V_user_V_1_state == 2'd1) & (output_data_V_user_V_1_ack_out == 1'b1)) | ((output_data_V_user_V_1_state == 2'd2) & (output_data_V_user_V_1_vld_in == 1'b1)))) begin
            output_data_V_user_V_1_state <= 2'd3;
        end else begin
            output_data_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        depth7_reg_306 <= depth_reg_860;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_pointwise_conv2d_fix_fu_373_ap_done == 1'b1))) begin
        depth7_reg_306 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_26_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        height8_reg_318 <= height_1_reg_873;
    end else if (((tmp_20_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        height8_reg_318 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        height_reg_284 <= height_2_reg_801;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        height_reg_284 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        if ((1'b1 == ap_condition_1179)) begin
            tmp_last_V_reg_342 <= 1'd1;
        end else if ((1'b1 == ap_condition_1173)) begin
            tmp_last_V_reg_342 <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        width9_reg_330 <= 32'd0;
    end else if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        width9_reg_330 <= width_2_reg_896;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        width_reg_295 <= 5'd0;
    end else if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        width_reg_295 <= width_1_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        depth_reg_860 <= depth_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        height_1_reg_873 <= height_1_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        height_2_reg_801 <= height_2_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_data_V_0_load_A == 1'b1)) begin
        input_data_V_data_V_0_payload_A <= input_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_data_V_0_load_B == 1'b1)) begin
        input_data_V_data_V_0_payload_B <= input_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_dest_V_0_load_A == 1'b1)) begin
        input_data_V_dest_V_0_payload_A <= input_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_dest_V_0_load_B == 1'b1)) begin
        input_data_V_dest_V_0_payload_B <= input_data_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_id_V_0_load_A == 1'b1)) begin
        input_data_V_id_V_0_payload_A <= input_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_id_V_0_load_B == 1'b1)) begin
        input_data_V_id_V_0_payload_B <= input_data_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_keep_V_0_load_A == 1'b1)) begin
        input_data_V_keep_V_0_payload_A <= input_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_keep_V_0_load_B == 1'b1)) begin
        input_data_V_keep_V_0_payload_B <= input_data_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_strb_V_0_load_A == 1'b1)) begin
        input_data_V_strb_V_0_payload_A <= input_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_strb_V_0_load_B == 1'b1)) begin
        input_data_V_strb_V_0_payload_B <= input_data_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_data_V_1_load_A == 1'b1)) begin
        output_data_V_data_V_1_payload_A <= tmp_data_V_1_reg_940;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_data_V_1_load_B == 1'b1)) begin
        output_data_V_data_V_1_payload_B <= tmp_data_V_1_reg_940;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_dest_V_1_load_A == 1'b1)) begin
        output_data_V_dest_V_1_payload_A <= out_0_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_dest_V_1_load_B == 1'b1)) begin
        output_data_V_dest_V_1_payload_B <= out_0_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_id_V_1_load_A == 1'b1)) begin
        output_data_V_id_V_1_payload_A <= out_0_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_id_V_1_load_B == 1'b1)) begin
        output_data_V_id_V_1_payload_B <= out_0_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_keep_V_1_load_A == 1'b1)) begin
        output_data_V_keep_V_1_payload_A <= out_0_keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_keep_V_1_load_B == 1'b1)) begin
        output_data_V_keep_V_1_payload_B <= out_0_keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_last_V_1_load_A == 1'b1)) begin
        output_data_V_last_V_1_payload_A <= tmp_last_V_reg_342;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_last_V_1_load_B == 1'b1)) begin
        output_data_V_last_V_1_payload_B <= tmp_last_V_reg_342;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_strb_V_1_load_A == 1'b1)) begin
        output_data_V_strb_V_1_payload_A <= out_0_strb_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_strb_V_1_load_B == 1'b1)) begin
        output_data_V_strb_V_1_payload_B <= out_0_strb_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_user_V_1_load_A == 1'b1)) begin
        output_data_V_user_V_1_payload_A <= tmp_user_V_reg_911;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_user_V_1_load_B == 1'b1)) begin
        output_data_V_user_V_1_payload_B <= tmp_user_V_reg_911;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_23_fu_598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_15_reg_878[10 : 1] <= tmp_15_fu_643_p2[10 : 1];
        tmp_18_reg_883[10 : 1] <= tmp_18_fu_673_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_26_fu_687_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_21_reg_906 <= tmp_21_fu_713_p2;
        tmp_29_reg_916 <= tmp_29_fu_750_p2;
        tmp_user_V_reg_911 <= tmp_user_V_fu_730_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_3_reg_806[10 : 2] <= tmp_3_fu_445_p2[10 : 2];
        tmp_6_reg_811[10 : 1] <= tmp_6_fu_463_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_9_reg_865[37 : 1] <= tmp_9_fu_588_p2[37 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_data_V_1_reg_940 <= Padding2D_0_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        width_2_reg_896 <= width_2_fu_693_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        Padding2D_0_array_address0 = tmp_19_cast_fu_708_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Padding2D_0_array_address0 = grp_padding2d_fix16_fu_387_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Padding2D_0_array_address0 = grp_depthwise_conv2d_fix_fu_358_input_r_address0;
    end else begin
        Padding2D_0_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        Padding2D_0_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Padding2D_0_array_ce0 = grp_padding2d_fix16_fu_387_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Padding2D_0_array_ce0 = grp_depthwise_conv2d_fix_fu_358_input_r_ce0;
    end else begin
        Padding2D_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Padding2D_0_array_we0 = grp_padding2d_fix16_fu_387_output_r_we0;
    end else begin
        Padding2D_0_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        SeparableConv2D_0_m_s_address0 = grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_0_m_s_address0 = grp_depthwise_conv2d_fix_fu_358_output_r_address0;
    end else begin
        SeparableConv2D_0_m_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        SeparableConv2D_0_m_s_ce0 = grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_0_m_s_ce0 = grp_depthwise_conv2d_fix_fu_358_output_r_ce0;
    end else begin
        SeparableConv2D_0_m_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_0_m_s_we0 = grp_depthwise_conv2d_fix_fu_358_output_r_we0;
    end else begin
        SeparableConv2D_0_m_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_data_V_dest_V_1_ack_in == 1'b0) | (output_data_V_id_V_1_ack_in == 1'b0) | (output_data_V_last_V_1_ack_in == 1'b0) | (output_data_V_user_V_1_ack_in == 1'b0) | (output_data_V_strb_V_1_ack_in == 1'b0) | (output_data_V_keep_V_1_ack_in == 1'b0) | (output_data_V_data_V_1_ack_in == 1'b0)) & (output_data_V_dest_V_1_state[1'd0] == 1'b0) & (output_data_V_id_V_1_state[1'd0] == 1'b0) & (output_data_V_last_V_1_state[1'd0] == 1'b0) & (output_data_V_user_V_1_state[1'd0] == 1'b0) & (output_data_V_strb_V_1_state[1'd0] == 1'b0) & (output_data_V_keep_V_1_state[1'd0] == 1'b0) & (output_data_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_data_V_dest_V_1_ack_in == 1'b0) | (output_data_V_id_V_1_ack_in == 1'b0) | (output_data_V_last_V_1_ack_in == 1'b0) | (output_data_V_user_V_1_ack_in == 1'b0) | (output_data_V_strb_V_1_ack_in == 1'b0) | (output_data_V_keep_V_1_ack_in == 1'b0) | (output_data_V_data_V_1_ack_in == 1'b0)) & (output_data_V_dest_V_1_state[1'd0] == 1'b0) & (output_data_V_id_V_1_state[1'd0] == 1'b0) & (output_data_V_last_V_1_state[1'd0] == 1'b0) & (output_data_V_user_V_1_state[1'd0] == 1'b0) & (output_data_V_strb_V_1_state[1'd0] == 1'b0) & (output_data_V_keep_V_1_state[1'd0] == 1'b0) & (output_data_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_0_array_0_address0 = tmp_10_cast_fu_515_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_array_0_address0 = grp_padding2d_fix16_fu_387_input_0_address0;
    end else begin
        input_0_array_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        input_0_array_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_array_0_ce0 = grp_padding2d_fix16_fu_387_input_0_ce0;
    end else begin
        input_0_array_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_0_array_0_we0 = 1'b1;
    end else begin
        input_0_array_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_TDATA_blk_n = input_data_V_data_V_0_state[1'd0];
    end else begin
        input_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        input_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_V_data_V_0_sel == 1'b1)) begin
        input_data_V_data_V_0_data_out = input_data_V_data_V_0_payload_B;
    end else begin
        input_data_V_data_V_0_data_out = input_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_V_dest_V_0_ack_out = 1'b1;
    end else begin
        input_data_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_V_dest_V_0_sel == 1'b1)) begin
        input_data_V_dest_V_0_data_out = input_data_V_dest_V_0_payload_B;
    end else begin
        input_data_V_dest_V_0_data_out = input_data_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_V_id_V_0_ack_out = 1'b1;
    end else begin
        input_data_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_V_id_V_0_sel == 1'b1)) begin
        input_data_V_id_V_0_data_out = input_data_V_id_V_0_payload_B;
    end else begin
        input_data_V_id_V_0_data_out = input_data_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_V_keep_V_0_ack_out = 1'b1;
    end else begin
        input_data_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_V_keep_V_0_sel == 1'b1)) begin
        input_data_V_keep_V_0_data_out = input_data_V_keep_V_0_payload_B;
    end else begin
        input_data_V_keep_V_0_data_out = input_data_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_V_strb_V_0_ack_out = 1'b1;
    end else begin
        input_data_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_V_strb_V_0_sel == 1'b1)) begin
        input_data_V_strb_V_0_data_out = input_data_V_strb_V_0_payload_B;
    end else begin
        input_data_V_strb_V_0_data_out = input_data_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_0_dest_V_address0 = tmp_21_cast_fu_756_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_0_dest_V_address0 = tmp_11_cast_fu_525_p1;
    end else begin
        out_0_dest_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_0_dest_V_ce0 = 1'b1;
    end else begin
        out_0_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_0_dest_V_we0 = 1'b1;
    end else begin
        out_0_dest_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_0_id_V_address0 = tmp_21_cast_fu_756_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_0_id_V_address0 = tmp_11_cast_fu_525_p1;
    end else begin
        out_0_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_0_id_V_ce0 = 1'b1;
    end else begin
        out_0_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_0_id_V_we0 = 1'b1;
    end else begin
        out_0_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_0_keep_V_address0 = tmp_21_cast_fu_756_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_0_keep_V_address0 = tmp_11_cast_fu_525_p1;
    end else begin
        out_0_keep_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_0_keep_V_ce0 = 1'b1;
    end else begin
        out_0_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_0_keep_V_we0 = 1'b1;
    end else begin
        out_0_keep_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_0_strb_V_address0 = tmp_21_cast_fu_756_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_0_strb_V_address0 = tmp_11_cast_fu_525_p1;
    end else begin
        out_0_strb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
        out_0_strb_V_ce0 = 1'b1;
    end else begin
        out_0_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_0_strb_V_we0 = 1'b1;
    end else begin
        out_0_strb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        output_data_TDATA_blk_n = output_data_V_data_V_1_state[1'd1];
    end else begin
        output_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((output_data_V_data_V_1_sel == 1'b1)) begin
        output_data_V_data_V_1_data_out = output_data_V_data_V_1_payload_B;
    end else begin
        output_data_V_data_V_1_data_out = output_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        output_data_V_data_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_V_dest_V_1_sel == 1'b1)) begin
        output_data_V_dest_V_1_data_out = output_data_V_dest_V_1_payload_B;
    end else begin
        output_data_V_dest_V_1_data_out = output_data_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        output_data_V_dest_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_V_id_V_1_sel == 1'b1)) begin
        output_data_V_id_V_1_data_out = output_data_V_id_V_1_payload_B;
    end else begin
        output_data_V_id_V_1_data_out = output_data_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        output_data_V_id_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_V_keep_V_1_sel == 1'b1)) begin
        output_data_V_keep_V_1_data_out = output_data_V_keep_V_1_payload_B;
    end else begin
        output_data_V_keep_V_1_data_out = output_data_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        output_data_V_keep_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_V_last_V_1_sel == 1'b1)) begin
        output_data_V_last_V_1_data_out = output_data_V_last_V_1_payload_B;
    end else begin
        output_data_V_last_V_1_data_out = output_data_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        output_data_V_last_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_V_strb_V_1_sel == 1'b1)) begin
        output_data_V_strb_V_1_data_out = output_data_V_strb_V_1_payload_B;
    end else begin
        output_data_V_strb_V_1_data_out = output_data_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        output_data_V_strb_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_V_user_V_1_sel == 1'b1)) begin
        output_data_V_user_V_1_data_out = output_data_V_user_V_1_payload_B;
    end else begin
        output_data_V_user_V_1_data_out = output_data_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        output_data_V_user_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond_fu_469_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_padding2d_fix16_fu_387_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_depthwise_conv2d_fix_fu_358_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_pointwise_conv2d_fix_fu_373_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_20_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((tmp_23_fu_598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((tmp_26_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((output_data_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((output_data_V_dest_V_1_ack_in == 1'b0) | (output_data_V_id_V_1_ack_in == 1'b0) | (output_data_V_last_V_1_ack_in == 1'b0) | (output_data_V_user_V_1_ack_in == 1'b0) | (output_data_V_strb_V_1_ack_in == 1'b0) | (output_data_V_keep_V_1_ack_in == 1'b0) | (output_data_V_data_V_1_ack_in == 1'b0)) & (output_data_V_dest_V_1_state[1'd0] == 1'b0) & (output_data_V_id_V_1_state[1'd0] == 1'b0) & (output_data_V_last_V_1_state[1'd0] == 1'b0) & (output_data_V_user_V_1_state[1'd0] == 1'b0) & (output_data_V_strb_V_1_state[1'd0] == 1'b0) & (output_data_V_keep_V_1_state[1'd0] == 1'b0) & (output_data_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state15 = ((output_data_V_dest_V_1_ack_in == 1'b0) | (output_data_V_id_V_1_ack_in == 1'b0) | (output_data_V_last_V_1_ack_in == 1'b0) | (output_data_V_user_V_1_ack_in == 1'b0) | (output_data_V_strb_V_1_ack_in == 1'b0) | (output_data_V_keep_V_1_ack_in == 1'b0) | (output_data_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((exitcond_fu_469_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_condition_1173 = ((tmp_29_reg_916 == 1'd0) | ((tmp_31_fu_777_p2 == 1'd0) | (tmp_33_fu_792_p2 == 1'd0)));
end

always @ (*) begin
    ap_condition_1179 = ((tmp_31_fu_777_p2 == 1'd1) & (tmp_33_fu_792_p2 == 1'd1) & (tmp_29_reg_916 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign depth_fu_558_p2 = (depth7_reg_306 + 32'd1);

assign exitcond4_fu_409_p2 = ((height_reg_284 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond_fu_469_p2 = ((width_reg_295 == 5'd28) ? 1'b1 : 1'b0);

assign grp_depthwise_conv2d_fix_fu_358_ap_start = grp_depthwise_conv2d_fix_fu_358_ap_start_reg;

assign grp_padding2d_fix16_fu_387_ap_start = grp_padding2d_fix16_fu_387_ap_start_reg;

assign grp_pointwise_conv2d_fix_fu_373_ap_start = grp_pointwise_conv2d_fix_fu_373_ap_start_reg;

assign height_1_fu_604_p2 = ($signed(height8_reg_318) + $signed(32'd1));

assign height_2_fu_415_p2 = (height_reg_284 + 5'd1);

assign input_data_TREADY = input_data_V_dest_V_0_state[1'd1];

assign input_data_V_data_V_0_ack_in = input_data_V_data_V_0_state[1'd1];

assign input_data_V_data_V_0_load_A = (input_data_V_data_V_0_state_cmp_full & ~input_data_V_data_V_0_sel_wr);

assign input_data_V_data_V_0_load_B = (input_data_V_data_V_0_state_cmp_full & input_data_V_data_V_0_sel_wr);

assign input_data_V_data_V_0_sel = input_data_V_data_V_0_sel_rd;

assign input_data_V_data_V_0_state_cmp_full = ((input_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_V_data_V_0_vld_in = input_data_TVALID;

assign input_data_V_data_V_0_vld_out = input_data_V_data_V_0_state[1'd0];

assign input_data_V_dest_V_0_ack_in = input_data_V_dest_V_0_state[1'd1];

assign input_data_V_dest_V_0_load_A = (input_data_V_dest_V_0_state_cmp_full & ~input_data_V_dest_V_0_sel_wr);

assign input_data_V_dest_V_0_load_B = (input_data_V_dest_V_0_state_cmp_full & input_data_V_dest_V_0_sel_wr);

assign input_data_V_dest_V_0_sel = input_data_V_dest_V_0_sel_rd;

assign input_data_V_dest_V_0_state_cmp_full = ((input_data_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_V_dest_V_0_vld_in = input_data_TVALID;

assign input_data_V_dest_V_0_vld_out = input_data_V_dest_V_0_state[1'd0];

assign input_data_V_id_V_0_ack_in = input_data_V_id_V_0_state[1'd1];

assign input_data_V_id_V_0_load_A = (input_data_V_id_V_0_state_cmp_full & ~input_data_V_id_V_0_sel_wr);

assign input_data_V_id_V_0_load_B = (input_data_V_id_V_0_state_cmp_full & input_data_V_id_V_0_sel_wr);

assign input_data_V_id_V_0_sel = input_data_V_id_V_0_sel_rd;

assign input_data_V_id_V_0_state_cmp_full = ((input_data_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_V_id_V_0_vld_in = input_data_TVALID;

assign input_data_V_id_V_0_vld_out = input_data_V_id_V_0_state[1'd0];

assign input_data_V_keep_V_0_ack_in = input_data_V_keep_V_0_state[1'd1];

assign input_data_V_keep_V_0_load_A = (input_data_V_keep_V_0_state_cmp_full & ~input_data_V_keep_V_0_sel_wr);

assign input_data_V_keep_V_0_load_B = (input_data_V_keep_V_0_state_cmp_full & input_data_V_keep_V_0_sel_wr);

assign input_data_V_keep_V_0_sel = input_data_V_keep_V_0_sel_rd;

assign input_data_V_keep_V_0_state_cmp_full = ((input_data_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_V_keep_V_0_vld_in = input_data_TVALID;

assign input_data_V_keep_V_0_vld_out = input_data_V_keep_V_0_state[1'd0];

assign input_data_V_strb_V_0_ack_in = input_data_V_strb_V_0_state[1'd1];

assign input_data_V_strb_V_0_load_A = (input_data_V_strb_V_0_state_cmp_full & ~input_data_V_strb_V_0_sel_wr);

assign input_data_V_strb_V_0_load_B = (input_data_V_strb_V_0_state_cmp_full & input_data_V_strb_V_0_sel_wr);

assign input_data_V_strb_V_0_sel = input_data_V_strb_V_0_sel_rd;

assign input_data_V_strb_V_0_state_cmp_full = ((input_data_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_V_strb_V_0_vld_in = input_data_TVALID;

assign input_data_V_strb_V_0_vld_out = input_data_V_strb_V_0_state[1'd0];

assign output_data_TDATA = output_data_V_data_V_1_data_out;

assign output_data_TDEST = output_data_V_dest_V_1_data_out;

assign output_data_TID = output_data_V_id_V_1_data_out;

assign output_data_TKEEP = output_data_V_keep_V_1_data_out;

assign output_data_TLAST = output_data_V_last_V_1_data_out;

assign output_data_TSTRB = output_data_V_strb_V_1_data_out;

assign output_data_TUSER = output_data_V_user_V_1_data_out;

assign output_data_TVALID = output_data_V_dest_V_1_state[1'd0];

assign output_data_V_data_V_1_ack_in = output_data_V_data_V_1_state[1'd1];

assign output_data_V_data_V_1_ack_out = output_data_TREADY;

assign output_data_V_data_V_1_load_A = (output_data_V_data_V_1_state_cmp_full & ~output_data_V_data_V_1_sel_wr);

assign output_data_V_data_V_1_load_B = (output_data_V_data_V_1_state_cmp_full & output_data_V_data_V_1_sel_wr);

assign output_data_V_data_V_1_sel = output_data_V_data_V_1_sel_rd;

assign output_data_V_data_V_1_state_cmp_full = ((output_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_data_V_1_vld_out = output_data_V_data_V_1_state[1'd0];

assign output_data_V_dest_V_1_ack_in = output_data_V_dest_V_1_state[1'd1];

assign output_data_V_dest_V_1_ack_out = output_data_TREADY;

assign output_data_V_dest_V_1_load_A = (output_data_V_dest_V_1_state_cmp_full & ~output_data_V_dest_V_1_sel_wr);

assign output_data_V_dest_V_1_load_B = (output_data_V_dest_V_1_state_cmp_full & output_data_V_dest_V_1_sel_wr);

assign output_data_V_dest_V_1_sel = output_data_V_dest_V_1_sel_rd;

assign output_data_V_dest_V_1_state_cmp_full = ((output_data_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_dest_V_1_vld_out = output_data_V_dest_V_1_state[1'd0];

assign output_data_V_id_V_1_ack_in = output_data_V_id_V_1_state[1'd1];

assign output_data_V_id_V_1_ack_out = output_data_TREADY;

assign output_data_V_id_V_1_load_A = (output_data_V_id_V_1_state_cmp_full & ~output_data_V_id_V_1_sel_wr);

assign output_data_V_id_V_1_load_B = (output_data_V_id_V_1_state_cmp_full & output_data_V_id_V_1_sel_wr);

assign output_data_V_id_V_1_sel = output_data_V_id_V_1_sel_rd;

assign output_data_V_id_V_1_state_cmp_full = ((output_data_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_id_V_1_vld_out = output_data_V_id_V_1_state[1'd0];

assign output_data_V_keep_V_1_ack_in = output_data_V_keep_V_1_state[1'd1];

assign output_data_V_keep_V_1_ack_out = output_data_TREADY;

assign output_data_V_keep_V_1_load_A = (output_data_V_keep_V_1_state_cmp_full & ~output_data_V_keep_V_1_sel_wr);

assign output_data_V_keep_V_1_load_B = (output_data_V_keep_V_1_state_cmp_full & output_data_V_keep_V_1_sel_wr);

assign output_data_V_keep_V_1_sel = output_data_V_keep_V_1_sel_rd;

assign output_data_V_keep_V_1_state_cmp_full = ((output_data_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_keep_V_1_vld_out = output_data_V_keep_V_1_state[1'd0];

assign output_data_V_last_V_1_ack_in = output_data_V_last_V_1_state[1'd1];

assign output_data_V_last_V_1_ack_out = output_data_TREADY;

assign output_data_V_last_V_1_load_A = (output_data_V_last_V_1_state_cmp_full & ~output_data_V_last_V_1_sel_wr);

assign output_data_V_last_V_1_load_B = (output_data_V_last_V_1_state_cmp_full & output_data_V_last_V_1_sel_wr);

assign output_data_V_last_V_1_sel = output_data_V_last_V_1_sel_rd;

assign output_data_V_last_V_1_state_cmp_full = ((output_data_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_last_V_1_vld_out = output_data_V_last_V_1_state[1'd0];

assign output_data_V_strb_V_1_ack_in = output_data_V_strb_V_1_state[1'd1];

assign output_data_V_strb_V_1_ack_out = output_data_TREADY;

assign output_data_V_strb_V_1_load_A = (output_data_V_strb_V_1_state_cmp_full & ~output_data_V_strb_V_1_sel_wr);

assign output_data_V_strb_V_1_load_B = (output_data_V_strb_V_1_state_cmp_full & output_data_V_strb_V_1_sel_wr);

assign output_data_V_strb_V_1_sel = output_data_V_strb_V_1_sel_rd;

assign output_data_V_strb_V_1_state_cmp_full = ((output_data_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_strb_V_1_vld_out = output_data_V_strb_V_1_state[1'd0];

assign output_data_V_user_V_1_ack_in = output_data_V_user_V_1_state[1'd1];

assign output_data_V_user_V_1_ack_out = output_data_TREADY;

assign output_data_V_user_V_1_load_A = (output_data_V_user_V_1_state_cmp_full & ~output_data_V_user_V_1_sel_wr);

assign output_data_V_user_V_1_load_B = (output_data_V_user_V_1_state_cmp_full & output_data_V_user_V_1_sel_wr);

assign output_data_V_user_V_1_sel = output_data_V_user_V_1_sel_rd;

assign output_data_V_user_V_1_state_cmp_full = ((output_data_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_user_V_1_vld_out = output_data_V_user_V_1_state[1'd0];

assign p_shl1_cast_fu_459_p1 = tmp_5_fu_451_p3;

assign p_shl2_cast_fu_429_p1 = tmp_1_fu_421_p3;

assign p_shl3_cast_fu_441_p1 = tmp_2_fu_433_p3;

assign p_shl4_cast_fu_572_p1 = $signed(tmp_7_fu_564_p3);

assign p_shl5_cast_fu_584_p1 = $signed(tmp_8_fu_576_p3);

assign p_shl6_cast_fu_653_p3 = {{tmp_16_fu_649_p1}, {5'd0}};

assign p_shl7_cast_fu_665_p3 = {{tmp_17_fu_661_p1}, {1'd0}};

assign p_shl8_cast_fu_623_p3 = {{tmp_13_fu_619_p1}, {5'd0}};

assign p_shl9_cast_fu_635_p3 = {{tmp_14_fu_631_p1}, {1'd0}};

assign tmp_10_cast_fu_515_p1 = $signed(tmp_10_fu_510_p2);

assign tmp_10_fu_510_p2 = (tmp_3_reg_806 + tmp_28_cast_fu_506_p1);

assign tmp_11_cast_fu_525_p1 = $signed(tmp_11_fu_520_p2);

assign tmp_11_fu_520_p2 = (tmp_6_reg_811 + tmp_28_cast_fu_506_p1);

assign tmp_12_fu_614_p2 = ($signed(tmp_24_cast_fu_610_p1) + $signed(tmp_9_reg_865));

assign tmp_13_fu_619_p1 = tmp_12_fu_614_p2[5:0];

assign tmp_14_fu_631_p1 = tmp_12_fu_614_p2[9:0];

assign tmp_15_fu_643_p2 = (p_shl8_cast_fu_623_p3 - p_shl9_cast_fu_635_p3);

assign tmp_16_fu_649_p1 = height8_reg_318[5:0];

assign tmp_17_fu_661_p1 = height8_reg_318[9:0];

assign tmp_18_fu_673_p2 = (p_shl6_cast_fu_653_p3 - p_shl7_cast_fu_665_p3);

assign tmp_19_cast_fu_708_p1 = tmp_19_fu_703_p2;

assign tmp_19_fu_703_p2 = (tmp_15_reg_878 + tmp_24_fu_699_p1);

assign tmp_1_fu_421_p3 = {{height_reg_284}, {5'd0}};

assign tmp_20_fu_552_p2 = (($signed(depth7_reg_306) < $signed(tmp_s_fu_548_p1)) ? 1'b1 : 1'b0);

assign tmp_21_cast_fu_756_p1 = $signed(tmp_21_reg_906);

assign tmp_21_fu_713_p2 = (tmp_18_reg_883 + tmp_24_fu_699_p1);

assign tmp_22_fu_594_p1 = Padding2D_0_height;

assign tmp_23_fu_598_p2 = (($signed(height8_reg_318) < $signed(tmp_22_fu_594_p1)) ? 1'b1 : 1'b0);

assign tmp_24_cast_fu_610_p1 = height8_reg_318;

assign tmp_24_fu_699_p1 = width9_reg_330[10:0];

assign tmp_25_cast_fu_683_p1 = Padding2D_0_width;

assign tmp_25_fu_679_p1 = Padding2D_0_width;

assign tmp_26_fu_687_p2 = (($signed(width9_reg_330) < $signed(tmp_25_fu_679_p1)) ? 1'b1 : 1'b0);

assign tmp_27_fu_724_p2 = (tmp_fu_718_p2 | height8_reg_318);

assign tmp_28_cast_fu_506_p1 = width_reg_295;

assign tmp_28_fu_740_p2 = ($signed(17'd131071) + $signed(tmp_31_cast_fu_736_p1));

assign tmp_29_fu_750_p2 = ((depth7_reg_306 == tmp_32_cast_fu_746_p1) ? 1'b1 : 1'b0);

assign tmp_2_fu_433_p3 = {{height_reg_284}, {2'd0}};

assign tmp_30_fu_767_p2 = ($signed(tmp_34_cast_fu_763_p1) + $signed(17'd131071));

assign tmp_31_cast_fu_736_p1 = Padding2D_0_depth;

assign tmp_31_fu_777_p2 = ((height8_reg_318 == tmp_35_cast_fu_773_p1) ? 1'b1 : 1'b0);

assign tmp_32_cast_fu_746_p1 = $signed(tmp_28_fu_740_p2);

assign tmp_32_fu_783_p2 = ($signed(tmp_25_cast_reg_888) + $signed(17'd131071));

assign tmp_33_fu_792_p2 = ((width9_reg_330 == tmp_37_cast_fu_788_p1) ? 1'b1 : 1'b0);

assign tmp_34_cast_fu_763_p1 = Padding2D_0_height;

assign tmp_35_cast_fu_773_p1 = $signed(tmp_30_fu_767_p2);

assign tmp_37_cast_fu_788_p1 = $signed(tmp_32_fu_783_p2);

assign tmp_3_fu_445_p2 = (p_shl2_cast_fu_429_p1 - p_shl3_cast_fu_441_p1);

assign tmp_5_fu_451_p3 = {{height_reg_284}, {1'd0}};

assign tmp_6_fu_463_p2 = (p_shl2_cast_fu_429_p1 - p_shl1_cast_fu_459_p1);

assign tmp_7_fu_564_p3 = {{depth7_reg_306}, {5'd0}};

assign tmp_8_fu_576_p3 = {{depth7_reg_306}, {1'd0}};

assign tmp_9_fu_588_p2 = ($signed(p_shl4_cast_fu_572_p1) - $signed(p_shl5_cast_fu_584_p1));

assign tmp_fu_718_p2 = (width9_reg_330 | depth7_reg_306);

assign tmp_s_fu_548_p1 = Padding2D_0_depth;

assign tmp_user_V_fu_730_p2 = ((tmp_27_fu_724_p2 == 32'd0) ? 1'b1 : 1'b0);

assign width_1_fu_475_p2 = (width_reg_295 + 5'd1);

assign width_2_fu_693_p2 = (width9_reg_330 + 32'd1);

always @ (posedge ap_clk) begin
    tmp_3_reg_806[1:0] <= 2'b00;
    tmp_6_reg_811[0] <= 1'b0;
    tmp_9_reg_865[0] <= 1'b0;
    tmp_15_reg_878[0] <= 1'b0;
    tmp_18_reg_883[0] <= 1'b0;
    tmp_25_cast_reg_888[16:0] <= 17'b00000000000011110;
end

endmodule //network
