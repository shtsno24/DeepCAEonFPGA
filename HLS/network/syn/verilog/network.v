// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="network,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.585000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=100,HLS_SYN_DSP=77,HLS_SYN_FF=10655,HLS_SYN_LUT=15152,HLS_VERSION=2018_3}" *)

module network (
        ap_clk,
        ap_rst_n,
        input_data_TDATA,
        input_data_TVALID,
        input_data_TREADY,
        input_data_TKEEP,
        input_data_TSTRB,
        input_data_TUSER,
        input_data_TLAST,
        input_data_TID,
        input_data_TDEST,
        output_data_TDATA,
        output_data_TVALID,
        output_data_TREADY,
        output_data_TKEEP,
        output_data_TSTRB,
        output_data_TUSER,
        output_data_TLAST,
        output_data_TID,
        output_data_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_pp0_stage0 = 43'd1099511627776;
parameter    ap_ST_fsm_state44 = 43'd2199023255552;
parameter    ap_ST_fsm_state45 = 43'd4398046511104;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [15:0] input_data_TDATA;
input   input_data_TVALID;
output   input_data_TREADY;
input  [1:0] input_data_TKEEP;
input  [1:0] input_data_TSTRB;
input  [0:0] input_data_TUSER;
input  [0:0] input_data_TLAST;
input  [0:0] input_data_TID;
input  [0:0] input_data_TDEST;
output  [15:0] output_data_TDATA;
output   output_data_TVALID;
input   output_data_TREADY;
output  [1:0] output_data_TKEEP;
output  [1:0] output_data_TSTRB;
output  [0:0] output_data_TUSER;
output  [0:0] output_data_TLAST;
output  [0:0] output_data_TID;
output  [0:0] output_data_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [15:0] input_data_V_data_V_0_data_out;
wire    input_data_V_data_V_0_vld_in;
wire    input_data_V_data_V_0_vld_out;
wire    input_data_V_data_V_0_ack_in;
reg    input_data_V_data_V_0_ack_out;
reg   [15:0] input_data_V_data_V_0_payload_A;
reg   [15:0] input_data_V_data_V_0_payload_B;
reg    input_data_V_data_V_0_sel_rd;
reg    input_data_V_data_V_0_sel_wr;
wire    input_data_V_data_V_0_sel;
wire    input_data_V_data_V_0_load_A;
wire    input_data_V_data_V_0_load_B;
reg   [1:0] input_data_V_data_V_0_state;
wire    input_data_V_data_V_0_state_cmp_full;
wire    input_data_V_dest_V_0_vld_in;
reg    input_data_V_dest_V_0_ack_out;
reg   [1:0] input_data_V_dest_V_0_state;
reg   [15:0] output_data_V_data_V_1_data_out;
reg    output_data_V_data_V_1_vld_in;
wire    output_data_V_data_V_1_vld_out;
wire    output_data_V_data_V_1_ack_in;
wire    output_data_V_data_V_1_ack_out;
reg   [15:0] output_data_V_data_V_1_payload_A;
reg   [15:0] output_data_V_data_V_1_payload_B;
reg    output_data_V_data_V_1_sel_rd;
reg    output_data_V_data_V_1_sel_wr;
wire    output_data_V_data_V_1_sel;
wire    output_data_V_data_V_1_load_A;
wire    output_data_V_data_V_1_load_B;
reg   [1:0] output_data_V_data_V_1_state;
wire    output_data_V_data_V_1_state_cmp_full;
wire   [1:0] output_data_V_keep_V_1_data_out;
reg    output_data_V_keep_V_1_vld_in;
wire    output_data_V_keep_V_1_vld_out;
wire    output_data_V_keep_V_1_ack_in;
wire    output_data_V_keep_V_1_ack_out;
reg    output_data_V_keep_V_1_sel_rd;
wire    output_data_V_keep_V_1_sel;
reg   [1:0] output_data_V_keep_V_1_state;
wire   [1:0] output_data_V_strb_V_1_data_out;
reg    output_data_V_strb_V_1_vld_in;
wire    output_data_V_strb_V_1_vld_out;
wire    output_data_V_strb_V_1_ack_in;
wire    output_data_V_strb_V_1_ack_out;
reg    output_data_V_strb_V_1_sel_rd;
wire    output_data_V_strb_V_1_sel;
reg   [1:0] output_data_V_strb_V_1_state;
reg   [0:0] output_data_V_user_V_1_data_out;
reg    output_data_V_user_V_1_vld_in;
wire    output_data_V_user_V_1_vld_out;
wire    output_data_V_user_V_1_ack_in;
wire    output_data_V_user_V_1_ack_out;
reg   [0:0] output_data_V_user_V_1_payload_A;
reg   [0:0] output_data_V_user_V_1_payload_B;
reg    output_data_V_user_V_1_sel_rd;
reg    output_data_V_user_V_1_sel_wr;
wire    output_data_V_user_V_1_sel;
wire    output_data_V_user_V_1_load_A;
wire    output_data_V_user_V_1_load_B;
reg   [1:0] output_data_V_user_V_1_state;
wire    output_data_V_user_V_1_state_cmp_full;
reg   [0:0] output_data_V_last_V_1_data_out;
reg    output_data_V_last_V_1_vld_in;
wire    output_data_V_last_V_1_vld_out;
wire    output_data_V_last_V_1_ack_in;
wire    output_data_V_last_V_1_ack_out;
reg   [0:0] output_data_V_last_V_1_payload_A;
reg   [0:0] output_data_V_last_V_1_payload_B;
reg    output_data_V_last_V_1_sel_rd;
reg    output_data_V_last_V_1_sel_wr;
wire    output_data_V_last_V_1_sel;
wire    output_data_V_last_V_1_load_A;
wire    output_data_V_last_V_1_load_B;
reg   [1:0] output_data_V_last_V_1_state;
wire    output_data_V_last_V_1_state_cmp_full;
wire   [0:0] output_data_V_id_V_1_data_out;
reg    output_data_V_id_V_1_vld_in;
wire    output_data_V_id_V_1_vld_out;
wire    output_data_V_id_V_1_ack_in;
wire    output_data_V_id_V_1_ack_out;
reg    output_data_V_id_V_1_sel_rd;
wire    output_data_V_id_V_1_sel;
reg   [1:0] output_data_V_id_V_1_state;
wire   [0:0] output_data_V_dest_V_1_data_out;
reg    output_data_V_dest_V_1_vld_in;
wire    output_data_V_dest_V_1_vld_out;
wire    output_data_V_dest_V_1_ack_in;
wire    output_data_V_dest_V_1_ack_out;
reg    output_data_V_dest_V_1_sel_rd;
wire    output_data_V_dest_V_1_sel;
reg   [1:0] output_data_V_dest_V_1_state;
reg   [15:0] SeparableConv2D_4_de;
reg   [15:0] SeparableConv2D_4_he;
reg   [15:0] SeparableConv2D_4_wi;
reg   [9:0] Padding2D_0_array_address0;
reg    Padding2D_0_array_ce0;
reg    Padding2D_0_array_we0;
wire   [15:0] Padding2D_0_array_q0;
reg   [15:0] Padding2D_0_depth;
reg   [15:0] Padding2D_0_height;
reg   [15:0] Padding2D_0_width;
reg   [15:0] SeparableConv2D_0_de;
reg   [15:0] SeparableConv2D_0_he;
reg   [15:0] SeparableConv2D_0_wi;
reg   [9:0] SeparableConv2D_0_m_s_address0;
reg    SeparableConv2D_0_m_s_ce0;
reg    SeparableConv2D_0_m_s_we0;
wire   [15:0] SeparableConv2D_0_m_s_q0;
reg   [13:0] SeparableConv2D_0_ar_address0;
reg    SeparableConv2D_0_ar_ce0;
reg    SeparableConv2D_0_ar_we0;
wire   [15:0] SeparableConv2D_0_ar_q0;
reg   [15:0] MaxPooling2D_0_depth;
reg   [15:0] MaxPooling2D_0_heigh;
reg   [15:0] MaxPooling2D_0_width;
reg   [11:0] MaxPooling2D_0_array_address0;
reg    MaxPooling2D_0_array_ce0;
reg    MaxPooling2D_0_array_we0;
wire   [15:0] MaxPooling2D_0_array_q0;
reg   [11:0] Padding2D_1_array_address0;
reg    Padding2D_1_array_ce0;
reg    Padding2D_1_array_we0;
wire   [15:0] Padding2D_1_array_q0;
reg   [15:0] Padding2D_1_depth;
reg   [15:0] Padding2D_1_height;
reg   [15:0] Padding2D_1_width;
reg   [15:0] SeparableConv2D_1_de;
reg   [15:0] SeparableConv2D_1_he;
reg   [15:0] SeparableConv2D_1_wi;
reg   [11:0] SeparableConv2D_1_m_s_address0;
reg    SeparableConv2D_1_m_s_ce0;
reg    SeparableConv2D_1_m_s_we0;
wire   [15:0] SeparableConv2D_1_m_s_q0;
reg   [10:0] SeparableConv2D_1_ar_address0;
reg    SeparableConv2D_1_ar_ce0;
reg    SeparableConv2D_1_ar_we0;
wire   [15:0] SeparableConv2D_1_ar_q0;
reg   [15:0] MaxPooling2D_1_depth;
reg   [15:0] MaxPooling2D_1_heigh;
reg   [15:0] MaxPooling2D_1_width;
reg   [8:0] MaxPooling2D_1_array_address0;
reg    MaxPooling2D_1_array_ce0;
reg    MaxPooling2D_1_array_we0;
wire   [15:0] MaxPooling2D_1_array_q0;
reg   [9:0] Padding2D_2_array_address0;
reg    Padding2D_2_array_ce0;
reg    Padding2D_2_array_we0;
wire   [15:0] Padding2D_2_array_q0;
reg   [15:0] Padding2D_2_depth;
reg   [15:0] Padding2D_2_height;
reg   [15:0] Padding2D_2_width;
reg   [15:0] SeparableConv2D_2_de;
reg   [15:0] SeparableConv2D_2_he;
reg   [15:0] SeparableConv2D_2_wi;
reg   [8:0] SeparableConv2D_2_m_s_address0;
reg    SeparableConv2D_2_m_s_ce0;
reg    SeparableConv2D_2_m_s_we0;
wire   [15:0] SeparableConv2D_2_m_s_q0;
reg   [8:0] SeparableConv2D_2_ar_address0;
reg    SeparableConv2D_2_ar_ce0;
reg    SeparableConv2D_2_ar_we0;
wire   [15:0] SeparableConv2D_2_ar_q0;
reg   [15:0] UpSampling2D_0_depth;
reg   [15:0] UpSampling2D_0_heigh;
reg   [15:0] UpSampling2D_0_width;
reg   [10:0] UpSampling2D_0_array_address0;
reg    UpSampling2D_0_array_ce0;
reg    UpSampling2D_0_array_we0;
wire   [15:0] UpSampling2D_0_array_q0;
reg   [10:0] Padding2D_3_array_address0;
reg    Padding2D_3_array_ce0;
reg    Padding2D_3_array_we0;
wire   [15:0] Padding2D_3_array_q0;
reg   [15:0] Padding2D_3_depth;
reg   [15:0] Padding2D_3_height;
reg   [15:0] Padding2D_3_width;
reg   [15:0] SeparableConv2D_3_de;
reg   [15:0] SeparableConv2D_3_he;
reg   [15:0] SeparableConv2D_3_wi;
reg   [10:0] SeparableConv2D_3_m_s_address0;
reg    SeparableConv2D_3_m_s_ce0;
reg    SeparableConv2D_3_m_s_we0;
wire   [15:0] SeparableConv2D_3_m_s_q0;
reg   [11:0] SeparableConv2D_3_ar_address0;
reg    SeparableConv2D_3_ar_ce0;
reg    SeparableConv2D_3_ar_we0;
wire   [15:0] SeparableConv2D_3_ar_q0;
reg   [15:0] UpSampling2D_1_depth;
reg   [15:0] UpSampling2D_1_heigh;
reg   [15:0] UpSampling2D_1_width;
reg   [13:0] UpSampling2D_1_array_address0;
reg    UpSampling2D_1_array_ce0;
reg    UpSampling2D_1_array_we0;
wire   [15:0] UpSampling2D_1_array_q0;
reg   [13:0] Padding2D_4_array_address0;
reg    Padding2D_4_array_ce0;
reg    Padding2D_4_array_we0;
wire   [15:0] Padding2D_4_array_q0;
reg   [15:0] Padding2D_4_depth;
reg   [15:0] Padding2D_4_height;
reg   [15:0] Padding2D_4_width;
reg   [13:0] SeparableConv2D_4_m_s_address0;
reg    SeparableConv2D_4_m_s_ce0;
reg    SeparableConv2D_4_m_s_we0;
wire   [15:0] SeparableConv2D_4_m_s_q0;
reg   [9:0] SeparableConv2D_4_ar_address0;
reg    SeparableConv2D_4_ar_ce0;
reg    SeparableConv2D_4_ar_we0;
wire   [15:0] SeparableConv2D_4_ar_q0;
reg    input_data_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_899_p2;
reg    output_data_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_reg_1203;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_reg_1203_pp0_iter1_reg;
reg   [47:0] i1_reg_354;
reg   [15:0] reg_746;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
reg   [15:0] reg_753;
reg   [15:0] reg_760;
wire    ap_CS_fsm_state11;
reg   [15:0] reg_766;
reg   [15:0] reg_772;
reg   [15:0] reg_778;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
reg   [15:0] reg_785;
reg   [15:0] reg_792;
wire    ap_CS_fsm_state19;
reg   [15:0] reg_798;
reg   [15:0] reg_804;
reg   [15:0] reg_810;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state25;
reg   [15:0] reg_817;
reg   [15:0] reg_824;
wire    ap_CS_fsm_state27;
reg   [15:0] reg_830;
reg   [15:0] reg_836;
reg   [15:0] reg_842;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state33;
reg   [15:0] reg_849;
reg   [15:0] reg_856;
wire    ap_CS_fsm_state35;
reg   [15:0] reg_862;
reg   [15:0] reg_868;
wire   [31:0] tmp1_fu_1052_p2;
reg   [31:0] tmp1_reg_1058;
wire   [47:0] array_length_fu_889_p2;
reg   [47:0] array_length_reg_1063;
wire    ap_CS_fsm_state2;
wire   [48:0] array_length_cast_fu_895_p1;
reg   [48:0] array_length_cast_reg_1068;
wire   [9:0] i_3_fu_905_p2;
reg    ap_block_state3;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state39;
wire   [48:0] tmp_s_fu_1016_p2;
reg   [48:0] tmp_s_reg_1198;
wire    ap_CS_fsm_state40;
wire    grp_pointwise_conv2d_fix_1_fu_566_ap_ready;
wire    grp_pointwise_conv2d_fix_1_fu_566_ap_done;
wire   [0:0] exitcond_fu_1021_p2;
wire    ap_block_state41_pp0_stage0_iter0;
wire    ap_block_state42_pp0_stage0_iter1;
reg    ap_block_state42_io;
wire    ap_block_state43_pp0_stage0_iter2;
reg    ap_block_state43_io;
reg    ap_block_pp0_stage0_11001;
wire   [47:0] i_4_fu_1026_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_user_V_fu_1041_p2;
reg   [0:0] tmp_user_V_reg_1217;
wire   [0:0] tmp_last_V_fu_1047_p2;
reg   [0:0] tmp_last_V_reg_1222;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state41;
reg   [9:0] input_0_array_address0;
reg    input_0_array_ce0;
reg    input_0_array_we0;
wire   [15:0] input_0_array_q0;
wire    grp_padding2d_fix16_1_fu_365_ap_start;
wire    grp_padding2d_fix16_1_fu_365_ap_done;
wire    grp_padding2d_fix16_1_fu_365_ap_idle;
wire    grp_padding2d_fix16_1_fu_365_ap_ready;
wire   [13:0] grp_padding2d_fix16_1_fu_365_input_r_address0;
wire    grp_padding2d_fix16_1_fu_365_input_r_ce0;
wire   [13:0] grp_padding2d_fix16_1_fu_365_output_r_address0;
wire    grp_padding2d_fix16_1_fu_365_output_r_ce0;
wire    grp_padding2d_fix16_1_fu_365_output_r_we0;
wire   [15:0] grp_padding2d_fix16_1_fu_365_output_r_d0;
wire    grp_padding2d_fix16_4_fu_376_ap_start;
wire    grp_padding2d_fix16_4_fu_376_ap_done;
wire    grp_padding2d_fix16_4_fu_376_ap_idle;
wire    grp_padding2d_fix16_4_fu_376_ap_ready;
wire   [11:0] grp_padding2d_fix16_4_fu_376_output_r_address0;
wire    grp_padding2d_fix16_4_fu_376_output_r_ce0;
wire    grp_padding2d_fix16_4_fu_376_output_r_we0;
wire   [15:0] grp_padding2d_fix16_4_fu_376_output_r_d0;
wire   [11:0] grp_padding2d_fix16_4_fu_376_MaxPooling2D_0_array_address0;
wire    grp_padding2d_fix16_4_fu_376_MaxPooling2D_0_array_ce0;
wire    grp_padding2d_fix16_2_fu_387_ap_start;
wire    grp_padding2d_fix16_2_fu_387_ap_done;
wire    grp_padding2d_fix16_2_fu_387_ap_idle;
wire    grp_padding2d_fix16_2_fu_387_ap_ready;
wire   [10:0] grp_padding2d_fix16_2_fu_387_input_r_address0;
wire    grp_padding2d_fix16_2_fu_387_input_r_ce0;
wire   [10:0] grp_padding2d_fix16_2_fu_387_output_r_address0;
wire    grp_padding2d_fix16_2_fu_387_output_r_ce0;
wire    grp_padding2d_fix16_2_fu_387_output_r_we0;
wire   [15:0] grp_padding2d_fix16_2_fu_387_output_r_d0;
wire    grp_padding2d_fix16_3_fu_398_ap_start;
wire    grp_padding2d_fix16_3_fu_398_ap_done;
wire    grp_padding2d_fix16_3_fu_398_ap_idle;
wire    grp_padding2d_fix16_3_fu_398_ap_ready;
wire   [9:0] grp_padding2d_fix16_3_fu_398_output_r_address0;
wire    grp_padding2d_fix16_3_fu_398_output_r_ce0;
wire    grp_padding2d_fix16_3_fu_398_output_r_we0;
wire   [15:0] grp_padding2d_fix16_3_fu_398_output_r_d0;
wire   [8:0] grp_padding2d_fix16_3_fu_398_MaxPooling2D_1_array_address0;
wire    grp_padding2d_fix16_3_fu_398_MaxPooling2D_1_array_ce0;
wire    grp_depthwise_conv2d_fix_1_fu_409_ap_start;
wire    grp_depthwise_conv2d_fix_1_fu_409_ap_done;
wire    grp_depthwise_conv2d_fix_1_fu_409_ap_idle;
wire    grp_depthwise_conv2d_fix_1_fu_409_ap_ready;
wire   [13:0] grp_depthwise_conv2d_fix_1_fu_409_output_r_address0;
wire    grp_depthwise_conv2d_fix_1_fu_409_output_r_ce0;
wire    grp_depthwise_conv2d_fix_1_fu_409_output_r_we0;
wire   [15:0] grp_depthwise_conv2d_fix_1_fu_409_output_r_d0;
wire   [13:0] grp_depthwise_conv2d_fix_1_fu_409_Padding2D_4_array_address0;
wire    grp_depthwise_conv2d_fix_1_fu_409_Padding2D_4_array_ce0;
wire    grp_depthwise_conv2d_fix_3_fu_424_ap_start;
wire    grp_depthwise_conv2d_fix_3_fu_424_ap_done;
wire    grp_depthwise_conv2d_fix_3_fu_424_ap_idle;
wire    grp_depthwise_conv2d_fix_3_fu_424_ap_ready;
wire   [11:0] grp_depthwise_conv2d_fix_3_fu_424_output_r_address0;
wire    grp_depthwise_conv2d_fix_3_fu_424_output_r_ce0;
wire    grp_depthwise_conv2d_fix_3_fu_424_output_r_we0;
wire   [15:0] grp_depthwise_conv2d_fix_3_fu_424_output_r_d0;
wire   [11:0] grp_depthwise_conv2d_fix_3_fu_424_Padding2D_1_array_address0;
wire    grp_depthwise_conv2d_fix_3_fu_424_Padding2D_1_array_ce0;
wire    grp_depthwise_conv2d_fix_fu_439_ap_start;
wire    grp_depthwise_conv2d_fix_fu_439_ap_done;
wire    grp_depthwise_conv2d_fix_fu_439_ap_idle;
wire    grp_depthwise_conv2d_fix_fu_439_ap_ready;
wire   [10:0] grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_address0;
wire    grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_ce0;
wire    grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_we0;
wire   [15:0] grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_d0;
wire   [10:0] grp_depthwise_conv2d_fix_fu_439_Padding2D_3_array_address0;
wire    grp_depthwise_conv2d_fix_fu_439_Padding2D_3_array_ce0;
wire    grp_depthwise_conv2d_fix_2_fu_454_ap_start;
wire    grp_depthwise_conv2d_fix_2_fu_454_ap_done;
wire    grp_depthwise_conv2d_fix_2_fu_454_ap_idle;
wire    grp_depthwise_conv2d_fix_2_fu_454_ap_ready;
wire   [8:0] grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_address0;
wire    grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_ce0;
wire    grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_we0;
wire   [15:0] grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_d0;
wire   [9:0] grp_depthwise_conv2d_fix_2_fu_454_Padding2D_2_array_address0;
wire    grp_depthwise_conv2d_fix_2_fu_454_Padding2D_2_array_ce0;
wire    grp_depthwise_conv2d_fix_4_fu_469_ap_start;
wire    grp_depthwise_conv2d_fix_4_fu_469_ap_done;
wire    grp_depthwise_conv2d_fix_4_fu_469_ap_idle;
wire    grp_depthwise_conv2d_fix_4_fu_469_ap_ready;
wire   [9:0] grp_depthwise_conv2d_fix_4_fu_469_output_r_address0;
wire    grp_depthwise_conv2d_fix_4_fu_469_output_r_ce0;
wire    grp_depthwise_conv2d_fix_4_fu_469_output_r_we0;
wire   [15:0] grp_depthwise_conv2d_fix_4_fu_469_output_r_d0;
wire   [9:0] grp_depthwise_conv2d_fix_4_fu_469_Padding2D_0_array_address0;
wire    grp_depthwise_conv2d_fix_4_fu_469_Padding2D_0_array_ce0;
wire    grp_pointwise_conv2d_fix_4_fu_484_ap_start;
wire    grp_pointwise_conv2d_fix_4_fu_484_ap_done;
wire    grp_pointwise_conv2d_fix_4_fu_484_ap_idle;
wire    grp_pointwise_conv2d_fix_4_fu_484_ap_ready;
wire   [13:0] grp_pointwise_conv2d_fix_4_fu_484_output_r_address0;
wire    grp_pointwise_conv2d_fix_4_fu_484_output_r_ce0;
wire    grp_pointwise_conv2d_fix_4_fu_484_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_4_fu_484_output_r_d0;
wire   [9:0] grp_pointwise_conv2d_fix_4_fu_484_SeparableConv2D_0_m_s_address0;
wire    grp_pointwise_conv2d_fix_4_fu_484_SeparableConv2D_0_m_s_ce0;
wire    grp_pointwise_conv2d_fix_2_fu_498_ap_start;
wire    grp_pointwise_conv2d_fix_2_fu_498_ap_done;
wire    grp_pointwise_conv2d_fix_2_fu_498_ap_idle;
wire    grp_pointwise_conv2d_fix_2_fu_498_ap_ready;
wire   [10:0] grp_pointwise_conv2d_fix_2_fu_498_input_r_address0;
wire    grp_pointwise_conv2d_fix_2_fu_498_input_r_ce0;
wire   [11:0] grp_pointwise_conv2d_fix_2_fu_498_output_r_address0;
wire    grp_pointwise_conv2d_fix_2_fu_498_output_r_ce0;
wire    grp_pointwise_conv2d_fix_2_fu_498_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_2_fu_498_output_r_d0;
wire    grp_pointwise_conv2d_fix_3_fu_512_ap_start;
wire    grp_pointwise_conv2d_fix_3_fu_512_ap_done;
wire    grp_pointwise_conv2d_fix_3_fu_512_ap_idle;
wire    grp_pointwise_conv2d_fix_3_fu_512_ap_ready;
wire   [10:0] grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_address0;
wire    grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_ce0;
wire    grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_we0;
wire   [15:0] grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_d0;
wire   [11:0] grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_m_s_address0;
wire    grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_m_s_ce0;
wire    grp_pointwise_conv2d_fix_fu_526_ap_start;
wire    grp_pointwise_conv2d_fix_fu_526_ap_done;
wire    grp_pointwise_conv2d_fix_fu_526_ap_idle;
wire    grp_pointwise_conv2d_fix_fu_526_ap_ready;
wire   [8:0] grp_pointwise_conv2d_fix_fu_526_input_r_address0;
wire    grp_pointwise_conv2d_fix_fu_526_input_r_ce0;
wire   [8:0] grp_pointwise_conv2d_fix_fu_526_output_r_address0;
wire    grp_pointwise_conv2d_fix_fu_526_output_r_ce0;
wire    grp_pointwise_conv2d_fix_fu_526_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_fu_526_output_r_d0;
wire    grp_max_pooling2d_fix16_1_fu_540_ap_start;
wire    grp_max_pooling2d_fix16_1_fu_540_ap_done;
wire    grp_max_pooling2d_fix16_1_fu_540_ap_idle;
wire    grp_max_pooling2d_fix16_1_fu_540_ap_ready;
wire   [11:0] grp_max_pooling2d_fix16_1_fu_540_output_r_address0;
wire    grp_max_pooling2d_fix16_1_fu_540_output_r_ce0;
wire    grp_max_pooling2d_fix16_1_fu_540_output_r_we0;
wire   [15:0] grp_max_pooling2d_fix16_1_fu_540_output_r_d0;
wire   [13:0] grp_max_pooling2d_fix16_1_fu_540_SeparableConv2D_0_ar_address0;
wire    grp_max_pooling2d_fix16_1_fu_540_SeparableConv2D_0_ar_ce0;
wire    grp_max_pooling2d_fix16_fu_553_ap_start;
wire    grp_max_pooling2d_fix16_fu_553_ap_done;
wire    grp_max_pooling2d_fix16_fu_553_ap_idle;
wire    grp_max_pooling2d_fix16_fu_553_ap_ready;
wire   [10:0] grp_max_pooling2d_fix16_fu_553_input_r_address0;
wire    grp_max_pooling2d_fix16_fu_553_input_r_ce0;
wire   [8:0] grp_max_pooling2d_fix16_fu_553_output_r_address0;
wire    grp_max_pooling2d_fix16_fu_553_output_r_ce0;
wire    grp_max_pooling2d_fix16_fu_553_output_r_we0;
wire   [15:0] grp_max_pooling2d_fix16_fu_553_output_r_d0;
wire    grp_pointwise_conv2d_fix_1_fu_566_ap_start;
wire    grp_pointwise_conv2d_fix_1_fu_566_ap_idle;
wire   [9:0] grp_pointwise_conv2d_fix_1_fu_566_output_r_address0;
wire    grp_pointwise_conv2d_fix_1_fu_566_output_r_ce0;
wire    grp_pointwise_conv2d_fix_1_fu_566_output_r_we0;
wire   [15:0] grp_pointwise_conv2d_fix_1_fu_566_output_r_d0;
wire   [13:0] grp_pointwise_conv2d_fix_1_fu_566_SeparableConv2D_4_m_s_address0;
wire    grp_pointwise_conv2d_fix_1_fu_566_SeparableConv2D_4_m_s_ce0;
wire    grp_up_sampling2d_fix16_fu_578_ap_start;
wire    grp_up_sampling2d_fix16_fu_578_ap_done;
wire    grp_up_sampling2d_fix16_fu_578_ap_idle;
wire    grp_up_sampling2d_fix16_fu_578_ap_ready;
wire   [11:0] grp_up_sampling2d_fix16_fu_578_SeparableConv2D_3_ar_address0;
wire    grp_up_sampling2d_fix16_fu_578_SeparableConv2D_3_ar_ce0;
wire   [13:0] grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_address0;
wire    grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_ce0;
wire    grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_we0;
wire   [15:0] grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_d0;
wire    grp_up_sampling2d_fix16_1_fu_591_ap_start;
wire    grp_up_sampling2d_fix16_1_fu_591_ap_done;
wire    grp_up_sampling2d_fix16_1_fu_591_ap_idle;
wire    grp_up_sampling2d_fix16_1_fu_591_ap_ready;
wire   [8:0] grp_up_sampling2d_fix16_1_fu_591_SeparableConv2D_2_ar_address0;
wire    grp_up_sampling2d_fix16_1_fu_591_SeparableConv2D_2_ar_ce0;
wire   [10:0] grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_address0;
wire    grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_ce0;
wire    grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_we0;
wire   [15:0] grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_d0;
wire    grp_padding2d_fix16_fu_604_ap_start;
wire    grp_padding2d_fix16_fu_604_ap_done;
wire    grp_padding2d_fix16_fu_604_ap_idle;
wire    grp_padding2d_fix16_fu_604_ap_ready;
wire   [9:0] grp_padding2d_fix16_fu_604_input_r_address0;
wire    grp_padding2d_fix16_fu_604_input_r_ce0;
wire   [9:0] grp_padding2d_fix16_fu_604_output_r_address0;
wire    grp_padding2d_fix16_fu_604_output_r_ce0;
wire    grp_padding2d_fix16_fu_604_output_r_we0;
wire   [15:0] grp_padding2d_fix16_fu_604_output_r_d0;
reg   [9:0] i_reg_343;
reg    grp_padding2d_fix16_1_fu_365_ap_start_reg;
wire    ap_CS_fsm_state36;
reg    grp_padding2d_fix16_4_fu_376_ap_start_reg;
wire    ap_CS_fsm_state12;
reg    grp_padding2d_fix16_2_fu_387_ap_start_reg;
wire    ap_CS_fsm_state28;
reg    grp_padding2d_fix16_3_fu_398_ap_start_reg;
wire    ap_CS_fsm_state20;
reg    grp_depthwise_conv2d_fix_1_fu_409_ap_start_reg;
wire    ap_CS_fsm_state38;
reg    grp_depthwise_conv2d_fix_3_fu_424_ap_start_reg;
wire    ap_CS_fsm_state14;
reg    grp_depthwise_conv2d_fix_fu_439_ap_start_reg;
wire    ap_CS_fsm_state30;
reg    grp_depthwise_conv2d_fix_2_fu_454_ap_start_reg;
wire    ap_CS_fsm_state22;
reg    grp_depthwise_conv2d_fix_4_fu_469_ap_start_reg;
wire    ap_CS_fsm_state6;
reg    grp_pointwise_conv2d_fix_4_fu_484_ap_start_reg;
wire    ap_CS_fsm_state8;
reg    grp_pointwise_conv2d_fix_2_fu_498_ap_start_reg;
wire    ap_CS_fsm_state32;
reg    grp_pointwise_conv2d_fix_3_fu_512_ap_start_reg;
wire    ap_CS_fsm_state16;
reg    grp_pointwise_conv2d_fix_fu_526_ap_start_reg;
wire    ap_CS_fsm_state24;
reg    grp_max_pooling2d_fix16_1_fu_540_ap_start_reg;
wire    ap_CS_fsm_state10;
reg    grp_max_pooling2d_fix16_fu_553_ap_start_reg;
wire    ap_CS_fsm_state18;
reg    grp_pointwise_conv2d_fix_1_fu_566_ap_start_reg;
reg    grp_up_sampling2d_fix16_fu_578_ap_start_reg;
wire    ap_CS_fsm_state34;
reg    grp_up_sampling2d_fix16_1_fu_591_ap_start_reg;
wire    ap_CS_fsm_state26;
reg    grp_padding2d_fix16_fu_604_ap_start_reg;
reg    ap_block_state3_ignore_call0;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_70_fu_916_p1;
wire   [63:0] i1_cast2_fu_1032_p1;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] array_length_fu_889_p0;
wire   [15:0] array_length_fu_889_p1;
wire   [48:0] i1_cast_fu_1037_p1;
wire   [15:0] tmp1_fu_1052_p0;
wire   [15:0] tmp1_fu_1052_p1;
wire    ap_CS_fsm_state45;
reg    ap_block_state45;
reg   [42:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [47:0] array_length_fu_889_p00;
wire   [47:0] array_length_fu_889_p10;
wire   [31:0] tmp1_fu_1052_p00;
wire   [31:0] tmp1_fu_1052_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
#0 input_data_V_data_V_0_sel_rd = 1'b0;
#0 input_data_V_data_V_0_sel_wr = 1'b0;
#0 input_data_V_data_V_0_state = 2'd0;
#0 input_data_V_dest_V_0_state = 2'd0;
#0 output_data_V_data_V_1_sel_rd = 1'b0;
#0 output_data_V_data_V_1_sel_wr = 1'b0;
#0 output_data_V_data_V_1_state = 2'd0;
#0 output_data_V_keep_V_1_sel_rd = 1'b0;
#0 output_data_V_keep_V_1_state = 2'd0;
#0 output_data_V_strb_V_1_sel_rd = 1'b0;
#0 output_data_V_strb_V_1_state = 2'd0;
#0 output_data_V_user_V_1_sel_rd = 1'b0;
#0 output_data_V_user_V_1_sel_wr = 1'b0;
#0 output_data_V_user_V_1_state = 2'd0;
#0 output_data_V_last_V_1_sel_rd = 1'b0;
#0 output_data_V_last_V_1_sel_wr = 1'b0;
#0 output_data_V_last_V_1_state = 2'd0;
#0 output_data_V_id_V_1_sel_rd = 1'b0;
#0 output_data_V_id_V_1_state = 2'd0;
#0 output_data_V_dest_V_1_sel_rd = 1'b0;
#0 output_data_V_dest_V_1_state = 2'd0;
#0 SeparableConv2D_4_de = 16'd1;
#0 SeparableConv2D_4_he = 16'd28;
#0 SeparableConv2D_4_wi = 16'd28;
#0 Padding2D_0_depth = 16'd1;
#0 Padding2D_0_height = 16'd30;
#0 Padding2D_0_width = 16'd30;
#0 SeparableConv2D_0_de = 16'd16;
#0 SeparableConv2D_0_he = 16'd28;
#0 SeparableConv2D_0_wi = 16'd28;
#0 MaxPooling2D_0_depth = 16'd16;
#0 MaxPooling2D_0_heigh = 16'd14;
#0 MaxPooling2D_0_width = 16'd14;
#0 Padding2D_1_depth = 16'd16;
#0 Padding2D_1_height = 16'd16;
#0 Padding2D_1_width = 16'd16;
#0 SeparableConv2D_1_de = 16'd8;
#0 SeparableConv2D_1_he = 16'd14;
#0 SeparableConv2D_1_wi = 16'd14;
#0 MaxPooling2D_1_depth = 16'd8;
#0 MaxPooling2D_1_heigh = 16'd7;
#0 MaxPooling2D_1_width = 16'd7;
#0 Padding2D_2_depth = 16'd8;
#0 Padding2D_2_height = 16'd9;
#0 Padding2D_2_width = 16'd9;
#0 SeparableConv2D_2_de = 16'd8;
#0 SeparableConv2D_2_he = 16'd7;
#0 SeparableConv2D_2_wi = 16'd7;
#0 UpSampling2D_0_depth = 16'd8;
#0 UpSampling2D_0_heigh = 16'd14;
#0 UpSampling2D_0_width = 16'd14;
#0 Padding2D_3_depth = 16'd8;
#0 Padding2D_3_height = 16'd16;
#0 Padding2D_3_width = 16'd16;
#0 SeparableConv2D_3_de = 16'd16;
#0 SeparableConv2D_3_he = 16'd14;
#0 SeparableConv2D_3_wi = 16'd14;
#0 UpSampling2D_1_depth = 16'd16;
#0 UpSampling2D_1_heigh = 16'd28;
#0 UpSampling2D_1_width = 16'd28;
#0 Padding2D_4_depth = 16'd16;
#0 Padding2D_4_height = 16'd30;
#0 Padding2D_4_width = 16'd30;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 grp_padding2d_fix16_1_fu_365_ap_start_reg = 1'b0;
#0 grp_padding2d_fix16_4_fu_376_ap_start_reg = 1'b0;
#0 grp_padding2d_fix16_2_fu_387_ap_start_reg = 1'b0;
#0 grp_padding2d_fix16_3_fu_398_ap_start_reg = 1'b0;
#0 grp_depthwise_conv2d_fix_1_fu_409_ap_start_reg = 1'b0;
#0 grp_depthwise_conv2d_fix_3_fu_424_ap_start_reg = 1'b0;
#0 grp_depthwise_conv2d_fix_fu_439_ap_start_reg = 1'b0;
#0 grp_depthwise_conv2d_fix_2_fu_454_ap_start_reg = 1'b0;
#0 grp_depthwise_conv2d_fix_4_fu_469_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_4_fu_484_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_2_fu_498_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_3_fu_512_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_fu_526_ap_start_reg = 1'b0;
#0 grp_max_pooling2d_fix16_1_fu_540_ap_start_reg = 1'b0;
#0 grp_max_pooling2d_fix16_fu_553_ap_start_reg = 1'b0;
#0 grp_pointwise_conv2d_fix_1_fu_566_ap_start_reg = 1'b0;
#0 grp_up_sampling2d_fix16_fu_578_ap_start_reg = 1'b0;
#0 grp_up_sampling2d_fix16_1_fu_591_ap_start_reg = 1'b0;
#0 grp_padding2d_fix16_fu_604_ap_start_reg = 1'b0;
end

network_Padding2D_0_array #(
    .DataWidth( 16 ),
    .AddressRange( 900 ),
    .AddressWidth( 10 ))
Padding2D_0_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Padding2D_0_array_address0),
    .ce0(Padding2D_0_array_ce0),
    .we0(Padding2D_0_array_we0),
    .d0(grp_padding2d_fix16_fu_604_output_r_d0),
    .q0(Padding2D_0_array_q0)
);

network_SeparableConv2D_0_m_s #(
    .DataWidth( 16 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
SeparableConv2D_0_m_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_0_m_s_address0),
    .ce0(SeparableConv2D_0_m_s_ce0),
    .we0(SeparableConv2D_0_m_s_we0),
    .d0(grp_depthwise_conv2d_fix_4_fu_469_output_r_d0),
    .q0(SeparableConv2D_0_m_s_q0)
);

network_SeparableConv2D_0_ar #(
    .DataWidth( 16 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
SeparableConv2D_0_ar_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_0_ar_address0),
    .ce0(SeparableConv2D_0_ar_ce0),
    .we0(SeparableConv2D_0_ar_we0),
    .d0(grp_pointwise_conv2d_fix_4_fu_484_output_r_d0),
    .q0(SeparableConv2D_0_ar_q0)
);

network_MaxPooling2D_0_array #(
    .DataWidth( 16 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
MaxPooling2D_0_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(MaxPooling2D_0_array_address0),
    .ce0(MaxPooling2D_0_array_ce0),
    .we0(MaxPooling2D_0_array_we0),
    .d0(grp_max_pooling2d_fix16_1_fu_540_output_r_d0),
    .q0(MaxPooling2D_0_array_q0)
);

network_Padding2D_1_array #(
    .DataWidth( 16 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
Padding2D_1_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Padding2D_1_array_address0),
    .ce0(Padding2D_1_array_ce0),
    .we0(Padding2D_1_array_we0),
    .d0(grp_padding2d_fix16_4_fu_376_output_r_d0),
    .q0(Padding2D_1_array_q0)
);

network_MaxPooling2D_0_array #(
    .DataWidth( 16 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
SeparableConv2D_1_m_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_1_m_s_address0),
    .ce0(SeparableConv2D_1_m_s_ce0),
    .we0(SeparableConv2D_1_m_s_we0),
    .d0(grp_depthwise_conv2d_fix_3_fu_424_output_r_d0),
    .q0(SeparableConv2D_1_m_s_q0)
);

network_SeparableConv2D_1_ar #(
    .DataWidth( 16 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
SeparableConv2D_1_ar_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_1_ar_address0),
    .ce0(SeparableConv2D_1_ar_ce0),
    .we0(SeparableConv2D_1_ar_we0),
    .d0(grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_d0),
    .q0(SeparableConv2D_1_ar_q0)
);

network_MaxPooling2D_1_array #(
    .DataWidth( 16 ),
    .AddressRange( 392 ),
    .AddressWidth( 9 ))
MaxPooling2D_1_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(MaxPooling2D_1_array_address0),
    .ce0(MaxPooling2D_1_array_ce0),
    .we0(MaxPooling2D_1_array_we0),
    .d0(grp_max_pooling2d_fix16_fu_553_output_r_d0),
    .q0(MaxPooling2D_1_array_q0)
);

network_Padding2D_2_array #(
    .DataWidth( 16 ),
    .AddressRange( 648 ),
    .AddressWidth( 10 ))
Padding2D_2_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Padding2D_2_array_address0),
    .ce0(Padding2D_2_array_ce0),
    .we0(Padding2D_2_array_we0),
    .d0(grp_padding2d_fix16_3_fu_398_output_r_d0),
    .q0(Padding2D_2_array_q0)
);

network_MaxPooling2D_1_array #(
    .DataWidth( 16 ),
    .AddressRange( 392 ),
    .AddressWidth( 9 ))
SeparableConv2D_2_m_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_2_m_s_address0),
    .ce0(SeparableConv2D_2_m_s_ce0),
    .we0(SeparableConv2D_2_m_s_we0),
    .d0(grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_d0),
    .q0(SeparableConv2D_2_m_s_q0)
);

network_MaxPooling2D_1_array #(
    .DataWidth( 16 ),
    .AddressRange( 392 ),
    .AddressWidth( 9 ))
SeparableConv2D_2_ar_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_2_ar_address0),
    .ce0(SeparableConv2D_2_ar_ce0),
    .we0(SeparableConv2D_2_ar_we0),
    .d0(grp_pointwise_conv2d_fix_fu_526_output_r_d0),
    .q0(SeparableConv2D_2_ar_q0)
);

network_SeparableConv2D_1_ar #(
    .DataWidth( 16 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
UpSampling2D_0_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(UpSampling2D_0_array_address0),
    .ce0(UpSampling2D_0_array_ce0),
    .we0(UpSampling2D_0_array_we0),
    .d0(grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_d0),
    .q0(UpSampling2D_0_array_q0)
);

network_Padding2D_3_array #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
Padding2D_3_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Padding2D_3_array_address0),
    .ce0(Padding2D_3_array_ce0),
    .we0(Padding2D_3_array_we0),
    .d0(grp_padding2d_fix16_2_fu_387_output_r_d0),
    .q0(Padding2D_3_array_q0)
);

network_SeparableConv2D_1_ar #(
    .DataWidth( 16 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
SeparableConv2D_3_m_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_3_m_s_address0),
    .ce0(SeparableConv2D_3_m_s_ce0),
    .we0(SeparableConv2D_3_m_s_we0),
    .d0(grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_d0),
    .q0(SeparableConv2D_3_m_s_q0)
);

network_MaxPooling2D_0_array #(
    .DataWidth( 16 ),
    .AddressRange( 3136 ),
    .AddressWidth( 12 ))
SeparableConv2D_3_ar_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_3_ar_address0),
    .ce0(SeparableConv2D_3_ar_ce0),
    .we0(SeparableConv2D_3_ar_we0),
    .d0(grp_pointwise_conv2d_fix_2_fu_498_output_r_d0),
    .q0(SeparableConv2D_3_ar_q0)
);

network_SeparableConv2D_0_ar #(
    .DataWidth( 16 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
UpSampling2D_1_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(UpSampling2D_1_array_address0),
    .ce0(UpSampling2D_1_array_ce0),
    .we0(UpSampling2D_1_array_we0),
    .d0(grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_d0),
    .q0(UpSampling2D_1_array_q0)
);

network_Padding2D_4_array #(
    .DataWidth( 16 ),
    .AddressRange( 14400 ),
    .AddressWidth( 14 ))
Padding2D_4_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Padding2D_4_array_address0),
    .ce0(Padding2D_4_array_ce0),
    .we0(Padding2D_4_array_we0),
    .d0(grp_padding2d_fix16_1_fu_365_output_r_d0),
    .q0(Padding2D_4_array_q0)
);

network_SeparableConv2D_0_ar #(
    .DataWidth( 16 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
SeparableConv2D_4_m_s_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_4_m_s_address0),
    .ce0(SeparableConv2D_4_m_s_ce0),
    .we0(SeparableConv2D_4_m_s_we0),
    .d0(grp_depthwise_conv2d_fix_1_fu_409_output_r_d0),
    .q0(SeparableConv2D_4_m_s_q0)
);

network_SeparableConv2D_0_m_s #(
    .DataWidth( 16 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
SeparableConv2D_4_ar_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SeparableConv2D_4_ar_address0),
    .ce0(SeparableConv2D_4_ar_ce0),
    .we0(SeparableConv2D_4_ar_we0),
    .d0(grp_pointwise_conv2d_fix_1_fu_566_output_r_d0),
    .q0(SeparableConv2D_4_ar_q0)
);

network_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
network_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

network_input_0_array #(
    .DataWidth( 16 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
input_0_array_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_0_array_address0),
    .ce0(input_0_array_ce0),
    .we0(input_0_array_we0),
    .d0(input_data_V_data_V_0_data_out),
    .q0(input_0_array_q0)
);

padding2d_fix16_1 grp_padding2d_fix16_1_fu_365(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_padding2d_fix16_1_fu_365_ap_start),
    .ap_done(grp_padding2d_fix16_1_fu_365_ap_done),
    .ap_idle(grp_padding2d_fix16_1_fu_365_ap_idle),
    .ap_ready(grp_padding2d_fix16_1_fu_365_ap_ready),
    .input_depth(reg_856),
    .input_height(reg_862),
    .input_width(reg_868),
    .input_r_address0(grp_padding2d_fix16_1_fu_365_input_r_address0),
    .input_r_ce0(grp_padding2d_fix16_1_fu_365_input_r_ce0),
    .input_r_q0(UpSampling2D_1_array_q0),
    .output_r_address0(grp_padding2d_fix16_1_fu_365_output_r_address0),
    .output_r_ce0(grp_padding2d_fix16_1_fu_365_output_r_ce0),
    .output_r_we0(grp_padding2d_fix16_1_fu_365_output_r_we0),
    .output_r_d0(grp_padding2d_fix16_1_fu_365_output_r_d0)
);

padding2d_fix16_4 grp_padding2d_fix16_4_fu_376(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_padding2d_fix16_4_fu_376_ap_start),
    .ap_done(grp_padding2d_fix16_4_fu_376_ap_done),
    .ap_idle(grp_padding2d_fix16_4_fu_376_ap_idle),
    .ap_ready(grp_padding2d_fix16_4_fu_376_ap_ready),
    .input_depth(reg_760),
    .input_height(reg_766),
    .input_width(reg_772),
    .output_r_address0(grp_padding2d_fix16_4_fu_376_output_r_address0),
    .output_r_ce0(grp_padding2d_fix16_4_fu_376_output_r_ce0),
    .output_r_we0(grp_padding2d_fix16_4_fu_376_output_r_we0),
    .output_r_d0(grp_padding2d_fix16_4_fu_376_output_r_d0),
    .MaxPooling2D_0_array_address0(grp_padding2d_fix16_4_fu_376_MaxPooling2D_0_array_address0),
    .MaxPooling2D_0_array_ce0(grp_padding2d_fix16_4_fu_376_MaxPooling2D_0_array_ce0),
    .MaxPooling2D_0_array_q0(MaxPooling2D_0_array_q0)
);

padding2d_fix16_2 grp_padding2d_fix16_2_fu_387(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_padding2d_fix16_2_fu_387_ap_start),
    .ap_done(grp_padding2d_fix16_2_fu_387_ap_done),
    .ap_idle(grp_padding2d_fix16_2_fu_387_ap_idle),
    .ap_ready(grp_padding2d_fix16_2_fu_387_ap_ready),
    .input_depth(reg_824),
    .input_height(reg_830),
    .input_width(reg_836),
    .input_r_address0(grp_padding2d_fix16_2_fu_387_input_r_address0),
    .input_r_ce0(grp_padding2d_fix16_2_fu_387_input_r_ce0),
    .input_r_q0(UpSampling2D_0_array_q0),
    .output_r_address0(grp_padding2d_fix16_2_fu_387_output_r_address0),
    .output_r_ce0(grp_padding2d_fix16_2_fu_387_output_r_ce0),
    .output_r_we0(grp_padding2d_fix16_2_fu_387_output_r_we0),
    .output_r_d0(grp_padding2d_fix16_2_fu_387_output_r_d0)
);

padding2d_fix16_3 grp_padding2d_fix16_3_fu_398(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_padding2d_fix16_3_fu_398_ap_start),
    .ap_done(grp_padding2d_fix16_3_fu_398_ap_done),
    .ap_idle(grp_padding2d_fix16_3_fu_398_ap_idle),
    .ap_ready(grp_padding2d_fix16_3_fu_398_ap_ready),
    .input_depth(reg_792),
    .input_height(reg_798),
    .input_width(reg_804),
    .output_r_address0(grp_padding2d_fix16_3_fu_398_output_r_address0),
    .output_r_ce0(grp_padding2d_fix16_3_fu_398_output_r_ce0),
    .output_r_we0(grp_padding2d_fix16_3_fu_398_output_r_we0),
    .output_r_d0(grp_padding2d_fix16_3_fu_398_output_r_d0),
    .MaxPooling2D_1_array_address0(grp_padding2d_fix16_3_fu_398_MaxPooling2D_1_array_address0),
    .MaxPooling2D_1_array_ce0(grp_padding2d_fix16_3_fu_398_MaxPooling2D_1_array_ce0),
    .MaxPooling2D_1_array_q0(MaxPooling2D_1_array_q0)
);

depthwise_conv2d_fix_1 grp_depthwise_conv2d_fix_1_fu_409(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_1_fu_409_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_1_fu_409_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_1_fu_409_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_1_fu_409_ap_ready),
    .input_height(Padding2D_4_height),
    .input_width(Padding2D_4_width),
    .output_depth(Padding2D_4_depth),
    .output_height(SeparableConv2D_4_he),
    .output_width(SeparableConv2D_4_wi),
    .output_r_address0(grp_depthwise_conv2d_fix_1_fu_409_output_r_address0),
    .output_r_ce0(grp_depthwise_conv2d_fix_1_fu_409_output_r_ce0),
    .output_r_we0(grp_depthwise_conv2d_fix_1_fu_409_output_r_we0),
    .output_r_d0(grp_depthwise_conv2d_fix_1_fu_409_output_r_d0),
    .output_r_q0(SeparableConv2D_4_m_s_q0),
    .Padding2D_4_array_address0(grp_depthwise_conv2d_fix_1_fu_409_Padding2D_4_array_address0),
    .Padding2D_4_array_ce0(grp_depthwise_conv2d_fix_1_fu_409_Padding2D_4_array_ce0),
    .Padding2D_4_array_q0(Padding2D_4_array_q0)
);

depthwise_conv2d_fix_3 grp_depthwise_conv2d_fix_3_fu_424(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_3_fu_424_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_3_fu_424_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_3_fu_424_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_3_fu_424_ap_ready),
    .input_height(Padding2D_1_height),
    .input_width(Padding2D_1_width),
    .output_depth(Padding2D_1_depth),
    .output_height(reg_778),
    .output_width(reg_785),
    .output_r_address0(grp_depthwise_conv2d_fix_3_fu_424_output_r_address0),
    .output_r_ce0(grp_depthwise_conv2d_fix_3_fu_424_output_r_ce0),
    .output_r_we0(grp_depthwise_conv2d_fix_3_fu_424_output_r_we0),
    .output_r_d0(grp_depthwise_conv2d_fix_3_fu_424_output_r_d0),
    .output_r_q0(SeparableConv2D_1_m_s_q0),
    .Padding2D_1_array_address0(grp_depthwise_conv2d_fix_3_fu_424_Padding2D_1_array_address0),
    .Padding2D_1_array_ce0(grp_depthwise_conv2d_fix_3_fu_424_Padding2D_1_array_ce0),
    .Padding2D_1_array_q0(Padding2D_1_array_q0)
);

depthwise_conv2d_fix grp_depthwise_conv2d_fix_fu_439(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_fu_439_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_fu_439_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_fu_439_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_fu_439_ap_ready),
    .input_height(Padding2D_3_height),
    .input_width(Padding2D_3_width),
    .output_depth(Padding2D_3_depth),
    .output_height(reg_842),
    .output_width(reg_849),
    .SeparableConv2D_3_m_s_address0(grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_address0),
    .SeparableConv2D_3_m_s_ce0(grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_ce0),
    .SeparableConv2D_3_m_s_we0(grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_we0),
    .SeparableConv2D_3_m_s_d0(grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_d0),
    .SeparableConv2D_3_m_s_q0(SeparableConv2D_3_m_s_q0),
    .Padding2D_3_array_address0(grp_depthwise_conv2d_fix_fu_439_Padding2D_3_array_address0),
    .Padding2D_3_array_ce0(grp_depthwise_conv2d_fix_fu_439_Padding2D_3_array_ce0),
    .Padding2D_3_array_q0(Padding2D_3_array_q0)
);

depthwise_conv2d_fix_2 grp_depthwise_conv2d_fix_2_fu_454(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_2_fu_454_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_2_fu_454_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_2_fu_454_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_2_fu_454_ap_ready),
    .input_height(Padding2D_2_height),
    .input_width(Padding2D_2_width),
    .output_depth(Padding2D_2_depth),
    .output_height(reg_810),
    .output_width(reg_817),
    .SeparableConv2D_2_m_s_address0(grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_address0),
    .SeparableConv2D_2_m_s_ce0(grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_ce0),
    .SeparableConv2D_2_m_s_we0(grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_we0),
    .SeparableConv2D_2_m_s_d0(grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_d0),
    .SeparableConv2D_2_m_s_q0(SeparableConv2D_2_m_s_q0),
    .Padding2D_2_array_address0(grp_depthwise_conv2d_fix_2_fu_454_Padding2D_2_array_address0),
    .Padding2D_2_array_ce0(grp_depthwise_conv2d_fix_2_fu_454_Padding2D_2_array_ce0),
    .Padding2D_2_array_q0(Padding2D_2_array_q0)
);

depthwise_conv2d_fix_4 grp_depthwise_conv2d_fix_4_fu_469(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_depthwise_conv2d_fix_4_fu_469_ap_start),
    .ap_done(grp_depthwise_conv2d_fix_4_fu_469_ap_done),
    .ap_idle(grp_depthwise_conv2d_fix_4_fu_469_ap_idle),
    .ap_ready(grp_depthwise_conv2d_fix_4_fu_469_ap_ready),
    .input_height(Padding2D_0_height),
    .input_width(Padding2D_0_width),
    .output_depth(Padding2D_0_depth),
    .output_height(reg_746),
    .output_width(reg_753),
    .output_r_address0(grp_depthwise_conv2d_fix_4_fu_469_output_r_address0),
    .output_r_ce0(grp_depthwise_conv2d_fix_4_fu_469_output_r_ce0),
    .output_r_we0(grp_depthwise_conv2d_fix_4_fu_469_output_r_we0),
    .output_r_d0(grp_depthwise_conv2d_fix_4_fu_469_output_r_d0),
    .output_r_q0(SeparableConv2D_0_m_s_q0),
    .Padding2D_0_array_address0(grp_depthwise_conv2d_fix_4_fu_469_Padding2D_0_array_address0),
    .Padding2D_0_array_ce0(grp_depthwise_conv2d_fix_4_fu_469_Padding2D_0_array_ce0),
    .Padding2D_0_array_q0(Padding2D_0_array_q0)
);

pointwise_conv2d_fix_4 grp_pointwise_conv2d_fix_4_fu_484(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_4_fu_484_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_4_fu_484_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_4_fu_484_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_4_fu_484_ap_ready),
    .input_depth(Padding2D_0_depth),
    .input_height(reg_746),
    .input_width(reg_753),
    .output_depth(SeparableConv2D_0_de),
    .output_r_address0(grp_pointwise_conv2d_fix_4_fu_484_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_4_fu_484_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_4_fu_484_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_4_fu_484_output_r_d0),
    .SeparableConv2D_0_m_s_address0(grp_pointwise_conv2d_fix_4_fu_484_SeparableConv2D_0_m_s_address0),
    .SeparableConv2D_0_m_s_ce0(grp_pointwise_conv2d_fix_4_fu_484_SeparableConv2D_0_m_s_ce0),
    .SeparableConv2D_0_m_s_q0(SeparableConv2D_0_m_s_q0)
);

pointwise_conv2d_fix_2 grp_pointwise_conv2d_fix_2_fu_498(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_2_fu_498_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_2_fu_498_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_2_fu_498_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_2_fu_498_ap_ready),
    .input_depth(Padding2D_3_depth),
    .input_height(reg_842),
    .input_width(reg_849),
    .input_r_address0(grp_pointwise_conv2d_fix_2_fu_498_input_r_address0),
    .input_r_ce0(grp_pointwise_conv2d_fix_2_fu_498_input_r_ce0),
    .input_r_q0(SeparableConv2D_3_m_s_q0),
    .output_depth(SeparableConv2D_3_de),
    .output_r_address0(grp_pointwise_conv2d_fix_2_fu_498_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_2_fu_498_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_2_fu_498_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_2_fu_498_output_r_d0)
);

pointwise_conv2d_fix_3 grp_pointwise_conv2d_fix_3_fu_512(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_3_fu_512_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_3_fu_512_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_3_fu_512_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_3_fu_512_ap_ready),
    .input_depth(Padding2D_1_depth),
    .input_height(reg_778),
    .input_width(reg_785),
    .output_depth(SeparableConv2D_1_de),
    .SeparableConv2D_1_ar_address0(grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_address0),
    .SeparableConv2D_1_ar_ce0(grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_ce0),
    .SeparableConv2D_1_ar_we0(grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_we0),
    .SeparableConv2D_1_ar_d0(grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_d0),
    .SeparableConv2D_1_m_s_address0(grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_m_s_address0),
    .SeparableConv2D_1_m_s_ce0(grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_m_s_ce0),
    .SeparableConv2D_1_m_s_q0(SeparableConv2D_1_m_s_q0)
);

pointwise_conv2d_fix grp_pointwise_conv2d_fix_fu_526(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_fu_526_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_fu_526_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_fu_526_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_fu_526_ap_ready),
    .input_depth(Padding2D_2_depth),
    .input_height(reg_810),
    .input_width(reg_817),
    .input_r_address0(grp_pointwise_conv2d_fix_fu_526_input_r_address0),
    .input_r_ce0(grp_pointwise_conv2d_fix_fu_526_input_r_ce0),
    .input_r_q0(SeparableConv2D_2_m_s_q0),
    .output_depth(SeparableConv2D_2_de),
    .output_r_address0(grp_pointwise_conv2d_fix_fu_526_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_fu_526_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_fu_526_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_fu_526_output_r_d0)
);

max_pooling2d_fix16_1 grp_max_pooling2d_fix16_1_fu_540(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pooling2d_fix16_1_fu_540_ap_start),
    .ap_done(grp_max_pooling2d_fix16_1_fu_540_ap_done),
    .ap_idle(grp_max_pooling2d_fix16_1_fu_540_ap_idle),
    .ap_ready(grp_max_pooling2d_fix16_1_fu_540_ap_ready),
    .input_height(reg_746),
    .input_width(reg_753),
    .output_depth(reg_760),
    .output_height(reg_766),
    .output_width(reg_772),
    .output_r_address0(grp_max_pooling2d_fix16_1_fu_540_output_r_address0),
    .output_r_ce0(grp_max_pooling2d_fix16_1_fu_540_output_r_ce0),
    .output_r_we0(grp_max_pooling2d_fix16_1_fu_540_output_r_we0),
    .output_r_d0(grp_max_pooling2d_fix16_1_fu_540_output_r_d0),
    .output_r_q0(MaxPooling2D_0_array_q0),
    .SeparableConv2D_0_ar_address0(grp_max_pooling2d_fix16_1_fu_540_SeparableConv2D_0_ar_address0),
    .SeparableConv2D_0_ar_ce0(grp_max_pooling2d_fix16_1_fu_540_SeparableConv2D_0_ar_ce0),
    .SeparableConv2D_0_ar_q0(SeparableConv2D_0_ar_q0)
);

max_pooling2d_fix16 grp_max_pooling2d_fix16_fu_553(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pooling2d_fix16_fu_553_ap_start),
    .ap_done(grp_max_pooling2d_fix16_fu_553_ap_done),
    .ap_idle(grp_max_pooling2d_fix16_fu_553_ap_idle),
    .ap_ready(grp_max_pooling2d_fix16_fu_553_ap_ready),
    .input_height(reg_778),
    .input_width(reg_785),
    .input_r_address0(grp_max_pooling2d_fix16_fu_553_input_r_address0),
    .input_r_ce0(grp_max_pooling2d_fix16_fu_553_input_r_ce0),
    .input_r_q0(SeparableConv2D_1_ar_q0),
    .output_depth(reg_792),
    .output_height(reg_798),
    .output_width(reg_804),
    .output_r_address0(grp_max_pooling2d_fix16_fu_553_output_r_address0),
    .output_r_ce0(grp_max_pooling2d_fix16_fu_553_output_r_ce0),
    .output_r_we0(grp_max_pooling2d_fix16_fu_553_output_r_we0),
    .output_r_d0(grp_max_pooling2d_fix16_fu_553_output_r_d0),
    .output_r_q0(MaxPooling2D_1_array_q0)
);

pointwise_conv2d_fix_1 grp_pointwise_conv2d_fix_1_fu_566(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_pointwise_conv2d_fix_1_fu_566_ap_start),
    .ap_done(grp_pointwise_conv2d_fix_1_fu_566_ap_done),
    .ap_idle(grp_pointwise_conv2d_fix_1_fu_566_ap_idle),
    .ap_ready(grp_pointwise_conv2d_fix_1_fu_566_ap_ready),
    .input_depth(Padding2D_4_depth),
    .input_height(SeparableConv2D_4_he),
    .input_width(SeparableConv2D_4_wi),
    .output_depth(SeparableConv2D_4_de),
    .output_r_address0(grp_pointwise_conv2d_fix_1_fu_566_output_r_address0),
    .output_r_ce0(grp_pointwise_conv2d_fix_1_fu_566_output_r_ce0),
    .output_r_we0(grp_pointwise_conv2d_fix_1_fu_566_output_r_we0),
    .output_r_d0(grp_pointwise_conv2d_fix_1_fu_566_output_r_d0),
    .SeparableConv2D_4_m_s_address0(grp_pointwise_conv2d_fix_1_fu_566_SeparableConv2D_4_m_s_address0),
    .SeparableConv2D_4_m_s_ce0(grp_pointwise_conv2d_fix_1_fu_566_SeparableConv2D_4_m_s_ce0),
    .SeparableConv2D_4_m_s_q0(SeparableConv2D_4_m_s_q0)
);

up_sampling2d_fix16 grp_up_sampling2d_fix16_fu_578(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_up_sampling2d_fix16_fu_578_ap_start),
    .ap_done(grp_up_sampling2d_fix16_fu_578_ap_done),
    .ap_idle(grp_up_sampling2d_fix16_fu_578_ap_idle),
    .ap_ready(grp_up_sampling2d_fix16_fu_578_ap_ready),
    .input_height(reg_842),
    .input_width(reg_849),
    .output_depth(reg_856),
    .output_height(reg_862),
    .output_width(reg_868),
    .SeparableConv2D_3_ar_address0(grp_up_sampling2d_fix16_fu_578_SeparableConv2D_3_ar_address0),
    .SeparableConv2D_3_ar_ce0(grp_up_sampling2d_fix16_fu_578_SeparableConv2D_3_ar_ce0),
    .SeparableConv2D_3_ar_q0(SeparableConv2D_3_ar_q0),
    .UpSampling2D_1_array_address0(grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_address0),
    .UpSampling2D_1_array_ce0(grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_ce0),
    .UpSampling2D_1_array_we0(grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_we0),
    .UpSampling2D_1_array_d0(grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_d0)
);

up_sampling2d_fix16_1 grp_up_sampling2d_fix16_1_fu_591(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_up_sampling2d_fix16_1_fu_591_ap_start),
    .ap_done(grp_up_sampling2d_fix16_1_fu_591_ap_done),
    .ap_idle(grp_up_sampling2d_fix16_1_fu_591_ap_idle),
    .ap_ready(grp_up_sampling2d_fix16_1_fu_591_ap_ready),
    .input_height(reg_810),
    .input_width(reg_817),
    .output_depth(reg_824),
    .output_height(reg_830),
    .output_width(reg_836),
    .SeparableConv2D_2_ar_address0(grp_up_sampling2d_fix16_1_fu_591_SeparableConv2D_2_ar_address0),
    .SeparableConv2D_2_ar_ce0(grp_up_sampling2d_fix16_1_fu_591_SeparableConv2D_2_ar_ce0),
    .SeparableConv2D_2_ar_q0(SeparableConv2D_2_ar_q0),
    .UpSampling2D_0_array_address0(grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_address0),
    .UpSampling2D_0_array_ce0(grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_ce0),
    .UpSampling2D_0_array_we0(grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_we0),
    .UpSampling2D_0_array_d0(grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_d0)
);

padding2d_fix16 grp_padding2d_fix16_fu_604(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_padding2d_fix16_fu_604_ap_start),
    .ap_done(grp_padding2d_fix16_fu_604_ap_done),
    .ap_idle(grp_padding2d_fix16_fu_604_ap_idle),
    .ap_ready(grp_padding2d_fix16_fu_604_ap_ready),
    .input_r_address0(grp_padding2d_fix16_fu_604_input_r_address0),
    .input_r_ce0(grp_padding2d_fix16_fu_604_input_r_ce0),
    .input_r_q0(input_0_array_q0),
    .output_r_address0(grp_padding2d_fix16_fu_604_output_r_address0),
    .output_r_ce0(grp_padding2d_fix16_fu_604_output_r_ce0),
    .output_r_we0(grp_padding2d_fix16_fu_604_output_r_we0),
    .output_r_d0(grp_padding2d_fix16_fu_604_output_r_d0)
);

network_mul_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16ns_16ns_32_1_1_U149(
    .din0(tmp1_fu_1052_p0),
    .din1(tmp1_fu_1052_p1),
    .dout(tmp1_fu_1052_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state41) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_1_fu_566_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state41)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state41);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_1_fu_566_ap_done == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_1_fu_409_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state37)) begin
            grp_depthwise_conv2d_fix_1_fu_409_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_1_fu_409_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_1_fu_409_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_2_fu_454_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state21)) begin
            grp_depthwise_conv2d_fix_2_fu_454_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_2_fu_454_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_2_fu_454_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_3_fu_424_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_depthwise_conv2d_fix_3_fu_424_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_3_fu_424_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_3_fu_424_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_4_fu_469_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_depthwise_conv2d_fix_4_fu_469_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_4_fu_469_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_4_fu_469_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_depthwise_conv2d_fix_fu_439_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            grp_depthwise_conv2d_fix_fu_439_ap_start_reg <= 1'b1;
        end else if ((grp_depthwise_conv2d_fix_fu_439_ap_ready == 1'b1)) begin
            grp_depthwise_conv2d_fix_fu_439_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pooling2d_fix16_1_fu_540_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_max_pooling2d_fix16_1_fu_540_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling2d_fix16_1_fu_540_ap_ready == 1'b1)) begin
            grp_max_pooling2d_fix16_1_fu_540_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pooling2d_fix16_fu_553_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_max_pooling2d_fix16_fu_553_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling2d_fix16_fu_553_ap_ready == 1'b1)) begin
            grp_max_pooling2d_fix16_fu_553_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_padding2d_fix16_1_fu_365_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state35)) begin
            grp_padding2d_fix16_1_fu_365_ap_start_reg <= 1'b1;
        end else if ((grp_padding2d_fix16_1_fu_365_ap_ready == 1'b1)) begin
            grp_padding2d_fix16_1_fu_365_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_padding2d_fix16_2_fu_387_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            grp_padding2d_fix16_2_fu_387_ap_start_reg <= 1'b1;
        end else if ((grp_padding2d_fix16_2_fu_387_ap_ready == 1'b1)) begin
            grp_padding2d_fix16_2_fu_387_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_padding2d_fix16_3_fu_398_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state19)) begin
            grp_padding2d_fix16_3_fu_398_ap_start_reg <= 1'b1;
        end else if ((grp_padding2d_fix16_3_fu_398_ap_ready == 1'b1)) begin
            grp_padding2d_fix16_3_fu_398_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_padding2d_fix16_4_fu_376_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_padding2d_fix16_4_fu_376_ap_start_reg <= 1'b1;
        end else if ((grp_padding2d_fix16_4_fu_376_ap_ready == 1'b1)) begin
            grp_padding2d_fix16_4_fu_376_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_padding2d_fix16_fu_604_ap_start_reg <= 1'b0;
    end else begin
        if ((~((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond2_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_padding2d_fix16_fu_604_ap_start_reg <= 1'b1;
        end else if ((grp_padding2d_fix16_fu_604_ap_ready == 1'b1)) begin
            grp_padding2d_fix16_fu_604_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_1_fu_566_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state39)) begin
            grp_pointwise_conv2d_fix_1_fu_566_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_1_fu_566_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_1_fu_566_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_2_fu_498_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state31)) begin
            grp_pointwise_conv2d_fix_2_fu_498_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_2_fu_498_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_2_fu_498_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_3_fu_512_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state15)) begin
            grp_pointwise_conv2d_fix_3_fu_512_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_3_fu_512_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_3_fu_512_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_4_fu_484_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_pointwise_conv2d_fix_4_fu_484_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_4_fu_484_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_4_fu_484_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_pointwise_conv2d_fix_fu_526_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            grp_pointwise_conv2d_fix_fu_526_ap_start_reg <= 1'b1;
        end else if ((grp_pointwise_conv2d_fix_fu_526_ap_ready == 1'b1)) begin
            grp_pointwise_conv2d_fix_fu_526_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_up_sampling2d_fix16_1_fu_591_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state25)) begin
            grp_up_sampling2d_fix16_1_fu_591_ap_start_reg <= 1'b1;
        end else if ((grp_up_sampling2d_fix16_1_fu_591_ap_ready == 1'b1)) begin
            grp_up_sampling2d_fix16_1_fu_591_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_up_sampling2d_fix16_fu_578_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state33)) begin
            grp_up_sampling2d_fix16_fu_578_ap_start_reg <= 1'b1;
        end else if ((grp_up_sampling2d_fix16_fu_578_ap_ready == 1'b1)) begin
            grp_up_sampling2d_fix16_fu_578_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_data_V_data_V_0_ack_out == 1'b1) & (input_data_V_data_V_0_vld_out == 1'b1))) begin
            input_data_V_data_V_0_sel_rd <= ~input_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_data_V_data_V_0_ack_in == 1'b1) & (input_data_V_data_V_0_vld_in == 1'b1))) begin
            input_data_V_data_V_0_sel_wr <= ~input_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_V_data_V_0_state == 2'd2) & (input_data_V_data_V_0_vld_in == 1'b0)) | ((input_data_V_data_V_0_state == 2'd3) & (input_data_V_data_V_0_vld_in == 1'b0) & (input_data_V_data_V_0_ack_out == 1'b1)))) begin
            input_data_V_data_V_0_state <= 2'd2;
        end else if ((((input_data_V_data_V_0_state == 2'd1) & (input_data_V_data_V_0_ack_out == 1'b0)) | ((input_data_V_data_V_0_state == 2'd3) & (input_data_V_data_V_0_ack_out == 1'b0) & (input_data_V_data_V_0_vld_in == 1'b1)))) begin
            input_data_V_data_V_0_state <= 2'd1;
        end else if ((((input_data_V_data_V_0_state == 2'd1) & (input_data_V_data_V_0_ack_out == 1'b1)) | ((input_data_V_data_V_0_state == 2'd2) & (input_data_V_data_V_0_vld_in == 1'b1)) | (~((input_data_V_data_V_0_vld_in == 1'b0) & (input_data_V_data_V_0_ack_out == 1'b1)) & ~((input_data_V_data_V_0_ack_out == 1'b0) & (input_data_V_data_V_0_vld_in == 1'b1)) & (input_data_V_data_V_0_state == 2'd3)))) begin
            input_data_V_data_V_0_state <= 2'd3;
        end else begin
            input_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_data_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((input_data_V_dest_V_0_state == 2'd2) & (input_data_V_dest_V_0_vld_in == 1'b0)) | ((input_data_V_dest_V_0_state == 2'd3) & (input_data_V_dest_V_0_vld_in == 1'b0) & (input_data_V_dest_V_0_ack_out == 1'b1)))) begin
            input_data_V_dest_V_0_state <= 2'd2;
        end else if ((((input_data_V_dest_V_0_state == 2'd1) & (input_data_V_dest_V_0_ack_out == 1'b0)) | ((input_data_V_dest_V_0_state == 2'd3) & (input_data_V_dest_V_0_ack_out == 1'b0) & (input_data_V_dest_V_0_vld_in == 1'b1)))) begin
            input_data_V_dest_V_0_state <= 2'd1;
        end else if (((~((input_data_V_dest_V_0_vld_in == 1'b0) & (input_data_V_dest_V_0_ack_out == 1'b1)) & ~((input_data_V_dest_V_0_ack_out == 1'b0) & (input_data_V_dest_V_0_vld_in == 1'b1)) & (input_data_V_dest_V_0_state == 2'd3)) | ((input_data_V_dest_V_0_state == 2'd1) & (input_data_V_dest_V_0_ack_out == 1'b1)) | ((input_data_V_dest_V_0_state == 2'd2) & (input_data_V_dest_V_0_vld_in == 1'b1)))) begin
            input_data_V_dest_V_0_state <= 2'd3;
        end else begin
            input_data_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_data_V_1_ack_out == 1'b1) & (output_data_V_data_V_1_vld_out == 1'b1))) begin
            output_data_V_data_V_1_sel_rd <= ~output_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_data_V_1_ack_in == 1'b1) & (output_data_V_data_V_1_vld_in == 1'b1))) begin
            output_data_V_data_V_1_sel_wr <= ~output_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_data_V_1_state == 2'd2) & (output_data_V_data_V_1_vld_in == 1'b0)) | ((output_data_V_data_V_1_state == 2'd3) & (output_data_V_data_V_1_vld_in == 1'b0) & (output_data_V_data_V_1_ack_out == 1'b1)))) begin
            output_data_V_data_V_1_state <= 2'd2;
        end else if ((((output_data_V_data_V_1_state == 2'd1) & (output_data_V_data_V_1_ack_out == 1'b0)) | ((output_data_V_data_V_1_state == 2'd3) & (output_data_V_data_V_1_ack_out == 1'b0) & (output_data_V_data_V_1_vld_in == 1'b1)))) begin
            output_data_V_data_V_1_state <= 2'd1;
        end else if (((~((output_data_V_data_V_1_vld_in == 1'b0) & (output_data_V_data_V_1_ack_out == 1'b1)) & ~((output_data_V_data_V_1_ack_out == 1'b0) & (output_data_V_data_V_1_vld_in == 1'b1)) & (output_data_V_data_V_1_state == 2'd3)) | ((output_data_V_data_V_1_state == 2'd1) & (output_data_V_data_V_1_ack_out == 1'b1)) | ((output_data_V_data_V_1_state == 2'd2) & (output_data_V_data_V_1_vld_in == 1'b1)))) begin
            output_data_V_data_V_1_state <= 2'd3;
        end else begin
            output_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_dest_V_1_ack_out == 1'b1) & (output_data_V_dest_V_1_vld_out == 1'b1))) begin
            output_data_V_dest_V_1_sel_rd <= ~output_data_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_dest_V_1_state == 2'd2) & (output_data_V_dest_V_1_vld_in == 1'b0)) | ((output_data_V_dest_V_1_state == 2'd3) & (output_data_V_dest_V_1_vld_in == 1'b0) & (output_data_V_dest_V_1_ack_out == 1'b1)))) begin
            output_data_V_dest_V_1_state <= 2'd2;
        end else if ((((output_data_V_dest_V_1_state == 2'd1) & (output_data_V_dest_V_1_ack_out == 1'b0)) | ((output_data_V_dest_V_1_state == 2'd3) & (output_data_V_dest_V_1_ack_out == 1'b0) & (output_data_V_dest_V_1_vld_in == 1'b1)))) begin
            output_data_V_dest_V_1_state <= 2'd1;
        end else if (((~((output_data_V_dest_V_1_vld_in == 1'b0) & (output_data_V_dest_V_1_ack_out == 1'b1)) & ~((output_data_V_dest_V_1_ack_out == 1'b0) & (output_data_V_dest_V_1_vld_in == 1'b1)) & (output_data_V_dest_V_1_state == 2'd3)) | ((output_data_V_dest_V_1_state == 2'd1) & (output_data_V_dest_V_1_ack_out == 1'b1)) | ((output_data_V_dest_V_1_state == 2'd2) & (output_data_V_dest_V_1_vld_in == 1'b1)))) begin
            output_data_V_dest_V_1_state <= 2'd3;
        end else begin
            output_data_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_id_V_1_ack_out == 1'b1) & (output_data_V_id_V_1_vld_out == 1'b1))) begin
            output_data_V_id_V_1_sel_rd <= ~output_data_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_id_V_1_state == 2'd2) & (output_data_V_id_V_1_vld_in == 1'b0)) | ((output_data_V_id_V_1_state == 2'd3) & (output_data_V_id_V_1_vld_in == 1'b0) & (output_data_V_id_V_1_ack_out == 1'b1)))) begin
            output_data_V_id_V_1_state <= 2'd2;
        end else if ((((output_data_V_id_V_1_state == 2'd1) & (output_data_V_id_V_1_ack_out == 1'b0)) | ((output_data_V_id_V_1_state == 2'd3) & (output_data_V_id_V_1_ack_out == 1'b0) & (output_data_V_id_V_1_vld_in == 1'b1)))) begin
            output_data_V_id_V_1_state <= 2'd1;
        end else if (((~((output_data_V_id_V_1_vld_in == 1'b0) & (output_data_V_id_V_1_ack_out == 1'b1)) & ~((output_data_V_id_V_1_ack_out == 1'b0) & (output_data_V_id_V_1_vld_in == 1'b1)) & (output_data_V_id_V_1_state == 2'd3)) | ((output_data_V_id_V_1_state == 2'd1) & (output_data_V_id_V_1_ack_out == 1'b1)) | ((output_data_V_id_V_1_state == 2'd2) & (output_data_V_id_V_1_vld_in == 1'b1)))) begin
            output_data_V_id_V_1_state <= 2'd3;
        end else begin
            output_data_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_keep_V_1_ack_out == 1'b1) & (output_data_V_keep_V_1_vld_out == 1'b1))) begin
            output_data_V_keep_V_1_sel_rd <= ~output_data_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_keep_V_1_state == 2'd2) & (output_data_V_keep_V_1_vld_in == 1'b0)) | ((output_data_V_keep_V_1_state == 2'd3) & (output_data_V_keep_V_1_vld_in == 1'b0) & (output_data_V_keep_V_1_ack_out == 1'b1)))) begin
            output_data_V_keep_V_1_state <= 2'd2;
        end else if ((((output_data_V_keep_V_1_state == 2'd1) & (output_data_V_keep_V_1_ack_out == 1'b0)) | ((output_data_V_keep_V_1_state == 2'd3) & (output_data_V_keep_V_1_ack_out == 1'b0) & (output_data_V_keep_V_1_vld_in == 1'b1)))) begin
            output_data_V_keep_V_1_state <= 2'd1;
        end else if (((~((output_data_V_keep_V_1_vld_in == 1'b0) & (output_data_V_keep_V_1_ack_out == 1'b1)) & ~((output_data_V_keep_V_1_ack_out == 1'b0) & (output_data_V_keep_V_1_vld_in == 1'b1)) & (output_data_V_keep_V_1_state == 2'd3)) | ((output_data_V_keep_V_1_state == 2'd1) & (output_data_V_keep_V_1_ack_out == 1'b1)) | ((output_data_V_keep_V_1_state == 2'd2) & (output_data_V_keep_V_1_vld_in == 1'b1)))) begin
            output_data_V_keep_V_1_state <= 2'd3;
        end else begin
            output_data_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_last_V_1_ack_out == 1'b1) & (output_data_V_last_V_1_vld_out == 1'b1))) begin
            output_data_V_last_V_1_sel_rd <= ~output_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_last_V_1_ack_in == 1'b1) & (output_data_V_last_V_1_vld_in == 1'b1))) begin
            output_data_V_last_V_1_sel_wr <= ~output_data_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_last_V_1_state == 2'd2) & (output_data_V_last_V_1_vld_in == 1'b0)) | ((output_data_V_last_V_1_state == 2'd3) & (output_data_V_last_V_1_vld_in == 1'b0) & (output_data_V_last_V_1_ack_out == 1'b1)))) begin
            output_data_V_last_V_1_state <= 2'd2;
        end else if ((((output_data_V_last_V_1_state == 2'd1) & (output_data_V_last_V_1_ack_out == 1'b0)) | ((output_data_V_last_V_1_state == 2'd3) & (output_data_V_last_V_1_ack_out == 1'b0) & (output_data_V_last_V_1_vld_in == 1'b1)))) begin
            output_data_V_last_V_1_state <= 2'd1;
        end else if (((~((output_data_V_last_V_1_vld_in == 1'b0) & (output_data_V_last_V_1_ack_out == 1'b1)) & ~((output_data_V_last_V_1_ack_out == 1'b0) & (output_data_V_last_V_1_vld_in == 1'b1)) & (output_data_V_last_V_1_state == 2'd3)) | ((output_data_V_last_V_1_state == 2'd1) & (output_data_V_last_V_1_ack_out == 1'b1)) | ((output_data_V_last_V_1_state == 2'd2) & (output_data_V_last_V_1_vld_in == 1'b1)))) begin
            output_data_V_last_V_1_state <= 2'd3;
        end else begin
            output_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_strb_V_1_ack_out == 1'b1) & (output_data_V_strb_V_1_vld_out == 1'b1))) begin
            output_data_V_strb_V_1_sel_rd <= ~output_data_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_strb_V_1_state == 2'd2) & (output_data_V_strb_V_1_vld_in == 1'b0)) | ((output_data_V_strb_V_1_state == 2'd3) & (output_data_V_strb_V_1_vld_in == 1'b0) & (output_data_V_strb_V_1_ack_out == 1'b1)))) begin
            output_data_V_strb_V_1_state <= 2'd2;
        end else if ((((output_data_V_strb_V_1_state == 2'd1) & (output_data_V_strb_V_1_ack_out == 1'b0)) | ((output_data_V_strb_V_1_state == 2'd3) & (output_data_V_strb_V_1_ack_out == 1'b0) & (output_data_V_strb_V_1_vld_in == 1'b1)))) begin
            output_data_V_strb_V_1_state <= 2'd1;
        end else if (((~((output_data_V_strb_V_1_vld_in == 1'b0) & (output_data_V_strb_V_1_ack_out == 1'b1)) & ~((output_data_V_strb_V_1_ack_out == 1'b0) & (output_data_V_strb_V_1_vld_in == 1'b1)) & (output_data_V_strb_V_1_state == 2'd3)) | ((output_data_V_strb_V_1_state == 2'd1) & (output_data_V_strb_V_1_ack_out == 1'b1)) | ((output_data_V_strb_V_1_state == 2'd2) & (output_data_V_strb_V_1_vld_in == 1'b1)))) begin
            output_data_V_strb_V_1_state <= 2'd3;
        end else begin
            output_data_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_data_V_user_V_1_ack_out == 1'b1) & (output_data_V_user_V_1_vld_out == 1'b1))) begin
            output_data_V_user_V_1_sel_rd <= ~output_data_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_data_V_user_V_1_ack_in == 1'b1) & (output_data_V_user_V_1_vld_in == 1'b1))) begin
            output_data_V_user_V_1_sel_wr <= ~output_data_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_data_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((output_data_V_user_V_1_state == 2'd2) & (output_data_V_user_V_1_vld_in == 1'b0)) | ((output_data_V_user_V_1_state == 2'd3) & (output_data_V_user_V_1_vld_in == 1'b0) & (output_data_V_user_V_1_ack_out == 1'b1)))) begin
            output_data_V_user_V_1_state <= 2'd2;
        end else if ((((output_data_V_user_V_1_state == 2'd1) & (output_data_V_user_V_1_ack_out == 1'b0)) | ((output_data_V_user_V_1_state == 2'd3) & (output_data_V_user_V_1_ack_out == 1'b0) & (output_data_V_user_V_1_vld_in == 1'b1)))) begin
            output_data_V_user_V_1_state <= 2'd1;
        end else if (((~((output_data_V_user_V_1_vld_in == 1'b0) & (output_data_V_user_V_1_ack_out == 1'b1)) & ~((output_data_V_user_V_1_ack_out == 1'b0) & (output_data_V_user_V_1_vld_in == 1'b1)) & (output_data_V_user_V_1_state == 2'd3)) | ((output_data_V_user_V_1_state == 2'd1) & (output_data_V_user_V_1_ack_out == 1'b1)) | ((output_data_V_user_V_1_state == 2'd2) & (output_data_V_user_V_1_vld_in == 1'b1)))) begin
            output_data_V_user_V_1_state <= 2'd3;
        end else begin
            output_data_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1021_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i1_reg_354 <= i_4_fu_1026_p2;
    end else if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_1_fu_566_ap_done == 1'b1))) begin
        i1_reg_354 <= 48'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond2_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_343 <= i_3_fu_905_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_343 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        array_length_cast_reg_1068[47 : 2] <= array_length_cast_fu_895_p1[47 : 2];
        array_length_reg_1063[47 : 2] <= array_length_fu_889_p2[47 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_1203 <= exitcond_fu_1021_p2;
        exitcond_reg_1203_pp0_iter1_reg <= exitcond_reg_1203;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_data_V_0_load_A == 1'b1)) begin
        input_data_V_data_V_0_payload_A <= input_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_data_V_data_V_0_load_B == 1'b1)) begin
        input_data_V_data_V_0_payload_B <= input_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_data_V_1_load_A == 1'b1)) begin
        output_data_V_data_V_1_payload_A <= SeparableConv2D_4_ar_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_data_V_1_load_B == 1'b1)) begin
        output_data_V_data_V_1_payload_B <= SeparableConv2D_4_ar_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_last_V_1_load_A == 1'b1)) begin
        output_data_V_last_V_1_payload_A <= tmp_last_V_reg_1222;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_last_V_1_load_B == 1'b1)) begin
        output_data_V_last_V_1_payload_B <= tmp_last_V_reg_1222;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_user_V_1_load_A == 1'b1)) begin
        output_data_V_user_V_1_payload_A <= tmp_user_V_reg_1217;
    end
end

always @ (posedge ap_clk) begin
    if ((output_data_V_user_V_1_load_B == 1'b1)) begin
        output_data_V_user_V_1_payload_B <= tmp_user_V_reg_1217;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp1_reg_1058 <= tmp1_fu_1052_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_1021_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_last_V_reg_1222 <= tmp_last_V_fu_1047_p2;
        tmp_user_V_reg_1217 <= tmp_user_V_fu_1041_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_1_fu_566_ap_done == 1'b1))) begin
        tmp_s_reg_1198[48 : 2] <= tmp_s_fu_1016_p2[48 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        MaxPooling2D_0_array_address0 = grp_max_pooling2d_fix16_1_fu_540_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        MaxPooling2D_0_array_address0 = grp_padding2d_fix16_4_fu_376_MaxPooling2D_0_array_address0;
    end else begin
        MaxPooling2D_0_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        MaxPooling2D_0_array_ce0 = grp_max_pooling2d_fix16_1_fu_540_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        MaxPooling2D_0_array_ce0 = grp_padding2d_fix16_4_fu_376_MaxPooling2D_0_array_ce0;
    end else begin
        MaxPooling2D_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        MaxPooling2D_0_array_we0 = grp_max_pooling2d_fix16_1_fu_540_output_r_we0;
    end else begin
        MaxPooling2D_0_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        MaxPooling2D_1_array_address0 = grp_max_pooling2d_fix16_fu_553_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        MaxPooling2D_1_array_address0 = grp_padding2d_fix16_3_fu_398_MaxPooling2D_1_array_address0;
    end else begin
        MaxPooling2D_1_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        MaxPooling2D_1_array_ce0 = grp_max_pooling2d_fix16_fu_553_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        MaxPooling2D_1_array_ce0 = grp_padding2d_fix16_3_fu_398_MaxPooling2D_1_array_ce0;
    end else begin
        MaxPooling2D_1_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        MaxPooling2D_1_array_we0 = grp_max_pooling2d_fix16_fu_553_output_r_we0;
    end else begin
        MaxPooling2D_1_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Padding2D_0_array_address0 = grp_padding2d_fix16_fu_604_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Padding2D_0_array_address0 = grp_depthwise_conv2d_fix_4_fu_469_Padding2D_0_array_address0;
    end else begin
        Padding2D_0_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Padding2D_0_array_ce0 = grp_padding2d_fix16_fu_604_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        Padding2D_0_array_ce0 = grp_depthwise_conv2d_fix_4_fu_469_Padding2D_0_array_ce0;
    end else begin
        Padding2D_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Padding2D_0_array_we0 = grp_padding2d_fix16_fu_604_output_r_we0;
    end else begin
        Padding2D_0_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        Padding2D_1_array_address0 = grp_depthwise_conv2d_fix_3_fu_424_Padding2D_1_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        Padding2D_1_array_address0 = grp_padding2d_fix16_4_fu_376_output_r_address0;
    end else begin
        Padding2D_1_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        Padding2D_1_array_ce0 = grp_depthwise_conv2d_fix_3_fu_424_Padding2D_1_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        Padding2D_1_array_ce0 = grp_padding2d_fix16_4_fu_376_output_r_ce0;
    end else begin
        Padding2D_1_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Padding2D_1_array_we0 = grp_padding2d_fix16_4_fu_376_output_r_we0;
    end else begin
        Padding2D_1_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        Padding2D_2_array_address0 = grp_depthwise_conv2d_fix_2_fu_454_Padding2D_2_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        Padding2D_2_array_address0 = grp_padding2d_fix16_3_fu_398_output_r_address0;
    end else begin
        Padding2D_2_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        Padding2D_2_array_ce0 = grp_depthwise_conv2d_fix_2_fu_454_Padding2D_2_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        Padding2D_2_array_ce0 = grp_padding2d_fix16_3_fu_398_output_r_ce0;
    end else begin
        Padding2D_2_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        Padding2D_2_array_we0 = grp_padding2d_fix16_3_fu_398_output_r_we0;
    end else begin
        Padding2D_2_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        Padding2D_3_array_address0 = grp_depthwise_conv2d_fix_fu_439_Padding2D_3_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        Padding2D_3_array_address0 = grp_padding2d_fix16_2_fu_387_output_r_address0;
    end else begin
        Padding2D_3_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        Padding2D_3_array_ce0 = grp_depthwise_conv2d_fix_fu_439_Padding2D_3_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        Padding2D_3_array_ce0 = grp_padding2d_fix16_2_fu_387_output_r_ce0;
    end else begin
        Padding2D_3_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        Padding2D_3_array_we0 = grp_padding2d_fix16_2_fu_387_output_r_we0;
    end else begin
        Padding2D_3_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        Padding2D_4_array_address0 = grp_depthwise_conv2d_fix_1_fu_409_Padding2D_4_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        Padding2D_4_array_address0 = grp_padding2d_fix16_1_fu_365_output_r_address0;
    end else begin
        Padding2D_4_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        Padding2D_4_array_ce0 = grp_depthwise_conv2d_fix_1_fu_409_Padding2D_4_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        Padding2D_4_array_ce0 = grp_padding2d_fix16_1_fu_365_output_r_ce0;
    end else begin
        Padding2D_4_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        Padding2D_4_array_we0 = grp_padding2d_fix16_1_fu_365_output_r_we0;
    end else begin
        Padding2D_4_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        SeparableConv2D_0_ar_address0 = grp_max_pooling2d_fix16_1_fu_540_SeparableConv2D_0_ar_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SeparableConv2D_0_ar_address0 = grp_pointwise_conv2d_fix_4_fu_484_output_r_address0;
    end else begin
        SeparableConv2D_0_ar_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        SeparableConv2D_0_ar_ce0 = grp_max_pooling2d_fix16_1_fu_540_SeparableConv2D_0_ar_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        SeparableConv2D_0_ar_ce0 = grp_pointwise_conv2d_fix_4_fu_484_output_r_ce0;
    end else begin
        SeparableConv2D_0_ar_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        SeparableConv2D_0_ar_we0 = grp_pointwise_conv2d_fix_4_fu_484_output_r_we0;
    end else begin
        SeparableConv2D_0_ar_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        SeparableConv2D_0_m_s_address0 = grp_pointwise_conv2d_fix_4_fu_484_SeparableConv2D_0_m_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_0_m_s_address0 = grp_depthwise_conv2d_fix_4_fu_469_output_r_address0;
    end else begin
        SeparableConv2D_0_m_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        SeparableConv2D_0_m_s_ce0 = grp_pointwise_conv2d_fix_4_fu_484_SeparableConv2D_0_m_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_0_m_s_ce0 = grp_depthwise_conv2d_fix_4_fu_469_output_r_ce0;
    end else begin
        SeparableConv2D_0_m_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_0_m_s_we0 = grp_depthwise_conv2d_fix_4_fu_469_output_r_we0;
    end else begin
        SeparableConv2D_0_m_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        SeparableConv2D_1_ar_address0 = grp_max_pooling2d_fix16_fu_553_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        SeparableConv2D_1_ar_address0 = grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_address0;
    end else begin
        SeparableConv2D_1_ar_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        SeparableConv2D_1_ar_ce0 = grp_max_pooling2d_fix16_fu_553_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        SeparableConv2D_1_ar_ce0 = grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_ce0;
    end else begin
        SeparableConv2D_1_ar_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        SeparableConv2D_1_ar_we0 = grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_ar_we0;
    end else begin
        SeparableConv2D_1_ar_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        SeparableConv2D_1_m_s_address0 = grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_m_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        SeparableConv2D_1_m_s_address0 = grp_depthwise_conv2d_fix_3_fu_424_output_r_address0;
    end else begin
        SeparableConv2D_1_m_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        SeparableConv2D_1_m_s_ce0 = grp_pointwise_conv2d_fix_3_fu_512_SeparableConv2D_1_m_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        SeparableConv2D_1_m_s_ce0 = grp_depthwise_conv2d_fix_3_fu_424_output_r_ce0;
    end else begin
        SeparableConv2D_1_m_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        SeparableConv2D_1_m_s_we0 = grp_depthwise_conv2d_fix_3_fu_424_output_r_we0;
    end else begin
        SeparableConv2D_1_m_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        SeparableConv2D_2_ar_address0 = grp_up_sampling2d_fix16_1_fu_591_SeparableConv2D_2_ar_address0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        SeparableConv2D_2_ar_address0 = grp_pointwise_conv2d_fix_fu_526_output_r_address0;
    end else begin
        SeparableConv2D_2_ar_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        SeparableConv2D_2_ar_ce0 = grp_up_sampling2d_fix16_1_fu_591_SeparableConv2D_2_ar_ce0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        SeparableConv2D_2_ar_ce0 = grp_pointwise_conv2d_fix_fu_526_output_r_ce0;
    end else begin
        SeparableConv2D_2_ar_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        SeparableConv2D_2_ar_we0 = grp_pointwise_conv2d_fix_fu_526_output_r_we0;
    end else begin
        SeparableConv2D_2_ar_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        SeparableConv2D_2_m_s_address0 = grp_pointwise_conv2d_fix_fu_526_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        SeparableConv2D_2_m_s_address0 = grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_address0;
    end else begin
        SeparableConv2D_2_m_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        SeparableConv2D_2_m_s_ce0 = grp_pointwise_conv2d_fix_fu_526_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        SeparableConv2D_2_m_s_ce0 = grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_ce0;
    end else begin
        SeparableConv2D_2_m_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        SeparableConv2D_2_m_s_we0 = grp_depthwise_conv2d_fix_2_fu_454_SeparableConv2D_2_m_s_we0;
    end else begin
        SeparableConv2D_2_m_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        SeparableConv2D_3_ar_address0 = grp_up_sampling2d_fix16_fu_578_SeparableConv2D_3_ar_address0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        SeparableConv2D_3_ar_address0 = grp_pointwise_conv2d_fix_2_fu_498_output_r_address0;
    end else begin
        SeparableConv2D_3_ar_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        SeparableConv2D_3_ar_ce0 = grp_up_sampling2d_fix16_fu_578_SeparableConv2D_3_ar_ce0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        SeparableConv2D_3_ar_ce0 = grp_pointwise_conv2d_fix_2_fu_498_output_r_ce0;
    end else begin
        SeparableConv2D_3_ar_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        SeparableConv2D_3_ar_we0 = grp_pointwise_conv2d_fix_2_fu_498_output_r_we0;
    end else begin
        SeparableConv2D_3_ar_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        SeparableConv2D_3_m_s_address0 = grp_pointwise_conv2d_fix_2_fu_498_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        SeparableConv2D_3_m_s_address0 = grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_address0;
    end else begin
        SeparableConv2D_3_m_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        SeparableConv2D_3_m_s_ce0 = grp_pointwise_conv2d_fix_2_fu_498_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        SeparableConv2D_3_m_s_ce0 = grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_ce0;
    end else begin
        SeparableConv2D_3_m_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        SeparableConv2D_3_m_s_we0 = grp_depthwise_conv2d_fix_fu_439_SeparableConv2D_3_m_s_we0;
    end else begin
        SeparableConv2D_3_m_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        SeparableConv2D_4_ar_address0 = i1_cast2_fu_1032_p1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        SeparableConv2D_4_ar_address0 = grp_pointwise_conv2d_fix_1_fu_566_output_r_address0;
    end else begin
        SeparableConv2D_4_ar_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        SeparableConv2D_4_ar_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        SeparableConv2D_4_ar_ce0 = grp_pointwise_conv2d_fix_1_fu_566_output_r_ce0;
    end else begin
        SeparableConv2D_4_ar_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        SeparableConv2D_4_ar_we0 = grp_pointwise_conv2d_fix_1_fu_566_output_r_we0;
    end else begin
        SeparableConv2D_4_ar_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        SeparableConv2D_4_m_s_address0 = grp_pointwise_conv2d_fix_1_fu_566_SeparableConv2D_4_m_s_address0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        SeparableConv2D_4_m_s_address0 = grp_depthwise_conv2d_fix_1_fu_409_output_r_address0;
    end else begin
        SeparableConv2D_4_m_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        SeparableConv2D_4_m_s_ce0 = grp_pointwise_conv2d_fix_1_fu_566_SeparableConv2D_4_m_s_ce0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        SeparableConv2D_4_m_s_ce0 = grp_depthwise_conv2d_fix_1_fu_409_output_r_ce0;
    end else begin
        SeparableConv2D_4_m_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        SeparableConv2D_4_m_s_we0 = grp_depthwise_conv2d_fix_1_fu_409_output_r_we0;
    end else begin
        SeparableConv2D_4_m_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        UpSampling2D_0_array_address0 = grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        UpSampling2D_0_array_address0 = grp_padding2d_fix16_2_fu_387_input_r_address0;
    end else begin
        UpSampling2D_0_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        UpSampling2D_0_array_ce0 = grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        UpSampling2D_0_array_ce0 = grp_padding2d_fix16_2_fu_387_input_r_ce0;
    end else begin
        UpSampling2D_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        UpSampling2D_0_array_we0 = grp_up_sampling2d_fix16_1_fu_591_UpSampling2D_0_array_we0;
    end else begin
        UpSampling2D_0_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        UpSampling2D_1_array_address0 = grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        UpSampling2D_1_array_address0 = grp_padding2d_fix16_1_fu_365_input_r_address0;
    end else begin
        UpSampling2D_1_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        UpSampling2D_1_array_ce0 = grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        UpSampling2D_1_array_ce0 = grp_padding2d_fix16_1_fu_365_input_r_ce0;
    end else begin
        UpSampling2D_1_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        UpSampling2D_1_array_we0 = grp_up_sampling2d_fix16_fu_578_UpSampling2D_1_array_we0;
    end else begin
        UpSampling2D_1_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_1021_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state41 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state41 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_data_V_dest_V_1_ack_in == 1'b0) | (output_data_V_id_V_1_ack_in == 1'b0) | (output_data_V_last_V_1_ack_in == 1'b0) | (output_data_V_user_V_1_ack_in == 1'b0) | (output_data_V_strb_V_1_ack_in == 1'b0) | (output_data_V_keep_V_1_ack_in == 1'b0) | (output_data_V_data_V_1_ack_in == 1'b0)) & (output_data_V_dest_V_1_state[1'd0] == 1'b0) & (output_data_V_id_V_1_state[1'd0] == 1'b0) & (output_data_V_last_V_1_state[1'd0] == 1'b0) & (output_data_V_user_V_1_state[1'd0] == 1'b0) & (output_data_V_strb_V_1_state[1'd0] == 1'b0) & (output_data_V_keep_V_1_state[1'd0] == 1'b0) & (output_data_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state45))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((output_data_V_dest_V_1_ack_in == 1'b0) | (output_data_V_id_V_1_ack_in == 1'b0) | (output_data_V_last_V_1_ack_in == 1'b0) | (output_data_V_user_V_1_ack_in == 1'b0) | (output_data_V_strb_V_1_ack_in == 1'b0) | (output_data_V_keep_V_1_ack_in == 1'b0) | (output_data_V_data_V_1_ack_in == 1'b0)) & (output_data_V_dest_V_1_state[1'd0] == 1'b0) & (output_data_V_id_V_1_state[1'd0] == 1'b0) & (output_data_V_last_V_1_state[1'd0] == 1'b0) & (output_data_V_user_V_1_state[1'd0] == 1'b0) & (output_data_V_strb_V_1_state[1'd0] == 1'b0) & (output_data_V_keep_V_1_state[1'd0] == 1'b0) & (output_data_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state45))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_0_array_address0 = tmp_70_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_array_address0 = grp_padding2d_fix16_fu_604_input_r_address0;
    end else begin
        input_0_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond2_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_0_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_0_array_ce0 = grp_padding2d_fix16_fu_604_input_r_ce0;
    end else begin
        input_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond2_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_0_array_we0 = 1'b1;
    end else begin
        input_0_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_TDATA_blk_n = input_data_V_data_V_0_state[1'd0];
    end else begin
        input_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond2_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        input_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_data_V_data_V_0_sel == 1'b1)) begin
        input_data_V_data_V_0_data_out = input_data_V_data_V_0_payload_B;
    end else begin
        input_data_V_data_V_0_data_out = input_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond2_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_data_V_dest_V_0_ack_out = 1'b1;
    end else begin
        input_data_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_reg_1203_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((exitcond_reg_1203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_data_TDATA_blk_n = output_data_V_data_V_1_state[1'd1];
    end else begin
        output_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((output_data_V_data_V_1_sel == 1'b1)) begin
        output_data_V_data_V_1_data_out = output_data_V_data_V_1_payload_B;
    end else begin
        output_data_V_data_V_1_data_out = output_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_1203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_data_V_data_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_data_V_dest_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_data_V_id_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_data_V_keep_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_V_last_V_1_sel == 1'b1)) begin
        output_data_V_last_V_1_data_out = output_data_V_last_V_1_payload_B;
    end else begin
        output_data_V_last_V_1_data_out = output_data_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_1203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_data_V_last_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_reg_1203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_data_V_strb_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_data_V_user_V_1_sel == 1'b1)) begin
        output_data_V_user_V_1_data_out = output_data_V_user_V_1_payload_B;
    end else begin
        output_data_V_user_V_1_data_out = output_data_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((exitcond_reg_1203 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_data_V_user_V_1_vld_in = 1'b1;
    end else begin
        output_data_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond2_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0)) & (exitcond2_fu_899_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_padding2d_fix16_fu_604_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_depthwise_conv2d_fix_4_fu_469_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_pointwise_conv2d_fix_4_fu_484_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_max_pooling2d_fix16_1_fu_540_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_padding2d_fix16_4_fu_376_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_depthwise_conv2d_fix_3_fu_424_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_pointwise_conv2d_fix_3_fu_512_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_max_pooling2d_fix16_fu_553_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (grp_padding2d_fix16_3_fu_398_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (grp_depthwise_conv2d_fix_2_fu_454_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (grp_pointwise_conv2d_fix_fu_526_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (grp_up_sampling2d_fix16_1_fu_591_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_padding2d_fix16_2_fu_387_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (grp_depthwise_conv2d_fix_fu_439_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (grp_pointwise_conv2d_fix_2_fu_498_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (grp_up_sampling2d_fix16_fu_578_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (grp_padding2d_fix16_1_fu_365_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (grp_depthwise_conv2d_fix_1_fu_409_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (grp_pointwise_conv2d_fix_1_fu_566_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_1021_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((exitcond_fu_1021_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if ((~((output_data_V_dest_V_1_ack_in == 1'b0) | (output_data_V_id_V_1_ack_in == 1'b0) | (output_data_V_last_V_1_ack_in == 1'b0) | (output_data_V_user_V_1_ack_in == 1'b0) | (output_data_V_strb_V_1_ack_in == 1'b0) | (output_data_V_keep_V_1_ack_in == 1'b0) | (output_data_V_data_V_1_ack_in == 1'b0)) & (output_data_V_dest_V_1_state[1'd0] == 1'b0) & (output_data_V_id_V_1_state[1'd0] == 1'b0) & (output_data_V_last_V_1_state[1'd0] == 1'b0) & (output_data_V_user_V_1_state[1'd0] == 1'b0) & (output_data_V_strb_V_1_state[1'd0] == 1'b0) & (output_data_V_keep_V_1_state[1'd0] == 1'b0) & (output_data_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state43_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state42_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state43_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state42_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state3 = ((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call0 = ((exitcond2_fu_899_p2 == 1'd0) & (input_data_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state41_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42_io = ((exitcond_reg_1203 == 1'd0) & (output_data_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state42_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state43_io = ((exitcond_reg_1203_pp0_iter1_reg == 1'd0) & (output_data_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state43_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state45 = ((output_data_V_dest_V_1_ack_in == 1'b0) | (output_data_V_id_V_1_ack_in == 1'b0) | (output_data_V_last_V_1_ack_in == 1'b0) | (output_data_V_user_V_1_ack_in == 1'b0) | (output_data_V_strb_V_1_ack_in == 1'b0) | (output_data_V_keep_V_1_ack_in == 1'b0) | (output_data_V_data_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign array_length_cast_fu_895_p1 = array_length_fu_889_p2;

assign array_length_fu_889_p0 = array_length_fu_889_p00;

assign array_length_fu_889_p00 = tmp1_reg_1058;

assign array_length_fu_889_p1 = array_length_fu_889_p10;

assign array_length_fu_889_p10 = SeparableConv2D_4_he;

assign array_length_fu_889_p2 = (array_length_fu_889_p0 * array_length_fu_889_p1);

assign exitcond2_fu_899_p2 = ((i_reg_343 == 10'd784) ? 1'b1 : 1'b0);

assign exitcond_fu_1021_p2 = ((i1_reg_354 == array_length_reg_1063) ? 1'b1 : 1'b0);

assign grp_depthwise_conv2d_fix_1_fu_409_ap_start = grp_depthwise_conv2d_fix_1_fu_409_ap_start_reg;

assign grp_depthwise_conv2d_fix_2_fu_454_ap_start = grp_depthwise_conv2d_fix_2_fu_454_ap_start_reg;

assign grp_depthwise_conv2d_fix_3_fu_424_ap_start = grp_depthwise_conv2d_fix_3_fu_424_ap_start_reg;

assign grp_depthwise_conv2d_fix_4_fu_469_ap_start = grp_depthwise_conv2d_fix_4_fu_469_ap_start_reg;

assign grp_depthwise_conv2d_fix_fu_439_ap_start = grp_depthwise_conv2d_fix_fu_439_ap_start_reg;

assign grp_max_pooling2d_fix16_1_fu_540_ap_start = grp_max_pooling2d_fix16_1_fu_540_ap_start_reg;

assign grp_max_pooling2d_fix16_fu_553_ap_start = grp_max_pooling2d_fix16_fu_553_ap_start_reg;

assign grp_padding2d_fix16_1_fu_365_ap_start = grp_padding2d_fix16_1_fu_365_ap_start_reg;

assign grp_padding2d_fix16_2_fu_387_ap_start = grp_padding2d_fix16_2_fu_387_ap_start_reg;

assign grp_padding2d_fix16_3_fu_398_ap_start = grp_padding2d_fix16_3_fu_398_ap_start_reg;

assign grp_padding2d_fix16_4_fu_376_ap_start = grp_padding2d_fix16_4_fu_376_ap_start_reg;

assign grp_padding2d_fix16_fu_604_ap_start = grp_padding2d_fix16_fu_604_ap_start_reg;

assign grp_pointwise_conv2d_fix_1_fu_566_ap_start = grp_pointwise_conv2d_fix_1_fu_566_ap_start_reg;

assign grp_pointwise_conv2d_fix_2_fu_498_ap_start = grp_pointwise_conv2d_fix_2_fu_498_ap_start_reg;

assign grp_pointwise_conv2d_fix_3_fu_512_ap_start = grp_pointwise_conv2d_fix_3_fu_512_ap_start_reg;

assign grp_pointwise_conv2d_fix_4_fu_484_ap_start = grp_pointwise_conv2d_fix_4_fu_484_ap_start_reg;

assign grp_pointwise_conv2d_fix_fu_526_ap_start = grp_pointwise_conv2d_fix_fu_526_ap_start_reg;

assign grp_up_sampling2d_fix16_1_fu_591_ap_start = grp_up_sampling2d_fix16_1_fu_591_ap_start_reg;

assign grp_up_sampling2d_fix16_fu_578_ap_start = grp_up_sampling2d_fix16_fu_578_ap_start_reg;

assign i1_cast2_fu_1032_p1 = i1_reg_354;

assign i1_cast_fu_1037_p1 = i1_reg_354;

assign i_3_fu_905_p2 = (i_reg_343 + 10'd1);

assign i_4_fu_1026_p2 = (i1_reg_354 + 48'd1);

assign input_data_TREADY = input_data_V_dest_V_0_state[1'd1];

assign input_data_V_data_V_0_ack_in = input_data_V_data_V_0_state[1'd1];

assign input_data_V_data_V_0_load_A = (input_data_V_data_V_0_state_cmp_full & ~input_data_V_data_V_0_sel_wr);

assign input_data_V_data_V_0_load_B = (input_data_V_data_V_0_state_cmp_full & input_data_V_data_V_0_sel_wr);

assign input_data_V_data_V_0_sel = input_data_V_data_V_0_sel_rd;

assign input_data_V_data_V_0_state_cmp_full = ((input_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_data_V_data_V_0_vld_in = input_data_TVALID;

assign input_data_V_data_V_0_vld_out = input_data_V_data_V_0_state[1'd0];

assign input_data_V_dest_V_0_vld_in = input_data_TVALID;

assign output_data_TDATA = output_data_V_data_V_1_data_out;

assign output_data_TDEST = output_data_V_dest_V_1_data_out;

assign output_data_TID = output_data_V_id_V_1_data_out;

assign output_data_TKEEP = output_data_V_keep_V_1_data_out;

assign output_data_TLAST = output_data_V_last_V_1_data_out;

assign output_data_TSTRB = output_data_V_strb_V_1_data_out;

assign output_data_TUSER = output_data_V_user_V_1_data_out;

assign output_data_TVALID = output_data_V_dest_V_1_state[1'd0];

assign output_data_V_data_V_1_ack_in = output_data_V_data_V_1_state[1'd1];

assign output_data_V_data_V_1_ack_out = output_data_TREADY;

assign output_data_V_data_V_1_load_A = (output_data_V_data_V_1_state_cmp_full & ~output_data_V_data_V_1_sel_wr);

assign output_data_V_data_V_1_load_B = (output_data_V_data_V_1_state_cmp_full & output_data_V_data_V_1_sel_wr);

assign output_data_V_data_V_1_sel = output_data_V_data_V_1_sel_rd;

assign output_data_V_data_V_1_state_cmp_full = ((output_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_data_V_1_vld_out = output_data_V_data_V_1_state[1'd0];

assign output_data_V_dest_V_1_ack_in = output_data_V_dest_V_1_state[1'd1];

assign output_data_V_dest_V_1_ack_out = output_data_TREADY;

assign output_data_V_dest_V_1_data_out = 1'd0;

assign output_data_V_dest_V_1_sel = output_data_V_dest_V_1_sel_rd;

assign output_data_V_dest_V_1_vld_out = output_data_V_dest_V_1_state[1'd0];

assign output_data_V_id_V_1_ack_in = output_data_V_id_V_1_state[1'd1];

assign output_data_V_id_V_1_ack_out = output_data_TREADY;

assign output_data_V_id_V_1_data_out = 1'd0;

assign output_data_V_id_V_1_sel = output_data_V_id_V_1_sel_rd;

assign output_data_V_id_V_1_vld_out = output_data_V_id_V_1_state[1'd0];

assign output_data_V_keep_V_1_ack_in = output_data_V_keep_V_1_state[1'd1];

assign output_data_V_keep_V_1_ack_out = output_data_TREADY;

assign output_data_V_keep_V_1_data_out = 2'd0;

assign output_data_V_keep_V_1_sel = output_data_V_keep_V_1_sel_rd;

assign output_data_V_keep_V_1_vld_out = output_data_V_keep_V_1_state[1'd0];

assign output_data_V_last_V_1_ack_in = output_data_V_last_V_1_state[1'd1];

assign output_data_V_last_V_1_ack_out = output_data_TREADY;

assign output_data_V_last_V_1_load_A = (output_data_V_last_V_1_state_cmp_full & ~output_data_V_last_V_1_sel_wr);

assign output_data_V_last_V_1_load_B = (output_data_V_last_V_1_state_cmp_full & output_data_V_last_V_1_sel_wr);

assign output_data_V_last_V_1_sel = output_data_V_last_V_1_sel_rd;

assign output_data_V_last_V_1_state_cmp_full = ((output_data_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_last_V_1_vld_out = output_data_V_last_V_1_state[1'd0];

assign output_data_V_strb_V_1_ack_in = output_data_V_strb_V_1_state[1'd1];

assign output_data_V_strb_V_1_ack_out = output_data_TREADY;

assign output_data_V_strb_V_1_data_out = 2'd0;

assign output_data_V_strb_V_1_sel = output_data_V_strb_V_1_sel_rd;

assign output_data_V_strb_V_1_vld_out = output_data_V_strb_V_1_state[1'd0];

assign output_data_V_user_V_1_ack_in = output_data_V_user_V_1_state[1'd1];

assign output_data_V_user_V_1_ack_out = output_data_TREADY;

assign output_data_V_user_V_1_load_A = (output_data_V_user_V_1_state_cmp_full & ~output_data_V_user_V_1_sel_wr);

assign output_data_V_user_V_1_load_B = (output_data_V_user_V_1_state_cmp_full & output_data_V_user_V_1_sel_wr);

assign output_data_V_user_V_1_sel = output_data_V_user_V_1_sel_rd;

assign output_data_V_user_V_1_state_cmp_full = ((output_data_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_data_V_user_V_1_vld_out = output_data_V_user_V_1_state[1'd0];

assign tmp1_fu_1052_p0 = tmp1_fu_1052_p00;

assign tmp1_fu_1052_p00 = SeparableConv2D_4_de;

assign tmp1_fu_1052_p1 = tmp1_fu_1052_p10;

assign tmp1_fu_1052_p10 = SeparableConv2D_4_wi;

assign tmp_70_fu_916_p1 = i_reg_343;

assign tmp_last_V_fu_1047_p2 = ((i1_cast_fu_1037_p1 == tmp_s_reg_1198) ? 1'b1 : 1'b0);

assign tmp_s_fu_1016_p2 = ($signed(array_length_cast_reg_1068) + $signed(49'd562949953421311));

assign tmp_user_V_fu_1041_p2 = ((i1_reg_354 == 48'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    reg_746[15:0] <= 16'b0000000000011100;
    reg_753[15:0] <= 16'b0000000000011100;
    reg_760[15:0] <= 16'b0000000000010000;
    reg_766[15:0] <= 16'b0000000000001110;
    reg_772[15:0] <= 16'b0000000000001110;
    reg_778[15:0] <= 16'b0000000000001110;
    reg_785[15:0] <= 16'b0000000000001110;
    reg_792[15:0] <= 16'b0000000000001000;
    reg_798[15:0] <= 16'b0000000000000111;
    reg_804[15:0] <= 16'b0000000000000111;
    reg_810[15:0] <= 16'b0000000000000111;
    reg_817[15:0] <= 16'b0000000000000111;
    reg_824[15:0] <= 16'b0000000000001000;
    reg_830[15:0] <= 16'b0000000000001110;
    reg_836[15:0] <= 16'b0000000000001110;
    reg_842[15:0] <= 16'b0000000000001110;
    reg_849[15:0] <= 16'b0000000000001110;
    reg_856[15:0] <= 16'b0000000000010000;
    reg_862[15:0] <= 16'b0000000000011100;
    reg_868[15:0] <= 16'b0000000000011100;
    array_length_reg_1063[1:0] <= 2'b00;
    array_length_cast_reg_1068[1:0] <= 2'b00;
    array_length_cast_reg_1068[48] <= 1'b0;
    tmp_s_reg_1198[1:0] <= 2'b11;
end

endmodule //network
