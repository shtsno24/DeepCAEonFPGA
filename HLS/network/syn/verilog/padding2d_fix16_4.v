// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [15:0] input_0_q0;
input  [15:0] output_width;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg[9:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [20:0] tmp_41_cast_fu_176_p1;
reg   [20:0] tmp_41_cast_reg_388;
wire   [4:0] width_1_fu_186_p2;
wire    ap_CS_fsm_state2;
wire   [20:0] tmp_37_fu_378_p2;
reg   [20:0] tmp_37_reg_405;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond9_fu_197_p2;
wire   [10:0] tmp3_fu_241_p2;
reg   [10:0] tmp3_reg_412;
wire    ap_CS_fsm_state4;
wire   [20:0] tmp_52_cast_fu_247_p1;
reg   [20:0] tmp_52_cast_reg_417;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond8_fu_251_p2;
wire   [4:0] width_2_fu_281_p2;
reg   [4:0] width_2_reg_430;
wire   [2:0] phitmp_fu_320_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond7_fu_304_p2;
wire   [4:0] height_1_fu_326_p2;
wire   [20:0] tmp_39_fu_383_p2;
reg   [20:0] tmp_39_reg_451;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond6_fu_340_p2;
wire   [4:0] width_4_fu_356_p2;
wire    ap_CS_fsm_state9;
wire   [2:0] phitmp5_fu_372_p2;
wire   [0:0] exitcond_fu_350_p2;
reg   [4:0] width_reg_108;
wire   [0:0] exitcond1_fu_180_p2;
reg   [4:0] height1_reg_119;
reg   [4:0] width3_reg_131;
wire    ap_CS_fsm_state6;
reg  signed [2:0] width_3_reg_142;
reg  signed [2:0] height_reg_153;
reg   [4:0] width6_reg_165;
wire   [63:0] tmp_s_fu_192_p1;
wire   [63:0] tmp_38_fu_207_p1;
wire   [63:0] tmp_41_fu_276_p1;
wire   [63:0] tmp_43_fu_291_p1;
wire   [63:0] tmp_46_fu_315_p1;
wire   [63:0] tmp_44_fu_367_p1;
wire   [4:0] tmp2_fu_211_p2;
wire   [9:0] p_shl3_fu_217_p3;
wire   [6:0] p_shl4_fu_229_p3;
wire   [10:0] p_shl3_cast_fu_225_p1;
wire   [10:0] p_shl4_cast_fu_237_p1;
wire   [4:0] tmp4_fu_257_p2;
wire   [10:0] tmp4_cast_fu_263_p1;
wire   [10:0] tmp_40_fu_267_p2;
wire  signed [31:0] tmp_59_cast_fu_272_p1;
(* use_dsp48 = "no" *) wire   [20:0] tmp_42_fu_287_p2;
wire  signed [4:0] width_3_cast_fu_296_p1;
wire   [20:0] tmp_64_cast_fu_300_p1;
(* use_dsp48 = "no" *) wire   [20:0] tmp_45_fu_310_p2;
wire  signed [4:0] height_cast_fu_332_p1;
wire   [20:0] tmp_63_cast_fu_346_p1;
(* use_dsp48 = "no" *) wire   [20:0] tmp5_fu_362_p2;
wire   [4:0] tmp_37_fu_378_p0;
wire   [15:0] tmp_37_fu_378_p1;
wire   [4:0] tmp_39_fu_383_p0;
wire   [15:0] tmp_39_fu_383_p1;
reg   [8:0] ap_NS_fsm;
wire   [20:0] tmp_37_fu_378_p00;
wire   [20:0] tmp_39_fu_383_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

network_mul_mul_5ns_16ns_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
network_mul_mul_5ns_16ns_21_1_1_U1(
    .din0(tmp_37_fu_378_p0),
    .din1(tmp_37_fu_378_p1),
    .dout(tmp_37_fu_378_p2)
);

network_mul_mul_5ns_16ns_21_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
network_mul_mul_5ns_16ns_21_1_1_U2(
    .din0(tmp_39_fu_383_p0),
    .din1(tmp_39_fu_383_p1),
    .dout(tmp_39_fu_383_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        height1_reg_119 <= 5'd1;
    end else if (((exitcond7_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        height1_reg_119 <= height_1_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        height_reg_153 <= 3'd5;
    end else if (((exitcond_fu_350_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        height_reg_153 <= phitmp5_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        width3_reg_131 <= 5'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        width3_reg_131 <= width_2_reg_430;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        width6_reg_165 <= 5'd0;
    end else if (((exitcond_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        width6_reg_165 <= width_4_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        width_3_reg_142 <= 3'd5;
    end else if (((exitcond7_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        width_3_reg_142 <= phitmp_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        width_reg_108 <= 5'd0;
    end else if (((exitcond1_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        width_reg_108 <= width_1_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp3_reg_412[10 : 2] <= tmp3_fu_241_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_37_reg_405 <= tmp_37_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_340_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_39_reg_451 <= tmp_39_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_41_cast_reg_388[15 : 0] <= tmp_41_cast_fu_176_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_52_cast_reg_417[4 : 0] <= tmp_52_cast_fu_247_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        width_2_reg_430 <= width_2_fu_281_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond6_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond6_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_44_fu_367_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_46_fu_315_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = tmp_43_fu_291_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = tmp_38_fu_207_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = tmp_s_fu_192_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d0 = input_0_q0;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | ((exitcond7_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((exitcond1_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond9_fu_197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond8_fu_251_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond7_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond6_fu_340_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond_fu_350_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_180_p2 = ((width_reg_108 == 5'd30) ? 1'b1 : 1'b0);

assign exitcond6_fu_340_p2 = ((height_reg_153 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond7_fu_304_p2 = ((width_3_reg_142 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond8_fu_251_p2 = ((width3_reg_131 == 5'd29) ? 1'b1 : 1'b0);

assign exitcond9_fu_197_p2 = ((height1_reg_119 == 5'd29) ? 1'b1 : 1'b0);

assign exitcond_fu_350_p2 = ((width6_reg_165 == 5'd30) ? 1'b1 : 1'b0);

assign height_1_fu_326_p2 = (height1_reg_119 + 5'd1);

assign height_cast_fu_332_p1 = height_reg_153;

assign input_0_address0 = tmp_41_fu_276_p1;

assign p_shl3_cast_fu_225_p1 = p_shl3_fu_217_p3;

assign p_shl3_fu_217_p3 = {{tmp2_fu_211_p2}, {5'd0}};

assign p_shl4_cast_fu_237_p1 = p_shl4_fu_229_p3;

assign p_shl4_fu_229_p3 = {{tmp2_fu_211_p2}, {2'd0}};

assign phitmp5_fu_372_p2 = ($signed(height_reg_153) + $signed(3'd1));

assign phitmp_fu_320_p2 = ($signed(width_3_reg_142) + $signed(3'd1));

assign tmp2_fu_211_p2 = ($signed(height1_reg_119) + $signed(5'd31));

assign tmp3_fu_241_p2 = (p_shl3_cast_fu_225_p1 - p_shl4_cast_fu_237_p1);

assign tmp4_cast_fu_263_p1 = tmp4_fu_257_p2;

assign tmp4_fu_257_p2 = ($signed(width3_reg_131) + $signed(5'd31));

assign tmp5_fu_362_p2 = (tmp_39_reg_451 + tmp_63_cast_fu_346_p1);

assign tmp_37_fu_378_p0 = tmp_37_fu_378_p00;

assign tmp_37_fu_378_p00 = height1_reg_119;

assign tmp_37_fu_378_p1 = tmp_41_cast_reg_388;

assign tmp_38_fu_207_p1 = tmp_37_reg_405;

assign tmp_39_fu_383_p0 = tmp_39_fu_383_p00;

assign tmp_39_fu_383_p00 = $unsigned(height_cast_fu_332_p1);

assign tmp_39_fu_383_p1 = tmp_41_cast_reg_388;

assign tmp_40_fu_267_p2 = (tmp4_cast_fu_263_p1 + tmp3_reg_412);

assign tmp_41_cast_fu_176_p1 = output_width;

assign tmp_41_fu_276_p1 = $unsigned(tmp_59_cast_fu_272_p1);

assign tmp_42_fu_287_p2 = (tmp_37_reg_405 + tmp_52_cast_reg_417);

assign tmp_43_fu_291_p1 = tmp_42_fu_287_p2;

assign tmp_44_fu_367_p1 = tmp5_fu_362_p2;

assign tmp_45_fu_310_p2 = (tmp_37_reg_405 + tmp_64_cast_fu_300_p1);

assign tmp_46_fu_315_p1 = tmp_45_fu_310_p2;

assign tmp_52_cast_fu_247_p1 = width3_reg_131;

assign tmp_59_cast_fu_272_p1 = $signed(tmp_40_fu_267_p2);

assign tmp_63_cast_fu_346_p1 = width6_reg_165;

assign tmp_64_cast_fu_300_p1 = $unsigned(width_3_cast_fu_296_p1);

assign tmp_s_fu_192_p1 = width_reg_108;

assign width_1_fu_186_p2 = (width_reg_108 + 5'd1);

assign width_2_fu_281_p2 = (width3_reg_131 + 5'd1);

assign width_3_cast_fu_296_p1 = width_3_reg_142;

assign width_4_fu_356_p2 = (width6_reg_165 + 5'd1);

always @ (posedge ap_clk) begin
    tmp_41_cast_reg_388[20:16] <= 5'b00000;
    tmp3_reg_412[1:0] <= 2'b00;
    tmp_52_cast_reg_417[20:5] <= 16'b0000000000000000;
end

endmodule //padding2d_fix16_4
