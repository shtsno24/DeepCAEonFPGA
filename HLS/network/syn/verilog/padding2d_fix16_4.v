// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [15:0] input_0_q0;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg[9:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [9:0] indvars_iv9_cast8_fu_293_p1;
reg  signed [9:0] indvars_iv9_cast8_reg_488;
wire    ap_CS_fsm_state2;
wire  signed [9:0] indvars_iv1_cast_fu_297_p1;
reg  signed [9:0] indvars_iv1_cast_reg_493;
wire  signed [9:0] indvars_iv_cast_fu_301_p1;
reg  signed [9:0] indvars_iv_cast_reg_498;
wire  signed [8:0] o_count_cast6_fu_305_p1;
reg  signed [8:0] o_count_cast6_reg_503;
wire  signed [9:0] i_count_cast_fu_309_p1;
reg  signed [9:0] i_count_cast_reg_508;
wire   [10:0] indvars_iv9_cast_fu_313_p1;
reg   [10:0] indvars_iv9_cast_reg_513;
wire   [4:0] tmp_fu_317_p1;
wire   [4:0] tmp_38_fu_335_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond2_fu_325_p2;
wire   [8:0] i_count_3_fu_341_p2;
reg   [8:0] i_count_3_reg_531;
wire  signed [9:0] tmp_cast_fu_352_p1;
reg  signed [9:0] tmp_cast_reg_536;
wire   [4:0] height_1_fu_362_p2;
reg   [4:0] height_1_reg_544;
wire    ap_CS_fsm_state4;
wire   [9:0] tmp_40_fu_368_p2;
reg   [9:0] tmp_40_reg_549;
wire   [0:0] exitcond7_fu_356_p2;
wire   [7:0] tmp_39_fu_374_p2;
reg   [7:0] tmp_39_reg_554;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_380_p2;
wire   [9:0] tmp_45_fu_391_p2;
reg   [9:0] tmp_45_reg_567;
wire   [9:0] tmp_42_fu_397_p2;
reg   [9:0] tmp_42_reg_572;
wire   [9:0] o_count_8_fu_408_p2;
wire    ap_CS_fsm_state6;
wire   [9:0] o_count_9_fu_425_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond5_fu_414_p2;
wire   [9:0] indvars_iv_next5_fu_431_p2;
wire   [9:0] indvars_iv_next4_fu_437_p2;
wire   [9:0] o_count_7_fu_458_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond8_fu_447_p2;
wire   [7:0] indvars_iv_next_fu_464_p2;
wire   [7:0] indvars_iv_next1_fu_470_p2;
wire   [6:0] indvars_iv_next2_fu_476_p2;
wire   [10:0] indvars_iv_next6_fu_482_p2;
reg  signed [7:0] indvars_iv9_reg_108;
reg   [10:0] indvars_iv4_reg_120;
reg  signed [6:0] indvars_iv1_reg_132;
reg  signed [7:0] indvars_iv_reg_144;
reg  signed [7:0] o_count_reg_156;
reg  signed [8:0] i_count_reg_168;
wire   [0:0] ap_phi_mux_depth_phi_fu_185_p4;
reg   [0:0] depth_reg_180;
reg   [4:0] o_count_1_reg_193;
reg   [9:0] indvars_iv3_reg_202;
reg   [9:0] o_count_6_reg_212;
reg   [9:0] o_count_2_reg_222;
reg   [9:0] i_count_1_reg_232;
reg   [4:0] height_reg_242;
reg   [9:0] o_count_3_reg_253;
reg   [9:0] i_count_2_reg_264;
reg   [9:0] o_count_4_reg_274;
reg   [9:0] o_count_5_reg_284;
wire   [63:0] tmp_37_fu_330_p1;
wire   [63:0] tmp_43_fu_386_p1;
wire   [63:0] tmp_44_fu_403_p1;
wire   [63:0] tmp_46_fu_420_p1;
wire   [63:0] tmp_41_fu_453_p1;
wire   [10:0] o_count_1_cast_fu_321_p1;
wire   [8:0] tmp_s_fu_347_p2;
wire   [10:0] o_count_5_cast_cast_fu_443_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        depth_reg_180 <= 1'd0;
    end else if (((exitcond8_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        depth_reg_180 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        height_reg_242 <= 5'd0;
    end else if (((exitcond5_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        height_reg_242 <= height_1_reg_544;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_count_1_reg_232 <= i_count_cast_reg_508;
    end else if (((exitcond5_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        i_count_1_reg_232 <= tmp_40_reg_549;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_count_2_reg_264 <= tmp_45_reg_567;
    end else if (((exitcond7_fu_356_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_count_2_reg_264 <= i_count_1_reg_232;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_count_reg_168 <= 9'd0;
    end else if (((exitcond8_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_count_reg_168 <= i_count_3_reg_531;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv1_reg_132 <= 7'd61;
    end else if (((exitcond8_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvars_iv1_reg_132 <= indvars_iv_next2_fu_476_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv3_reg_202 <= indvars_iv1_cast_reg_493;
    end else if (((exitcond5_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        indvars_iv3_reg_202 <= indvars_iv_next4_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv4_reg_120 <= 11'd900;
    end else if (((exitcond8_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvars_iv4_reg_120 <= indvars_iv_next6_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv9_reg_108 <= 8'd31;
    end else if (((exitcond8_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvars_iv9_reg_108 <= indvars_iv_next_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_144 <= 8'd59;
    end else if (((exitcond8_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvars_iv_reg_144 <= indvars_iv_next1_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_depth_phi_fu_185_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        o_count_1_reg_193 <= tmp_fu_317_p1;
    end else if (((exitcond2_fu_325_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        o_count_1_reg_193 <= tmp_38_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        o_count_2_reg_222 <= indvars_iv9_cast8_reg_488;
    end else if (((exitcond5_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        o_count_2_reg_222 <= tmp_42_reg_572;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        o_count_3_reg_253 <= o_count_8_fu_408_p2;
    end else if (((exitcond7_fu_356_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_3_reg_253 <= o_count_2_reg_222;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        o_count_4_reg_274 <= o_count_9_fu_425_p2;
    end else if (((exitcond_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        o_count_4_reg_274 <= o_count_6_reg_212;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_447_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        o_count_5_reg_284 <= o_count_7_fu_458_p2;
    end else if (((exitcond7_fu_356_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_5_reg_284 <= tmp_cast_reg_536;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        o_count_6_reg_212 <= indvars_iv_cast_reg_498;
    end else if (((exitcond5_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        o_count_6_reg_212 <= indvars_iv_next5_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        o_count_reg_156 <= 8'd0;
    end else if (((exitcond8_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        o_count_reg_156 <= tmp_39_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        height_1_reg_544 <= height_1_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_count_3_reg_531 <= i_count_3_fu_341_p2;
        tmp_cast_reg_536 <= tmp_cast_fu_352_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_cast_reg_508 <= i_count_cast_fu_309_p1;
        indvars_iv1_cast_reg_493 <= indvars_iv1_cast_fu_297_p1;
        indvars_iv9_cast8_reg_488 <= indvars_iv9_cast8_fu_293_p1;
        indvars_iv9_cast_reg_513[9 : 0] <= indvars_iv9_cast_fu_313_p1[9 : 0];
        indvars_iv_cast_reg_498 <= indvars_iv_cast_fu_301_p1;
        o_count_cast6_reg_503 <= o_count_cast6_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_356_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_39_reg_554 <= tmp_39_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_356_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_40_reg_549 <= tmp_40_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_42_reg_572 <= tmp_42_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_45_reg_567 <= tmp_45_fu_391_p2;
    end
end

always @ (*) begin
    if ((((ap_phi_mux_depth_phi_fu_185_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_depth_phi_fu_185_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_41_fu_453_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_46_fu_420_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = tmp_44_fu_403_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = tmp_37_fu_330_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d0 = input_0_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((exitcond2_fu_325_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((exitcond8_fu_447_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((exitcond5_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_phi_mux_depth_phi_fu_185_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_325_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond7_fu_356_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond5_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond8_fu_447_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_phi_mux_depth_phi_fu_185_p4 = depth_reg_180;

assign exitcond2_fu_325_p2 = ((o_count_1_cast_fu_321_p1 == indvars_iv9_cast_reg_513) ? 1'b1 : 1'b0);

assign exitcond5_fu_414_p2 = ((o_count_4_reg_274 == indvars_iv3_reg_202) ? 1'b1 : 1'b0);

assign exitcond7_fu_356_p2 = ((height_reg_242 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond8_fu_447_p2 = ((o_count_5_cast_cast_fu_443_p1 == indvars_iv4_reg_120) ? 1'b1 : 1'b0);

assign exitcond_fu_380_p2 = ((o_count_3_reg_253 == o_count_6_reg_212) ? 1'b1 : 1'b0);

assign height_1_fu_362_p2 = (height_reg_242 + 5'd1);

assign i_count_3_fu_341_p2 = ($signed(i_count_reg_168) + $signed(9'd272));

assign i_count_cast_fu_309_p1 = i_count_reg_168;

assign indvars_iv1_cast_fu_297_p1 = indvars_iv1_reg_132;

assign indvars_iv9_cast8_fu_293_p1 = indvars_iv9_reg_108;

assign indvars_iv9_cast_fu_313_p1 = $unsigned(indvars_iv9_cast8_fu_293_p1);

assign indvars_iv_cast_fu_301_p1 = indvars_iv_reg_144;

assign indvars_iv_next1_fu_470_p2 = ($signed(indvars_iv_reg_144) + $signed(8'd132));

assign indvars_iv_next2_fu_476_p2 = ($signed(indvars_iv1_reg_132) + $signed(7'd4));

assign indvars_iv_next4_fu_437_p2 = (indvars_iv3_reg_202 + 10'd30);

assign indvars_iv_next5_fu_431_p2 = (o_count_6_reg_212 + 10'd30);

assign indvars_iv_next6_fu_482_p2 = (indvars_iv4_reg_120 + 11'd900);

assign indvars_iv_next_fu_464_p2 = ($signed(indvars_iv9_reg_108) + $signed(8'd132));

assign input_0_address0 = tmp_43_fu_386_p1;

assign o_count_1_cast_fu_321_p1 = o_count_1_reg_193;

assign o_count_5_cast_cast_fu_443_p1 = o_count_5_reg_284;

assign o_count_7_fu_458_p2 = (o_count_5_reg_284 + 10'd1);

assign o_count_8_fu_408_p2 = (o_count_3_reg_253 + 10'd1);

assign o_count_9_fu_425_p2 = (o_count_4_reg_274 + 10'd1);

assign o_count_cast6_fu_305_p1 = o_count_reg_156;

assign tmp_37_fu_330_p1 = o_count_1_reg_193;

assign tmp_38_fu_335_p2 = (o_count_1_reg_193 + 5'd1);

assign tmp_39_fu_374_p2 = ($signed(o_count_reg_156) + $signed(8'd132));

assign tmp_40_fu_368_p2 = (i_count_1_reg_232 + 10'd28);

assign tmp_41_fu_453_p1 = o_count_5_reg_284;

assign tmp_42_fu_397_p2 = (o_count_2_reg_222 + 10'd30);

assign tmp_43_fu_386_p1 = i_count_2_reg_264;

assign tmp_44_fu_403_p1 = o_count_3_reg_253;

assign tmp_45_fu_391_p2 = (i_count_2_reg_264 + 10'd1);

assign tmp_46_fu_420_p1 = o_count_4_reg_274;

assign tmp_cast_fu_352_p1 = $signed(tmp_s_fu_347_p2);

assign tmp_fu_317_p1 = o_count_reg_156[4:0];

assign tmp_s_fu_347_p2 = ($signed(o_count_cast6_reg_503) + $signed(9'd359));

always @ (posedge ap_clk) begin
    indvars_iv9_cast_reg_513[10] <= 1'b0;
end

endmodule //padding2d_fix16_4
