// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_0_address0;
output   input_0_ce0;
input  [15:0] input_0_q0;
output  [9:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg[9:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [9:0] indvars_iv6_cast7_fu_279_p1;
reg  signed [9:0] indvars_iv6_cast7_reg_474;
wire    ap_CS_fsm_state2;
wire  signed [9:0] indvars_iv_cast_fu_283_p1;
reg  signed [9:0] indvars_iv_cast_reg_479;
wire  signed [8:0] o_count_cast6_fu_287_p1;
reg  signed [8:0] o_count_cast6_reg_484;
wire  signed [9:0] i_count_cast_fu_291_p1;
reg  signed [9:0] i_count_cast_reg_489;
wire   [10:0] indvars_iv6_cast_fu_295_p1;
reg   [10:0] indvars_iv6_cast_reg_494;
wire   [4:0] tmp_fu_299_p1;
wire   [4:0] tmp_39_fu_317_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond8_fu_307_p2;
wire   [9:0] tmp_cast_fu_329_p1;
wire   [8:0] i_count_3_fu_333_p2;
reg   [8:0] i_count_3_reg_517;
wire  signed [9:0] tmp_43_cast_fu_344_p1;
reg  signed [9:0] tmp_43_cast_reg_522;
wire   [4:0] height_1_fu_354_p2;
reg   [4:0] height_1_reg_530;
wire    ap_CS_fsm_state4;
wire   [7:0] tmp_40_fu_360_p2;
reg   [7:0] tmp_40_reg_535;
wire   [0:0] exitcond2_fu_348_p2;
wire   [9:0] o_count_8_fu_377_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond3_fu_366_p2;
wire   [9:0] tmp_42_fu_383_p2;
reg   [9:0] tmp_42_reg_548;
wire   [9:0] tmp_43_fu_389_p2;
reg   [9:0] tmp_43_reg_553;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_395_p2;
wire   [9:0] tmp_47_fu_406_p2;
reg   [9:0] tmp_47_reg_566;
wire   [9:0] indvars_iv_next2_fu_412_p2;
wire   [9:0] indvars_iv_next9_fu_418_p2;
wire   [9:0] o_count_9_fu_429_p2;
wire    ap_CS_fsm_state7;
wire   [9:0] o_count_7_fu_450_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond5_fu_439_p2;
wire   [7:0] indvars_iv_next7_fu_456_p2;
wire   [7:0] indvars_iv_next_fu_462_p2;
wire   [10:0] indvars_iv_next4_fu_468_p2;
reg  signed [7:0] indvars_iv6_reg_106;
reg   [10:0] indvars_iv3_reg_118;
reg  signed [7:0] indvars_iv_reg_130;
reg  signed [7:0] o_count_reg_142;
reg  signed [8:0] i_count_reg_154;
wire   [0:0] ap_phi_mux_depth_phi_fu_171_p4;
reg   [0:0] depth_reg_166;
reg   [4:0] o_count_1_reg_179;
reg   [9:0] o_count_6_reg_188;
reg   [9:0] indvars_iv8_reg_198;
reg   [9:0] o_count_2_reg_208;
reg   [9:0] i_count_1_reg_218;
reg   [4:0] height_reg_228;
reg   [9:0] o_count_3_reg_239;
reg   [9:0] o_count_4_reg_249;
reg   [9:0] i_count_2_reg_260;
reg   [9:0] o_count_5_reg_270;
wire   [63:0] tmp_38_fu_312_p1;
wire   [63:0] tmp_44_fu_372_p1;
wire   [63:0] tmp_45_fu_401_p1;
wire   [63:0] tmp_46_fu_424_p1;
wire   [63:0] tmp_41_fu_445_p1;
wire   [10:0] o_count_1_cast_fu_303_p1;
wire   [7:0] tmp_s_fu_323_p2;
wire   [8:0] tmp_37_fu_339_p2;
wire   [10:0] o_count_5_cast_cast_fu_435_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        depth_reg_166 <= 1'd0;
    end else if (((exitcond5_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        depth_reg_166 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        height_reg_228 <= 5'd0;
    end else if (((exitcond_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        height_reg_228 <= height_1_reg_530;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_count_1_reg_218 <= i_count_cast_reg_489;
    end else if (((exitcond_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_count_1_reg_218 <= tmp_42_reg_548;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_count_2_reg_260 <= tmp_47_reg_566;
    end else if (((exitcond3_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_count_2_reg_260 <= i_count_1_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_count_reg_154 <= 9'd0;
    end else if (((exitcond5_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_count_reg_154 <= i_count_3_reg_517;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv3_reg_118 <= 11'd900;
    end else if (((exitcond5_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvars_iv3_reg_118 <= indvars_iv_next4_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv6_reg_106 <= 8'd29;
    end else if (((exitcond5_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvars_iv6_reg_106 <= indvars_iv_next7_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvars_iv8_reg_198 <= tmp_cast_fu_329_p1;
    end else if (((exitcond_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvars_iv8_reg_198 <= indvars_iv_next9_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_130 <= 8'd31;
    end else if (((exitcond5_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvars_iv_reg_130 <= indvars_iv_next_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_depth_phi_fu_171_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        o_count_1_reg_179 <= tmp_fu_299_p1;
    end else if (((exitcond8_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        o_count_1_reg_179 <= tmp_39_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        o_count_2_reg_208 <= indvars_iv6_cast7_reg_474;
    end else if (((exitcond_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        o_count_2_reg_208 <= tmp_43_reg_553;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_3_reg_239 <= o_count_2_reg_208;
    end else if (((exitcond3_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        o_count_3_reg_239 <= o_count_8_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o_count_4_reg_249 <= o_count_9_fu_429_p2;
    end else if (((exitcond3_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        o_count_4_reg_249 <= o_count_6_reg_188;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        o_count_5_reg_270 <= o_count_7_fu_450_p2;
    end else if (((exitcond2_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_5_reg_270 <= tmp_43_cast_reg_522;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        o_count_6_reg_188 <= indvars_iv_cast_reg_479;
    end else if (((exitcond_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        o_count_6_reg_188 <= indvars_iv_next2_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        o_count_reg_142 <= 8'd0;
    end else if (((exitcond5_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        o_count_reg_142 <= tmp_40_reg_535;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        height_1_reg_530 <= height_1_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_count_3_reg_517 <= i_count_3_fu_333_p2;
        tmp_43_cast_reg_522 <= tmp_43_cast_fu_344_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_cast_reg_489 <= i_count_cast_fu_291_p1;
        indvars_iv6_cast7_reg_474 <= indvars_iv6_cast7_fu_279_p1;
        indvars_iv6_cast_reg_494[9 : 0] <= indvars_iv6_cast_fu_295_p1[9 : 0];
        indvars_iv_cast_reg_479 <= indvars_iv_cast_fu_283_p1;
        o_count_cast6_reg_484 <= o_count_cast6_fu_287_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_40_reg_535 <= tmp_40_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_42_reg_548 <= tmp_42_fu_383_p2;
        tmp_43_reg_553 <= tmp_43_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_47_reg_566 <= tmp_47_fu_406_p2;
    end
end

always @ (*) begin
    if ((((ap_phi_mux_depth_phi_fu_171_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_phi_mux_depth_phi_fu_171_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_41_fu_445_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_46_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_44_fu_372_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = tmp_38_fu_312_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_d0 = input_0_q0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((exitcond3_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((exitcond8_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((exitcond5_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_phi_mux_depth_phi_fu_171_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond8_fu_307_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond3_fu_366_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_395_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond5_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_phi_mux_depth_phi_fu_171_p4 = depth_reg_166;

assign exitcond2_fu_348_p2 = ((height_reg_228 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond3_fu_366_p2 = ((o_count_3_reg_239 == o_count_6_reg_188) ? 1'b1 : 1'b0);

assign exitcond5_fu_439_p2 = ((o_count_5_cast_cast_fu_435_p1 == indvars_iv3_reg_118) ? 1'b1 : 1'b0);

assign exitcond8_fu_307_p2 = ((o_count_1_cast_fu_303_p1 == indvars_iv6_cast_reg_494) ? 1'b1 : 1'b0);

assign exitcond_fu_395_p2 = ((o_count_4_reg_249 == indvars_iv8_reg_198) ? 1'b1 : 1'b0);

assign height_1_fu_354_p2 = (height_reg_228 + 5'd1);

assign i_count_3_fu_333_p2 = ($signed(i_count_reg_154) + $signed(9'd272));

assign i_count_cast_fu_291_p1 = i_count_reg_154;

assign indvars_iv6_cast7_fu_279_p1 = indvars_iv6_reg_106;

assign indvars_iv6_cast_fu_295_p1 = $unsigned(indvars_iv6_cast7_fu_279_p1);

assign indvars_iv_cast_fu_283_p1 = indvars_iv_reg_130;

assign indvars_iv_next2_fu_412_p2 = (o_count_6_reg_188 + 10'd30);

assign indvars_iv_next4_fu_468_p2 = (indvars_iv3_reg_118 + 11'd900);

assign indvars_iv_next7_fu_456_p2 = ($signed(indvars_iv6_reg_106) + $signed(8'd132));

assign indvars_iv_next9_fu_418_p2 = (indvars_iv8_reg_198 + 10'd30);

assign indvars_iv_next_fu_462_p2 = ($signed(indvars_iv_reg_130) + $signed(8'd132));

assign input_0_address0 = tmp_45_fu_401_p1;

assign o_count_1_cast_fu_303_p1 = o_count_1_reg_179;

assign o_count_5_cast_cast_fu_435_p1 = o_count_5_reg_270;

assign o_count_7_fu_450_p2 = (o_count_5_reg_270 + 10'd1);

assign o_count_8_fu_377_p2 = (o_count_3_reg_239 + 10'd1);

assign o_count_9_fu_429_p2 = (o_count_4_reg_249 + 10'd1);

assign o_count_cast6_fu_287_p1 = o_count_reg_142;

assign tmp_37_fu_339_p2 = ($signed(o_count_cast6_reg_484) + $signed(9'd357));

assign tmp_38_fu_312_p1 = o_count_1_reg_179;

assign tmp_39_fu_317_p2 = (o_count_1_reg_179 + 5'd1);

assign tmp_40_fu_360_p2 = ($signed(o_count_reg_142) + $signed(8'd132));

assign tmp_41_fu_445_p1 = o_count_5_reg_270;

assign tmp_42_fu_383_p2 = (i_count_1_reg_218 + 10'd28);

assign tmp_43_cast_fu_344_p1 = $signed(tmp_37_fu_339_p2);

assign tmp_43_fu_389_p2 = (o_count_2_reg_208 + 10'd30);

assign tmp_44_fu_372_p1 = o_count_3_reg_239;

assign tmp_45_fu_401_p1 = i_count_2_reg_260;

assign tmp_46_fu_424_p1 = o_count_4_reg_249;

assign tmp_47_fu_406_p2 = (i_count_2_reg_260 + 10'd1);

assign tmp_cast_fu_329_p1 = tmp_s_fu_323_p2;

assign tmp_fu_299_p1 = o_count_reg_142[4:0];

assign tmp_s_fu_323_p2 = ($signed(o_count_reg_142) + $signed(8'd59));

always @ (posedge ap_clk) begin
    indvars_iv6_cast_reg_494[10] <= 1'b0;
end

endmodule //padding2d_fix16_4
