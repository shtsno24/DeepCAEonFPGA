// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2d_fix16_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        output_depth,
        output_height,
        output_width,
        Conv2D_0_array_address0,
        Conv2D_0_array_ce0,
        Conv2D_0_array_q0,
        Conv2D_0_array_address1,
        Conv2D_0_array_ce1,
        Conv2D_0_array_q1,
        MaxPooling2D_0_array_address0,
        MaxPooling2D_0_array_ce0,
        MaxPooling2D_0_array_we0,
        MaxPooling2D_0_array_d0,
        MaxPooling2D_0_array_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_height;
input  [15:0] input_width;
input  [15:0] output_depth;
input  [15:0] output_height;
input  [15:0] output_width;
output  [13:0] Conv2D_0_array_address0;
output   Conv2D_0_array_ce0;
input  [15:0] Conv2D_0_array_q0;
output  [13:0] Conv2D_0_array_address1;
output   Conv2D_0_array_ce1;
input  [15:0] Conv2D_0_array_q1;
output  [11:0] MaxPooling2D_0_array_address0;
output   MaxPooling2D_0_array_ce0;
output   MaxPooling2D_0_array_we0;
output  [15:0] MaxPooling2D_0_array_d0;
input  [15:0] MaxPooling2D_0_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] Conv2D_0_array_address0;
reg Conv2D_0_array_ce0;
reg[13:0] Conv2D_0_array_address1;
reg Conv2D_0_array_ce1;
reg MaxPooling2D_0_array_ce0;
reg MaxPooling2D_0_array_we0;
reg[15:0] MaxPooling2D_0_array_d0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] reg_171;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_s_fu_176_p1;
reg   [31:0] tmp_s_reg_379;
wire   [31:0] tmp_73_fu_180_p1;
reg   [31:0] tmp_73_reg_384;
wire   [31:0] tmp_74_fu_184_p1;
reg   [31:0] tmp_74_reg_390;
wire   [31:0] tmp_75_fu_188_p1;
reg   [31:0] tmp_75_reg_395;
wire   [31:0] next_mul3_fu_192_p2;
reg   [31:0] next_mul3_reg_400;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul_fu_197_p2;
reg   [31:0] next_mul_reg_405;
wire   [15:0] out_d_2_fu_207_p2;
reg   [15:0] out_d_2_reg_413;
wire   [15:0] out_h_1_fu_218_p2;
reg   [15:0] out_h_1_reg_421;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_fu_240_p2;
reg  signed [31:0] tmp_reg_426;
wire   [0:0] exitcond3_fu_213_p2;
wire  signed [31:0] tmp4_fu_246_p2;
reg  signed [31:0] tmp4_reg_431;
wire  signed [31:0] tmp4_1_fu_252_p2;
reg  signed [31:0] tmp4_1_reg_436;
wire   [31:0] tmp3_fu_258_p2;
reg   [31:0] tmp3_reg_441;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp5_fu_262_p2;
reg   [31:0] tmp5_reg_446;
wire   [31:0] tmp5_1_fu_266_p2;
reg   [31:0] tmp5_1_reg_451;
wire   [15:0] out_w_1_fu_275_p2;
reg   [15:0] out_w_1_reg_459;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_83_cast_fu_293_p1;
reg   [31:0] tmp_83_cast_reg_464;
wire   [0:0] exitcond2_fu_270_p2;
reg   [11:0] MaxPooling2D_0_array_1_reg_469;
wire   [0:0] tmp_104_0_1_fu_328_p2;
reg   [0:0] tmp_104_0_1_reg_484;
wire  signed [31:0] tmp_95_1_fu_334_p2;
reg  signed [31:0] tmp_95_1_reg_488;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [15:0] out_d_reg_114;
reg   [31:0] phi_mul_reg_125;
reg   [31:0] phi_mul2_reg_137;
reg   [15:0] out_h_reg_149;
wire   [0:0] exitcond4_fu_202_p2;
reg   [15:0] out_w_reg_160;
wire    ap_CS_fsm_state11;
wire  signed [63:0] tmp_81_fu_302_p1;
wire  signed [63:0] tmp_83_fu_312_p1;
wire  signed [63:0] tmp_103_0_1_fu_323_p1;
wire  signed [63:0] tmp_103_1_fu_338_p1;
wire  signed [63:0] tmp_103_1_1_fu_353_p1;
wire   [0:0] tmp_104_1_fu_342_p2;
wire   [0:0] tmp_104_1_1_fu_358_p2;
wire   [16:0] tmp_77_fu_228_p3;
wire   [31:0] tmp_76_fu_224_p1;
wire   [31:0] tmp_81_cast_fu_236_p1;
wire   [15:0] tmp3_fu_258_p0;
wire   [15:0] tmp5_fu_262_p0;
wire   [15:0] tmp5_1_fu_266_p0;
wire   [16:0] tmp_79_fu_285_p3;
wire   [31:0] tmp_78_fu_281_p1;
wire   [31:0] tmp_80_fu_297_p2;
wire  signed [31:0] tmp_82_fu_307_p2;
wire   [31:0] tmp_102_0_1_fu_317_p2;
wire   [31:0] tmp_102_1_1_fu_348_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_213_p2 == 1'd1))) begin
        out_d_reg_114 <= out_d_2_reg_413;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_114 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd0))) begin
        out_h_reg_149 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_270_p2 == 1'd1))) begin
        out_h_reg_149 <= out_h_1_reg_421;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_160 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_w_reg_160 <= out_w_1_reg_459;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_213_p2 == 1'd1))) begin
        phi_mul2_reg_137 <= next_mul3_reg_400;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_137 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_213_p2 == 1'd1))) begin
        phi_mul_reg_125 <= next_mul_reg_405;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_125 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_270_p2 == 1'd0))) begin
        MaxPooling2D_0_array_1_reg_469 <= tmp_81_fu_302_p1;
        tmp_83_cast_reg_464[16 : 1] <= tmp_83_cast_fu_293_p1[16 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul3_reg_400 <= next_mul3_fu_192_p2;
        next_mul_reg_405 <= next_mul_fu_197_p2;
        out_d_2_reg_413 <= out_d_2_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_1_reg_421 <= out_h_1_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_1_reg_459 <= out_w_1_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        reg_171 <= Conv2D_0_array_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp3_reg_441 <= tmp3_fu_258_p2;
        tmp5_1_reg_451 <= tmp5_1_fu_266_p2;
        tmp5_reg_446 <= tmp5_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_213_p2 == 1'd0))) begin
        tmp4_1_reg_436 <= tmp4_1_fu_252_p2;
        tmp4_reg_431 <= tmp4_fu_246_p2;
        tmp_reg_426 <= tmp_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_104_0_1_reg_484 <= tmp_104_0_1_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_73_reg_384[15 : 0] <= tmp_73_fu_180_p1[15 : 0];
        tmp_74_reg_390[15 : 0] <= tmp_74_fu_184_p1[15 : 0];
        tmp_75_reg_395[15 : 0] <= tmp_75_fu_188_p1[15 : 0];
        tmp_s_reg_379[15 : 0] <= tmp_s_fu_176_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_95_1_reg_488 <= tmp_95_1_fu_334_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        Conv2D_0_array_address0 = tmp_103_1_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Conv2D_0_array_address0 = tmp_83_fu_312_p1;
    end else begin
        Conv2D_0_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Conv2D_0_array_address1 = tmp_103_1_1_fu_353_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        Conv2D_0_array_address1 = tmp_103_0_1_fu_323_p1;
    end else begin
        Conv2D_0_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state5))) begin
        Conv2D_0_array_ce0 = 1'b1;
    end else begin
        Conv2D_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        Conv2D_0_array_ce1 = 1'b1;
    end else begin
        Conv2D_0_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        MaxPooling2D_0_array_ce0 = 1'b1;
    end else begin
        MaxPooling2D_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        MaxPooling2D_0_array_d0 = reg_171;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state9))) begin
        MaxPooling2D_0_array_d0 = Conv2D_0_array_q0;
    end else begin
        MaxPooling2D_0_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state11) & (tmp_104_1_1_fu_358_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_104_1_fu_342_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_104_0_1_reg_484 == 1'd1)))) begin
        MaxPooling2D_0_array_we0 = 1'b1;
    end else begin
        MaxPooling2D_0_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_202_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_213_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MaxPooling2D_0_array_address0 = MaxPooling2D_0_array_1_reg_469;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond2_fu_270_p2 = ((out_w_reg_160 == output_width) ? 1'b1 : 1'b0);

assign exitcond3_fu_213_p2 = ((out_h_reg_149 == output_height) ? 1'b1 : 1'b0);

assign exitcond4_fu_202_p2 = ((out_d_reg_114 == output_depth) ? 1'b1 : 1'b0);

assign next_mul3_fu_192_p2 = (phi_mul2_reg_137 + tmp_74_reg_390);

assign next_mul_fu_197_p2 = (phi_mul_reg_125 + tmp_s_reg_379);

assign out_d_2_fu_207_p2 = (out_d_reg_114 + 16'd1);

assign out_h_1_fu_218_p2 = (out_h_reg_149 + 16'd1);

assign out_w_1_fu_275_p2 = (out_w_reg_160 + 16'd1);

assign tmp3_fu_258_p0 = tmp_75_reg_395;

assign tmp3_fu_258_p2 = ($signed({{1'b0}, {tmp3_fu_258_p0}}) * $signed(tmp_reg_426));

assign tmp4_1_fu_252_p2 = ($signed(tmp4_fu_246_p2) + $signed(32'd1));

assign tmp4_fu_246_p2 = (phi_mul_reg_125 + tmp_81_cast_fu_236_p1);

assign tmp5_1_fu_266_p0 = tmp_73_reg_384;

assign tmp5_1_fu_266_p2 = ($signed({{1'b0}, {tmp5_1_fu_266_p0}}) * $signed(tmp4_1_reg_436));

assign tmp5_fu_262_p0 = tmp_73_reg_384;

assign tmp5_fu_262_p2 = ($signed({{1'b0}, {tmp5_fu_262_p0}}) * $signed(tmp4_reg_431));

assign tmp_102_0_1_fu_317_p2 = ($signed(tmp_82_fu_307_p2) + $signed(32'd1));

assign tmp_102_1_1_fu_348_p2 = ($signed(tmp_95_1_reg_488) + $signed(32'd1));

assign tmp_103_0_1_fu_323_p1 = $signed(tmp_102_0_1_fu_317_p2);

assign tmp_103_1_1_fu_353_p1 = $signed(tmp_102_1_1_fu_348_p2);

assign tmp_103_1_fu_338_p1 = tmp_95_1_reg_488;

assign tmp_104_0_1_fu_328_p2 = (($signed(Conv2D_0_array_q0) < $signed(Conv2D_0_array_q1)) ? 1'b1 : 1'b0);

assign tmp_104_1_1_fu_358_p2 = (($signed(MaxPooling2D_0_array_q0) < $signed(reg_171)) ? 1'b1 : 1'b0);

assign tmp_104_1_fu_342_p2 = (($signed(MaxPooling2D_0_array_q0) < $signed(Conv2D_0_array_q0)) ? 1'b1 : 1'b0);

assign tmp_73_fu_180_p1 = input_width;

assign tmp_74_fu_184_p1 = output_height;

assign tmp_75_fu_188_p1 = output_width;

assign tmp_76_fu_224_p1 = out_h_reg_149;

assign tmp_77_fu_228_p3 = {{out_h_reg_149}, {1'd0}};

assign tmp_78_fu_281_p1 = out_w_reg_160;

assign tmp_79_fu_285_p3 = {{out_w_reg_160}, {1'd0}};

assign tmp_80_fu_297_p2 = (tmp_78_fu_281_p1 + tmp3_reg_441);

assign tmp_81_cast_fu_236_p1 = tmp_77_fu_228_p3;

assign tmp_81_fu_302_p1 = $signed(tmp_80_fu_297_p2);

assign tmp_82_fu_307_p2 = (tmp_83_cast_fu_293_p1 + tmp5_reg_446);

assign tmp_83_cast_fu_293_p1 = tmp_79_fu_285_p3;

assign tmp_83_fu_312_p1 = tmp_82_fu_307_p2;

assign tmp_95_1_fu_334_p2 = (tmp5_1_reg_451 + tmp_83_cast_reg_464);

assign tmp_fu_240_p2 = (tmp_76_fu_224_p1 + phi_mul2_reg_137);

assign tmp_s_fu_176_p1 = input_height;

always @ (posedge ap_clk) begin
    tmp_s_reg_379[31:16] <= 16'b0000000000000000;
    tmp_73_reg_384[31:16] <= 16'b0000000000000000;
    tmp_74_reg_390[31:16] <= 16'b0000000000000000;
    tmp_75_reg_395[31:16] <= 16'b0000000000000000;
    tmp_83_cast_reg_464[0] <= 1'b0;
    tmp_83_cast_reg_464[31:17] <= 15'b000000000000000;
end

endmodule //max_pooling2d_fix16_1
