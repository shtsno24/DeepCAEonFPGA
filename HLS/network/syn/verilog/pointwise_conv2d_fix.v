// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_0_b_s_address0;
reg    SeparableConv2D_0_b_s_ce0;
wire   [12:0] SeparableConv2D_0_b_s_q0;
wire   [14:0] phi_mul_cast_fu_127_p1;
reg   [14:0] phi_mul_cast_reg_295;
wire    ap_CS_fsm_state2;
wire   [13:0] next_mul_fu_131_p2;
reg   [13:0] next_mul_reg_300;
wire   [4:0] out_d_1_fu_143_p2;
reg   [4:0] out_d_1_reg_308;
wire   [0:0] exitcond4_fu_137_p2;
wire  signed [14:0] SeparableConv2D_0_b_3_fu_154_p1;
reg  signed [14:0] SeparableConv2D_0_b_3_reg_318;
wire    ap_CS_fsm_state3;
wire   [4:0] out_h_1_fu_164_p2;
reg   [4:0] out_h_1_reg_326;
wire    ap_CS_fsm_state4;
wire   [10:0] tmp_5_fu_194_p2;
reg   [10:0] tmp_5_reg_331;
wire   [0:0] exitcond3_fu_158_p2;
wire   [4:0] out_w_1_fu_206_p2;
reg   [4:0] out_w_1_reg_339;
wire    ap_CS_fsm_state5;
wire   [14:0] tmp_9_fu_225_p2;
reg   [14:0] tmp_9_reg_344;
wire   [0:0] exitcond2_fu_200_p2;
reg  signed [15:0] input_load_reg_354;
wire    ap_CS_fsm_state6;
reg   [13:0] tmp_8_reg_359;
wire    ap_CS_fsm_state7;
reg   [4:0] out_d_reg_83;
reg   [13:0] phi_mul_reg_94;
reg   [4:0] out_h_reg_105;
reg   [4:0] out_w_reg_116;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_2_fu_149_p1;
wire   [63:0] tmp_4_fu_234_p1;
wire   [63:0] tmp_s_fu_254_p1;
wire   [9:0] p_shl_fu_170_p3;
wire   [6:0] p_shl5_fu_182_p3;
wire   [10:0] p_shl_cast_fu_178_p1;
wire   [10:0] p_shl5_cast_fu_190_p1;
wire   [10:0] tmp_7_cast_fu_212_p1;
wire  signed [10:0] tmp1_fu_216_p2;
wire  signed [14:0] tmp1_cast_fu_221_p1;
wire  signed [31:0] tmp_10_cast_fu_230_p1;
wire  signed [27:0] tmp_7_fu_288_p2;
wire  signed [31:0] tmp_9_cast_fu_251_p1;
wire  signed [14:0] tmp_10_cast1_fu_259_p1;
wire   [14:0] tmp_3_fu_262_p2;
wire   [0:0] tmp_fu_267_p3;
wire   [14:0] storemerge_fu_275_p3;
wire  signed [11:0] tmp_7_fu_288_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

pointwise_conv2d_fix_SeparableConv2D_0_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_b_s_address0),
    .ce0(SeparableConv2D_0_b_s_ce0),
    .q0(SeparableConv2D_0_b_s_q0)
);

network_mul_mul_16s_12s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
network_mul_mul_16s_12s_28_1_1_U8(
    .din0(input_load_reg_354),
    .din1(tmp_7_fu_288_p1),
    .dout(tmp_7_fu_288_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_reg_83 <= out_d_1_reg_308;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_83 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_h_reg_105 <= out_h_1_reg_326;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_105 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_reg_116 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_w_reg_116 <= out_w_1_reg_339;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_94 <= next_mul_reg_300;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_94 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SeparableConv2D_0_b_3_reg_318 <= SeparableConv2D_0_b_3_fu_154_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_load_reg_354 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_300 <= next_mul_fu_131_p2;
        out_d_1_reg_308 <= out_d_1_fu_143_p2;
        phi_mul_cast_reg_295[13 : 0] <= phi_mul_cast_fu_127_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_1_reg_326 <= out_h_1_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_1_reg_339 <= out_w_1_fu_206_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_5_reg_331[10 : 2] <= tmp_5_fu_194_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_8_reg_359 <= {{tmp_7_fu_288_p2[27:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_200_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_9_reg_344 <= tmp_9_fu_225_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_0_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond4_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_137_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond3_fu_158_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond2_fu_200_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_0_b_3_fu_154_p1 = $signed(SeparableConv2D_0_b_s_q0);

assign SeparableConv2D_0_b_s_address0 = tmp_2_fu_149_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond2_fu_200_p2 = ((out_w_reg_116 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond3_fu_158_p2 = ((out_h_reg_105 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond4_fu_137_p2 = ((out_d_reg_83 == 5'd16) ? 1'b1 : 1'b0);

assign input_r_address0 = tmp_4_fu_234_p1;

assign next_mul_fu_131_p2 = (phi_mul_reg_94 + 14'd784);

assign out_d_1_fu_143_p2 = (out_d_reg_83 + 5'd1);

assign out_h_1_fu_164_p2 = (out_h_reg_105 + 5'd1);

assign out_w_1_fu_206_p2 = (out_w_reg_116 + 5'd1);

assign output_r_address0 = tmp_s_fu_254_p1;

assign output_r_d0 = storemerge_fu_275_p3;

assign p_shl5_cast_fu_190_p1 = p_shl5_fu_182_p3;

assign p_shl5_fu_182_p3 = {{out_h_reg_105}, {2'd0}};

assign p_shl_cast_fu_178_p1 = p_shl_fu_170_p3;

assign p_shl_fu_170_p3 = {{out_h_reg_105}, {5'd0}};

assign phi_mul_cast_fu_127_p1 = phi_mul_reg_94;

assign storemerge_fu_275_p3 = ((tmp_fu_267_p3[0:0] === 1'b1) ? 15'd0 : tmp_3_fu_262_p2);

assign tmp1_cast_fu_221_p1 = tmp1_fu_216_p2;

assign tmp1_fu_216_p2 = (tmp_7_cast_fu_212_p1 + tmp_5_reg_331);

assign tmp_10_cast1_fu_259_p1 = $signed(tmp_8_reg_359);

assign tmp_10_cast_fu_230_p1 = tmp1_fu_216_p2;

assign tmp_2_fu_149_p1 = out_d_reg_83;

assign tmp_3_fu_262_p2 = ($signed(tmp_10_cast1_fu_259_p1) + $signed(SeparableConv2D_0_b_3_reg_318));

assign tmp_4_fu_234_p1 = $unsigned(tmp_10_cast_fu_230_p1);

assign tmp_5_fu_194_p2 = (p_shl_cast_fu_178_p1 - p_shl5_cast_fu_190_p1);

assign tmp_7_cast_fu_212_p1 = out_w_reg_116;

assign tmp_7_fu_288_p1 = 28'd268433686;

assign tmp_9_cast_fu_251_p1 = $signed(tmp_9_reg_344);

assign tmp_9_fu_225_p2 = ($signed(phi_mul_cast_reg_295) + $signed(tmp1_cast_fu_221_p1));

assign tmp_fu_267_p3 = tmp_3_fu_262_p2[32'd14];

assign tmp_s_fu_254_p1 = $unsigned(tmp_9_cast_fu_251_p1);

always @ (posedge ap_clk) begin
    phi_mul_cast_reg_295[14] <= 1'b0;
    tmp_5_reg_331[1:0] <= 2'b00;
end

endmodule //pointwise_conv2d_fix
