// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_0_b_s_address0;
reg    SeparableConv2D_0_b_s_ce0;
wire   [12:0] SeparableConv2D_0_b_s_q0;
wire   [3:0] SeparableConv2D_0_w_s_address0;
reg    SeparableConv2D_0_w_s_ce0;
wire   [14:0] SeparableConv2D_0_w_s_q0;
wire   [14:0] phi_mul_cast_fu_146_p1;
reg   [14:0] phi_mul_cast_reg_340;
wire    ap_CS_fsm_state2;
wire   [13:0] next_mul_fu_150_p2;
reg   [13:0] next_mul_reg_345;
wire   [4:0] out_d_2_fu_162_p2;
reg   [4:0] out_d_2_reg_353;
wire   [0:0] exitcond3_fu_156_p2;
wire  signed [15:0] SeparableConv2D_0_b_3_fu_182_p1;
reg  signed [15:0] SeparableConv2D_0_b_3_reg_368;
wire    ap_CS_fsm_state3;
wire  signed [14:0] tmp_3_fu_186_p1;
reg  signed [14:0] tmp_3_reg_373;
wire  signed [29:0] tmp_33_cast_fu_190_p1;
reg  signed [29:0] tmp_33_cast_reg_378;
wire   [4:0] out_h_2_fu_200_p2;
reg   [4:0] out_h_2_reg_386;
wire    ap_CS_fsm_state4;
wire   [10:0] tmp_7_fu_230_p2;
reg   [10:0] tmp_7_reg_391;
wire   [0:0] exitcond2_fu_194_p2;
wire   [4:0] out_w_2_fu_242_p2;
reg   [4:0] out_w_2_reg_399;
wire    ap_CS_fsm_state5;
wire   [14:0] tmp_8_fu_261_p2;
reg   [14:0] tmp_8_reg_404;
wire   [0:0] exitcond1_fu_236_p2;
reg  signed [15:0] input_load_reg_414;
wire    ap_CS_fsm_state6;
reg   [15:0] tmp_18_reg_419;
wire    ap_CS_fsm_state7;
reg   [14:0] tmp_4_reg_424;
reg   [4:0] out_d_reg_102;
reg   [13:0] phi_mul_reg_113;
reg   [4:0] out_h_reg_124;
reg   [4:0] out_w_reg_135;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_6_fu_172_p1;
wire   [63:0] tmp_15_fu_177_p1;
wire   [63:0] tmp_13_fu_270_p1;
wire   [63:0] tmp_9_fu_299_p1;
wire   [3:0] tmp_17_fu_168_p1;
wire  signed [12:0] SeparableConv2D_0_b_3_fu_182_p0;
wire  signed [12:0] tmp_3_fu_186_p0;
wire   [9:0] p_shl_fu_206_p3;
wire   [6:0] p_shl1_fu_218_p3;
wire   [10:0] p_shl_cast_fu_214_p1;
wire   [10:0] p_shl1_cast_fu_226_p1;
wire   [10:0] tmp_19_cast_fu_248_p1;
wire  signed [10:0] tmp_fu_252_p2;
wire  signed [14:0] tmp_cast_fu_257_p1;
wire  signed [31:0] tmp_28_cast_fu_266_p1;
wire  signed [29:0] tmp_16_fu_333_p2;
wire  signed [31:0] tmp_21_cast_fu_296_p1;
wire   [15:0] tmp_10_fu_304_p2;
wire   [0:0] tmp_19_fu_312_p3;
wire   [14:0] tmp_23_cast_fu_308_p2;
wire   [14:0] p_tmp_s_fu_320_p3;
wire  signed [14:0] tmp_16_fu_333_p1;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

pointwise_conv2d_fix_SeparableConv2D_0_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_b_s_address0),
    .ce0(SeparableConv2D_0_b_s_ce0),
    .q0(SeparableConv2D_0_b_s_q0)
);

pointwise_conv2d_fix_SeparableConv2D_0_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_w_s_address0),
    .ce0(SeparableConv2D_0_w_s_ce0),
    .q0(SeparableConv2D_0_w_s_q0)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U11(
    .din0(input_load_reg_414),
    .din1(tmp_16_fu_333_p1),
    .dout(tmp_16_fu_333_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_d_reg_102 <= out_d_2_reg_353;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_102 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_236_p2 == 1'd1))) begin
        out_h_reg_124 <= out_h_2_reg_386;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_124 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_reg_135 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        out_w_reg_135 <= out_w_2_reg_399;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_113 <= next_mul_reg_345;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_113 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SeparableConv2D_0_b_3_reg_368 <= SeparableConv2D_0_b_3_fu_182_p1;
        tmp_33_cast_reg_378 <= tmp_33_cast_fu_190_p1;
        tmp_3_reg_373 <= tmp_3_fu_186_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_load_reg_414 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul_reg_345 <= next_mul_fu_150_p2;
        out_d_2_reg_353 <= out_d_2_fu_162_p2;
        phi_mul_cast_reg_340[13 : 0] <= phi_mul_cast_fu_146_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_2_reg_386 <= out_h_2_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_2_reg_399 <= out_w_2_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_18_reg_419 <= {{tmp_16_fu_333_p2[29:14]}};
        tmp_4_reg_424 <= {{tmp_16_fu_333_p2[28:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_7_reg_391[10 : 2] <= tmp_7_fu_230_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_8_reg_404 <= tmp_8_fu_261_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_0_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_0_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_236_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_0_b_3_fu_182_p0 = SeparableConv2D_0_b_s_q0;

assign SeparableConv2D_0_b_3_fu_182_p1 = SeparableConv2D_0_b_3_fu_182_p0;

assign SeparableConv2D_0_b_s_address0 = tmp_6_fu_172_p1;

assign SeparableConv2D_0_w_s_address0 = tmp_15_fu_177_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_fu_236_p2 = ((out_w_reg_135 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond2_fu_194_p2 = ((out_h_reg_124 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond3_fu_156_p2 = ((out_d_reg_102 == 5'd16) ? 1'b1 : 1'b0);

assign input_r_address0 = tmp_13_fu_270_p1;

assign next_mul_fu_150_p2 = (phi_mul_reg_113 + 14'd784);

assign out_d_2_fu_162_p2 = (out_d_reg_102 + 5'd1);

assign out_h_2_fu_200_p2 = (out_h_reg_124 + 5'd1);

assign out_w_2_fu_242_p2 = (out_w_reg_135 + 5'd1);

assign output_r_address0 = tmp_9_fu_299_p1;

assign output_r_d0 = p_tmp_s_fu_320_p3;

assign p_shl1_cast_fu_226_p1 = p_shl1_fu_218_p3;

assign p_shl1_fu_218_p3 = {{out_h_reg_124}, {2'd0}};

assign p_shl_cast_fu_214_p1 = p_shl_fu_206_p3;

assign p_shl_fu_206_p3 = {{out_h_reg_124}, {5'd0}};

assign p_tmp_s_fu_320_p3 = ((tmp_19_fu_312_p3[0:0] === 1'b1) ? 15'd0 : tmp_23_cast_fu_308_p2);

assign phi_mul_cast_fu_146_p1 = phi_mul_reg_113;

assign tmp_10_fu_304_p2 = ($signed(SeparableConv2D_0_b_3_reg_368) + $signed(tmp_18_reg_419));

assign tmp_13_fu_270_p1 = $unsigned(tmp_28_cast_fu_266_p1);

assign tmp_15_fu_177_p1 = tmp_17_fu_168_p1;

assign tmp_16_fu_333_p1 = tmp_33_cast_reg_378;

assign tmp_17_fu_168_p1 = out_d_reg_102[3:0];

assign tmp_19_cast_fu_248_p1 = out_w_reg_135;

assign tmp_19_fu_312_p3 = tmp_10_fu_304_p2[32'd15];

assign tmp_21_cast_fu_296_p1 = $signed(tmp_8_reg_404);

assign tmp_23_cast_fu_308_p2 = ($signed(tmp_4_reg_424) + $signed(tmp_3_reg_373));

assign tmp_28_cast_fu_266_p1 = tmp_fu_252_p2;

assign tmp_33_cast_fu_190_p1 = $signed(SeparableConv2D_0_w_s_q0);

assign tmp_3_fu_186_p0 = SeparableConv2D_0_b_s_q0;

assign tmp_3_fu_186_p1 = tmp_3_fu_186_p0;

assign tmp_6_fu_172_p1 = out_d_reg_102;

assign tmp_7_fu_230_p2 = (p_shl_cast_fu_214_p1 - p_shl1_cast_fu_226_p1);

assign tmp_8_fu_261_p2 = ($signed(tmp_cast_fu_257_p1) + $signed(phi_mul_cast_reg_340));

assign tmp_9_fu_299_p1 = $unsigned(tmp_21_cast_fu_296_p1);

assign tmp_cast_fu_257_p1 = tmp_fu_252_p2;

assign tmp_fu_252_p2 = (tmp_7_reg_391 + tmp_19_cast_fu_248_p1);

always @ (posedge ap_clk) begin
    phi_mul_cast_reg_340[14] <= 1'b0;
    tmp_7_reg_391[1:0] <= 2'b00;
end

endmodule //pointwise_conv2d_fix
