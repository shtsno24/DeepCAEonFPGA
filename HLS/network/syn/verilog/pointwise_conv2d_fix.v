// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        output_depth,
        SeparableConv2D_0_m_s_address0,
        SeparableConv2D_0_m_s_ce0,
        SeparableConv2D_0_m_s_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_depth;
input  [15:0] input_height;
input  [15:0] input_width;
input  [15:0] output_depth;
output  [9:0] SeparableConv2D_0_m_s_address0;
output   SeparableConv2D_0_m_s_ce0;
input  [15:0] SeparableConv2D_0_m_s_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg SeparableConv2D_0_m_s_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_0_b_s_address0;
reg    SeparableConv2D_0_b_s_ce0;
wire   [12:0] SeparableConv2D_0_b_s_q0;
reg    SeparableConv2D_0_ar_ce0;
reg    SeparableConv2D_0_ar_we0;
reg   [15:0] SeparableConv2D_0_ar_d0;
wire   [31:0] tmp_1_fu_180_p1;
reg   [31:0] tmp_1_reg_383;
wire   [31:0] tmp_2_fu_184_p1;
reg   [31:0] tmp_2_reg_389;
wire   [31:0] next_mul2_fu_188_p2;
reg   [31:0] next_mul2_reg_395;
wire    ap_CS_fsm_state2;
wire   [15:0] out_d_1_fu_198_p2;
reg   [15:0] out_d_1_reg_403;
wire   [0:0] exitcond3_fu_193_p2;
wire  signed [15:0] SeparableConv2D_0_b_3_fu_209_p1;
reg  signed [15:0] SeparableConv2D_0_b_3_reg_413;
wire    ap_CS_fsm_state3;
wire  signed [14:0] tmp_6_fu_213_p1;
reg  signed [14:0] tmp_6_reg_418;
wire   [15:0] out_h_1_fu_222_p2;
reg   [15:0] out_h_1_reg_426;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_s_fu_228_p1;
reg   [31:0] tmp_s_reg_431;
wire   [0:0] exitcond2_fu_217_p2;
wire  signed [31:0] tmp_fu_232_p2;
reg  signed [31:0] tmp_reg_436;
wire   [31:0] tmp1_fu_238_p2;
reg   [31:0] tmp1_reg_441;
wire    ap_CS_fsm_state5;
wire   [15:0] out_w_1_fu_247_p2;
reg   [15:0] out_w_1_reg_449;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_3_fu_253_p1;
reg   [31:0] tmp_3_reg_454;
wire   [0:0] exitcond1_fu_242_p2;
reg   [13:0] SeparableConv2D_0_ar_1_reg_459;
wire   [15:0] in_d_1_fu_272_p2;
reg   [15:0] in_d_1_reg_467;
wire    ap_CS_fsm_state7;
wire   [31:0] next_mul_fu_278_p2;
reg   [31:0] next_mul_reg_472;
wire   [0:0] exitcond_fu_267_p2;
wire  signed [31:0] tmp2_fu_283_p2;
reg  signed [31:0] tmp2_reg_477;
wire   [14:0] p_tmp_s_fu_310_p3;
reg   [14:0] p_tmp_s_reg_482;
wire   [31:0] tmp3_fu_318_p2;
reg   [31:0] tmp3_reg_487;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg  signed [15:0] SeparableConv2D_0_m_2_reg_497;
wire    ap_CS_fsm_state10;
reg   [13:0] tmp_14_reg_502;
wire    ap_CS_fsm_state11;
wire   [15:0] tmp_16_fu_346_p2;
wire    ap_CS_fsm_state12;
reg   [15:0] out_d_reg_100;
reg   [31:0] phi_mul1_reg_111;
reg   [15:0] out_h_reg_123;
reg   [15:0] out_w_reg_134;
wire    ap_CS_fsm_state13;
reg   [15:0] SeparableConv2D_0_ar_2_reg_145;
reg   [15:0] in_d_reg_158;
reg   [31:0] phi_mul_reg_169;
wire   [63:0] tmp_9_fu_204_p1;
wire  signed [63:0] tmp_5_fu_262_p1;
wire  signed [63:0] tmp_12_fu_326_p1;
wire   [15:0] p_tmp_cast_fu_352_p1;
wire  signed [12:0] SeparableConv2D_0_b_3_fu_209_p0;
wire  signed [12:0] tmp_6_fu_213_p0;
wire   [15:0] tmp1_fu_238_p1;
wire   [31:0] tmp_4_fu_257_p2;
wire   [14:0] tmp_7_fu_288_p1;
wire   [15:0] tmp_8_fu_292_p2;
wire   [0:0] tmp_10_fu_302_p3;
wire   [14:0] tmp_8_cast_fu_297_p2;
wire   [15:0] tmp3_fu_318_p1;
wire   [31:0] tmp_11_fu_322_p2;
wire  signed [27:0] tmp_13_fu_356_p2;
wire  signed [15:0] tmp_15_fu_343_p1;
wire  signed [11:0] tmp_13_fu_356_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

pointwise_conv2d_fix_SeparableConv2D_0_b_s #(
    .DataWidth( 13 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_b_s_address0),
    .ce0(SeparableConv2D_0_b_s_ce0),
    .q0(SeparableConv2D_0_b_s_q0)
);

pointwise_conv2d_fix_SeparableConv2D_0_ar #(
    .DataWidth( 16 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
SeparableConv2D_0_ar_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_ar_1_reg_459),
    .ce0(SeparableConv2D_0_ar_ce0),
    .we0(SeparableConv2D_0_ar_we0),
    .d0(SeparableConv2D_0_ar_d0)
);

network_mul_mul_16s_12s_28_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
network_mul_mul_16s_12s_28_1_1_U13(
    .din0(SeparableConv2D_0_m_2_reg_497),
    .din1(tmp_13_fu_356_p1),
    .dout(tmp_13_fu_356_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        SeparableConv2D_0_ar_2_reg_145 <= tmp_16_fu_346_p2;
    end else if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        SeparableConv2D_0_ar_2_reg_145 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        in_d_reg_158 <= in_d_1_reg_467;
    end else if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        in_d_reg_158 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_217_p2 == 1'd1))) begin
        out_d_reg_100 <= out_d_1_reg_403;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_100 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_242_p2 == 1'd1))) begin
        out_h_reg_123 <= out_h_1_reg_426;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_123 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_134 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        out_w_reg_134 <= out_w_1_reg_449;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_217_p2 == 1'd1))) begin
        phi_mul1_reg_111 <= next_mul2_reg_395;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_111 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        phi_mul_reg_169 <= next_mul_reg_472;
    end else if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_mul_reg_169 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_242_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        SeparableConv2D_0_ar_1_reg_459 <= tmp_5_fu_262_p1;
        tmp_3_reg_454[15 : 0] <= tmp_3_fu_253_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        SeparableConv2D_0_b_3_reg_413 <= SeparableConv2D_0_b_3_fu_209_p1;
        tmp_6_reg_418 <= tmp_6_fu_213_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        SeparableConv2D_0_m_2_reg_497 <= SeparableConv2D_0_m_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_d_1_reg_467 <= in_d_1_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul2_reg_395 <= next_mul2_fu_188_p2;
        out_d_1_reg_403 <= out_d_1_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        next_mul_reg_472 <= next_mul_fu_278_p2;
        tmp2_reg_477 <= tmp2_fu_283_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_1_reg_426 <= out_h_1_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_w_1_reg_449 <= out_w_1_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_267_p2 == 1'd1))) begin
        p_tmp_s_reg_482 <= p_tmp_s_fu_310_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp1_reg_441 <= tmp1_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp3_reg_487 <= tmp3_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_14_reg_502 <= {{tmp_13_fu_356_p2[27:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_1_reg_383[15 : 0] <= tmp_1_fu_180_p1[15 : 0];
        tmp_2_reg_389[15 : 0] <= tmp_2_fu_184_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_217_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_reg_436 <= tmp_fu_232_p2;
        tmp_s_reg_431[15 : 0] <= tmp_s_fu_228_p1[15 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7))) begin
        SeparableConv2D_0_ar_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_ar_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        SeparableConv2D_0_ar_d0 = p_tmp_cast_fu_352_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        SeparableConv2D_0_ar_d0 = SeparableConv2D_0_ar_2_reg_145;
    end else begin
        SeparableConv2D_0_ar_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state7))) begin
        SeparableConv2D_0_ar_we0 = 1'b1;
    end else begin
        SeparableConv2D_0_ar_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_0_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        SeparableConv2D_0_m_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_m_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_217_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_242_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_267_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_0_b_3_fu_209_p0 = SeparableConv2D_0_b_s_q0;

assign SeparableConv2D_0_b_3_fu_209_p1 = SeparableConv2D_0_b_3_fu_209_p0;

assign SeparableConv2D_0_b_s_address0 = tmp_9_fu_204_p1;

assign SeparableConv2D_0_m_s_address0 = tmp_12_fu_326_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_242_p2 = ((out_w_reg_134 == input_width) ? 1'b1 : 1'b0);

assign exitcond2_fu_217_p2 = ((out_h_reg_123 == input_height) ? 1'b1 : 1'b0);

assign exitcond3_fu_193_p2 = ((out_d_reg_100 == output_depth) ? 1'b1 : 1'b0);

assign exitcond_fu_267_p2 = ((in_d_reg_158 == input_depth) ? 1'b1 : 1'b0);

assign in_d_1_fu_272_p2 = (in_d_reg_158 + 16'd1);

assign next_mul2_fu_188_p2 = (phi_mul1_reg_111 + tmp_1_reg_383);

assign next_mul_fu_278_p2 = (phi_mul_reg_169 + tmp_1_reg_383);

assign out_d_1_fu_198_p2 = (out_d_reg_100 + 16'd1);

assign out_h_1_fu_222_p2 = (out_h_reg_123 + 16'd1);

assign out_w_1_fu_247_p2 = (out_w_reg_134 + 16'd1);

assign p_tmp_cast_fu_352_p1 = p_tmp_s_reg_482;

assign p_tmp_s_fu_310_p3 = ((tmp_10_fu_302_p3[0:0] === 1'b1) ? 15'd0 : tmp_8_cast_fu_297_p2);

assign tmp1_fu_238_p1 = tmp_2_reg_389;

assign tmp1_fu_238_p2 = ($signed(tmp_reg_436) * $signed({{1'b0}, {tmp1_fu_238_p1}}));

assign tmp2_fu_283_p2 = (phi_mul_reg_169 + tmp_s_reg_431);

assign tmp3_fu_318_p1 = tmp_2_reg_389;

assign tmp3_fu_318_p2 = ($signed(tmp2_reg_477) * $signed({{1'b0}, {tmp3_fu_318_p1}}));

assign tmp_10_fu_302_p3 = tmp_8_fu_292_p2[32'd15];

assign tmp_11_fu_322_p2 = (tmp3_reg_487 + tmp_3_reg_454);

assign tmp_12_fu_326_p1 = $signed(tmp_11_fu_322_p2);

assign tmp_13_fu_356_p1 = 28'd268433686;

assign tmp_15_fu_343_p1 = $signed(tmp_14_reg_502);

assign tmp_16_fu_346_p2 = ($signed(SeparableConv2D_0_ar_2_reg_145) + $signed(tmp_15_fu_343_p1));

assign tmp_1_fu_180_p1 = input_height;

assign tmp_2_fu_184_p1 = input_width;

assign tmp_3_fu_253_p1 = out_w_reg_134;

assign tmp_4_fu_257_p2 = (tmp1_reg_441 + tmp_3_fu_253_p1);

assign tmp_5_fu_262_p1 = $signed(tmp_4_fu_257_p2);

assign tmp_6_fu_213_p0 = SeparableConv2D_0_b_s_q0;

assign tmp_6_fu_213_p1 = tmp_6_fu_213_p0;

assign tmp_7_fu_288_p1 = SeparableConv2D_0_ar_2_reg_145[14:0];

assign tmp_8_cast_fu_297_p2 = ($signed(tmp_7_fu_288_p1) + $signed(tmp_6_reg_418));

assign tmp_8_fu_292_p2 = ($signed(SeparableConv2D_0_b_3_reg_413) + $signed(SeparableConv2D_0_ar_2_reg_145));

assign tmp_9_fu_204_p1 = out_d_reg_100;

assign tmp_fu_232_p2 = (phi_mul1_reg_111 + tmp_s_fu_228_p1);

assign tmp_s_fu_228_p1 = out_h_reg_123;

always @ (posedge ap_clk) begin
    tmp_1_reg_383[31:16] <= 16'b0000000000000000;
    tmp_2_reg_389[31:16] <= 16'b0000000000000000;
    tmp_s_reg_431[31:16] <= 16'b0000000000000000;
    tmp_3_reg_454[31:16] <= 16'b0000000000000000;
end

endmodule //pointwise_conv2d_fix
