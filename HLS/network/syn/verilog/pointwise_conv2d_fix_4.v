// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_4_w_s_address0;
reg    SeparableConv2D_4_w_s_ce0;
wire   [14:0] SeparableConv2D_4_w_s_q0;
wire   [4:0] out_h_2_fu_149_p2;
reg   [4:0] out_h_2_reg_325;
wire    ap_CS_fsm_state2;
wire  signed [10:0] tmp_1_fu_179_p2;
reg  signed [10:0] tmp_1_reg_330;
wire   [0:0] exitcond2_fu_143_p2;
wire  signed [14:0] tmp_22_cast_fu_185_p1;
reg  signed [14:0] tmp_22_cast_reg_335;
wire   [4:0] out_w_2_fu_195_p2;
reg   [4:0] out_w_2_reg_343;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_23_cast4_fu_201_p1;
reg   [10:0] tmp_23_cast4_reg_348;
wire   [0:0] exitcond1_fu_189_p2;
wire   [13:0] tmp_23_cast_fu_205_p1;
reg   [13:0] tmp_23_cast_reg_353;
wire   [4:0] in_d_1_fu_215_p2;
reg   [4:0] in_d_1_reg_361;
wire    ap_CS_fsm_state4;
wire   [3:0] tmp_9_fu_221_p1;
reg   [3:0] tmp_9_reg_366;
wire   [0:0] exitcond_fu_209_p2;
wire   [13:0] next_mul_fu_225_p2;
reg   [13:0] next_mul_reg_371;
wire   [14:0] tmp_5_fu_240_p2;
reg   [14:0] tmp_5_reg_376;
wire    ap_CS_fsm_state5;
reg  signed [15:0] input_load_reg_391;
wire    ap_CS_fsm_state6;
reg  signed [14:0] SeparableConv2D_4_w_3_reg_396;
wire  signed [29:0] tmp_8_fu_316_p2;
reg  signed [29:0] tmp_8_reg_401;
wire    ap_CS_fsm_state7;
wire   [15:0] buffer_fu_310_p2;
wire    ap_CS_fsm_state8;
reg   [4:0] out_h_reg_87;
reg   [4:0] out_w_reg_98;
reg   [15:0] buffer1_reg_109;
reg   [4:0] in_d_reg_121;
reg   [13:0] phi_mul_reg_132;
wire   [63:0] tmp_3_fu_278_p1;
wire   [63:0] tmp_6_fu_286_p1;
wire   [63:0] tmp_7_fu_291_p1;
wire   [9:0] p_shl_fu_155_p3;
wire   [6:0] p_shl1_fu_167_p3;
wire   [10:0] p_shl_cast_fu_163_p1;
wire   [10:0] p_shl1_cast_fu_175_p1;
wire   [13:0] tmp_fu_231_p2;
wire   [14:0] tmp_cast_fu_236_p1;
wire   [0:0] tmp_4_fu_249_p3;
wire   [14:0] tmp_2_fu_245_p1;
wire   [14:0] buffer_1_fu_257_p3;
wire   [10:0] tmp1_fu_270_p2;
wire  signed [31:0] tmp_26_cast_fu_274_p1;
wire  signed [31:0] tmp_31_cast_fu_283_p1;
wire   [15:0] tmp_s_fu_301_p4;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

pointwise_conv2d_fix_4_SeparableConv2D_4_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_4_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_4_w_s_address0),
    .ce0(SeparableConv2D_4_w_s_ce0),
    .q0(SeparableConv2D_4_w_s_q0)
);

network_mul_mul_15s_16s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_15s_16s_30_1_1_U65(
    .din0(SeparableConv2D_4_w_3_reg_396),
    .din1(input_load_reg_391),
    .dout(tmp_8_fu_316_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer1_reg_109 <= buffer_fu_310_p2;
    end else if (((exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        buffer1_reg_109 <= 16'd54797;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_d_reg_121 <= in_d_1_reg_361;
    end else if (((exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_d_reg_121 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_h_reg_87 <= out_h_2_reg_325;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_reg_87 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_w_reg_98 <= 5'd0;
    end else if (((exitcond_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_reg_98 <= out_w_2_reg_343;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_132 <= next_mul_reg_371;
    end else if (((exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_132 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_4_w_3_reg_396 <= SeparableConv2D_4_w_s_q0;
        input_load_reg_391 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_d_1_reg_361 <= in_d_1_fu_215_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_209_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        next_mul_reg_371 <= next_mul_fu_225_p2;
        tmp_5_reg_376 <= tmp_5_fu_240_p2;
        tmp_9_reg_366 <= tmp_9_fu_221_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_2_reg_325 <= out_h_2_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_w_2_reg_343 <= out_w_2_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_143_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_330[10 : 2] <= tmp_1_fu_179_p2[10 : 2];
        tmp_22_cast_reg_335[14 : 2] <= tmp_22_cast_fu_185_p1[14 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_189_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_23_cast4_reg_348[4 : 0] <= tmp_23_cast4_fu_201_p1[4 : 0];
        tmp_23_cast_reg_353[4 : 0] <= tmp_23_cast_fu_205_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_8_reg_401 <= tmp_8_fu_316_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SeparableConv2D_4_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_4_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_143_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_189_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_209_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_4_w_s_address0 = tmp_7_fu_291_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign buffer_1_fu_257_p3 = ((tmp_4_fu_249_p3[0:0] === 1'b1) ? 15'd0 : tmp_2_fu_245_p1);

assign buffer_fu_310_p2 = (buffer1_reg_109 + tmp_s_fu_301_p4);

assign exitcond1_fu_189_p2 = ((out_w_reg_98 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond2_fu_143_p2 = ((out_h_reg_87 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond_fu_209_p2 = ((in_d_reg_121 == 5'd16) ? 1'b1 : 1'b0);

assign in_d_1_fu_215_p2 = (in_d_reg_121 + 5'd1);

assign input_r_address0 = tmp_6_fu_286_p1;

assign next_mul_fu_225_p2 = (14'd784 + phi_mul_reg_132);

assign out_h_2_fu_149_p2 = (out_h_reg_87 + 5'd1);

assign out_w_2_fu_195_p2 = (out_w_reg_98 + 5'd1);

assign output_r_address0 = tmp_3_fu_278_p1;

assign output_r_d0 = buffer_1_fu_257_p3;

assign p_shl1_cast_fu_175_p1 = p_shl1_fu_167_p3;

assign p_shl1_fu_167_p3 = {{out_h_reg_87}, {2'd0}};

assign p_shl_cast_fu_163_p1 = p_shl_fu_155_p3;

assign p_shl_fu_155_p3 = {{out_h_reg_87}, {5'd0}};

assign tmp1_fu_270_p2 = ($signed(tmp_1_reg_330) + $signed(tmp_23_cast4_reg_348));

assign tmp_1_fu_179_p2 = (p_shl_cast_fu_163_p1 - p_shl1_cast_fu_175_p1);

assign tmp_22_cast_fu_185_p1 = tmp_1_fu_179_p2;

assign tmp_23_cast4_fu_201_p1 = out_w_reg_98;

assign tmp_23_cast_fu_205_p1 = out_w_reg_98;

assign tmp_26_cast_fu_274_p1 = $signed(tmp1_fu_270_p2);

assign tmp_2_fu_245_p1 = buffer1_reg_109[14:0];

assign tmp_31_cast_fu_283_p1 = $signed(tmp_5_reg_376);

assign tmp_3_fu_278_p1 = $unsigned(tmp_26_cast_fu_274_p1);

assign tmp_4_fu_249_p3 = buffer1_reg_109[32'd15];

assign tmp_5_fu_240_p2 = ($signed(tmp_22_cast_reg_335) + $signed(tmp_cast_fu_236_p1));

assign tmp_6_fu_286_p1 = $unsigned(tmp_31_cast_fu_283_p1);

assign tmp_7_fu_291_p1 = tmp_9_reg_366;

assign tmp_9_fu_221_p1 = in_d_reg_121[3:0];

assign tmp_cast_fu_236_p1 = tmp_fu_231_p2;

assign tmp_fu_231_p2 = (tmp_23_cast_reg_353 + phi_mul_reg_132);

assign tmp_s_fu_301_p4 = {{tmp_8_reg_401[29:14]}};

always @ (posedge ap_clk) begin
    tmp_1_reg_330[1:0] <= 2'b00;
    tmp_22_cast_reg_335[1:0] <= 2'b00;
    tmp_23_cast4_reg_348[10:5] <= 6'b000000;
    tmp_23_cast_reg_353[13:5] <= 9'b000000000;
end

endmodule //pointwise_conv2d_fix_4
