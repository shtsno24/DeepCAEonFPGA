// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        Padding2D_4_array_address0,
        Padding2D_4_array_ce0,
        Padding2D_4_array_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_height;
input  [15:0] input_width;
input  [15:0] output_depth;
input  [15:0] output_height;
input  [15:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
input  [15:0] output_r_q0;
output  [13:0] Padding2D_4_array_address0;
output   Padding2D_4_array_ce0;
input  [15:0] Padding2D_4_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;
reg Padding2D_4_array_ce0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] SeparableConv2D_4_w_s_address0;
reg    SeparableConv2D_4_w_s_ce0;
wire   [14:0] SeparableConv2D_4_w_s_q0;
wire   [31:0] tmp_s_fu_198_p1;
reg   [31:0] tmp_s_reg_476;
wire   [31:0] tmp_111_fu_202_p1;
reg   [31:0] tmp_111_reg_481;
wire   [31:0] tmp_112_fu_206_p1;
reg   [31:0] tmp_112_reg_486;
wire   [31:0] tmp_113_fu_210_p1;
reg   [31:0] tmp_113_reg_491;
wire   [31:0] next_mul3_fu_214_p2;
reg   [31:0] next_mul3_reg_496;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul_fu_219_p2;
reg   [31:0] next_mul_reg_501;
wire   [15:0] out_d_4_fu_229_p2;
reg   [15:0] out_d_4_reg_509;
wire   [16:0] tmp_114_cast2_fu_235_p1;
reg   [16:0] tmp_114_cast2_reg_514;
wire   [0:0] exitcond4_fu_224_p2;
wire   [20:0] p_shl_cast_fu_247_p1;
reg   [20:0] p_shl_cast_reg_519;
wire   [15:0] out_h_4_fu_256_p2;
reg   [15:0] out_h_4_reg_527;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_fu_266_p2;
reg  signed [31:0] tmp_reg_532;
wire   [0:0] exitcond3_fu_251_p2;
wire   [16:0] tmp_119_cast_fu_272_p1;
reg   [16:0] tmp_119_cast_reg_537;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp1_fu_276_p2;
reg   [31:0] tmp1_reg_542;
wire   [15:0] out_w_4_fu_285_p2;
reg   [15:0] out_w_4_reg_550;
wire    ap_CS_fsm_state5;
wire   [16:0] tmp_120_cast_fu_295_p1;
reg   [16:0] tmp_120_cast_reg_555;
wire   [0:0] exitcond2_fu_280_p2;
reg   [13:0] output_addr11_reg_560;
wire   [1:0] k_h_1_fu_315_p2;
reg   [1:0] k_h_1_reg_568;
wire    ap_CS_fsm_state6;
wire  signed [31:0] tmp2_fu_360_p2;
reg  signed [31:0] tmp2_reg_573;
wire   [0:0] exitcond1_fu_309_p2;
wire   [20:0] tmp6_fu_366_p2;
reg   [20:0] tmp6_reg_578;
wire   [31:0] tmp3_fu_371_p2;
reg   [31:0] tmp3_reg_583;
wire    ap_CS_fsm_state7;
wire   [1:0] k_w_1_fu_381_p2;
reg   [1:0] k_w_1_reg_591;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond_fu_375_p2;
reg  signed [15:0] Padding2D_4_array_lo_reg_606;
wire    ap_CS_fsm_state9;
reg  signed [14:0] SeparableConv2D_4_w_2_reg_611;
reg   [15:0] tmp_135_reg_616;
wire    ap_CS_fsm_state10;
reg   [15:0] out_d_reg_118;
reg   [31:0] phi_mul_reg_129;
reg   [31:0] phi_mul2_reg_141;
reg   [15:0] out_h_reg_153;
reg   [15:0] out_w_reg_165;
reg   [1:0] k_h_reg_176;
reg   [1:0] k_w_reg_187;
wire    ap_CS_fsm_state11;
wire  signed [63:0] tmp_122_fu_304_p1;
wire  signed [63:0] tmp_130_fu_405_p1;
wire   [63:0] tmp_132_fu_428_p1;
wire   [15:0] tmp_136_fu_448_p2;
wire   [18:0] p_shl_fu_239_p3;
wire   [31:0] tmp_119_fu_262_p1;
wire   [15:0] tmp1_fu_276_p1;
wire   [31:0] tmp_120_fu_291_p1;
wire   [31:0] tmp_121_fu_299_p2;
wire   [3:0] p_shl2_fu_329_p3;
wire   [4:0] p_shl2_cast_fu_337_p1;
wire   [4:0] tmp_124_cast9_fu_325_p1;
wire   [4:0] tmp_125_fu_341_p2;
wire   [16:0] tmp_124_cast1_fu_321_p1;
wire   [16:0] tmp4_fu_351_p2;
wire   [31:0] tmp4_cast_fu_356_p1;
wire  signed [20:0] tmp_125_cast_fu_347_p1;
wire   [15:0] tmp3_fu_371_p0;
wire   [16:0] tmp_126_cast_fu_387_p1;
wire   [16:0] tmp5_fu_391_p2;
wire   [31:0] tmp5_cast_fu_396_p1;
wire   [31:0] tmp_129_fu_400_p2;
wire   [16:0] tmp7_fu_410_p2;
wire   [20:0] tmp7_cast_fu_415_p1;
wire   [20:0] tmp_131_fu_419_p2;
wire  signed [31:0] tmp_133_cast_fu_424_p1;
wire  signed [29:0] tmp_133_fu_454_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

depthwise_conv2d_fix_1_SeparableConv2D_4_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
SeparableConv2D_4_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_4_w_s_address0),
    .ce0(SeparableConv2D_4_w_s_ce0),
    .q0(SeparableConv2D_4_w_s_q0)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U132(
    .din0(Padding2D_4_array_lo_reg_606),
    .din1(SeparableConv2D_4_w_2_reg_611),
    .dout(tmp_133_fu_454_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_375_p2 == 1'd1))) begin
        k_h_reg_176 <= k_h_1_reg_568;
    end else if (((exitcond2_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_h_reg_176 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        k_w_reg_187 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        k_w_reg_187 <= k_w_1_reg_591;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_251_p2 == 1'd1))) begin
        out_d_reg_118 <= out_d_4_reg_509;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_118 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_280_p2 == 1'd1))) begin
        out_h_reg_153 <= out_h_4_reg_527;
    end else if (((exitcond4_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_h_reg_153 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_309_p2 == 1'd1))) begin
        out_w_reg_165 <= out_w_4_reg_550;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_165 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_251_p2 == 1'd1))) begin
        phi_mul2_reg_141 <= next_mul3_reg_496;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_141 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_251_p2 == 1'd1))) begin
        phi_mul_reg_129 <= next_mul_reg_501;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_129 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Padding2D_4_array_lo_reg_606 <= Padding2D_4_array_q0;
        SeparableConv2D_4_w_2_reg_611 <= SeparableConv2D_4_w_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_h_1_reg_568 <= k_h_1_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_w_1_reg_591 <= k_w_1_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul3_reg_496 <= next_mul3_fu_214_p2;
        next_mul_reg_501 <= next_mul_fu_219_p2;
        out_d_4_reg_509 <= out_d_4_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_4_reg_527 <= out_h_4_fu_256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_4_reg_550 <= out_w_4_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        output_addr11_reg_560 <= tmp_122_fu_304_p1;
        tmp_120_cast_reg_555[15 : 0] <= tmp_120_cast_fu_295_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_224_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_shl_cast_reg_519[18 : 3] <= p_shl_cast_fu_247_p1[18 : 3];
        tmp_114_cast2_reg_514[15 : 0] <= tmp_114_cast2_fu_235_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp1_reg_542 <= tmp1_fu_276_p2;
        tmp_119_cast_reg_537[15 : 0] <= tmp_119_cast_fu_272_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_309_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp2_reg_573 <= tmp2_fu_360_p2;
        tmp6_reg_578 <= tmp6_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp3_reg_583 <= tmp3_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_111_reg_481[15 : 0] <= tmp_111_fu_202_p1[15 : 0];
        tmp_112_reg_486[15 : 0] <= tmp_112_fu_206_p1[15 : 0];
        tmp_113_reg_491[15 : 0] <= tmp_113_fu_210_p1[15 : 0];
        tmp_s_reg_476[15 : 0] <= tmp_s_fu_198_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_135_reg_616 <= {{tmp_133_fu_454_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_251_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_reg_532 <= tmp_fu_266_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        Padding2D_4_array_ce0 = 1'b1;
    end else begin
        Padding2D_4_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        SeparableConv2D_4_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_4_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond4_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        output_r_address0 = output_addr11_reg_560;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_122_fu_304_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_d0 = tmp_136_fu_448_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((exitcond2_fu_280_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_224_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_251_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_280_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_309_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond_fu_375_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Padding2D_4_array_address0 = tmp_130_fu_405_p1;

assign SeparableConv2D_4_w_s_address0 = tmp_132_fu_428_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_309_p2 = ((k_h_reg_176 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_280_p2 = ((out_w_reg_165 == output_width) ? 1'b1 : 1'b0);

assign exitcond3_fu_251_p2 = ((out_h_reg_153 == output_height) ? 1'b1 : 1'b0);

assign exitcond4_fu_224_p2 = ((out_d_reg_118 == output_depth) ? 1'b1 : 1'b0);

assign exitcond_fu_375_p2 = ((k_w_reg_187 == 2'd3) ? 1'b1 : 1'b0);

assign k_h_1_fu_315_p2 = (k_h_reg_176 + 2'd1);

assign k_w_1_fu_381_p2 = (k_w_reg_187 + 2'd1);

assign next_mul3_fu_214_p2 = (phi_mul2_reg_141 + tmp_112_reg_486);

assign next_mul_fu_219_p2 = (phi_mul_reg_129 + tmp_s_reg_476);

assign out_d_4_fu_229_p2 = (out_d_reg_118 + 16'd1);

assign out_h_4_fu_256_p2 = (out_h_reg_153 + 16'd1);

assign out_w_4_fu_285_p2 = (out_w_reg_165 + 16'd1);

assign p_shl2_cast_fu_337_p1 = p_shl2_fu_329_p3;

assign p_shl2_fu_329_p3 = {{k_h_reg_176}, {2'd0}};

assign p_shl_cast_fu_247_p1 = p_shl_fu_239_p3;

assign p_shl_fu_239_p3 = {{out_d_reg_118}, {3'd0}};

assign tmp1_fu_276_p1 = tmp_111_reg_481;

assign tmp1_fu_276_p2 = ($signed(tmp_reg_532) * $signed({{1'b0}, {tmp1_fu_276_p1}}));

assign tmp2_fu_360_p2 = (phi_mul2_reg_141 + tmp4_cast_fu_356_p1);

assign tmp3_fu_371_p0 = tmp_113_reg_491;

assign tmp3_fu_371_p2 = ($signed({{1'b0}, {tmp3_fu_371_p0}}) * $signed(tmp2_reg_573));

assign tmp4_cast_fu_356_p1 = tmp4_fu_351_p2;

assign tmp4_fu_351_p2 = (tmp_124_cast1_fu_321_p1 + tmp_119_cast_reg_537);

assign tmp5_cast_fu_396_p1 = tmp5_fu_391_p2;

assign tmp5_fu_391_p2 = (tmp_120_cast_reg_555 + tmp_126_cast_fu_387_p1);

assign tmp6_fu_366_p2 = ($signed(tmp_125_cast_fu_347_p1) + $signed(p_shl_cast_reg_519));

assign tmp7_cast_fu_415_p1 = tmp7_fu_410_p2;

assign tmp7_fu_410_p2 = (tmp_114_cast2_reg_514 + tmp_126_cast_fu_387_p1);

assign tmp_111_fu_202_p1 = output_width;

assign tmp_112_fu_206_p1 = input_height;

assign tmp_113_fu_210_p1 = input_width;

assign tmp_114_cast2_fu_235_p1 = out_d_reg_118;

assign tmp_119_cast_fu_272_p1 = out_h_reg_153;

assign tmp_119_fu_262_p1 = out_h_reg_153;

assign tmp_120_cast_fu_295_p1 = out_w_reg_165;

assign tmp_120_fu_291_p1 = out_w_reg_165;

assign tmp_121_fu_299_p2 = (tmp1_reg_542 + tmp_120_fu_291_p1);

assign tmp_122_fu_304_p1 = $signed(tmp_121_fu_299_p2);

assign tmp_124_cast1_fu_321_p1 = k_h_reg_176;

assign tmp_124_cast9_fu_325_p1 = k_h_reg_176;

assign tmp_125_cast_fu_347_p1 = $signed(tmp_125_fu_341_p2);

assign tmp_125_fu_341_p2 = (p_shl2_cast_fu_337_p1 - tmp_124_cast9_fu_325_p1);

assign tmp_126_cast_fu_387_p1 = k_w_reg_187;

assign tmp_129_fu_400_p2 = (tmp5_cast_fu_396_p1 + tmp3_reg_583);

assign tmp_130_fu_405_p1 = $signed(tmp_129_fu_400_p2);

assign tmp_131_fu_419_p2 = (tmp7_cast_fu_415_p1 + tmp6_reg_578);

assign tmp_132_fu_428_p1 = $unsigned(tmp_133_cast_fu_424_p1);

assign tmp_133_cast_fu_424_p1 = $signed(tmp_131_fu_419_p2);

assign tmp_136_fu_448_p2 = (output_r_q0 + tmp_135_reg_616);

assign tmp_fu_266_p2 = (phi_mul_reg_129 + tmp_119_fu_262_p1);

assign tmp_s_fu_198_p1 = output_height;

always @ (posedge ap_clk) begin
    tmp_s_reg_476[31:16] <= 16'b0000000000000000;
    tmp_111_reg_481[31:16] <= 16'b0000000000000000;
    tmp_112_reg_486[31:16] <= 16'b0000000000000000;
    tmp_113_reg_491[31:16] <= 16'b0000000000000000;
    tmp_114_cast2_reg_514[16] <= 1'b0;
    p_shl_cast_reg_519[2:0] <= 3'b000;
    p_shl_cast_reg_519[20:19] <= 2'b00;
    tmp_119_cast_reg_537[16] <= 1'b0;
    tmp_120_cast_reg_555[16] <= 1'b0;
end

endmodule //depthwise_conv2d_fix_1
