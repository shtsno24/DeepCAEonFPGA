-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pointwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    SeparableConv2D_4_m_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    SeparableConv2D_4_m_s_ce0 : OUT STD_LOGIC;
    SeparableConv2D_4_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pointwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv16_E3EB : STD_LOGIC_VECTOR (15 downto 0) := "1110001111101011";
    constant ap_const_lv15_63EB : STD_LOGIC_VECTOR (14 downto 0) := "110001111101011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv30_3FFFE7C7 : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111110011111000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_d_2_fu_187_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_2_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_2_fu_198_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_2_reg_386 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_23_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_401 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal out_w_2_fu_223_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_2_reg_409 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_24_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_419 : STD_LOGIC_VECTOR (9 downto 0);
    signal in_d_1_fu_248_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_1_reg_427 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal next_mul_fu_254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal SeparableConv2D_4_m_2_reg_452 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_35_reg_457 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_36_fu_289_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal out_d_reg_89 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul1_reg_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_h_reg_112 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond3_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_123 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal output_load_1_reg_134 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_reg_147 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_tmp_cast_fu_326_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_214_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_264_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_331_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_7_fu_294_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_fu_298_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_310_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_cast_fu_304_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_tmp_s_fu_318_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_33_fu_331_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component network_mul_mul_16s_14s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_14s_30_1_1_U149 : component network_mul_mul_16s_14s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => SeparableConv2D_4_m_2_reg_452,
        din1 => tmp_33_fu_331_p1,
        dout => tmp_33_fu_331_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_d_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                in_d_reg_147 <= in_d_1_reg_427;
            elsif (((exitcond1_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_d_reg_147 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_d_reg_89_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_reg_89 <= out_d_2_reg_378;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_89 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_h_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_112 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_218_p2 = ap_const_lv1_1))) then 
                out_h_reg_112 <= out_h_2_reg_386;
            end if; 
        end if;
    end process;

    out_w_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_reg_123 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                out_w_reg_123 <= out_w_2_reg_409;
            end if; 
        end if;
    end process;

    output_load_1_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                output_load_1_reg_134 <= tmp_36_fu_289_p2;
            elsif (((exitcond1_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                output_load_1_reg_134 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul1_reg_100 <= next_mul2_reg_370;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_100 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                phi_mul_reg_158 <= next_mul_reg_432;
            elsif (((exitcond1_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul_reg_158 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                SeparableConv2D_4_m_2_reg_452 <= SeparableConv2D_4_m_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_d_1_reg_427 <= in_d_1_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul2_reg_370 <= next_mul2_fu_177_p2;
                out_d_2_reg_378 <= out_d_2_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                next_mul_reg_432 <= next_mul_fu_254_p2;
                tmp2_reg_437 <= tmp2_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_2_reg_386 <= out_h_2_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_2_reg_409 <= out_w_2_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                output_addr_reg_419 <= tmp_26_fu_238_p1(10 - 1 downto 0);
                    tmp_24_reg_414(15 downto 0) <= tmp_24_fu_229_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp1_reg_401 <= tmp1_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp3_reg_442 <= tmp3_fu_264_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_15_reg_364(15 downto 0) <= tmp_15_fu_173_p1(15 downto 0);
                    tmp_s_reg_358(15 downto 0) <= tmp_s_fu_169_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    tmp_23_reg_391(15 downto 0) <= tmp_23_fu_204_p1(15 downto 0);
                tmp_reg_396 <= tmp_fu_208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_35_reg_457 <= tmp_33_fu_331_p2(29 downto 14);
            end if;
        end if;
    end process;
    tmp_s_reg_358(31 downto 16) <= "0000000000000000";
    tmp_15_reg_364(31 downto 16) <= "0000000000000000";
    tmp_23_reg_391(31 downto 16) <= "0000000000000000";
    tmp_24_reg_414(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond2_fu_193_p2, ap_CS_fsm_state5, exitcond1_fu_218_p2, ap_CS_fsm_state6, exitcond_fu_243_p2, exitcond3_fu_182_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_182_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond2_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_218_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_243_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    SeparableConv2D_4_m_s_address0 <= tmp_32_fu_272_p1(14 - 1 downto 0);

    SeparableConv2D_4_m_s_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_4_m_s_ce0 <= ap_const_logic_1;
        else 
            SeparableConv2D_4_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_182_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_182_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond3_fu_182_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_182_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_218_p2 <= "1" when (out_w_reg_123 = input_width) else "0";
    exitcond2_fu_193_p2 <= "1" when (out_h_reg_112 = input_height) else "0";
    exitcond3_fu_182_p2 <= "1" when (out_d_reg_89 = output_depth) else "0";
    exitcond_fu_243_p2 <= "1" when (in_d_reg_147 = input_depth) else "0";
    in_d_1_fu_248_p2 <= std_logic_vector(unsigned(in_d_reg_147) + unsigned(ap_const_lv16_1));
    next_mul2_fu_177_p2 <= std_logic_vector(unsigned(phi_mul1_reg_100) + unsigned(tmp_s_reg_358));
    next_mul_fu_254_p2 <= std_logic_vector(unsigned(phi_mul_reg_158) + unsigned(tmp_s_reg_358));
    out_d_2_fu_187_p2 <= std_logic_vector(unsigned(out_d_reg_89) + unsigned(ap_const_lv16_1));
    out_h_2_fu_198_p2 <= std_logic_vector(unsigned(out_h_reg_112) + unsigned(ap_const_lv16_1));
    out_w_2_fu_223_p2 <= std_logic_vector(unsigned(out_w_reg_123) + unsigned(ap_const_lv16_1));
    output_r_address0 <= output_addr_reg_419;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12, output_load_1_reg_134, p_tmp_cast_fu_326_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_d0 <= p_tmp_cast_fu_326_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d0 <= output_load_1_reg_134;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_tmp_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_tmp_s_fu_318_p3),16));
    p_tmp_s_fu_318_p3 <= 
        ap_const_lv15_0 when (tmp_8_fu_310_p3(0) = '1') else 
        tmp_27_cast_fu_304_p2;
    tmp1_fu_214_p1 <= tmp_15_reg_364(16 - 1 downto 0);
    tmp1_fu_214_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_396) * signed('0' &tmp1_fu_214_p1))), 32));
    tmp2_fu_259_p2 <= std_logic_vector(unsigned(phi_mul_reg_158) + unsigned(tmp_23_reg_391));
    tmp3_fu_264_p1 <= tmp_15_reg_364(16 - 1 downto 0);
    tmp3_fu_264_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp2_reg_437) * signed('0' &tmp3_fu_264_p1))), 32));
    tmp_15_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    tmp_23_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_112),32));
    tmp_24_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_123),32));
    tmp_25_fu_233_p2 <= std_logic_vector(unsigned(tmp1_reg_401) + unsigned(tmp_24_fu_229_p1));
        tmp_26_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_233_p2),64));

    tmp_27_cast_fu_304_p2 <= std_logic_vector(signed(ap_const_lv15_63EB) + signed(tmp_7_fu_294_p1));
    tmp_27_fu_298_p2 <= std_logic_vector(signed(ap_const_lv16_E3EB) + signed(output_load_1_reg_134));
    tmp_31_fu_268_p2 <= std_logic_vector(unsigned(tmp3_reg_442) + unsigned(tmp_24_reg_414));
        tmp_32_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_268_p2),64));

    tmp_33_fu_331_p1 <= ap_const_lv30_3FFFE7C7(14 - 1 downto 0);
    tmp_36_fu_289_p2 <= std_logic_vector(unsigned(output_load_1_reg_134) + unsigned(tmp_35_reg_457));
    tmp_7_fu_294_p1 <= output_load_1_reg_134(15 - 1 downto 0);
    tmp_8_fu_310_p3 <= tmp_27_fu_298_p2(15 downto 15);
    tmp_fu_208_p2 <= std_logic_vector(unsigned(phi_mul1_reg_100) + unsigned(tmp_23_fu_204_p1));
    tmp_s_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
end behav;
