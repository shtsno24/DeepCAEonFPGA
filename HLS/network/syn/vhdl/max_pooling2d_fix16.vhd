-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    MaxPooling2D_1_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    MaxPooling2D_1_array_ce0 : OUT STD_LOGIC;
    MaxPooling2D_1_array_we0 : OUT STD_LOGIC;
    MaxPooling2D_1_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MaxPooling2D_1_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of max_pooling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_s_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_93_reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_427 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_d_3_fu_213_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_3_reg_435 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_fu_224_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_reg_443 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_cast_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_cast_reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp1_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_w_3_fu_261_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_3_reg_466 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_100_cast_fu_279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_cast_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal MaxPooling2D_1_array_1_reg_476 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_293_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_h_1_fu_303_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_h_1_reg_489 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp2_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_104_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal in_w_1_fu_342_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_1_reg_513 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_105_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_reg_518 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_reg_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul2_reg_125 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_h_reg_137 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond4_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_149 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_h_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_reg_171 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_102_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_110_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_111_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_112_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_fu_240_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_fu_252_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_100_fu_271_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_99_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_fu_324_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_332_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_109_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_fu_367_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_fu_371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_h_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_336_p2 = ap_const_lv1_1))) then 
                in_h_reg_160 <= in_h_1_reg_489;
            elsif (((exitcond2_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_h_reg_160 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    in_w_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                in_w_reg_171 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                in_w_reg_171 <= in_w_1_reg_513;
            end if; 
        end if;
    end process;

    out_d_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_reg_102 <= out_d_3_reg_435;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_102 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_h_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_137 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_256_p2 = ap_const_lv1_1))) then 
                out_h_reg_137 <= out_h_3_reg_443;
            end if; 
        end if;
    end process;

    out_w_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_297_p2 = ap_const_lv1_1))) then 
                out_w_reg_149 <= out_w_3_reg_466;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_reg_149 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul2_reg_125 <= next_mul3_reg_422;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_125 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_113 <= next_mul_reg_427;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_113 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                MaxPooling2D_1_array_1_reg_476 <= tmp_102_fu_288_p1(9 - 1 downto 0);
                    tmp_100_cast_reg_471(16 downto 1) <= tmp_100_cast_fu_279_p1(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_h_1_reg_489 <= in_h_1_fu_303_p2;
                tmp_26_reg_481 <= tmp_26_fu_293_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                in_w_1_reg_513 <= in_w_1_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_422 <= next_mul3_fu_198_p2;
                next_mul_reg_427 <= next_mul_fu_203_p2;
                out_d_3_reg_435 <= out_d_3_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_3_reg_443 <= out_h_3_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_3_reg_466 <= out_w_3_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp1_reg_458 <= tmp1_fu_252_p2;
                    tmp_98_cast_reg_453(16 downto 1) <= tmp_98_cast_fu_248_p1(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp2_reg_494 <= tmp2_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp3_reg_499 <= tmp3_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_104_reg_504 <= tmp_104_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_105_reg_518 <= tmp_105_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_91_reg_407(15 downto 0) <= tmp_91_fu_186_p1(15 downto 0);
                    tmp_92_reg_412(15 downto 0) <= tmp_92_fu_190_p1(15 downto 0);
                    tmp_93_reg_417(15 downto 0) <= tmp_93_fu_194_p1(15 downto 0);
                    tmp_s_reg_402(15 downto 0) <= tmp_s_fu_182_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_reg_448 <= tmp_fu_234_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_402(31 downto 16) <= "0000000000000000";
    tmp_91_reg_407(31 downto 16) <= "0000000000000000";
    tmp_92_reg_412(31 downto 16) <= "0000000000000000";
    tmp_93_reg_417(31 downto 16) <= "0000000000000000";
    tmp_98_cast_reg_453(0) <= '0';
    tmp_98_cast_reg_453(31 downto 17) <= "000000000000000";
    tmp_100_cast_reg_471(0) <= '0';
    tmp_100_cast_reg_471(31 downto 17) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_219_p2, ap_CS_fsm_state5, exitcond2_fu_256_p2, ap_CS_fsm_state6, exitcond1_fu_297_p2, ap_CS_fsm_state9, exitcond_fu_336_p2, exitcond4_fu_208_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_256_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond1_fu_297_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    MaxPooling2D_1_array_address0 <= MaxPooling2D_1_array_1_reg_476;

    MaxPooling2D_1_array_ce0_assign_proc : process(ap_CS_fsm_state9, tmp_105_reg_518, ap_CS_fsm_state10, tmp_112_fu_381_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_112_fu_381_p2 = ap_const_lv1_1) and (tmp_105_reg_518 = ap_const_lv1_1)) or ((tmp_105_reg_518 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            MaxPooling2D_1_array_ce0 <= ap_const_logic_1;
        else 
            MaxPooling2D_1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MaxPooling2D_1_array_d0 <= input_r_q0;

    MaxPooling2D_1_array_we0_assign_proc : process(tmp_105_reg_518, ap_CS_fsm_state10, tmp_112_fu_381_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_112_fu_381_p2 = ap_const_lv1_1) and (tmp_105_reg_518 = ap_const_lv1_1)) or ((tmp_105_reg_518 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            MaxPooling2D_1_array_we0 <= ap_const_logic_1;
        else 
            MaxPooling2D_1_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_208_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_208_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_208_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_208_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_297_p2 <= "1" when (in_h_reg_160 = ap_const_lv2_2) else "0";
    exitcond2_fu_256_p2 <= "1" when (out_w_reg_149 = output_width) else "0";
    exitcond3_fu_219_p2 <= "1" when (out_h_reg_137 = output_height) else "0";
    exitcond4_fu_208_p2 <= "1" when (out_d_reg_102 = output_depth) else "0";
    exitcond_fu_336_p2 <= "1" when (in_w_reg_171 = ap_const_lv2_2) else "0";
    in_h_1_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_h_reg_160));
    in_w_1_fu_342_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_w_reg_171));

    input_r_address0_assign_proc : process(ap_CS_fsm_state9, tmp_105_fu_348_p2, exitcond_fu_336_p2, tmp_110_fu_362_p1, tmp_111_fu_376_p1)
    begin
        if (((exitcond_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
            if ((tmp_105_fu_348_p2 = ap_const_lv1_1)) then 
                input_r_address0 <= tmp_111_fu_376_p1(11 - 1 downto 0);
            elsif ((tmp_105_fu_348_p2 = ap_const_lv1_0)) then 
                input_r_address0 <= tmp_110_fu_362_p1(11 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state9, tmp_105_fu_348_p2, exitcond_fu_336_p2)
    begin
        if ((((exitcond_fu_336_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_105_fu_348_p2 = ap_const_lv1_1)) or ((exitcond_fu_336_p2 = ap_const_lv1_0) and (tmp_105_fu_348_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_198_p2 <= std_logic_vector(unsigned(phi_mul2_reg_125) + unsigned(tmp_92_reg_412));
    next_mul_fu_203_p2 <= std_logic_vector(unsigned(phi_mul_reg_113) + unsigned(tmp_s_reg_402));
    out_d_3_fu_213_p2 <= std_logic_vector(unsigned(out_d_reg_102) + unsigned(ap_const_lv16_1));
    out_h_3_fu_224_p2 <= std_logic_vector(unsigned(out_h_reg_137) + unsigned(ap_const_lv16_1));
    out_w_3_fu_261_p2 <= std_logic_vector(unsigned(out_w_reg_149) + unsigned(ap_const_lv16_1));
    tmp1_fu_252_p0 <= tmp_93_reg_417(16 - 1 downto 0);
    tmp1_fu_252_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp1_fu_252_p0) * signed(tmp_reg_448))), 32));
    tmp2_fu_319_p2 <= std_logic_vector(unsigned(tmp4_fu_313_p2) + unsigned(tmp_98_cast_reg_453));
    tmp3_fu_324_p1 <= tmp_91_reg_407(16 - 1 downto 0);
    tmp3_fu_324_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp2_reg_494) * signed('0' &tmp3_fu_324_p1))), 32));
    tmp4_fu_313_p2 <= std_logic_vector(unsigned(phi_mul_reg_113) + unsigned(tmp_103_fu_309_p1));
    tmp_100_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_271_p3),32));
    tmp_100_fu_271_p3 <= (out_w_reg_149 & ap_const_lv1_0);
    tmp_101_fu_283_p2 <= std_logic_vector(unsigned(tmp_99_fu_267_p1) + unsigned(tmp1_reg_458));
        tmp_102_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_101_fu_283_p2),64));

    tmp_103_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_h_reg_160),32));
    tmp_104_fu_328_p2 <= std_logic_vector(unsigned(tmp3_reg_499) + unsigned(tmp_100_cast_reg_471));
    tmp_105_fu_348_p2 <= (tmp_27_fu_332_p1 or tmp_26_reg_481);
    tmp_106_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_reg_171),32));
    tmp_107_fu_371_p2 <= std_logic_vector(unsigned(tmp_104_reg_504) + unsigned(tmp_106_fu_367_p1));
    tmp_108_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_reg_171),32));
    tmp_109_fu_357_p2 <= std_logic_vector(unsigned(tmp_104_reg_504) + unsigned(tmp_108_fu_353_p1));
        tmp_110_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_109_fu_357_p2),64));

        tmp_111_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_107_fu_371_p2),64));

    tmp_112_fu_381_p2 <= "1" when (signed(MaxPooling2D_1_array_q0) < signed(input_r_q0)) else "0";
    tmp_26_fu_293_p1 <= in_h_reg_160(1 - 1 downto 0);
    tmp_27_fu_332_p1 <= in_w_reg_171(1 - 1 downto 0);
    tmp_91_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    tmp_92_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),32));
    tmp_93_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),32));
    tmp_97_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_137),32));
    tmp_98_cast_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_240_p3),32));
    tmp_98_fu_240_p3 <= (out_h_reg_137 & ap_const_lv1_0);
    tmp_99_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_149),32));
    tmp_fu_234_p2 <= std_logic_vector(unsigned(tmp_97_fu_230_p1) + unsigned(phi_mul2_reg_125));
    tmp_s_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
end behav;
