-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (5 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of max_pooling2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_cast_fu_211_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_442 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_73_cast_fu_215_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_73_cast_reg_447 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_74_cast_fu_219_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_74_cast_reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_cast_fu_223_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_75_cast_reg_457 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul3_fu_227_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul3_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_232_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_467 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_3_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_3_reg_475 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_3_fu_261_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_3_reg_483 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_80_cast_fu_279_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_80_cast_reg_488 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_293_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_reg_493 : STD_LOGIC_VECTOR (11 downto 0);
    signal out_w_3_fu_307_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_3_reg_501 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_83_cast_fu_325_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_83_cast_reg_506 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond2_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_reg_511 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_28_fu_339_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal in_h_1_fu_349_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_h_1_reg_524 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_420_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_52_reg_529 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_w_1_fu_375_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_1_reg_538 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_53_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_d_reg_120 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_131 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_143 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_reg_155 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal in_h_reg_177 : STD_LOGIC_VECTOR (1 downto 0);
    signal in_w_reg_188 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_51_fu_334_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_width_cast3_fu_199_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal output_height_cast2_fu_203_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_width_cast_fu_207_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_height_cast2_fu_203_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_width_cast3_fu_199_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_d_cast_fu_237_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal out_h_cast_fu_252_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond3_fu_256_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_271_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_79_cast1_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_283_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_293_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_293_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_w_cast_fu_298_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_302_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_317_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_82_cast9_fu_313_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_50_fu_329_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_86_cast_fu_355_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_365_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_90_cast_fu_386_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_57_fu_390_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_57_fu_390_p2 : signal is "no";
    signal tmp_93_cast_fu_400_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_54_fu_404_p2 : STD_LOGIC_VECTOR (13 downto 0);
    attribute use_dsp48 of tmp_54_fu_404_p2 : signal is "no";
    signal grp_fu_420_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_420_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_420_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_420_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp1_fu_293_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component network_ama_addmuladd_9ns_5ns_7ns_5ns_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        din3 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    network_ama_addmuladd_9ns_5ns_7ns_5ns_14_1_1_U17 : component network_ama_addmuladd_9ns_5ns_7ns_5ns_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        din2_WIDTH => 7,
        din3_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_420_p0,
        din1 => grp_fu_420_p1,
        din2 => grp_fu_420_p2,
        din3 => grp_fu_420_p3,
        dout => grp_fu_420_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_h_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_369_p2 = ap_const_lv1_1))) then 
                in_h_reg_177 <= in_h_1_reg_524;
            elsif (((exitcond2_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                in_h_reg_177 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    in_w_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                in_w_reg_188 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                in_w_reg_188 <= in_w_1_reg_538;
            end if; 
        end if;
    end process;

    out_d_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_d_reg_120 <= out_d_3_reg_475;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_120 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_h_reg_155 <= ap_const_lv4_0;
            elsif (((exitcond2_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                out_h_reg_155 <= out_h_3_reg_483;
            end if; 
        end if;
    end process;

    out_w_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_343_p2 = ap_const_lv1_1))) then 
                out_w_reg_166 <= out_w_3_reg_501;
            elsif (((exitcond3_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                out_w_reg_166 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul2_reg_143 <= next_mul3_reg_462;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_143 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_131 <= next_mul_reg_467;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_131 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                in_h_1_reg_524 <= in_h_1_fu_349_p2;
                tmp_28_reg_516 <= tmp_28_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_w_1_reg_538 <= in_w_1_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_462 <= next_mul3_fu_227_p2;
                next_mul_reg_467 <= next_mul_fu_232_p2;
                out_d_3_reg_475 <= out_d_3_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_3_reg_483 <= out_h_3_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_w_3_reg_501 <= out_w_3_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_302_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    output_addr_reg_511(11 downto 0) <= tmp_51_fu_334_p1(14 - 1 downto 0)(11 downto 0);
                    tmp_83_cast_reg_506(4 downto 1) <= tmp_83_cast_fu_325_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_256_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp1_reg_493 <= tmp1_fu_293_p2;
                    tmp_80_cast_reg_488(4 downto 1) <= tmp_80_cast_fu_279_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_343_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_52_reg_529 <= grp_fu_420_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_53_reg_543 <= tmp_53_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_73_cast_reg_447(6 downto 0) <= tmp_73_cast_fu_215_p1(6 downto 0);
                    tmp_74_cast_reg_452(5 downto 0) <= tmp_74_cast_fu_219_p1(5 downto 0);
                    tmp_75_cast_reg_457(5 downto 0) <= tmp_75_cast_fu_223_p1(5 downto 0);
                    tmp_cast_reg_442(6 downto 0) <= tmp_cast_fu_211_p1(6 downto 0);
            end if;
        end if;
    end process;
    tmp_cast_reg_442(8 downto 7) <= "00";
    tmp_73_cast_reg_447(13 downto 7) <= "0000000";
    tmp_74_cast_reg_452(7 downto 6) <= "00";
    tmp_75_cast_reg_457(11 downto 6) <= "000000";
    tmp_80_cast_reg_488(0) <= '0';
    tmp_80_cast_reg_488(8 downto 5) <= "0000";
    tmp_83_cast_reg_506(0) <= '0';
    tmp_83_cast_reg_506(13 downto 5) <= "000000000";
    output_addr_reg_511(13 downto 12) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond3_fu_256_p2, ap_CS_fsm_state4, exitcond2_fu_302_p2, ap_CS_fsm_state5, exitcond1_fu_343_p2, ap_CS_fsm_state6, exitcond_fu_369_p2, exitcond4_fu_241_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_241_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_256_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_302_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_343_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_369_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_241_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_241_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_241_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_241_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_343_p2 <= "1" when (in_h_reg_177 = ap_const_lv2_2) else "0";
    exitcond2_fu_302_p1 <= output_width;
    exitcond2_fu_302_p2 <= "1" when (out_w_cast_fu_298_p1 = exitcond2_fu_302_p1) else "0";
    exitcond3_fu_256_p1 <= output_height;
    exitcond3_fu_256_p2 <= "1" when (out_h_cast_fu_252_p1 = exitcond3_fu_256_p1) else "0";
    exitcond4_fu_241_p2 <= "1" when (out_d_cast_fu_237_p1 = output_depth) else "0";
    exitcond_fu_369_p2 <= "1" when (in_w_reg_188 = ap_const_lv2_2) else "0";
    grp_fu_420_p0 <= std_logic_vector(unsigned(phi_mul_reg_131) + unsigned(tmp_86_cast_fu_355_p1));
    grp_fu_420_p1 <= tmp_80_cast_reg_488(5 - 1 downto 0);
    grp_fu_420_p2 <= tmp_73_cast_reg_447(7 - 1 downto 0);
    grp_fu_420_p3 <= tmp_83_cast_reg_506(5 - 1 downto 0);
    in_h_1_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_h_reg_177));
    in_w_1_fu_375_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(in_w_reg_188));

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, tmp_53_fu_381_p2, exitcond_fu_369_p2, tmp_58_fu_395_p1, tmp_55_fu_409_p1)
    begin
        if (((exitcond_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
            if ((tmp_53_fu_381_p2 = ap_const_lv1_1)) then 
                input_r_address0 <= tmp_55_fu_409_p1(14 - 1 downto 0);
            elsif ((tmp_53_fu_381_p2 = ap_const_lv1_0)) then 
                input_r_address0 <= tmp_58_fu_395_p1(14 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, tmp_53_fu_381_p2, exitcond_fu_369_p2)
    begin
        if ((((exitcond_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_53_fu_381_p2 = ap_const_lv1_1)) or ((exitcond_fu_369_p2 = ap_const_lv1_0) and (tmp_53_fu_381_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        input_width_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));

    next_mul3_fu_227_p2 <= std_logic_vector(unsigned(phi_mul2_reg_143) + unsigned(tmp_74_cast_reg_452));
    next_mul_fu_232_p2 <= std_logic_vector(unsigned(phi_mul_reg_131) + unsigned(tmp_cast_reg_442));
    out_d_3_fu_246_p2 <= std_logic_vector(unsigned(out_d_reg_120) + unsigned(ap_const_lv5_1));
    out_d_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_120),6));
    out_h_3_fu_261_p2 <= std_logic_vector(unsigned(out_h_reg_155) + unsigned(ap_const_lv4_1));
    out_h_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_155),5));
    out_w_3_fu_307_p2 <= std_logic_vector(unsigned(out_w_reg_166) + unsigned(ap_const_lv4_1));
    out_w_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_166),5));
    output_height_cast2_fu_203_p0 <= output_height;
        output_height_cast2_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_height_cast2_fu_203_p0),6));

    output_r_address0 <= output_addr_reg_511;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state6, tmp_53_reg_543, ap_CS_fsm_state7, tmp_56_fu_414_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_56_fu_414_p2 = ap_const_lv1_1) and (tmp_53_reg_543 = ap_const_lv1_1)) or ((tmp_53_reg_543 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= input_r_q0;

    output_r_we0_assign_proc : process(tmp_53_reg_543, ap_CS_fsm_state7, tmp_56_fu_414_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_56_fu_414_p2 = ap_const_lv1_1) and (tmp_53_reg_543 = ap_const_lv1_1)) or ((tmp_53_reg_543 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast3_fu_199_p0 <= output_width;
        output_width_cast3_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(output_width_cast3_fu_199_p0),6));

    tmp1_fu_293_p0 <= tmp_75_cast_reg_457(6 - 1 downto 0);
    tmp1_fu_293_p1 <= tmp1_fu_293_p10(8 - 1 downto 0);
    tmp1_fu_293_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_283_p2),12));
    tmp1_fu_293_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_293_p0) * unsigned(tmp1_fu_293_p1), 12));
    tmp_28_fu_339_p1 <= in_h_reg_177(1 - 1 downto 0);
    tmp_29_fu_365_p1 <= in_w_reg_188(1 - 1 downto 0);
    tmp_49_fu_317_p3 <= (out_w_reg_166 & ap_const_lv1_0);
    tmp_50_fu_329_p2 <= std_logic_vector(unsigned(tmp_82_cast9_fu_313_p1) + unsigned(tmp1_reg_493));
    tmp_51_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_50_fu_329_p2),64));
    tmp_53_fu_381_p2 <= (tmp_29_fu_365_p1 or tmp_28_reg_516);
    tmp_54_fu_404_p2 <= std_logic_vector(unsigned(tmp_52_reg_529) + unsigned(tmp_93_cast_fu_400_p1));
    tmp_55_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_404_p2),64));
    tmp_56_fu_414_p2 <= "1" when (signed(output_r_q0) < signed(input_r_q0)) else "0";
    tmp_57_fu_390_p2 <= std_logic_vector(unsigned(tmp_52_reg_529) + unsigned(tmp_90_cast_fu_386_p1));
    tmp_58_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_390_p2),64));
    tmp_73_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_207_p1),14));
    tmp_74_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height_cast2_fu_203_p1),8));
    tmp_75_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width_cast3_fu_199_p1),12));
    tmp_79_cast1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_155),8));
    tmp_80_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_271_p3),9));
    tmp_82_cast9_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_166),12));
    tmp_83_cast_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_317_p3),14));
    tmp_86_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_h_reg_177),9));
    tmp_90_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_reg_188),14));
    tmp_93_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_reg_188),14));
    tmp_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    tmp_fu_283_p2 <= std_logic_vector(unsigned(tmp_79_cast1_fu_267_p1) + unsigned(phi_mul2_reg_143));
    tmp_s_fu_271_p3 <= (out_h_reg_155 & ap_const_lv1_0);
end behav;
