-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity padding2d_fix16_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of padding2d_fix16_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_41_cast_fu_176_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_41_cast_reg_388 : STD_LOGIC_VECTOR (20 downto 0);
    signal width_1_fu_186_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_37_fu_378_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_37_reg_405 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond9_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_241_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp3_reg_412 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_52_cast_fu_247_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_52_cast_reg_417 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond8_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal width_2_fu_281_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal width_2_reg_430 : STD_LOGIC_VECTOR (4 downto 0);
    signal phitmp_fu_320_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond7_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal height_1_fu_326_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_fu_383_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_39_reg_451 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond6_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal width_4_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal phitmp5_fu_372_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal width_reg_108 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal height1_reg_119 : STD_LOGIC_VECTOR (4 downto 0);
    signal width3_reg_131 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal width_3_reg_142 : STD_LOGIC_VECTOR (2 downto 0);
    signal height_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal width6_reg_165 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_291_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp2_fu_211_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_fu_217_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_fu_229_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_225_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_237_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp4_fu_257_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp4_cast_fu_263_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_fu_267_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_59_cast_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_287_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_42_fu_287_p2 : signal is "no";
    signal width_3_cast_fu_296_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_64_cast_fu_300_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_45_fu_310_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 of tmp_45_fu_310_p2 : signal is "no";
    signal height_cast_fu_332_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_63_cast_fu_346_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp5_fu_362_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 of tmp5_fu_362_p2 : signal is "no";
    signal tmp_37_fu_378_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_37_fu_378_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_383_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_fu_383_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_37_fu_378_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_39_fu_383_p00 : STD_LOGIC_VECTOR (20 downto 0);

    component network_mul_mul_5ns_16ns_21_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;



begin
    network_mul_mul_5ns_16ns_21_1_1_U1 : component network_mul_mul_5ns_16ns_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_37_fu_378_p0,
        din1 => tmp_37_fu_378_p1,
        dout => tmp_37_fu_378_p2);

    network_mul_mul_5ns_16ns_21_1_1_U2 : component network_mul_mul_5ns_16ns_21_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        din0 => tmp_39_fu_383_p0,
        din1 => tmp_39_fu_383_p1,
        dout => tmp_39_fu_383_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    height1_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                height1_reg_119 <= ap_const_lv5_1;
            elsif (((exitcond7_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                height1_reg_119 <= height_1_fu_326_p2;
            end if; 
        end if;
    end process;

    height_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                height_reg_153 <= ap_const_lv3_5;
            elsif (((exitcond_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                height_reg_153 <= phitmp5_fu_372_p2;
            end if; 
        end if;
    end process;

    width3_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                width3_reg_131 <= ap_const_lv5_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                width3_reg_131 <= width_2_reg_430;
            end if; 
        end if;
    end process;

    width6_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                width6_reg_165 <= ap_const_lv5_0;
            elsif (((exitcond_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                width6_reg_165 <= width_4_fu_356_p2;
            end if; 
        end if;
    end process;

    width_3_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                width_3_reg_142 <= ap_const_lv3_5;
            elsif (((exitcond7_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                width_3_reg_142 <= phitmp_fu_320_p2;
            end if; 
        end if;
    end process;

    width_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                width_reg_108 <= ap_const_lv5_0;
            elsif (((exitcond1_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                width_reg_108 <= width_1_fu_186_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    tmp3_reg_412(10 downto 2) <= tmp3_fu_241_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_37_reg_405 <= tmp_37_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_39_reg_451 <= tmp_39_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_41_cast_reg_388(15 downto 0) <= tmp_41_cast_fu_176_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    tmp_52_cast_reg_417(4 downto 0) <= tmp_52_cast_fu_247_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                width_2_reg_430 <= width_2_fu_281_p2;
            end if;
        end if;
    end process;
    tmp_41_cast_reg_388(20 downto 16) <= "00000";
    tmp3_reg_412(1 downto 0) <= "00";
    tmp_52_cast_reg_417(20 downto 5) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond9_fu_197_p2, ap_CS_fsm_state5, exitcond8_fu_251_p2, ap_CS_fsm_state7, exitcond7_fu_304_p2, ap_CS_fsm_state8, exitcond6_fu_340_p2, ap_CS_fsm_state9, exitcond_fu_350_p2, exitcond1_fu_180_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond9_fu_197_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond8_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((exitcond7_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((exitcond6_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((exitcond_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8, exitcond6_fu_340_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond6_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, exitcond6_fu_340_p2)
    begin
        if (((exitcond6_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_180_p2 <= "1" when (width_reg_108 = ap_const_lv5_1E) else "0";
    exitcond6_fu_340_p2 <= "1" when (height_reg_153 = ap_const_lv3_6) else "0";
    exitcond7_fu_304_p2 <= "1" when (width_3_reg_142 = ap_const_lv3_6) else "0";
    exitcond8_fu_251_p2 <= "1" when (width3_reg_131 = ap_const_lv5_1D) else "0";
    exitcond9_fu_197_p2 <= "1" when (height1_reg_119 = ap_const_lv5_1D) else "0";
    exitcond_fu_350_p2 <= "1" when (width6_reg_165 = ap_const_lv5_1E) else "0";
    height_1_fu_326_p2 <= std_logic_vector(unsigned(height1_reg_119) + unsigned(ap_const_lv5_1));
        height_cast_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(height_reg_153),5));

    input_0_address0 <= tmp_41_fu_276_p1(10 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6, tmp_s_fu_192_p1, tmp_38_fu_207_p1, tmp_43_fu_291_p1, tmp_46_fu_315_p1, tmp_44_fu_367_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= tmp_44_fu_367_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_r_address0 <= tmp_46_fu_315_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= tmp_43_fu_291_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_r_address0 <= tmp_38_fu_207_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= tmp_s_fu_192_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(input_0_q0, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d0 <= input_0_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state7, exitcond7_fu_304_p2, ap_CS_fsm_state9, exitcond_fu_350_p2, exitcond1_fu_180_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((exitcond7_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((exitcond1_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((exitcond_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl3_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl3_fu_217_p3),11));
    p_shl3_fu_217_p3 <= (tmp2_fu_211_p2 & ap_const_lv5_0);
    p_shl4_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl4_fu_229_p3),11));
    p_shl4_fu_229_p3 <= (tmp2_fu_211_p2 & ap_const_lv2_0);
    phitmp5_fu_372_p2 <= std_logic_vector(signed(height_reg_153) + signed(ap_const_lv3_1));
    phitmp_fu_320_p2 <= std_logic_vector(signed(width_3_reg_142) + signed(ap_const_lv3_1));
    tmp2_fu_211_p2 <= std_logic_vector(unsigned(height1_reg_119) + unsigned(ap_const_lv5_1F));
    tmp3_fu_241_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_225_p1) - unsigned(p_shl4_cast_fu_237_p1));
    tmp4_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_257_p2),11));
    tmp4_fu_257_p2 <= std_logic_vector(unsigned(width3_reg_131) + unsigned(ap_const_lv5_1F));
    tmp5_fu_362_p2 <= std_logic_vector(unsigned(tmp_39_reg_451) + unsigned(tmp_63_cast_fu_346_p1));
    tmp_37_fu_378_p0 <= tmp_37_fu_378_p00(5 - 1 downto 0);
    tmp_37_fu_378_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height1_reg_119),21));
    tmp_37_fu_378_p1 <= tmp_41_cast_reg_388(16 - 1 downto 0);
    tmp_38_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_reg_405),64));
    tmp_39_fu_383_p0 <= tmp_39_fu_383_p00(5 - 1 downto 0);
    tmp_39_fu_383_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_cast_fu_332_p1),21));
    tmp_39_fu_383_p1 <= tmp_41_cast_reg_388(16 - 1 downto 0);
    tmp_40_fu_267_p2 <= std_logic_vector(unsigned(tmp4_cast_fu_263_p1) + unsigned(tmp3_reg_412));
    tmp_41_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),21));
    tmp_41_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_cast_fu_272_p1),64));
    tmp_42_fu_287_p2 <= std_logic_vector(unsigned(tmp_37_reg_405) + unsigned(tmp_52_cast_reg_417));
    tmp_43_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_287_p2),64));
    tmp_44_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_362_p2),64));
    tmp_45_fu_310_p2 <= std_logic_vector(unsigned(tmp_37_reg_405) + unsigned(tmp_64_cast_fu_300_p1));
    tmp_46_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_310_p2),64));
    tmp_52_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width3_reg_131),21));
        tmp_59_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_40_fu_267_p2),32));

    tmp_63_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width6_reg_165),21));
    tmp_64_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_3_cast_fu_296_p1),21));
    tmp_s_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_reg_108),64));
    width_1_fu_186_p2 <= std_logic_vector(unsigned(width_reg_108) + unsigned(ap_const_lv5_1));
    width_2_fu_281_p2 <= std_logic_vector(unsigned(width3_reg_131) + unsigned(ap_const_lv5_1));
        width_3_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(width_3_reg_142),5));

    width_4_fu_356_p2 <= std_logic_vector(unsigned(width6_reg_165) + unsigned(ap_const_lv5_1));
end behav;
