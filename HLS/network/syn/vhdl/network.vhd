-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity network is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_data_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    input_data_TVALID : IN STD_LOGIC;
    input_data_TREADY : OUT STD_LOGIC;
    input_data_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    input_data_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    input_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_data_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_data_TVALID : OUT STD_LOGIC;
    output_data_TREADY : IN STD_LOGIC;
    output_data_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_data_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "network,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.585000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=21,HLS_SYN_DSP=10,HLS_SYN_FF=1814,HLS_SYN_LUT=3162,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_data_V_data_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_vld_in : STD_LOGIC;
    signal input_data_V_data_V_0_vld_out : STD_LOGIC;
    signal input_data_V_data_V_0_ack_in : STD_LOGIC;
    signal input_data_V_data_V_0_ack_out : STD_LOGIC;
    signal input_data_V_data_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_data_V_0_sel : STD_LOGIC;
    signal input_data_V_data_V_0_load_A : STD_LOGIC;
    signal input_data_V_data_V_0_load_B : STD_LOGIC;
    signal input_data_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_keep_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_keep_V_0_vld_in : STD_LOGIC;
    signal input_data_V_keep_V_0_vld_out : STD_LOGIC;
    signal input_data_V_keep_V_0_ack_in : STD_LOGIC;
    signal input_data_V_keep_V_0_ack_out : STD_LOGIC;
    signal input_data_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_keep_V_0_sel : STD_LOGIC;
    signal input_data_V_keep_V_0_load_A : STD_LOGIC;
    signal input_data_V_keep_V_0_load_B : STD_LOGIC;
    signal input_data_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_strb_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_strb_V_0_vld_in : STD_LOGIC;
    signal input_data_V_strb_V_0_vld_out : STD_LOGIC;
    signal input_data_V_strb_V_0_ack_in : STD_LOGIC;
    signal input_data_V_strb_V_0_ack_out : STD_LOGIC;
    signal input_data_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_strb_V_0_sel : STD_LOGIC;
    signal input_data_V_strb_V_0_load_A : STD_LOGIC;
    signal input_data_V_strb_V_0_load_B : STD_LOGIC;
    signal input_data_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_id_V_0_vld_in : STD_LOGIC;
    signal input_data_V_id_V_0_vld_out : STD_LOGIC;
    signal input_data_V_id_V_0_ack_in : STD_LOGIC;
    signal input_data_V_id_V_0_ack_out : STD_LOGIC;
    signal input_data_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_id_V_0_sel : STD_LOGIC;
    signal input_data_V_id_V_0_load_A : STD_LOGIC;
    signal input_data_V_id_V_0_load_B : STD_LOGIC;
    signal input_data_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_dest_V_0_vld_in : STD_LOGIC;
    signal input_data_V_dest_V_0_vld_out : STD_LOGIC;
    signal input_data_V_dest_V_0_ack_in : STD_LOGIC;
    signal input_data_V_dest_V_0_ack_out : STD_LOGIC;
    signal input_data_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_dest_V_0_sel : STD_LOGIC;
    signal input_data_V_dest_V_0_load_A : STD_LOGIC;
    signal input_data_V_dest_V_0_load_B : STD_LOGIC;
    signal input_data_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal output_data_V_data_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_vld_in : STD_LOGIC;
    signal output_data_V_data_V_1_vld_out : STD_LOGIC;
    signal output_data_V_data_V_1_ack_in : STD_LOGIC;
    signal output_data_V_data_V_1_ack_out : STD_LOGIC;
    signal output_data_V_data_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_data_V_1_sel : STD_LOGIC;
    signal output_data_V_data_V_1_load_A : STD_LOGIC;
    signal output_data_V_data_V_1_load_B : STD_LOGIC;
    signal output_data_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_keep_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_keep_V_1_vld_in : STD_LOGIC;
    signal output_data_V_keep_V_1_vld_out : STD_LOGIC;
    signal output_data_V_keep_V_1_ack_in : STD_LOGIC;
    signal output_data_V_keep_V_1_ack_out : STD_LOGIC;
    signal output_data_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_keep_V_1_sel : STD_LOGIC;
    signal output_data_V_keep_V_1_load_A : STD_LOGIC;
    signal output_data_V_keep_V_1_load_B : STD_LOGIC;
    signal output_data_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_strb_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_strb_V_1_vld_in : STD_LOGIC;
    signal output_data_V_strb_V_1_vld_out : STD_LOGIC;
    signal output_data_V_strb_V_1_ack_in : STD_LOGIC;
    signal output_data_V_strb_V_1_ack_out : STD_LOGIC;
    signal output_data_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_strb_V_1_sel : STD_LOGIC;
    signal output_data_V_strb_V_1_load_A : STD_LOGIC;
    signal output_data_V_strb_V_1_load_B : STD_LOGIC;
    signal output_data_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_vld_in : STD_LOGIC;
    signal output_data_V_user_V_1_vld_out : STD_LOGIC;
    signal output_data_V_user_V_1_ack_in : STD_LOGIC;
    signal output_data_V_user_V_1_ack_out : STD_LOGIC;
    signal output_data_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_user_V_1_sel : STD_LOGIC;
    signal output_data_V_user_V_1_load_A : STD_LOGIC;
    signal output_data_V_user_V_1_load_B : STD_LOGIC;
    signal output_data_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_vld_in : STD_LOGIC;
    signal output_data_V_last_V_1_vld_out : STD_LOGIC;
    signal output_data_V_last_V_1_ack_in : STD_LOGIC;
    signal output_data_V_last_V_1_ack_out : STD_LOGIC;
    signal output_data_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_last_V_1_sel : STD_LOGIC;
    signal output_data_V_last_V_1_load_A : STD_LOGIC;
    signal output_data_V_last_V_1_load_B : STD_LOGIC;
    signal output_data_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_id_V_1_vld_in : STD_LOGIC;
    signal output_data_V_id_V_1_vld_out : STD_LOGIC;
    signal output_data_V_id_V_1_ack_in : STD_LOGIC;
    signal output_data_V_id_V_1_ack_out : STD_LOGIC;
    signal output_data_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_id_V_1_sel : STD_LOGIC;
    signal output_data_V_id_V_1_load_A : STD_LOGIC;
    signal output_data_V_id_V_1_load_B : STD_LOGIC;
    signal output_data_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_dest_V_1_vld_in : STD_LOGIC;
    signal output_data_V_dest_V_1_vld_out : STD_LOGIC;
    signal output_data_V_dest_V_1_ack_in : STD_LOGIC;
    signal output_data_V_dest_V_1_ack_out : STD_LOGIC;
    signal output_data_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_dest_V_1_sel : STD_LOGIC;
    signal output_data_V_dest_V_1_load_A : STD_LOGIC;
    signal output_data_V_dest_V_1_load_B : STD_LOGIC;
    signal output_data_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal Padding2D_0_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Padding2D_0_array_ce0 : STD_LOGIC;
    signal Padding2D_0_array_we0 : STD_LOGIC;
    signal Padding2D_0_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_0_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    signal Padding2D_0_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal Padding2D_0_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal SeparableConv2D_0_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_0_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_0_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_0_m_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SeparableConv2D_0_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_0_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal height_2_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_2_reg_801 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_3_fu_445_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_reg_806 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_463_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_reg_811 : STD_LOGIC_VECTOR (10 downto 0);
    signal width_1_fu_475_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal depth_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal depth_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_9_fu_588_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_9_reg_865 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_20_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal height_1_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_1_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_15_fu_643_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_reg_878 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_23_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_673_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_reg_883 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_cast_fu_683_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_cast_reg_888 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal width_2_fu_693_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_2_reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_713_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_21_reg_906 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_user_V_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_911 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_data_V_1_reg_940 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_0_keep_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_0_strb_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_0_id_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_0_dest_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_0_array_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_0_array_0_ce0 : STD_LOGIC;
    signal input_0_array_0_we0 : STD_LOGIC;
    signal input_0_array_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_0_keep_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_0_keep_V_ce0 : STD_LOGIC;
    signal out_0_keep_V_we0 : STD_LOGIC;
    signal out_0_strb_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_0_strb_V_ce0 : STD_LOGIC;
    signal out_0_strb_V_we0 : STD_LOGIC;
    signal out_0_id_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_0_id_V_ce0 : STD_LOGIC;
    signal out_0_id_V_we0 : STD_LOGIC;
    signal out_0_dest_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_0_dest_V_ce0 : STD_LOGIC;
    signal out_0_dest_V_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_358_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_358_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_358_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_358_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_358_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_depthwise_conv2d_fix_fu_358_input_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_358_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_depthwise_conv2d_fix_fu_358_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_358_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_358_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_fu_373_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_373_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_373_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_373_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_387_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_fu_387_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_fu_387_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_fu_387_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_fu_387_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_fu_387_input_0_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_387_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_fu_387_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_387_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_387_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_reg_284 : STD_LOGIC_VECTOR (4 downto 0);
    signal width_reg_295 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth7_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal height8_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal width9_reg_330 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_depthwise_conv2d_fix_fu_358_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_pointwise_conv2d_fix_fu_373_ap_start_reg : STD_LOGIC := '0';
    signal grp_padding2d_fix16_fu_387_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_10_cast_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_cast_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_fu_756_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_421_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_433_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_cast_fu_429_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_441_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl1_cast_fu_459_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_cast_fu_506_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_fu_510_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_520_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_564_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_8_fu_576_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl4_cast_fu_572_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_shl5_cast_fu_584_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_22_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_610_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_12_fu_614_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_13_fu_619_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_631_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_cast_fu_623_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl9_cast_fu_635_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_649_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_661_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_cast_fu_653_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_665_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_699_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_703_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_cast_fu_736_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_28_fu_740_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_32_cast_fu_746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_cast_fu_763_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_fu_767_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_35_cast_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_783_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_37_cast_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_condition_1173 : BOOLEAN;
    signal ap_condition_1179 : BOOLEAN;

    component depthwise_conv2d_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_0_m_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SeparableConv2D_0_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_0_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_0_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_SeparableConv2D_0_m_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_input_0_array_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_out_0_keep_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component network_out_0_id_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component network_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    Padding2D_0_array_U : component network_Padding2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_0_array_address0,
        ce0 => Padding2D_0_array_ce0,
        we0 => Padding2D_0_array_we0,
        d0 => grp_padding2d_fix16_fu_387_output_r_d0,
        q0 => Padding2D_0_array_q0);

    SeparableConv2D_0_m_s_U : component network_SeparableConv2D_0_m_s
    generic map (
        DataWidth => 16,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_0_m_s_address0,
        ce0 => SeparableConv2D_0_m_s_ce0,
        we0 => SeparableConv2D_0_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_fu_358_output_r_d0,
        q0 => SeparableConv2D_0_m_s_q0);

    network_AXILiteS_s_axi_U : component network_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    input_0_array_0_U : component network_input_0_array_0
    generic map (
        DataWidth => 16,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_0_array_0_address0,
        ce0 => input_0_array_0_ce0,
        we0 => input_0_array_0_we0,
        d0 => input_data_V_data_V_0_data_out,
        q0 => input_0_array_0_q0);

    out_0_keep_V_U : component network_out_0_keep_V
    generic map (
        DataWidth => 2,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_keep_V_address0,
        ce0 => out_0_keep_V_ce0,
        we0 => out_0_keep_V_we0,
        d0 => input_data_V_keep_V_0_data_out,
        q0 => out_0_keep_V_q0);

    out_0_strb_V_U : component network_out_0_keep_V
    generic map (
        DataWidth => 2,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_strb_V_address0,
        ce0 => out_0_strb_V_ce0,
        we0 => out_0_strb_V_we0,
        d0 => input_data_V_strb_V_0_data_out,
        q0 => out_0_strb_V_q0);

    out_0_id_V_U : component network_out_0_id_V
    generic map (
        DataWidth => 1,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_id_V_address0,
        ce0 => out_0_id_V_ce0,
        we0 => out_0_id_V_we0,
        d0 => input_data_V_id_V_0_data_out,
        q0 => out_0_id_V_q0);

    out_0_dest_V_U : component network_out_0_id_V
    generic map (
        DataWidth => 1,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_dest_V_address0,
        ce0 => out_0_dest_V_ce0,
        we0 => out_0_dest_V_we0,
        d0 => input_data_V_dest_V_0_data_out,
        q0 => out_0_dest_V_q0);

    grp_depthwise_conv2d_fix_fu_358 : component depthwise_conv2d_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_fu_358_ap_start,
        ap_done => grp_depthwise_conv2d_fix_fu_358_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_fu_358_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_fu_358_ap_ready,
        input_height => Padding2D_0_height,
        input_width => Padding2D_0_width,
        input_r_address0 => grp_depthwise_conv2d_fix_fu_358_input_r_address0,
        input_r_ce0 => grp_depthwise_conv2d_fix_fu_358_input_r_ce0,
        input_r_q0 => Padding2D_0_array_q0,
        output_depth => Padding2D_0_depth,
        output_height => SeparableConv2D_0_he,
        output_width => SeparableConv2D_0_wi,
        output_r_address0 => grp_depthwise_conv2d_fix_fu_358_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_fu_358_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_fu_358_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_fu_358_output_r_d0,
        output_r_q0 => SeparableConv2D_0_m_s_q0);

    grp_pointwise_conv2d_fix_fu_373 : component pointwise_conv2d_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_fu_373_ap_start,
        ap_done => grp_pointwise_conv2d_fix_fu_373_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_fu_373_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_fu_373_ap_ready,
        input_depth => Padding2D_0_depth,
        input_height => SeparableConv2D_0_he,
        input_width => SeparableConv2D_0_wi,
        output_depth => SeparableConv2D_0_de,
        SeparableConv2D_0_m_s_address0 => grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_address0,
        SeparableConv2D_0_m_s_ce0 => grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_ce0,
        SeparableConv2D_0_m_s_q0 => SeparableConv2D_0_m_s_q0);

    grp_padding2d_fix16_fu_387 : component padding2d_fix16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_fu_387_ap_start,
        ap_done => grp_padding2d_fix16_fu_387_ap_done,
        ap_idle => grp_padding2d_fix16_fu_387_ap_idle,
        ap_ready => grp_padding2d_fix16_fu_387_ap_ready,
        input_0_address0 => grp_padding2d_fix16_fu_387_input_0_address0,
        input_0_ce0 => grp_padding2d_fix16_fu_387_input_0_ce0,
        input_0_q0 => input_0_array_0_q0,
        output_r_address0 => grp_padding2d_fix16_fu_387_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_fu_387_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_fu_387_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_fu_387_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_fu_358_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_fu_358_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_depthwise_conv2d_fix_fu_358_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_fu_358_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_fu_358_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_fu_387_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_fu_387_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond4_fu_409_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_padding2d_fix16_fu_387_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_fu_387_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_fu_387_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_fu_373_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_fu_373_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_pointwise_conv2d_fix_fu_373_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_fu_373_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_fu_373_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_data_V_0_ack_out = ap_const_logic_1) and (input_data_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_data_V_0_sel_rd <= not(input_data_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_data_V_0_ack_in = ap_const_logic_1) and (input_data_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_data_V_0_sel_wr <= not(input_data_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_data_V_0_state = ap_const_lv2_2) and (input_data_V_data_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_data_V_0_state = ap_const_lv2_3) and (input_data_V_data_V_0_vld_in = ap_const_logic_0) and (input_data_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_data_V_0_state = ap_const_lv2_1) and (input_data_V_data_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_data_V_0_state = ap_const_lv2_3) and (input_data_V_data_V_0_ack_out = ap_const_logic_0) and (input_data_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_data_V_0_vld_in = ap_const_logic_0) and (input_data_V_data_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_data_V_0_ack_out = ap_const_logic_0) and (input_data_V_data_V_0_vld_in = ap_const_logic_1))) and (input_data_V_data_V_0_state = ap_const_lv2_3)) or ((input_data_V_data_V_0_state = ap_const_lv2_1) and (input_data_V_data_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_data_V_0_state = ap_const_lv2_2) and (input_data_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_dest_V_0_ack_out = ap_const_logic_1) and (input_data_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_dest_V_0_sel_rd <= not(input_data_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_dest_V_0_ack_in = ap_const_logic_1) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_dest_V_0_sel_wr <= not(input_data_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_dest_V_0_state = ap_const_lv2_2) and (input_data_V_dest_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_dest_V_0_state = ap_const_lv2_3) and (input_data_V_dest_V_0_vld_in = ap_const_logic_0) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_dest_V_0_state = ap_const_lv2_1) and (input_data_V_dest_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_dest_V_0_state = ap_const_lv2_3) and (input_data_V_dest_V_0_ack_out = ap_const_logic_0) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_dest_V_0_vld_in = ap_const_logic_0) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_dest_V_0_ack_out = ap_const_logic_0) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1))) and (input_data_V_dest_V_0_state = ap_const_lv2_3)) or ((input_data_V_dest_V_0_state = ap_const_lv2_1) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_dest_V_0_state = ap_const_lv2_2) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_id_V_0_ack_out = ap_const_logic_1) and (input_data_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_id_V_0_sel_rd <= not(input_data_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_id_V_0_ack_in = ap_const_logic_1) and (input_data_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_id_V_0_sel_wr <= not(input_data_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_id_V_0_state = ap_const_lv2_2) and (input_data_V_id_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_id_V_0_state = ap_const_lv2_3) and (input_data_V_id_V_0_vld_in = ap_const_logic_0) and (input_data_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_id_V_0_state = ap_const_lv2_1) and (input_data_V_id_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_id_V_0_state = ap_const_lv2_3) and (input_data_V_id_V_0_ack_out = ap_const_logic_0) and (input_data_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_id_V_0_vld_in = ap_const_logic_0) and (input_data_V_id_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_id_V_0_ack_out = ap_const_logic_0) and (input_data_V_id_V_0_vld_in = ap_const_logic_1))) and (input_data_V_id_V_0_state = ap_const_lv2_3)) or ((input_data_V_id_V_0_state = ap_const_lv2_1) and (input_data_V_id_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_id_V_0_state = ap_const_lv2_2) and (input_data_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_keep_V_0_ack_out = ap_const_logic_1) and (input_data_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_keep_V_0_sel_rd <= not(input_data_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_keep_V_0_ack_in = ap_const_logic_1) and (input_data_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_keep_V_0_sel_wr <= not(input_data_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_keep_V_0_state = ap_const_lv2_2) and (input_data_V_keep_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_keep_V_0_state = ap_const_lv2_3) and (input_data_V_keep_V_0_vld_in = ap_const_logic_0) and (input_data_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_keep_V_0_state = ap_const_lv2_1) and (input_data_V_keep_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_keep_V_0_state = ap_const_lv2_3) and (input_data_V_keep_V_0_ack_out = ap_const_logic_0) and (input_data_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_keep_V_0_vld_in = ap_const_logic_0) and (input_data_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_keep_V_0_ack_out = ap_const_logic_0) and (input_data_V_keep_V_0_vld_in = ap_const_logic_1))) and (input_data_V_keep_V_0_state = ap_const_lv2_3)) or ((input_data_V_keep_V_0_state = ap_const_lv2_1) and (input_data_V_keep_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_keep_V_0_state = ap_const_lv2_2) and (input_data_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_strb_V_0_ack_out = ap_const_logic_1) and (input_data_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_strb_V_0_sel_rd <= not(input_data_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_strb_V_0_ack_in = ap_const_logic_1) and (input_data_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_strb_V_0_sel_wr <= not(input_data_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_strb_V_0_state = ap_const_lv2_2) and (input_data_V_strb_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_strb_V_0_state = ap_const_lv2_3) and (input_data_V_strb_V_0_vld_in = ap_const_logic_0) and (input_data_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_strb_V_0_state = ap_const_lv2_1) and (input_data_V_strb_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_strb_V_0_state = ap_const_lv2_3) and (input_data_V_strb_V_0_ack_out = ap_const_logic_0) and (input_data_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_strb_V_0_vld_in = ap_const_logic_0) and (input_data_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_strb_V_0_ack_out = ap_const_logic_0) and (input_data_V_strb_V_0_vld_in = ap_const_logic_1))) and (input_data_V_strb_V_0_state = ap_const_lv2_3)) or ((input_data_V_strb_V_0_state = ap_const_lv2_1) and (input_data_V_strb_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_strb_V_0_state = ap_const_lv2_2) and (input_data_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_data_V_1_ack_out = ap_const_logic_1) and (output_data_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_data_V_1_sel_rd <= not(output_data_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (output_data_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_data_V_1_sel_wr <= not(output_data_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_data_V_1_state = ap_const_lv2_2) and (output_data_V_data_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_data_V_1_state = ap_const_lv2_3) and (output_data_V_data_V_1_vld_in = ap_const_logic_0) and (output_data_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_data_V_1_state = ap_const_lv2_1) and (output_data_V_data_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_data_V_1_state = ap_const_lv2_3) and (output_data_V_data_V_1_ack_out = ap_const_logic_0) and (output_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_data_V_1_vld_in = ap_const_logic_0) and (output_data_V_data_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_data_V_1_ack_out = ap_const_logic_0) and (output_data_V_data_V_1_vld_in = ap_const_logic_1))) and (output_data_V_data_V_1_state = ap_const_lv2_3)) or ((output_data_V_data_V_1_state = ap_const_lv2_1) and (output_data_V_data_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_data_V_1_state = ap_const_lv2_2) and (output_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_dest_V_1_ack_out = ap_const_logic_1) and (output_data_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_dest_V_1_sel_rd <= not(output_data_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_dest_V_1_ack_in = ap_const_logic_1) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_dest_V_1_sel_wr <= not(output_data_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_dest_V_1_state = ap_const_lv2_2) and (output_data_V_dest_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_dest_V_1_state = ap_const_lv2_3) and (output_data_V_dest_V_1_vld_in = ap_const_logic_0) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_dest_V_1_state = ap_const_lv2_1) and (output_data_V_dest_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_dest_V_1_state = ap_const_lv2_3) and (output_data_V_dest_V_1_ack_out = ap_const_logic_0) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_dest_V_1_vld_in = ap_const_logic_0) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_dest_V_1_ack_out = ap_const_logic_0) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1))) and (output_data_V_dest_V_1_state = ap_const_lv2_3)) or ((output_data_V_dest_V_1_state = ap_const_lv2_1) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_dest_V_1_state = ap_const_lv2_2) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_id_V_1_ack_out = ap_const_logic_1) and (output_data_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_id_V_1_sel_rd <= not(output_data_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_id_V_1_ack_in = ap_const_logic_1) and (output_data_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_id_V_1_sel_wr <= not(output_data_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_id_V_1_state = ap_const_lv2_2) and (output_data_V_id_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_id_V_1_state = ap_const_lv2_3) and (output_data_V_id_V_1_vld_in = ap_const_logic_0) and (output_data_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_id_V_1_state = ap_const_lv2_1) and (output_data_V_id_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_id_V_1_state = ap_const_lv2_3) and (output_data_V_id_V_1_ack_out = ap_const_logic_0) and (output_data_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_id_V_1_vld_in = ap_const_logic_0) and (output_data_V_id_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_id_V_1_ack_out = ap_const_logic_0) and (output_data_V_id_V_1_vld_in = ap_const_logic_1))) and (output_data_V_id_V_1_state = ap_const_lv2_3)) or ((output_data_V_id_V_1_state = ap_const_lv2_1) and (output_data_V_id_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_id_V_1_state = ap_const_lv2_2) and (output_data_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_keep_V_1_ack_out = ap_const_logic_1) and (output_data_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_keep_V_1_sel_rd <= not(output_data_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_keep_V_1_ack_in = ap_const_logic_1) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_keep_V_1_sel_wr <= not(output_data_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_keep_V_1_state = ap_const_lv2_2) and (output_data_V_keep_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_keep_V_1_state = ap_const_lv2_3) and (output_data_V_keep_V_1_vld_in = ap_const_logic_0) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_keep_V_1_state = ap_const_lv2_1) and (output_data_V_keep_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_keep_V_1_state = ap_const_lv2_3) and (output_data_V_keep_V_1_ack_out = ap_const_logic_0) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_keep_V_1_vld_in = ap_const_logic_0) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_keep_V_1_ack_out = ap_const_logic_0) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1))) and (output_data_V_keep_V_1_state = ap_const_lv2_3)) or ((output_data_V_keep_V_1_state = ap_const_lv2_1) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_keep_V_1_state = ap_const_lv2_2) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_last_V_1_ack_out = ap_const_logic_1) and (output_data_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_last_V_1_sel_rd <= not(output_data_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_last_V_1_ack_in = ap_const_logic_1) and (output_data_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_last_V_1_sel_wr <= not(output_data_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_last_V_1_state = ap_const_lv2_2) and (output_data_V_last_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_last_V_1_state = ap_const_lv2_3) and (output_data_V_last_V_1_vld_in = ap_const_logic_0) and (output_data_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_last_V_1_state = ap_const_lv2_1) and (output_data_V_last_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_last_V_1_state = ap_const_lv2_3) and (output_data_V_last_V_1_ack_out = ap_const_logic_0) and (output_data_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_last_V_1_vld_in = ap_const_logic_0) and (output_data_V_last_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_last_V_1_ack_out = ap_const_logic_0) and (output_data_V_last_V_1_vld_in = ap_const_logic_1))) and (output_data_V_last_V_1_state = ap_const_lv2_3)) or ((output_data_V_last_V_1_state = ap_const_lv2_1) and (output_data_V_last_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_last_V_1_state = ap_const_lv2_2) and (output_data_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_strb_V_1_ack_out = ap_const_logic_1) and (output_data_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_strb_V_1_sel_rd <= not(output_data_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_strb_V_1_ack_in = ap_const_logic_1) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_strb_V_1_sel_wr <= not(output_data_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_strb_V_1_state = ap_const_lv2_2) and (output_data_V_strb_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_strb_V_1_state = ap_const_lv2_3) and (output_data_V_strb_V_1_vld_in = ap_const_logic_0) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_strb_V_1_state = ap_const_lv2_1) and (output_data_V_strb_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_strb_V_1_state = ap_const_lv2_3) and (output_data_V_strb_V_1_ack_out = ap_const_logic_0) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_strb_V_1_vld_in = ap_const_logic_0) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_strb_V_1_ack_out = ap_const_logic_0) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1))) and (output_data_V_strb_V_1_state = ap_const_lv2_3)) or ((output_data_V_strb_V_1_state = ap_const_lv2_1) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_strb_V_1_state = ap_const_lv2_2) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_user_V_1_ack_out = ap_const_logic_1) and (output_data_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_user_V_1_sel_rd <= not(output_data_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_user_V_1_ack_in = ap_const_logic_1) and (output_data_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_user_V_1_sel_wr <= not(output_data_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_user_V_1_state = ap_const_lv2_2) and (output_data_V_user_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_user_V_1_state = ap_const_lv2_3) and (output_data_V_user_V_1_vld_in = ap_const_logic_0) and (output_data_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_user_V_1_state = ap_const_lv2_1) and (output_data_V_user_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_user_V_1_state = ap_const_lv2_3) and (output_data_V_user_V_1_ack_out = ap_const_logic_0) and (output_data_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_user_V_1_vld_in = ap_const_logic_0) and (output_data_V_user_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_user_V_1_ack_out = ap_const_logic_0) and (output_data_V_user_V_1_vld_in = ap_const_logic_1))) and (output_data_V_user_V_1_state = ap_const_lv2_3)) or ((output_data_V_user_V_1_state = ap_const_lv2_1) and (output_data_V_user_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_user_V_1_state = ap_const_lv2_2) and (output_data_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    Padding2D_0_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_0_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_0_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    depth7_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                depth7_reg_306 <= depth_reg_860;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_pointwise_conv2d_fix_fu_373_ap_done = ap_const_logic_1))) then 
                depth7_reg_306 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    height8_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_26_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                height8_reg_318 <= height_1_reg_873;
            elsif (((tmp_20_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                height8_reg_318 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    height_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                height_reg_284 <= height_2_reg_801;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                height_reg_284 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    tmp_last_V_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                if ((ap_const_boolean_1 = ap_condition_1179)) then 
                    tmp_last_V_reg_342 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_condition_1173)) then 
                    tmp_last_V_reg_342 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    width9_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                width9_reg_330 <= ap_const_lv32_0;
            elsif (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                width9_reg_330 <= width_2_reg_896;
            end if; 
        end if;
    end process;

    width_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                width_reg_295 <= ap_const_lv5_0;
            elsif ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                width_reg_295 <= width_1_fu_475_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                depth_reg_860 <= depth_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                height_1_reg_873 <= height_1_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                height_2_reg_801 <= height_2_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_data_V_0_load_A = ap_const_logic_1)) then
                input_data_V_data_V_0_payload_A <= input_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_data_V_0_load_B = ap_const_logic_1)) then
                input_data_V_data_V_0_payload_B <= input_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_dest_V_0_load_A = ap_const_logic_1)) then
                input_data_V_dest_V_0_payload_A <= input_data_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_dest_V_0_load_B = ap_const_logic_1)) then
                input_data_V_dest_V_0_payload_B <= input_data_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_id_V_0_load_A = ap_const_logic_1)) then
                input_data_V_id_V_0_payload_A <= input_data_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_id_V_0_load_B = ap_const_logic_1)) then
                input_data_V_id_V_0_payload_B <= input_data_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_keep_V_0_load_A = ap_const_logic_1)) then
                input_data_V_keep_V_0_payload_A <= input_data_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_keep_V_0_load_B = ap_const_logic_1)) then
                input_data_V_keep_V_0_payload_B <= input_data_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_strb_V_0_load_A = ap_const_logic_1)) then
                input_data_V_strb_V_0_payload_A <= input_data_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_strb_V_0_load_B = ap_const_logic_1)) then
                input_data_V_strb_V_0_payload_B <= input_data_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_data_V_1_load_A = ap_const_logic_1)) then
                output_data_V_data_V_1_payload_A <= tmp_data_V_1_reg_940;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_data_V_1_load_B = ap_const_logic_1)) then
                output_data_V_data_V_1_payload_B <= tmp_data_V_1_reg_940;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_dest_V_1_load_A = ap_const_logic_1)) then
                output_data_V_dest_V_1_payload_A <= out_0_dest_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_dest_V_1_load_B = ap_const_logic_1)) then
                output_data_V_dest_V_1_payload_B <= out_0_dest_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_id_V_1_load_A = ap_const_logic_1)) then
                output_data_V_id_V_1_payload_A <= out_0_id_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_id_V_1_load_B = ap_const_logic_1)) then
                output_data_V_id_V_1_payload_B <= out_0_id_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_keep_V_1_load_A = ap_const_logic_1)) then
                output_data_V_keep_V_1_payload_A <= out_0_keep_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_keep_V_1_load_B = ap_const_logic_1)) then
                output_data_V_keep_V_1_payload_B <= out_0_keep_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_last_V_1_load_A = ap_const_logic_1)) then
                output_data_V_last_V_1_payload_A <= tmp_last_V_reg_342;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_last_V_1_load_B = ap_const_logic_1)) then
                output_data_V_last_V_1_payload_B <= tmp_last_V_reg_342;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_strb_V_1_load_A = ap_const_logic_1)) then
                output_data_V_strb_V_1_payload_A <= out_0_strb_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_strb_V_1_load_B = ap_const_logic_1)) then
                output_data_V_strb_V_1_payload_B <= out_0_strb_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_user_V_1_load_A = ap_const_logic_1)) then
                output_data_V_user_V_1_payload_A <= tmp_user_V_reg_911;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_user_V_1_load_B = ap_const_logic_1)) then
                output_data_V_user_V_1_payload_B <= tmp_user_V_reg_911;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_23_fu_598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    tmp_15_reg_878(10 downto 1) <= tmp_15_fu_643_p2(10 downto 1);
                    tmp_18_reg_883(10 downto 1) <= tmp_18_fu_673_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_26_fu_687_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                tmp_21_reg_906 <= tmp_21_fu_713_p2;
                tmp_29_reg_916 <= tmp_29_fu_750_p2;
                tmp_user_V_reg_911 <= tmp_user_V_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_3_reg_806(10 downto 2) <= tmp_3_fu_445_p2(10 downto 2);
                    tmp_6_reg_811(10 downto 1) <= tmp_6_fu_463_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    tmp_9_reg_865(37 downto 1) <= tmp_9_fu_588_p2(37 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_data_V_1_reg_940 <= Padding2D_0_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                width_2_reg_896 <= width_2_fu_693_p2;
            end if;
        end if;
    end process;
    tmp_3_reg_806(1 downto 0) <= "00";
    tmp_6_reg_811(0) <= '0';
    tmp_9_reg_865(0) <= '0';
    tmp_15_reg_878(0) <= '0';
    tmp_18_reg_883(0) <= '0';
    tmp_25_cast_reg_888(16 downto 0) <= "00000000000011110";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_data_V_data_V_0_vld_out, output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state3, exitcond_fu_469_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state2, exitcond4_fu_409_p2, ap_CS_fsm_state9, tmp_20_fu_552_p2, ap_CS_fsm_state10, tmp_23_fu_598_p2, ap_CS_fsm_state11, tmp_26_fu_687_p2, grp_depthwise_conv2d_fix_fu_358_ap_done, grp_pointwise_conv2d_fix_fu_373_ap_done, grp_padding2d_fix16_fu_387_ap_done, ap_CS_fsm_state8, ap_CS_fsm_state6, ap_CS_fsm_state4, ap_CS_fsm_state15)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_padding2d_fix16_fu_387_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_depthwise_conv2d_fix_fu_358_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_pointwise_conv2d_fix_fu_373_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((tmp_20_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state10 => 
                if (((tmp_23_fu_598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((tmp_26_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    Padding2D_0_array_address0_assign_proc : process(ap_CS_fsm_state11, grp_depthwise_conv2d_fix_fu_358_input_r_address0, grp_padding2d_fix16_fu_387_output_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state4, tmp_19_cast_fu_708_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Padding2D_0_array_address0 <= tmp_19_cast_fu_708_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_address0 <= grp_padding2d_fix16_fu_387_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Padding2D_0_array_address0 <= grp_depthwise_conv2d_fix_fu_358_input_r_address0;
        else 
            Padding2D_0_array_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Padding2D_0_array_ce0_assign_proc : process(ap_CS_fsm_state11, grp_depthwise_conv2d_fix_fu_358_input_r_ce0, grp_padding2d_fix16_fu_387_output_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Padding2D_0_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_ce0 <= grp_padding2d_fix16_fu_387_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Padding2D_0_array_ce0 <= grp_depthwise_conv2d_fix_fu_358_input_r_ce0;
        else 
            Padding2D_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_0_array_we0_assign_proc : process(grp_padding2d_fix16_fu_387_output_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_we0 <= grp_padding2d_fix16_fu_387_output_r_we0;
        else 
            Padding2D_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_fu_358_output_r_address0, grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_address0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_m_s_address0 <= grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_address0 <= grp_depthwise_conv2d_fix_fu_358_output_r_address0;
        else 
            SeparableConv2D_0_m_s_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_0_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_fu_358_output_r_ce0, grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_m_s_ce0 <= grp_pointwise_conv2d_fix_fu_373_SeparableConv2D_0_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_ce0 <= grp_depthwise_conv2d_fix_fu_358_output_r_ce0;
        else 
            SeparableConv2D_0_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_fu_358_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_we0 <= grp_depthwise_conv2d_fix_fu_358_output_r_we0;
        else 
            SeparableConv2D_0_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state15_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_keep_V_1_ack_in, output_data_V_strb_V_1_ack_in, output_data_V_user_V_1_ack_in, output_data_V_last_V_1_ack_in, output_data_V_id_V_1_ack_in, output_data_V_dest_V_1_ack_in)
    begin
                ap_block_state15 <= ((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(input_data_V_data_V_0_vld_out, exitcond_fu_469_p2)
    begin
                ap_block_state3 <= ((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_condition_1173_assign_proc : process(tmp_29_reg_916, tmp_33_fu_792_p2, tmp_31_fu_777_p2)
    begin
                ap_condition_1173 <= ((tmp_29_reg_916 = ap_const_lv1_0) or ((tmp_31_fu_777_p2 = ap_const_lv1_0) or (tmp_33_fu_792_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_1179_assign_proc : process(tmp_29_reg_916, tmp_33_fu_792_p2, tmp_31_fu_777_p2)
    begin
                ap_condition_1179 <= ((tmp_31_fu_777_p2 = ap_const_lv1_1) and (tmp_33_fu_792_p2 = ap_const_lv1_1) and (tmp_29_reg_916 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state15)
    begin
        if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state15)
    begin
        if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    depth_fu_558_p2 <= std_logic_vector(unsigned(depth7_reg_306) + unsigned(ap_const_lv32_1));
    exitcond4_fu_409_p2 <= "1" when (height_reg_284 = ap_const_lv5_1C) else "0";
    exitcond_fu_469_p2 <= "1" when (width_reg_295 = ap_const_lv5_1C) else "0";
    grp_depthwise_conv2d_fix_fu_358_ap_start <= grp_depthwise_conv2d_fix_fu_358_ap_start_reg;
    grp_padding2d_fix16_fu_387_ap_start <= grp_padding2d_fix16_fu_387_ap_start_reg;
    grp_pointwise_conv2d_fix_fu_373_ap_start <= grp_pointwise_conv2d_fix_fu_373_ap_start_reg;
    height_1_fu_604_p2 <= std_logic_vector(signed(height8_reg_318) + signed(ap_const_lv32_1));
    height_2_fu_415_p2 <= std_logic_vector(unsigned(height_reg_284) + unsigned(ap_const_lv5_1));

    input_0_array_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_padding2d_fix16_fu_387_input_0_address0, ap_CS_fsm_state4, tmp_10_cast_fu_515_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_array_0_address0 <= tmp_10_cast_fu_515_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_array_0_address0 <= grp_padding2d_fix16_fu_387_input_0_address0;
        else 
            input_0_array_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_0_array_0_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2, grp_padding2d_fix16_fu_387_input_0_ce0, ap_CS_fsm_state4)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_array_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_array_0_ce0 <= grp_padding2d_fix16_fu_387_input_0_ce0;
        else 
            input_0_array_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_array_0_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_array_0_we0 <= ap_const_logic_1;
        else 
            input_0_array_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_data_TDATA_blk_n_assign_proc : process(input_data_V_data_V_0_state, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if (((exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_TDATA_blk_n <= input_data_V_data_V_0_state(0);
        else 
            input_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_data_TREADY <= input_data_V_dest_V_0_state(1);
    input_data_V_data_V_0_ack_in <= input_data_V_data_V_0_state(1);

    input_data_V_data_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_data_V_0_data_out_assign_proc : process(input_data_V_data_V_0_payload_A, input_data_V_data_V_0_payload_B, input_data_V_data_V_0_sel)
    begin
        if ((input_data_V_data_V_0_sel = ap_const_logic_1)) then 
            input_data_V_data_V_0_data_out <= input_data_V_data_V_0_payload_B;
        else 
            input_data_V_data_V_0_data_out <= input_data_V_data_V_0_payload_A;
        end if; 
    end process;

    input_data_V_data_V_0_load_A <= (input_data_V_data_V_0_state_cmp_full and not(input_data_V_data_V_0_sel_wr));
    input_data_V_data_V_0_load_B <= (input_data_V_data_V_0_state_cmp_full and input_data_V_data_V_0_sel_wr);
    input_data_V_data_V_0_sel <= input_data_V_data_V_0_sel_rd;
    input_data_V_data_V_0_state_cmp_full <= '0' when (input_data_V_data_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_data_V_0_vld_in <= input_data_TVALID;
    input_data_V_data_V_0_vld_out <= input_data_V_data_V_0_state(0);
    input_data_V_dest_V_0_ack_in <= input_data_V_dest_V_0_state(1);

    input_data_V_dest_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_dest_V_0_data_out_assign_proc : process(input_data_V_dest_V_0_payload_A, input_data_V_dest_V_0_payload_B, input_data_V_dest_V_0_sel)
    begin
        if ((input_data_V_dest_V_0_sel = ap_const_logic_1)) then 
            input_data_V_dest_V_0_data_out <= input_data_V_dest_V_0_payload_B;
        else 
            input_data_V_dest_V_0_data_out <= input_data_V_dest_V_0_payload_A;
        end if; 
    end process;

    input_data_V_dest_V_0_load_A <= (input_data_V_dest_V_0_state_cmp_full and not(input_data_V_dest_V_0_sel_wr));
    input_data_V_dest_V_0_load_B <= (input_data_V_dest_V_0_state_cmp_full and input_data_V_dest_V_0_sel_wr);
    input_data_V_dest_V_0_sel <= input_data_V_dest_V_0_sel_rd;
    input_data_V_dest_V_0_state_cmp_full <= '0' when (input_data_V_dest_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_dest_V_0_vld_in <= input_data_TVALID;
    input_data_V_dest_V_0_vld_out <= input_data_V_dest_V_0_state(0);
    input_data_V_id_V_0_ack_in <= input_data_V_id_V_0_state(1);

    input_data_V_id_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_id_V_0_data_out_assign_proc : process(input_data_V_id_V_0_payload_A, input_data_V_id_V_0_payload_B, input_data_V_id_V_0_sel)
    begin
        if ((input_data_V_id_V_0_sel = ap_const_logic_1)) then 
            input_data_V_id_V_0_data_out <= input_data_V_id_V_0_payload_B;
        else 
            input_data_V_id_V_0_data_out <= input_data_V_id_V_0_payload_A;
        end if; 
    end process;

    input_data_V_id_V_0_load_A <= (input_data_V_id_V_0_state_cmp_full and not(input_data_V_id_V_0_sel_wr));
    input_data_V_id_V_0_load_B <= (input_data_V_id_V_0_state_cmp_full and input_data_V_id_V_0_sel_wr);
    input_data_V_id_V_0_sel <= input_data_V_id_V_0_sel_rd;
    input_data_V_id_V_0_state_cmp_full <= '0' when (input_data_V_id_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_id_V_0_vld_in <= input_data_TVALID;
    input_data_V_id_V_0_vld_out <= input_data_V_id_V_0_state(0);
    input_data_V_keep_V_0_ack_in <= input_data_V_keep_V_0_state(1);

    input_data_V_keep_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_keep_V_0_data_out_assign_proc : process(input_data_V_keep_V_0_payload_A, input_data_V_keep_V_0_payload_B, input_data_V_keep_V_0_sel)
    begin
        if ((input_data_V_keep_V_0_sel = ap_const_logic_1)) then 
            input_data_V_keep_V_0_data_out <= input_data_V_keep_V_0_payload_B;
        else 
            input_data_V_keep_V_0_data_out <= input_data_V_keep_V_0_payload_A;
        end if; 
    end process;

    input_data_V_keep_V_0_load_A <= (input_data_V_keep_V_0_state_cmp_full and not(input_data_V_keep_V_0_sel_wr));
    input_data_V_keep_V_0_load_B <= (input_data_V_keep_V_0_state_cmp_full and input_data_V_keep_V_0_sel_wr);
    input_data_V_keep_V_0_sel <= input_data_V_keep_V_0_sel_rd;
    input_data_V_keep_V_0_state_cmp_full <= '0' when (input_data_V_keep_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_keep_V_0_vld_in <= input_data_TVALID;
    input_data_V_keep_V_0_vld_out <= input_data_V_keep_V_0_state(0);
    input_data_V_strb_V_0_ack_in <= input_data_V_strb_V_0_state(1);

    input_data_V_strb_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_strb_V_0_data_out_assign_proc : process(input_data_V_strb_V_0_payload_A, input_data_V_strb_V_0_payload_B, input_data_V_strb_V_0_sel)
    begin
        if ((input_data_V_strb_V_0_sel = ap_const_logic_1)) then 
            input_data_V_strb_V_0_data_out <= input_data_V_strb_V_0_payload_B;
        else 
            input_data_V_strb_V_0_data_out <= input_data_V_strb_V_0_payload_A;
        end if; 
    end process;

    input_data_V_strb_V_0_load_A <= (input_data_V_strb_V_0_state_cmp_full and not(input_data_V_strb_V_0_sel_wr));
    input_data_V_strb_V_0_load_B <= (input_data_V_strb_V_0_state_cmp_full and input_data_V_strb_V_0_sel_wr);
    input_data_V_strb_V_0_sel <= input_data_V_strb_V_0_sel_rd;
    input_data_V_strb_V_0_state_cmp_full <= '0' when (input_data_V_strb_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_strb_V_0_vld_in <= input_data_TVALID;
    input_data_V_strb_V_0_vld_out <= input_data_V_strb_V_0_state(0);

    out_0_dest_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, tmp_11_cast_fu_525_p1, tmp_21_cast_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_0_dest_V_address0 <= tmp_21_cast_fu_756_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_dest_V_address0 <= tmp_11_cast_fu_525_p1(10 - 1 downto 0);
        else 
            out_0_dest_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_0_dest_V_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_0_dest_V_ce0 <= ap_const_logic_1;
        else 
            out_0_dest_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_dest_V_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_dest_V_we0 <= ap_const_logic_1;
        else 
            out_0_dest_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_id_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, tmp_11_cast_fu_525_p1, tmp_21_cast_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_0_id_V_address0 <= tmp_21_cast_fu_756_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_id_V_address0 <= tmp_11_cast_fu_525_p1(10 - 1 downto 0);
        else 
            out_0_id_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_0_id_V_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_0_id_V_ce0 <= ap_const_logic_1;
        else 
            out_0_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_id_V_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_id_V_we0 <= ap_const_logic_1;
        else 
            out_0_id_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_keep_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, tmp_11_cast_fu_525_p1, tmp_21_cast_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_0_keep_V_address0 <= tmp_21_cast_fu_756_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_keep_V_address0 <= tmp_11_cast_fu_525_p1(10 - 1 downto 0);
        else 
            out_0_keep_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_0_keep_V_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_0_keep_V_ce0 <= ap_const_logic_1;
        else 
            out_0_keep_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_keep_V_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_keep_V_we0 <= ap_const_logic_1;
        else 
            out_0_keep_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_strb_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state12, tmp_11_cast_fu_525_p1, tmp_21_cast_fu_756_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_0_strb_V_address0 <= tmp_21_cast_fu_756_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_strb_V_address0 <= tmp_11_cast_fu_525_p1(10 - 1 downto 0);
        else 
            out_0_strb_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_0_strb_V_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_0_strb_V_ce0 <= ap_const_logic_1;
        else 
            out_0_strb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_strb_V_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_469_p2)
    begin
        if ((not(((exitcond_fu_469_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_469_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_strb_V_we0 <= ap_const_logic_1;
        else 
            out_0_strb_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_data_TDATA <= output_data_V_data_V_1_data_out;

    output_data_TDATA_blk_n_assign_proc : process(output_data_V_data_V_1_state, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_data_TDATA_blk_n <= output_data_V_data_V_1_state(1);
        else 
            output_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_data_TDEST <= output_data_V_dest_V_1_data_out;
    output_data_TID <= output_data_V_id_V_1_data_out;
    output_data_TKEEP <= output_data_V_keep_V_1_data_out;
    output_data_TLAST <= output_data_V_last_V_1_data_out;
    output_data_TSTRB <= output_data_V_strb_V_1_data_out;
    output_data_TUSER <= output_data_V_user_V_1_data_out;
    output_data_TVALID <= output_data_V_dest_V_1_state(0);
    output_data_V_data_V_1_ack_in <= output_data_V_data_V_1_state(1);
    output_data_V_data_V_1_ack_out <= output_data_TREADY;

    output_data_V_data_V_1_data_out_assign_proc : process(output_data_V_data_V_1_payload_A, output_data_V_data_V_1_payload_B, output_data_V_data_V_1_sel)
    begin
        if ((output_data_V_data_V_1_sel = ap_const_logic_1)) then 
            output_data_V_data_V_1_data_out <= output_data_V_data_V_1_payload_B;
        else 
            output_data_V_data_V_1_data_out <= output_data_V_data_V_1_payload_A;
        end if; 
    end process;

    output_data_V_data_V_1_load_A <= (output_data_V_data_V_1_state_cmp_full and not(output_data_V_data_V_1_sel_wr));
    output_data_V_data_V_1_load_B <= (output_data_V_data_V_1_state_cmp_full and output_data_V_data_V_1_sel_wr);
    output_data_V_data_V_1_sel <= output_data_V_data_V_1_sel_rd;
    output_data_V_data_V_1_state_cmp_full <= '0' when (output_data_V_data_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_data_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_data_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_data_V_1_vld_out <= output_data_V_data_V_1_state(0);
    output_data_V_dest_V_1_ack_in <= output_data_V_dest_V_1_state(1);
    output_data_V_dest_V_1_ack_out <= output_data_TREADY;

    output_data_V_dest_V_1_data_out_assign_proc : process(output_data_V_dest_V_1_payload_A, output_data_V_dest_V_1_payload_B, output_data_V_dest_V_1_sel)
    begin
        if ((output_data_V_dest_V_1_sel = ap_const_logic_1)) then 
            output_data_V_dest_V_1_data_out <= output_data_V_dest_V_1_payload_B;
        else 
            output_data_V_dest_V_1_data_out <= output_data_V_dest_V_1_payload_A;
        end if; 
    end process;

    output_data_V_dest_V_1_load_A <= (output_data_V_dest_V_1_state_cmp_full and not(output_data_V_dest_V_1_sel_wr));
    output_data_V_dest_V_1_load_B <= (output_data_V_dest_V_1_state_cmp_full and output_data_V_dest_V_1_sel_wr);
    output_data_V_dest_V_1_sel <= output_data_V_dest_V_1_sel_rd;
    output_data_V_dest_V_1_state_cmp_full <= '0' when (output_data_V_dest_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_dest_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_data_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_dest_V_1_vld_out <= output_data_V_dest_V_1_state(0);
    output_data_V_id_V_1_ack_in <= output_data_V_id_V_1_state(1);
    output_data_V_id_V_1_ack_out <= output_data_TREADY;

    output_data_V_id_V_1_data_out_assign_proc : process(output_data_V_id_V_1_payload_A, output_data_V_id_V_1_payload_B, output_data_V_id_V_1_sel)
    begin
        if ((output_data_V_id_V_1_sel = ap_const_logic_1)) then 
            output_data_V_id_V_1_data_out <= output_data_V_id_V_1_payload_B;
        else 
            output_data_V_id_V_1_data_out <= output_data_V_id_V_1_payload_A;
        end if; 
    end process;

    output_data_V_id_V_1_load_A <= (output_data_V_id_V_1_state_cmp_full and not(output_data_V_id_V_1_sel_wr));
    output_data_V_id_V_1_load_B <= (output_data_V_id_V_1_state_cmp_full and output_data_V_id_V_1_sel_wr);
    output_data_V_id_V_1_sel <= output_data_V_id_V_1_sel_rd;
    output_data_V_id_V_1_state_cmp_full <= '0' when (output_data_V_id_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_id_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_data_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_id_V_1_vld_out <= output_data_V_id_V_1_state(0);
    output_data_V_keep_V_1_ack_in <= output_data_V_keep_V_1_state(1);
    output_data_V_keep_V_1_ack_out <= output_data_TREADY;

    output_data_V_keep_V_1_data_out_assign_proc : process(output_data_V_keep_V_1_payload_A, output_data_V_keep_V_1_payload_B, output_data_V_keep_V_1_sel)
    begin
        if ((output_data_V_keep_V_1_sel = ap_const_logic_1)) then 
            output_data_V_keep_V_1_data_out <= output_data_V_keep_V_1_payload_B;
        else 
            output_data_V_keep_V_1_data_out <= output_data_V_keep_V_1_payload_A;
        end if; 
    end process;

    output_data_V_keep_V_1_load_A <= (output_data_V_keep_V_1_state_cmp_full and not(output_data_V_keep_V_1_sel_wr));
    output_data_V_keep_V_1_load_B <= (output_data_V_keep_V_1_state_cmp_full and output_data_V_keep_V_1_sel_wr);
    output_data_V_keep_V_1_sel <= output_data_V_keep_V_1_sel_rd;
    output_data_V_keep_V_1_state_cmp_full <= '0' when (output_data_V_keep_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_keep_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_data_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_keep_V_1_vld_out <= output_data_V_keep_V_1_state(0);
    output_data_V_last_V_1_ack_in <= output_data_V_last_V_1_state(1);
    output_data_V_last_V_1_ack_out <= output_data_TREADY;

    output_data_V_last_V_1_data_out_assign_proc : process(output_data_V_last_V_1_payload_A, output_data_V_last_V_1_payload_B, output_data_V_last_V_1_sel)
    begin
        if ((output_data_V_last_V_1_sel = ap_const_logic_1)) then 
            output_data_V_last_V_1_data_out <= output_data_V_last_V_1_payload_B;
        else 
            output_data_V_last_V_1_data_out <= output_data_V_last_V_1_payload_A;
        end if; 
    end process;

    output_data_V_last_V_1_load_A <= (output_data_V_last_V_1_state_cmp_full and not(output_data_V_last_V_1_sel_wr));
    output_data_V_last_V_1_load_B <= (output_data_V_last_V_1_state_cmp_full and output_data_V_last_V_1_sel_wr);
    output_data_V_last_V_1_sel <= output_data_V_last_V_1_sel_rd;
    output_data_V_last_V_1_state_cmp_full <= '0' when (output_data_V_last_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_last_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_data_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_last_V_1_vld_out <= output_data_V_last_V_1_state(0);
    output_data_V_strb_V_1_ack_in <= output_data_V_strb_V_1_state(1);
    output_data_V_strb_V_1_ack_out <= output_data_TREADY;

    output_data_V_strb_V_1_data_out_assign_proc : process(output_data_V_strb_V_1_payload_A, output_data_V_strb_V_1_payload_B, output_data_V_strb_V_1_sel)
    begin
        if ((output_data_V_strb_V_1_sel = ap_const_logic_1)) then 
            output_data_V_strb_V_1_data_out <= output_data_V_strb_V_1_payload_B;
        else 
            output_data_V_strb_V_1_data_out <= output_data_V_strb_V_1_payload_A;
        end if; 
    end process;

    output_data_V_strb_V_1_load_A <= (output_data_V_strb_V_1_state_cmp_full and not(output_data_V_strb_V_1_sel_wr));
    output_data_V_strb_V_1_load_B <= (output_data_V_strb_V_1_state_cmp_full and output_data_V_strb_V_1_sel_wr);
    output_data_V_strb_V_1_sel <= output_data_V_strb_V_1_sel_rd;
    output_data_V_strb_V_1_state_cmp_full <= '0' when (output_data_V_strb_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_strb_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_data_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_strb_V_1_vld_out <= output_data_V_strb_V_1_state(0);
    output_data_V_user_V_1_ack_in <= output_data_V_user_V_1_state(1);
    output_data_V_user_V_1_ack_out <= output_data_TREADY;

    output_data_V_user_V_1_data_out_assign_proc : process(output_data_V_user_V_1_payload_A, output_data_V_user_V_1_payload_B, output_data_V_user_V_1_sel)
    begin
        if ((output_data_V_user_V_1_sel = ap_const_logic_1)) then 
            output_data_V_user_V_1_data_out <= output_data_V_user_V_1_payload_B;
        else 
            output_data_V_user_V_1_data_out <= output_data_V_user_V_1_payload_A;
        end if; 
    end process;

    output_data_V_user_V_1_load_A <= (output_data_V_user_V_1_state_cmp_full and not(output_data_V_user_V_1_sel_wr));
    output_data_V_user_V_1_load_B <= (output_data_V_user_V_1_state_cmp_full and output_data_V_user_V_1_sel_wr);
    output_data_V_user_V_1_sel <= output_data_V_user_V_1_sel_rd;
    output_data_V_user_V_1_state_cmp_full <= '0' when (output_data_V_user_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_user_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state13)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            output_data_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_user_V_1_vld_out <= output_data_V_user_V_1_state(0);
    p_shl1_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_451_p3),11));
    p_shl2_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_421_p3),11));
    p_shl3_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_433_p3),11));
        p_shl4_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_564_p3),38));

        p_shl5_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_576_p3),38));

    p_shl6_cast_fu_653_p3 <= (tmp_16_fu_649_p1 & ap_const_lv5_0);
    p_shl7_cast_fu_665_p3 <= (tmp_17_fu_661_p1 & ap_const_lv1_0);
    p_shl8_cast_fu_623_p3 <= (tmp_13_fu_619_p1 & ap_const_lv5_0);
    p_shl9_cast_fu_635_p3 <= (tmp_14_fu_631_p1 & ap_const_lv1_0);
        tmp_10_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_510_p2),64));

    tmp_10_fu_510_p2 <= std_logic_vector(unsigned(tmp_3_reg_806) + unsigned(tmp_28_cast_fu_506_p1));
        tmp_11_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_520_p2),64));

    tmp_11_fu_520_p2 <= std_logic_vector(unsigned(tmp_6_reg_811) + unsigned(tmp_28_cast_fu_506_p1));
    tmp_12_fu_614_p2 <= std_logic_vector(signed(tmp_24_cast_fu_610_p1) + signed(tmp_9_reg_865));
    tmp_13_fu_619_p1 <= tmp_12_fu_614_p2(6 - 1 downto 0);
    tmp_14_fu_631_p1 <= tmp_12_fu_614_p2(10 - 1 downto 0);
    tmp_15_fu_643_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_623_p3) - unsigned(p_shl9_cast_fu_635_p3));
    tmp_16_fu_649_p1 <= height8_reg_318(6 - 1 downto 0);
    tmp_17_fu_661_p1 <= height8_reg_318(10 - 1 downto 0);
    tmp_18_fu_673_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_653_p3) - unsigned(p_shl7_cast_fu_665_p3));
    tmp_19_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_703_p2),64));
    tmp_19_fu_703_p2 <= std_logic_vector(unsigned(tmp_15_reg_878) + unsigned(tmp_24_fu_699_p1));
    tmp_1_fu_421_p3 <= (height_reg_284 & ap_const_lv5_0);
    tmp_20_fu_552_p2 <= "1" when (signed(depth7_reg_306) < signed(tmp_s_fu_548_p1)) else "0";
        tmp_21_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_reg_906),64));

    tmp_21_fu_713_p2 <= std_logic_vector(unsigned(tmp_18_reg_883) + unsigned(tmp_24_fu_699_p1));
    tmp_22_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Padding2D_0_height),32));
    tmp_23_fu_598_p2 <= "1" when (signed(height8_reg_318) < signed(tmp_22_fu_594_p1)) else "0";
        tmp_24_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(height8_reg_318),38));

    tmp_24_fu_699_p1 <= width9_reg_330(11 - 1 downto 0);
    tmp_25_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Padding2D_0_width),17));
    tmp_25_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Padding2D_0_width),32));
    tmp_26_fu_687_p2 <= "1" when (signed(width9_reg_330) < signed(tmp_25_fu_679_p1)) else "0";
    tmp_27_fu_724_p2 <= (tmp_fu_718_p2 or height8_reg_318);
    tmp_28_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_reg_295),11));
    tmp_28_fu_740_p2 <= std_logic_vector(signed(ap_const_lv17_1FFFF) + signed(tmp_31_cast_fu_736_p1));
    tmp_29_fu_750_p2 <= "1" when (depth7_reg_306 = tmp_32_cast_fu_746_p1) else "0";
    tmp_2_fu_433_p3 <= (height_reg_284 & ap_const_lv2_0);
    tmp_30_fu_767_p2 <= std_logic_vector(unsigned(tmp_34_cast_fu_763_p1) + unsigned(ap_const_lv17_1FFFF));
    tmp_31_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Padding2D_0_depth),17));
    tmp_31_fu_777_p2 <= "1" when (height8_reg_318 = tmp_35_cast_fu_773_p1) else "0";
        tmp_32_cast_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_740_p2),32));

    tmp_32_fu_783_p2 <= std_logic_vector(unsigned(tmp_25_cast_reg_888) + unsigned(ap_const_lv17_1FFFF));
    tmp_33_fu_792_p2 <= "1" when (width9_reg_330 = tmp_37_cast_fu_788_p1) else "0";
    tmp_34_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Padding2D_0_height),17));
        tmp_35_cast_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_767_p2),32));

        tmp_37_cast_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_32_fu_783_p2),32));

    tmp_3_fu_445_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_429_p1) - unsigned(p_shl3_cast_fu_441_p1));
    tmp_5_fu_451_p3 <= (height_reg_284 & ap_const_lv1_0);
    tmp_6_fu_463_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_429_p1) - unsigned(p_shl1_cast_fu_459_p1));
    tmp_7_fu_564_p3 <= (depth7_reg_306 & ap_const_lv5_0);
    tmp_8_fu_576_p3 <= (depth7_reg_306 & ap_const_lv1_0);
    tmp_9_fu_588_p2 <= std_logic_vector(signed(p_shl4_cast_fu_572_p1) - signed(p_shl5_cast_fu_584_p1));
    tmp_fu_718_p2 <= (width9_reg_330 or depth7_reg_306);
    tmp_s_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Padding2D_0_depth),32));
    tmp_user_V_fu_730_p2 <= "1" when (tmp_27_fu_724_p2 = ap_const_lv32_0) else "0";
    width_1_fu_475_p2 <= std_logic_vector(unsigned(width_reg_295) + unsigned(ap_const_lv5_1));
    width_2_fu_693_p2 <= std_logic_vector(unsigned(width9_reg_330) + unsigned(ap_const_lv32_1));
end behav;
