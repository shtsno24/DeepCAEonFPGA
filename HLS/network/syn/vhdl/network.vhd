-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity network is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_data_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    input_data_TVALID : IN STD_LOGIC;
    input_data_TREADY : OUT STD_LOGIC;
    input_data_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    input_data_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    input_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_data_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_data_TVALID : OUT STD_LOGIC;
    output_data_TREADY : IN STD_LOGIC;
    output_data_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_data_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "network,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.585000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=101,HLS_SYN_DSP=96,HLS_SYN_FF=10892,HLS_SYN_LUT=15911,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_data_V_data_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_vld_in : STD_LOGIC;
    signal input_data_V_data_V_0_vld_out : STD_LOGIC;
    signal input_data_V_data_V_0_ack_in : STD_LOGIC;
    signal input_data_V_data_V_0_ack_out : STD_LOGIC;
    signal input_data_V_data_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_data_V_0_sel : STD_LOGIC;
    signal input_data_V_data_V_0_load_A : STD_LOGIC;
    signal input_data_V_data_V_0_load_B : STD_LOGIC;
    signal input_data_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_keep_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_keep_V_0_vld_in : STD_LOGIC;
    signal input_data_V_keep_V_0_vld_out : STD_LOGIC;
    signal input_data_V_keep_V_0_ack_in : STD_LOGIC;
    signal input_data_V_keep_V_0_ack_out : STD_LOGIC;
    signal input_data_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_keep_V_0_sel : STD_LOGIC;
    signal input_data_V_keep_V_0_load_A : STD_LOGIC;
    signal input_data_V_keep_V_0_load_B : STD_LOGIC;
    signal input_data_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_strb_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_strb_V_0_vld_in : STD_LOGIC;
    signal input_data_V_strb_V_0_vld_out : STD_LOGIC;
    signal input_data_V_strb_V_0_ack_in : STD_LOGIC;
    signal input_data_V_strb_V_0_ack_out : STD_LOGIC;
    signal input_data_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal input_data_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_strb_V_0_sel : STD_LOGIC;
    signal input_data_V_strb_V_0_load_A : STD_LOGIC;
    signal input_data_V_strb_V_0_load_B : STD_LOGIC;
    signal input_data_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_id_V_0_vld_in : STD_LOGIC;
    signal input_data_V_id_V_0_vld_out : STD_LOGIC;
    signal input_data_V_id_V_0_ack_in : STD_LOGIC;
    signal input_data_V_id_V_0_ack_out : STD_LOGIC;
    signal input_data_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_id_V_0_sel : STD_LOGIC;
    signal input_data_V_id_V_0_load_A : STD_LOGIC;
    signal input_data_V_id_V_0_load_B : STD_LOGIC;
    signal input_data_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal input_data_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_dest_V_0_vld_in : STD_LOGIC;
    signal input_data_V_dest_V_0_vld_out : STD_LOGIC;
    signal input_data_V_dest_V_0_ack_in : STD_LOGIC;
    signal input_data_V_dest_V_0_ack_out : STD_LOGIC;
    signal input_data_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal input_data_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal input_data_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal input_data_V_dest_V_0_sel : STD_LOGIC;
    signal input_data_V_dest_V_0_load_A : STD_LOGIC;
    signal input_data_V_dest_V_0_load_B : STD_LOGIC;
    signal input_data_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_data_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal output_data_V_data_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_vld_in : STD_LOGIC;
    signal output_data_V_data_V_1_vld_out : STD_LOGIC;
    signal output_data_V_data_V_1_ack_in : STD_LOGIC;
    signal output_data_V_data_V_1_ack_out : STD_LOGIC;
    signal output_data_V_data_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal output_data_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_data_V_1_sel : STD_LOGIC;
    signal output_data_V_data_V_1_load_A : STD_LOGIC;
    signal output_data_V_data_V_1_load_B : STD_LOGIC;
    signal output_data_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_keep_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_keep_V_1_vld_in : STD_LOGIC;
    signal output_data_V_keep_V_1_vld_out : STD_LOGIC;
    signal output_data_V_keep_V_1_ack_in : STD_LOGIC;
    signal output_data_V_keep_V_1_ack_out : STD_LOGIC;
    signal output_data_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_keep_V_1_sel : STD_LOGIC;
    signal output_data_V_keep_V_1_load_A : STD_LOGIC;
    signal output_data_V_keep_V_1_load_B : STD_LOGIC;
    signal output_data_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_strb_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_strb_V_1_vld_in : STD_LOGIC;
    signal output_data_V_strb_V_1_vld_out : STD_LOGIC;
    signal output_data_V_strb_V_1_ack_in : STD_LOGIC;
    signal output_data_V_strb_V_1_ack_out : STD_LOGIC;
    signal output_data_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal output_data_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_strb_V_1_sel : STD_LOGIC;
    signal output_data_V_strb_V_1_load_A : STD_LOGIC;
    signal output_data_V_strb_V_1_load_B : STD_LOGIC;
    signal output_data_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_vld_in : STD_LOGIC;
    signal output_data_V_user_V_1_vld_out : STD_LOGIC;
    signal output_data_V_user_V_1_ack_in : STD_LOGIC;
    signal output_data_V_user_V_1_ack_out : STD_LOGIC;
    signal output_data_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_user_V_1_sel : STD_LOGIC;
    signal output_data_V_user_V_1_load_A : STD_LOGIC;
    signal output_data_V_user_V_1_load_B : STD_LOGIC;
    signal output_data_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_vld_in : STD_LOGIC;
    signal output_data_V_last_V_1_vld_out : STD_LOGIC;
    signal output_data_V_last_V_1_ack_in : STD_LOGIC;
    signal output_data_V_last_V_1_ack_out : STD_LOGIC;
    signal output_data_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_last_V_1_sel : STD_LOGIC;
    signal output_data_V_last_V_1_load_A : STD_LOGIC;
    signal output_data_V_last_V_1_load_B : STD_LOGIC;
    signal output_data_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_id_V_1_vld_in : STD_LOGIC;
    signal output_data_V_id_V_1_vld_out : STD_LOGIC;
    signal output_data_V_id_V_1_ack_in : STD_LOGIC;
    signal output_data_V_id_V_1_ack_out : STD_LOGIC;
    signal output_data_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_id_V_1_sel : STD_LOGIC;
    signal output_data_V_id_V_1_load_A : STD_LOGIC;
    signal output_data_V_id_V_1_load_B : STD_LOGIC;
    signal output_data_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal output_data_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_dest_V_1_vld_in : STD_LOGIC;
    signal output_data_V_dest_V_1_vld_out : STD_LOGIC;
    signal output_data_V_dest_V_1_ack_in : STD_LOGIC;
    signal output_data_V_dest_V_1_ack_out : STD_LOGIC;
    signal output_data_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal output_data_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal output_data_V_dest_V_1_sel : STD_LOGIC;
    signal output_data_V_dest_V_1_load_A : STD_LOGIC;
    signal output_data_V_dest_V_1_load_B : STD_LOGIC;
    signal output_data_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_data_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal Padding2D_0_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal Padding2D_0_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Padding2D_0_array_ce0 : STD_LOGIC;
    signal Padding2D_0_array_we0 : STD_LOGIC;
    signal Padding2D_0_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_0_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    signal Padding2D_0_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal SeparableConv2D_0_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_0_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_0_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_0_m_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SeparableConv2D_0_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_0_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_0_ar_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_0_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_0_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_0_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal MaxPooling2D_0_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal MaxPooling2D_0_heigh : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal MaxPooling2D_0_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal MaxPooling2D_0_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal MaxPooling2D_0_array_ce0 : STD_LOGIC;
    signal MaxPooling2D_0_array_we0 : STD_LOGIC;
    signal MaxPooling2D_0_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_1_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal Padding2D_1_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal Padding2D_1_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Padding2D_1_array_ce0 : STD_LOGIC;
    signal Padding2D_1_array_we0 : STD_LOGIC;
    signal Padding2D_1_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_1_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_1_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal SeparableConv2D_1_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal SeparableConv2D_1_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal SeparableConv2D_1_m_s_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal SeparableConv2D_1_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_1_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_1_ar_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal SeparableConv2D_1_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_1_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_1_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal MaxPooling2D_1_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal MaxPooling2D_1_heigh : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    signal MaxPooling2D_1_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    signal MaxPooling2D_1_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal MaxPooling2D_1_array_ce0 : STD_LOGIC;
    signal MaxPooling2D_1_array_we0 : STD_LOGIC;
    signal MaxPooling2D_1_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_2_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001001";
    signal Padding2D_2_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001001";
    signal Padding2D_2_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Padding2D_2_array_ce0 : STD_LOGIC;
    signal Padding2D_2_array_we0 : STD_LOGIC;
    signal Padding2D_2_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_2_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal SeparableConv2D_2_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal SeparableConv2D_2_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    signal SeparableConv2D_2_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    signal SeparableConv2D_2_m_s_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal SeparableConv2D_2_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_2_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_2_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_2_ar_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal SeparableConv2D_2_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_2_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_2_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal UpSampling2D_0_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal UpSampling2D_0_heigh : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal UpSampling2D_0_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal UpSampling2D_0_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal UpSampling2D_0_array_ce0 : STD_LOGIC;
    signal UpSampling2D_0_array_we0 : STD_LOGIC;
    signal UpSampling2D_0_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_3_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal Padding2D_3_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal Padding2D_3_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Padding2D_3_array_ce0 : STD_LOGIC;
    signal Padding2D_3_array_we0 : STD_LOGIC;
    signal Padding2D_3_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_3_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    signal SeparableConv2D_3_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_3_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal SeparableConv2D_3_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001110";
    signal SeparableConv2D_3_m_s_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal SeparableConv2D_3_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_3_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_3_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_3_ar_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal SeparableConv2D_3_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_3_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_3_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal UpSampling2D_1_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal UpSampling2D_1_heigh : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal UpSampling2D_1_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal UpSampling2D_1_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal UpSampling2D_1_array_ce0 : STD_LOGIC;
    signal UpSampling2D_1_array_we0 : STD_LOGIC;
    signal UpSampling2D_1_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_4_height : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal Padding2D_4_width : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011110";
    signal Padding2D_4_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal Padding2D_4_array_ce0 : STD_LOGIC;
    signal Padding2D_4_array_we0 : STD_LOGIC;
    signal Padding2D_4_array_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Padding2D_4_depth : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    signal SeparableConv2D_4_de : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    signal SeparableConv2D_4_he : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_4_wi : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    signal SeparableConv2D_4_m_s_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal SeparableConv2D_4_m_s_ce0 : STD_LOGIC;
    signal SeparableConv2D_4_m_s_we0 : STD_LOGIC;
    signal SeparableConv2D_4_m_s_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal SeparableConv2D_4_ar_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal SeparableConv2D_4_ar_ce0 : STD_LOGIC;
    signal SeparableConv2D_4_ar_we0 : STD_LOGIC;
    signal SeparableConv2D_4_ar_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal reg_950 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond2_fu_1132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal reg_956 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_963 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_970 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_976 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_982 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_988 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_994 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1000 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal reg_1007 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1014 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal reg_1020 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1026 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1032 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal reg_1038 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_1051 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1058 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1070 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1076 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal reg_1082 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1088 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal reg_1095 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1102 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal reg_1108 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1114 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1120 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal reg_1126 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_4_fu_1138_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal height_4_reg_1532 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_1168_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_reg_1537 : STD_LOGIC_VECTOR (10 downto 0);
    signal width_6_fu_1180_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal depth_fu_1289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal depth_reg_1625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_6_fu_1319_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_6_reg_1630 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_86_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal height_3_fu_1335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_3_reg_1638 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_11_fu_1374_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_reg_1643 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_89_fu_1329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_1404_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_reg_1648 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_93_cast_fu_1414_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_93_cast_reg_1653 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal width_7_fu_1424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_7_reg_1661 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1444_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_reg_1671 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_user_V_fu_1461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_1676 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_fu_1481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_94_reg_1681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_data_V_1_reg_1705 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_0_keep_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_0_strb_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal out_0_id_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_0_dest_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_0_array_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_0_array_0_ce0 : STD_LOGIC;
    signal input_0_array_0_we0 : STD_LOGIC;
    signal input_0_array_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_0_keep_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_0_keep_V_ce0 : STD_LOGIC;
    signal out_0_keep_V_we0 : STD_LOGIC;
    signal out_0_strb_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_0_strb_V_ce0 : STD_LOGIC;
    signal out_0_strb_V_we0 : STD_LOGIC;
    signal out_0_id_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_0_id_V_ce0 : STD_LOGIC;
    signal out_0_id_V_we0 : STD_LOGIC;
    signal out_0_dest_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_0_dest_V_ce0 : STD_LOGIC;
    signal out_0_dest_V_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_506_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_fu_506_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_fu_506_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_fu_506_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_fu_506_input_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_padding2d_fix16_fu_506_input_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_506_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_padding2d_fix16_fu_506_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_506_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_fu_506_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_3_fu_519_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_519_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_519_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_519_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_519_input_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_padding2d_fix16_3_fu_519_input_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_519_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_padding2d_fix16_3_fu_519_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_519_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_3_fu_519_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_1_fu_532_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_532_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_532_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_532_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_532_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_padding2d_fix16_1_fu_532_input_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_532_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_padding2d_fix16_1_fu_532_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_532_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_1_fu_532_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_2_fu_545_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_545_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_545_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_545_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_545_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_padding2d_fix16_2_fu_545_input_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_545_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_2_fu_545_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_545_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_2_fu_545_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_1_fu_558_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_558_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_558_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_558_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_558_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_depthwise_conv2d_fix_1_fu_558_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_558_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_1_fu_558_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_1_fu_558_Padding2D_4_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_depthwise_conv2d_fix_1_fu_558_Padding2D_4_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_573_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_573_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_573_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_573_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_573_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_depthwise_conv2d_fix_2_fu_573_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_573_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_2_fu_573_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_2_fu_573_Padding2D_1_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_depthwise_conv2d_fix_2_fu_573_Padding2D_1_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_588_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_588_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_588_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_588_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_588_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_depthwise_conv2d_fix_3_fu_588_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_588_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_3_fu_588_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_3_fu_588_Padding2D_3_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_depthwise_conv2d_fix_3_fu_588_Padding2D_3_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_603_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_603_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_603_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_603_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_603_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_depthwise_conv2d_fix_4_fu_603_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_603_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_4_fu_603_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_4_fu_603_Padding2D_2_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_depthwise_conv2d_fix_4_fu_603_Padding2D_2_array_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_618_ap_start : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_618_ap_done : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_618_ap_idle : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_618_ap_ready : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_618_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_depthwise_conv2d_fix_fu_618_output_r_ce0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_618_output_r_we0 : STD_LOGIC;
    signal grp_depthwise_conv2d_fix_fu_618_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_depthwise_conv2d_fix_fu_618_Padding2D_0_array_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_depthwise_conv2d_fix_fu_618_Padding2D_0_array_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_633_ap_start : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_633_ap_done : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_633_ap_idle : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_633_ap_ready : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_633_SeparableConv2D_0_ar_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pooling2d_fix16_1_fu_633_SeparableConv2D_0_ar_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_we0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_3_fu_646_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_646_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_646_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_646_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_646_output_r_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pointwise_conv2d_fix_3_fu_646_output_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_646_output_r_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_3_fu_646_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_3_fu_646_SeparableConv2D_3_m_s_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pointwise_conv2d_fix_3_fu_646_SeparableConv2D_3_m_s_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_660_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_660_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_660_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_660_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_m_s_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_m_s_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_674_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_674_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_674_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_674_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_674_output_r_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_pointwise_conv2d_fix_fu_674_output_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_674_output_r_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_fu_674_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_fu_674_SeparableConv2D_0_m_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pointwise_conv2d_fix_fu_674_SeparableConv2D_0_m_s_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_688_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_688_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_688_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_688_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_688_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pointwise_conv2d_fix_4_fu_688_output_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_688_output_r_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_4_fu_688_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_4_fu_688_SeparableConv2D_2_m_s_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_pointwise_conv2d_fix_4_fu_688_SeparableConv2D_2_m_s_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_702_ap_start : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_702_ap_done : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_702_ap_idle : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_702_ap_ready : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_702_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pooling2d_fix16_fu_702_input_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_ce0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_we0 : STD_LOGIC;
    signal grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_1_fu_715_ap_start : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_715_ap_done : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_715_ap_idle : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_715_ap_ready : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_715_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pointwise_conv2d_fix_1_fu_715_output_r_ce0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_715_output_r_we0 : STD_LOGIC;
    signal grp_pointwise_conv2d_fix_1_fu_715_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pointwise_conv2d_fix_1_fu_715_SeparableConv2D_4_m_s_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_pointwise_conv2d_fix_1_fu_715_SeparableConv2D_4_m_s_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_727_ap_start : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_727_ap_done : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_727_ap_idle : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_727_ap_ready : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_727_SeparableConv2D_3_ar_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_up_sampling2d_fix16_fu_727_SeparableConv2D_3_ar_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_we0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_up_sampling2d_fix16_1_fu_740_ap_start : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_740_ap_done : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_740_ap_idle : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_740_ap_ready : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_740_SeparableConv2D_2_ar_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_up_sampling2d_fix16_1_fu_740_SeparableConv2D_2_ar_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_ce0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_we0 : STD_LOGIC;
    signal grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_padding2d_fix16_4_fu_753_ap_start : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_753_ap_done : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_753_ap_idle : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_753_ap_ready : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_753_input_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_4_fu_753_input_0_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_753_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_padding2d_fix16_4_fu_753_output_r_ce0 : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_753_output_r_we0 : STD_LOGIC;
    signal grp_padding2d_fix16_4_fu_753_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_reg_432 : STD_LOGIC_VECTOR (4 downto 0);
    signal width_reg_443 : STD_LOGIC_VECTOR (4 downto 0);
    signal depth7_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal height8_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal width9_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_1523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_1508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_padding2d_fix16_fu_506_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_padding2d_fix16_3_fu_519_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_padding2d_fix16_1_fu_532_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_padding2d_fix16_2_fu_545_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_depthwise_conv2d_fix_1_fu_558_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_depthwise_conv2d_fix_2_fu_573_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_depthwise_conv2d_fix_3_fu_588_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_depthwise_conv2d_fix_4_fu_603_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_depthwise_conv2d_fix_fu_618_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_max_pooling2d_fix16_1_fu_633_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_pointwise_conv2d_fix_3_fu_646_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_pointwise_conv2d_fix_2_fu_660_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_pointwise_conv2d_fix_fu_674_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_pointwise_conv2d_fix_4_fu_688_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_max_pooling2d_fix16_fu_702_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_pointwise_conv2d_fix_1_fu_715_ap_start_reg : STD_LOGIC := '0';
    signal grp_up_sampling2d_fix16_fu_727_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_up_sampling2d_fix16_1_fu_740_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_padding2d_fix16_4_fu_753_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_cast_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_cast_fu_1439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_cast_fu_1487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_1144_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_1156_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_1152_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_1164_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_88_cast_fu_1211_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_1215_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_1279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_1295_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_5_fu_1307_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_shl2_cast_fu_1303_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_shl3_cast_fu_1315_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_88_fu_1325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_91_cast_fu_1341_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_8_fu_1345_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_12_fu_1350_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_1362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl6_cast_fu_1354_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl7_cast_fu_1366_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_17_fu_1380_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_1392_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_1384_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_1396_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_90_fu_1410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_1430_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_15_fu_1434_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_1449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_fu_1455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_98_cast_fu_1467_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_93_fu_1471_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_99_cast_fu_1477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_cast_fu_1494_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_95_fu_1498_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_102_cast_fu_1504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_fu_1514_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_104_cast_fu_1519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_block_state47 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_condition_1866 : BOOLEAN;
    signal ap_condition_1872 : BOOLEAN;

    component padding2d_fix16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_4_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        Padding2D_4_array_ce0 : OUT STD_LOGIC;
        Padding2D_4_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_1_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        Padding2D_1_array_ce0 : OUT STD_LOGIC;
        Padding2D_1_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_3_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        Padding2D_3_array_ce0 : OUT STD_LOGIC;
        Padding2D_3_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_2_array_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Padding2D_2_array_ce0 : OUT STD_LOGIC;
        Padding2D_2_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component depthwise_conv2d_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        Padding2D_0_array_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Padding2D_0_array_ce0 : OUT STD_LOGIC;
        Padding2D_0_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component max_pooling2d_fix16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_0_ar_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        SeparableConv2D_0_ar_ce0 : OUT STD_LOGIC;
        SeparableConv2D_0_ar_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        MaxPooling2D_0_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        MaxPooling2D_0_array_ce0 : OUT STD_LOGIC;
        MaxPooling2D_0_array_we0 : OUT STD_LOGIC;
        MaxPooling2D_0_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        MaxPooling2D_0_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_3_m_s_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SeparableConv2D_3_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_3_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_1_ar_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        SeparableConv2D_1_ar_ce0 : OUT STD_LOGIC;
        SeparableConv2D_1_ar_we0 : OUT STD_LOGIC;
        SeparableConv2D_1_ar_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_1_m_s_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        SeparableConv2D_1_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_1_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_0_m_s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        SeparableConv2D_0_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_0_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_2_m_s_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        SeparableConv2D_2_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_2_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component max_pooling2d_fix16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        MaxPooling2D_1_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        MaxPooling2D_1_array_ce0 : OUT STD_LOGIC;
        MaxPooling2D_1_array_we0 : OUT STD_LOGIC;
        MaxPooling2D_1_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        MaxPooling2D_1_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component pointwise_conv2d_fix_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_4_m_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        SeparableConv2D_4_m_s_ce0 : OUT STD_LOGIC;
        SeparableConv2D_4_m_s_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component up_sampling2d_fix16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_3_ar_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        SeparableConv2D_3_ar_ce0 : OUT STD_LOGIC;
        SeparableConv2D_3_ar_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        UpSampling2D_1_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        UpSampling2D_1_array_ce0 : OUT STD_LOGIC;
        UpSampling2D_1_array_we0 : OUT STD_LOGIC;
        UpSampling2D_1_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component up_sampling2d_fix16_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_height : IN STD_LOGIC_VECTOR (15 downto 0);
        input_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
        output_height : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        SeparableConv2D_2_ar_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        SeparableConv2D_2_ar_ce0 : OUT STD_LOGIC;
        SeparableConv2D_2_ar_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        UpSampling2D_0_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        UpSampling2D_0_array_ce0 : OUT STD_LOGIC;
        UpSampling2D_0_array_we0 : OUT STD_LOGIC;
        UpSampling2D_0_array_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component padding2d_fix16_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_0_ce0 : OUT STD_LOGIC;
        input_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_width : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_0_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_SeparableConv2D_0_m_s IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_SeparableConv2D_0_ar IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_MaxPooling2D_0_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_1_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_SeparableConv2D_1_ar IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_MaxPooling2D_1_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_2_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_3_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_Padding2D_4_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_input_0_array_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component network_out_0_keep_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component network_out_0_id_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component network_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    Padding2D_0_array_U : component network_Padding2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 900,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_0_array_address0,
        ce0 => Padding2D_0_array_ce0,
        we0 => Padding2D_0_array_we0,
        d0 => grp_padding2d_fix16_4_fu_753_output_r_d0,
        q0 => Padding2D_0_array_q0);

    SeparableConv2D_0_m_s_U : component network_SeparableConv2D_0_m_s
    generic map (
        DataWidth => 16,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_0_m_s_address0,
        ce0 => SeparableConv2D_0_m_s_ce0,
        we0 => SeparableConv2D_0_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_fu_618_output_r_d0,
        q0 => SeparableConv2D_0_m_s_q0);

    SeparableConv2D_0_ar_U : component network_SeparableConv2D_0_ar
    generic map (
        DataWidth => 16,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_0_ar_address0,
        ce0 => SeparableConv2D_0_ar_ce0,
        we0 => SeparableConv2D_0_ar_we0,
        d0 => grp_pointwise_conv2d_fix_fu_674_output_r_d0,
        q0 => SeparableConv2D_0_ar_q0);

    MaxPooling2D_0_array_U : component network_MaxPooling2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => MaxPooling2D_0_array_address0,
        ce0 => MaxPooling2D_0_array_ce0,
        we0 => MaxPooling2D_0_array_we0,
        d0 => grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_d0,
        q0 => MaxPooling2D_0_array_q0);

    Padding2D_1_array_U : component network_Padding2D_1_array
    generic map (
        DataWidth => 16,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_1_array_address0,
        ce0 => Padding2D_1_array_ce0,
        we0 => Padding2D_1_array_we0,
        d0 => grp_padding2d_fix16_3_fu_519_output_r_d0,
        q0 => Padding2D_1_array_q0);

    SeparableConv2D_1_m_s_U : component network_MaxPooling2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_1_m_s_address0,
        ce0 => SeparableConv2D_1_m_s_ce0,
        we0 => SeparableConv2D_1_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_2_fu_573_output_r_d0,
        q0 => SeparableConv2D_1_m_s_q0);

    SeparableConv2D_1_ar_U : component network_SeparableConv2D_1_ar
    generic map (
        DataWidth => 16,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_1_ar_address0,
        ce0 => SeparableConv2D_1_ar_ce0,
        we0 => SeparableConv2D_1_ar_we0,
        d0 => grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_d0,
        q0 => SeparableConv2D_1_ar_q0);

    MaxPooling2D_1_array_U : component network_MaxPooling2D_1_array
    generic map (
        DataWidth => 16,
        AddressRange => 392,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => MaxPooling2D_1_array_address0,
        ce0 => MaxPooling2D_1_array_ce0,
        we0 => MaxPooling2D_1_array_we0,
        d0 => grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_d0,
        q0 => MaxPooling2D_1_array_q0);

    Padding2D_2_array_U : component network_Padding2D_2_array
    generic map (
        DataWidth => 16,
        AddressRange => 648,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_2_array_address0,
        ce0 => Padding2D_2_array_ce0,
        we0 => Padding2D_2_array_we0,
        d0 => grp_padding2d_fix16_2_fu_545_output_r_d0,
        q0 => Padding2D_2_array_q0);

    SeparableConv2D_2_m_s_U : component network_MaxPooling2D_1_array
    generic map (
        DataWidth => 16,
        AddressRange => 392,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_2_m_s_address0,
        ce0 => SeparableConv2D_2_m_s_ce0,
        we0 => SeparableConv2D_2_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_4_fu_603_output_r_d0,
        q0 => SeparableConv2D_2_m_s_q0);

    SeparableConv2D_2_ar_U : component network_MaxPooling2D_1_array
    generic map (
        DataWidth => 16,
        AddressRange => 392,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_2_ar_address0,
        ce0 => SeparableConv2D_2_ar_ce0,
        we0 => SeparableConv2D_2_ar_we0,
        d0 => grp_pointwise_conv2d_fix_4_fu_688_output_r_d0,
        q0 => SeparableConv2D_2_ar_q0);

    UpSampling2D_0_array_U : component network_SeparableConv2D_1_ar
    generic map (
        DataWidth => 16,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => UpSampling2D_0_array_address0,
        ce0 => UpSampling2D_0_array_ce0,
        we0 => UpSampling2D_0_array_we0,
        d0 => grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_d0,
        q0 => UpSampling2D_0_array_q0);

    Padding2D_3_array_U : component network_Padding2D_3_array
    generic map (
        DataWidth => 16,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_3_array_address0,
        ce0 => Padding2D_3_array_ce0,
        we0 => Padding2D_3_array_we0,
        d0 => grp_padding2d_fix16_1_fu_532_output_r_d0,
        q0 => Padding2D_3_array_q0);

    SeparableConv2D_3_m_s_U : component network_SeparableConv2D_1_ar
    generic map (
        DataWidth => 16,
        AddressRange => 1568,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_3_m_s_address0,
        ce0 => SeparableConv2D_3_m_s_ce0,
        we0 => SeparableConv2D_3_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_3_fu_588_output_r_d0,
        q0 => SeparableConv2D_3_m_s_q0);

    SeparableConv2D_3_ar_U : component network_MaxPooling2D_0_array
    generic map (
        DataWidth => 16,
        AddressRange => 3136,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_3_ar_address0,
        ce0 => SeparableConv2D_3_ar_ce0,
        we0 => SeparableConv2D_3_ar_we0,
        d0 => grp_pointwise_conv2d_fix_3_fu_646_output_r_d0,
        q0 => SeparableConv2D_3_ar_q0);

    UpSampling2D_1_array_U : component network_SeparableConv2D_0_ar
    generic map (
        DataWidth => 16,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => UpSampling2D_1_array_address0,
        ce0 => UpSampling2D_1_array_ce0,
        we0 => UpSampling2D_1_array_we0,
        d0 => grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_d0,
        q0 => UpSampling2D_1_array_q0);

    Padding2D_4_array_U : component network_Padding2D_4_array
    generic map (
        DataWidth => 16,
        AddressRange => 14400,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Padding2D_4_array_address0,
        ce0 => Padding2D_4_array_ce0,
        we0 => Padding2D_4_array_we0,
        d0 => grp_padding2d_fix16_fu_506_output_r_d0,
        q0 => Padding2D_4_array_q0);

    SeparableConv2D_4_m_s_U : component network_SeparableConv2D_0_ar
    generic map (
        DataWidth => 16,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_4_m_s_address0,
        ce0 => SeparableConv2D_4_m_s_ce0,
        we0 => SeparableConv2D_4_m_s_we0,
        d0 => grp_depthwise_conv2d_fix_1_fu_558_output_r_d0,
        q0 => SeparableConv2D_4_m_s_q0);

    SeparableConv2D_4_ar_U : component network_SeparableConv2D_0_m_s
    generic map (
        DataWidth => 16,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SeparableConv2D_4_ar_address0,
        ce0 => SeparableConv2D_4_ar_ce0,
        we0 => SeparableConv2D_4_ar_we0,
        d0 => grp_pointwise_conv2d_fix_1_fu_715_output_r_d0,
        q0 => SeparableConv2D_4_ar_q0);

    network_AXILiteS_s_axi_U : component network_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    input_0_array_0_U : component network_input_0_array_0
    generic map (
        DataWidth => 16,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_0_array_0_address0,
        ce0 => input_0_array_0_ce0,
        we0 => input_0_array_0_we0,
        d0 => input_data_V_data_V_0_data_out,
        q0 => input_0_array_0_q0);

    out_0_keep_V_U : component network_out_0_keep_V
    generic map (
        DataWidth => 2,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_keep_V_address0,
        ce0 => out_0_keep_V_ce0,
        we0 => out_0_keep_V_we0,
        d0 => input_data_V_keep_V_0_data_out,
        q0 => out_0_keep_V_q0);

    out_0_strb_V_U : component network_out_0_keep_V
    generic map (
        DataWidth => 2,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_strb_V_address0,
        ce0 => out_0_strb_V_ce0,
        we0 => out_0_strb_V_we0,
        d0 => input_data_V_strb_V_0_data_out,
        q0 => out_0_strb_V_q0);

    out_0_id_V_U : component network_out_0_id_V
    generic map (
        DataWidth => 1,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_id_V_address0,
        ce0 => out_0_id_V_ce0,
        we0 => out_0_id_V_we0,
        d0 => input_data_V_id_V_0_data_out,
        q0 => out_0_id_V_q0);

    out_0_dest_V_U : component network_out_0_id_V
    generic map (
        DataWidth => 1,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => out_0_dest_V_address0,
        ce0 => out_0_dest_V_ce0,
        we0 => out_0_dest_V_we0,
        d0 => input_data_V_dest_V_0_data_out,
        q0 => out_0_dest_V_q0);

    grp_padding2d_fix16_fu_506 : component padding2d_fix16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_fu_506_ap_start,
        ap_done => grp_padding2d_fix16_fu_506_ap_done,
        ap_idle => grp_padding2d_fix16_fu_506_ap_idle,
        ap_ready => grp_padding2d_fix16_fu_506_ap_ready,
        input_depth => reg_1102,
        input_height => reg_1108,
        input_width => reg_1114,
        input_r_address0 => grp_padding2d_fix16_fu_506_input_r_address0,
        input_r_ce0 => grp_padding2d_fix16_fu_506_input_r_ce0,
        input_r_q0 => UpSampling2D_1_array_q0,
        output_height => reg_1120,
        output_width => reg_1126,
        output_r_address0 => grp_padding2d_fix16_fu_506_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_fu_506_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_fu_506_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_fu_506_output_r_d0);

    grp_padding2d_fix16_3_fu_519 : component padding2d_fix16_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_3_fu_519_ap_start,
        ap_done => grp_padding2d_fix16_3_fu_519_ap_done,
        ap_idle => grp_padding2d_fix16_3_fu_519_ap_idle,
        ap_ready => grp_padding2d_fix16_3_fu_519_ap_ready,
        input_depth => reg_970,
        input_height => reg_976,
        input_width => reg_982,
        input_r_address0 => grp_padding2d_fix16_3_fu_519_input_r_address0,
        input_r_ce0 => grp_padding2d_fix16_3_fu_519_input_r_ce0,
        input_r_q0 => MaxPooling2D_0_array_q0,
        output_height => reg_988,
        output_width => reg_994,
        output_r_address0 => grp_padding2d_fix16_3_fu_519_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_3_fu_519_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_3_fu_519_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_3_fu_519_output_r_d0);

    grp_padding2d_fix16_1_fu_532 : component padding2d_fix16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_1_fu_532_ap_start,
        ap_done => grp_padding2d_fix16_1_fu_532_ap_done,
        ap_idle => grp_padding2d_fix16_1_fu_532_ap_idle,
        ap_ready => grp_padding2d_fix16_1_fu_532_ap_ready,
        input_depth => reg_1058,
        input_height => reg_1064,
        input_width => reg_1070,
        input_r_address0 => grp_padding2d_fix16_1_fu_532_input_r_address0,
        input_r_ce0 => grp_padding2d_fix16_1_fu_532_input_r_ce0,
        input_r_q0 => UpSampling2D_0_array_q0,
        output_height => reg_1076,
        output_width => reg_1082,
        output_r_address0 => grp_padding2d_fix16_1_fu_532_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_1_fu_532_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_1_fu_532_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_1_fu_532_output_r_d0);

    grp_padding2d_fix16_2_fu_545 : component padding2d_fix16_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_2_fu_545_ap_start,
        ap_done => grp_padding2d_fix16_2_fu_545_ap_done,
        ap_idle => grp_padding2d_fix16_2_fu_545_ap_idle,
        ap_ready => grp_padding2d_fix16_2_fu_545_ap_ready,
        input_depth => reg_1014,
        input_height => reg_1020,
        input_width => reg_1026,
        input_r_address0 => grp_padding2d_fix16_2_fu_545_input_r_address0,
        input_r_ce0 => grp_padding2d_fix16_2_fu_545_input_r_ce0,
        input_r_q0 => MaxPooling2D_1_array_q0,
        output_height => reg_1032,
        output_width => reg_1038,
        output_r_address0 => grp_padding2d_fix16_2_fu_545_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_2_fu_545_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_2_fu_545_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_2_fu_545_output_r_d0);

    grp_depthwise_conv2d_fix_1_fu_558 : component depthwise_conv2d_fix_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_1_fu_558_ap_start,
        ap_done => grp_depthwise_conv2d_fix_1_fu_558_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_1_fu_558_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_1_fu_558_ap_ready,
        input_height => reg_1120,
        input_width => reg_1126,
        output_depth => Padding2D_4_depth,
        output_height => SeparableConv2D_4_he,
        output_width => SeparableConv2D_4_wi,
        output_r_address0 => grp_depthwise_conv2d_fix_1_fu_558_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_1_fu_558_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_1_fu_558_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_1_fu_558_output_r_d0,
        output_r_q0 => SeparableConv2D_4_m_s_q0,
        Padding2D_4_array_address0 => grp_depthwise_conv2d_fix_1_fu_558_Padding2D_4_array_address0,
        Padding2D_4_array_ce0 => grp_depthwise_conv2d_fix_1_fu_558_Padding2D_4_array_ce0,
        Padding2D_4_array_q0 => Padding2D_4_array_q0);

    grp_depthwise_conv2d_fix_2_fu_573 : component depthwise_conv2d_fix_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_2_fu_573_ap_start,
        ap_done => grp_depthwise_conv2d_fix_2_fu_573_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_2_fu_573_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_2_fu_573_ap_ready,
        input_height => reg_988,
        input_width => reg_994,
        output_depth => Padding2D_1_depth,
        output_height => reg_1000,
        output_width => reg_1007,
        output_r_address0 => grp_depthwise_conv2d_fix_2_fu_573_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_2_fu_573_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_2_fu_573_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_2_fu_573_output_r_d0,
        output_r_q0 => SeparableConv2D_1_m_s_q0,
        Padding2D_1_array_address0 => grp_depthwise_conv2d_fix_2_fu_573_Padding2D_1_array_address0,
        Padding2D_1_array_ce0 => grp_depthwise_conv2d_fix_2_fu_573_Padding2D_1_array_ce0,
        Padding2D_1_array_q0 => Padding2D_1_array_q0);

    grp_depthwise_conv2d_fix_3_fu_588 : component depthwise_conv2d_fix_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_3_fu_588_ap_start,
        ap_done => grp_depthwise_conv2d_fix_3_fu_588_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_3_fu_588_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_3_fu_588_ap_ready,
        input_height => reg_1076,
        input_width => reg_1082,
        output_depth => Padding2D_3_depth,
        output_height => reg_1088,
        output_width => reg_1095,
        output_r_address0 => grp_depthwise_conv2d_fix_3_fu_588_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_3_fu_588_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_3_fu_588_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_3_fu_588_output_r_d0,
        output_r_q0 => SeparableConv2D_3_m_s_q0,
        Padding2D_3_array_address0 => grp_depthwise_conv2d_fix_3_fu_588_Padding2D_3_array_address0,
        Padding2D_3_array_ce0 => grp_depthwise_conv2d_fix_3_fu_588_Padding2D_3_array_ce0,
        Padding2D_3_array_q0 => Padding2D_3_array_q0);

    grp_depthwise_conv2d_fix_4_fu_603 : component depthwise_conv2d_fix_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_4_fu_603_ap_start,
        ap_done => grp_depthwise_conv2d_fix_4_fu_603_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_4_fu_603_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_4_fu_603_ap_ready,
        input_height => reg_1032,
        input_width => reg_1038,
        output_depth => Padding2D_2_depth,
        output_height => reg_1044,
        output_width => reg_1051,
        output_r_address0 => grp_depthwise_conv2d_fix_4_fu_603_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_4_fu_603_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_4_fu_603_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_4_fu_603_output_r_d0,
        output_r_q0 => SeparableConv2D_2_m_s_q0,
        Padding2D_2_array_address0 => grp_depthwise_conv2d_fix_4_fu_603_Padding2D_2_array_address0,
        Padding2D_2_array_ce0 => grp_depthwise_conv2d_fix_4_fu_603_Padding2D_2_array_ce0,
        Padding2D_2_array_q0 => Padding2D_2_array_q0);

    grp_depthwise_conv2d_fix_fu_618 : component depthwise_conv2d_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_depthwise_conv2d_fix_fu_618_ap_start,
        ap_done => grp_depthwise_conv2d_fix_fu_618_ap_done,
        ap_idle => grp_depthwise_conv2d_fix_fu_618_ap_idle,
        ap_ready => grp_depthwise_conv2d_fix_fu_618_ap_ready,
        input_height => Padding2D_0_height,
        input_width => reg_950,
        output_depth => Padding2D_0_depth,
        output_height => reg_956,
        output_width => reg_963,
        output_r_address0 => grp_depthwise_conv2d_fix_fu_618_output_r_address0,
        output_r_ce0 => grp_depthwise_conv2d_fix_fu_618_output_r_ce0,
        output_r_we0 => grp_depthwise_conv2d_fix_fu_618_output_r_we0,
        output_r_d0 => grp_depthwise_conv2d_fix_fu_618_output_r_d0,
        output_r_q0 => SeparableConv2D_0_m_s_q0,
        Padding2D_0_array_address0 => grp_depthwise_conv2d_fix_fu_618_Padding2D_0_array_address0,
        Padding2D_0_array_ce0 => grp_depthwise_conv2d_fix_fu_618_Padding2D_0_array_ce0,
        Padding2D_0_array_q0 => Padding2D_0_array_q0);

    grp_max_pooling2d_fix16_1_fu_633 : component max_pooling2d_fix16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pooling2d_fix16_1_fu_633_ap_start,
        ap_done => grp_max_pooling2d_fix16_1_fu_633_ap_done,
        ap_idle => grp_max_pooling2d_fix16_1_fu_633_ap_idle,
        ap_ready => grp_max_pooling2d_fix16_1_fu_633_ap_ready,
        input_height => reg_956,
        input_width => reg_963,
        output_depth => reg_970,
        output_height => reg_976,
        output_width => reg_982,
        SeparableConv2D_0_ar_address0 => grp_max_pooling2d_fix16_1_fu_633_SeparableConv2D_0_ar_address0,
        SeparableConv2D_0_ar_ce0 => grp_max_pooling2d_fix16_1_fu_633_SeparableConv2D_0_ar_ce0,
        SeparableConv2D_0_ar_q0 => SeparableConv2D_0_ar_q0,
        MaxPooling2D_0_array_address0 => grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_address0,
        MaxPooling2D_0_array_ce0 => grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_ce0,
        MaxPooling2D_0_array_we0 => grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_we0,
        MaxPooling2D_0_array_d0 => grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_d0,
        MaxPooling2D_0_array_q0 => MaxPooling2D_0_array_q0);

    grp_pointwise_conv2d_fix_3_fu_646 : component pointwise_conv2d_fix_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_3_fu_646_ap_start,
        ap_done => grp_pointwise_conv2d_fix_3_fu_646_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_3_fu_646_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_3_fu_646_ap_ready,
        input_depth => Padding2D_3_depth,
        input_height => reg_1088,
        input_width => reg_1095,
        output_depth => SeparableConv2D_3_de,
        output_r_address0 => grp_pointwise_conv2d_fix_3_fu_646_output_r_address0,
        output_r_ce0 => grp_pointwise_conv2d_fix_3_fu_646_output_r_ce0,
        output_r_we0 => grp_pointwise_conv2d_fix_3_fu_646_output_r_we0,
        output_r_d0 => grp_pointwise_conv2d_fix_3_fu_646_output_r_d0,
        SeparableConv2D_3_m_s_address0 => grp_pointwise_conv2d_fix_3_fu_646_SeparableConv2D_3_m_s_address0,
        SeparableConv2D_3_m_s_ce0 => grp_pointwise_conv2d_fix_3_fu_646_SeparableConv2D_3_m_s_ce0,
        SeparableConv2D_3_m_s_q0 => SeparableConv2D_3_m_s_q0);

    grp_pointwise_conv2d_fix_2_fu_660 : component pointwise_conv2d_fix_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_2_fu_660_ap_start,
        ap_done => grp_pointwise_conv2d_fix_2_fu_660_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_2_fu_660_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_2_fu_660_ap_ready,
        input_depth => Padding2D_1_depth,
        input_height => reg_1000,
        input_width => reg_1007,
        output_depth => SeparableConv2D_1_de,
        SeparableConv2D_1_ar_address0 => grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_address0,
        SeparableConv2D_1_ar_ce0 => grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_ce0,
        SeparableConv2D_1_ar_we0 => grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_we0,
        SeparableConv2D_1_ar_d0 => grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_d0,
        SeparableConv2D_1_m_s_address0 => grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_m_s_address0,
        SeparableConv2D_1_m_s_ce0 => grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_m_s_ce0,
        SeparableConv2D_1_m_s_q0 => SeparableConv2D_1_m_s_q0);

    grp_pointwise_conv2d_fix_fu_674 : component pointwise_conv2d_fix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_fu_674_ap_start,
        ap_done => grp_pointwise_conv2d_fix_fu_674_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_fu_674_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_fu_674_ap_ready,
        input_depth => Padding2D_0_depth,
        input_height => reg_956,
        input_width => reg_963,
        output_depth => SeparableConv2D_0_de,
        output_r_address0 => grp_pointwise_conv2d_fix_fu_674_output_r_address0,
        output_r_ce0 => grp_pointwise_conv2d_fix_fu_674_output_r_ce0,
        output_r_we0 => grp_pointwise_conv2d_fix_fu_674_output_r_we0,
        output_r_d0 => grp_pointwise_conv2d_fix_fu_674_output_r_d0,
        SeparableConv2D_0_m_s_address0 => grp_pointwise_conv2d_fix_fu_674_SeparableConv2D_0_m_s_address0,
        SeparableConv2D_0_m_s_ce0 => grp_pointwise_conv2d_fix_fu_674_SeparableConv2D_0_m_s_ce0,
        SeparableConv2D_0_m_s_q0 => SeparableConv2D_0_m_s_q0);

    grp_pointwise_conv2d_fix_4_fu_688 : component pointwise_conv2d_fix_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_4_fu_688_ap_start,
        ap_done => grp_pointwise_conv2d_fix_4_fu_688_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_4_fu_688_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_4_fu_688_ap_ready,
        input_depth => Padding2D_2_depth,
        input_height => reg_1044,
        input_width => reg_1051,
        output_depth => SeparableConv2D_2_de,
        output_r_address0 => grp_pointwise_conv2d_fix_4_fu_688_output_r_address0,
        output_r_ce0 => grp_pointwise_conv2d_fix_4_fu_688_output_r_ce0,
        output_r_we0 => grp_pointwise_conv2d_fix_4_fu_688_output_r_we0,
        output_r_d0 => grp_pointwise_conv2d_fix_4_fu_688_output_r_d0,
        SeparableConv2D_2_m_s_address0 => grp_pointwise_conv2d_fix_4_fu_688_SeparableConv2D_2_m_s_address0,
        SeparableConv2D_2_m_s_ce0 => grp_pointwise_conv2d_fix_4_fu_688_SeparableConv2D_2_m_s_ce0,
        SeparableConv2D_2_m_s_q0 => SeparableConv2D_2_m_s_q0);

    grp_max_pooling2d_fix16_fu_702 : component max_pooling2d_fix16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pooling2d_fix16_fu_702_ap_start,
        ap_done => grp_max_pooling2d_fix16_fu_702_ap_done,
        ap_idle => grp_max_pooling2d_fix16_fu_702_ap_idle,
        ap_ready => grp_max_pooling2d_fix16_fu_702_ap_ready,
        input_height => reg_1000,
        input_width => reg_1007,
        input_r_address0 => grp_max_pooling2d_fix16_fu_702_input_r_address0,
        input_r_ce0 => grp_max_pooling2d_fix16_fu_702_input_r_ce0,
        input_r_q0 => SeparableConv2D_1_ar_q0,
        output_depth => reg_1014,
        output_height => reg_1020,
        output_width => reg_1026,
        MaxPooling2D_1_array_address0 => grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_address0,
        MaxPooling2D_1_array_ce0 => grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_ce0,
        MaxPooling2D_1_array_we0 => grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_we0,
        MaxPooling2D_1_array_d0 => grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_d0,
        MaxPooling2D_1_array_q0 => MaxPooling2D_1_array_q0);

    grp_pointwise_conv2d_fix_1_fu_715 : component pointwise_conv2d_fix_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_pointwise_conv2d_fix_1_fu_715_ap_start,
        ap_done => grp_pointwise_conv2d_fix_1_fu_715_ap_done,
        ap_idle => grp_pointwise_conv2d_fix_1_fu_715_ap_idle,
        ap_ready => grp_pointwise_conv2d_fix_1_fu_715_ap_ready,
        input_depth => Padding2D_4_depth,
        input_height => SeparableConv2D_4_he,
        input_width => SeparableConv2D_4_wi,
        output_depth => SeparableConv2D_4_de,
        output_r_address0 => grp_pointwise_conv2d_fix_1_fu_715_output_r_address0,
        output_r_ce0 => grp_pointwise_conv2d_fix_1_fu_715_output_r_ce0,
        output_r_we0 => grp_pointwise_conv2d_fix_1_fu_715_output_r_we0,
        output_r_d0 => grp_pointwise_conv2d_fix_1_fu_715_output_r_d0,
        SeparableConv2D_4_m_s_address0 => grp_pointwise_conv2d_fix_1_fu_715_SeparableConv2D_4_m_s_address0,
        SeparableConv2D_4_m_s_ce0 => grp_pointwise_conv2d_fix_1_fu_715_SeparableConv2D_4_m_s_ce0,
        SeparableConv2D_4_m_s_q0 => SeparableConv2D_4_m_s_q0);

    grp_up_sampling2d_fix16_fu_727 : component up_sampling2d_fix16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_up_sampling2d_fix16_fu_727_ap_start,
        ap_done => grp_up_sampling2d_fix16_fu_727_ap_done,
        ap_idle => grp_up_sampling2d_fix16_fu_727_ap_idle,
        ap_ready => grp_up_sampling2d_fix16_fu_727_ap_ready,
        input_height => reg_1088,
        input_width => reg_1095,
        output_depth => reg_1102,
        output_height => reg_1108,
        output_width => reg_1114,
        SeparableConv2D_3_ar_address0 => grp_up_sampling2d_fix16_fu_727_SeparableConv2D_3_ar_address0,
        SeparableConv2D_3_ar_ce0 => grp_up_sampling2d_fix16_fu_727_SeparableConv2D_3_ar_ce0,
        SeparableConv2D_3_ar_q0 => SeparableConv2D_3_ar_q0,
        UpSampling2D_1_array_address0 => grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_address0,
        UpSampling2D_1_array_ce0 => grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_ce0,
        UpSampling2D_1_array_we0 => grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_we0,
        UpSampling2D_1_array_d0 => grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_d0);

    grp_up_sampling2d_fix16_1_fu_740 : component up_sampling2d_fix16_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_up_sampling2d_fix16_1_fu_740_ap_start,
        ap_done => grp_up_sampling2d_fix16_1_fu_740_ap_done,
        ap_idle => grp_up_sampling2d_fix16_1_fu_740_ap_idle,
        ap_ready => grp_up_sampling2d_fix16_1_fu_740_ap_ready,
        input_height => reg_1044,
        input_width => reg_1051,
        output_depth => reg_1058,
        output_height => reg_1064,
        output_width => reg_1070,
        SeparableConv2D_2_ar_address0 => grp_up_sampling2d_fix16_1_fu_740_SeparableConv2D_2_ar_address0,
        SeparableConv2D_2_ar_ce0 => grp_up_sampling2d_fix16_1_fu_740_SeparableConv2D_2_ar_ce0,
        SeparableConv2D_2_ar_q0 => SeparableConv2D_2_ar_q0,
        UpSampling2D_0_array_address0 => grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_address0,
        UpSampling2D_0_array_ce0 => grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_ce0,
        UpSampling2D_0_array_we0 => grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_we0,
        UpSampling2D_0_array_d0 => grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_d0);

    grp_padding2d_fix16_4_fu_753 : component padding2d_fix16_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_padding2d_fix16_4_fu_753_ap_start,
        ap_done => grp_padding2d_fix16_4_fu_753_ap_done,
        ap_idle => grp_padding2d_fix16_4_fu_753_ap_idle,
        ap_ready => grp_padding2d_fix16_4_fu_753_ap_ready,
        input_0_address0 => grp_padding2d_fix16_4_fu_753_input_0_address0,
        input_0_ce0 => grp_padding2d_fix16_4_fu_753_input_0_ce0,
        input_0_q0 => input_0_array_0_q0,
        output_width => reg_950,
        output_r_address0 => grp_padding2d_fix16_4_fu_753_output_r_address0,
        output_r_ce0 => grp_padding2d_fix16_4_fu_753_output_r_ce0,
        output_r_we0 => grp_padding2d_fix16_4_fu_753_output_r_we0,
        output_r_d0 => grp_padding2d_fix16_4_fu_753_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_1_fu_558_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_1_fu_558_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    grp_depthwise_conv2d_fix_1_fu_558_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_1_fu_558_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_1_fu_558_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_2_fu_573_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_2_fu_573_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_depthwise_conv2d_fix_2_fu_573_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_2_fu_573_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_2_fu_573_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_3_fu_588_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_3_fu_588_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                    grp_depthwise_conv2d_fix_3_fu_588_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_3_fu_588_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_3_fu_588_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_4_fu_603_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_4_fu_603_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_depthwise_conv2d_fix_4_fu_603_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_4_fu_603_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_4_fu_603_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_depthwise_conv2d_fix_fu_618_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_depthwise_conv2d_fix_fu_618_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_depthwise_conv2d_fix_fu_618_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_depthwise_conv2d_fix_fu_618_ap_ready = ap_const_logic_1)) then 
                    grp_depthwise_conv2d_fix_fu_618_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling2d_fix16_1_fu_633_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pooling2d_fix16_1_fu_633_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_max_pooling2d_fix16_1_fu_633_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling2d_fix16_1_fu_633_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling2d_fix16_1_fu_633_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling2d_fix16_fu_702_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pooling2d_fix16_fu_702_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_max_pooling2d_fix16_fu_702_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling2d_fix16_fu_702_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling2d_fix16_fu_702_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_1_fu_532_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_1_fu_532_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    grp_padding2d_fix16_1_fu_532_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_1_fu_532_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_1_fu_532_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_2_fu_545_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_2_fu_545_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_padding2d_fix16_2_fu_545_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_2_fu_545_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_2_fu_545_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_3_fu_519_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_3_fu_519_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_padding2d_fix16_3_fu_519_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_3_fu_519_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_3_fu_519_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_4_fu_753_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_4_fu_753_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond2_fu_1132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_padding2d_fix16_4_fu_753_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_4_fu_753_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_4_fu_753_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_padding2d_fix16_fu_506_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_padding2d_fix16_fu_506_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_padding2d_fix16_fu_506_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_padding2d_fix16_fu_506_ap_ready = ap_const_logic_1)) then 
                    grp_padding2d_fix16_fu_506_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_1_fu_715_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_1_fu_715_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    grp_pointwise_conv2d_fix_1_fu_715_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_1_fu_715_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_1_fu_715_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_2_fu_660_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_2_fu_660_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    grp_pointwise_conv2d_fix_2_fu_660_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_2_fu_660_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_2_fu_660_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_3_fu_646_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_3_fu_646_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    grp_pointwise_conv2d_fix_3_fu_646_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_3_fu_646_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_3_fu_646_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_4_fu_688_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_4_fu_688_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    grp_pointwise_conv2d_fix_4_fu_688_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_4_fu_688_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_4_fu_688_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pointwise_conv2d_fix_fu_674_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_pointwise_conv2d_fix_fu_674_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_pointwise_conv2d_fix_fu_674_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pointwise_conv2d_fix_fu_674_ap_ready = ap_const_logic_1)) then 
                    grp_pointwise_conv2d_fix_fu_674_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_up_sampling2d_fix16_1_fu_740_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_up_sampling2d_fix16_1_fu_740_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    grp_up_sampling2d_fix16_1_fu_740_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_up_sampling2d_fix16_1_fu_740_ap_ready = ap_const_logic_1)) then 
                    grp_up_sampling2d_fix16_1_fu_740_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_up_sampling2d_fix16_fu_727_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_up_sampling2d_fix16_fu_727_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_up_sampling2d_fix16_fu_727_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_up_sampling2d_fix16_fu_727_ap_ready = ap_const_logic_1)) then 
                    grp_up_sampling2d_fix16_fu_727_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_data_V_0_ack_out = ap_const_logic_1) and (input_data_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_data_V_0_sel_rd <= not(input_data_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_data_V_0_ack_in = ap_const_logic_1) and (input_data_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_data_V_0_sel_wr <= not(input_data_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_data_V_0_state = ap_const_lv2_2) and (input_data_V_data_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_data_V_0_state = ap_const_lv2_3) and (input_data_V_data_V_0_vld_in = ap_const_logic_0) and (input_data_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_data_V_0_state = ap_const_lv2_3) and (input_data_V_data_V_0_ack_out = ap_const_logic_0) and (input_data_V_data_V_0_vld_in = ap_const_logic_1)) or ((input_data_V_data_V_0_state = ap_const_lv2_1) and (input_data_V_data_V_0_ack_out = ap_const_logic_0)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_1;
                elsif ((((input_data_V_data_V_0_state = ap_const_lv2_2) and (input_data_V_data_V_0_vld_in = ap_const_logic_1)) or (not(((input_data_V_data_V_0_vld_in = ap_const_logic_0) and (input_data_V_data_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_data_V_0_ack_out = ap_const_logic_0) and (input_data_V_data_V_0_vld_in = ap_const_logic_1))) and (input_data_V_data_V_0_state = ap_const_lv2_3)) or ((input_data_V_data_V_0_state = ap_const_lv2_1) and (input_data_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_dest_V_0_ack_out = ap_const_logic_1) and (input_data_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_dest_V_0_sel_rd <= not(input_data_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_dest_V_0_ack_in = ap_const_logic_1) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_dest_V_0_sel_wr <= not(input_data_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_dest_V_0_state = ap_const_lv2_2) and (input_data_V_dest_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_dest_V_0_state = ap_const_lv2_3) and (input_data_V_dest_V_0_vld_in = ap_const_logic_0) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_dest_V_0_state = ap_const_lv2_1) and (input_data_V_dest_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_dest_V_0_state = ap_const_lv2_3) and (input_data_V_dest_V_0_ack_out = ap_const_logic_0) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_dest_V_0_vld_in = ap_const_logic_0) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_dest_V_0_ack_out = ap_const_logic_0) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1))) and (input_data_V_dest_V_0_state = ap_const_lv2_3)) or ((input_data_V_dest_V_0_state = ap_const_lv2_1) and (input_data_V_dest_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_dest_V_0_state = ap_const_lv2_2) and (input_data_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_id_V_0_ack_out = ap_const_logic_1) and (input_data_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_id_V_0_sel_rd <= not(input_data_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_id_V_0_ack_in = ap_const_logic_1) and (input_data_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_id_V_0_sel_wr <= not(input_data_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_id_V_0_state = ap_const_lv2_2) and (input_data_V_id_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_id_V_0_state = ap_const_lv2_3) and (input_data_V_id_V_0_vld_in = ap_const_logic_0) and (input_data_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_id_V_0_state = ap_const_lv2_1) and (input_data_V_id_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_id_V_0_state = ap_const_lv2_3) and (input_data_V_id_V_0_ack_out = ap_const_logic_0) and (input_data_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_id_V_0_vld_in = ap_const_logic_0) and (input_data_V_id_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_id_V_0_ack_out = ap_const_logic_0) and (input_data_V_id_V_0_vld_in = ap_const_logic_1))) and (input_data_V_id_V_0_state = ap_const_lv2_3)) or ((input_data_V_id_V_0_state = ap_const_lv2_1) and (input_data_V_id_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_id_V_0_state = ap_const_lv2_2) and (input_data_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_keep_V_0_ack_out = ap_const_logic_1) and (input_data_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_keep_V_0_sel_rd <= not(input_data_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_keep_V_0_ack_in = ap_const_logic_1) and (input_data_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_keep_V_0_sel_wr <= not(input_data_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_keep_V_0_state = ap_const_lv2_2) and (input_data_V_keep_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_keep_V_0_state = ap_const_lv2_3) and (input_data_V_keep_V_0_vld_in = ap_const_logic_0) and (input_data_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_keep_V_0_state = ap_const_lv2_1) and (input_data_V_keep_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_keep_V_0_state = ap_const_lv2_3) and (input_data_V_keep_V_0_ack_out = ap_const_logic_0) and (input_data_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_keep_V_0_vld_in = ap_const_logic_0) and (input_data_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_keep_V_0_ack_out = ap_const_logic_0) and (input_data_V_keep_V_0_vld_in = ap_const_logic_1))) and (input_data_V_keep_V_0_state = ap_const_lv2_3)) or ((input_data_V_keep_V_0_state = ap_const_lv2_1) and (input_data_V_keep_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_keep_V_0_state = ap_const_lv2_2) and (input_data_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    input_data_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_data_V_strb_V_0_ack_out = ap_const_logic_1) and (input_data_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        input_data_V_strb_V_0_sel_rd <= not(input_data_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_data_V_strb_V_0_ack_in = ap_const_logic_1) and (input_data_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        input_data_V_strb_V_0_sel_wr <= not(input_data_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_data_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_data_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((input_data_V_strb_V_0_state = ap_const_lv2_2) and (input_data_V_strb_V_0_vld_in = ap_const_logic_0)) or ((input_data_V_strb_V_0_state = ap_const_lv2_3) and (input_data_V_strb_V_0_vld_in = ap_const_logic_0) and (input_data_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    input_data_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((input_data_V_strb_V_0_state = ap_const_lv2_1) and (input_data_V_strb_V_0_ack_out = ap_const_logic_0)) or ((input_data_V_strb_V_0_state = ap_const_lv2_3) and (input_data_V_strb_V_0_ack_out = ap_const_logic_0) and (input_data_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((input_data_V_strb_V_0_vld_in = ap_const_logic_0) and (input_data_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((input_data_V_strb_V_0_ack_out = ap_const_logic_0) and (input_data_V_strb_V_0_vld_in = ap_const_logic_1))) and (input_data_V_strb_V_0_state = ap_const_lv2_3)) or ((input_data_V_strb_V_0_state = ap_const_lv2_1) and (input_data_V_strb_V_0_ack_out = ap_const_logic_1)) or ((input_data_V_strb_V_0_state = ap_const_lv2_2) and (input_data_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    input_data_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    input_data_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_data_V_1_ack_out = ap_const_logic_1) and (output_data_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_data_V_1_sel_rd <= not(output_data_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (output_data_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_data_V_1_sel_wr <= not(output_data_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_data_V_1_state = ap_const_lv2_2) and (output_data_V_data_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_data_V_1_state = ap_const_lv2_3) and (output_data_V_data_V_1_vld_in = ap_const_logic_0) and (output_data_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_data_V_1_state = ap_const_lv2_1) and (output_data_V_data_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_data_V_1_state = ap_const_lv2_3) and (output_data_V_data_V_1_ack_out = ap_const_logic_0) and (output_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_data_V_1_vld_in = ap_const_logic_0) and (output_data_V_data_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_data_V_1_ack_out = ap_const_logic_0) and (output_data_V_data_V_1_vld_in = ap_const_logic_1))) and (output_data_V_data_V_1_state = ap_const_lv2_3)) or ((output_data_V_data_V_1_state = ap_const_lv2_1) and (output_data_V_data_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_data_V_1_state = ap_const_lv2_2) and (output_data_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_dest_V_1_ack_out = ap_const_logic_1) and (output_data_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_dest_V_1_sel_rd <= not(output_data_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_dest_V_1_ack_in = ap_const_logic_1) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_dest_V_1_sel_wr <= not(output_data_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_dest_V_1_state = ap_const_lv2_2) and (output_data_V_dest_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_dest_V_1_state = ap_const_lv2_3) and (output_data_V_dest_V_1_vld_in = ap_const_logic_0) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_dest_V_1_state = ap_const_lv2_1) and (output_data_V_dest_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_dest_V_1_state = ap_const_lv2_3) and (output_data_V_dest_V_1_ack_out = ap_const_logic_0) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_dest_V_1_vld_in = ap_const_logic_0) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_dest_V_1_ack_out = ap_const_logic_0) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1))) and (output_data_V_dest_V_1_state = ap_const_lv2_3)) or ((output_data_V_dest_V_1_state = ap_const_lv2_1) and (output_data_V_dest_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_dest_V_1_state = ap_const_lv2_2) and (output_data_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_id_V_1_ack_out = ap_const_logic_1) and (output_data_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_id_V_1_sel_rd <= not(output_data_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_id_V_1_ack_in = ap_const_logic_1) and (output_data_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_id_V_1_sel_wr <= not(output_data_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_id_V_1_state = ap_const_lv2_2) and (output_data_V_id_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_id_V_1_state = ap_const_lv2_3) and (output_data_V_id_V_1_vld_in = ap_const_logic_0) and (output_data_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_id_V_1_state = ap_const_lv2_1) and (output_data_V_id_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_id_V_1_state = ap_const_lv2_3) and (output_data_V_id_V_1_ack_out = ap_const_logic_0) and (output_data_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_id_V_1_vld_in = ap_const_logic_0) and (output_data_V_id_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_id_V_1_ack_out = ap_const_logic_0) and (output_data_V_id_V_1_vld_in = ap_const_logic_1))) and (output_data_V_id_V_1_state = ap_const_lv2_3)) or ((output_data_V_id_V_1_state = ap_const_lv2_1) and (output_data_V_id_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_id_V_1_state = ap_const_lv2_2) and (output_data_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_keep_V_1_ack_out = ap_const_logic_1) and (output_data_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_keep_V_1_sel_rd <= not(output_data_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_keep_V_1_ack_in = ap_const_logic_1) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_keep_V_1_sel_wr <= not(output_data_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_keep_V_1_state = ap_const_lv2_2) and (output_data_V_keep_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_keep_V_1_state = ap_const_lv2_3) and (output_data_V_keep_V_1_vld_in = ap_const_logic_0) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_keep_V_1_state = ap_const_lv2_1) and (output_data_V_keep_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_keep_V_1_state = ap_const_lv2_3) and (output_data_V_keep_V_1_ack_out = ap_const_logic_0) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_keep_V_1_vld_in = ap_const_logic_0) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_keep_V_1_ack_out = ap_const_logic_0) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1))) and (output_data_V_keep_V_1_state = ap_const_lv2_3)) or ((output_data_V_keep_V_1_state = ap_const_lv2_1) and (output_data_V_keep_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_keep_V_1_state = ap_const_lv2_2) and (output_data_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_last_V_1_ack_out = ap_const_logic_1) and (output_data_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_last_V_1_sel_rd <= not(output_data_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_last_V_1_ack_in = ap_const_logic_1) and (output_data_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_last_V_1_sel_wr <= not(output_data_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_last_V_1_state = ap_const_lv2_2) and (output_data_V_last_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_last_V_1_state = ap_const_lv2_3) and (output_data_V_last_V_1_vld_in = ap_const_logic_0) and (output_data_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_last_V_1_state = ap_const_lv2_1) and (output_data_V_last_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_last_V_1_state = ap_const_lv2_3) and (output_data_V_last_V_1_ack_out = ap_const_logic_0) and (output_data_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_last_V_1_vld_in = ap_const_logic_0) and (output_data_V_last_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_last_V_1_ack_out = ap_const_logic_0) and (output_data_V_last_V_1_vld_in = ap_const_logic_1))) and (output_data_V_last_V_1_state = ap_const_lv2_3)) or ((output_data_V_last_V_1_state = ap_const_lv2_1) and (output_data_V_last_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_last_V_1_state = ap_const_lv2_2) and (output_data_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_strb_V_1_ack_out = ap_const_logic_1) and (output_data_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_strb_V_1_sel_rd <= not(output_data_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_strb_V_1_ack_in = ap_const_logic_1) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_strb_V_1_sel_wr <= not(output_data_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_strb_V_1_state = ap_const_lv2_2) and (output_data_V_strb_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_strb_V_1_state = ap_const_lv2_3) and (output_data_V_strb_V_1_vld_in = ap_const_logic_0) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_strb_V_1_state = ap_const_lv2_1) and (output_data_V_strb_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_strb_V_1_state = ap_const_lv2_3) and (output_data_V_strb_V_1_ack_out = ap_const_logic_0) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_strb_V_1_vld_in = ap_const_logic_0) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_strb_V_1_ack_out = ap_const_logic_0) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1))) and (output_data_V_strb_V_1_state = ap_const_lv2_3)) or ((output_data_V_strb_V_1_state = ap_const_lv2_1) and (output_data_V_strb_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_strb_V_1_state = ap_const_lv2_2) and (output_data_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_data_V_user_V_1_ack_out = ap_const_logic_1) and (output_data_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        output_data_V_user_V_1_sel_rd <= not(output_data_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_data_V_user_V_1_ack_in = ap_const_logic_1) and (output_data_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        output_data_V_user_V_1_sel_wr <= not(output_data_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_data_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_data_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_data_V_user_V_1_state = ap_const_lv2_2) and (output_data_V_user_V_1_vld_in = ap_const_logic_0)) or ((output_data_V_user_V_1_state = ap_const_lv2_3) and (output_data_V_user_V_1_vld_in = ap_const_logic_0) and (output_data_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((output_data_V_user_V_1_state = ap_const_lv2_1) and (output_data_V_user_V_1_ack_out = ap_const_logic_0)) or ((output_data_V_user_V_1_state = ap_const_lv2_3) and (output_data_V_user_V_1_ack_out = ap_const_logic_0) and (output_data_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_data_V_user_V_1_vld_in = ap_const_logic_0) and (output_data_V_user_V_1_ack_out = ap_const_logic_1))) and not(((output_data_V_user_V_1_ack_out = ap_const_logic_0) and (output_data_V_user_V_1_vld_in = ap_const_logic_1))) and (output_data_V_user_V_1_state = ap_const_lv2_3)) or ((output_data_V_user_V_1_state = ap_const_lv2_1) and (output_data_V_user_V_1_ack_out = ap_const_logic_1)) or ((output_data_V_user_V_1_state = ap_const_lv2_2) and (output_data_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    output_data_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    output_data_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    MaxPooling2D_0_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_0_heigh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_0_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_1_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_1_heigh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    MaxPooling2D_1_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_0_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_0_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_0_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_1_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_1_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_1_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_2_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_2_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_2_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_3_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_3_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_3_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_4_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_4_height_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Padding2D_4_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_0_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_1_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_1_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_1_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_2_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_2_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_2_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_3_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_3_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_3_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_4_de_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_4_he_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    SeparableConv2D_4_wi_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_0_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_0_heigh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_0_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_1_depth_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_1_heigh_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    UpSampling2D_1_width_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    depth7_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_89_fu_1329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                depth7_reg_454 <= depth_reg_1625;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_pointwise_conv2d_fix_1_fu_715_ap_done = ap_const_logic_1))) then 
                depth7_reg_454 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    height8_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_91_fu_1418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                height8_reg_466 <= height_3_reg_1638;
            elsif (((tmp_86_fu_1283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                height8_reg_466 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    height_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                height_reg_432 <= height_4_reg_1532;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                height_reg_432 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    tmp_last_V_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                if ((ap_const_boolean_1 = ap_condition_1872)) then 
                    tmp_last_V_reg_490 <= ap_const_lv1_1;
                elsif ((ap_const_boolean_1 = ap_condition_1866)) then 
                    tmp_last_V_reg_490 <= ap_const_lv1_0;
                end if;
            end if; 
        end if;
    end process;

    width9_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_89_fu_1329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                width9_reg_478 <= ap_const_lv32_0;
            elsif (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                width9_reg_478 <= width_7_reg_1661;
            end if; 
        end if;
    end process;

    width_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                width_reg_443 <= ap_const_lv5_0;
            elsif ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                width_reg_443 <= width_6_fu_1180_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                depth_reg_1625 <= depth_fu_1289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                height_3_reg_1638 <= height_3_fu_1335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                height_4_reg_1532 <= height_4_fu_1138_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_data_V_0_load_A = ap_const_logic_1)) then
                input_data_V_data_V_0_payload_A <= input_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_data_V_0_load_B = ap_const_logic_1)) then
                input_data_V_data_V_0_payload_B <= input_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_dest_V_0_load_A = ap_const_logic_1)) then
                input_data_V_dest_V_0_payload_A <= input_data_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_dest_V_0_load_B = ap_const_logic_1)) then
                input_data_V_dest_V_0_payload_B <= input_data_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_id_V_0_load_A = ap_const_logic_1)) then
                input_data_V_id_V_0_payload_A <= input_data_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_id_V_0_load_B = ap_const_logic_1)) then
                input_data_V_id_V_0_payload_B <= input_data_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_keep_V_0_load_A = ap_const_logic_1)) then
                input_data_V_keep_V_0_payload_A <= input_data_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_keep_V_0_load_B = ap_const_logic_1)) then
                input_data_V_keep_V_0_payload_B <= input_data_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_strb_V_0_load_A = ap_const_logic_1)) then
                input_data_V_strb_V_0_payload_A <= input_data_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_data_V_strb_V_0_load_B = ap_const_logic_1)) then
                input_data_V_strb_V_0_payload_B <= input_data_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_data_V_1_load_A = ap_const_logic_1)) then
                output_data_V_data_V_1_payload_A <= tmp_data_V_1_reg_1705;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_data_V_1_load_B = ap_const_logic_1)) then
                output_data_V_data_V_1_payload_B <= tmp_data_V_1_reg_1705;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_dest_V_1_load_A = ap_const_logic_1)) then
                output_data_V_dest_V_1_payload_A <= out_0_dest_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_dest_V_1_load_B = ap_const_logic_1)) then
                output_data_V_dest_V_1_payload_B <= out_0_dest_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_id_V_1_load_A = ap_const_logic_1)) then
                output_data_V_id_V_1_payload_A <= out_0_id_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_id_V_1_load_B = ap_const_logic_1)) then
                output_data_V_id_V_1_payload_B <= out_0_id_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_keep_V_1_load_A = ap_const_logic_1)) then
                output_data_V_keep_V_1_payload_A <= out_0_keep_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_keep_V_1_load_B = ap_const_logic_1)) then
                output_data_V_keep_V_1_payload_B <= out_0_keep_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_last_V_1_load_A = ap_const_logic_1)) then
                output_data_V_last_V_1_payload_A <= tmp_last_V_reg_490;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_last_V_1_load_B = ap_const_logic_1)) then
                output_data_V_last_V_1_payload_B <= tmp_last_V_reg_490;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_strb_V_1_load_A = ap_const_logic_1)) then
                output_data_V_strb_V_1_payload_A <= out_0_strb_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_strb_V_1_load_B = ap_const_logic_1)) then
                output_data_V_strb_V_1_payload_B <= out_0_strb_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_user_V_1_load_A = ap_const_logic_1)) then
                output_data_V_user_V_1_payload_A <= tmp_user_V_reg_1676;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_data_V_user_V_1_load_B = ap_const_logic_1)) then
                output_data_V_user_V_1_payload_B <= tmp_user_V_reg_1676;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_89_fu_1329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    tmp_11_reg_1643(10 downto 2) <= tmp_11_fu_1374_p2(10 downto 2);
                    tmp_14_reg_1648(10 downto 2) <= tmp_14_fu_1404_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_91_fu_1418_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                tmp_16_reg_1671 <= tmp_16_fu_1444_p2;
                tmp_94_reg_1681 <= tmp_94_fu_1481_p2;
                tmp_user_V_reg_1676 <= tmp_user_V_fu_1461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_3_reg_1537(10 downto 2) <= tmp_3_fu_1168_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_86_fu_1283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    tmp_6_reg_1630(37 downto 2) <= tmp_6_fu_1319_p2(37 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                tmp_data_V_1_reg_1705 <= SeparableConv2D_4_ar_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                width_7_reg_1661 <= width_7_fu_1424_p2;
            end if;
        end if;
    end process;
    reg_950(15 downto 0) <= "0000000000011110";
    reg_956(15 downto 0) <= "0000000000011100";
    reg_963(15 downto 0) <= "0000000000011100";
    reg_970(15 downto 0) <= "0000000000010000";
    reg_976(15 downto 0) <= "0000000000001110";
    reg_982(15 downto 0) <= "0000000000001110";
    reg_988(15 downto 0) <= "0000000000010000";
    reg_994(15 downto 0) <= "0000000000010000";
    reg_1000(15 downto 0) <= "0000000000001110";
    reg_1007(15 downto 0) <= "0000000000001110";
    reg_1014(15 downto 0) <= "0000000000001000";
    reg_1020(15 downto 0) <= "0000000000000111";
    reg_1026(15 downto 0) <= "0000000000000111";
    reg_1032(15 downto 0) <= "0000000000001001";
    reg_1038(15 downto 0) <= "0000000000001001";
    reg_1044(15 downto 0) <= "0000000000000111";
    reg_1051(15 downto 0) <= "0000000000000111";
    reg_1058(15 downto 0) <= "0000000000001000";
    reg_1064(15 downto 0) <= "0000000000001110";
    reg_1070(15 downto 0) <= "0000000000001110";
    reg_1076(15 downto 0) <= "0000000000010000";
    reg_1082(15 downto 0) <= "0000000000010000";
    reg_1088(15 downto 0) <= "0000000000001110";
    reg_1095(15 downto 0) <= "0000000000001110";
    reg_1102(15 downto 0) <= "0000000000010000";
    reg_1108(15 downto 0) <= "0000000000011100";
    reg_1114(15 downto 0) <= "0000000000011100";
    reg_1120(15 downto 0) <= "0000000000011110";
    reg_1126(15 downto 0) <= "0000000000011110";
    tmp_3_reg_1537(1 downto 0) <= "00";
    tmp_6_reg_1630(1 downto 0) <= "00";
    tmp_11_reg_1643(1 downto 0) <= "00";
    tmp_14_reg_1648(1 downto 0) <= "00";
    tmp_93_cast_reg_1653(16 downto 0) <= "00000000000011100";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_data_V_data_V_0_vld_out, output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state3, exitcond_fu_1174_p2, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state2, exitcond2_fu_1132_p2, ap_CS_fsm_state41, tmp_86_fu_1283_p2, ap_CS_fsm_state42, tmp_89_fu_1329_p2, ap_CS_fsm_state43, tmp_91_fu_1418_p2, grp_padding2d_fix16_fu_506_ap_done, grp_padding2d_fix16_3_fu_519_ap_done, grp_padding2d_fix16_1_fu_532_ap_done, grp_padding2d_fix16_2_fu_545_ap_done, grp_depthwise_conv2d_fix_1_fu_558_ap_done, grp_depthwise_conv2d_fix_2_fu_573_ap_done, grp_depthwise_conv2d_fix_3_fu_588_ap_done, grp_depthwise_conv2d_fix_4_fu_603_ap_done, grp_depthwise_conv2d_fix_fu_618_ap_done, grp_max_pooling2d_fix16_1_fu_633_ap_done, grp_pointwise_conv2d_fix_3_fu_646_ap_done, grp_pointwise_conv2d_fix_2_fu_660_ap_done, grp_pointwise_conv2d_fix_fu_674_ap_done, grp_pointwise_conv2d_fix_4_fu_688_ap_done, grp_max_pooling2d_fix16_fu_702_ap_done, grp_pointwise_conv2d_fix_1_fu_715_ap_done, grp_up_sampling2d_fix16_fu_727_ap_done, grp_up_sampling2d_fix16_1_fu_740_ap_done, grp_padding2d_fix16_4_fu_753_ap_done, ap_CS_fsm_state40, ap_CS_fsm_state36, ap_CS_fsm_state12, ap_CS_fsm_state28, ap_CS_fsm_state20, ap_CS_fsm_state38, ap_CS_fsm_state14, ap_CS_fsm_state30, ap_CS_fsm_state22, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state32, ap_CS_fsm_state16, ap_CS_fsm_state8, ap_CS_fsm_state24, ap_CS_fsm_state18, ap_CS_fsm_state34, ap_CS_fsm_state26, ap_CS_fsm_state4, ap_CS_fsm_state47)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_1132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_padding2d_fix16_4_fu_753_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_depthwise_conv2d_fix_fu_618_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_pointwise_conv2d_fix_fu_674_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_max_pooling2d_fix16_1_fu_633_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_padding2d_fix16_3_fu_519_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_depthwise_conv2d_fix_2_fu_573_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_pointwise_conv2d_fix_2_fu_660_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_max_pooling2d_fix16_fu_702_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_padding2d_fix16_2_fu_545_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (grp_depthwise_conv2d_fix_4_fu_603_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (grp_pointwise_conv2d_fix_4_fu_688_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_up_sampling2d_fix16_1_fu_740_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_padding2d_fix16_1_fu_532_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (grp_depthwise_conv2d_fix_3_fu_588_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_pointwise_conv2d_fix_3_fu_646_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (grp_up_sampling2d_fix16_fu_727_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (grp_padding2d_fix16_fu_506_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (grp_depthwise_conv2d_fix_1_fu_558_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_pointwise_conv2d_fix_1_fu_715_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((tmp_86_fu_1283_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_state42 => 
                if (((tmp_89_fu_1329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((tmp_91_fu_1418_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    MaxPooling2D_0_array_address0_assign_proc : process(grp_padding2d_fix16_3_fu_519_input_r_address0, grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_address0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            MaxPooling2D_0_array_address0 <= grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            MaxPooling2D_0_array_address0 <= grp_padding2d_fix16_3_fu_519_input_r_address0;
        else 
            MaxPooling2D_0_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    MaxPooling2D_0_array_ce0_assign_proc : process(grp_padding2d_fix16_3_fu_519_input_r_ce0, grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_ce0, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            MaxPooling2D_0_array_ce0 <= grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            MaxPooling2D_0_array_ce0 <= grp_padding2d_fix16_3_fu_519_input_r_ce0;
        else 
            MaxPooling2D_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    MaxPooling2D_0_array_we0_assign_proc : process(grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_we0, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            MaxPooling2D_0_array_we0 <= grp_max_pooling2d_fix16_1_fu_633_MaxPooling2D_0_array_we0;
        else 
            MaxPooling2D_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    MaxPooling2D_1_array_address0_assign_proc : process(grp_padding2d_fix16_2_fu_545_input_r_address0, grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_address0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            MaxPooling2D_1_array_address0 <= grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            MaxPooling2D_1_array_address0 <= grp_padding2d_fix16_2_fu_545_input_r_address0;
        else 
            MaxPooling2D_1_array_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    MaxPooling2D_1_array_ce0_assign_proc : process(grp_padding2d_fix16_2_fu_545_input_r_ce0, grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_ce0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            MaxPooling2D_1_array_ce0 <= grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            MaxPooling2D_1_array_ce0 <= grp_padding2d_fix16_2_fu_545_input_r_ce0;
        else 
            MaxPooling2D_1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    MaxPooling2D_1_array_we0_assign_proc : process(grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_we0, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            MaxPooling2D_1_array_we0 <= grp_max_pooling2d_fix16_fu_702_MaxPooling2D_1_array_we0;
        else 
            MaxPooling2D_1_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_0_array_address0_assign_proc : process(grp_depthwise_conv2d_fix_fu_618_Padding2D_0_array_address0, grp_padding2d_fix16_4_fu_753_output_r_address0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_address0 <= grp_padding2d_fix16_4_fu_753_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Padding2D_0_array_address0 <= grp_depthwise_conv2d_fix_fu_618_Padding2D_0_array_address0;
        else 
            Padding2D_0_array_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Padding2D_0_array_ce0_assign_proc : process(grp_depthwise_conv2d_fix_fu_618_Padding2D_0_array_ce0, grp_padding2d_fix16_4_fu_753_output_r_ce0, ap_CS_fsm_state6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_ce0 <= grp_padding2d_fix16_4_fu_753_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Padding2D_0_array_ce0 <= grp_depthwise_conv2d_fix_fu_618_Padding2D_0_array_ce0;
        else 
            Padding2D_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_0_array_we0_assign_proc : process(grp_padding2d_fix16_4_fu_753_output_r_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Padding2D_0_array_we0 <= grp_padding2d_fix16_4_fu_753_output_r_we0;
        else 
            Padding2D_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_1_array_address0_assign_proc : process(grp_padding2d_fix16_3_fu_519_output_r_address0, grp_depthwise_conv2d_fix_2_fu_573_Padding2D_1_array_address0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Padding2D_1_array_address0 <= grp_depthwise_conv2d_fix_2_fu_573_Padding2D_1_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_1_array_address0 <= grp_padding2d_fix16_3_fu_519_output_r_address0;
        else 
            Padding2D_1_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_1_array_ce0_assign_proc : process(grp_padding2d_fix16_3_fu_519_output_r_ce0, grp_depthwise_conv2d_fix_2_fu_573_Padding2D_1_array_ce0, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Padding2D_1_array_ce0 <= grp_depthwise_conv2d_fix_2_fu_573_Padding2D_1_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_1_array_ce0 <= grp_padding2d_fix16_3_fu_519_output_r_ce0;
        else 
            Padding2D_1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_1_array_we0_assign_proc : process(grp_padding2d_fix16_3_fu_519_output_r_we0, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Padding2D_1_array_we0 <= grp_padding2d_fix16_3_fu_519_output_r_we0;
        else 
            Padding2D_1_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_2_array_address0_assign_proc : process(grp_padding2d_fix16_2_fu_545_output_r_address0, grp_depthwise_conv2d_fix_4_fu_603_Padding2D_2_array_address0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Padding2D_2_array_address0 <= grp_depthwise_conv2d_fix_4_fu_603_Padding2D_2_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Padding2D_2_array_address0 <= grp_padding2d_fix16_2_fu_545_output_r_address0;
        else 
            Padding2D_2_array_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Padding2D_2_array_ce0_assign_proc : process(grp_padding2d_fix16_2_fu_545_output_r_ce0, grp_depthwise_conv2d_fix_4_fu_603_Padding2D_2_array_ce0, ap_CS_fsm_state20, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Padding2D_2_array_ce0 <= grp_depthwise_conv2d_fix_4_fu_603_Padding2D_2_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Padding2D_2_array_ce0 <= grp_padding2d_fix16_2_fu_545_output_r_ce0;
        else 
            Padding2D_2_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_2_array_we0_assign_proc : process(grp_padding2d_fix16_2_fu_545_output_r_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Padding2D_2_array_we0 <= grp_padding2d_fix16_2_fu_545_output_r_we0;
        else 
            Padding2D_2_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_3_array_address0_assign_proc : process(grp_padding2d_fix16_1_fu_532_output_r_address0, grp_depthwise_conv2d_fix_3_fu_588_Padding2D_3_array_address0, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Padding2D_3_array_address0 <= grp_depthwise_conv2d_fix_3_fu_588_Padding2D_3_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Padding2D_3_array_address0 <= grp_padding2d_fix16_1_fu_532_output_r_address0;
        else 
            Padding2D_3_array_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_3_array_ce0_assign_proc : process(grp_padding2d_fix16_1_fu_532_output_r_ce0, grp_depthwise_conv2d_fix_3_fu_588_Padding2D_3_array_ce0, ap_CS_fsm_state28, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Padding2D_3_array_ce0 <= grp_depthwise_conv2d_fix_3_fu_588_Padding2D_3_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Padding2D_3_array_ce0 <= grp_padding2d_fix16_1_fu_532_output_r_ce0;
        else 
            Padding2D_3_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_3_array_we0_assign_proc : process(grp_padding2d_fix16_1_fu_532_output_r_we0, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            Padding2D_3_array_we0 <= grp_padding2d_fix16_1_fu_532_output_r_we0;
        else 
            Padding2D_3_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_4_array_address0_assign_proc : process(grp_padding2d_fix16_fu_506_output_r_address0, grp_depthwise_conv2d_fix_1_fu_558_Padding2D_4_array_address0, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            Padding2D_4_array_address0 <= grp_depthwise_conv2d_fix_1_fu_558_Padding2D_4_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Padding2D_4_array_address0 <= grp_padding2d_fix16_fu_506_output_r_address0;
        else 
            Padding2D_4_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    Padding2D_4_array_ce0_assign_proc : process(grp_padding2d_fix16_fu_506_output_r_ce0, grp_depthwise_conv2d_fix_1_fu_558_Padding2D_4_array_ce0, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            Padding2D_4_array_ce0 <= grp_depthwise_conv2d_fix_1_fu_558_Padding2D_4_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Padding2D_4_array_ce0 <= grp_padding2d_fix16_fu_506_output_r_ce0;
        else 
            Padding2D_4_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Padding2D_4_array_we0_assign_proc : process(grp_padding2d_fix16_fu_506_output_r_we0, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            Padding2D_4_array_we0 <= grp_padding2d_fix16_fu_506_output_r_we0;
        else 
            Padding2D_4_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_ar_address0_assign_proc : process(grp_max_pooling2d_fix16_1_fu_633_SeparableConv2D_0_ar_address0, grp_pointwise_conv2d_fix_fu_674_output_r_address0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_ar_address0 <= grp_pointwise_conv2d_fix_fu_674_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            SeparableConv2D_0_ar_address0 <= grp_max_pooling2d_fix16_1_fu_633_SeparableConv2D_0_ar_address0;
        else 
            SeparableConv2D_0_ar_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_0_ar_ce0_assign_proc : process(grp_max_pooling2d_fix16_1_fu_633_SeparableConv2D_0_ar_ce0, grp_pointwise_conv2d_fix_fu_674_output_r_ce0, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_ar_ce0 <= grp_pointwise_conv2d_fix_fu_674_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            SeparableConv2D_0_ar_ce0 <= grp_max_pooling2d_fix16_1_fu_633_SeparableConv2D_0_ar_ce0;
        else 
            SeparableConv2D_0_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_fu_674_output_r_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_ar_we0 <= grp_pointwise_conv2d_fix_fu_674_output_r_we0;
        else 
            SeparableConv2D_0_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_fu_618_output_r_address0, grp_pointwise_conv2d_fix_fu_674_SeparableConv2D_0_m_s_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_m_s_address0 <= grp_pointwise_conv2d_fix_fu_674_SeparableConv2D_0_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_address0 <= grp_depthwise_conv2d_fix_fu_618_output_r_address0;
        else 
            SeparableConv2D_0_m_s_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_0_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_fu_618_output_r_ce0, grp_pointwise_conv2d_fix_fu_674_SeparableConv2D_0_m_s_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            SeparableConv2D_0_m_s_ce0 <= grp_pointwise_conv2d_fix_fu_674_SeparableConv2D_0_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_ce0 <= grp_depthwise_conv2d_fix_fu_618_output_r_ce0;
        else 
            SeparableConv2D_0_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_0_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_fu_618_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            SeparableConv2D_0_m_s_we0 <= grp_depthwise_conv2d_fix_fu_618_output_r_we0;
        else 
            SeparableConv2D_0_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_ar_address0_assign_proc : process(grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_address0, grp_max_pooling2d_fix16_fu_702_input_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            SeparableConv2D_1_ar_address0 <= grp_max_pooling2d_fix16_fu_702_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_ar_address0 <= grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_address0;
        else 
            SeparableConv2D_1_ar_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_1_ar_ce0_assign_proc : process(grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_ce0, grp_max_pooling2d_fix16_fu_702_input_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            SeparableConv2D_1_ar_ce0 <= grp_max_pooling2d_fix16_fu_702_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_ar_ce0 <= grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_ce0;
        else 
            SeparableConv2D_1_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_ar_we0 <= grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_ar_we0;
        else 
            SeparableConv2D_1_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_2_fu_573_output_r_address0, grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_m_s_address0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_m_s_address0 <= grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SeparableConv2D_1_m_s_address0 <= grp_depthwise_conv2d_fix_2_fu_573_output_r_address0;
        else 
            SeparableConv2D_1_m_s_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_1_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_2_fu_573_output_r_ce0, grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_m_s_ce0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            SeparableConv2D_1_m_s_ce0 <= grp_pointwise_conv2d_fix_2_fu_660_SeparableConv2D_1_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SeparableConv2D_1_m_s_ce0 <= grp_depthwise_conv2d_fix_2_fu_573_output_r_ce0;
        else 
            SeparableConv2D_1_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_1_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_2_fu_573_output_r_we0, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            SeparableConv2D_1_m_s_we0 <= grp_depthwise_conv2d_fix_2_fu_573_output_r_we0;
        else 
            SeparableConv2D_1_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_2_ar_address0_assign_proc : process(grp_pointwise_conv2d_fix_4_fu_688_output_r_address0, grp_up_sampling2d_fix16_1_fu_740_SeparableConv2D_2_ar_address0, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            SeparableConv2D_2_ar_address0 <= grp_up_sampling2d_fix16_1_fu_740_SeparableConv2D_2_ar_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_ar_address0 <= grp_pointwise_conv2d_fix_4_fu_688_output_r_address0;
        else 
            SeparableConv2D_2_ar_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_2_ar_ce0_assign_proc : process(grp_pointwise_conv2d_fix_4_fu_688_output_r_ce0, grp_up_sampling2d_fix16_1_fu_740_SeparableConv2D_2_ar_ce0, ap_CS_fsm_state24, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            SeparableConv2D_2_ar_ce0 <= grp_up_sampling2d_fix16_1_fu_740_SeparableConv2D_2_ar_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_ar_ce0 <= grp_pointwise_conv2d_fix_4_fu_688_output_r_ce0;
        else 
            SeparableConv2D_2_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_2_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_4_fu_688_output_r_we0, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_ar_we0 <= grp_pointwise_conv2d_fix_4_fu_688_output_r_we0;
        else 
            SeparableConv2D_2_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_2_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_4_fu_603_output_r_address0, grp_pointwise_conv2d_fix_4_fu_688_SeparableConv2D_2_m_s_address0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_m_s_address0 <= grp_pointwise_conv2d_fix_4_fu_688_SeparableConv2D_2_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SeparableConv2D_2_m_s_address0 <= grp_depthwise_conv2d_fix_4_fu_603_output_r_address0;
        else 
            SeparableConv2D_2_m_s_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_2_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_4_fu_603_output_r_ce0, grp_pointwise_conv2d_fix_4_fu_688_SeparableConv2D_2_m_s_ce0, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            SeparableConv2D_2_m_s_ce0 <= grp_pointwise_conv2d_fix_4_fu_688_SeparableConv2D_2_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SeparableConv2D_2_m_s_ce0 <= grp_depthwise_conv2d_fix_4_fu_603_output_r_ce0;
        else 
            SeparableConv2D_2_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_2_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_4_fu_603_output_r_we0, ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            SeparableConv2D_2_m_s_we0 <= grp_depthwise_conv2d_fix_4_fu_603_output_r_we0;
        else 
            SeparableConv2D_2_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_3_ar_address0_assign_proc : process(grp_pointwise_conv2d_fix_3_fu_646_output_r_address0, grp_up_sampling2d_fix16_fu_727_SeparableConv2D_3_ar_address0, ap_CS_fsm_state32, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            SeparableConv2D_3_ar_address0 <= grp_up_sampling2d_fix16_fu_727_SeparableConv2D_3_ar_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_ar_address0 <= grp_pointwise_conv2d_fix_3_fu_646_output_r_address0;
        else 
            SeparableConv2D_3_ar_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_3_ar_ce0_assign_proc : process(grp_pointwise_conv2d_fix_3_fu_646_output_r_ce0, grp_up_sampling2d_fix16_fu_727_SeparableConv2D_3_ar_ce0, ap_CS_fsm_state32, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            SeparableConv2D_3_ar_ce0 <= grp_up_sampling2d_fix16_fu_727_SeparableConv2D_3_ar_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_ar_ce0 <= grp_pointwise_conv2d_fix_3_fu_646_output_r_ce0;
        else 
            SeparableConv2D_3_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_3_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_3_fu_646_output_r_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_ar_we0 <= grp_pointwise_conv2d_fix_3_fu_646_output_r_we0;
        else 
            SeparableConv2D_3_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_3_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_3_fu_588_output_r_address0, grp_pointwise_conv2d_fix_3_fu_646_SeparableConv2D_3_m_s_address0, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_m_s_address0 <= grp_pointwise_conv2d_fix_3_fu_646_SeparableConv2D_3_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            SeparableConv2D_3_m_s_address0 <= grp_depthwise_conv2d_fix_3_fu_588_output_r_address0;
        else 
            SeparableConv2D_3_m_s_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_3_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_3_fu_588_output_r_ce0, grp_pointwise_conv2d_fix_3_fu_646_SeparableConv2D_3_m_s_ce0, ap_CS_fsm_state30, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            SeparableConv2D_3_m_s_ce0 <= grp_pointwise_conv2d_fix_3_fu_646_SeparableConv2D_3_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            SeparableConv2D_3_m_s_ce0 <= grp_depthwise_conv2d_fix_3_fu_588_output_r_ce0;
        else 
            SeparableConv2D_3_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_3_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_3_fu_588_output_r_we0, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            SeparableConv2D_3_m_s_we0 <= grp_depthwise_conv2d_fix_3_fu_588_output_r_we0;
        else 
            SeparableConv2D_3_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_4_ar_address0_assign_proc : process(ap_CS_fsm_state43, grp_pointwise_conv2d_fix_1_fu_715_output_r_address0, ap_CS_fsm_state40, tmp_15_cast_fu_1439_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            SeparableConv2D_4_ar_address0 <= tmp_15_cast_fu_1439_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_ar_address0 <= grp_pointwise_conv2d_fix_1_fu_715_output_r_address0;
        else 
            SeparableConv2D_4_ar_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_4_ar_ce0_assign_proc : process(ap_CS_fsm_state43, grp_pointwise_conv2d_fix_1_fu_715_output_r_ce0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            SeparableConv2D_4_ar_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_ar_ce0 <= grp_pointwise_conv2d_fix_1_fu_715_output_r_ce0;
        else 
            SeparableConv2D_4_ar_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_4_ar_we0_assign_proc : process(grp_pointwise_conv2d_fix_1_fu_715_output_r_we0, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_ar_we0 <= grp_pointwise_conv2d_fix_1_fu_715_output_r_we0;
        else 
            SeparableConv2D_4_ar_we0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_4_m_s_address0_assign_proc : process(grp_depthwise_conv2d_fix_1_fu_558_output_r_address0, grp_pointwise_conv2d_fix_1_fu_715_SeparableConv2D_4_m_s_address0, ap_CS_fsm_state40, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_m_s_address0 <= grp_pointwise_conv2d_fix_1_fu_715_SeparableConv2D_4_m_s_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SeparableConv2D_4_m_s_address0 <= grp_depthwise_conv2d_fix_1_fu_558_output_r_address0;
        else 
            SeparableConv2D_4_m_s_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    SeparableConv2D_4_m_s_ce0_assign_proc : process(grp_depthwise_conv2d_fix_1_fu_558_output_r_ce0, grp_pointwise_conv2d_fix_1_fu_715_SeparableConv2D_4_m_s_ce0, ap_CS_fsm_state40, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            SeparableConv2D_4_m_s_ce0 <= grp_pointwise_conv2d_fix_1_fu_715_SeparableConv2D_4_m_s_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SeparableConv2D_4_m_s_ce0 <= grp_depthwise_conv2d_fix_1_fu_558_output_r_ce0;
        else 
            SeparableConv2D_4_m_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SeparableConv2D_4_m_s_we0_assign_proc : process(grp_depthwise_conv2d_fix_1_fu_558_output_r_we0, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            SeparableConv2D_4_m_s_we0 <= grp_depthwise_conv2d_fix_1_fu_558_output_r_we0;
        else 
            SeparableConv2D_4_m_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    UpSampling2D_0_array_address0_assign_proc : process(grp_padding2d_fix16_1_fu_532_input_r_address0, grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_address0, ap_CS_fsm_state28, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            UpSampling2D_0_array_address0 <= grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            UpSampling2D_0_array_address0 <= grp_padding2d_fix16_1_fu_532_input_r_address0;
        else 
            UpSampling2D_0_array_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    UpSampling2D_0_array_ce0_assign_proc : process(grp_padding2d_fix16_1_fu_532_input_r_ce0, grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_ce0, ap_CS_fsm_state28, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            UpSampling2D_0_array_ce0 <= grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            UpSampling2D_0_array_ce0 <= grp_padding2d_fix16_1_fu_532_input_r_ce0;
        else 
            UpSampling2D_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    UpSampling2D_0_array_we0_assign_proc : process(grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_we0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            UpSampling2D_0_array_we0 <= grp_up_sampling2d_fix16_1_fu_740_UpSampling2D_0_array_we0;
        else 
            UpSampling2D_0_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    UpSampling2D_1_array_address0_assign_proc : process(grp_padding2d_fix16_fu_506_input_r_address0, grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_address0, ap_CS_fsm_state36, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            UpSampling2D_1_array_address0 <= grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            UpSampling2D_1_array_address0 <= grp_padding2d_fix16_fu_506_input_r_address0;
        else 
            UpSampling2D_1_array_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    UpSampling2D_1_array_ce0_assign_proc : process(grp_padding2d_fix16_fu_506_input_r_ce0, grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_ce0, ap_CS_fsm_state36, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            UpSampling2D_1_array_ce0 <= grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            UpSampling2D_1_array_ce0 <= grp_padding2d_fix16_fu_506_input_r_ce0;
        else 
            UpSampling2D_1_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    UpSampling2D_1_array_we0_assign_proc : process(grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_we0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            UpSampling2D_1_array_we0 <= grp_up_sampling2d_fix16_fu_727_UpSampling2D_1_array_we0;
        else 
            UpSampling2D_1_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state3_assign_proc : process(input_data_V_data_V_0_vld_out, exitcond_fu_1174_p2)
    begin
                ap_block_state3 <= ((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state47_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_keep_V_1_ack_in, output_data_V_strb_V_1_ack_in, output_data_V_user_V_1_ack_in, output_data_V_last_V_1_ack_in, output_data_V_id_V_1_ack_in, output_data_V_dest_V_1_ack_in)
    begin
                ap_block_state47 <= ((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_1866_assign_proc : process(tmp_94_reg_1681, tmp_98_fu_1523_p2, tmp_96_fu_1508_p2)
    begin
                ap_condition_1866 <= ((tmp_94_reg_1681 = ap_const_lv1_0) or ((tmp_96_fu_1508_p2 = ap_const_lv1_0) or (tmp_98_fu_1523_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_1872_assign_proc : process(tmp_94_reg_1681, tmp_98_fu_1523_p2, tmp_96_fu_1508_p2)
    begin
                ap_condition_1872 <= ((tmp_96_fu_1508_p2 = ap_const_lv1_1) and (tmp_98_fu_1523_p2 = ap_const_lv1_1) and (tmp_94_reg_1681 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state47)
    begin
        if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_data_V_data_V_1_ack_in, output_data_V_data_V_1_state, output_data_V_keep_V_1_ack_in, output_data_V_keep_V_1_state, output_data_V_strb_V_1_ack_in, output_data_V_strb_V_1_state, output_data_V_user_V_1_ack_in, output_data_V_user_V_1_state, output_data_V_last_V_1_ack_in, output_data_V_last_V_1_state, output_data_V_id_V_1_ack_in, output_data_V_id_V_1_state, output_data_V_dest_V_1_ack_in, output_data_V_dest_V_1_state, ap_CS_fsm_state47)
    begin
        if ((not(((output_data_V_dest_V_1_ack_in = ap_const_logic_0) or (output_data_V_id_V_1_ack_in = ap_const_logic_0) or (output_data_V_last_V_1_ack_in = ap_const_logic_0) or (output_data_V_user_V_1_ack_in = ap_const_logic_0) or (output_data_V_strb_V_1_ack_in = ap_const_logic_0) or (output_data_V_keep_V_1_ack_in = ap_const_logic_0) or (output_data_V_data_V_1_ack_in = ap_const_logic_0))) and (output_data_V_dest_V_1_state(0) = ap_const_logic_0) and (output_data_V_id_V_1_state(0) = ap_const_logic_0) and (output_data_V_last_V_1_state(0) = ap_const_logic_0) and (output_data_V_user_V_1_state(0) = ap_const_logic_0) and (output_data_V_strb_V_1_state(0) = ap_const_logic_0) and (output_data_V_keep_V_1_state(0) = ap_const_logic_0) and (output_data_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    depth_fu_1289_p2 <= std_logic_vector(unsigned(depth7_reg_454) + unsigned(ap_const_lv32_1));
    exitcond2_fu_1132_p2 <= "1" when (height_reg_432 = ap_const_lv5_1C) else "0";
    exitcond_fu_1174_p2 <= "1" when (width_reg_443 = ap_const_lv5_1C) else "0";
    grp_depthwise_conv2d_fix_1_fu_558_ap_start <= grp_depthwise_conv2d_fix_1_fu_558_ap_start_reg;
    grp_depthwise_conv2d_fix_2_fu_573_ap_start <= grp_depthwise_conv2d_fix_2_fu_573_ap_start_reg;
    grp_depthwise_conv2d_fix_3_fu_588_ap_start <= grp_depthwise_conv2d_fix_3_fu_588_ap_start_reg;
    grp_depthwise_conv2d_fix_4_fu_603_ap_start <= grp_depthwise_conv2d_fix_4_fu_603_ap_start_reg;
    grp_depthwise_conv2d_fix_fu_618_ap_start <= grp_depthwise_conv2d_fix_fu_618_ap_start_reg;
    grp_max_pooling2d_fix16_1_fu_633_ap_start <= grp_max_pooling2d_fix16_1_fu_633_ap_start_reg;
    grp_max_pooling2d_fix16_fu_702_ap_start <= grp_max_pooling2d_fix16_fu_702_ap_start_reg;
    grp_padding2d_fix16_1_fu_532_ap_start <= grp_padding2d_fix16_1_fu_532_ap_start_reg;
    grp_padding2d_fix16_2_fu_545_ap_start <= grp_padding2d_fix16_2_fu_545_ap_start_reg;
    grp_padding2d_fix16_3_fu_519_ap_start <= grp_padding2d_fix16_3_fu_519_ap_start_reg;
    grp_padding2d_fix16_4_fu_753_ap_start <= grp_padding2d_fix16_4_fu_753_ap_start_reg;
    grp_padding2d_fix16_fu_506_ap_start <= grp_padding2d_fix16_fu_506_ap_start_reg;
    grp_pointwise_conv2d_fix_1_fu_715_ap_start <= grp_pointwise_conv2d_fix_1_fu_715_ap_start_reg;
    grp_pointwise_conv2d_fix_2_fu_660_ap_start <= grp_pointwise_conv2d_fix_2_fu_660_ap_start_reg;
    grp_pointwise_conv2d_fix_3_fu_646_ap_start <= grp_pointwise_conv2d_fix_3_fu_646_ap_start_reg;
    grp_pointwise_conv2d_fix_4_fu_688_ap_start <= grp_pointwise_conv2d_fix_4_fu_688_ap_start_reg;
    grp_pointwise_conv2d_fix_fu_674_ap_start <= grp_pointwise_conv2d_fix_fu_674_ap_start_reg;
    grp_up_sampling2d_fix16_1_fu_740_ap_start <= grp_up_sampling2d_fix16_1_fu_740_ap_start_reg;
    grp_up_sampling2d_fix16_fu_727_ap_start <= grp_up_sampling2d_fix16_fu_727_ap_start_reg;
    height_3_fu_1335_p2 <= std_logic_vector(signed(height8_reg_466) + signed(ap_const_lv32_1));
    height_4_fu_1138_p2 <= std_logic_vector(unsigned(height_reg_432) + unsigned(ap_const_lv5_1));

    input_0_array_0_address0_assign_proc : process(ap_CS_fsm_state3, grp_padding2d_fix16_4_fu_753_input_0_address0, ap_CS_fsm_state4, tmp_7_cast_fu_1220_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_0_array_0_address0 <= tmp_7_cast_fu_1220_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_array_0_address0 <= grp_padding2d_fix16_4_fu_753_input_0_address0;
        else 
            input_0_array_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_0_array_0_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2, grp_padding2d_fix16_4_fu_753_input_0_ce0, ap_CS_fsm_state4)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_array_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_0_array_0_ce0 <= grp_padding2d_fix16_4_fu_753_input_0_ce0;
        else 
            input_0_array_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_array_0_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_0_array_0_we0 <= ap_const_logic_1;
        else 
            input_0_array_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_data_TDATA_blk_n_assign_proc : process(input_data_V_data_V_0_state, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if (((exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_TDATA_blk_n <= input_data_V_data_V_0_state(0);
        else 
            input_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_data_TREADY <= input_data_V_dest_V_0_state(1);
    input_data_V_data_V_0_ack_in <= input_data_V_data_V_0_state(1);

    input_data_V_data_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_data_V_0_data_out_assign_proc : process(input_data_V_data_V_0_payload_A, input_data_V_data_V_0_payload_B, input_data_V_data_V_0_sel)
    begin
        if ((input_data_V_data_V_0_sel = ap_const_logic_1)) then 
            input_data_V_data_V_0_data_out <= input_data_V_data_V_0_payload_B;
        else 
            input_data_V_data_V_0_data_out <= input_data_V_data_V_0_payload_A;
        end if; 
    end process;

    input_data_V_data_V_0_load_A <= (input_data_V_data_V_0_state_cmp_full and not(input_data_V_data_V_0_sel_wr));
    input_data_V_data_V_0_load_B <= (input_data_V_data_V_0_state_cmp_full and input_data_V_data_V_0_sel_wr);
    input_data_V_data_V_0_sel <= input_data_V_data_V_0_sel_rd;
    input_data_V_data_V_0_state_cmp_full <= '0' when (input_data_V_data_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_data_V_0_vld_in <= input_data_TVALID;
    input_data_V_data_V_0_vld_out <= input_data_V_data_V_0_state(0);
    input_data_V_dest_V_0_ack_in <= input_data_V_dest_V_0_state(1);

    input_data_V_dest_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_dest_V_0_data_out_assign_proc : process(input_data_V_dest_V_0_payload_A, input_data_V_dest_V_0_payload_B, input_data_V_dest_V_0_sel)
    begin
        if ((input_data_V_dest_V_0_sel = ap_const_logic_1)) then 
            input_data_V_dest_V_0_data_out <= input_data_V_dest_V_0_payload_B;
        else 
            input_data_V_dest_V_0_data_out <= input_data_V_dest_V_0_payload_A;
        end if; 
    end process;

    input_data_V_dest_V_0_load_A <= (input_data_V_dest_V_0_state_cmp_full and not(input_data_V_dest_V_0_sel_wr));
    input_data_V_dest_V_0_load_B <= (input_data_V_dest_V_0_state_cmp_full and input_data_V_dest_V_0_sel_wr);
    input_data_V_dest_V_0_sel <= input_data_V_dest_V_0_sel_rd;
    input_data_V_dest_V_0_state_cmp_full <= '0' when (input_data_V_dest_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_dest_V_0_vld_in <= input_data_TVALID;
    input_data_V_dest_V_0_vld_out <= input_data_V_dest_V_0_state(0);
    input_data_V_id_V_0_ack_in <= input_data_V_id_V_0_state(1);

    input_data_V_id_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_id_V_0_data_out_assign_proc : process(input_data_V_id_V_0_payload_A, input_data_V_id_V_0_payload_B, input_data_V_id_V_0_sel)
    begin
        if ((input_data_V_id_V_0_sel = ap_const_logic_1)) then 
            input_data_V_id_V_0_data_out <= input_data_V_id_V_0_payload_B;
        else 
            input_data_V_id_V_0_data_out <= input_data_V_id_V_0_payload_A;
        end if; 
    end process;

    input_data_V_id_V_0_load_A <= (input_data_V_id_V_0_state_cmp_full and not(input_data_V_id_V_0_sel_wr));
    input_data_V_id_V_0_load_B <= (input_data_V_id_V_0_state_cmp_full and input_data_V_id_V_0_sel_wr);
    input_data_V_id_V_0_sel <= input_data_V_id_V_0_sel_rd;
    input_data_V_id_V_0_state_cmp_full <= '0' when (input_data_V_id_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_id_V_0_vld_in <= input_data_TVALID;
    input_data_V_id_V_0_vld_out <= input_data_V_id_V_0_state(0);
    input_data_V_keep_V_0_ack_in <= input_data_V_keep_V_0_state(1);

    input_data_V_keep_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_keep_V_0_data_out_assign_proc : process(input_data_V_keep_V_0_payload_A, input_data_V_keep_V_0_payload_B, input_data_V_keep_V_0_sel)
    begin
        if ((input_data_V_keep_V_0_sel = ap_const_logic_1)) then 
            input_data_V_keep_V_0_data_out <= input_data_V_keep_V_0_payload_B;
        else 
            input_data_V_keep_V_0_data_out <= input_data_V_keep_V_0_payload_A;
        end if; 
    end process;

    input_data_V_keep_V_0_load_A <= (input_data_V_keep_V_0_state_cmp_full and not(input_data_V_keep_V_0_sel_wr));
    input_data_V_keep_V_0_load_B <= (input_data_V_keep_V_0_state_cmp_full and input_data_V_keep_V_0_sel_wr);
    input_data_V_keep_V_0_sel <= input_data_V_keep_V_0_sel_rd;
    input_data_V_keep_V_0_state_cmp_full <= '0' when (input_data_V_keep_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_keep_V_0_vld_in <= input_data_TVALID;
    input_data_V_keep_V_0_vld_out <= input_data_V_keep_V_0_state(0);
    input_data_V_strb_V_0_ack_in <= input_data_V_strb_V_0_state(1);

    input_data_V_strb_V_0_ack_out_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_data_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            input_data_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_data_V_strb_V_0_data_out_assign_proc : process(input_data_V_strb_V_0_payload_A, input_data_V_strb_V_0_payload_B, input_data_V_strb_V_0_sel)
    begin
        if ((input_data_V_strb_V_0_sel = ap_const_logic_1)) then 
            input_data_V_strb_V_0_data_out <= input_data_V_strb_V_0_payload_B;
        else 
            input_data_V_strb_V_0_data_out <= input_data_V_strb_V_0_payload_A;
        end if; 
    end process;

    input_data_V_strb_V_0_load_A <= (input_data_V_strb_V_0_state_cmp_full and not(input_data_V_strb_V_0_sel_wr));
    input_data_V_strb_V_0_load_B <= (input_data_V_strb_V_0_state_cmp_full and input_data_V_strb_V_0_sel_wr);
    input_data_V_strb_V_0_sel <= input_data_V_strb_V_0_sel_rd;
    input_data_V_strb_V_0_state_cmp_full <= '0' when (input_data_V_strb_V_0_state = ap_const_lv2_1) else '1';
    input_data_V_strb_V_0_vld_in <= input_data_TVALID;
    input_data_V_strb_V_0_vld_out <= input_data_V_strb_V_0_state(0);

    out_0_dest_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state44, tmp_7_cast_fu_1220_p1, tmp_16_cast_fu_1487_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            out_0_dest_V_address0 <= tmp_16_cast_fu_1487_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_dest_V_address0 <= tmp_7_cast_fu_1220_p1(10 - 1 downto 0);
        else 
            out_0_dest_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_0_dest_V_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_0_dest_V_ce0 <= ap_const_logic_1;
        else 
            out_0_dest_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_dest_V_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_dest_V_we0 <= ap_const_logic_1;
        else 
            out_0_dest_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_id_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state44, tmp_7_cast_fu_1220_p1, tmp_16_cast_fu_1487_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            out_0_id_V_address0 <= tmp_16_cast_fu_1487_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_id_V_address0 <= tmp_7_cast_fu_1220_p1(10 - 1 downto 0);
        else 
            out_0_id_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_0_id_V_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_0_id_V_ce0 <= ap_const_logic_1;
        else 
            out_0_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_id_V_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_id_V_we0 <= ap_const_logic_1;
        else 
            out_0_id_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_keep_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state44, tmp_7_cast_fu_1220_p1, tmp_16_cast_fu_1487_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            out_0_keep_V_address0 <= tmp_16_cast_fu_1487_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_keep_V_address0 <= tmp_7_cast_fu_1220_p1(10 - 1 downto 0);
        else 
            out_0_keep_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_0_keep_V_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_0_keep_V_ce0 <= ap_const_logic_1;
        else 
            out_0_keep_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_keep_V_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_keep_V_we0 <= ap_const_logic_1;
        else 
            out_0_keep_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_strb_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state44, tmp_7_cast_fu_1220_p1, tmp_16_cast_fu_1487_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            out_0_strb_V_address0 <= tmp_16_cast_fu_1487_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_0_strb_V_address0 <= tmp_7_cast_fu_1220_p1(10 - 1 downto 0);
        else 
            out_0_strb_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    out_0_strb_V_ce0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            out_0_strb_V_ce0 <= ap_const_logic_1;
        else 
            out_0_strb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_0_strb_V_we0_assign_proc : process(input_data_V_data_V_0_vld_out, ap_CS_fsm_state3, exitcond_fu_1174_p2)
    begin
        if ((not(((exitcond_fu_1174_p2 = ap_const_lv1_0) and (input_data_V_data_V_0_vld_out = ap_const_logic_0))) and (exitcond_fu_1174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_strb_V_we0 <= ap_const_logic_1;
        else 
            out_0_strb_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_data_TDATA <= output_data_V_data_V_1_data_out;

    output_data_TDATA_blk_n_assign_proc : process(output_data_V_data_V_1_state, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            output_data_TDATA_blk_n <= output_data_V_data_V_1_state(1);
        else 
            output_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_data_TDEST <= output_data_V_dest_V_1_data_out;
    output_data_TID <= output_data_V_id_V_1_data_out;
    output_data_TKEEP <= output_data_V_keep_V_1_data_out;
    output_data_TLAST <= output_data_V_last_V_1_data_out;
    output_data_TSTRB <= output_data_V_strb_V_1_data_out;
    output_data_TUSER <= output_data_V_user_V_1_data_out;
    output_data_TVALID <= output_data_V_dest_V_1_state(0);
    output_data_V_data_V_1_ack_in <= output_data_V_data_V_1_state(1);
    output_data_V_data_V_1_ack_out <= output_data_TREADY;

    output_data_V_data_V_1_data_out_assign_proc : process(output_data_V_data_V_1_payload_A, output_data_V_data_V_1_payload_B, output_data_V_data_V_1_sel)
    begin
        if ((output_data_V_data_V_1_sel = ap_const_logic_1)) then 
            output_data_V_data_V_1_data_out <= output_data_V_data_V_1_payload_B;
        else 
            output_data_V_data_V_1_data_out <= output_data_V_data_V_1_payload_A;
        end if; 
    end process;

    output_data_V_data_V_1_load_A <= (output_data_V_data_V_1_state_cmp_full and not(output_data_V_data_V_1_sel_wr));
    output_data_V_data_V_1_load_B <= (output_data_V_data_V_1_state_cmp_full and output_data_V_data_V_1_sel_wr);
    output_data_V_data_V_1_sel <= output_data_V_data_V_1_sel_rd;
    output_data_V_data_V_1_state_cmp_full <= '0' when (output_data_V_data_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_data_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            output_data_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_data_V_1_vld_out <= output_data_V_data_V_1_state(0);
    output_data_V_dest_V_1_ack_in <= output_data_V_dest_V_1_state(1);
    output_data_V_dest_V_1_ack_out <= output_data_TREADY;

    output_data_V_dest_V_1_data_out_assign_proc : process(output_data_V_dest_V_1_payload_A, output_data_V_dest_V_1_payload_B, output_data_V_dest_V_1_sel)
    begin
        if ((output_data_V_dest_V_1_sel = ap_const_logic_1)) then 
            output_data_V_dest_V_1_data_out <= output_data_V_dest_V_1_payload_B;
        else 
            output_data_V_dest_V_1_data_out <= output_data_V_dest_V_1_payload_A;
        end if; 
    end process;

    output_data_V_dest_V_1_load_A <= (output_data_V_dest_V_1_state_cmp_full and not(output_data_V_dest_V_1_sel_wr));
    output_data_V_dest_V_1_load_B <= (output_data_V_dest_V_1_state_cmp_full and output_data_V_dest_V_1_sel_wr);
    output_data_V_dest_V_1_sel <= output_data_V_dest_V_1_sel_rd;
    output_data_V_dest_V_1_state_cmp_full <= '0' when (output_data_V_dest_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_dest_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            output_data_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_dest_V_1_vld_out <= output_data_V_dest_V_1_state(0);
    output_data_V_id_V_1_ack_in <= output_data_V_id_V_1_state(1);
    output_data_V_id_V_1_ack_out <= output_data_TREADY;

    output_data_V_id_V_1_data_out_assign_proc : process(output_data_V_id_V_1_payload_A, output_data_V_id_V_1_payload_B, output_data_V_id_V_1_sel)
    begin
        if ((output_data_V_id_V_1_sel = ap_const_logic_1)) then 
            output_data_V_id_V_1_data_out <= output_data_V_id_V_1_payload_B;
        else 
            output_data_V_id_V_1_data_out <= output_data_V_id_V_1_payload_A;
        end if; 
    end process;

    output_data_V_id_V_1_load_A <= (output_data_V_id_V_1_state_cmp_full and not(output_data_V_id_V_1_sel_wr));
    output_data_V_id_V_1_load_B <= (output_data_V_id_V_1_state_cmp_full and output_data_V_id_V_1_sel_wr);
    output_data_V_id_V_1_sel <= output_data_V_id_V_1_sel_rd;
    output_data_V_id_V_1_state_cmp_full <= '0' when (output_data_V_id_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_id_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            output_data_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_id_V_1_vld_out <= output_data_V_id_V_1_state(0);
    output_data_V_keep_V_1_ack_in <= output_data_V_keep_V_1_state(1);
    output_data_V_keep_V_1_ack_out <= output_data_TREADY;

    output_data_V_keep_V_1_data_out_assign_proc : process(output_data_V_keep_V_1_payload_A, output_data_V_keep_V_1_payload_B, output_data_V_keep_V_1_sel)
    begin
        if ((output_data_V_keep_V_1_sel = ap_const_logic_1)) then 
            output_data_V_keep_V_1_data_out <= output_data_V_keep_V_1_payload_B;
        else 
            output_data_V_keep_V_1_data_out <= output_data_V_keep_V_1_payload_A;
        end if; 
    end process;

    output_data_V_keep_V_1_load_A <= (output_data_V_keep_V_1_state_cmp_full and not(output_data_V_keep_V_1_sel_wr));
    output_data_V_keep_V_1_load_B <= (output_data_V_keep_V_1_state_cmp_full and output_data_V_keep_V_1_sel_wr);
    output_data_V_keep_V_1_sel <= output_data_V_keep_V_1_sel_rd;
    output_data_V_keep_V_1_state_cmp_full <= '0' when (output_data_V_keep_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_keep_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            output_data_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_keep_V_1_vld_out <= output_data_V_keep_V_1_state(0);
    output_data_V_last_V_1_ack_in <= output_data_V_last_V_1_state(1);
    output_data_V_last_V_1_ack_out <= output_data_TREADY;

    output_data_V_last_V_1_data_out_assign_proc : process(output_data_V_last_V_1_payload_A, output_data_V_last_V_1_payload_B, output_data_V_last_V_1_sel)
    begin
        if ((output_data_V_last_V_1_sel = ap_const_logic_1)) then 
            output_data_V_last_V_1_data_out <= output_data_V_last_V_1_payload_B;
        else 
            output_data_V_last_V_1_data_out <= output_data_V_last_V_1_payload_A;
        end if; 
    end process;

    output_data_V_last_V_1_load_A <= (output_data_V_last_V_1_state_cmp_full and not(output_data_V_last_V_1_sel_wr));
    output_data_V_last_V_1_load_B <= (output_data_V_last_V_1_state_cmp_full and output_data_V_last_V_1_sel_wr);
    output_data_V_last_V_1_sel <= output_data_V_last_V_1_sel_rd;
    output_data_V_last_V_1_state_cmp_full <= '0' when (output_data_V_last_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_last_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            output_data_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_last_V_1_vld_out <= output_data_V_last_V_1_state(0);
    output_data_V_strb_V_1_ack_in <= output_data_V_strb_V_1_state(1);
    output_data_V_strb_V_1_ack_out <= output_data_TREADY;

    output_data_V_strb_V_1_data_out_assign_proc : process(output_data_V_strb_V_1_payload_A, output_data_V_strb_V_1_payload_B, output_data_V_strb_V_1_sel)
    begin
        if ((output_data_V_strb_V_1_sel = ap_const_logic_1)) then 
            output_data_V_strb_V_1_data_out <= output_data_V_strb_V_1_payload_B;
        else 
            output_data_V_strb_V_1_data_out <= output_data_V_strb_V_1_payload_A;
        end if; 
    end process;

    output_data_V_strb_V_1_load_A <= (output_data_V_strb_V_1_state_cmp_full and not(output_data_V_strb_V_1_sel_wr));
    output_data_V_strb_V_1_load_B <= (output_data_V_strb_V_1_state_cmp_full and output_data_V_strb_V_1_sel_wr);
    output_data_V_strb_V_1_sel <= output_data_V_strb_V_1_sel_rd;
    output_data_V_strb_V_1_state_cmp_full <= '0' when (output_data_V_strb_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_strb_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            output_data_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_strb_V_1_vld_out <= output_data_V_strb_V_1_state(0);
    output_data_V_user_V_1_ack_in <= output_data_V_user_V_1_state(1);
    output_data_V_user_V_1_ack_out <= output_data_TREADY;

    output_data_V_user_V_1_data_out_assign_proc : process(output_data_V_user_V_1_payload_A, output_data_V_user_V_1_payload_B, output_data_V_user_V_1_sel)
    begin
        if ((output_data_V_user_V_1_sel = ap_const_logic_1)) then 
            output_data_V_user_V_1_data_out <= output_data_V_user_V_1_payload_B;
        else 
            output_data_V_user_V_1_data_out <= output_data_V_user_V_1_payload_A;
        end if; 
    end process;

    output_data_V_user_V_1_load_A <= (output_data_V_user_V_1_state_cmp_full and not(output_data_V_user_V_1_sel_wr));
    output_data_V_user_V_1_load_B <= (output_data_V_user_V_1_state_cmp_full and output_data_V_user_V_1_sel_wr);
    output_data_V_user_V_1_sel <= output_data_V_user_V_1_sel_rd;
    output_data_V_user_V_1_state_cmp_full <= '0' when (output_data_V_user_V_1_state = ap_const_lv2_1) else '1';

    output_data_V_user_V_1_vld_in_assign_proc : process(output_data_V_data_V_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((output_data_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            output_data_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            output_data_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    output_data_V_user_V_1_vld_out <= output_data_V_user_V_1_state(0);
    p_shl1_cast_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_1156_p3),11));
        p_shl2_cast_fu_1303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_1295_p3),38));

        p_shl3_cast_fu_1315_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_1307_p3),38));

    p_shl4_cast_fu_1384_p3 <= (tmp_17_fu_1380_p1 & ap_const_lv5_0);
    p_shl5_cast_fu_1396_p3 <= (tmp_18_fu_1392_p1 & ap_const_lv2_0);
    p_shl6_cast_fu_1354_p3 <= (tmp_12_fu_1350_p1 & ap_const_lv5_0);
    p_shl7_cast_fu_1366_p3 <= (tmp_13_fu_1362_p1 & ap_const_lv2_0);
    p_shl_cast_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_1144_p3),11));
    tmp_101_cast_fu_1494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_he),17));
        tmp_102_cast_fu_1504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_95_fu_1498_p2),32));

        tmp_104_cast_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_97_fu_1514_p2),32));

    tmp_11_fu_1374_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_1354_p3) - unsigned(p_shl7_cast_fu_1366_p3));
    tmp_12_fu_1350_p1 <= tmp_8_fu_1345_p2(6 - 1 downto 0);
    tmp_13_fu_1362_p1 <= tmp_8_fu_1345_p2(9 - 1 downto 0);
    tmp_14_fu_1404_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_1384_p3) - unsigned(p_shl5_cast_fu_1396_p3));
    tmp_15_cast_fu_1439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1434_p2),64));
    tmp_15_fu_1434_p2 <= std_logic_vector(unsigned(tmp_11_reg_1643) + unsigned(tmp_19_fu_1430_p1));
        tmp_16_cast_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_1671),64));

    tmp_16_fu_1444_p2 <= std_logic_vector(unsigned(tmp_14_reg_1648) + unsigned(tmp_19_fu_1430_p1));
    tmp_17_fu_1380_p1 <= height8_reg_466(6 - 1 downto 0);
    tmp_18_fu_1392_p1 <= height8_reg_466(9 - 1 downto 0);
    tmp_19_fu_1430_p1 <= width9_reg_478(11 - 1 downto 0);
    tmp_1_fu_1144_p3 <= (height_reg_432 & ap_const_lv5_0);
    tmp_2_fu_1156_p3 <= (height_reg_432 & ap_const_lv2_0);
    tmp_3_fu_1168_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1152_p1) - unsigned(p_shl1_cast_fu_1164_p1));
    tmp_4_fu_1295_p3 <= (depth7_reg_454 & ap_const_lv5_0);
    tmp_5_fu_1307_p3 <= (depth7_reg_454 & ap_const_lv2_0);
    tmp_6_fu_1319_p2 <= std_logic_vector(signed(p_shl2_cast_fu_1303_p1) - signed(p_shl3_cast_fu_1315_p1));
        tmp_7_cast_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_1215_p2),64));

    tmp_7_fu_1215_p2 <= std_logic_vector(unsigned(tmp_3_reg_1537) + unsigned(tmp_88_cast_fu_1211_p1));
    tmp_86_fu_1283_p2 <= "1" when (signed(depth7_reg_454) < signed(tmp_s_fu_1279_p1)) else "0";
    tmp_88_cast_fu_1211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_reg_443),11));
    tmp_88_fu_1325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_he),32));
    tmp_89_fu_1329_p2 <= "1" when (signed(height8_reg_466) < signed(tmp_88_fu_1325_p1)) else "0";
    tmp_8_fu_1345_p2 <= std_logic_vector(signed(tmp_91_cast_fu_1341_p1) + signed(tmp_6_reg_1630));
    tmp_90_fu_1410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_wi),32));
        tmp_91_cast_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(height8_reg_466),38));

    tmp_91_fu_1418_p2 <= "1" when (signed(width9_reg_478) < signed(tmp_90_fu_1410_p1)) else "0";
    tmp_92_fu_1455_p2 <= (tmp_fu_1449_p2 or height8_reg_466);
    tmp_93_cast_fu_1414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_wi),17));
    tmp_93_fu_1471_p2 <= std_logic_vector(signed(ap_const_lv17_1FFFF) + signed(tmp_98_cast_fu_1467_p1));
    tmp_94_fu_1481_p2 <= "1" when (depth7_reg_454 = tmp_99_cast_fu_1477_p1) else "0";
    tmp_95_fu_1498_p2 <= std_logic_vector(unsigned(tmp_101_cast_fu_1494_p1) + unsigned(ap_const_lv17_1FFFF));
    tmp_96_fu_1508_p2 <= "1" when (height8_reg_466 = tmp_102_cast_fu_1504_p1) else "0";
    tmp_97_fu_1514_p2 <= std_logic_vector(unsigned(tmp_93_cast_reg_1653) + unsigned(ap_const_lv17_1FFFF));
    tmp_98_cast_fu_1467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_de),17));
    tmp_98_fu_1523_p2 <= "1" when (width9_reg_478 = tmp_104_cast_fu_1519_p1) else "0";
        tmp_99_cast_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_93_fu_1471_p2),32));

    tmp_fu_1449_p2 <= (width9_reg_478 or depth7_reg_454);
    tmp_s_fu_1279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(SeparableConv2D_4_de),32));
    tmp_user_V_fu_1461_p2 <= "1" when (tmp_92_fu_1455_p2 = ap_const_lv32_0) else "0";
    width_6_fu_1180_p2 <= std_logic_vector(unsigned(width_reg_443) + unsigned(ap_const_lv5_1));
    width_7_fu_1424_p2 <= std_logic_vector(unsigned(width9_reg_478) + unsigned(ap_const_lv32_1));
end behav;
