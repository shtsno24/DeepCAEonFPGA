-- ==============================================================
-- File generated on Sat Nov 02 18:43:19 JST 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity depthwise_conv2d_fix_2_SeparableConv2D_1_w_s_rom is 
    generic(
             DWIDTH     : integer := 14; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of depthwise_conv2d_fix_2_SeparableConv2D_1_w_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00101000010100", 1 => "11101110100110", 2 => "11100010110000", 
    3 => "11111100110011", 4 => "00001110110101", 5 => "00000110101111", 
    6 => "11101100000111", 7 => "00011111010011", 8 => "00110011100010", 
    9 => "11100111101100", 10 => "00101010011100", 11 => "00110010100111", 
    12 => "11011011010100", 13 => "11111111010000", 14 => "00110001100101", 
    15 => "11010110001001", 16 => "00001000101111", 17 => "00011001111100", 
    18 => "00111101100100", 19 => "01000100101010", 20 => "11010001001011", 
    21 => "00101000111101", 22 => "00010100011101", 23 => "00000110010001", 
    24 => "00010011101100", 25 => "00100100101010", 26 => "11111010111011", 
    27 => "11111010000010", 28 => "11010110110000", 29 => "00010111111011", 
    30 => "11011001101110", 31 => "00101010110110", 32 => "11111010001000", 
    33 => "11011101011011", 34 => "00001010001101", 35 => "00110010101001", 
    36 => "11100101100110", 37 => "11011000101001", 38 => "00010001110100", 
    39 => "00001000101101", 40 => "00100010001000", 41 => "11101101111101", 
    42 => "11100001101110", 43 => "11010110011001", 44 => "11100110101011", 
    45 => "11011000011011", 46 => "00011001101101", 47 => "11011100110000", 
    48 => "00100101010101", 49 => "11100111011100", 50 => "00010100000010", 
    51 => "11110000110100", 52 => "11110001100011", 53 => "11111101011001", 
    54 => "00100100000110", 55 => "11011001111000", 56 => "00110000101011", 
    57 => "11100000100100", 58 => "11101000001101", 59 => "00100110101111", 
    60 => "00100111101000", 61 => "11110110110101", 62 => "11110000001100", 
    63 => "00101011011100", 64 => "00011111011010", 65 => "11110100011000", 
    66 => "11110100111110", 67 => "00000010000111", 68 => "00101010110001", 
    69 => "00101000000111", 70 => "11111110001100", 71 => "11011001001000", 
    72 => "11110110100100", 73 => "00100101000011", 74 => "00100010100000", 
    75 => "11000101110111", 76 => "00110001111011", 77 => "11101011111101", 
    78 => "11100100001101", 79 => "11101110101010", 80 => "00000111100010", 
    81 => "11011010100111", 82 => "10110100011111", 83 => "10111100111111", 
    84 => "00000011011100", 85 => "11000110010010", 86 => "11110000100110", 
    87 => "00001100101110", 88 => "00111001001100", 89 => "00110010110100", 
    90 => "00100111000110", 91 => "11011111011010", 92 => "11001111100001", 
    93 => "00000011111110", 94 => "11110100000001", 95 => "00001000101011", 
    96 => "11111110011100", 97 => "11011000011111", 98 => "00101000001100", 
    99 => "11010001111110", 100 => "11111001110010", 101 => "00000001111000", 
    102 => "11010110001100", 103 => "00100000111110", 104 => "00110010001111", 
    105 => "11110010010111", 106 => "11110110111111", 107 => "11010100100010", 
    108 => "00110000000001", 109 => "11011100110001", 110 => "00011001100100", 
    111 => "00101001001010", 112 => "10011010101101", 113 => "00000010100101", 
    114 => "11100000111010", 115 => "11100010101101", 116 => "00000110111101", 
    117 => "11111110011011", 118 => "10110011100011", 119 => "11100111011100", 
    120 => "10111100011001", 121 => "11111010001001", 122 => "11000010000100", 
    123 => "00100001011010", 124 => "11110011101101", 125 => "00001101100010", 
    126 => "00110010101101", 127 => "00001111000010", 128 => "11010010111111", 
    129 => "00101010110001", 130 => "11100011011010", 131 => "00100001100110", 
    132 => "11101100111001", 133 => "00001010101000", 134 => "11110110101010", 
    135 => "00010100101010", 136 => "11011101110110", 137 => "00001100010110", 
    138 => "00000101100111", 139 => "01000001011000", 140 => "01110000110100", 
    141 => "11011001100001", 142 => "00001111011001", 143 => "01000100000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity depthwise_conv2d_fix_2_SeparableConv2D_1_w_s is
    generic (
        DataWidth : INTEGER := 14;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of depthwise_conv2d_fix_2_SeparableConv2D_1_w_s is
    component depthwise_conv2d_fix_2_SeparableConv2D_1_w_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    depthwise_conv2d_fix_2_SeparableConv2D_1_w_s_rom_U :  component depthwise_conv2d_fix_2_SeparableConv2D_1_w_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


