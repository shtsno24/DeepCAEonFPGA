-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_fix16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Padding2D_4_array_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Padding2D_4_array_ce0 : OUT STD_LOGIC;
    Padding2D_4_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2d_fix16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv16_FB0B : STD_LOGIC_VECTOR (15 downto 0) := "1111101100001011";
    constant ap_const_lv15_7B0B : STD_LOGIC_VECTOR (14 downto 0) := "111101100001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Conv2D_4_w_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Conv2D_4_w_0_ce0 : STD_LOGIC;
    signal Conv2D_4_w_0_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_578 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_reg_583 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_reg_588 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_fu_254_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_104_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul6_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul6_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul3_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_d_3_fu_273_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_3_reg_616 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_fu_284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_reg_624 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_cast_fu_300_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_109_cast_reg_634 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp1_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_w_3_fu_313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_3_reg_647 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_110_cast_fu_323_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_110_cast_reg_652 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond3_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr11_reg_657 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_662 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal in_d_1_fu_347_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_1_reg_670 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_h_1_fu_381_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_h_1_reg_683 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp2_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_120_fu_422_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_120_reg_693 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp3_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_698 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_w_1_fu_438_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_1_reg_706 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Padding2D_4_array_lo_reg_721 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal Conv2D_4_w_0_load_reg_726 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_40_reg_731 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_tmp_s_fu_539_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_tmp_s_reg_736 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal out_d_reg_134 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul2_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul5_reg_157 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_h_reg_169 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond5_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_w_reg_181 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal in_d_reg_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_h_reg_215 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_112_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_fu_508_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_tmp_cast_fu_547_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_304_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_111_fu_327_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_115_fu_353_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_117_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_cast9_fu_387_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_fu_391_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_cast_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl5_fu_410_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl5_cast_fu_418_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_119_cast_fu_406_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_fu_428_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_cast_fu_448_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_fu_452_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_cast_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_124_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_cast8_fu_444_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp7_fu_471_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp7_cast_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_128_fu_480_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_131_fu_551_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_133_fu_505_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_515_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_113_fu_519_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_531_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_cast_fu_525_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component network_mul_mul_16s_13s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component conv2d_fix16_Conv2D_4_w_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    Conv2D_4_w_0_U : component conv2d_fix16_Conv2D_4_w_0
    generic map (
        DataWidth => 13,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv2D_4_w_0_address0,
        ce0 => Conv2D_4_w_0_ce0,
        q0 => Conv2D_4_w_0_q0);

    network_mul_mul_16s_13s_29_1_1_U106 : component network_mul_mul_16s_13s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => Padding2D_4_array_lo_reg_721,
        din1 => Conv2D_4_w_0_load_reg_726,
        dout => tmp_131_fu_551_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_d_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_375_p2 = ap_const_lv1_1))) then 
                in_d_reg_192 <= in_d_1_reg_670;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_308_p2 = ap_const_lv1_0))) then 
                in_d_reg_192 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    k_h_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_432_p2 = ap_const_lv1_1))) then 
                k_h_reg_215 <= k_h_1_reg_683;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_342_p2 = ap_const_lv1_0))) then 
                k_h_reg_215 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_w_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_w_reg_227 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                k_w_reg_227 <= k_w_1_reg_706;
            end if; 
        end if;
    end process;

    out_d_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_279_p2 = ap_const_lv1_1))) then 
                out_d_reg_134 <= out_d_3_reg_616;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                out_d_reg_134 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_h_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_268_p2 = ap_const_lv1_0))) then 
                out_h_reg_169 <= ap_const_lv16_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_308_p2 = ap_const_lv1_1))) then 
                out_h_reg_169 <= out_h_3_reg_624;
            end if; 
        end if;
    end process;

    out_w_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                out_w_reg_181 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                out_w_reg_181 <= out_w_3_reg_647;
            end if; 
        end if;
    end process;

    phi_mul2_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_279_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_145 <= next_mul3_reg_608;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul2_reg_145 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_279_p2 = ap_const_lv1_1))) then 
                phi_mul5_reg_157 <= next_mul6_reg_603;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul5_reg_157 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_375_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_203 <= next_mul_reg_662;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_308_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_203 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                Conv2D_4_w_0_load_reg_726 <= Conv2D_4_w_0_q0;
                Padding2D_4_array_lo_reg_721 <= Padding2D_4_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                in_d_1_reg_670 <= in_d_1_fu_347_p2;
                next_mul_reg_662 <= next_mul_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                k_h_1_reg_683 <= k_h_1_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                k_w_1_reg_706 <= k_w_1_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_608 <= next_mul3_fu_263_p2;
                next_mul6_reg_603 <= next_mul6_fu_258_p2;
                out_d_3_reg_616 <= out_d_3_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                out_h_3_reg_624 <= out_h_3_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                out_w_3_reg_647 <= out_w_3_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_308_p2 = ap_const_lv1_0))) then
                output_addr11_reg_657 <= tmp_112_fu_332_p1(10 - 1 downto 0);
                    tmp_110_cast_reg_652(15 downto 0) <= tmp_110_cast_fu_323_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                p_tmp_s_reg_736 <= p_tmp_s_fu_539_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp1_reg_639 <= tmp1_fu_304_p2;
                    tmp_109_cast_reg_634(15 downto 0) <= tmp_109_cast_fu_300_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_375_p2 = ap_const_lv1_0))) then
                tmp2_reg_688 <= tmp2_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp3_reg_698 <= tmp3_fu_428_p2;
                tmp_120_reg_693 <= tmp_120_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_342_p2 = ap_const_lv1_0))) then
                tmp6_reg_675 <= tmp6_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_101_reg_583(15 downto 0) <= tmp_101_fu_242_p1(15 downto 0);
                    tmp_102_reg_588(15 downto 0) <= tmp_102_fu_246_p1(15 downto 0);
                    tmp_103_reg_593(15 downto 0) <= tmp_103_fu_250_p1(15 downto 0);
                    tmp_104_reg_598(15 downto 0) <= tmp_104_fu_254_p1(15 downto 0);
                    tmp_s_reg_578(15 downto 0) <= tmp_s_fu_238_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_40_reg_731 <= tmp_131_fu_551_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_279_p2 = ap_const_lv1_0))) then
                tmp_reg_629 <= tmp_fu_294_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_578(31 downto 16) <= "0000000000000000";
    tmp_101_reg_583(31 downto 16) <= "0000000000000000";
    tmp_102_reg_588(31 downto 16) <= "0000000000000000";
    tmp_103_reg_593(31 downto 16) <= "0000000000000000";
    tmp_104_reg_598(31 downto 16) <= "0000000000000000";
    tmp_109_cast_reg_634(16) <= '0';
    tmp_110_cast_reg_652(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond4_fu_279_p2, ap_CS_fsm_state5, exitcond3_fu_308_p2, ap_CS_fsm_state6, exitcond2_fu_342_p2, ap_CS_fsm_state7, exitcond1_fu_375_p2, ap_CS_fsm_state9, exitcond_fu_432_p2, exitcond5_fu_268_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond4_fu_279_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond2_fu_342_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_375_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_432_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Conv2D_4_w_0_address0 <= tmp_129_fu_485_p1(8 - 1 downto 0);

    Conv2D_4_w_0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Conv2D_4_w_0_ce0 <= ap_const_logic_1;
        else 
            Conv2D_4_w_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Padding2D_4_array_address0 <= tmp_125_fu_466_p1(14 - 1 downto 0);

    Padding2D_4_array_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Padding2D_4_array_ce0 <= ap_const_logic_1;
        else 
            Padding2D_4_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_268_p2)
    begin
        if ((((exitcond5_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_268_p2)
    begin
        if (((exitcond5_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_375_p2 <= "1" when (k_h_reg_215 = ap_const_lv2_3) else "0";
    exitcond2_fu_342_p2 <= "1" when (in_d_reg_192 = input_depth) else "0";
    exitcond3_fu_308_p2 <= "1" when (out_w_reg_181 = output_width) else "0";
    exitcond4_fu_279_p2 <= "1" when (out_h_reg_169 = output_height) else "0";
    exitcond5_fu_268_p2 <= "1" when (out_d_reg_134 = output_depth) else "0";
    exitcond_fu_432_p2 <= "1" when (k_w_reg_227 = ap_const_lv2_3) else "0";
    in_d_1_fu_347_p2 <= std_logic_vector(unsigned(in_d_reg_192) + unsigned(ap_const_lv16_1));
    k_h_1_fu_381_p2 <= std_logic_vector(unsigned(k_h_reg_215) + unsigned(ap_const_lv2_1));
    k_w_1_fu_438_p2 <= std_logic_vector(unsigned(k_w_reg_227) + unsigned(ap_const_lv2_1));
    next_mul3_fu_263_p2 <= std_logic_vector(unsigned(phi_mul2_reg_145) + unsigned(tmp_s_reg_578));
    next_mul6_fu_258_p2 <= std_logic_vector(unsigned(phi_mul5_reg_157) + unsigned(tmp_104_reg_598));
    next_mul_fu_337_p2 <= std_logic_vector(unsigned(phi_mul_reg_203) + unsigned(tmp_102_reg_588));
    out_d_3_fu_273_p2 <= std_logic_vector(unsigned(out_d_reg_134) + unsigned(ap_const_lv16_1));
    out_h_3_fu_284_p2 <= std_logic_vector(unsigned(out_h_reg_169) + unsigned(ap_const_lv16_1));
    out_w_3_fu_313_p2 <= std_logic_vector(unsigned(out_w_reg_181) + unsigned(ap_const_lv16_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state5, output_addr11_reg_657, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state12, tmp_112_fu_332_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_address0 <= output_addr11_reg_657;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_address0 <= tmp_112_fu_332_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state14, ap_CS_fsm_state12, tmp_134_fu_508_p2, p_tmp_cast_fu_547_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            output_r_d0 <= p_tmp_cast_fu_547_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            output_r_d0 <= tmp_134_fu_508_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state5, exitcond3_fu_308_p2, ap_CS_fsm_state14, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_308_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl5_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl5_fu_410_p3),5));
    p_shl5_fu_410_p3 <= (k_h_reg_215 & ap_const_lv2_0);
    p_tmp_cast_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_tmp_s_reg_736),16));
    p_tmp_s_fu_539_p3 <= 
        ap_const_lv15_0 when (tmp_38_fu_531_p3(0) = '1') else 
        tmp_113_cast_fu_525_p2;
    tmp1_fu_304_p1 <= tmp_101_reg_583(16 - 1 downto 0);
    tmp1_fu_304_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_629) * signed('0' &tmp1_fu_304_p1))), 32));
    tmp2_fu_400_p2 <= std_logic_vector(unsigned(phi_mul_reg_203) + unsigned(tmp4_cast_fu_396_p1));
    tmp3_fu_428_p0 <= tmp_103_reg_593(16 - 1 downto 0);
    tmp3_fu_428_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp3_fu_428_p0) * signed(tmp2_reg_688))), 32));
    tmp4_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_391_p2),32));
    tmp4_fu_391_p2 <= std_logic_vector(unsigned(tmp_119_cast9_fu_387_p1) + unsigned(tmp_109_cast_reg_634));
    tmp5_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_452_p2),32));
    tmp5_fu_452_p2 <= std_logic_vector(unsigned(tmp_110_cast_reg_652) + unsigned(tmp_121_cast_fu_448_p1));
    tmp6_fu_369_p2 <= std_logic_vector(unsigned(tmp_39_fu_363_p2) + unsigned(tmp_117_fu_357_p2));
        tmp7_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_471_p2),32));

    tmp7_fu_471_p2 <= std_logic_vector(unsigned(tmp_121_cast8_fu_444_p1) + unsigned(tmp_120_reg_693));
    tmp_101_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),32));
    tmp_102_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
    tmp_103_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    tmp_104_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_depth),32));
    tmp_109_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_169),17));
    tmp_109_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_169),32));
    tmp_110_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_181),17));
    tmp_110_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_181),32));
    tmp_111_fu_327_p2 <= std_logic_vector(unsigned(tmp1_reg_639) + unsigned(tmp_110_fu_319_p1));
        tmp_112_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_111_fu_327_p2),64));

    tmp_113_cast_fu_525_p2 <= std_logic_vector(signed(ap_const_lv15_7B0B) + signed(tmp_37_fu_515_p1));
    tmp_113_fu_519_p2 <= std_logic_vector(signed(ap_const_lv16_FB0B) + signed(output_r_q0));
    tmp_115_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_reg_192),32));
    tmp_117_fu_357_p2 <= std_logic_vector(unsigned(phi_mul5_reg_157) + unsigned(tmp_115_fu_353_p1));
    tmp_119_cast9_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_reg_215),17));
    tmp_119_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_reg_215),5));
    tmp_120_fu_422_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_418_p1) - unsigned(tmp_119_cast_fu_406_p1));
    tmp_121_cast8_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_reg_227),5));
    tmp_121_cast_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_reg_227),17));
    tmp_124_fu_461_p2 <= std_logic_vector(unsigned(tmp3_reg_698) + unsigned(tmp5_cast_fu_457_p1));
        tmp_125_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_124_fu_461_p2),64));

    tmp_128_fu_480_p2 <= std_logic_vector(unsigned(tmp6_reg_675) + unsigned(tmp7_cast_fu_476_p1));
        tmp_129_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_128_fu_480_p2),64));

        tmp_133_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_40_reg_731),16));

    tmp_134_fu_508_p2 <= std_logic_vector(signed(tmp_133_fu_505_p1) + signed(output_r_q0));
    tmp_37_fu_515_p1 <= output_r_q0(15 - 1 downto 0);
    tmp_38_fu_531_p3 <= tmp_113_fu_519_p2(15 downto 15);
    tmp_39_fu_363_p2 <= std_logic_vector(shift_left(unsigned(tmp_117_fu_357_p2),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_fu_294_p2 <= std_logic_vector(unsigned(phi_mul2_reg_145) + unsigned(tmp_109_fu_290_p1));
    tmp_s_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),32));
end behav;
