-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (6 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (5 downto 0);
    output_width : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    kernel_0_ce1 : OUT STD_LOGIC;
    kernel_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_394 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_399 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal output_width_cast_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast_reg_1273 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_411_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_reg_1279 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_80_cast1_cast_fu_415_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_80_cast1_cast_reg_1284 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_81_cast_fu_419_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_81_cast_reg_1291 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_82_cast_cast_fu_423_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_82_cast_cast_reg_1296 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_mul3_fu_427_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul3_reg_1301 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_432_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul_reg_1306 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_d_4_fu_443_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_d_4_reg_1314 : STD_LOGIC_VECTOR (4 downto 0);
    signal bias_addr_reg_1319 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond4_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_1324 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_reg_1337 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_0_addr_1_reg_1342 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_2_reg_1347 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_3_reg_1352 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_4_reg_1357 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_5_reg_1362 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_6_reg_1367 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_7_reg_1372 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_0_addr_8_reg_1377 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_4_fu_573_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_h_4_reg_1385 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp24_fu_583_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp24_reg_1390 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond3_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_589_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_reg_1397 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_1_fu_595_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_1_reg_1402 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_0_2_fu_600_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_0_2_reg_1407 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_fu_608_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp7_reg_1412 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp41_cast_fu_621_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp41_cast_reg_1417 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp5_0_1_cast_fu_633_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_1_cast_reg_1426 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_cast_fu_645_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_cast_reg_1435 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_cast_fu_649_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_cast_reg_1444 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond2_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1450 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_89_cast_fu_657_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_89_cast_reg_1454 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_57_fu_661_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_57_reg_1461 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_0_0_2_fu_666_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_0_0_2_reg_1466 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_111_0_0_cast_fu_682_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_0_0_cast_reg_1478 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_0_1_fu_686_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_0_1_reg_1487 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_0_2_fu_691_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_0_2_reg_1492 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond2_1_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_1_reg_1497 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_load_reg_1501 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_0_1_fu_708_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_1_reg_1516 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_1_1_fu_712_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_1_1_reg_1521 : STD_LOGIC_VECTOR (16 downto 0);
    signal kernel_0_load_1_reg_1526 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_65_reg_1531 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_2_reg_1536 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_0_1_2_fu_724_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_1_2_reg_1551 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_fu_728_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_reg_1556 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_load_66_reg_1561 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal kernel_0_load_3_reg_1566 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_67_reg_1571 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_4_reg_1576 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_0_2_1_fu_740_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_1_reg_1591 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_2_fu_744_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_2_reg_1596 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_load_68_reg_1601 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal kernel_0_load_5_reg_1606 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_69_reg_1611 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_6_reg_1616 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_70_reg_1631 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal kernel_0_load_7_reg_1636 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_71_reg_1641 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_8_reg_1646 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_118_0_2_cast_fu_759_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_cast_reg_1656 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_2_1_cast_fu_762_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_2_1_cast_reg_1662 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_1_cast_fu_765_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_1_cast_reg_1668 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_2_cast_fu_771_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_2_cast_reg_1679 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_118_0_cast_fu_778_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_cast_reg_1690 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_0_1_cast_fu_781_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_0_1_cast_reg_1696 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_0_1_cast_fu_785_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_0_1_cast_reg_1702 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_0_2_cast_fu_791_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_0_2_cast_reg_1713 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_cast_fu_797_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_cast_reg_1724 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_1_1_cast_fu_800_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_1_1_cast_reg_1730 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_1_cast_fu_803_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_1_cast_reg_1736 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_2_cast_fu_809_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_2_cast_reg_1747 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1172_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_2_reg_1753 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_1178_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_2_1_reg_1758 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1184_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_2_2_reg_1763 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_load_reg_1768 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_1190_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_60_reg_1774 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1196_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_0_1_reg_1779 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1202_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_0_2_reg_1784 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1208_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_1_reg_1789 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1214_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_1_1_reg_1794 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1220_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_1_2_reg_1799 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp8_fu_845_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_reg_1804 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_905_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_1809 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp2_fu_916_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_1814 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_928_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_1819 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_6_0_2_2_fu_937_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_6_0_2_2_reg_1824 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_62_fu_942_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_62_reg_1829 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_1_0_1_fu_950_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_1_0_1_reg_1834 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_111_1_0_2_fu_955_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_1_0_2_reg_1841 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_105_1_fu_960_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_105_1_reg_1848 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_4_1_fu_964_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_4_1_reg_1853 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_1_0_1_fu_970_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_0_1_reg_1858 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_112_1_0_2_fu_974_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_0_2_reg_1863 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1226_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_reg_1868 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_1230_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_1_reg_1883 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_112_1_1_1_fu_986_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_1_1_reg_1888 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_1_2_fu_990_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_1_2_reg_1893 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_2_reg_1898 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_112_1_2_1_fu_994_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_2_1_reg_1903 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_2_2_fu_998_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_2_2_reg_1908 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_121_1_1_reg_1913 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_2_reg_1928 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_fu_1037_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_reg_1933 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1238_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_0_1_reg_1968 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_1243_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_0_2_reg_1973 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1248_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_1_1_reg_1988 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_1253_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_1_2_reg_1993 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp12_fu_1097_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_reg_1998 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_1_1_reg_2003 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_121_1_1_2_reg_2008 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1258_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_2_1_reg_2013 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1263_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_2_2_reg_2018 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp16_fu_1145_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp16_reg_2023 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp14_fu_1154_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_reg_2028 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal buffer_6_1_2_2_fu_1163_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_6_1_2_2_reg_2033 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal out_d_reg_336 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_347 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_359 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_h_reg_371 : STD_LOGIC_VECTOR (4 downto 0);
    signal out_w_reg_382 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_s_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_56_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_0_1_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_0_2_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_1_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_1_1_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_1_2_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_2_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_2_1_fu_549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_2_2_fu_559_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_0_1_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_0_2_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_1_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_1_1_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_1_2_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_2_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_2_1_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_2_2_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_0_1_fu_978_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_0_2_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_1_1_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_1_2_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_2_1_fu_1050_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_2_2_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_1_fu_1168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_width_cast_fu_403_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_58_fu_458_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_462_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_84_cast2_fu_454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_fu_470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_0_0_1_fu_484_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_0_0_2_fu_494_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_0_1_fu_504_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_0_1_1_fu_514_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_0_1_2_fu_524_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_0_2_fu_534_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_0_2_1_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_0_2_2_fu_554_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_h_cast_fu_564_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_88_cast_fu_579_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_fu_608_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp7_fu_608_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp41_fu_616_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp41_fu_616_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp41_fu_616_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_1_fu_628_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_1_fu_628_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_1_fu_628_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_2_fu_640_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_2_fu_640_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp5_0_2_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_111_0_0_s_fu_676_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_2_1_fu_821_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_2_2_fu_830_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_fu_839_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_2_fu_812_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_61_fu_851_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_0_2_fu_869_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_1_fu_878_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_910_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_0_1_fu_860_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_1_1_fu_887_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_1_2_fu_896_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_922_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_933_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_fu_1002_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_0_2_fu_1083_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp13_fu_1092_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_0_1_fu_1074_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_2_1_fu_1121_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_2_2_fu_1130_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp17_fu_1139_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_fu_1150_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_1159_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1226_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1230_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1234_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1238_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1243_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1248_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1253_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1258_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1263_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp41_fu_616_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_1_fu_628_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_0_2_fu_640_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp7_fu_608_p10 : STD_LOGIC_VECTOR (14 downto 0);

    component network_mul_mul_16s_16s_30_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_3_1_U77 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_6_reg_1616,
        din1 => input_load_69_reg_1611,
        ce => ap_const_logic_1,
        dout => grp_fu_1172_p2);

    network_mul_mul_16s_16s_30_3_1_U78 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_7_reg_1636,
        din1 => input_load_70_reg_1631,
        ce => ap_const_logic_1,
        dout => grp_fu_1178_p2);

    network_mul_mul_16s_16s_30_3_1_U79 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_8_reg_1646,
        din1 => input_load_71_reg_1641,
        ce => ap_const_logic_1,
        dout => grp_fu_1184_p2);

    network_mul_mul_16s_16s_30_3_1_U80 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_reg_1501,
        din1 => reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_1190_p2);

    network_mul_mul_16s_16s_30_3_1_U81 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_1_reg_1526,
        din1 => reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_1196_p2);

    network_mul_mul_16s_16s_30_3_1_U82 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_2_reg_1536,
        din1 => input_load_65_reg_1531,
        ce => ap_const_logic_1,
        dout => grp_fu_1202_p2);

    network_mul_mul_16s_16s_30_3_1_U83 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_3_reg_1566,
        din1 => input_load_66_reg_1561,
        ce => ap_const_logic_1,
        dout => grp_fu_1208_p2);

    network_mul_mul_16s_16s_30_3_1_U84 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_4_reg_1576,
        din1 => input_load_67_reg_1571,
        ce => ap_const_logic_1,
        dout => grp_fu_1214_p2);

    network_mul_mul_16s_16s_30_3_1_U85 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_5_reg_1606,
        din1 => input_load_68_reg_1601,
        ce => ap_const_logic_1,
        dout => grp_fu_1220_p2);

    network_mul_mul_16s_16s_30_3_1_U86 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1226_p0,
        din1 => grp_fu_1226_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1226_p2);

    network_mul_mul_16s_16s_30_3_1_U87 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1230_p0,
        din1 => grp_fu_1230_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1230_p2);

    network_mul_mul_16s_16s_30_3_1_U88 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1234_p0,
        din1 => grp_fu_1234_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1234_p2);

    network_mul_mul_16s_16s_30_3_1_U89 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1238_p0,
        din1 => reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_1238_p2);

    network_mul_mul_16s_16s_30_3_1_U90 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1243_p0,
        din1 => reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_1243_p2);

    network_mul_mul_16s_16s_30_3_1_U91 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1248_p0,
        din1 => reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_1248_p2);

    network_mul_mul_16s_16s_30_3_1_U92 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1253_p0,
        din1 => reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_1253_p2);

    network_mul_mul_16s_16s_30_3_1_U93 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1258_p0,
        din1 => reg_394,
        ce => ap_const_logic_1,
        dout => grp_fu_1258_p2);

    network_mul_mul_16s_16s_30_3_1_U94 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1263_p0,
        din1 => reg_399,
        ce => ap_const_logic_1,
        dout => grp_fu_1263_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_568_p2 = ap_const_lv1_1))) then 
                out_d_reg_336 <= out_d_4_reg_1314;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_336 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    out_h_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_reg_371 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and ((exitcond2_1_reg_1497 = ap_const_lv1_1) or (exitcond2_reg_1450 = ap_const_lv1_1)))) then 
                out_h_reg_371 <= out_h_4_reg_1385;
            end if; 
        end if;
    end process;

    out_w_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                out_w_reg_382 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                out_w_reg_382 <= out_w_4_1_reg_1853;
            end if; 
        end if;
    end process;

    phi_mul2_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_568_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_359 <= next_mul3_reg_1301;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_359 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_568_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_347 <= next_mul_reg_1306;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_347 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                reg_394 <= input_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_394 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_437_p2 = ap_const_lv1_0))) then
                bias_addr_reg_1319 <= tmp_s_fu_449_p1(4 - 1 downto 0);
                tmp_55_reg_1324 <= tmp_55_fu_474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_1768 <= bias_q0;
                tmp8_reg_1804 <= tmp8_fu_845_p2;
                tmp_119_0_0_1_reg_1779 <= grp_fu_1196_p2;
                tmp_119_0_0_2_reg_1784 <= grp_fu_1202_p2;
                tmp_119_0_1_1_reg_1794 <= grp_fu_1214_p2;
                tmp_119_0_1_2_reg_1799 <= grp_fu_1220_p2;
                tmp_119_0_1_reg_1789 <= grp_fu_1208_p2;
                tmp_60_reg_1774 <= grp_fu_1190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                buffer_6_0_2_2_reg_1824 <= buffer_6_0_2_2_fu_937_p2;
                tmp_62_reg_1829 <= tmp_62_fu_942_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                buffer_6_1_2_2_reg_2033 <= buffer_6_1_2_2_fu_1163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                exitcond2_1_reg_1497 <= exitcond2_1_fu_695_p2;
                    tmp_111_0_0_cast_reg_1478(15 downto 1) <= tmp_111_0_0_cast_fu_682_p1(15 downto 1);
                tmp_112_0_0_1_reg_1487 <= tmp_112_0_0_1_fu_686_p2;
                tmp_112_0_0_2_reg_1492 <= tmp_112_0_0_2_fu_691_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                exitcond2_reg_1450 <= exitcond2_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_65_reg_1531 <= input_r_q1;
                kernel_0_load_1_reg_1526 <= kernel_0_q0;
                kernel_0_load_2_reg_1536 <= kernel_0_q1;
                tmp_112_0_1_2_reg_1551 <= tmp_112_0_1_2_fu_724_p2;
                tmp_112_0_2_reg_1556 <= tmp_112_0_2_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_66_reg_1561 <= input_r_q1;
                input_load_67_reg_1571 <= input_r_q0;
                kernel_0_load_3_reg_1566 <= kernel_0_q1;
                kernel_0_load_4_reg_1576 <= kernel_0_q0;
                tmp_112_0_2_1_reg_1591 <= tmp_112_0_2_1_fu_740_p2;
                tmp_112_0_2_2_reg_1596 <= tmp_112_0_2_2_fu_744_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                input_load_68_reg_1601 <= input_r_q1;
                input_load_69_reg_1611 <= input_r_q0;
                kernel_0_load_5_reg_1606 <= kernel_0_q1;
                kernel_0_load_6_reg_1616 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                input_load_70_reg_1631 <= input_r_q1;
                input_load_71_reg_1641 <= input_r_q0;
                kernel_0_load_7_reg_1636 <= kernel_0_q1;
                kernel_0_load_8_reg_1646 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_0_addr_1_reg_1342 <= tmp_117_0_0_1_fu_489_p1(8 - 1 downto 0);
                kernel_0_addr_2_reg_1347 <= tmp_117_0_0_2_fu_499_p1(8 - 1 downto 0);
                kernel_0_addr_3_reg_1352 <= tmp_117_0_1_fu_509_p1(8 - 1 downto 0);
                kernel_0_addr_4_reg_1357 <= tmp_117_0_1_1_fu_519_p1(8 - 1 downto 0);
                kernel_0_addr_5_reg_1362 <= tmp_117_0_1_2_fu_529_p1(8 - 1 downto 0);
                kernel_0_addr_6_reg_1367 <= tmp_117_0_2_fu_539_p1(8 - 1 downto 0);
                kernel_0_addr_7_reg_1372 <= tmp_117_0_2_1_fu_549_p1(8 - 1 downto 0);
                kernel_0_addr_8_reg_1377 <= tmp_117_0_2_2_fu_559_p1(8 - 1 downto 0);
                kernel_0_addr_reg_1337 <= tmp_56_fu_480_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                kernel_0_load_reg_1501 <= kernel_0_q0;
                tmp_112_0_1_1_reg_1521 <= tmp_112_0_1_1_fu_712_p2;
                tmp_112_0_1_reg_1516 <= tmp_112_0_1_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_1301 <= next_mul3_fu_427_p2;
                next_mul_reg_1306 <= next_mul_fu_432_p2;
                out_d_4_reg_1314 <= out_d_4_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_4_reg_1385 <= out_h_4_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond2_1_reg_1497 = ap_const_lv1_0) and (exitcond2_reg_1450 = ap_const_lv1_0))) then
                out_w_4_1_reg_1853 <= out_w_4_1_fu_964_p2;
                tmp_105_1_reg_1848 <= tmp_105_1_fu_960_p2;
                    tmp_111_1_0_1_reg_1834(16 downto 1) <= tmp_111_1_0_1_fu_950_p2(16 downto 1);
                    tmp_111_1_0_2_reg_1841(16 downto 1) <= tmp_111_1_0_2_fu_955_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    output_width_cast_reg_1273(5 downto 0) <= output_width_cast_fu_407_p1(5 downto 0);
                    tmp_80_cast1_cast_reg_1284(6 downto 0) <= tmp_80_cast1_cast_fu_415_p1(6 downto 0);
                    tmp_81_cast_reg_1291(5 downto 0) <= tmp_81_cast_fu_419_p1(5 downto 0);
                    tmp_82_cast_cast_reg_1296(5 downto 0) <= tmp_82_cast_cast_fu_423_p1(5 downto 0);
                    tmp_cast_reg_1279(6 downto 0) <= tmp_cast_fu_411_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_399 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp11_reg_1933 <= tmp11_fu_1037_p2;
                tmp_121_1_1_reg_1913 <= tmp_119_1_1_reg_1883(29 downto 14);
                tmp_121_1_2_reg_1928 <= tmp_119_1_2_reg_1898(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp12_reg_1998 <= tmp12_fu_1097_p2;
                tmp_119_1_1_1_reg_1988 <= grp_fu_1248_p2;
                tmp_119_1_1_2_reg_1993 <= grp_fu_1253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp14_reg_2028 <= tmp14_fu_1154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp16_reg_2023 <= tmp16_fu_1145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp1_reg_1809 <= tmp1_fu_905_p2;
                tmp2_reg_1814 <= tmp2_fu_916_p2;
                tmp4_reg_1819 <= tmp4_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_568_p2 = ap_const_lv1_0))) then
                tmp24_reg_1390 <= tmp24_fu_583_p2;
                tmp6_reg_1397 <= tmp6_fu_589_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp41_cast_reg_1417(15 downto 0) <= tmp41_cast_fu_621_p1(15 downto 0);
                    tmp5_0_1_cast_reg_1426(15 downto 0) <= tmp5_0_1_cast_fu_633_p1(15 downto 0);
                    tmp5_0_2_cast_reg_1435(15 downto 0) <= tmp5_0_2_cast_fu_645_p1(15 downto 0);
                    tmp7_cast_reg_1444(14 downto 0) <= tmp7_cast_fu_649_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp7_reg_1412 <= tmp7_fu_608_p2;
                tmp_0_1_reg_1402 <= tmp_0_1_fu_595_p2;
                tmp_0_2_reg_1407 <= tmp_0_2_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_652_p2 = ap_const_lv1_0))) then
                tmp_111_0_0_2_reg_1466 <= tmp_111_0_0_2_fu_666_p2;
                tmp_57_reg_1461 <= tmp_57_fu_661_p2;
                    tmp_89_cast_reg_1454(15 downto 0) <= tmp_89_cast_fu_657_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_112_1_0_1_reg_1858 <= tmp_112_1_0_1_fu_970_p2;
                tmp_112_1_0_2_reg_1863 <= tmp_112_1_0_2_fu_974_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_112_1_1_1_reg_1888 <= tmp_112_1_1_1_fu_986_p2;
                tmp_112_1_1_2_reg_1893 <= tmp_112_1_1_2_fu_990_p2;
                tmp_112_1_2_1_reg_1903 <= tmp_112_1_2_1_fu_994_p2;
                tmp_112_1_2_2_reg_1908 <= tmp_112_1_2_2_fu_998_p2;
                tmp_119_1_1_reg_1883 <= grp_fu_1230_p2;
                tmp_119_1_2_reg_1898 <= grp_fu_1234_p2;
                tmp_119_1_reg_1868 <= grp_fu_1226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_114_0_0_1_cast_reg_1696 <= tmp_114_0_0_1_cast_fu_781_p1;
                tmp_114_0_1_1_cast_reg_1730 <= tmp_114_0_1_1_cast_fu_800_p1;
                tmp_118_0_0_1_cast_reg_1702 <= tmp_118_0_0_1_cast_fu_785_p1;
                tmp_118_0_0_2_cast_reg_1713 <= tmp_118_0_0_2_cast_fu_791_p1;
                tmp_118_0_1_1_cast_reg_1736 <= tmp_118_0_1_1_cast_fu_803_p1;
                tmp_118_0_1_2_cast_reg_1747 <= tmp_118_0_1_2_cast_fu_809_p1;
                tmp_118_0_1_cast_reg_1724 <= tmp_118_0_1_cast_fu_797_p1;
                tmp_118_0_cast_reg_1690 <= tmp_118_0_cast_fu_778_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_114_0_2_1_cast_reg_1662 <= tmp_114_0_2_1_cast_fu_762_p1;
                tmp_118_0_2_1_cast_reg_1668 <= tmp_118_0_2_1_cast_fu_765_p1;
                tmp_118_0_2_2_cast_reg_1679 <= tmp_118_0_2_2_cast_fu_771_p1;
                tmp_118_0_2_cast_reg_1656 <= tmp_118_0_2_cast_fu_759_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_119_0_2_1_reg_1758 <= grp_fu_1178_p2;
                tmp_119_0_2_2_reg_1763 <= grp_fu_1184_p2;
                tmp_119_0_2_reg_1753 <= grp_fu_1172_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_119_1_0_1_reg_1968 <= grp_fu_1238_p2;
                tmp_119_1_0_2_reg_1973 <= grp_fu_1243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_119_1_2_1_reg_2013 <= grp_fu_1258_p2;
                tmp_119_1_2_2_reg_2018 <= grp_fu_1263_p2;
                tmp_121_1_1_1_reg_2003 <= tmp_119_1_1_1_reg_1988(29 downto 14);
                tmp_121_1_1_2_reg_2008 <= tmp_119_1_1_2_reg_1993(29 downto 14);
            end if;
        end if;
    end process;
    output_width_cast_reg_1273(15 downto 6) <= "0000000000";
    tmp_cast_reg_1279(8 downto 7) <= "00";
    tmp_80_cast1_cast_reg_1284(15 downto 7) <= "000000000";
    tmp_81_cast_reg_1291(8 downto 6) <= "000";
    tmp_82_cast_cast_reg_1296(14 downto 6) <= "000000000";
    tmp41_cast_reg_1417(16) <= '0';
    tmp5_0_1_cast_reg_1426(16) <= '0';
    tmp5_0_2_cast_reg_1435(16) <= '0';
    tmp7_cast_reg_1444(16 downto 15) <= "00";
    tmp_89_cast_reg_1454(16) <= '0';
    tmp_111_0_0_cast_reg_1478(0) <= '1';
    tmp_111_0_0_cast_reg_1478(16) <= '0';
    tmp_111_1_0_1_reg_1834(0) <= '0';
    tmp_111_1_0_2_reg_1841(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_437_p2, ap_CS_fsm_state4, exitcond3_fu_568_p2, exitcond2_fu_652_p2, exitcond2_reg_1450, ap_CS_fsm_state7, exitcond2_1_reg_1497, ap_CS_fsm_state20)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_437_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_568_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((exitcond2_fu_652_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and ((exitcond2_1_reg_1497 = ap_const_lv1_1) or (exitcond2_reg_1450 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_437_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_437_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_437_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_437_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_1319;

    bias_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_0_2_2_fu_937_p2 <= std_logic_vector(unsigned(tmp4_reg_1819) + unsigned(tmp_fu_933_p2));
    buffer_6_1_2_2_fu_1163_p2 <= std_logic_vector(unsigned(tmp14_reg_2028) + unsigned(tmp10_fu_1159_p2));
    exitcond2_1_fu_695_p2 <= "1" when (tmp_111_0_0_s_fu_676_p2 = output_width_cast_reg_1273) else "0";
    exitcond2_fu_652_p2 <= "1" when (out_w_reg_382 = output_width_cast_reg_1273) else "0";
    exitcond3_fu_568_p2 <= "1" when (out_h_cast_fu_564_p1 = output_height) else "0";
    exitcond4_fu_437_p2 <= "1" when (out_d_reg_336 = ap_const_lv5_10) else "0";
    grp_fu_1226_p0 <= tmp_118_0_cast_reg_1690(16 - 1 downto 0);
    grp_fu_1226_p1 <= tmp_114_0_0_1_cast_reg_1696(16 - 1 downto 0);
    grp_fu_1230_p0 <= tmp_118_0_1_cast_reg_1724(16 - 1 downto 0);
    grp_fu_1230_p1 <= tmp_114_0_1_1_cast_reg_1730(16 - 1 downto 0);
    grp_fu_1234_p0 <= tmp_118_0_2_cast_reg_1656(16 - 1 downto 0);
    grp_fu_1234_p1 <= tmp_114_0_2_1_cast_reg_1662(16 - 1 downto 0);
    grp_fu_1238_p0 <= tmp_118_0_0_1_cast_reg_1702(16 - 1 downto 0);
    grp_fu_1243_p0 <= tmp_118_0_0_2_cast_reg_1713(16 - 1 downto 0);
    grp_fu_1248_p0 <= tmp_118_0_1_1_cast_reg_1736(16 - 1 downto 0);
    grp_fu_1253_p0 <= tmp_118_0_1_2_cast_reg_1747(16 - 1 downto 0);
    grp_fu_1258_p0 <= tmp_118_0_2_1_cast_reg_1668(16 - 1 downto 0);
    grp_fu_1263_p0 <= tmp_118_0_2_2_cast_reg_1679(16 - 1 downto 0);

    input_r_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state22, tmp_59_fu_672_p1, tmp_113_0_0_1_fu_700_p1, tmp_113_0_1_1_fu_720_p1, tmp_113_0_2_fu_736_p1, tmp_113_0_2_2_fu_752_p1, tmp_113_1_0_2_fu_982_p1, tmp_113_1_1_2_fu_1024_p1, tmp_113_1_2_2_fu_1054_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_r_address0 <= tmp_113_1_2_2_fu_1054_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_r_address0 <= tmp_113_1_1_2_fu_1024_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address0 <= tmp_113_1_0_2_fu_982_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= tmp_113_0_2_2_fu_752_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= tmp_113_0_2_fu_736_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= tmp_113_0_1_1_fu_720_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= tmp_113_0_0_1_fu_700_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= tmp_59_fu_672_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state22, tmp_113_0_0_2_fu_704_p1, tmp_113_0_1_fu_716_p1, tmp_113_0_1_2_fu_732_p1, tmp_113_0_2_1_fu_748_p1, tmp_113_1_0_1_fu_978_p1, tmp_113_1_1_1_fu_1020_p1, tmp_113_1_2_1_fu_1050_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_r_address1 <= tmp_113_1_2_1_fu_1050_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_r_address1 <= tmp_113_1_1_1_fu_1020_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address1 <= tmp_113_1_0_1_fu_978_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address1 <= tmp_113_0_2_1_fu_748_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= tmp_113_0_1_2_fu_732_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= tmp_113_0_1_fu_716_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= tmp_113_0_0_2_fu_704_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

        input_width_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_width),7));


    kernel_0_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, kernel_0_addr_reg_1337, kernel_0_addr_1_reg_1342, kernel_0_addr_4_reg_1357, kernel_0_addr_6_reg_1367, kernel_0_addr_8_reg_1377, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            kernel_0_address0 <= kernel_0_addr_8_reg_1377;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            kernel_0_address0 <= kernel_0_addr_6_reg_1367;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_0_address0 <= kernel_0_addr_4_reg_1357;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_address0 <= kernel_0_addr_1_reg_1342;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address0 <= kernel_0_addr_reg_1337;
        else 
            kernel_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_0_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, kernel_0_addr_2_reg_1347, kernel_0_addr_3_reg_1352, kernel_0_addr_5_reg_1362, kernel_0_addr_7_reg_1372, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            kernel_0_address1 <= kernel_0_addr_7_reg_1372;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            kernel_0_address1 <= kernel_0_addr_5_reg_1362;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_0_address1 <= kernel_0_addr_3_reg_1352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_address1 <= kernel_0_addr_2_reg_1347;
        else 
            kernel_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            kernel_0_ce1 <= ap_const_logic_1;
        else 
            kernel_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_427_p2 <= std_logic_vector(unsigned(phi_mul2_reg_359) + unsigned(tmp_81_cast_reg_1291));
    next_mul_fu_432_p2 <= std_logic_vector(unsigned(phi_mul_reg_347) + unsigned(tmp_cast_reg_1279));
    out_d_4_fu_443_p2 <= std_logic_vector(unsigned(out_d_reg_336) + unsigned(ap_const_lv5_1));
    out_h_4_fu_573_p2 <= std_logic_vector(unsigned(out_h_reg_371) + unsigned(ap_const_lv5_1));
    out_h_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_371),6));
    out_w_4_1_fu_964_p2 <= std_logic_vector(unsigned(out_w_reg_382) + unsigned(ap_const_lv16_2));

    output_r_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state32, tmp_63_fu_946_p1, tmp_106_1_fu_1168_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_address0 <= tmp_106_1_fu_1168_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_address0 <= tmp_63_fu_946_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(buffer_6_0_2_2_reg_1824, ap_CS_fsm_state20, buffer_6_1_2_2_reg_2033, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_d0 <= buffer_6_1_2_2_reg_2033;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_d0 <= buffer_6_0_2_2_reg_1824;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(exitcond2_reg_1450, ap_CS_fsm_state20, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond2_reg_1450 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),16));
    p_shl_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_462_p3),8));
    p_shl_fu_462_p3 <= (tmp_58_fu_458_p1 & ap_const_lv3_0);
    tmp10_fu_1159_p2 <= std_logic_vector(unsigned(tmp12_reg_1998) + unsigned(tmp11_reg_1933));
    tmp11_fu_1037_p2 <= std_logic_vector(unsigned(bias_load_reg_1768) + unsigned(tmp_121_1_fu_1002_p4));
    tmp12_fu_1097_p2 <= std_logic_vector(unsigned(tmp13_fu_1092_p2) + unsigned(tmp_121_1_0_1_fu_1074_p4));
    tmp13_fu_1092_p2 <= std_logic_vector(unsigned(tmp_121_1_0_2_fu_1083_p4) + unsigned(tmp_121_1_1_reg_1913));
    tmp14_fu_1154_p2 <= std_logic_vector(unsigned(tmp16_reg_2023) + unsigned(tmp15_fu_1150_p2));
    tmp15_fu_1150_p2 <= std_logic_vector(unsigned(tmp_121_1_1_1_reg_2003) + unsigned(tmp_121_1_1_2_reg_2008));
    tmp16_fu_1145_p2 <= std_logic_vector(unsigned(tmp17_fu_1139_p2) + unsigned(tmp_121_1_2_reg_1928));
    tmp17_fu_1139_p2 <= std_logic_vector(unsigned(tmp_121_1_2_1_fu_1121_p4) + unsigned(tmp_121_1_2_2_fu_1130_p4));
    tmp1_fu_905_p2 <= std_logic_vector(unsigned(bias_load_reg_1768) + unsigned(tmp_61_fu_851_p4));
    tmp24_fu_583_p2 <= std_logic_vector(unsigned(tmp_88_cast_fu_579_p1) + unsigned(phi_mul_reg_347));
    tmp2_fu_916_p2 <= std_logic_vector(unsigned(tmp3_fu_910_p2) + unsigned(tmp_121_0_0_1_fu_860_p4));
    tmp3_fu_910_p2 <= std_logic_vector(unsigned(tmp_121_0_0_2_fu_869_p4) + unsigned(tmp_121_0_1_fu_878_p4));
    tmp41_cast_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp41_fu_616_p2),17));
    tmp41_fu_616_p0 <= tmp_80_cast1_cast_reg_1284(7 - 1 downto 0);
    tmp41_fu_616_p1 <= tmp41_fu_616_p10(9 - 1 downto 0);
    tmp41_fu_616_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp24_reg_1390),16));
    tmp41_fu_616_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp41_fu_616_p0) * unsigned(tmp41_fu_616_p1), 16));
    tmp4_fu_928_p2 <= std_logic_vector(unsigned(tmp8_reg_1804) + unsigned(tmp5_fu_922_p2));
    tmp5_0_1_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_fu_628_p2),17));
    tmp5_0_1_fu_628_p0 <= tmp_80_cast1_cast_reg_1284(7 - 1 downto 0);
    tmp5_0_1_fu_628_p1 <= tmp5_0_1_fu_628_p10(9 - 1 downto 0);
    tmp5_0_1_fu_628_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_1_reg_1402),16));
    tmp5_0_1_fu_628_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_fu_628_p0) * unsigned(tmp5_0_1_fu_628_p1), 16));
    tmp5_0_2_cast_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_fu_640_p2),17));
    tmp5_0_2_fu_640_p0 <= tmp_80_cast1_cast_reg_1284(7 - 1 downto 0);
    tmp5_0_2_fu_640_p1 <= tmp5_0_2_fu_640_p10(9 - 1 downto 0);
    tmp5_0_2_fu_640_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_2_reg_1407),16));
    tmp5_0_2_fu_640_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_fu_640_p0) * unsigned(tmp5_0_2_fu_640_p1), 16));
    tmp5_fu_922_p2 <= std_logic_vector(unsigned(tmp_121_0_1_1_fu_887_p4) + unsigned(tmp_121_0_1_2_fu_896_p4));
    tmp6_fu_589_p2 <= std_logic_vector(unsigned(tmp_88_cast_fu_579_p1) + unsigned(phi_mul2_reg_359));
    tmp7_cast_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_reg_1412),17));
    tmp7_fu_608_p0 <= tmp_82_cast_cast_reg_1296(6 - 1 downto 0);
    tmp7_fu_608_p1 <= tmp7_fu_608_p10(9 - 1 downto 0);
    tmp7_fu_608_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_reg_1397),15));
    tmp7_fu_608_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_608_p0) * unsigned(tmp7_fu_608_p1), 15));
    tmp8_fu_845_p2 <= std_logic_vector(unsigned(tmp9_fu_839_p2) + unsigned(tmp_121_0_2_fu_812_p4));
    tmp9_fu_839_p2 <= std_logic_vector(unsigned(tmp_121_0_2_1_fu_821_p4) + unsigned(tmp_121_0_2_2_fu_830_p4));
    tmp_0_1_fu_595_p2 <= std_logic_vector(unsigned(tmp24_reg_1390) + unsigned(ap_const_lv9_1));
    tmp_0_2_fu_600_p2 <= std_logic_vector(unsigned(tmp24_reg_1390) + unsigned(ap_const_lv9_2));
    tmp_105_1_fu_960_p2 <= std_logic_vector(unsigned(tmp7_cast_reg_1444) + unsigned(tmp_111_0_0_cast_reg_1478));
    tmp_106_1_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_1_reg_1848),64));
    tmp_111_0_0_2_fu_666_p2 <= std_logic_vector(unsigned(tmp_89_cast_fu_657_p1) + unsigned(ap_const_lv17_2));
    tmp_111_0_0_cast_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_0_0_s_fu_676_p2),17));
    tmp_111_0_0_s_fu_676_p2 <= (out_w_reg_382 or ap_const_lv16_1);
    tmp_111_1_0_1_fu_950_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_reg_1478) + unsigned(ap_const_lv17_1));
    tmp_111_1_0_2_fu_955_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_reg_1478) + unsigned(ap_const_lv17_2));
    tmp_112_0_0_1_fu_686_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_fu_682_p1) + unsigned(tmp41_cast_reg_1417));
    tmp_112_0_0_2_fu_691_p2 <= std_logic_vector(unsigned(tmp_111_0_0_2_reg_1466) + unsigned(tmp41_cast_reg_1417));
    tmp_112_0_1_1_fu_712_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_reg_1478) + unsigned(tmp5_0_1_cast_reg_1426));
    tmp_112_0_1_2_fu_724_p2 <= std_logic_vector(unsigned(tmp_111_0_0_2_reg_1466) + unsigned(tmp5_0_1_cast_reg_1426));
    tmp_112_0_1_fu_708_p2 <= std_logic_vector(unsigned(tmp5_0_1_cast_reg_1426) + unsigned(tmp_89_cast_reg_1454));
    tmp_112_0_2_1_fu_740_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_reg_1478) + unsigned(tmp5_0_2_cast_reg_1435));
    tmp_112_0_2_2_fu_744_p2 <= std_logic_vector(unsigned(tmp_111_0_0_2_reg_1466) + unsigned(tmp5_0_2_cast_reg_1435));
    tmp_112_0_2_fu_728_p2 <= std_logic_vector(unsigned(tmp5_0_2_cast_reg_1435) + unsigned(tmp_89_cast_reg_1454));
    tmp_112_1_0_1_fu_970_p2 <= std_logic_vector(unsigned(tmp_111_1_0_1_reg_1834) + unsigned(tmp41_cast_reg_1417));
    tmp_112_1_0_2_fu_974_p2 <= std_logic_vector(unsigned(tmp_111_1_0_2_reg_1841) + unsigned(tmp41_cast_reg_1417));
    tmp_112_1_1_1_fu_986_p2 <= std_logic_vector(unsigned(tmp_111_1_0_1_reg_1834) + unsigned(tmp5_0_1_cast_reg_1426));
    tmp_112_1_1_2_fu_990_p2 <= std_logic_vector(unsigned(tmp_111_1_0_2_reg_1841) + unsigned(tmp5_0_1_cast_reg_1426));
    tmp_112_1_2_1_fu_994_p2 <= std_logic_vector(unsigned(tmp_111_1_0_1_reg_1834) + unsigned(tmp5_0_2_cast_reg_1435));
    tmp_112_1_2_2_fu_998_p2 <= std_logic_vector(unsigned(tmp_111_1_0_2_reg_1841) + unsigned(tmp5_0_2_cast_reg_1435));
    tmp_113_0_0_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_0_1_reg_1487),64));
    tmp_113_0_0_2_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_0_2_reg_1492),64));
    tmp_113_0_1_1_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_1_1_reg_1521),64));
    tmp_113_0_1_2_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_1_2_reg_1551),64));
    tmp_113_0_1_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_1_reg_1516),64));
    tmp_113_0_2_1_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_2_1_reg_1591),64));
    tmp_113_0_2_2_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_2_2_reg_1596),64));
    tmp_113_0_2_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_2_reg_1556),64));
    tmp_113_1_0_1_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_0_1_reg_1858),64));
    tmp_113_1_0_2_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_0_2_reg_1863),64));
    tmp_113_1_1_1_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_1_1_reg_1888),64));
    tmp_113_1_1_2_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_1_2_reg_1893),64));
    tmp_113_1_2_1_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_2_1_reg_1903),64));
    tmp_113_1_2_2_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_2_2_reg_1908),64));
        tmp_114_0_0_1_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_399),30));

        tmp_114_0_1_1_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_67_reg_1571),30));

        tmp_114_0_2_1_cast_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_70_reg_1631),30));

    tmp_116_0_0_1_fu_484_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_55_reg_1324));
    tmp_116_0_0_2_fu_494_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(tmp_55_reg_1324));
    tmp_116_0_1_1_fu_514_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(tmp_55_reg_1324));
    tmp_116_0_1_2_fu_524_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(tmp_55_reg_1324));
    tmp_116_0_1_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(tmp_55_reg_1324));
    tmp_116_0_2_1_fu_544_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(tmp_55_reg_1324));
    tmp_116_0_2_2_fu_554_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) + unsigned(tmp_55_reg_1324));
    tmp_116_0_2_fu_534_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(tmp_55_reg_1324));
    tmp_117_0_0_1_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_0_1_fu_484_p2),64));
    tmp_117_0_0_2_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_0_2_fu_494_p2),64));
    tmp_117_0_1_1_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_1_1_fu_514_p2),64));
    tmp_117_0_1_2_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_1_2_fu_524_p2),64));
    tmp_117_0_1_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_1_fu_504_p2),64));
    tmp_117_0_2_1_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_2_1_fu_544_p2),64));
    tmp_117_0_2_2_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_2_2_fu_554_p2),64));
    tmp_117_0_2_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_2_fu_534_p2),64));
        tmp_118_0_0_1_cast_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_1_reg_1526),30));

        tmp_118_0_0_2_cast_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_2_reg_1536),30));

        tmp_118_0_1_1_cast_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_4_reg_1576),30));

        tmp_118_0_1_2_cast_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_5_reg_1606),30));

        tmp_118_0_1_cast_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_3_reg_1566),30));

        tmp_118_0_2_1_cast_fu_765_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_7_reg_1636),30));

        tmp_118_0_2_2_cast_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_8_reg_1646),30));

        tmp_118_0_2_cast_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_6_reg_1616),30));

        tmp_118_0_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_reg_1501),30));

    tmp_121_0_0_1_fu_860_p4 <= tmp_119_0_0_1_reg_1779(29 downto 14);
    tmp_121_0_0_2_fu_869_p4 <= tmp_119_0_0_2_reg_1784(29 downto 14);
    tmp_121_0_1_1_fu_887_p4 <= tmp_119_0_1_1_reg_1794(29 downto 14);
    tmp_121_0_1_2_fu_896_p4 <= tmp_119_0_1_2_reg_1799(29 downto 14);
    tmp_121_0_1_fu_878_p4 <= tmp_119_0_1_reg_1789(29 downto 14);
    tmp_121_0_2_1_fu_821_p4 <= tmp_119_0_2_1_reg_1758(29 downto 14);
    tmp_121_0_2_2_fu_830_p4 <= tmp_119_0_2_2_reg_1763(29 downto 14);
    tmp_121_0_2_fu_812_p4 <= tmp_119_0_2_reg_1753(29 downto 14);
    tmp_121_1_0_1_fu_1074_p4 <= tmp_119_1_0_1_reg_1968(29 downto 14);
    tmp_121_1_0_2_fu_1083_p4 <= tmp_119_1_0_2_reg_1973(29 downto 14);
    tmp_121_1_2_1_fu_1121_p4 <= tmp_119_1_2_1_reg_2013(29 downto 14);
    tmp_121_1_2_2_fu_1130_p4 <= tmp_119_1_2_2_reg_2018(29 downto 14);
    tmp_121_1_fu_1002_p4 <= tmp_119_1_reg_1868(29 downto 14);
    tmp_55_fu_474_p2 <= std_logic_vector(unsigned(tmp_84_cast2_fu_454_p1) + unsigned(p_shl_cast_fu_470_p1));
    tmp_56_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_reg_1324),64));
    tmp_57_fu_661_p2 <= std_logic_vector(unsigned(tmp41_cast_reg_1417) + unsigned(tmp_89_cast_fu_657_p1));
    tmp_58_fu_458_p1 <= out_d_reg_336(4 - 1 downto 0);
    tmp_59_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_reg_1461),64));
    tmp_61_fu_851_p4 <= tmp_60_reg_1774(29 downto 14);
    tmp_62_fu_942_p2 <= std_logic_vector(unsigned(tmp7_cast_reg_1444) + unsigned(tmp_89_cast_reg_1454));
    tmp_63_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_reg_1829),64));
    tmp_80_cast1_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width_cast_fu_403_p1),16));
    tmp_81_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),9));
    tmp_82_cast_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),15));
    tmp_84_cast2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_336),8));
    tmp_88_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_371),9));
    tmp_89_cast_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_382),17));
    tmp_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),9));
    tmp_fu_933_p2 <= std_logic_vector(unsigned(tmp2_reg_1814) + unsigned(tmp1_reg_1809));
    tmp_s_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_336),64));
end behav;
