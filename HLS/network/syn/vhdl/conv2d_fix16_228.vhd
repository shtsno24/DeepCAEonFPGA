-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_fix16_228 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    input_height : IN STD_LOGIC_VECTOR (15 downto 0);
    input_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_depth : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (15 downto 0);
    output_width : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Padding2D_3_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Padding2D_3_array_ce0 : OUT STD_LOGIC;
    Padding2D_3_array_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2d_fix16_228 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Conv2D_3_b_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Conv2D_3_b_ce0 : STD_LOGIC;
    signal Conv2D_3_b_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Conv2D_3_w_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Conv2D_3_w_ce0 : STD_LOGIC;
    signal Conv2D_3_w_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_600 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_reg_615 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_reg_620 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul6_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul6_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul3_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul3_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_d_3_fu_284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_d_3_reg_638 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond5_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Conv2D_3_b_load_cast_fu_295_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Conv2D_3_b_load_cast_reg_648 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_fu_299_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_reg_653 : STD_LOGIC_VECTOR (14 downto 0);
    signal out_h_3_fu_308_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_h_3_reg_661 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond4_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_cast_fu_324_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_108_cast_reg_671 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp1_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_w_3_fu_337_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_3_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_109_cast_fu_347_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_109_cast_reg_689 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond3_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr11_reg_694 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal in_d_1_fu_371_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_d_1_reg_707 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp6_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_h_1_fu_405_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_h_1_reg_720 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp2_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_118_fu_446_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_118_reg_730 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp3_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_w_1_fu_462_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_1_reg_743 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Padding2D_3_array_lo_reg_758 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Conv2D_3_w_load_reg_763 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_28_reg_768 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_tmp_s_fu_561_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_tmp_s_reg_773 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal out_d_reg_145 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul2_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul5_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_h_reg_180 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_reg_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal in_d_reg_203 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_mul_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_h_reg_226 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_w_reg_238 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_107_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_111_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_120_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_125_fu_532_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_tmp_cast_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Conv2D_3_b_load_cast_fu_295_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_299_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_108_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_328_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_109_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_110_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_114_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_116_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_118_cast3_fu_411_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_fu_415_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp4_cast_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl2_fu_434_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_442_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_118_cast4_fu_430_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp3_fu_452_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_120_cast_fu_472_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_fu_476_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_cast_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_cast8_fu_468_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp7_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp7_cast_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_121_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_123_fu_573_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_124_fu_529_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_539_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_112_fu_543_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_cast_fu_548_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component network_mul_mul_16s_13s_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component conv2d_fix16_228_Conv2D_3_b IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component conv2d_fix16_228_Conv2D_3_w IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    Conv2D_3_b_U : component conv2d_fix16_228_Conv2D_3_b
    generic map (
        DataWidth => 12,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv2D_3_b_address0,
        ce0 => Conv2D_3_b_ce0,
        q0 => Conv2D_3_b_q0);

    Conv2D_3_w_U : component conv2d_fix16_228_Conv2D_3_w
    generic map (
        DataWidth => 13,
        AddressRange => 1152,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv2D_3_w_address0,
        ce0 => Conv2D_3_w_ce0,
        q0 => Conv2D_3_w_q0);

    network_mul_mul_16s_13s_29_1_1_U81 : component network_mul_mul_16s_13s_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        din0 => Padding2D_3_array_lo_reg_758,
        din1 => Conv2D_3_w_load_reg_763,
        dout => tmp_123_fu_573_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    in_d_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_399_p2 = ap_const_lv1_1))) then 
                in_d_reg_203 <= in_d_1_reg_707;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_332_p2 = ap_const_lv1_0))) then 
                in_d_reg_203 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    k_h_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_456_p2 = ap_const_lv1_1))) then 
                k_h_reg_226 <= k_h_1_reg_720;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_366_p2 = ap_const_lv1_0))) then 
                k_h_reg_226 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_w_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_w_reg_238 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                k_w_reg_238 <= k_w_1_reg_743;
            end if; 
        end if;
    end process;

    out_d_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_303_p2 = ap_const_lv1_1))) then 
                out_d_reg_145 <= out_d_3_reg_638;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_145 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_h_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_332_p2 = ap_const_lv1_1))) then 
                out_h_reg_180 <= out_h_3_reg_661;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_reg_180 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_w_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_w_reg_192 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                out_w_reg_192 <= out_w_3_reg_684;
            end if; 
        end if;
    end process;

    phi_mul2_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_303_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_156 <= next_mul3_reg_630;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_156 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_303_p2 = ap_const_lv1_1))) then 
                phi_mul5_reg_168 <= next_mul6_reg_625;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul5_reg_168 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_399_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_214 <= next_mul_reg_699;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_332_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_214 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Conv2D_3_b_load_cast_reg_648 <= Conv2D_3_b_load_cast_fu_295_p1;
                tmp_5_reg_653 <= tmp_5_fu_299_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Conv2D_3_w_load_reg_763 <= Conv2D_3_w_q0;
                Padding2D_3_array_lo_reg_758 <= Padding2D_3_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                in_d_1_reg_707 <= in_d_1_fu_371_p2;
                next_mul_reg_699 <= next_mul_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                k_h_1_reg_720 <= k_h_1_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                k_w_1_reg_743 <= k_w_1_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_630 <= next_mul3_fu_274_p2;
                next_mul6_reg_625 <= next_mul6_fu_269_p2;
                out_d_3_reg_638 <= out_d_3_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_3_reg_661 <= out_h_3_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                out_w_3_reg_684 <= out_w_3_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_332_p2 = ap_const_lv1_0))) then
                output_addr11_reg_694 <= tmp_111_fu_356_p1(12 - 1 downto 0);
                    tmp_109_cast_reg_689(15 downto 0) <= tmp_109_cast_fu_347_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                p_tmp_s_reg_773 <= p_tmp_s_fu_561_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp1_reg_676 <= tmp1_fu_328_p2;
                    tmp_108_cast_reg_671(15 downto 0) <= tmp_108_cast_fu_324_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_399_p2 = ap_const_lv1_0))) then
                tmp2_reg_725 <= tmp2_fu_424_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp3_reg_735 <= tmp3_fu_452_p2;
                tmp_118_reg_730 <= tmp_118_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_366_p2 = ap_const_lv1_0))) then
                tmp6_reg_712 <= tmp6_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_100_reg_605(15 downto 0) <= tmp_100_fu_253_p1(15 downto 0);
                    tmp_101_reg_610(15 downto 0) <= tmp_101_fu_257_p1(15 downto 0);
                    tmp_102_reg_615(15 downto 0) <= tmp_102_fu_261_p1(15 downto 0);
                    tmp_103_reg_620(15 downto 0) <= tmp_103_fu_265_p1(15 downto 0);
                    tmp_s_reg_600(15 downto 0) <= tmp_s_fu_249_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_28_reg_768 <= tmp_123_fu_573_p2(28 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_303_p2 = ap_const_lv1_0))) then
                tmp_reg_666 <= tmp_fu_318_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_600(31 downto 16) <= "0000000000000000";
    tmp_100_reg_605(31 downto 16) <= "0000000000000000";
    tmp_101_reg_610(31 downto 16) <= "0000000000000000";
    tmp_102_reg_615(31 downto 16) <= "0000000000000000";
    tmp_103_reg_620(31 downto 16) <= "0000000000000000";
    tmp_108_cast_reg_671(16) <= '0';
    tmp_109_cast_reg_689(16) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_279_p2, ap_CS_fsm_state4, exitcond4_fu_303_p2, ap_CS_fsm_state6, exitcond3_fu_332_p2, ap_CS_fsm_state7, exitcond2_fu_366_p2, ap_CS_fsm_state8, exitcond1_fu_399_p2, ap_CS_fsm_state10, exitcond_fu_456_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_279_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond4_fu_303_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_366_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (exitcond1_fu_399_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond_fu_456_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Conv2D_3_b_address0 <= tmp_107_fu_290_p1(4 - 1 downto 0);

    Conv2D_3_b_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Conv2D_3_b_ce0 <= ap_const_logic_1;
        else 
            Conv2D_3_b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Conv2D_3_b_load_cast_fu_295_p0 <= Conv2D_3_b_q0;
        Conv2D_3_b_load_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Conv2D_3_b_load_cast_fu_295_p0),16));

    Conv2D_3_w_address0 <= tmp_122_fu_509_p1(11 - 1 downto 0);

    Conv2D_3_w_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Conv2D_3_w_ce0 <= ap_const_logic_1;
        else 
            Conv2D_3_w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Padding2D_3_array_address0 <= tmp_120_fu_490_p1(11 - 1 downto 0);

    Padding2D_3_array_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Padding2D_3_array_ce0 <= ap_const_logic_1;
        else 
            Padding2D_3_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_279_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_279_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond5_fu_279_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond5_fu_279_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_399_p2 <= "1" when (k_h_reg_226 = ap_const_lv2_3) else "0";
    exitcond2_fu_366_p2 <= "1" when (in_d_reg_203 = input_depth) else "0";
    exitcond3_fu_332_p2 <= "1" when (out_w_reg_192 = output_width) else "0";
    exitcond4_fu_303_p2 <= "1" when (out_h_reg_180 = output_height) else "0";
    exitcond5_fu_279_p2 <= "1" when (out_d_reg_145 = output_depth) else "0";
    exitcond_fu_456_p2 <= "1" when (k_w_reg_238 = ap_const_lv2_3) else "0";
    in_d_1_fu_371_p2 <= std_logic_vector(unsigned(in_d_reg_203) + unsigned(ap_const_lv16_1));
    k_h_1_fu_405_p2 <= std_logic_vector(unsigned(k_h_reg_226) + unsigned(ap_const_lv2_1));
    k_w_1_fu_462_p2 <= std_logic_vector(unsigned(k_w_reg_238) + unsigned(ap_const_lv2_1));
    next_mul3_fu_274_p2 <= std_logic_vector(unsigned(phi_mul2_reg_156) + unsigned(tmp_s_reg_600));
    next_mul6_fu_269_p2 <= std_logic_vector(unsigned(phi_mul5_reg_168) + unsigned(tmp_103_reg_620));
    next_mul_fu_361_p2 <= std_logic_vector(unsigned(phi_mul_reg_214) + unsigned(tmp_101_reg_610));
    out_d_3_fu_284_p2 <= std_logic_vector(unsigned(out_d_reg_145) + unsigned(ap_const_lv16_1));
    out_h_3_fu_308_p2 <= std_logic_vector(unsigned(out_h_reg_180) + unsigned(ap_const_lv16_1));
    out_w_3_fu_337_p2 <= std_logic_vector(unsigned(out_w_reg_192) + unsigned(ap_const_lv16_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state6, output_addr11_reg_694, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13, tmp_111_fu_356_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            output_r_address0 <= output_addr11_reg_694;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_address0 <= tmp_111_fu_356_p1(12 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state15, ap_CS_fsm_state13, tmp_125_fu_532_p2, p_tmp_cast_fu_569_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            output_r_d0 <= p_tmp_cast_fu_569_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            output_r_d0 <= tmp_125_fu_532_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_r_d0 <= ap_const_lv16_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state6, exitcond3_fu_332_p2, ap_CS_fsm_state15, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond3_fu_332_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_434_p3),5));
    p_shl2_fu_434_p3 <= (k_h_reg_226 & ap_const_lv2_0);
    p_tmp_cast_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_tmp_s_reg_773),16));
    p_tmp_s_fu_561_p3 <= 
        ap_const_lv15_0 when (tmp_26_fu_553_p3(0) = '1') else 
        tmp_112_cast_fu_548_p2;
    tmp1_fu_328_p1 <= tmp_100_reg_605(16 - 1 downto 0);
    tmp1_fu_328_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_666) * signed('0' &tmp1_fu_328_p1))), 32));
    tmp2_fu_424_p2 <= std_logic_vector(unsigned(phi_mul_reg_214) + unsigned(tmp4_cast_fu_420_p1));
    tmp3_fu_452_p0 <= tmp_102_reg_615(16 - 1 downto 0);
    tmp3_fu_452_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &tmp3_fu_452_p0) * signed(tmp2_reg_725))), 32));
    tmp4_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_415_p2),32));
    tmp4_fu_415_p2 <= std_logic_vector(unsigned(tmp_118_cast3_fu_411_p1) + unsigned(tmp_108_cast_reg_671));
    tmp5_cast_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_fu_476_p2),32));
    tmp5_fu_476_p2 <= std_logic_vector(unsigned(tmp_109_cast_reg_689) + unsigned(tmp_120_cast_fu_472_p1));
    tmp6_fu_393_p2 <= std_logic_vector(unsigned(tmp_27_fu_387_p2) + unsigned(tmp_116_fu_381_p2));
        tmp7_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_fu_495_p2),32));

    tmp7_fu_495_p2 <= std_logic_vector(unsigned(tmp_120_cast8_fu_468_p1) + unsigned(tmp_118_reg_730));
    tmp_100_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),32));
    tmp_101_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),32));
    tmp_102_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),32));
    tmp_103_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_depth),32));
    tmp_107_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_145),64));
    tmp_108_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_180),17));
    tmp_108_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_180),32));
    tmp_109_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_192),17));
    tmp_109_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_192),32));
    tmp_110_fu_351_p2 <= std_logic_vector(unsigned(tmp1_reg_676) + unsigned(tmp_109_fu_343_p1));
        tmp_111_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_110_fu_351_p2),64));

    tmp_112_cast_fu_548_p2 <= std_logic_vector(unsigned(tmp_25_fu_539_p1) + unsigned(tmp_5_reg_653));
    tmp_112_fu_543_p2 <= std_logic_vector(signed(Conv2D_3_b_load_cast_reg_648) + signed(output_r_q0));
    tmp_114_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_d_reg_203),32));
    tmp_116_fu_381_p2 <= std_logic_vector(unsigned(phi_mul5_reg_168) + unsigned(tmp_114_fu_377_p1));
    tmp_118_cast3_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_reg_226),17));
    tmp_118_cast4_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_h_reg_226),5));
    tmp_118_fu_446_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_442_p1) - unsigned(tmp_118_cast4_fu_430_p1));
    tmp_119_fu_485_p2 <= std_logic_vector(unsigned(tmp3_reg_735) + unsigned(tmp5_cast_fu_481_p1));
    tmp_120_cast8_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_reg_238),5));
    tmp_120_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_w_reg_238),17));
        tmp_120_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_119_fu_485_p2),64));

    tmp_121_fu_504_p2 <= std_logic_vector(unsigned(tmp6_reg_712) + unsigned(tmp7_cast_fu_500_p1));
        tmp_122_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_121_fu_504_p2),64));

        tmp_124_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_reg_768),16));

    tmp_125_fu_532_p2 <= std_logic_vector(signed(tmp_124_fu_529_p1) + signed(output_r_q0));
    tmp_25_fu_539_p1 <= output_r_q0(15 - 1 downto 0);
    tmp_26_fu_553_p3 <= tmp_112_fu_543_p2(15 downto 15);
    tmp_27_fu_387_p2 <= std_logic_vector(shift_left(unsigned(tmp_116_fu_381_p2),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_5_fu_299_p0 <= Conv2D_3_b_q0;
        tmp_5_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_299_p0),15));

    tmp_fu_318_p2 <= std_logic_vector(unsigned(phi_mul2_reg_156) + unsigned(tmp_108_fu_314_p1));
    tmp_s_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),32));
end behav;
