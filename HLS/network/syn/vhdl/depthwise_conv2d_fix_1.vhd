-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity depthwise_conv2d_fix_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_height : IN STD_LOGIC_VECTOR (5 downto 0);
    input_width : IN STD_LOGIC_VECTOR (5 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_height : IN STD_LOGIC_VECTOR (4 downto 0);
    output_width : IN STD_LOGIC_VECTOR (4 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bias_ce0 : OUT STD_LOGIC;
    bias_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_0_ce0 : OUT STD_LOGIC;
    kernel_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    kernel_0_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_0_ce1 : OUT STD_LOGIC;
    kernel_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of depthwise_conv2d_fix_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_const_lv7_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_const_lv7_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_const_lv7_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_const_lv7_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_const_lv17_2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_390 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal reg_395 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal output_width_cast_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_width_cast_reg_1272 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_cast_fu_403_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_reg_1278 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_71_cast2_cast_fu_407_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_71_cast2_cast_reg_1283 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_72_cast_fu_411_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_72_cast_reg_1290 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_73_cast_cast_fu_415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_73_cast_cast_reg_1295 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul3_fu_419_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul3_reg_1300 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal next_mul_fu_424_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul_reg_1305 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_d_4_fu_435_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_d_4_reg_1313 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_addr_reg_1318 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond4_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_462_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_reg_1323 : STD_LOGIC_VECTOR (5 downto 0);
    signal kernel_0_addr_reg_1329 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal kernel_0_addr_1_reg_1334 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_2_reg_1339 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_3_reg_1344 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_4_reg_1349 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_5_reg_1354 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_6_reg_1359 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_7_reg_1364 : STD_LOGIC_VECTOR (6 downto 0);
    signal kernel_0_addr_8_reg_1369 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_4_fu_572_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_h_4_reg_1377 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp23_fu_582_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp23_reg_1382 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_588_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp6_reg_1389 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_1_fu_594_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_1_reg_1394 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_0_2_fu_599_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_0_2_reg_1399 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_fu_607_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp7_reg_1404 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp43_cast_fu_620_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp43_cast_reg_1409 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp5_0_1_cast_fu_632_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_1_cast_reg_1418 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_cast_fu_644_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_0_2_cast_reg_1427 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_cast_fu_648_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp7_cast_reg_1436 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond2_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1442 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_80_cast_fu_656_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_80_cast_reg_1446 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_65_fu_660_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_65_reg_1453 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_0_0_2_fu_665_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_0_0_2_reg_1458 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_111_0_0_cast_fu_681_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_0_0_cast_reg_1470 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_0_1_fu_685_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_0_1_reg_1479 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_0_2_fu_690_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_0_2_reg_1484 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond2_1_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_1_reg_1489 : STD_LOGIC_VECTOR (0 downto 0);
    signal kernel_0_load_reg_1493 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_0_1_fu_707_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_1_reg_1508 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_1_1_fu_711_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_1_1_reg_1513 : STD_LOGIC_VECTOR (16 downto 0);
    signal kernel_0_load_1_reg_1518 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_79_reg_1523 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_2_reg_1528 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_0_1_2_fu_723_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_1_2_reg_1543 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_fu_727_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_reg_1548 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_load_80_reg_1553 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal kernel_0_load_3_reg_1558 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_81_reg_1563 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_4_reg_1568 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_0_2_1_fu_739_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_1_reg_1583 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_2_fu_743_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_0_2_2_reg_1588 : STD_LOGIC_VECTOR (16 downto 0);
    signal input_load_82_reg_1593 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal kernel_0_load_5_reg_1598 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_83_reg_1603 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_6_reg_1608 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_84_reg_1623 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal kernel_0_load_7_reg_1628 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_load_85_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal kernel_0_load_8_reg_1638 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_118_0_2_cast_fu_758_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_cast_reg_1648 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_2_1_cast_fu_761_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_2_1_cast_reg_1654 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_1_cast_fu_764_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_1_cast_reg_1660 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_2_cast_fu_770_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_2_2_cast_reg_1671 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_118_0_cast_fu_777_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_cast_reg_1682 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_0_1_cast_fu_780_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_0_1_cast_reg_1688 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_0_1_cast_fu_784_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_0_1_cast_reg_1694 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_0_2_cast_fu_790_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_0_2_cast_reg_1705 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_cast_fu_796_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_cast_reg_1716 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_1_1_cast_fu_799_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_114_0_1_1_cast_reg_1722 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_1_cast_fu_802_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_1_cast_reg_1728 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_2_cast_fu_808_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_118_0_1_2_cast_reg_1739 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1171_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_2_reg_1745 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_1177_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_2_1_reg_1750 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1183_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_2_2_reg_1755 : STD_LOGIC_VECTOR (29 downto 0);
    signal bias_load_reg_1760 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_1189_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_67_reg_1766 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1195_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_0_1_reg_1771 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1201_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_0_2_reg_1776 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1207_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_1_reg_1781 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1213_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_1_1_reg_1786 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1219_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_0_1_2_reg_1791 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp8_fu_844_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp8_reg_1796 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_904_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_1801 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp2_fu_915_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_1806 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_fu_927_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_1811 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_6_0_2_2_fu_936_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_6_0_2_2_reg_1816 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_62_fu_941_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_62_reg_1821 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_1_0_1_fu_949_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_1_0_1_reg_1826 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal tmp_111_1_0_2_fu_954_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_111_1_0_2_reg_1833 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_105_1_fu_959_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_105_1_reg_1840 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_w_4_1_fu_963_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_w_4_1_reg_1845 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_1_0_1_fu_969_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_0_1_reg_1850 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_112_1_0_2_fu_973_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_0_2_reg_1855 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1225_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_reg_1860 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_1229_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_1_reg_1875 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_112_1_1_1_fu_985_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_1_1_reg_1880 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_1_2_fu_989_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_1_2_reg_1885 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1233_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_2_reg_1890 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_112_1_2_1_fu_993_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_2_1_reg_1895 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_2_2_fu_997_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_112_1_2_2_reg_1900 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_121_1_1_reg_1905 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_2_reg_1920 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_fu_1036_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp11_reg_1925 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1237_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_0_1_reg_1960 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_1242_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_0_2_reg_1965 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1247_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_1_1_reg_1980 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_1252_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_1_2_reg_1985 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp12_fu_1096_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp12_reg_1990 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_1_1_reg_1995 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_121_1_1_2_reg_2000 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1257_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_2_1_reg_2005 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1262_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_119_1_2_2_reg_2010 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp16_fu_1144_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp16_reg_2015 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp14_fu_1153_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp14_reg_2020 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal buffer_6_1_2_2_fu_1162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_6_1_2_2_reg_2025 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal out_d_reg_332 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_343 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul2_reg_355 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_reg_367 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_w_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal tmp_s_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_0_1_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_0_2_fu_492_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_1_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_1_1_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_1_2_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_2_fu_536_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_2_1_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_117_0_2_2_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_671_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_0_1_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_0_2_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_1_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_1_1_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_1_2_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_2_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_2_1_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_0_2_2_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_fu_945_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_0_1_fu_977_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_0_2_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_1_1_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_1_2_fu_1023_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_2_1_fu_1049_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_113_1_2_2_fu_1053_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_1_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_450_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_75_cast_fu_446_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_454_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_77_cast_fu_468_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_116_0_0_1_fu_475_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_116_0_0_2_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_116_0_1_fu_497_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_116_0_1_1_fu_508_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_116_0_1_2_fu_519_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_116_0_2_fu_530_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_116_0_2_1_fu_541_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_116_0_2_2_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_h_cast_fu_563_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_79_cast_fu_578_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7_fu_607_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp7_fu_607_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp43_fu_615_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp43_fu_615_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp43_fu_615_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_1_fu_627_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_1_fu_627_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_1_fu_627_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_2_fu_639_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp5_0_2_fu_639_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp5_0_2_fu_639_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_111_0_0_s_fu_675_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_2_1_fu_820_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_2_2_fu_829_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_fu_838_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_2_fu_811_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_68_fu_850_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_0_2_fu_868_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_1_fu_877_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_fu_909_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_0_1_fu_859_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_1_1_fu_886_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_0_1_2_fu_895_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp5_fu_921_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_fu_1001_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_0_2_fu_1082_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp13_fu_1091_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_0_1_fu_1073_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_2_1_fu_1120_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_121_1_2_2_fu_1129_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp17_fu_1138_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_fu_1149_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp10_fu_1158_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1225_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1225_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1229_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1229_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1233_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1233_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1237_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1242_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1247_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1252_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1257_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1262_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp43_fu_615_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_1_fu_627_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp5_0_2_fu_639_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp7_fu_607_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component network_mul_mul_16s_16s_30_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;



begin
    network_mul_mul_16s_16s_30_3_1_U127 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_6_reg_1608,
        din1 => input_load_83_reg_1603,
        ce => ap_const_logic_1,
        dout => grp_fu_1171_p2);

    network_mul_mul_16s_16s_30_3_1_U128 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_7_reg_1628,
        din1 => input_load_84_reg_1623,
        ce => ap_const_logic_1,
        dout => grp_fu_1177_p2);

    network_mul_mul_16s_16s_30_3_1_U129 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_8_reg_1638,
        din1 => input_load_85_reg_1633,
        ce => ap_const_logic_1,
        dout => grp_fu_1183_p2);

    network_mul_mul_16s_16s_30_3_1_U130 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_reg_1493,
        din1 => reg_390,
        ce => ap_const_logic_1,
        dout => grp_fu_1189_p2);

    network_mul_mul_16s_16s_30_3_1_U131 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_1_reg_1518,
        din1 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_1195_p2);

    network_mul_mul_16s_16s_30_3_1_U132 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_2_reg_1528,
        din1 => input_load_79_reg_1523,
        ce => ap_const_logic_1,
        dout => grp_fu_1201_p2);

    network_mul_mul_16s_16s_30_3_1_U133 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_3_reg_1558,
        din1 => input_load_80_reg_1553,
        ce => ap_const_logic_1,
        dout => grp_fu_1207_p2);

    network_mul_mul_16s_16s_30_3_1_U134 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_4_reg_1568,
        din1 => input_load_81_reg_1563,
        ce => ap_const_logic_1,
        dout => grp_fu_1213_p2);

    network_mul_mul_16s_16s_30_3_1_U135 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => kernel_0_load_5_reg_1598,
        din1 => input_load_82_reg_1593,
        ce => ap_const_logic_1,
        dout => grp_fu_1219_p2);

    network_mul_mul_16s_16s_30_3_1_U136 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1225_p0,
        din1 => grp_fu_1225_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1225_p2);

    network_mul_mul_16s_16s_30_3_1_U137 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1229_p0,
        din1 => grp_fu_1229_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1229_p2);

    network_mul_mul_16s_16s_30_3_1_U138 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1233_p0,
        din1 => grp_fu_1233_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1233_p2);

    network_mul_mul_16s_16s_30_3_1_U139 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1237_p0,
        din1 => reg_390,
        ce => ap_const_logic_1,
        dout => grp_fu_1237_p2);

    network_mul_mul_16s_16s_30_3_1_U140 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1242_p0,
        din1 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_1242_p2);

    network_mul_mul_16s_16s_30_3_1_U141 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1247_p0,
        din1 => reg_390,
        ce => ap_const_logic_1,
        dout => grp_fu_1247_p2);

    network_mul_mul_16s_16s_30_3_1_U142 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1252_p0,
        din1 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_1252_p2);

    network_mul_mul_16s_16s_30_3_1_U143 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1257_p0,
        din1 => reg_390,
        ce => ap_const_logic_1,
        dout => grp_fu_1257_p2);

    network_mul_mul_16s_16s_30_3_1_U144 : component network_mul_mul_16s_16s_30_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1262_p0,
        din1 => reg_395,
        ce => ap_const_logic_1,
        dout => grp_fu_1262_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    out_d_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_567_p2 = ap_const_lv1_1))) then 
                out_d_reg_332 <= out_d_4_reg_1313;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_d_reg_332 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    out_h_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                out_h_reg_367 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and ((exitcond2_1_reg_1489 = ap_const_lv1_1) or (exitcond2_reg_1442 = ap_const_lv1_1)))) then 
                out_h_reg_367 <= out_h_4_reg_1377;
            end if; 
        end if;
    end process;

    out_w_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                out_w_reg_378 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                out_w_reg_378 <= out_w_4_1_reg_1845;
            end if; 
        end if;
    end process;

    phi_mul2_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_567_p2 = ap_const_lv1_1))) then 
                phi_mul2_reg_355 <= next_mul3_reg_1300;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul2_reg_355 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_567_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_343 <= next_mul_reg_1305;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_343 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    reg_390_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                reg_390 <= input_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_390 <= input_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_429_p2 = ap_const_lv1_0))) then
                bias_addr_reg_1318 <= tmp_s_fu_441_p1(3 - 1 downto 0);
                tmp_60_reg_1323 <= tmp_60_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                bias_load_reg_1760 <= bias_q0;
                tmp8_reg_1796 <= tmp8_fu_844_p2;
                tmp_119_0_0_1_reg_1771 <= grp_fu_1195_p2;
                tmp_119_0_0_2_reg_1776 <= grp_fu_1201_p2;
                tmp_119_0_1_1_reg_1786 <= grp_fu_1213_p2;
                tmp_119_0_1_2_reg_1791 <= grp_fu_1219_p2;
                tmp_119_0_1_reg_1781 <= grp_fu_1207_p2;
                tmp_67_reg_1766 <= grp_fu_1189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                buffer_6_0_2_2_reg_1816 <= buffer_6_0_2_2_fu_936_p2;
                tmp_62_reg_1821 <= tmp_62_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                buffer_6_1_2_2_reg_2025 <= buffer_6_1_2_2_fu_1162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                exitcond2_1_reg_1489 <= exitcond2_1_fu_694_p2;
                    tmp_111_0_0_cast_reg_1470(15 downto 1) <= tmp_111_0_0_cast_fu_681_p1(15 downto 1);
                tmp_112_0_0_1_reg_1479 <= tmp_112_0_0_1_fu_685_p2;
                tmp_112_0_0_2_reg_1484 <= tmp_112_0_0_2_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                exitcond2_reg_1442 <= exitcond2_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_load_79_reg_1523 <= input_r_q1;
                kernel_0_load_1_reg_1518 <= kernel_0_q0;
                kernel_0_load_2_reg_1528 <= kernel_0_q1;
                tmp_112_0_1_2_reg_1543 <= tmp_112_0_1_2_fu_723_p2;
                tmp_112_0_2_reg_1548 <= tmp_112_0_2_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_load_80_reg_1553 <= input_r_q1;
                input_load_81_reg_1563 <= input_r_q0;
                kernel_0_load_3_reg_1558 <= kernel_0_q1;
                kernel_0_load_4_reg_1568 <= kernel_0_q0;
                tmp_112_0_2_1_reg_1583 <= tmp_112_0_2_1_fu_739_p2;
                tmp_112_0_2_2_reg_1588 <= tmp_112_0_2_2_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                input_load_82_reg_1593 <= input_r_q1;
                input_load_83_reg_1603 <= input_r_q0;
                kernel_0_load_5_reg_1598 <= kernel_0_q1;
                kernel_0_load_6_reg_1608 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                input_load_84_reg_1623 <= input_r_q1;
                input_load_85_reg_1633 <= input_r_q0;
                kernel_0_load_7_reg_1628 <= kernel_0_q1;
                kernel_0_load_8_reg_1638 <= kernel_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                kernel_0_addr_1_reg_1334 <= tmp_117_0_0_1_fu_481_p1(7 - 1 downto 0);
                kernel_0_addr_2_reg_1339 <= tmp_117_0_0_2_fu_492_p1(7 - 1 downto 0);
                kernel_0_addr_3_reg_1344 <= tmp_117_0_1_fu_503_p1(7 - 1 downto 0);
                kernel_0_addr_4_reg_1349 <= tmp_117_0_1_1_fu_514_p1(7 - 1 downto 0);
                kernel_0_addr_5_reg_1354 <= tmp_117_0_1_2_fu_525_p1(7 - 1 downto 0);
                kernel_0_addr_6_reg_1359 <= tmp_117_0_2_fu_536_p1(7 - 1 downto 0);
                kernel_0_addr_7_reg_1364 <= tmp_117_0_2_1_fu_547_p1(7 - 1 downto 0);
                kernel_0_addr_8_reg_1369 <= tmp_117_0_2_2_fu_558_p1(7 - 1 downto 0);
                    kernel_0_addr_reg_1329(5 downto 0) <= tmp_64_fu_471_p1(7 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                kernel_0_load_reg_1493 <= kernel_0_q0;
                tmp_112_0_1_1_reg_1513 <= tmp_112_0_1_1_fu_711_p2;
                tmp_112_0_1_reg_1508 <= tmp_112_0_1_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                next_mul3_reg_1300 <= next_mul3_fu_419_p2;
                next_mul_reg_1305 <= next_mul_fu_424_p2;
                out_d_4_reg_1313 <= out_d_4_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                out_h_4_reg_1377 <= out_h_4_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond2_1_reg_1489 = ap_const_lv1_0) and (exitcond2_reg_1442 = ap_const_lv1_0))) then
                out_w_4_1_reg_1845 <= out_w_4_1_fu_963_p2;
                tmp_105_1_reg_1840 <= tmp_105_1_fu_959_p2;
                    tmp_111_1_0_1_reg_1826(16 downto 1) <= tmp_111_1_0_1_fu_949_p2(16 downto 1);
                    tmp_111_1_0_2_reg_1833(16 downto 1) <= tmp_111_1_0_2_fu_954_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    output_width_cast_reg_1272(4 downto 0) <= output_width_cast_fu_399_p1(4 downto 0);
                    tmp_71_cast2_cast_reg_1283(5 downto 0) <= tmp_71_cast2_cast_fu_407_p1(5 downto 0);
                    tmp_72_cast_reg_1290(4 downto 0) <= tmp_72_cast_fu_411_p1(4 downto 0);
                    tmp_73_cast_cast_reg_1295(4 downto 0) <= tmp_73_cast_cast_fu_415_p1(4 downto 0);
                    tmp_cast_reg_1278(5 downto 0) <= tmp_cast_fu_403_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_395 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                tmp11_reg_1925 <= tmp11_fu_1036_p2;
                tmp_121_1_1_reg_1905 <= tmp_119_1_1_reg_1875(29 downto 14);
                tmp_121_1_2_reg_1920 <= tmp_119_1_2_reg_1890(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                tmp12_reg_1990 <= tmp12_fu_1096_p2;
                tmp_119_1_1_1_reg_1980 <= grp_fu_1247_p2;
                tmp_119_1_1_2_reg_1985 <= grp_fu_1252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                tmp14_reg_2020 <= tmp14_fu_1153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                tmp16_reg_2015 <= tmp16_fu_1144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp1_reg_1801 <= tmp1_fu_904_p2;
                tmp2_reg_1806 <= tmp2_fu_915_p2;
                tmp4_reg_1811 <= tmp4_fu_927_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_567_p2 = ap_const_lv1_0))) then
                tmp23_reg_1382 <= tmp23_fu_582_p2;
                tmp6_reg_1389 <= tmp6_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    tmp43_cast_reg_1409(12 downto 0) <= tmp43_cast_fu_620_p1(12 downto 0);
                    tmp5_0_1_cast_reg_1418(12 downto 0) <= tmp5_0_1_cast_fu_632_p1(12 downto 0);
                    tmp5_0_2_cast_reg_1427(12 downto 0) <= tmp5_0_2_cast_fu_644_p1(12 downto 0);
                    tmp7_cast_reg_1436(11 downto 0) <= tmp7_cast_fu_648_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp7_reg_1404 <= tmp7_fu_607_p2;
                tmp_0_1_reg_1394 <= tmp_0_1_fu_594_p2;
                tmp_0_2_reg_1399 <= tmp_0_2_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_651_p2 = ap_const_lv1_0))) then
                tmp_111_0_0_2_reg_1458 <= tmp_111_0_0_2_fu_665_p2;
                tmp_65_reg_1453 <= tmp_65_fu_660_p2;
                    tmp_80_cast_reg_1446(15 downto 0) <= tmp_80_cast_fu_656_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_112_1_0_1_reg_1850 <= tmp_112_1_0_1_fu_969_p2;
                tmp_112_1_0_2_reg_1855 <= tmp_112_1_0_2_fu_973_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_112_1_1_1_reg_1880 <= tmp_112_1_1_1_fu_985_p2;
                tmp_112_1_1_2_reg_1885 <= tmp_112_1_1_2_fu_989_p2;
                tmp_112_1_2_1_reg_1895 <= tmp_112_1_2_1_fu_993_p2;
                tmp_112_1_2_2_reg_1900 <= tmp_112_1_2_2_fu_997_p2;
                tmp_119_1_1_reg_1875 <= grp_fu_1229_p2;
                tmp_119_1_2_reg_1890 <= grp_fu_1233_p2;
                tmp_119_1_reg_1860 <= grp_fu_1225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_114_0_0_1_cast_reg_1688 <= tmp_114_0_0_1_cast_fu_780_p1;
                tmp_114_0_1_1_cast_reg_1722 <= tmp_114_0_1_1_cast_fu_799_p1;
                tmp_118_0_0_1_cast_reg_1694 <= tmp_118_0_0_1_cast_fu_784_p1;
                tmp_118_0_0_2_cast_reg_1705 <= tmp_118_0_0_2_cast_fu_790_p1;
                tmp_118_0_1_1_cast_reg_1728 <= tmp_118_0_1_1_cast_fu_802_p1;
                tmp_118_0_1_2_cast_reg_1739 <= tmp_118_0_1_2_cast_fu_808_p1;
                tmp_118_0_1_cast_reg_1716 <= tmp_118_0_1_cast_fu_796_p1;
                tmp_118_0_cast_reg_1682 <= tmp_118_0_cast_fu_777_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_114_0_2_1_cast_reg_1654 <= tmp_114_0_2_1_cast_fu_761_p1;
                tmp_118_0_2_1_cast_reg_1660 <= tmp_118_0_2_1_cast_fu_764_p1;
                tmp_118_0_2_2_cast_reg_1671 <= tmp_118_0_2_2_cast_fu_770_p1;
                tmp_118_0_2_cast_reg_1648 <= tmp_118_0_2_cast_fu_758_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_119_0_2_1_reg_1750 <= grp_fu_1177_p2;
                tmp_119_0_2_2_reg_1755 <= grp_fu_1183_p2;
                tmp_119_0_2_reg_1745 <= grp_fu_1171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                tmp_119_1_0_1_reg_1960 <= grp_fu_1237_p2;
                tmp_119_1_0_2_reg_1965 <= grp_fu_1242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                tmp_119_1_2_1_reg_2005 <= grp_fu_1257_p2;
                tmp_119_1_2_2_reg_2010 <= grp_fu_1262_p2;
                tmp_121_1_1_1_reg_1995 <= tmp_119_1_1_1_reg_1980(29 downto 14);
                tmp_121_1_1_2_reg_2000 <= tmp_119_1_1_2_reg_1985(29 downto 14);
            end if;
        end if;
    end process;
    output_width_cast_reg_1272(15 downto 5) <= "00000000000";
    tmp_cast_reg_1278(6) <= '0';
    tmp_71_cast2_cast_reg_1283(12 downto 6) <= "0000000";
    tmp_72_cast_reg_1290(6 downto 5) <= "00";
    tmp_73_cast_cast_reg_1295(11 downto 5) <= "0000000";
    kernel_0_addr_reg_1329(6) <= '0';
    tmp43_cast_reg_1409(16 downto 13) <= "0000";
    tmp5_0_1_cast_reg_1418(16 downto 13) <= "0000";
    tmp5_0_2_cast_reg_1427(16 downto 13) <= "0000";
    tmp7_cast_reg_1436(16 downto 12) <= "00000";
    tmp_80_cast_reg_1446(16) <= '0';
    tmp_111_0_0_cast_reg_1470(0) <= '1';
    tmp_111_0_0_cast_reg_1470(16) <= '0';
    tmp_111_1_0_1_reg_1826(0) <= '0';
    tmp_111_1_0_2_reg_1833(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_429_p2, ap_CS_fsm_state4, exitcond3_fu_567_p2, exitcond2_fu_651_p2, exitcond2_reg_1442, ap_CS_fsm_state7, exitcond2_1_reg_1489, ap_CS_fsm_state20)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_429_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_567_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((exitcond2_fu_651_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and ((exitcond2_1_reg_1489 = ap_const_lv1_1) or (exitcond2_reg_1442 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_429_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_429_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_429_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_429_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_address0 <= bias_addr_reg_1318;

    bias_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bias_ce0 <= ap_const_logic_1;
        else 
            bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_6_0_2_2_fu_936_p2 <= std_logic_vector(unsigned(tmp4_reg_1811) + unsigned(tmp_fu_932_p2));
    buffer_6_1_2_2_fu_1162_p2 <= std_logic_vector(unsigned(tmp14_reg_2020) + unsigned(tmp10_fu_1158_p2));
    exitcond2_1_fu_694_p2 <= "1" when (tmp_111_0_0_s_fu_675_p2 = output_width_cast_reg_1272) else "0";
    exitcond2_fu_651_p2 <= "1" when (out_w_reg_378 = output_width_cast_reg_1272) else "0";
    exitcond3_fu_567_p2 <= "1" when (out_h_cast_fu_563_p1 = output_height) else "0";
    exitcond4_fu_429_p2 <= "1" when (out_d_reg_332 = ap_const_lv4_8) else "0";
    grp_fu_1225_p0 <= tmp_118_0_cast_reg_1682(16 - 1 downto 0);
    grp_fu_1225_p1 <= tmp_114_0_0_1_cast_reg_1688(16 - 1 downto 0);
    grp_fu_1229_p0 <= tmp_118_0_1_cast_reg_1716(16 - 1 downto 0);
    grp_fu_1229_p1 <= tmp_114_0_1_1_cast_reg_1722(16 - 1 downto 0);
    grp_fu_1233_p0 <= tmp_118_0_2_cast_reg_1648(16 - 1 downto 0);
    grp_fu_1233_p1 <= tmp_114_0_2_1_cast_reg_1654(16 - 1 downto 0);
    grp_fu_1237_p0 <= tmp_118_0_0_1_cast_reg_1694(16 - 1 downto 0);
    grp_fu_1242_p0 <= tmp_118_0_0_2_cast_reg_1705(16 - 1 downto 0);
    grp_fu_1247_p0 <= tmp_118_0_1_1_cast_reg_1728(16 - 1 downto 0);
    grp_fu_1252_p0 <= tmp_118_0_1_2_cast_reg_1739(16 - 1 downto 0);
    grp_fu_1257_p0 <= tmp_118_0_2_1_cast_reg_1660(16 - 1 downto 0);
    grp_fu_1262_p0 <= tmp_118_0_2_2_cast_reg_1671(16 - 1 downto 0);

    input_r_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state22, tmp_66_fu_671_p1, tmp_113_0_0_1_fu_699_p1, tmp_113_0_1_1_fu_719_p1, tmp_113_0_2_fu_735_p1, tmp_113_0_2_2_fu_751_p1, tmp_113_1_0_2_fu_981_p1, tmp_113_1_1_2_fu_1023_p1, tmp_113_1_2_2_fu_1053_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_r_address0 <= tmp_113_1_2_2_fu_1053_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_r_address0 <= tmp_113_1_1_2_fu_1023_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address0 <= tmp_113_1_0_2_fu_981_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= tmp_113_0_2_2_fu_751_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= tmp_113_0_2_fu_735_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= tmp_113_0_1_1_fu_719_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= tmp_113_0_0_1_fu_699_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= tmp_66_fu_671_p1(14 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state22, tmp_113_0_0_2_fu_703_p1, tmp_113_0_1_fu_715_p1, tmp_113_0_1_2_fu_731_p1, tmp_113_0_2_1_fu_747_p1, tmp_113_1_0_1_fu_977_p1, tmp_113_1_1_1_fu_1019_p1, tmp_113_1_2_1_fu_1049_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_r_address1 <= tmp_113_1_2_1_fu_1049_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_r_address1 <= tmp_113_1_1_1_fu_1019_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address1 <= tmp_113_1_0_1_fu_977_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address1 <= tmp_113_0_2_1_fu_747_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address1 <= tmp_113_0_1_2_fu_731_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address1 <= tmp_113_0_1_fu_715_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address1 <= tmp_113_0_0_2_fu_703_p1(14 - 1 downto 0);
        else 
            input_r_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, kernel_0_addr_reg_1329, kernel_0_addr_1_reg_1334, kernel_0_addr_4_reg_1349, kernel_0_addr_6_reg_1359, kernel_0_addr_8_reg_1369, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            kernel_0_address0 <= kernel_0_addr_8_reg_1369;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            kernel_0_address0 <= kernel_0_addr_6_reg_1359;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_0_address0 <= kernel_0_addr_4_reg_1349;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_address0 <= kernel_0_addr_1_reg_1334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            kernel_0_address0 <= kernel_0_addr_reg_1329;
        else 
            kernel_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    kernel_0_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, kernel_0_addr_2_reg_1339, kernel_0_addr_3_reg_1344, kernel_0_addr_5_reg_1354, kernel_0_addr_7_reg_1364, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            kernel_0_address1 <= kernel_0_addr_7_reg_1364;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            kernel_0_address1 <= kernel_0_addr_5_reg_1354;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_0_address1 <= kernel_0_addr_3_reg_1344;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_0_address1 <= kernel_0_addr_2_reg_1339;
        else 
            kernel_0_address1 <= "XXXXXXX";
        end if; 
    end process;


    kernel_0_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            kernel_0_ce0 <= ap_const_logic_1;
        else 
            kernel_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_0_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            kernel_0_ce1 <= ap_const_logic_1;
        else 
            kernel_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul3_fu_419_p2 <= std_logic_vector(unsigned(phi_mul2_reg_355) + unsigned(tmp_72_cast_reg_1290));
    next_mul_fu_424_p2 <= std_logic_vector(unsigned(phi_mul_reg_343) + unsigned(tmp_cast_reg_1278));
    out_d_4_fu_435_p2 <= std_logic_vector(unsigned(out_d_reg_332) + unsigned(ap_const_lv4_1));
    out_h_4_fu_572_p2 <= std_logic_vector(unsigned(out_h_reg_367) + unsigned(ap_const_lv4_1));
    out_h_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_367),5));
    out_w_4_1_fu_963_p2 <= std_logic_vector(unsigned(out_w_reg_378) + unsigned(ap_const_lv16_2));

    output_r_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state32, tmp_63_fu_945_p1, tmp_106_1_fu_1167_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_address0 <= tmp_106_1_fu_1167_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_address0 <= tmp_63_fu_945_p1(14 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(buffer_6_0_2_2_reg_1816, ap_CS_fsm_state20, buffer_6_1_2_2_reg_2025, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            output_r_d0 <= buffer_6_1_2_2_reg_2025;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            output_r_d0 <= buffer_6_0_2_2_reg_1816;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(exitcond2_reg_1442, ap_CS_fsm_state20, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_logic_1 = ap_CS_fsm_state20) and (exitcond2_reg_1442 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_width_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),16));
    p_shl_fu_454_p3 <= (tmp_59_fu_450_p1 & ap_const_lv3_0);
    tmp10_fu_1158_p2 <= std_logic_vector(unsigned(tmp12_reg_1990) + unsigned(tmp11_reg_1925));
    tmp11_fu_1036_p2 <= std_logic_vector(unsigned(bias_load_reg_1760) + unsigned(tmp_121_1_fu_1001_p4));
    tmp12_fu_1096_p2 <= std_logic_vector(unsigned(tmp13_fu_1091_p2) + unsigned(tmp_121_1_0_1_fu_1073_p4));
    tmp13_fu_1091_p2 <= std_logic_vector(unsigned(tmp_121_1_0_2_fu_1082_p4) + unsigned(tmp_121_1_1_reg_1905));
    tmp14_fu_1153_p2 <= std_logic_vector(unsigned(tmp16_reg_2015) + unsigned(tmp15_fu_1149_p2));
    tmp15_fu_1149_p2 <= std_logic_vector(unsigned(tmp_121_1_1_1_reg_1995) + unsigned(tmp_121_1_1_2_reg_2000));
    tmp16_fu_1144_p2 <= std_logic_vector(unsigned(tmp17_fu_1138_p2) + unsigned(tmp_121_1_2_reg_1920));
    tmp17_fu_1138_p2 <= std_logic_vector(unsigned(tmp_121_1_2_1_fu_1120_p4) + unsigned(tmp_121_1_2_2_fu_1129_p4));
    tmp1_fu_904_p2 <= std_logic_vector(unsigned(bias_load_reg_1760) + unsigned(tmp_68_fu_850_p4));
    tmp23_fu_582_p2 <= std_logic_vector(unsigned(tmp_79_cast_fu_578_p1) + unsigned(phi_mul_reg_343));
    tmp2_fu_915_p2 <= std_logic_vector(unsigned(tmp3_fu_909_p2) + unsigned(tmp_121_0_0_1_fu_859_p4));
    tmp3_fu_909_p2 <= std_logic_vector(unsigned(tmp_121_0_0_2_fu_868_p4) + unsigned(tmp_121_0_1_fu_877_p4));
    tmp43_cast_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp43_fu_615_p2),17));
    tmp43_fu_615_p0 <= tmp_71_cast2_cast_reg_1283(6 - 1 downto 0);
    tmp43_fu_615_p1 <= tmp43_fu_615_p10(7 - 1 downto 0);
    tmp43_fu_615_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp23_reg_1382),13));
    tmp43_fu_615_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp43_fu_615_p0) * unsigned(tmp43_fu_615_p1), 13));
    tmp4_fu_927_p2 <= std_logic_vector(unsigned(tmp8_reg_1796) + unsigned(tmp5_fu_921_p2));
    tmp5_0_1_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_fu_627_p2),17));
    tmp5_0_1_fu_627_p0 <= tmp_71_cast2_cast_reg_1283(6 - 1 downto 0);
    tmp5_0_1_fu_627_p1 <= tmp5_0_1_fu_627_p10(7 - 1 downto 0);
    tmp5_0_1_fu_627_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_1_reg_1394),13));
    tmp5_0_1_fu_627_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_1_fu_627_p0) * unsigned(tmp5_0_1_fu_627_p1), 13));
    tmp5_0_2_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_fu_639_p2),17));
    tmp5_0_2_fu_639_p0 <= tmp_71_cast2_cast_reg_1283(6 - 1 downto 0);
    tmp5_0_2_fu_639_p1 <= tmp5_0_2_fu_639_p10(7 - 1 downto 0);
    tmp5_0_2_fu_639_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_0_2_reg_1399),13));
    tmp5_0_2_fu_639_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_0_2_fu_639_p0) * unsigned(tmp5_0_2_fu_639_p1), 13));
    tmp5_fu_921_p2 <= std_logic_vector(unsigned(tmp_121_0_1_1_fu_886_p4) + unsigned(tmp_121_0_1_2_fu_895_p4));
    tmp6_fu_588_p2 <= std_logic_vector(unsigned(tmp_79_cast_fu_578_p1) + unsigned(phi_mul2_reg_355));
    tmp7_cast_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_reg_1404),17));
    tmp7_fu_607_p0 <= tmp_73_cast_cast_reg_1295(5 - 1 downto 0);
    tmp7_fu_607_p1 <= tmp7_fu_607_p10(7 - 1 downto 0);
    tmp7_fu_607_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_reg_1389),12));
    tmp7_fu_607_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_607_p0) * unsigned(tmp7_fu_607_p1), 12));
    tmp8_fu_844_p2 <= std_logic_vector(unsigned(tmp9_fu_838_p2) + unsigned(tmp_121_0_2_fu_811_p4));
    tmp9_fu_838_p2 <= std_logic_vector(unsigned(tmp_121_0_2_1_fu_820_p4) + unsigned(tmp_121_0_2_2_fu_829_p4));
    tmp_0_1_fu_594_p2 <= std_logic_vector(unsigned(tmp23_reg_1382) + unsigned(ap_const_lv7_1));
    tmp_0_2_fu_599_p2 <= std_logic_vector(unsigned(tmp23_reg_1382) + unsigned(ap_const_lv7_2));
    tmp_105_1_fu_959_p2 <= std_logic_vector(unsigned(tmp7_cast_reg_1436) + unsigned(tmp_111_0_0_cast_reg_1470));
    tmp_106_1_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_1_reg_1840),64));
    tmp_111_0_0_2_fu_665_p2 <= std_logic_vector(unsigned(tmp_80_cast_fu_656_p1) + unsigned(ap_const_lv17_2));
    tmp_111_0_0_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_111_0_0_s_fu_675_p2),17));
    tmp_111_0_0_s_fu_675_p2 <= (out_w_reg_378 or ap_const_lv16_1);
    tmp_111_1_0_1_fu_949_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_reg_1470) + unsigned(ap_const_lv17_1));
    tmp_111_1_0_2_fu_954_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_reg_1470) + unsigned(ap_const_lv17_2));
    tmp_112_0_0_1_fu_685_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_fu_681_p1) + unsigned(tmp43_cast_reg_1409));
    tmp_112_0_0_2_fu_690_p2 <= std_logic_vector(unsigned(tmp_111_0_0_2_reg_1458) + unsigned(tmp43_cast_reg_1409));
    tmp_112_0_1_1_fu_711_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_reg_1470) + unsigned(tmp5_0_1_cast_reg_1418));
    tmp_112_0_1_2_fu_723_p2 <= std_logic_vector(unsigned(tmp_111_0_0_2_reg_1458) + unsigned(tmp5_0_1_cast_reg_1418));
    tmp_112_0_1_fu_707_p2 <= std_logic_vector(unsigned(tmp5_0_1_cast_reg_1418) + unsigned(tmp_80_cast_reg_1446));
    tmp_112_0_2_1_fu_739_p2 <= std_logic_vector(unsigned(tmp_111_0_0_cast_reg_1470) + unsigned(tmp5_0_2_cast_reg_1427));
    tmp_112_0_2_2_fu_743_p2 <= std_logic_vector(unsigned(tmp_111_0_0_2_reg_1458) + unsigned(tmp5_0_2_cast_reg_1427));
    tmp_112_0_2_fu_727_p2 <= std_logic_vector(unsigned(tmp5_0_2_cast_reg_1427) + unsigned(tmp_80_cast_reg_1446));
    tmp_112_1_0_1_fu_969_p2 <= std_logic_vector(unsigned(tmp_111_1_0_1_reg_1826) + unsigned(tmp43_cast_reg_1409));
    tmp_112_1_0_2_fu_973_p2 <= std_logic_vector(unsigned(tmp_111_1_0_2_reg_1833) + unsigned(tmp43_cast_reg_1409));
    tmp_112_1_1_1_fu_985_p2 <= std_logic_vector(unsigned(tmp_111_1_0_1_reg_1826) + unsigned(tmp5_0_1_cast_reg_1418));
    tmp_112_1_1_2_fu_989_p2 <= std_logic_vector(unsigned(tmp_111_1_0_2_reg_1833) + unsigned(tmp5_0_1_cast_reg_1418));
    tmp_112_1_2_1_fu_993_p2 <= std_logic_vector(unsigned(tmp_111_1_0_1_reg_1826) + unsigned(tmp5_0_2_cast_reg_1427));
    tmp_112_1_2_2_fu_997_p2 <= std_logic_vector(unsigned(tmp_111_1_0_2_reg_1833) + unsigned(tmp5_0_2_cast_reg_1427));
    tmp_113_0_0_1_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_0_1_reg_1479),64));
    tmp_113_0_0_2_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_0_2_reg_1484),64));
    tmp_113_0_1_1_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_1_1_reg_1513),64));
    tmp_113_0_1_2_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_1_2_reg_1543),64));
    tmp_113_0_1_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_1_reg_1508),64));
    tmp_113_0_2_1_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_2_1_reg_1583),64));
    tmp_113_0_2_2_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_2_2_reg_1588),64));
    tmp_113_0_2_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_0_2_reg_1548),64));
    tmp_113_1_0_1_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_0_1_reg_1850),64));
    tmp_113_1_0_2_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_0_2_reg_1855),64));
    tmp_113_1_1_1_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_1_1_reg_1880),64));
    tmp_113_1_1_2_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_1_2_reg_1885),64));
    tmp_113_1_2_1_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_2_1_reg_1895),64));
    tmp_113_1_2_2_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_1_2_2_reg_1900),64));
        tmp_114_0_0_1_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_395),30));

        tmp_114_0_1_1_cast_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_81_reg_1563),30));

        tmp_114_0_2_1_cast_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_load_84_reg_1623),30));

    tmp_116_0_0_1_fu_475_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(tmp_77_cast_fu_468_p1));
    tmp_116_0_0_2_fu_486_p2 <= std_logic_vector(unsigned(ap_const_lv7_2) + unsigned(tmp_77_cast_fu_468_p1));
    tmp_116_0_1_1_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv7_4) + unsigned(tmp_77_cast_fu_468_p1));
    tmp_116_0_1_2_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv7_5) + unsigned(tmp_77_cast_fu_468_p1));
    tmp_116_0_1_fu_497_p2 <= std_logic_vector(unsigned(ap_const_lv7_3) + unsigned(tmp_77_cast_fu_468_p1));
    tmp_116_0_2_1_fu_541_p2 <= std_logic_vector(unsigned(ap_const_lv7_7) + unsigned(tmp_77_cast_fu_468_p1));
    tmp_116_0_2_2_fu_552_p2 <= std_logic_vector(unsigned(ap_const_lv7_8) + unsigned(tmp_77_cast_fu_468_p1));
    tmp_116_0_2_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv7_6) + unsigned(tmp_77_cast_fu_468_p1));
    tmp_117_0_0_1_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_0_1_fu_475_p2),64));
    tmp_117_0_0_2_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_0_2_fu_486_p2),64));
    tmp_117_0_1_1_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_1_1_fu_508_p2),64));
    tmp_117_0_1_2_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_1_2_fu_519_p2),64));
    tmp_117_0_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_1_fu_497_p2),64));
    tmp_117_0_2_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_2_1_fu_541_p2),64));
    tmp_117_0_2_2_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_2_2_fu_552_p2),64));
    tmp_117_0_2_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_116_0_2_fu_530_p2),64));
        tmp_118_0_0_1_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_1_reg_1518),30));

        tmp_118_0_0_2_cast_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_2_reg_1528),30));

        tmp_118_0_1_1_cast_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_4_reg_1568),30));

        tmp_118_0_1_2_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_5_reg_1598),30));

        tmp_118_0_1_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_3_reg_1558),30));

        tmp_118_0_2_1_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_7_reg_1628),30));

        tmp_118_0_2_2_cast_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_8_reg_1638),30));

        tmp_118_0_2_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_6_reg_1608),30));

        tmp_118_0_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(kernel_0_load_reg_1493),30));

    tmp_121_0_0_1_fu_859_p4 <= tmp_119_0_0_1_reg_1771(29 downto 14);
    tmp_121_0_0_2_fu_868_p4 <= tmp_119_0_0_2_reg_1776(29 downto 14);
    tmp_121_0_1_1_fu_886_p4 <= tmp_119_0_1_1_reg_1786(29 downto 14);
    tmp_121_0_1_2_fu_895_p4 <= tmp_119_0_1_2_reg_1791(29 downto 14);
    tmp_121_0_1_fu_877_p4 <= tmp_119_0_1_reg_1781(29 downto 14);
    tmp_121_0_2_1_fu_820_p4 <= tmp_119_0_2_1_reg_1750(29 downto 14);
    tmp_121_0_2_2_fu_829_p4 <= tmp_119_0_2_2_reg_1755(29 downto 14);
    tmp_121_0_2_fu_811_p4 <= tmp_119_0_2_reg_1745(29 downto 14);
    tmp_121_1_0_1_fu_1073_p4 <= tmp_119_1_0_1_reg_1960(29 downto 14);
    tmp_121_1_0_2_fu_1082_p4 <= tmp_119_1_0_2_reg_1965(29 downto 14);
    tmp_121_1_2_1_fu_1120_p4 <= tmp_119_1_2_1_reg_2005(29 downto 14);
    tmp_121_1_2_2_fu_1129_p4 <= tmp_119_1_2_2_reg_2010(29 downto 14);
    tmp_121_1_fu_1001_p4 <= tmp_119_1_reg_1860(29 downto 14);
    tmp_59_fu_450_p1 <= out_d_reg_332(3 - 1 downto 0);
    tmp_60_fu_462_p2 <= std_logic_vector(unsigned(tmp_75_cast_fu_446_p1) + unsigned(p_shl_fu_454_p3));
    tmp_62_fu_941_p2 <= std_logic_vector(unsigned(tmp7_cast_reg_1436) + unsigned(tmp_80_cast_reg_1446));
    tmp_63_fu_945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_reg_1821),64));
    tmp_64_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_reg_1323),64));
    tmp_65_fu_660_p2 <= std_logic_vector(unsigned(tmp43_cast_reg_1409) + unsigned(tmp_80_cast_fu_656_p1));
    tmp_66_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_reg_1453),64));
    tmp_68_fu_850_p4 <= tmp_67_reg_1766(29 downto 14);
    tmp_71_cast2_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_width),13));
    tmp_72_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_height),7));
    tmp_73_cast_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_width),12));
    tmp_75_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_332),6));
    tmp_77_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_reg_1323),7));
    tmp_79_cast_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_h_reg_367),7));
    tmp_80_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_w_reg_378),17));
    tmp_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_height),7));
    tmp_fu_932_p2 <= std_logic_vector(unsigned(tmp2_reg_1806) + unsigned(tmp1_reg_1801));
    tmp_s_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_d_reg_332),64));
end behav;
