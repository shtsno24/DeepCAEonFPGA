-- ==============================================================
-- File generated on Sat Nov 16 20:53:58 JST 2019
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2018.3 (64-bit)
-- SW Build 2405991 on Thu Dec  6 23:36:41 MST 2018
-- IP Build 2404404 on Fri Dec  7 01:43:56 MST 2018
-- Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity depthwise_conv2d_fix_3_SeparableConv2D_1_w_s_rom is 
    generic(
             DWIDTH     : integer := 15; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of depthwise_conv2d_fix_3_SeparableConv2D_1_w_s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "111101011010010", 1 => "001000001100001", 2 => "000100100001100", 
    3 => "111110110000000", 4 => "000100011101101", 5 => "000011101010100", 
    6 => "111100000101010", 7 => "000011011110110", 8 => "001000101111011", 
    9 => "111110101001011", 10 => "111110000001011", 11 => "000010110110100", 
    12 => "000001000000010", 13 => "000011000001100", 14 => "000000010100110", 
    15 => "111001100111011", 16 => "111001110001110", 17 => "111010010101001", 
    18 => "000010111000111", 19 => "111100111000100", 20 => "111100100110100", 
    21 => "111101111010001", 22 => "000010011110100", 23 => "111100101111010", 
    24 => "111100101010010", 25 => "111110100010110", 26 => "111011011110111", 
    27 => "000101110100100", 28 => "111011111000101", 29 => "000010001111000", 
    30 => "000011011010101", 31 => "000010111111000", 32 => "000000101011010", 
    33 => "000101101100001", 34 => "111100011110000", 35 => "111110101000111", 
    36 => "000100100011011", 37 => "000001011101110", 38 => "000011111010100", 
    39 => "000011011010000", 40 => "111110110101000", 41 => "000000111100100", 
    42 => "111111110000001", 43 => "111101001000101", 44 => "111101111001011", 
    45 => "000110101000010", 46 => "000001010110000", 47 => "000010110000101", 
    48 => "000001100010001", 49 => "000100010101111", 50 => "111100000000011", 
    51 => "000100101011110", 52 => "111001100010011", 53 => "000011000110010", 
    54 => "000110000110011", 55 => "111101110010001", 56 => "000101010100100", 
    57 => "000011111010000", 58 => "111011000000111", 59 => "000100110011111", 
    60 => "000010110110111", 61 => "101110101111011", 62 => "111001100010010", 
    63 => "111010111100101", 64 => "111100010000101", 65 => "000100001001110", 
    66 => "111010001001000", 67 => "111111100100100", 68 => "111110101011011", 
    69 => "111001100101110", 70 => "000101100100000", 71 => "000001000001010", 
    72 => "111110011010101", 73 => "000001010110010", 74 => "111111001011101", 
    75 => "110101010100111", 76 => "110100100010001", 77 => "111101110100010", 
    78 => "110101101000011", 79 => "111011010000000", 80 => "000010110101011", 
    81 => "000101110101100", 82 => "111101101011100", 83 => "000001011001110", 
    84 => "000011001110010", 85 => "111001111111101", 86 => "111111100101010", 
    87 => "111101100010000", 88 => "111101010101000", 89 => "000100110010001", 
    90 => "000000110100000", 91 => "111111111100011", 92 => "000100011101100", 
    93 => "111010010001101", 94 => "111010011101011", 95 => "000001001111111", 
    96 => "111101111101100", 97 => "000001100101101", 98 => "111010011110111", 
    99 => "111101001111100", 100 => "000001100011010", 101 => "111011110111001", 
    102 => "000101101110011", 103 => "111110000000110", 104 => "111101111010001", 
    105 => "111011011101000", 106 => "111010110001101", 107 => "000001111000000", 
    108 => "111101101010100", 109 => "111010110011111", 110 => "111011011010010", 
    111 => "111100111111011", 112 => "111011001000111", 113 => "111010010101111", 
    114 => "000000011010000", 115 => "000011000110101", 116 => "000000101101110", 
    117 => "000001110100010", 118 => "000001001001000", 119 => "000011111010101", 
    120 => "110100101110111", 121 => "111100000110001", 122 => "111100010011101", 
    123 => "111101001100111", 124 => "001011011100110", 125 => "111111100100001", 
    126 => "111100001001001", 127 => "000010000001101", 128 => "000010100101111", 
    129 => "000101100100111", 130 => "000000100001010", 131 => "111010000110010", 
    132 => "000100101011111", 133 => "000100011101100", 134 => "000001100111101", 
    135 => "111110010100110", 136 => "111010101100011", 137 => "111110010101111", 
    138 => "111110100001011", 139 => "000010000001000", 140 => "000011000000110", 
    141 => "111111100111100", 142 => "111001111000010", 143 => "111111000001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity depthwise_conv2d_fix_3_SeparableConv2D_1_w_s is
    generic (
        DataWidth : INTEGER := 15;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of depthwise_conv2d_fix_3_SeparableConv2D_1_w_s is
    component depthwise_conv2d_fix_3_SeparableConv2D_1_w_s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    depthwise_conv2d_fix_3_SeparableConv2D_1_w_s_rom_U :  component depthwise_conv2d_fix_3_SeparableConv2D_1_w_s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


