// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2d_fix16_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        Padding2D_2_array_address0,
        Padding2D_2_array_ce0,
        Padding2D_2_array_q0,
        Padding2D_2_array_address1,
        Padding2D_2_array_ce1,
        Padding2D_2_array_q1
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_depth;
input  [15:0] input_height;
input  [15:0] input_width;
input  [15:0] output_depth;
input  [15:0] output_height;
input  [15:0] output_width;
output  [8:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
input  [15:0] output_r_q0;
output  [9:0] Padding2D_2_array_address0;
output   Padding2D_2_array_ce0;
input  [15:0] Padding2D_2_array_q0;
output  [9:0] Padding2D_2_array_address1;
output   Padding2D_2_array_ce1;
input  [15:0] Padding2D_2_array_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;
reg[9:0] Padding2D_2_array_address0;
reg Padding2D_2_array_ce0;
reg[9:0] Padding2D_2_array_address1;
reg Padding2D_2_array_ce1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] Conv2D_2_b_address0;
reg    Conv2D_2_b_ce0;
wire   [10:0] Conv2D_2_b_q0;
reg   [9:0] Conv2D_2_w_address0;
reg    Conv2D_2_w_ce0;
wire   [13:0] Conv2D_2_w_q0;
reg   [9:0] Conv2D_2_w_address1;
reg    Conv2D_2_w_ce1;
wire   [13:0] Conv2D_2_w_q1;
reg   [9:0] Conv2D_2_w_address2;
reg    Conv2D_2_w_ce2;
wire   [13:0] Conv2D_2_w_q2;
reg  signed [15:0] reg_370;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg  signed [13:0] reg_374;
reg  signed [15:0] reg_378;
reg  signed [13:0] reg_382;
reg  signed [13:0] reg_386;
wire   [31:0] tmp_s_fu_390_p1;
reg   [31:0] tmp_s_reg_1055;
wire   [31:0] tmp_103_fu_394_p1;
reg   [31:0] tmp_103_reg_1060;
wire   [31:0] tmp_104_fu_398_p1;
reg   [31:0] tmp_104_reg_1065;
wire   [31:0] tmp_105_fu_402_p1;
reg   [31:0] tmp_105_reg_1070;
wire   [31:0] tmp_106_fu_406_p1;
reg   [31:0] tmp_106_reg_1077;
wire   [31:0] next_mul5_fu_410_p2;
reg   [31:0] next_mul5_reg_1082;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul2_fu_415_p2;
reg   [31:0] next_mul2_reg_1087;
wire   [15:0] out_d_3_fu_425_p2;
reg   [15:0] out_d_3_reg_1095;
wire   [0:0] exitcond5_fu_420_p2;
wire  signed [15:0] Conv2D_2_b_load_cast_fu_436_p1;
reg  signed [15:0] Conv2D_2_b_load_cast_reg_1105;
wire    ap_CS_fsm_state3;
wire  signed [14:0] tmp_5_fu_440_p1;
reg  signed [14:0] tmp_5_reg_1110;
wire   [15:0] out_h_3_fu_449_p2;
reg   [15:0] out_h_3_reg_1118;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_108_fu_455_p1;
reg   [31:0] tmp_108_reg_1123;
wire   [0:0] exitcond4_fu_444_p2;
wire  signed [31:0] tmp_fu_459_p2;
reg  signed [31:0] tmp_reg_1128;
wire   [31:0] tmp3_fu_465_p2;
reg   [31:0] tmp3_reg_1133;
wire    ap_CS_fsm_state5;
wire   [15:0] out_w_3_fu_474_p2;
reg   [15:0] out_w_3_reg_1141;
wire    ap_CS_fsm_state6;
wire   [31:0] tmp_109_fu_480_p1;
reg   [31:0] tmp_109_reg_1146;
wire   [0:0] exitcond3_fu_469_p2;
reg   [8:0] output_addr11_reg_1153;
wire   [31:0] tmp_127_0_1_cast_fu_504_p1;
reg   [31:0] tmp_127_0_1_cast_reg_1158;
wire   [31:0] tmp_127_0_2_cast_fu_514_p1;
reg   [31:0] tmp_127_0_2_cast_reg_1165;
wire   [15:0] in_d_1_fu_523_p2;
reg   [15:0] in_d_1_reg_1175;
wire    ap_CS_fsm_state7;
wire   [31:0] next_mul_fu_533_p2;
reg   [31:0] next_mul_reg_1180;
wire   [0:0] exitcond2_fu_518_p2;
wire   [31:0] tmp_114_fu_538_p2;
reg   [31:0] tmp_114_reg_1185;
wire  signed [31:0] tmp4_fu_544_p2;
reg  signed [31:0] tmp4_reg_1191;
wire   [31:0] tmp5_fu_549_p2;
reg   [31:0] tmp5_reg_1198;
wire    ap_CS_fsm_state8;
wire  signed [31:0] tmp4_1_fu_553_p2;
reg  signed [31:0] tmp4_1_reg_1205;
wire  signed [31:0] tmp4_2_fu_558_p2;
reg  signed [31:0] tmp4_2_reg_1210;
wire  signed [31:0] tmp_115_fu_568_p2;
reg  signed [31:0] tmp_115_reg_1215;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp5_1_fu_596_p2;
reg   [31:0] tmp5_1_reg_1242;
wire   [31:0] tmp5_2_fu_600_p2;
reg   [31:0] tmp5_2_reg_1249;
reg   [15:0] tmp_120_reg_1281;
reg  signed [15:0] Padding2D_2_array_lo_3_reg_1286;
wire   [31:0] tmp_128_2_fu_707_p2;
reg   [31:0] tmp_128_2_reg_1311;
wire   [31:0] tmp_128_2_1_fu_711_p2;
reg   [31:0] tmp_128_2_1_reg_1316;
wire   [31:0] tmp_128_2_2_fu_715_p2;
reg   [31:0] tmp_128_2_2_reg_1321;
reg   [15:0] tmp_137_0_1_reg_1326;
reg   [15:0] tmp_137_0_2_reg_1331;
reg   [15:0] tmp_137_1_reg_1336;
wire   [15:0] tmp2_fu_807_p2;
reg   [15:0] tmp2_reg_1366;
reg   [15:0] tmp_137_1_1_reg_1371;
reg   [15:0] tmp_137_1_2_reg_1376;
wire   [15:0] tmp1_fu_859_p2;
reg   [15:0] tmp1_reg_1386;
reg   [15:0] tmp_137_2_reg_1391;
reg   [15:0] tmp_137_2_1_reg_1396;
wire   [15:0] tmp9_fu_898_p2;
reg   [15:0] tmp9_reg_1401;
reg   [15:0] tmp_137_2_2_reg_1406;
wire    ap_CS_fsm_state15;
wire   [15:0] tmp_138_2_2_fu_933_p2;
reg   [15:0] tmp_138_2_2_reg_1411;
wire    ap_CS_fsm_state16;
wire   [14:0] p_tmp_s_fu_960_p3;
reg   [14:0] p_tmp_s_reg_1416;
wire    ap_CS_fsm_state18;
reg   [15:0] out_d_reg_291;
reg   [31:0] phi_mul1_reg_302;
reg   [31:0] phi_mul4_reg_314;
reg   [15:0] out_h_reg_326;
reg   [15:0] out_w_reg_337;
wire    ap_CS_fsm_state19;
reg   [15:0] in_d_reg_348;
wire    ap_CS_fsm_state17;
reg   [31:0] phi_mul_reg_359;
wire   [63:0] tmp_107_fu_431_p1;
wire  signed [63:0] tmp_111_fu_493_p1;
wire  signed [63:0] tmp_117_fu_577_p1;
wire  signed [63:0] tmp_118_fu_582_p1;
wire  signed [63:0] tmp_129_0_1_fu_591_p1;
wire  signed [63:0] tmp_133_0_1_fu_609_p1;
wire  signed [63:0] tmp_129_0_2_fu_618_p1;
wire  signed [63:0] tmp_133_0_2_fu_628_p1;
wire  signed [63:0] tmp_129_1_fu_637_p1;
wire  signed [63:0] tmp_133_1_fu_647_p1;
wire  signed [63:0] tmp_129_1_1_fu_673_p1;
wire  signed [63:0] tmp_133_1_1_fu_683_p1;
wire  signed [63:0] tmp_129_1_2_fu_692_p1;
wire  signed [63:0] tmp_133_1_2_fu_702_p1;
wire  signed [63:0] tmp_129_2_fu_769_p1;
wire  signed [63:0] tmp_133_2_fu_778_p1;
wire  signed [63:0] tmp_129_2_1_fu_783_p1;
wire  signed [63:0] tmp_133_2_1_fu_792_p1;
wire  signed [63:0] tmp_133_2_2_fu_802_p1;
wire  signed [63:0] tmp_129_2_2_fu_846_p1;
wire   [15:0] p_tmp_cast_fu_968_p1;
wire  signed [10:0] Conv2D_2_b_load_cast_fu_436_p0;
wire  signed [10:0] tmp_5_fu_440_p0;
wire   [15:0] tmp3_fu_465_p1;
wire   [31:0] tmp_110_fu_488_p2;
wire   [16:0] tmp_114_cast_fu_484_p1;
wire   [16:0] tmp_127_0_1_fu_498_p2;
wire   [16:0] tmp_127_0_2_fu_508_p2;
wire   [31:0] tmp_113_fu_529_p1;
wire   [15:0] tmp5_fu_549_p0;
wire   [31:0] tmp_24_fu_563_p2;
wire   [31:0] tmp_116_fu_573_p2;
wire   [31:0] tmp_128_0_1_fu_587_p2;
wire   [15:0] tmp5_1_fu_596_p0;
wire   [15:0] tmp5_2_fu_600_p0;
wire   [31:0] tmp_132_0_1_fu_604_p2;
wire   [31:0] tmp_128_0_2_fu_614_p2;
wire   [31:0] tmp_132_0_2_fu_623_p2;
wire   [31:0] tmp_128_1_fu_633_p2;
wire   [31:0] tmp_132_1_fu_642_p2;
wire  signed [29:0] tmp_119_fu_972_p2;
wire   [31:0] tmp_128_1_1_fu_669_p2;
wire   [31:0] tmp_132_1_1_fu_678_p2;
wire   [31:0] tmp_128_1_2_fu_688_p2;
wire   [31:0] tmp_132_1_2_fu_697_p2;
wire  signed [29:0] tmp_135_0_1_fu_979_p2;
wire  signed [29:0] tmp_135_0_2_fu_986_p2;
wire  signed [29:0] tmp_135_1_fu_993_p2;
wire   [31:0] tmp_132_2_fu_773_p2;
wire   [31:0] tmp_132_2_1_fu_787_p2;
wire   [31:0] tmp_132_2_2_fu_797_p2;
wire  signed [29:0] tmp_135_1_1_fu_1000_p2;
wire  signed [29:0] tmp_135_1_2_fu_1007_p2;
wire   [15:0] tmp7_fu_850_p2;
wire   [15:0] tmp6_fu_854_p2;
wire  signed [29:0] tmp_135_2_fu_1014_p2;
wire  signed [29:0] tmp_135_2_1_fu_1021_p2;
wire  signed [29:0] tmp_135_2_2_fu_1028_p2;
wire   [15:0] tmp11_fu_919_p2;
wire   [15:0] tmp10_fu_923_p2;
wire   [15:0] tmp8_fu_928_p2;
wire   [14:0] tmp_22_fu_938_p1;
wire   [15:0] tmp_112_fu_942_p2;
wire   [0:0] tmp_23_fu_952_p3;
wire   [14:0] tmp_117_cast_fu_947_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

conv2d_fix16_3_Conv2D_2_b #(
    .DataWidth( 11 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
Conv2D_2_b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Conv2D_2_b_address0),
    .ce0(Conv2D_2_b_ce0),
    .q0(Conv2D_2_b_q0)
);

conv2d_fix16_3_Conv2D_2_w #(
    .DataWidth( 14 ),
    .AddressRange( 576 ),
    .AddressWidth( 10 ))
Conv2D_2_w_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Conv2D_2_w_address0),
    .ce0(Conv2D_2_w_ce0),
    .q0(Conv2D_2_w_q0),
    .address1(Conv2D_2_w_address1),
    .ce1(Conv2D_2_w_ce1),
    .q1(Conv2D_2_w_q1),
    .address2(Conv2D_2_w_address2),
    .ce2(Conv2D_2_w_ce2),
    .q2(Conv2D_2_w_q2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U78(
    .din0(reg_370),
    .din1(reg_374),
    .dout(tmp_119_fu_972_p2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U79(
    .din0(reg_378),
    .din1(reg_374),
    .dout(tmp_135_0_1_fu_979_p2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U80(
    .din0(reg_370),
    .din1(reg_382),
    .dout(tmp_135_0_2_fu_986_p2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U81(
    .din0(Padding2D_2_array_lo_3_reg_1286),
    .din1(reg_386),
    .dout(tmp_135_1_fu_993_p2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U82(
    .din0(reg_370),
    .din1(reg_374),
    .dout(tmp_135_1_1_fu_1000_p2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U83(
    .din0(reg_378),
    .din1(reg_382),
    .dout(tmp_135_1_2_fu_1007_p2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U84(
    .din0(reg_370),
    .din1(reg_374),
    .dout(tmp_135_2_fu_1014_p2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U85(
    .din0(reg_378),
    .din1(reg_382),
    .dout(tmp_135_2_1_fu_1021_p2)
);

network_mul_mul_16s_14s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_1_1_U86(
    .din0(reg_370),
    .din1(reg_386),
    .dout(tmp_135_2_2_fu_1028_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        in_d_reg_348 <= in_d_1_reg_1175;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_469_p2 == 1'd0))) begin
        in_d_reg_348 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_444_p2 == 1'd1))) begin
        out_d_reg_291 <= out_d_3_reg_1095;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_d_reg_291 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_469_p2 == 1'd1))) begin
        out_h_reg_326 <= out_h_3_reg_1118;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_326 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_337 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        out_w_reg_337 <= out_w_3_reg_1141;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_444_p2 == 1'd1))) begin
        phi_mul1_reg_302 <= next_mul2_reg_1087;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul1_reg_302 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_444_p2 == 1'd1))) begin
        phi_mul4_reg_314 <= next_mul5_reg_1082;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul4_reg_314 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        phi_mul_reg_359 <= next_mul_reg_1180;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_469_p2 == 1'd0))) begin
        phi_mul_reg_359 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Conv2D_2_b_load_cast_reg_1105 <= Conv2D_2_b_load_cast_fu_436_p1;
        tmp_5_reg_1110 <= tmp_5_fu_440_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        Padding2D_2_array_lo_3_reg_1286 <= Padding2D_2_array_q1;
        tmp_120_reg_1281 <= {{tmp_119_fu_972_p2[29:14]}};
        tmp_128_2_1_reg_1316 <= tmp_128_2_1_fu_711_p2;
        tmp_128_2_2_reg_1321 <= tmp_128_2_2_fu_715_p2;
        tmp_128_2_reg_1311 <= tmp_128_2_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_d_1_reg_1175 <= in_d_1_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul2_reg_1087 <= next_mul2_fu_415_p2;
        next_mul5_reg_1082 <= next_mul5_fu_410_p2;
        out_d_3_reg_1095 <= out_d_3_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_518_p2 == 1'd0))) begin
        next_mul_reg_1180 <= next_mul_fu_533_p2;
        tmp4_reg_1191 <= tmp4_fu_544_p2;
        tmp_114_reg_1185 <= tmp_114_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_3_reg_1118 <= out_h_3_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_w_3_reg_1141 <= out_w_3_fu_474_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_469_p2 == 1'd0))) begin
        output_addr11_reg_1153 <= tmp_111_fu_493_p1;
        tmp_109_reg_1146[15 : 0] <= tmp_109_fu_480_p1[15 : 0];
        tmp_127_0_1_cast_reg_1158[16 : 0] <= tmp_127_0_1_cast_fu_504_p1[16 : 0];
        tmp_127_0_2_cast_reg_1165[16 : 0] <= tmp_127_0_2_cast_fu_514_p1[16 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        p_tmp_s_reg_1416 <= p_tmp_s_fu_960_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_370 <= Padding2D_2_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_374 <= Conv2D_2_w_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_378 <= Padding2D_2_array_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_382 <= Conv2D_2_w_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_386 <= Conv2D_2_w_q2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp1_reg_1386 <= tmp1_fu_859_p2;
        tmp_137_1_1_reg_1371 <= {{tmp_135_1_1_fu_1000_p2[29:14]}};
        tmp_137_1_2_reg_1376 <= {{tmp_135_1_2_fu_1007_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp2_reg_1366 <= tmp2_fu_807_p2;
        tmp_137_0_1_reg_1326 <= {{tmp_135_0_1_fu_979_p2[29:14]}};
        tmp_137_0_2_reg_1331 <= {{tmp_135_0_2_fu_986_p2[29:14]}};
        tmp_137_1_reg_1336 <= {{tmp_135_1_fu_993_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp3_reg_1133 <= tmp3_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp4_1_reg_1205 <= tmp4_1_fu_553_p2;
        tmp4_2_reg_1210 <= tmp4_2_fu_558_p2;
        tmp5_reg_1198 <= tmp5_fu_549_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp5_1_reg_1242 <= tmp5_1_fu_596_p2;
        tmp5_2_reg_1249 <= tmp5_2_fu_600_p2;
        tmp_115_reg_1215 <= tmp_115_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp9_reg_1401 <= tmp9_fu_898_p2;
        tmp_137_2_1_reg_1396 <= {{tmp_135_2_1_fu_1021_p2[29:14]}};
        tmp_137_2_reg_1391 <= {{tmp_135_2_fu_1014_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_103_reg_1060[15 : 0] <= tmp_103_fu_394_p1[15 : 0];
        tmp_104_reg_1065[15 : 0] <= tmp_104_fu_398_p1[15 : 0];
        tmp_105_reg_1070[15 : 0] <= tmp_105_fu_402_p1[15 : 0];
        tmp_106_reg_1077[15 : 0] <= tmp_106_fu_406_p1[15 : 0];
        tmp_s_reg_1055[15 : 0] <= tmp_s_fu_390_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_444_p2 == 1'd0))) begin
        tmp_108_reg_1123[15 : 0] <= tmp_108_fu_455_p1[15 : 0];
        tmp_reg_1128 <= tmp_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_137_2_2_reg_1406 <= {{tmp_135_2_2_fu_1028_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_138_2_2_reg_1411 <= tmp_138_2_2_fu_933_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Conv2D_2_b_ce0 = 1'b1;
    end else begin
        Conv2D_2_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Conv2D_2_w_address0 = tmp_133_2_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Conv2D_2_w_address0 = tmp_133_1_1_fu_683_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        Conv2D_2_w_address0 = tmp_133_0_1_fu_609_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Conv2D_2_w_address0 = tmp_118_fu_582_p1;
    end else begin
        Conv2D_2_w_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Conv2D_2_w_address1 = tmp_133_2_1_fu_792_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Conv2D_2_w_address1 = tmp_133_1_2_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        Conv2D_2_w_address1 = tmp_133_0_2_fu_628_p1;
    end else begin
        Conv2D_2_w_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Conv2D_2_w_address2 = tmp_133_2_2_fu_802_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        Conv2D_2_w_address2 = tmp_133_1_fu_647_p1;
    end else begin
        Conv2D_2_w_address2 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        Conv2D_2_w_ce0 = 1'b1;
    end else begin
        Conv2D_2_w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        Conv2D_2_w_ce1 = 1'b1;
    end else begin
        Conv2D_2_w_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10))) begin
        Conv2D_2_w_ce2 = 1'b1;
    end else begin
        Conv2D_2_w_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        Padding2D_2_array_address0 = tmp_129_2_2_fu_846_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        Padding2D_2_array_address0 = tmp_129_2_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Padding2D_2_array_address0 = tmp_129_1_1_fu_673_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        Padding2D_2_array_address0 = tmp_129_0_2_fu_618_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Padding2D_2_array_address0 = tmp_117_fu_577_p1;
    end else begin
        Padding2D_2_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        Padding2D_2_array_address1 = tmp_129_2_1_fu_783_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Padding2D_2_array_address1 = tmp_129_1_2_fu_692_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        Padding2D_2_array_address1 = tmp_129_1_fu_637_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        Padding2D_2_array_address1 = tmp_129_0_1_fu_591_p1;
    end else begin
        Padding2D_2_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state13))) begin
        Padding2D_2_array_ce0 = 1'b1;
    end else begin
        Padding2D_2_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        Padding2D_2_array_ce1 = 1'b1;
    end else begin
        Padding2D_2_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_420_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_420_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_address0 = output_addr11_reg_1153;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = tmp_111_fu_493_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_d0 = p_tmp_cast_fu_968_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        output_r_d0 = tmp_138_2_2_reg_1411;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state19) | ((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_469_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_420_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_444_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_469_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond2_fu_518_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Conv2D_2_b_address0 = tmp_107_fu_431_p1;

assign Conv2D_2_b_load_cast_fu_436_p0 = Conv2D_2_b_q0;

assign Conv2D_2_b_load_cast_fu_436_p1 = Conv2D_2_b_load_cast_fu_436_p0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond2_fu_518_p2 = ((in_d_reg_348 == input_depth) ? 1'b1 : 1'b0);

assign exitcond3_fu_469_p2 = ((out_w_reg_337 == output_width) ? 1'b1 : 1'b0);

assign exitcond4_fu_444_p2 = ((out_h_reg_326 == output_height) ? 1'b1 : 1'b0);

assign exitcond5_fu_420_p2 = ((out_d_reg_291 == output_depth) ? 1'b1 : 1'b0);

assign in_d_1_fu_523_p2 = (in_d_reg_348 + 16'd1);

assign next_mul2_fu_415_p2 = (phi_mul1_reg_302 + tmp_s_reg_1055);

assign next_mul5_fu_410_p2 = (phi_mul4_reg_314 + tmp_106_reg_1077);

assign next_mul_fu_533_p2 = (tmp_104_reg_1065 + phi_mul_reg_359);

assign out_d_3_fu_425_p2 = (out_d_reg_291 + 16'd1);

assign out_h_3_fu_449_p2 = (out_h_reg_326 + 16'd1);

assign out_w_3_fu_474_p2 = (out_w_reg_337 + 16'd1);

assign p_tmp_cast_fu_968_p1 = p_tmp_s_reg_1416;

assign p_tmp_s_fu_960_p3 = ((tmp_23_fu_952_p3[0:0] === 1'b1) ? 15'd0 : tmp_117_cast_fu_947_p2);

assign tmp10_fu_923_p2 = (tmp_137_2_reg_1391 + tmp11_fu_919_p2);

assign tmp11_fu_919_p2 = (tmp_137_2_2_reg_1406 + tmp_137_2_1_reg_1396);

assign tmp1_fu_859_p2 = (tmp2_reg_1366 + tmp6_fu_854_p2);

assign tmp2_fu_807_p2 = (tmp_120_reg_1281 + output_r_q0);

assign tmp3_fu_465_p1 = tmp_103_reg_1060;

assign tmp3_fu_465_p2 = ($signed(tmp_reg_1128) * $signed({{1'b0}, {tmp3_fu_465_p1}}));

assign tmp4_1_fu_553_p2 = ($signed(32'd1) + $signed(tmp4_reg_1191));

assign tmp4_2_fu_558_p2 = ($signed(32'd2) + $signed(tmp4_reg_1191));

assign tmp4_fu_544_p2 = (tmp_108_reg_1123 + phi_mul_reg_359);

assign tmp5_1_fu_596_p0 = tmp_105_reg_1070;

assign tmp5_1_fu_596_p2 = ($signed({{1'b0}, {tmp5_1_fu_596_p0}}) * $signed(tmp4_1_reg_1205));

assign tmp5_2_fu_600_p0 = tmp_105_reg_1070;

assign tmp5_2_fu_600_p2 = ($signed({{1'b0}, {tmp5_2_fu_600_p0}}) * $signed(tmp4_2_reg_1210));

assign tmp5_fu_549_p0 = tmp_105_reg_1070;

assign tmp5_fu_549_p2 = ($signed({{1'b0}, {tmp5_fu_549_p0}}) * $signed(tmp4_reg_1191));

assign tmp6_fu_854_p2 = (tmp_137_0_1_reg_1326 + tmp7_fu_850_p2);

assign tmp7_fu_850_p2 = (tmp_137_1_reg_1336 + tmp_137_0_2_reg_1331);

assign tmp8_fu_928_p2 = (tmp9_reg_1401 + tmp10_fu_923_p2);

assign tmp9_fu_898_p2 = (tmp_137_1_2_reg_1376 + tmp_137_1_1_reg_1371);

assign tmp_103_fu_394_p1 = output_width;

assign tmp_104_fu_398_p1 = input_height;

assign tmp_105_fu_402_p1 = input_width;

assign tmp_106_fu_406_p1 = input_depth;

assign tmp_107_fu_431_p1 = out_d_reg_291;

assign tmp_108_fu_455_p1 = out_h_reg_326;

assign tmp_109_fu_480_p1 = out_w_reg_337;

assign tmp_110_fu_488_p2 = (tmp3_reg_1133 + tmp_109_fu_480_p1);

assign tmp_111_fu_493_p1 = $signed(tmp_110_fu_488_p2);

assign tmp_112_fu_942_p2 = ($signed(Conv2D_2_b_load_cast_reg_1105) + $signed(output_r_q0));

assign tmp_113_fu_529_p1 = in_d_reg_348;

assign tmp_114_cast_fu_484_p1 = out_w_reg_337;

assign tmp_114_fu_538_p2 = (tmp_113_fu_529_p1 + phi_mul4_reg_314);

assign tmp_115_fu_568_p2 = (tmp_114_reg_1185 + tmp_24_fu_563_p2);

assign tmp_116_fu_573_p2 = (tmp_109_reg_1146 + tmp5_reg_1198);

assign tmp_117_cast_fu_947_p2 = ($signed(tmp_22_fu_938_p1) + $signed(tmp_5_reg_1110));

assign tmp_117_fu_577_p1 = $signed(tmp_116_fu_573_p2);

assign tmp_118_fu_582_p1 = tmp_115_fu_568_p2;

assign tmp_127_0_1_cast_fu_504_p1 = tmp_127_0_1_fu_498_p2;

assign tmp_127_0_1_fu_498_p2 = (tmp_114_cast_fu_484_p1 + 17'd1);

assign tmp_127_0_2_cast_fu_514_p1 = tmp_127_0_2_fu_508_p2;

assign tmp_127_0_2_fu_508_p2 = (tmp_114_cast_fu_484_p1 + 17'd2);

assign tmp_128_0_1_fu_587_p2 = (tmp5_reg_1198 + tmp_127_0_1_cast_reg_1158);

assign tmp_128_0_2_fu_614_p2 = (tmp5_reg_1198 + tmp_127_0_2_cast_reg_1165);

assign tmp_128_1_1_fu_669_p2 = (tmp5_1_reg_1242 + tmp_127_0_1_cast_reg_1158);

assign tmp_128_1_2_fu_688_p2 = (tmp5_1_reg_1242 + tmp_127_0_2_cast_reg_1165);

assign tmp_128_1_fu_633_p2 = (tmp_109_reg_1146 + tmp5_1_reg_1242);

assign tmp_128_2_1_fu_711_p2 = (tmp5_2_reg_1249 + tmp_127_0_1_cast_reg_1158);

assign tmp_128_2_2_fu_715_p2 = (tmp5_2_reg_1249 + tmp_127_0_2_cast_reg_1165);

assign tmp_128_2_fu_707_p2 = (tmp_109_reg_1146 + tmp5_2_reg_1249);

assign tmp_129_0_1_fu_591_p1 = $signed(tmp_128_0_1_fu_587_p2);

assign tmp_129_0_2_fu_618_p1 = $signed(tmp_128_0_2_fu_614_p2);

assign tmp_129_1_1_fu_673_p1 = $signed(tmp_128_1_1_fu_669_p2);

assign tmp_129_1_2_fu_692_p1 = $signed(tmp_128_1_2_fu_688_p2);

assign tmp_129_1_fu_637_p1 = $signed(tmp_128_1_fu_633_p2);

assign tmp_129_2_1_fu_783_p1 = $signed(tmp_128_2_1_reg_1316);

assign tmp_129_2_2_fu_846_p1 = $signed(tmp_128_2_2_reg_1321);

assign tmp_129_2_fu_769_p1 = $signed(tmp_128_2_reg_1311);

assign tmp_132_0_1_fu_604_p2 = ($signed(32'd1) + $signed(tmp_115_reg_1215));

assign tmp_132_0_2_fu_623_p2 = ($signed(32'd2) + $signed(tmp_115_reg_1215));

assign tmp_132_1_1_fu_678_p2 = ($signed(32'd4) + $signed(tmp_115_reg_1215));

assign tmp_132_1_2_fu_697_p2 = ($signed(32'd5) + $signed(tmp_115_reg_1215));

assign tmp_132_1_fu_642_p2 = ($signed(32'd3) + $signed(tmp_115_reg_1215));

assign tmp_132_2_1_fu_787_p2 = ($signed(32'd7) + $signed(tmp_115_reg_1215));

assign tmp_132_2_2_fu_797_p2 = ($signed(32'd8) + $signed(tmp_115_reg_1215));

assign tmp_132_2_fu_773_p2 = ($signed(32'd6) + $signed(tmp_115_reg_1215));

assign tmp_133_0_1_fu_609_p1 = $signed(tmp_132_0_1_fu_604_p2);

assign tmp_133_0_2_fu_628_p1 = $signed(tmp_132_0_2_fu_623_p2);

assign tmp_133_1_1_fu_683_p1 = $signed(tmp_132_1_1_fu_678_p2);

assign tmp_133_1_2_fu_702_p1 = $signed(tmp_132_1_2_fu_697_p2);

assign tmp_133_1_fu_647_p1 = $signed(tmp_132_1_fu_642_p2);

assign tmp_133_2_1_fu_792_p1 = $signed(tmp_132_2_1_fu_787_p2);

assign tmp_133_2_2_fu_802_p1 = $signed(tmp_132_2_2_fu_797_p2);

assign tmp_133_2_fu_778_p1 = $signed(tmp_132_2_fu_773_p2);

assign tmp_138_2_2_fu_933_p2 = (tmp1_reg_1386 + tmp8_fu_928_p2);

assign tmp_22_fu_938_p1 = output_r_q0[14:0];

assign tmp_23_fu_952_p3 = tmp_112_fu_942_p2[32'd15];

assign tmp_24_fu_563_p2 = tmp_114_reg_1185 << 32'd3;

assign tmp_5_fu_440_p0 = Conv2D_2_b_q0;

assign tmp_5_fu_440_p1 = tmp_5_fu_440_p0;

assign tmp_fu_459_p2 = (phi_mul1_reg_302 + tmp_108_fu_455_p1);

assign tmp_s_fu_390_p1 = output_height;

always @ (posedge ap_clk) begin
    tmp_s_reg_1055[31:16] <= 16'b0000000000000000;
    tmp_103_reg_1060[31:16] <= 16'b0000000000000000;
    tmp_104_reg_1065[31:16] <= 16'b0000000000000000;
    tmp_105_reg_1070[31:16] <= 16'b0000000000000000;
    tmp_106_reg_1077[31:16] <= 16'b0000000000000000;
    tmp_108_reg_1123[31:16] <= 16'b0000000000000000;
    tmp_109_reg_1146[31:16] <= 16'b0000000000000000;
    tmp_127_0_1_cast_reg_1158[31:17] <= 15'b000000000000000;
    tmp_127_0_2_cast_reg_1165[31:17] <= 15'b000000000000000;
end

endmodule //conv2d_fix16_3
