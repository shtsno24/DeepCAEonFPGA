// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        MaxPooling2D_0_array_address0,
        MaxPooling2D_0_array_ce0,
        MaxPooling2D_0_array_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_depth;
input  [15:0] input_height;
input  [15:0] input_width;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [11:0] MaxPooling2D_0_array_address0;
output   MaxPooling2D_0_array_ce0;
input  [15:0] MaxPooling2D_0_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;
reg MaxPooling2D_0_array_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
(* use_dsp48 = "no" *) wire  signed [15:0] tmp_fu_304_p2;
reg  signed [15:0] tmp_reg_573;
wire  signed [15:0] tmp_37_fu_546_p2;
reg  signed [15:0] tmp_37_reg_580;
wire    ap_CS_fsm_state2;
wire  signed [15:0] tmp_s_fu_552_p2;
reg  signed [15:0] tmp_s_reg_592;
wire   [15:0] tmp_38_fu_310_p2;
reg   [15:0] tmp_38_reg_597;
wire   [15:0] tmp_39_fu_315_p2;
reg   [15:0] tmp_39_reg_603;
wire   [15:0] tmp_40_fu_325_p2;
reg   [15:0] tmp_40_reg_608;
wire   [15:0] tmp_41_fu_331_p2;
wire   [16:0] tmp_42_fu_339_p2;
reg   [16:0] tmp_42_reg_619;
wire   [16:0] tmp_43_fu_345_p2;
reg   [16:0] tmp_43_reg_624;
wire   [15:0] tmp_44_fu_356_p2;
wire   [15:0] tmp_22_fu_367_p2;
reg   [15:0] tmp_22_reg_634;
wire   [15:0] depth_1_fu_378_p2;
reg   [15:0] depth_1_reg_642;
wire    ap_CS_fsm_state3;
wire   [15:0] i_1_fu_393_p2;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_47_fu_404_p2;
wire   [0:0] tmp_45_fu_388_p2;
(* use_dsp48 = "no" *) wire   [15:0] i_count_3_fu_410_p2;
reg   [15:0] i_count_3_reg_660;
(* use_dsp48 = "no" *) wire   [15:0] tmp_48_fu_420_p2;
reg   [15:0] tmp_48_reg_665;
wire   [15:0] height_1_fu_430_p2;
reg   [15:0] height_1_reg_674;
wire    ap_CS_fsm_state5;
wire   [15:0] tmp_50_fu_436_p2;
reg   [15:0] tmp_50_reg_679;
wire   [0:0] exitcond7_fu_425_p2;
wire   [15:0] tmp_49_fu_441_p2;
reg   [15:0] tmp_49_reg_684;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_445_p2;
wire   [15:0] tmp_56_fu_456_p2;
reg   [15:0] tmp_56_reg_697;
wire   [15:0] tmp_53_fu_462_p2;
reg   [15:0] tmp_53_reg_702;
wire   [15:0] o_count_8_fu_472_p2;
wire    ap_CS_fsm_state7;
wire   [15:0] o_count_9_fu_489_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond5_fu_478_p2;
wire   [15:0] indvars_iv_next5_fu_495_p2;
wire   [15:0] indvars_iv_next4_fu_500_p2;
wire   [15:0] i_2_fu_514_p2;
wire    ap_CS_fsm_state9;
wire   [15:0] o_count_7_fu_525_p2;
wire   [0:0] tmp_51_fu_509_p2;
wire   [15:0] indvars_iv_next_fu_531_p2;
wire   [15:0] indvars_iv_next1_fu_536_p2;
wire   [15:0] indvars_iv_next2_fu_541_p2;
reg   [15:0] indvars_iv1_reg_112;
reg   [15:0] indvars_iv_reg_122;
reg   [15:0] indvars_iv2_reg_132;
reg   [15:0] o_count_reg_142;
reg   [15:0] i_count_reg_154;
reg   [15:0] depth_reg_166;
reg   [15:0] o_count_1_reg_177;
wire   [0:0] exitcond1_fu_373_p2;
reg   [15:0] i_reg_187;
reg   [15:0] indvars_iv3_reg_198;
reg   [15:0] o_count_6_reg_209;
reg   [15:0] o_count_2_reg_220;
reg   [15:0] i_count_1_reg_231;
reg   [15:0] height_reg_242;
reg   [15:0] o_count_3_reg_253;
reg   [15:0] i_count_2_reg_264;
reg   [15:0] o_count_4_reg_274;
reg   [15:0] o_count_5_reg_284;
reg   [15:0] i2_reg_293;
wire   [63:0] tmp_46_fu_399_p1;
wire   [63:0] tmp_54_fu_451_p1;
wire   [63:0] tmp_55_fu_467_p1;
wire   [63:0] tmp_57_fu_484_p1;
wire   [63:0] tmp_52_fu_520_p1;
wire  signed [15:0] tmp_fu_304_p1;
wire  signed [15:0] tmp_38_fu_310_p1;
wire  signed [15:0] tmp_39_fu_315_p1;
(* use_dsp48 = "no" *) wire   [15:0] tmp1_fu_320_p2;
wire  signed [15:0] tmp_41_fu_331_p0;
wire  signed [15:0] tmp_47_cast_fu_336_p0;
wire   [16:0] tmp_47_cast_fu_336_p1;
wire  signed [15:0] tmp_11_fu_351_p0;
wire   [15:0] tmp_11_fu_351_p2;
(* use_dsp48 = "no" *) wire   [15:0] tmp3_fu_362_p2;
wire   [16:0] tmp_52_cast_fu_384_p1;
wire   [15:0] tmp2_fu_415_p2;
wire  signed [15:0] exitcond7_fu_425_p1;
wire  signed [15:0] tmp_50_fu_436_p1;
wire   [16:0] tmp_60_cast_fu_505_p1;
wire  signed [15:0] tmp_37_fu_546_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

network_mul_mul_16s_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
network_mul_mul_16s_16s_16_1_1_U29(
    .din0(input_height),
    .din1(tmp_37_fu_546_p1),
    .dout(tmp_37_fu_546_p2)
);

network_mul_mul_16s_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
network_mul_mul_16s_16s_16_1_1_U30(
    .din0(input_width),
    .din1(input_height),
    .dout(tmp_s_fu_552_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_reg_166 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_51_fu_509_p2 == 1'd0))) begin
        depth_reg_166 <= depth_1_reg_642;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        height_reg_242 <= 16'd0;
    end else if (((exitcond5_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        height_reg_242 <= height_1_reg_674;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_51_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        i2_reg_293 <= i_2_fu_514_p2;
    end else if (((exitcond7_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i2_reg_293 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_count_1_reg_231 <= i_count_reg_154;
    end else if (((exitcond5_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        i_count_1_reg_231 <= tmp_50_reg_679;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_count_2_reg_264 <= tmp_56_reg_697;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_425_p2 == 1'd0))) begin
        i_count_2_reg_264 <= i_count_1_reg_231;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_reg_154 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_51_fu_509_p2 == 1'd0))) begin
        i_count_reg_154 <= i_count_3_reg_660;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_373_p2 == 1'd0))) begin
        i_reg_187 <= 16'd0;
    end else if (((tmp_45_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_187 <= i_1_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv1_reg_112 <= tmp_44_fu_356_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_51_fu_509_p2 == 1'd0))) begin
        indvars_iv1_reg_112 <= indvars_iv_next2_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv2_reg_132 <= tmp_38_fu_310_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_51_fu_509_p2 == 1'd0))) begin
        indvars_iv2_reg_132 <= indvars_iv_next_fu_531_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        indvars_iv3_reg_198 <= indvars_iv1_reg_112;
    end else if (((exitcond5_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        indvars_iv3_reg_198 <= indvars_iv_next4_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_122 <= tmp_41_fu_331_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_51_fu_509_p2 == 1'd0))) begin
        indvars_iv_reg_122 <= indvars_iv_next1_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_373_p2 == 1'd0))) begin
        o_count_1_reg_177 <= o_count_reg_142;
    end else if (((tmp_45_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_1_reg_177 <= tmp_47_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_2_reg_220 <= indvars_iv2_reg_132;
    end else if (((exitcond5_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        o_count_2_reg_220 <= tmp_53_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o_count_3_reg_253 <= o_count_8_fu_472_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_425_p2 == 1'd0))) begin
        o_count_3_reg_253 <= o_count_2_reg_220;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_478_p2 == 1'd0))) begin
        o_count_4_reg_274 <= o_count_9_fu_489_p2;
    end else if (((exitcond_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        o_count_4_reg_274 <= o_count_6_reg_209;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_51_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        o_count_5_reg_284 <= o_count_7_fu_525_p2;
    end else if (((exitcond7_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        o_count_5_reg_284 <= tmp_48_reg_665;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_6_reg_209 <= indvars_iv_reg_122;
    end else if (((exitcond5_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        o_count_6_reg_209 <= indvars_iv_next5_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_count_reg_142 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_51_fu_509_p2 == 1'd0))) begin
        o_count_reg_142 <= tmp_49_reg_684;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_1_reg_642 <= depth_1_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        height_1_reg_674 <= height_1_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_45_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_count_3_reg_660 <= i_count_3_fu_410_p2;
        tmp_48_reg_665 <= tmp_48_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_22_reg_634 <= tmp_22_fu_367_p2;
        tmp_38_reg_597 <= tmp_38_fu_310_p2;
        tmp_39_reg_603 <= tmp_39_fu_315_p2;
        tmp_40_reg_608 <= tmp_40_fu_325_p2;
        tmp_42_reg_619 <= tmp_42_fu_339_p2;
        tmp_43_reg_624 <= tmp_43_fu_345_p2;
        tmp_s_reg_592 <= tmp_s_fu_552_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_37_reg_580 <= tmp_37_fu_546_p2;
        tmp_reg_573 <= tmp_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_49_reg_684 <= tmp_49_fu_441_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_425_p2 == 1'd0))) begin
        tmp_50_reg_679 <= tmp_50_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_53_reg_702 <= tmp_53_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_445_p2 == 1'd0))) begin
        tmp_56_reg_697 <= tmp_56_fu_456_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        MaxPooling2D_0_array_ce0 = 1'b1;
    end else begin
        MaxPooling2D_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond1_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_52_fu_520_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_57_fu_484_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_55_fu_467_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = tmp_46_fu_399_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_d0 = MaxPooling2D_0_array_q0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((tmp_45_fu_388_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((tmp_51_fu_509_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_478_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond1_fu_373_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_45_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond7_fu_425_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_445_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond5_fu_478_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_51_fu_509_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MaxPooling2D_0_array_address0 = tmp_54_fu_451_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_1_fu_378_p2 = (depth_reg_166 + 16'd1);

assign exitcond1_fu_373_p2 = ((depth_reg_166 == input_depth) ? 1'b1 : 1'b0);

assign exitcond5_fu_478_p2 = ((o_count_4_reg_274 == indvars_iv3_reg_198) ? 1'b1 : 1'b0);

assign exitcond7_fu_425_p1 = input_height;

assign exitcond7_fu_425_p2 = ((height_reg_242 == exitcond7_fu_425_p1) ? 1'b1 : 1'b0);

assign exitcond_fu_445_p2 = ((o_count_3_reg_253 == o_count_6_reg_209) ? 1'b1 : 1'b0);

assign height_1_fu_430_p2 = (height_reg_242 + 16'd1);

assign i_1_fu_393_p2 = (i_reg_187 + 16'd1);

assign i_2_fu_514_p2 = (i2_reg_293 + 16'd1);

assign i_count_3_fu_410_p2 = ($signed(tmp_s_reg_592) + $signed(i_count_reg_154));

assign indvars_iv_next1_fu_536_p2 = (tmp_40_reg_608 + indvars_iv_reg_122);

assign indvars_iv_next2_fu_541_p2 = (indvars_iv1_reg_112 + tmp_22_reg_634);

assign indvars_iv_next4_fu_500_p2 = ($signed(tmp_reg_573) + $signed(indvars_iv3_reg_198));

assign indvars_iv_next5_fu_495_p2 = ($signed(tmp_reg_573) + $signed(o_count_6_reg_209));

assign indvars_iv_next_fu_531_p2 = (tmp_40_reg_608 + indvars_iv2_reg_132);

assign o_count_7_fu_525_p2 = (o_count_5_reg_284 + 16'd1);

assign o_count_8_fu_472_p2 = (o_count_3_reg_253 + 16'd1);

assign o_count_9_fu_489_p2 = (o_count_4_reg_274 + 16'd1);

assign tmp1_fu_320_p2 = ($signed(tmp_38_fu_310_p2) + $signed(tmp_37_reg_580));

assign tmp2_fu_415_p2 = (tmp_38_reg_597 + o_count_reg_142);

assign tmp3_fu_362_p2 = ($signed(16'd4) + $signed(tmp_37_reg_580));

assign tmp_11_fu_351_p0 = input_width;

assign tmp_11_fu_351_p2 = tmp_11_fu_351_p0 << 16'd1;

assign tmp_22_fu_367_p2 = (tmp3_fu_362_p2 + tmp_11_fu_351_p2);

assign tmp_37_fu_546_p1 = ($signed(16'd2) + $signed(tmp_fu_304_p1));

assign tmp_38_fu_310_p1 = input_width;

assign tmp_38_fu_310_p2 = ($signed(16'd3) + $signed(tmp_38_fu_310_p1));

assign tmp_39_fu_315_p1 = input_width;

assign tmp_39_fu_315_p2 = ($signed(16'd1) + $signed(tmp_39_fu_315_p1));

assign tmp_40_fu_325_p2 = (tmp1_fu_320_p2 + tmp_39_fu_315_p2);

assign tmp_41_fu_331_p0 = input_width;

assign tmp_41_fu_331_p2 = ($signed(tmp_41_fu_331_p0) + $signed(tmp_38_fu_310_p2));

assign tmp_42_fu_339_p2 = (17'd3 + tmp_47_cast_fu_336_p1);

assign tmp_43_fu_345_p2 = (17'd1 + tmp_47_cast_fu_336_p1);

assign tmp_44_fu_356_p2 = (16'd5 + tmp_11_fu_351_p2);

assign tmp_45_fu_388_p2 = ((tmp_52_cast_fu_384_p1 < tmp_42_reg_619) ? 1'b1 : 1'b0);

assign tmp_46_fu_399_p1 = o_count_1_reg_177;

assign tmp_47_cast_fu_336_p0 = input_width;

assign tmp_47_cast_fu_336_p1 = $unsigned(tmp_47_cast_fu_336_p0);

assign tmp_47_fu_404_p2 = (o_count_1_reg_177 + 16'd1);

assign tmp_48_fu_420_p2 = ($signed(tmp2_fu_415_p2) + $signed(tmp_37_reg_580));

assign tmp_49_fu_441_p2 = (tmp_48_reg_665 + tmp_39_reg_603);

assign tmp_50_fu_436_p1 = input_width;

assign tmp_50_fu_436_p2 = ($signed(i_count_1_reg_231) + $signed(tmp_50_fu_436_p1));

assign tmp_51_fu_509_p2 = ((tmp_60_cast_fu_505_p1 < tmp_43_reg_624) ? 1'b1 : 1'b0);

assign tmp_52_cast_fu_384_p1 = i_reg_187;

assign tmp_52_fu_520_p1 = o_count_5_reg_284;

assign tmp_53_fu_462_p2 = ($signed(tmp_reg_573) + $signed(o_count_2_reg_220));

assign tmp_54_fu_451_p1 = i_count_2_reg_264;

assign tmp_55_fu_467_p1 = o_count_3_reg_253;

assign tmp_56_fu_456_p2 = (i_count_2_reg_264 + 16'd1);

assign tmp_57_fu_484_p1 = o_count_4_reg_274;

assign tmp_60_cast_fu_505_p1 = i2_reg_293;

assign tmp_fu_304_p1 = input_width;

assign tmp_fu_304_p2 = ($signed(16'd2) + $signed(tmp_fu_304_p1));

endmodule //padding2d_fix16_4
