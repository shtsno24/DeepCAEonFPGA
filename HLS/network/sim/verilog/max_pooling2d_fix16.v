// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_depth;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
input  [15:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] tmp_cast_fu_211_p1;
reg   [8:0] tmp_cast_reg_442;
wire   [13:0] tmp_73_cast_fu_215_p1;
reg   [13:0] tmp_73_cast_reg_447;
wire   [7:0] tmp_74_cast_fu_219_p1;
reg   [7:0] tmp_74_cast_reg_452;
wire   [11:0] tmp_75_cast_fu_223_p1;
reg   [11:0] tmp_75_cast_reg_457;
wire   [7:0] next_mul3_fu_227_p2;
reg   [7:0] next_mul3_reg_462;
wire    ap_CS_fsm_state2;
wire   [8:0] next_mul_fu_232_p2;
reg   [8:0] next_mul_reg_467;
wire   [4:0] out_d_3_fu_246_p2;
reg   [4:0] out_d_3_reg_475;
wire   [3:0] out_h_3_fu_261_p2;
reg   [3:0] out_h_3_reg_483;
wire    ap_CS_fsm_state3;
wire   [8:0] tmp_80_cast_fu_279_p1;
reg   [8:0] tmp_80_cast_reg_488;
wire   [0:0] exitcond3_fu_256_p2;
wire   [11:0] tmp1_fu_293_p2;
reg   [11:0] tmp1_reg_493;
wire   [3:0] out_w_3_fu_307_p2;
reg   [3:0] out_w_3_reg_501;
wire    ap_CS_fsm_state4;
wire   [13:0] tmp_83_cast_fu_325_p1;
reg   [13:0] tmp_83_cast_reg_506;
wire   [0:0] exitcond2_fu_302_p2;
reg   [13:0] output_addr_reg_511;
wire   [0:0] tmp_27_fu_339_p1;
reg   [0:0] tmp_27_reg_516;
wire    ap_CS_fsm_state5;
wire   [1:0] in_h_1_fu_349_p2;
reg   [1:0] in_h_1_reg_524;
wire   [13:0] grp_fu_420_p4;
reg   [13:0] tmp_57_reg_529;
wire   [0:0] exitcond1_fu_343_p2;
wire   [1:0] in_w_1_fu_375_p2;
reg   [1:0] in_w_1_reg_538;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_58_fu_381_p2;
reg   [0:0] tmp_58_reg_543;
wire   [0:0] exitcond_fu_369_p2;
reg   [4:0] out_d_reg_120;
reg   [8:0] phi_mul_reg_131;
reg   [7:0] phi_mul2_reg_143;
reg   [3:0] out_h_reg_155;
wire   [0:0] exitcond4_fu_241_p2;
reg   [3:0] out_w_reg_166;
reg   [1:0] in_h_reg_177;
reg   [1:0] in_w_reg_188;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_56_fu_334_p1;
wire   [63:0] tmp_63_fu_395_p1;
wire   [63:0] tmp_60_fu_409_p1;
wire   [0:0] tmp_61_fu_414_p2;
wire  signed [4:0] output_width_cast3_fu_199_p0;
wire  signed [4:0] output_height_cast2_fu_203_p0;
wire  signed [6:0] input_width_cast_fu_207_p1;
wire  signed [5:0] output_height_cast2_fu_203_p1;
wire  signed [5:0] output_width_cast3_fu_199_p1;
wire   [5:0] out_d_cast_fu_237_p1;
wire   [4:0] out_h_cast_fu_252_p1;
wire  signed [4:0] exitcond3_fu_256_p1;
wire   [4:0] tmp_s_fu_271_p3;
wire   [7:0] tmp_79_cast1_fu_267_p1;
wire   [7:0] tmp_fu_283_p2;
wire   [5:0] tmp1_fu_293_p0;
wire   [7:0] tmp1_fu_293_p1;
wire   [4:0] out_w_cast_fu_298_p1;
wire  signed [4:0] exitcond2_fu_302_p1;
wire   [4:0] tmp_54_fu_317_p3;
wire   [11:0] tmp_82_cast9_fu_313_p1;
wire   [11:0] tmp_55_fu_329_p2;
wire   [8:0] tmp_86_cast_fu_355_p1;
wire   [0:0] tmp_28_fu_365_p1;
wire   [13:0] tmp_90_cast_fu_386_p1;
(* use_dsp48 = "no" *) wire   [13:0] tmp_62_fu_390_p2;
wire   [13:0] tmp_93_cast_fu_400_p1;
(* use_dsp48 = "no" *) wire   [13:0] tmp_59_fu_404_p2;
wire   [8:0] grp_fu_420_p0;
wire   [4:0] grp_fu_420_p1;
wire   [6:0] grp_fu_420_p2;
wire   [4:0] grp_fu_420_p3;
reg   [6:0] ap_NS_fsm;
wire   [11:0] tmp1_fu_293_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

network_ama_addmuladd_9ns_5ns_7ns_5ns_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 7 ),
    .din3_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
network_ama_addmuladd_9ns_5ns_7ns_5ns_14_1_1_U17(
    .din0(grp_fu_420_p0),
    .din1(grp_fu_420_p1),
    .din2(grp_fu_420_p2),
    .din3(grp_fu_420_p3),
    .dout(grp_fu_420_p4)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_369_p2 == 1'd1))) begin
        in_h_reg_177 <= in_h_1_reg_524;
    end else if (((exitcond2_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        in_h_reg_177 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_w_reg_188 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        in_w_reg_188 <= in_w_1_reg_538;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_d_reg_120 <= out_d_3_reg_475;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_120 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_h_reg_155 <= 4'd0;
    end else if (((exitcond2_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_h_reg_155 <= out_h_3_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_343_p2 == 1'd1))) begin
        out_w_reg_166 <= out_w_3_reg_501;
    end else if (((exitcond3_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_w_reg_166 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul2_reg_143 <= next_mul3_reg_462;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_143 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_131 <= next_mul_reg_467;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_131 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        in_h_1_reg_524 <= in_h_1_fu_349_p2;
        tmp_27_reg_516 <= tmp_27_fu_339_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_w_1_reg_538 <= in_w_1_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul3_reg_462 <= next_mul3_fu_227_p2;
        next_mul_reg_467 <= next_mul_fu_232_p2;
        out_d_3_reg_475 <= out_d_3_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_3_reg_483 <= out_h_3_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_3_reg_501 <= out_w_3_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        output_addr_reg_511[11 : 0] <= tmp_56_fu_334_p1[11 : 0];
        tmp_83_cast_reg_506[4 : 1] <= tmp_83_cast_fu_325_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp1_reg_493 <= tmp1_fu_293_p2;
        tmp_80_cast_reg_488[4 : 1] <= tmp_80_cast_fu_279_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_343_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_57_reg_529 <= grp_fu_420_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_58_reg_543 <= tmp_58_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_73_cast_reg_447[6 : 0] <= tmp_73_cast_fu_215_p1[6 : 0];
        tmp_74_cast_reg_452[5 : 0] <= tmp_74_cast_fu_219_p1[5 : 0];
        tmp_75_cast_reg_457[5 : 0] <= tmp_75_cast_fu_223_p1[5 : 0];
        tmp_cast_reg_442[6 : 0] <= tmp_cast_fu_211_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_241_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_241_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        if ((tmp_58_fu_381_p2 == 1'd1)) begin
            input_r_address0 = tmp_60_fu_409_p1;
        end else if ((tmp_58_fu_381_p2 == 1'd0)) begin
            input_r_address0 = tmp_63_fu_395_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (tmp_58_fu_381_p2 == 1'd1)) | ((exitcond_fu_369_p2 == 1'd0) & (tmp_58_fu_381_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state7) & (tmp_61_fu_414_p2 == 1'd1) & (tmp_58_reg_543 == 1'd1)) | ((tmp_58_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (tmp_61_fu_414_p2 == 1'd1) & (tmp_58_reg_543 == 1'd1)) | ((tmp_58_reg_543 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_241_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_256_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_302_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_343_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_369_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond1_fu_343_p2 = ((in_h_reg_177 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_302_p1 = output_width;

assign exitcond2_fu_302_p2 = ((out_w_cast_fu_298_p1 == exitcond2_fu_302_p1) ? 1'b1 : 1'b0);

assign exitcond3_fu_256_p1 = output_height;

assign exitcond3_fu_256_p2 = ((out_h_cast_fu_252_p1 == exitcond3_fu_256_p1) ? 1'b1 : 1'b0);

assign exitcond4_fu_241_p2 = ((out_d_cast_fu_237_p1 == output_depth) ? 1'b1 : 1'b0);

assign exitcond_fu_369_p2 = ((in_w_reg_188 == 2'd2) ? 1'b1 : 1'b0);

assign grp_fu_420_p0 = (phi_mul_reg_131 + tmp_86_cast_fu_355_p1);

assign grp_fu_420_p1 = tmp_80_cast_reg_488;

assign grp_fu_420_p2 = tmp_73_cast_reg_447;

assign grp_fu_420_p3 = tmp_83_cast_reg_506;

assign in_h_1_fu_349_p2 = (2'd1 + in_h_reg_177);

assign in_w_1_fu_375_p2 = (2'd1 + in_w_reg_188);

assign input_width_cast_fu_207_p1 = $signed(input_width);

assign next_mul3_fu_227_p2 = (phi_mul2_reg_143 + tmp_74_cast_reg_452);

assign next_mul_fu_232_p2 = (phi_mul_reg_131 + tmp_cast_reg_442);

assign out_d_3_fu_246_p2 = (out_d_reg_120 + 5'd1);

assign out_d_cast_fu_237_p1 = out_d_reg_120;

assign out_h_3_fu_261_p2 = (out_h_reg_155 + 4'd1);

assign out_h_cast_fu_252_p1 = out_h_reg_155;

assign out_w_3_fu_307_p2 = (out_w_reg_166 + 4'd1);

assign out_w_cast_fu_298_p1 = out_w_reg_166;

assign output_height_cast2_fu_203_p0 = output_height;

assign output_height_cast2_fu_203_p1 = output_height_cast2_fu_203_p0;

assign output_r_address0 = output_addr_reg_511;

assign output_r_d0 = input_r_q0;

assign output_width_cast3_fu_199_p0 = output_width;

assign output_width_cast3_fu_199_p1 = output_width_cast3_fu_199_p0;

assign tmp1_fu_293_p0 = tmp_75_cast_reg_457;

assign tmp1_fu_293_p1 = tmp1_fu_293_p10;

assign tmp1_fu_293_p10 = tmp_fu_283_p2;

assign tmp1_fu_293_p2 = (tmp1_fu_293_p0 * tmp1_fu_293_p1);

assign tmp_27_fu_339_p1 = in_h_reg_177[0:0];

assign tmp_28_fu_365_p1 = in_w_reg_188[0:0];

assign tmp_54_fu_317_p3 = {{out_w_reg_166}, {1'd0}};

assign tmp_55_fu_329_p2 = (tmp_82_cast9_fu_313_p1 + tmp1_reg_493);

assign tmp_56_fu_334_p1 = tmp_55_fu_329_p2;

assign tmp_58_fu_381_p2 = (tmp_28_fu_365_p1 | tmp_27_reg_516);

assign tmp_59_fu_404_p2 = (tmp_57_reg_529 + tmp_93_cast_fu_400_p1);

assign tmp_60_fu_409_p1 = tmp_59_fu_404_p2;

assign tmp_61_fu_414_p2 = (($signed(output_r_q0) < $signed(input_r_q0)) ? 1'b1 : 1'b0);

assign tmp_62_fu_390_p2 = (tmp_57_reg_529 + tmp_90_cast_fu_386_p1);

assign tmp_63_fu_395_p1 = tmp_62_fu_390_p2;

assign tmp_73_cast_fu_215_p1 = $unsigned(input_width_cast_fu_207_p1);

assign tmp_74_cast_fu_219_p1 = $unsigned(output_height_cast2_fu_203_p1);

assign tmp_75_cast_fu_223_p1 = $unsigned(output_width_cast3_fu_199_p1);

assign tmp_79_cast1_fu_267_p1 = out_h_reg_155;

assign tmp_80_cast_fu_279_p1 = tmp_s_fu_271_p3;

assign tmp_82_cast9_fu_313_p1 = out_w_reg_166;

assign tmp_83_cast_fu_325_p1 = tmp_54_fu_317_p3;

assign tmp_86_cast_fu_355_p1 = in_h_reg_177;

assign tmp_90_cast_fu_386_p1 = in_w_reg_188;

assign tmp_93_cast_fu_400_p1 = in_w_reg_188;

assign tmp_cast_fu_211_p1 = input_height;

assign tmp_fu_283_p2 = (tmp_79_cast1_fu_267_p1 + phi_mul2_reg_143);

assign tmp_s_fu_271_p3 = {{out_h_reg_155}, {1'd0}};

always @ (posedge ap_clk) begin
    tmp_cast_reg_442[8:7] <= 2'b00;
    tmp_73_cast_reg_447[13:7] <= 7'b0000000;
    tmp_74_cast_reg_452[7:6] <= 2'b00;
    tmp_75_cast_reg_457[11:6] <= 6'b000000;
    tmp_80_cast_reg_488[0] <= 1'b0;
    tmp_80_cast_reg_488[8:5] <= 4'b0000;
    tmp_83_cast_reg_506[0] <= 1'b0;
    tmp_83_cast_reg_506[13:5] <= 9'b000000000;
    output_addr_reg_511[13:12] <= 2'b00;
end

endmodule //max_pooling2d_fix16
