// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_depth,
        output_height,
        output_width,
        MaxPooling2D_1_array_address0,
        MaxPooling2D_1_array_ce0,
        MaxPooling2D_1_array_we0,
        MaxPooling2D_1_array_d0,
        MaxPooling2D_1_array_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_height;
input  [15:0] input_width;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [15:0] output_depth;
input  [15:0] output_height;
input  [15:0] output_width;
output  [8:0] MaxPooling2D_1_array_address0;
output   MaxPooling2D_1_array_ce0;
output   MaxPooling2D_1_array_we0;
output  [15:0] MaxPooling2D_1_array_d0;
input  [15:0] MaxPooling2D_1_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[10:0] input_r_address0;
reg input_r_ce0;
reg MaxPooling2D_1_array_ce0;
reg MaxPooling2D_1_array_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_s_fu_182_p1;
reg   [31:0] tmp_s_reg_402;
wire   [31:0] tmp_87_fu_186_p1;
reg   [31:0] tmp_87_reg_407;
wire   [31:0] tmp_88_fu_190_p1;
reg   [31:0] tmp_88_reg_412;
wire   [31:0] tmp_89_fu_194_p1;
reg   [31:0] tmp_89_reg_417;
wire   [31:0] next_mul3_fu_198_p2;
reg   [31:0] next_mul3_reg_422;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul_fu_203_p2;
reg   [31:0] next_mul_reg_427;
wire   [15:0] out_d_3_fu_213_p2;
reg   [15:0] out_d_3_reg_435;
wire   [15:0] out_h_3_fu_224_p2;
reg   [15:0] out_h_3_reg_443;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_fu_234_p2;
reg  signed [31:0] tmp_reg_448;
wire   [0:0] exitcond3_fu_219_p2;
wire   [31:0] tmp_94_cast_fu_248_p1;
reg   [31:0] tmp_94_cast_reg_453;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp1_fu_252_p2;
reg   [31:0] tmp1_reg_458;
wire   [15:0] out_w_3_fu_261_p2;
reg   [15:0] out_w_3_reg_466;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_96_cast_fu_279_p1;
reg   [31:0] tmp_96_cast_reg_471;
wire   [0:0] exitcond2_fu_256_p2;
reg   [8:0] MaxPooling2D_1_array_1_reg_476;
wire   [0:0] tmp_22_fu_293_p1;
reg   [0:0] tmp_22_reg_481;
wire    ap_CS_fsm_state6;
wire   [1:0] in_h_1_fu_303_p2;
reg   [1:0] in_h_1_reg_489;
wire  signed [31:0] tmp2_fu_319_p2;
reg  signed [31:0] tmp2_reg_494;
wire   [0:0] exitcond1_fu_297_p2;
wire   [31:0] tmp3_fu_324_p2;
reg   [31:0] tmp3_reg_499;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_100_fu_328_p2;
reg   [31:0] tmp_100_reg_504;
wire    ap_CS_fsm_state8;
wire   [1:0] in_w_1_fu_342_p2;
reg   [1:0] in_w_1_reg_513;
wire    ap_CS_fsm_state9;
wire   [0:0] tmp_101_fu_348_p2;
reg   [0:0] tmp_101_reg_518;
wire   [0:0] exitcond_fu_336_p2;
reg   [15:0] out_d_reg_102;
reg   [31:0] phi_mul_reg_113;
reg   [31:0] phi_mul2_reg_125;
reg   [15:0] out_h_reg_137;
wire   [0:0] exitcond4_fu_208_p2;
reg   [15:0] out_w_reg_149;
reg   [1:0] in_h_reg_160;
reg   [1:0] in_w_reg_171;
wire    ap_CS_fsm_state10;
wire  signed [63:0] tmp_98_fu_288_p1;
wire  signed [63:0] tmp_106_fu_362_p1;
wire  signed [63:0] tmp_107_fu_376_p1;
wire   [0:0] tmp_108_fu_381_p2;
wire   [31:0] tmp_93_fu_230_p1;
wire   [16:0] tmp_94_fu_240_p3;
wire   [15:0] tmp1_fu_252_p0;
wire   [16:0] tmp_96_fu_271_p3;
wire   [31:0] tmp_95_fu_267_p1;
wire   [31:0] tmp_97_fu_283_p2;
wire   [31:0] tmp_99_fu_309_p1;
wire   [31:0] tmp4_fu_313_p2;
wire   [15:0] tmp3_fu_324_p1;
wire   [0:0] tmp_23_fu_332_p1;
wire   [31:0] tmp_104_fu_353_p1;
wire   [31:0] tmp_105_fu_357_p2;
wire   [31:0] tmp_102_fu_367_p1;
wire   [31:0] tmp_103_fu_371_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_336_p2 == 1'd1))) begin
        in_h_reg_160 <= in_h_1_reg_489;
    end else if (((exitcond2_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        in_h_reg_160 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_w_reg_171 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        in_w_reg_171 <= in_w_1_reg_513;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_d_reg_102 <= out_d_3_reg_435;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_102 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_208_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_h_reg_137 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_256_p2 == 1'd1))) begin
        out_h_reg_137 <= out_h_3_reg_443;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_297_p2 == 1'd1))) begin
        out_w_reg_149 <= out_w_3_reg_466;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_149 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul2_reg_125 <= next_mul3_reg_422;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_125 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_113 <= next_mul_reg_427;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_113 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_256_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        MaxPooling2D_1_array_1_reg_476 <= tmp_98_fu_288_p1;
        tmp_96_cast_reg_471[16 : 1] <= tmp_96_cast_fu_279_p1[16 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_h_1_reg_489 <= in_h_1_fu_303_p2;
        tmp_22_reg_481 <= tmp_22_fu_293_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        in_w_1_reg_513 <= in_w_1_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul3_reg_422 <= next_mul3_fu_198_p2;
        next_mul_reg_427 <= next_mul_fu_203_p2;
        out_d_3_reg_435 <= out_d_3_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_3_reg_443 <= out_h_3_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_3_reg_466 <= out_w_3_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp1_reg_458 <= tmp1_fu_252_p2;
        tmp_94_cast_reg_453[16 : 1] <= tmp_94_cast_fu_248_p1[16 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp2_reg_494 <= tmp2_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp3_reg_499 <= tmp3_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_100_reg_504 <= tmp_100_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_101_reg_518 <= tmp_101_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_87_reg_407[15 : 0] <= tmp_87_fu_186_p1[15 : 0];
        tmp_88_reg_412[15 : 0] <= tmp_88_fu_190_p1[15 : 0];
        tmp_89_reg_417[15 : 0] <= tmp_89_fu_194_p1[15 : 0];
        tmp_s_reg_402[15 : 0] <= tmp_s_fu_182_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_reg_448 <= tmp_fu_234_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state10) & (tmp_108_fu_381_p2 == 1'd1) & (tmp_101_reg_518 == 1'd1)) | ((tmp_101_reg_518 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        MaxPooling2D_1_array_ce0 = 1'b1;
    end else begin
        MaxPooling2D_1_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (tmp_108_fu_381_p2 == 1'd1) & (tmp_101_reg_518 == 1'd1)) | ((tmp_101_reg_518 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        MaxPooling2D_1_array_we0 = 1'b1;
    end else begin
        MaxPooling2D_1_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_208_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_208_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        if ((tmp_101_fu_348_p2 == 1'd1)) begin
            input_r_address0 = tmp_107_fu_376_p1;
        end else if ((tmp_101_fu_348_p2 == 1'd0)) begin
            input_r_address0 = tmp_106_fu_362_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (tmp_101_fu_348_p2 == 1'd1)) | ((exitcond_fu_336_p2 == 1'd0) & (tmp_101_fu_348_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_208_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_256_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond1_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_fu_336_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MaxPooling2D_1_array_address0 = MaxPooling2D_1_array_1_reg_476;

assign MaxPooling2D_1_array_d0 = input_r_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_297_p2 = ((in_h_reg_160 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond2_fu_256_p2 = ((out_w_reg_149 == output_width) ? 1'b1 : 1'b0);

assign exitcond3_fu_219_p2 = ((out_h_reg_137 == output_height) ? 1'b1 : 1'b0);

assign exitcond4_fu_208_p2 = ((out_d_reg_102 == output_depth) ? 1'b1 : 1'b0);

assign exitcond_fu_336_p2 = ((in_w_reg_171 == 2'd2) ? 1'b1 : 1'b0);

assign in_h_1_fu_303_p2 = (2'd1 + in_h_reg_160);

assign in_w_1_fu_342_p2 = (2'd1 + in_w_reg_171);

assign next_mul3_fu_198_p2 = (phi_mul2_reg_125 + tmp_88_reg_412);

assign next_mul_fu_203_p2 = (phi_mul_reg_113 + tmp_s_reg_402);

assign out_d_3_fu_213_p2 = (out_d_reg_102 + 16'd1);

assign out_h_3_fu_224_p2 = (out_h_reg_137 + 16'd1);

assign out_w_3_fu_261_p2 = (out_w_reg_149 + 16'd1);

assign tmp1_fu_252_p0 = tmp_89_reg_417;

assign tmp1_fu_252_p2 = ($signed({{1'b0}, {tmp1_fu_252_p0}}) * $signed(tmp_reg_448));

assign tmp2_fu_319_p2 = (tmp4_fu_313_p2 + tmp_94_cast_reg_453);

assign tmp3_fu_324_p1 = tmp_87_reg_407;

assign tmp3_fu_324_p2 = ($signed(tmp2_reg_494) * $signed({{1'b0}, {tmp3_fu_324_p1}}));

assign tmp4_fu_313_p2 = (phi_mul_reg_113 + tmp_99_fu_309_p1);

assign tmp_100_fu_328_p2 = (tmp3_reg_499 + tmp_96_cast_reg_471);

assign tmp_101_fu_348_p2 = (tmp_23_fu_332_p1 | tmp_22_reg_481);

assign tmp_102_fu_367_p1 = in_w_reg_171;

assign tmp_103_fu_371_p2 = (tmp_100_reg_504 + tmp_102_fu_367_p1);

assign tmp_104_fu_353_p1 = in_w_reg_171;

assign tmp_105_fu_357_p2 = (tmp_100_reg_504 + tmp_104_fu_353_p1);

assign tmp_106_fu_362_p1 = $signed(tmp_105_fu_357_p2);

assign tmp_107_fu_376_p1 = $signed(tmp_103_fu_371_p2);

assign tmp_108_fu_381_p2 = (($signed(MaxPooling2D_1_array_q0) < $signed(input_r_q0)) ? 1'b1 : 1'b0);

assign tmp_22_fu_293_p1 = in_h_reg_160[0:0];

assign tmp_23_fu_332_p1 = in_w_reg_171[0:0];

assign tmp_87_fu_186_p1 = input_width;

assign tmp_88_fu_190_p1 = output_height;

assign tmp_89_fu_194_p1 = output_width;

assign tmp_93_fu_230_p1 = out_h_reg_137;

assign tmp_94_cast_fu_248_p1 = tmp_94_fu_240_p3;

assign tmp_94_fu_240_p3 = {{out_h_reg_137}, {1'd0}};

assign tmp_95_fu_267_p1 = out_w_reg_149;

assign tmp_96_cast_fu_279_p1 = tmp_96_fu_271_p3;

assign tmp_96_fu_271_p3 = {{out_w_reg_149}, {1'd0}};

assign tmp_97_fu_283_p2 = (tmp_95_fu_267_p1 + tmp1_reg_458);

assign tmp_98_fu_288_p1 = $signed(tmp_97_fu_283_p2);

assign tmp_99_fu_309_p1 = in_h_reg_160;

assign tmp_fu_234_p2 = (tmp_93_fu_230_p1 + phi_mul2_reg_125);

assign tmp_s_fu_182_p1 = input_height;

always @ (posedge ap_clk) begin
    tmp_s_reg_402[31:16] <= 16'b0000000000000000;
    tmp_87_reg_407[31:16] <= 16'b0000000000000000;
    tmp_88_reg_412[31:16] <= 16'b0000000000000000;
    tmp_89_reg_417[31:16] <= 16'b0000000000000000;
    tmp_94_cast_reg_453[0] <= 1'b0;
    tmp_94_cast_reg_453[31:17] <= 15'b000000000000000;
    tmp_96_cast_reg_471[0] <= 1'b0;
    tmp_96_cast_reg_471[31:17] <= 15'b000000000000000;
end

endmodule //max_pooling2d_fix16
