// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
input  [15:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_0_w_s_address0;
reg    SeparableConv2D_0_w_s_ce0;
wire   [14:0] SeparableConv2D_0_w_s_q0;
wire   [4:0] out_h_2_fu_136_p2;
reg   [4:0] out_h_2_reg_357;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp_s_fu_166_p2;
reg   [10:0] tmp_s_reg_362;
wire   [0:0] exitcond3_fu_130_p2;
wire   [4:0] out_w_2_fu_178_p2;
reg   [4:0] out_w_2_reg_370;
wire    ap_CS_fsm_state3;
reg   [13:0] output_addr_reg_375;
wire   [0:0] exitcond2_fu_172_p2;
wire   [1:0] k_h_1_fu_208_p2;
reg   [1:0] k_h_1_reg_383;
wire    ap_CS_fsm_state4;
wire   [10:0] tmp_15_fu_248_p2;
reg   [10:0] tmp_15_reg_388;
wire   [0:0] exitcond1_fu_202_p2;
wire   [4:0] tmp_16_fu_266_p2;
reg   [4:0] tmp_16_reg_393;
wire   [1:0] k_w_1_fu_278_p2;
reg   [1:0] k_w_1_reg_401;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_272_p2;
reg  signed [15:0] input_load_reg_416;
wire    ap_CS_fsm_state6;
reg  signed [14:0] SeparableConv2D_0_w_2_reg_421;
reg   [15:0] tmp_22_reg_426;
wire    ap_CS_fsm_state7;
reg   [4:0] out_h_reg_84;
reg   [4:0] out_w_reg_96;
reg   [1:0] k_h_reg_108;
reg   [1:0] k_w_reg_119;
wire    ap_CS_fsm_state8;
wire   [63:0] tmp_13_fu_197_p1;
wire   [63:0] tmp_18_fu_307_p1;
wire   [63:0] tmp_20_fu_321_p1;
wire   [15:0] tmp_23_fu_341_p2;
wire   [9:0] p_shl5_fu_142_p3;
wire   [6:0] p_shl6_fu_154_p3;
wire   [10:0] p_shl5_cast_fu_150_p1;
wire   [10:0] p_shl6_cast_fu_162_p1;
wire   [10:0] tmp_27_cast_fu_184_p1;
wire   [10:0] tmp_12_fu_188_p2;
wire  signed [31:0] tmp_28_cast_fu_193_p1;
wire   [4:0] tmp_30_cast2_fu_214_p1;
wire   [4:0] tmp_14_fu_218_p2;
wire   [9:0] p_shl8_fu_224_p3;
wire   [5:0] p_shl9_fu_236_p3;
wire   [10:0] p_shl8_cast_fu_232_p1;
wire   [10:0] p_shl9_cast_fu_244_p1;
wire   [3:0] p_shl7_fu_254_p3;
wire   [4:0] p_shl7_cast_fu_262_p1;
wire   [4:0] tmp_35_cast_fu_284_p1;
wire   [4:0] tmp_fu_288_p2;
wire   [10:0] tmp_cast_fu_294_p1;
wire   [10:0] tmp_17_fu_298_p2;
wire  signed [31:0] tmp_36_cast_fu_303_p1;
wire   [4:0] tmp_19_fu_312_p2;
wire  signed [31:0] tmp_39_cast_fu_317_p1;
wire  signed [29:0] tmp_21_fu_347_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

depthwise_conv2d_fix_SeparableConv2D_0_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_w_s_address0),
    .ce0(SeparableConv2D_0_w_s_ce0),
    .q0(SeparableConv2D_0_w_s_q0)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U3(
    .din0(input_load_reg_416),
    .din1(SeparableConv2D_0_w_2_reg_421),
    .dout(tmp_21_fu_347_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        k_h_reg_108 <= k_h_1_reg_383;
    end else if (((exitcond2_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_h_reg_108 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_w_reg_119 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k_w_reg_119 <= k_w_1_reg_401;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_h_reg_84 <= out_h_2_reg_357;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_reg_84 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_w_reg_96 <= out_w_2_reg_370;
    end else if (((exitcond3_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_w_reg_96 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        SeparableConv2D_0_w_2_reg_421 <= SeparableConv2D_0_w_s_q0;
        input_load_reg_416 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_h_1_reg_383 <= k_h_1_fu_208_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_w_1_reg_401 <= k_w_1_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_2_reg_357 <= out_h_2_fu_136_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_w_2_reg_370 <= out_w_2_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_addr_reg_375 <= tmp_13_fu_197_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_15_reg_388[10 : 1] <= tmp_15_fu_248_p2[10 : 1];
        tmp_16_reg_393 <= tmp_16_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_22_reg_426 <= {{tmp_21_fu_347_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_s_reg_362[10 : 2] <= tmp_s_fu_166_p2[10 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        SeparableConv2D_0_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_address0 = output_addr_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = tmp_13_fu_197_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_d0 = tmp_23_fu_341_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((exitcond2_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond1_fu_202_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_fu_272_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_0_w_s_address0 = tmp_20_fu_321_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_fu_202_p2 = ((k_h_reg_108 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_172_p2 = ((out_w_reg_96 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond3_fu_130_p2 = ((out_h_reg_84 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond_fu_272_p2 = ((k_w_reg_119 == 2'd3) ? 1'b1 : 1'b0);

assign input_r_address0 = tmp_18_fu_307_p1;

assign k_h_1_fu_208_p2 = (k_h_reg_108 + 2'd1);

assign k_w_1_fu_278_p2 = (k_w_reg_119 + 2'd1);

assign out_h_2_fu_136_p2 = (out_h_reg_84 + 5'd1);

assign out_w_2_fu_178_p2 = (out_w_reg_96 + 5'd1);

assign p_shl5_cast_fu_150_p1 = p_shl5_fu_142_p3;

assign p_shl5_fu_142_p3 = {{out_h_reg_84}, {5'd0}};

assign p_shl6_cast_fu_162_p1 = p_shl6_fu_154_p3;

assign p_shl6_fu_154_p3 = {{out_h_reg_84}, {2'd0}};

assign p_shl7_cast_fu_262_p1 = p_shl7_fu_254_p3;

assign p_shl7_fu_254_p3 = {{k_h_reg_108}, {2'd0}};

assign p_shl8_cast_fu_232_p1 = p_shl8_fu_224_p3;

assign p_shl8_fu_224_p3 = {{tmp_14_fu_218_p2}, {5'd0}};

assign p_shl9_cast_fu_244_p1 = p_shl9_fu_236_p3;

assign p_shl9_fu_236_p3 = {{tmp_14_fu_218_p2}, {1'd0}};

assign tmp_12_fu_188_p2 = (tmp_s_reg_362 + tmp_27_cast_fu_184_p1);

assign tmp_13_fu_197_p1 = $unsigned(tmp_28_cast_fu_193_p1);

assign tmp_14_fu_218_p2 = (tmp_30_cast2_fu_214_p1 + out_h_reg_84);

assign tmp_15_fu_248_p2 = (p_shl8_cast_fu_232_p1 - p_shl9_cast_fu_244_p1);

assign tmp_16_fu_266_p2 = (p_shl7_cast_fu_262_p1 - tmp_30_cast2_fu_214_p1);

assign tmp_17_fu_298_p2 = (tmp_cast_fu_294_p1 + tmp_15_reg_388);

assign tmp_18_fu_307_p1 = $unsigned(tmp_36_cast_fu_303_p1);

assign tmp_19_fu_312_p2 = (tmp_16_reg_393 + tmp_35_cast_fu_284_p1);

assign tmp_20_fu_321_p1 = $unsigned(tmp_39_cast_fu_317_p1);

assign tmp_23_fu_341_p2 = (output_r_q0 + tmp_22_reg_426);

assign tmp_27_cast_fu_184_p1 = out_w_reg_96;

assign tmp_28_cast_fu_193_p1 = $signed(tmp_12_fu_188_p2);

assign tmp_30_cast2_fu_214_p1 = k_h_reg_108;

assign tmp_35_cast_fu_284_p1 = k_w_reg_119;

assign tmp_36_cast_fu_303_p1 = $signed(tmp_17_fu_298_p2);

assign tmp_39_cast_fu_317_p1 = $signed(tmp_19_fu_312_p2);

assign tmp_cast_fu_294_p1 = tmp_fu_288_p2;

assign tmp_fu_288_p2 = (out_w_reg_96 + tmp_35_cast_fu_284_p1);

assign tmp_s_fu_166_p2 = (p_shl5_cast_fu_150_p1 - p_shl6_cast_fu_162_p1);

always @ (posedge ap_clk) begin
    tmp_s_reg_362[1:0] <= 2'b00;
    tmp_15_reg_388[0] <= 1'b0;
end

endmodule //depthwise_conv2d_fix
