// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2d_fix16_228 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        output_depth,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        Padding2D_3_array_address0,
        Padding2D_3_array_ce0,
        Padding2D_3_array_q0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_depth;
input  [15:0] input_height;
input  [15:0] input_width;
input  [15:0] output_depth;
input  [15:0] output_height;
input  [15:0] output_width;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
input  [15:0] output_r_q0;
output  [10:0] Padding2D_3_array_address0;
output   Padding2D_3_array_ce0;
input  [15:0] Padding2D_3_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;
reg Padding2D_3_array_ce0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] Conv2D_3_b_address0;
reg    Conv2D_3_b_ce0;
wire   [11:0] Conv2D_3_b_q0;
wire   [10:0] Conv2D_3_w_address0;
reg    Conv2D_3_w_ce0;
wire   [12:0] Conv2D_3_w_q0;
wire   [31:0] tmp_s_fu_249_p1;
reg   [31:0] tmp_s_reg_600;
wire   [31:0] tmp_101_fu_253_p1;
reg   [31:0] tmp_101_reg_605;
wire   [31:0] tmp_102_fu_257_p1;
reg   [31:0] tmp_102_reg_610;
wire   [31:0] tmp_103_fu_261_p1;
reg   [31:0] tmp_103_reg_615;
wire   [31:0] tmp_104_fu_265_p1;
reg   [31:0] tmp_104_reg_620;
wire   [31:0] next_mul6_fu_269_p2;
reg   [31:0] next_mul6_reg_625;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul3_fu_274_p2;
reg   [31:0] next_mul3_reg_630;
wire   [15:0] out_d_3_fu_284_p2;
reg   [15:0] out_d_3_reg_638;
wire   [0:0] exitcond5_fu_279_p2;
wire  signed [15:0] Conv2D_3_b_load_cast_fu_295_p1;
reg  signed [15:0] Conv2D_3_b_load_cast_reg_648;
wire    ap_CS_fsm_state3;
wire  signed [14:0] tmp_5_fu_299_p1;
reg  signed [14:0] tmp_5_reg_653;
wire   [15:0] out_h_3_fu_308_p2;
reg   [15:0] out_h_3_reg_661;
wire    ap_CS_fsm_state4;
wire  signed [31:0] tmp_fu_318_p2;
reg  signed [31:0] tmp_reg_666;
wire   [0:0] exitcond4_fu_303_p2;
wire   [16:0] tmp_109_cast_fu_324_p1;
reg   [16:0] tmp_109_cast_reg_671;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp1_fu_328_p2;
reg   [31:0] tmp1_reg_676;
wire   [15:0] out_w_3_fu_337_p2;
reg   [15:0] out_w_3_reg_684;
wire    ap_CS_fsm_state6;
wire   [16:0] tmp_110_cast_fu_347_p1;
reg   [16:0] tmp_110_cast_reg_689;
wire   [0:0] exitcond3_fu_332_p2;
reg   [11:0] output_addr11_reg_694;
wire   [31:0] next_mul_fu_361_p2;
reg   [31:0] next_mul_reg_699;
wire    ap_CS_fsm_state7;
wire   [15:0] in_d_1_fu_371_p2;
reg   [15:0] in_d_1_reg_707;
wire   [31:0] tmp6_fu_393_p2;
reg   [31:0] tmp6_reg_712;
wire   [0:0] exitcond2_fu_366_p2;
wire   [1:0] k_h_1_fu_405_p2;
reg   [1:0] k_h_1_reg_720;
wire    ap_CS_fsm_state8;
wire  signed [31:0] tmp2_fu_424_p2;
reg  signed [31:0] tmp2_reg_725;
wire   [0:0] exitcond1_fu_399_p2;
wire   [4:0] tmp_119_fu_446_p2;
reg   [4:0] tmp_119_reg_730;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp3_fu_452_p2;
reg   [31:0] tmp3_reg_735;
wire   [1:0] k_w_1_fu_462_p2;
reg   [1:0] k_w_1_reg_743;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond_fu_456_p2;
reg  signed [15:0] Padding2D_3_array_lo_reg_758;
wire    ap_CS_fsm_state11;
reg  signed [12:0] Conv2D_3_w_load_reg_763;
reg   [14:0] tmp_29_reg_768;
wire    ap_CS_fsm_state12;
wire   [14:0] p_tmp_s_fu_561_p3;
reg   [14:0] p_tmp_s_reg_773;
wire    ap_CS_fsm_state14;
reg   [15:0] out_d_reg_145;
reg   [31:0] phi_mul2_reg_156;
reg   [31:0] phi_mul5_reg_168;
reg   [15:0] out_h_reg_180;
reg   [15:0] out_w_reg_192;
wire    ap_CS_fsm_state15;
reg   [15:0] in_d_reg_203;
reg   [31:0] phi_mul_reg_214;
reg   [1:0] k_h_reg_226;
reg   [1:0] k_w_reg_238;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_108_fu_290_p1;
wire  signed [63:0] tmp_112_fu_356_p1;
wire  signed [63:0] tmp_121_fu_490_p1;
wire  signed [63:0] tmp_123_fu_509_p1;
wire   [15:0] tmp_126_fu_532_p2;
wire   [15:0] p_tmp_cast_fu_569_p1;
wire  signed [11:0] Conv2D_3_b_load_cast_fu_295_p0;
wire  signed [11:0] tmp_5_fu_299_p0;
wire   [31:0] tmp_109_fu_314_p1;
wire   [15:0] tmp1_fu_328_p1;
wire   [31:0] tmp_110_fu_343_p1;
wire   [31:0] tmp_111_fu_351_p2;
wire   [31:0] tmp_115_fu_377_p1;
wire   [31:0] tmp_117_fu_381_p2;
wire   [31:0] tmp_28_fu_387_p2;
wire   [16:0] tmp_119_cast3_fu_411_p1;
wire   [16:0] tmp4_fu_415_p2;
wire   [31:0] tmp4_cast_fu_420_p1;
wire   [3:0] p_shl2_fu_434_p3;
wire   [4:0] p_shl2_cast_fu_442_p1;
wire   [4:0] tmp_119_cast4_fu_430_p1;
wire   [15:0] tmp3_fu_452_p0;
wire   [16:0] tmp_121_cast_fu_472_p1;
wire   [16:0] tmp5_fu_476_p2;
wire   [31:0] tmp5_cast_fu_481_p1;
wire   [31:0] tmp_120_fu_485_p2;
wire   [4:0] tmp_121_cast8_fu_468_p1;
wire   [4:0] tmp7_fu_495_p2;
wire  signed [31:0] tmp7_cast_fu_500_p1;
wire   [31:0] tmp_122_fu_504_p2;
wire  signed [28:0] tmp_124_fu_573_p2;
wire  signed [15:0] tmp_125_fu_529_p1;
wire   [14:0] tmp_26_fu_539_p1;
wire   [15:0] tmp_113_fu_543_p2;
wire   [0:0] tmp_27_fu_553_p3;
wire   [14:0] tmp_113_cast_fu_548_p2;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

conv2d_fix16_228_Conv2D_3_b #(
    .DataWidth( 12 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Conv2D_3_b_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Conv2D_3_b_address0),
    .ce0(Conv2D_3_b_ce0),
    .q0(Conv2D_3_b_q0)
);

conv2d_fix16_228_Conv2D_3_w #(
    .DataWidth( 13 ),
    .AddressRange( 1152 ),
    .AddressWidth( 11 ))
Conv2D_3_w_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Conv2D_3_w_address0),
    .ce0(Conv2D_3_w_ce0),
    .q0(Conv2D_3_w_q0)
);

network_mul_mul_16s_13s_29_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
network_mul_mul_16s_13s_29_1_1_U81(
    .din0(Padding2D_3_array_lo_reg_758),
    .din1(Conv2D_3_w_load_reg_763),
    .dout(tmp_124_fu_573_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_399_p2 == 1'd1))) begin
        in_d_reg_203 <= in_d_1_reg_707;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_332_p2 == 1'd0))) begin
        in_d_reg_203 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond_fu_456_p2 == 1'd1))) begin
        k_h_reg_226 <= k_h_1_reg_720;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_366_p2 == 1'd0))) begin
        k_h_reg_226 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_w_reg_238 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        k_w_reg_238 <= k_w_1_reg_743;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_303_p2 == 1'd1))) begin
        out_d_reg_145 <= out_d_3_reg_638;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_d_reg_145 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_332_p2 == 1'd1))) begin
        out_h_reg_180 <= out_h_3_reg_661;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_180 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_reg_192 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        out_w_reg_192 <= out_w_3_reg_684;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_303_p2 == 1'd1))) begin
        phi_mul2_reg_156 <= next_mul3_reg_630;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul2_reg_156 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_303_p2 == 1'd1))) begin
        phi_mul5_reg_168 <= next_mul6_reg_625;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul5_reg_168 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_399_p2 == 1'd1))) begin
        phi_mul_reg_214 <= next_mul_reg_699;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_332_p2 == 1'd0))) begin
        phi_mul_reg_214 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Conv2D_3_b_load_cast_reg_648 <= Conv2D_3_b_load_cast_fu_295_p1;
        tmp_5_reg_653 <= tmp_5_fu_299_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        Conv2D_3_w_load_reg_763 <= Conv2D_3_w_q0;
        Padding2D_3_array_lo_reg_758 <= Padding2D_3_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        in_d_1_reg_707 <= in_d_1_fu_371_p2;
        next_mul_reg_699 <= next_mul_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_h_1_reg_720 <= k_h_1_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        k_w_1_reg_743 <= k_w_1_fu_462_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul3_reg_630 <= next_mul3_fu_274_p2;
        next_mul6_reg_625 <= next_mul6_fu_269_p2;
        out_d_3_reg_638 <= out_d_3_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_3_reg_661 <= out_h_3_fu_308_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_w_3_reg_684 <= out_w_3_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_332_p2 == 1'd0))) begin
        output_addr11_reg_694 <= tmp_112_fu_356_p1;
        tmp_110_cast_reg_689[15 : 0] <= tmp_110_cast_fu_347_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        p_tmp_s_reg_773 <= p_tmp_s_fu_561_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp1_reg_676 <= tmp1_fu_328_p2;
        tmp_109_cast_reg_671[15 : 0] <= tmp_109_cast_fu_324_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_399_p2 == 1'd0))) begin
        tmp2_reg_725 <= tmp2_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp3_reg_735 <= tmp3_fu_452_p2;
        tmp_119_reg_730 <= tmp_119_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_366_p2 == 1'd0))) begin
        tmp6_reg_712 <= tmp6_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_101_reg_605[15 : 0] <= tmp_101_fu_253_p1[15 : 0];
        tmp_102_reg_610[15 : 0] <= tmp_102_fu_257_p1[15 : 0];
        tmp_103_reg_615[15 : 0] <= tmp_103_fu_261_p1[15 : 0];
        tmp_104_reg_620[15 : 0] <= tmp_104_fu_265_p1[15 : 0];
        tmp_s_reg_600[15 : 0] <= tmp_s_fu_249_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_29_reg_768 <= {{tmp_124_fu_573_p2[28:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_303_p2 == 1'd0))) begin
        tmp_reg_666 <= tmp_fu_318_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        Conv2D_3_b_ce0 = 1'b1;
    end else begin
        Conv2D_3_b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Conv2D_3_w_ce0 = 1'b1;
    end else begin
        Conv2D_3_w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        Padding2D_3_array_ce0 = 1'b1;
    end else begin
        Padding2D_3_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_279_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_279_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_address0 = output_addr11_reg_694;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = tmp_112_fu_356_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_d0 = p_tmp_cast_fu_569_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        output_r_d0 = tmp_126_fu_532_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_332_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_279_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond4_fu_303_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_332_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond2_fu_366_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond1_fu_399_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond_fu_456_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Conv2D_3_b_address0 = tmp_108_fu_290_p1;

assign Conv2D_3_b_load_cast_fu_295_p0 = Conv2D_3_b_q0;

assign Conv2D_3_b_load_cast_fu_295_p1 = Conv2D_3_b_load_cast_fu_295_p0;

assign Conv2D_3_w_address0 = tmp_123_fu_509_p1;

assign Padding2D_3_array_address0 = tmp_121_fu_490_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_399_p2 = ((k_h_reg_226 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond2_fu_366_p2 = ((in_d_reg_203 == input_depth) ? 1'b1 : 1'b0);

assign exitcond3_fu_332_p2 = ((out_w_reg_192 == output_width) ? 1'b1 : 1'b0);

assign exitcond4_fu_303_p2 = ((out_h_reg_180 == output_height) ? 1'b1 : 1'b0);

assign exitcond5_fu_279_p2 = ((out_d_reg_145 == output_depth) ? 1'b1 : 1'b0);

assign exitcond_fu_456_p2 = ((k_w_reg_238 == 2'd3) ? 1'b1 : 1'b0);

assign in_d_1_fu_371_p2 = (in_d_reg_203 + 16'd1);

assign k_h_1_fu_405_p2 = (k_h_reg_226 + 2'd1);

assign k_w_1_fu_462_p2 = (k_w_reg_238 + 2'd1);

assign next_mul3_fu_274_p2 = (phi_mul2_reg_156 + tmp_s_reg_600);

assign next_mul6_fu_269_p2 = (phi_mul5_reg_168 + tmp_104_reg_620);

assign next_mul_fu_361_p2 = (phi_mul_reg_214 + tmp_102_reg_610);

assign out_d_3_fu_284_p2 = (out_d_reg_145 + 16'd1);

assign out_h_3_fu_308_p2 = (out_h_reg_180 + 16'd1);

assign out_w_3_fu_337_p2 = (out_w_reg_192 + 16'd1);

assign p_shl2_cast_fu_442_p1 = p_shl2_fu_434_p3;

assign p_shl2_fu_434_p3 = {{k_h_reg_226}, {2'd0}};

assign p_tmp_cast_fu_569_p1 = p_tmp_s_reg_773;

assign p_tmp_s_fu_561_p3 = ((tmp_27_fu_553_p3[0:0] === 1'b1) ? 15'd0 : tmp_113_cast_fu_548_p2);

assign tmp1_fu_328_p1 = tmp_101_reg_605;

assign tmp1_fu_328_p2 = ($signed(tmp_reg_666) * $signed({{1'b0}, {tmp1_fu_328_p1}}));

assign tmp2_fu_424_p2 = (phi_mul_reg_214 + tmp4_cast_fu_420_p1);

assign tmp3_fu_452_p0 = tmp_103_reg_615;

assign tmp3_fu_452_p2 = ($signed({{1'b0}, {tmp3_fu_452_p0}}) * $signed(tmp2_reg_725));

assign tmp4_cast_fu_420_p1 = tmp4_fu_415_p2;

assign tmp4_fu_415_p2 = (tmp_119_cast3_fu_411_p1 + tmp_109_cast_reg_671);

assign tmp5_cast_fu_481_p1 = tmp5_fu_476_p2;

assign tmp5_fu_476_p2 = (tmp_110_cast_reg_689 + tmp_121_cast_fu_472_p1);

assign tmp6_fu_393_p2 = (tmp_28_fu_387_p2 + tmp_117_fu_381_p2);

assign tmp7_cast_fu_500_p1 = $signed(tmp7_fu_495_p2);

assign tmp7_fu_495_p2 = (tmp_121_cast8_fu_468_p1 + tmp_119_reg_730);

assign tmp_101_fu_253_p1 = output_width;

assign tmp_102_fu_257_p1 = input_height;

assign tmp_103_fu_261_p1 = input_width;

assign tmp_104_fu_265_p1 = input_depth;

assign tmp_108_fu_290_p1 = out_d_reg_145;

assign tmp_109_cast_fu_324_p1 = out_h_reg_180;

assign tmp_109_fu_314_p1 = out_h_reg_180;

assign tmp_110_cast_fu_347_p1 = out_w_reg_192;

assign tmp_110_fu_343_p1 = out_w_reg_192;

assign tmp_111_fu_351_p2 = (tmp1_reg_676 + tmp_110_fu_343_p1);

assign tmp_112_fu_356_p1 = $signed(tmp_111_fu_351_p2);

assign tmp_113_cast_fu_548_p2 = ($signed(tmp_26_fu_539_p1) + $signed(tmp_5_reg_653));

assign tmp_113_fu_543_p2 = ($signed(Conv2D_3_b_load_cast_reg_648) + $signed(output_r_q0));

assign tmp_115_fu_377_p1 = in_d_reg_203;

assign tmp_117_fu_381_p2 = (phi_mul5_reg_168 + tmp_115_fu_377_p1);

assign tmp_119_cast3_fu_411_p1 = k_h_reg_226;

assign tmp_119_cast4_fu_430_p1 = k_h_reg_226;

assign tmp_119_fu_446_p2 = (p_shl2_cast_fu_442_p1 - tmp_119_cast4_fu_430_p1);

assign tmp_120_fu_485_p2 = (tmp3_reg_735 + tmp5_cast_fu_481_p1);

assign tmp_121_cast8_fu_468_p1 = k_w_reg_238;

assign tmp_121_cast_fu_472_p1 = k_w_reg_238;

assign tmp_121_fu_490_p1 = $signed(tmp_120_fu_485_p2);

assign tmp_122_fu_504_p2 = ($signed(tmp6_reg_712) + $signed(tmp7_cast_fu_500_p1));

assign tmp_123_fu_509_p1 = $signed(tmp_122_fu_504_p2);

assign tmp_125_fu_529_p1 = $signed(tmp_29_reg_768);

assign tmp_126_fu_532_p2 = ($signed(tmp_125_fu_529_p1) + $signed(output_r_q0));

assign tmp_26_fu_539_p1 = output_r_q0[14:0];

assign tmp_27_fu_553_p3 = tmp_113_fu_543_p2[32'd15];

assign tmp_28_fu_387_p2 = tmp_117_fu_381_p2 << 32'd3;

assign tmp_5_fu_299_p0 = Conv2D_3_b_q0;

assign tmp_5_fu_299_p1 = tmp_5_fu_299_p0;

assign tmp_fu_318_p2 = (phi_mul2_reg_156 + tmp_109_fu_314_p1);

assign tmp_s_fu_249_p1 = output_height;

always @ (posedge ap_clk) begin
    tmp_s_reg_600[31:16] <= 16'b0000000000000000;
    tmp_101_reg_605[31:16] <= 16'b0000000000000000;
    tmp_102_reg_610[31:16] <= 16'b0000000000000000;
    tmp_103_reg_615[31:16] <= 16'b0000000000000000;
    tmp_104_reg_620[31:16] <= 16'b0000000000000000;
    tmp_109_cast_reg_671[16] <= 1'b0;
    tmp_110_cast_reg_689[16] <= 1'b0;
end

endmodule //conv2d_fix16_228
