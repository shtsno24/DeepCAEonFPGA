// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module up_sampling2d_fix16_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        output_depth,
        output_height,
        output_width,
        Conv2D_2_array_address0,
        Conv2D_2_array_ce0,
        Conv2D_2_array_q0,
        UpSampling2D_0_array_address0,
        UpSampling2D_0_array_ce0,
        UpSampling2D_0_array_we0,
        UpSampling2D_0_array_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_height;
input  [15:0] input_width;
input  [15:0] output_depth;
input  [15:0] output_height;
input  [15:0] output_width;
output  [8:0] Conv2D_2_array_address0;
output   Conv2D_2_array_ce0;
input  [15:0] Conv2D_2_array_q0;
output  [10:0] UpSampling2D_0_array_address0;
output   UpSampling2D_0_array_ce0;
output   UpSampling2D_0_array_we0;
output  [15:0] UpSampling2D_0_array_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Conv2D_2_array_ce0;
reg UpSampling2D_0_array_ce0;
reg UpSampling2D_0_array_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_1_fu_144_p1;
reg   [31:0] tmp_1_reg_293;
wire   [31:0] tmp_2_fu_148_p1;
reg   [31:0] tmp_2_reg_298;
wire   [31:0] tmp_3_fu_152_p1;
reg   [31:0] tmp_3_reg_303;
wire   [31:0] tmp_4_fu_156_p1;
reg   [31:0] tmp_4_reg_308;
wire   [31:0] next_mul3_fu_160_p2;
reg   [31:0] next_mul3_reg_313;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul_fu_165_p2;
reg   [31:0] next_mul_reg_318;
wire   [15:0] out_d_1_fu_175_p2;
reg   [15:0] out_d_1_reg_326;
wire   [15:0] out_h_1_fu_186_p2;
reg   [15:0] out_h_1_reg_334;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_fu_210_p2;
reg  signed [31:0] tmp_reg_339;
wire   [0:0] exitcond2_fu_181_p2;
wire  signed [31:0] tmp2_fu_216_p2;
reg  signed [31:0] tmp2_reg_344;
wire   [31:0] tmp1_fu_222_p2;
reg   [31:0] tmp1_reg_349;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp3_fu_226_p2;
reg   [31:0] tmp3_reg_354;
wire   [15:0] out_w_1_fu_235_p2;
reg   [15:0] out_w_1_reg_362;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_230_p2;
wire   [31:0] tmp_10_fu_269_p2;
reg   [31:0] tmp_10_reg_372;
reg   [15:0] out_d_reg_87;
reg   [31:0] phi_mul_reg_98;
reg   [31:0] phi_mul2_reg_110;
reg   [15:0] out_h_reg_122;
wire   [0:0] exitcond3_fu_170_p2;
reg   [15:0] out_w_reg_133;
wire    ap_CS_fsm_state6;
wire  signed [63:0] tmp_6_fu_260_p1;
wire  signed [63:0] tmp_11_fu_274_p1;
wire   [14:0] div_fu_192_p4;
wire   [31:0] tmp_9_fu_202_p1;
wire   [31:0] tmp_s_fu_206_p1;
wire   [15:0] tmp1_fu_222_p0;
wire   [15:0] tmp3_fu_226_p0;
wire   [14:0] div1_fu_241_p4;
wire   [31:0] tmp_8_fu_251_p1;
wire   [31:0] tmp_5_fu_255_p2;
wire   [31:0] tmp_7_fu_265_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_d_reg_87 <= out_d_1_reg_326;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_reg_87 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_h_reg_122 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_230_p2 == 1'd1))) begin
        out_h_reg_122 <= out_h_1_reg_334;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_reg_133 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        out_w_reg_133 <= out_w_1_reg_362;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul2_reg_110 <= next_mul3_reg_313;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_110 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_98 <= next_mul_reg_318;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_98 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        next_mul3_reg_313 <= next_mul3_fu_160_p2;
        next_mul_reg_318 <= next_mul_fu_165_p2;
        out_d_1_reg_326 <= out_d_1_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_1_reg_334 <= out_h_1_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_1_reg_362 <= out_w_1_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp1_reg_349 <= tmp1_fu_222_p2;
        tmp3_reg_354 <= tmp3_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_181_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp2_reg_344 <= tmp2_fu_216_p2;
        tmp_reg_339 <= tmp_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_10_reg_372 <= tmp_10_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_1_reg_293[15 : 0] <= tmp_1_fu_144_p1[15 : 0];
        tmp_2_reg_298[15 : 0] <= tmp_2_fu_148_p1[15 : 0];
        tmp_3_reg_303[15 : 0] <= tmp_3_fu_152_p1[15 : 0];
        tmp_4_reg_308[15 : 0] <= tmp_4_fu_156_p1[15 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Conv2D_2_array_ce0 = 1'b1;
    end else begin
        Conv2D_2_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        UpSampling2D_0_array_ce0 = 1'b1;
    end else begin
        UpSampling2D_0_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        UpSampling2D_0_array_we0 = 1'b1;
    end else begin
        UpSampling2D_0_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_170_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_170_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_170_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond2_fu_181_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_230_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Conv2D_2_array_address0 = tmp_6_fu_260_p1;

assign UpSampling2D_0_array_address0 = tmp_11_fu_274_p1;

assign UpSampling2D_0_array_d0 = Conv2D_2_array_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign div1_fu_241_p4 = {{out_w_reg_133[15:1]}};

assign div_fu_192_p4 = {{out_h_reg_122[15:1]}};

assign exitcond2_fu_181_p2 = ((out_h_reg_122 == output_height) ? 1'b1 : 1'b0);

assign exitcond3_fu_170_p2 = ((out_d_reg_87 == output_depth) ? 1'b1 : 1'b0);

assign exitcond_fu_230_p2 = ((out_w_reg_133 == output_width) ? 1'b1 : 1'b0);

assign next_mul3_fu_160_p2 = (phi_mul2_reg_110 + tmp_3_reg_303);

assign next_mul_fu_165_p2 = (phi_mul_reg_98 + tmp_1_reg_293);

assign out_d_1_fu_175_p2 = (out_d_reg_87 + 16'd1);

assign out_h_1_fu_186_p2 = (out_h_reg_122 + 16'd1);

assign out_w_1_fu_235_p2 = (out_w_reg_133 + 16'd1);

assign tmp1_fu_222_p0 = tmp_2_reg_298;

assign tmp1_fu_222_p2 = ($signed({{1'b0}, {tmp1_fu_222_p0}}) * $signed(tmp_reg_339));

assign tmp2_fu_216_p2 = (tmp_s_fu_206_p1 + phi_mul2_reg_110);

assign tmp3_fu_226_p0 = tmp_4_reg_308;

assign tmp3_fu_226_p2 = ($signed({{1'b0}, {tmp3_fu_226_p0}}) * $signed(tmp2_reg_344));

assign tmp_10_fu_269_p2 = (tmp_7_fu_265_p1 + tmp3_reg_354);

assign tmp_11_fu_274_p1 = $signed(tmp_10_reg_372);

assign tmp_1_fu_144_p1 = input_height;

assign tmp_2_fu_148_p1 = input_width;

assign tmp_3_fu_152_p1 = output_height;

assign tmp_4_fu_156_p1 = output_width;

assign tmp_5_fu_255_p2 = (tmp_8_fu_251_p1 + tmp1_reg_349);

assign tmp_6_fu_260_p1 = $signed(tmp_5_fu_255_p2);

assign tmp_7_fu_265_p1 = out_w_reg_133;

assign tmp_8_fu_251_p1 = div1_fu_241_p4;

assign tmp_9_fu_202_p1 = div_fu_192_p4;

assign tmp_fu_210_p2 = (tmp_9_fu_202_p1 + phi_mul_reg_98);

assign tmp_s_fu_206_p1 = out_h_reg_122;

always @ (posedge ap_clk) begin
    tmp_1_reg_293[31:16] <= 16'b0000000000000000;
    tmp_2_reg_298[31:16] <= 16'b0000000000000000;
    tmp_3_reg_303[31:16] <= 16'b0000000000000000;
    tmp_4_reg_308[31:16] <= 16'b0000000000000000;
end

endmodule //up_sampling2d_fix16_1
