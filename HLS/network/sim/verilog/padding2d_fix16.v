// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] tmp_1_fu_216_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] height_1_fu_233_p2;
reg   [4:0] height_1_reg_340;
wire    ap_CS_fsm_state3;
wire   [9:0] tmp_2_fu_239_p2;
reg   [9:0] tmp_2_reg_345;
wire   [0:0] exitcond7_fu_227_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_fu_245_p2;
wire   [9:0] tmp_7_fu_256_p2;
reg   [9:0] tmp_7_reg_358;
wire   [9:0] tmp_4_fu_262_p2;
reg   [9:0] tmp_4_reg_363;
wire   [9:0] o_count_8_fu_273_p2;
wire    ap_CS_fsm_state5;
wire   [9:0] o_count_9_fu_290_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond9_fu_279_p2;
wire   [9:0] indvars_iv_next5_fu_296_p2;
wire   [9:0] indvars_iv_next8_fu_302_p2;
wire   [8:0] o_count_7_fu_323_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond3_fu_312_p2;
reg   [4:0] o_count_1_reg_98;
wire   [0:0] exitcond2_fu_210_p2;
reg   [9:0] indvars_iv7_reg_109;
reg   [9:0] o_count_6_reg_121;
reg   [9:0] o_count_2_reg_133;
reg   [9:0] i_count_1_reg_145;
reg   [4:0] height_reg_157;
reg   [9:0] o_count_3_reg_168;
reg   [9:0] i_count_2_reg_179;
reg   [9:0] o_count_4_reg_189;
reg  signed [8:0] o_count_5_reg_199;
wire   [63:0] tmp_s_fu_222_p1;
wire   [63:0] tmp_5_fu_251_p1;
wire   [63:0] tmp_6_fu_268_p1;
wire   [63:0] tmp_8_fu_285_p1;
wire   [63:0] tmp_3_fu_318_p1;
wire  signed [9:0] o_count_5_cast5_fu_308_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        height_reg_157 <= 5'd0;
    end else if (((exitcond9_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        height_reg_157 <= height_1_reg_340;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_count_1_reg_145 <= 10'd0;
    end else if (((exitcond9_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_count_1_reg_145 <= tmp_2_reg_345;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_count_2_reg_179 <= tmp_7_reg_358;
    end else if (((exitcond7_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_count_2_reg_179 <= i_count_1_reg_145;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv7_reg_109 <= 10'd61;
    end else if (((exitcond9_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvars_iv7_reg_109 <= indvars_iv_next8_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        o_count_1_reg_98 <= 5'd0;
    end else if (((exitcond2_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        o_count_1_reg_98 <= tmp_1_fu_216_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        o_count_2_reg_133 <= 10'd31;
    end else if (((exitcond9_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        o_count_2_reg_133 <= tmp_4_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        o_count_3_reg_168 <= o_count_8_fu_273_p2;
    end else if (((exitcond7_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        o_count_3_reg_168 <= o_count_2_reg_133;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        o_count_4_reg_189 <= o_count_9_fu_290_p2;
    end else if (((exitcond_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        o_count_4_reg_189 <= o_count_6_reg_121;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        o_count_5_reg_199 <= 9'd359;
    end else if (((exitcond3_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        o_count_5_reg_199 <= o_count_7_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        o_count_6_reg_121 <= 10'd59;
    end else if (((exitcond9_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        o_count_6_reg_121 <= indvars_iv_next5_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        height_1_reg_340 <= height_1_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_2_reg_345 <= tmp_2_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_4_reg_363 <= tmp_4_fu_262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_7_reg_358 <= tmp_7_fu_256_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond3_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_3_fu_318_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = tmp_8_fu_285_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_6_fu_268_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = tmp_s_fu_222_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((exitcond9_fu_279_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((exitcond2_fu_210_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((exitcond3_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_210_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond7_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond9_fu_279_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((exitcond3_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign exitcond2_fu_210_p2 = ((o_count_1_reg_98 == 5'd31) ? 1'b1 : 1'b0);

assign exitcond3_fu_312_p2 = ((o_count_5_reg_199 == 9'd388) ? 1'b1 : 1'b0);

assign exitcond7_fu_227_p2 = ((height_reg_157 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond9_fu_279_p2 = ((o_count_4_reg_189 == indvars_iv7_reg_109) ? 1'b1 : 1'b0);

assign exitcond_fu_245_p2 = ((o_count_3_reg_168 == o_count_6_reg_121) ? 1'b1 : 1'b0);

assign height_1_fu_233_p2 = (height_reg_157 + 5'd1);

assign indvars_iv_next5_fu_296_p2 = (o_count_6_reg_121 + 10'd30);

assign indvars_iv_next8_fu_302_p2 = (indvars_iv7_reg_109 + 10'd30);

assign input_r_address0 = tmp_5_fu_251_p1;

assign o_count_5_cast5_fu_308_p1 = o_count_5_reg_199;

assign o_count_7_fu_323_p2 = ($signed(o_count_5_reg_199) + $signed(9'd1));

assign o_count_8_fu_273_p2 = (o_count_3_reg_168 + 10'd1);

assign o_count_9_fu_290_p2 = (o_count_4_reg_189 + 10'd1);

assign tmp_1_fu_216_p2 = (o_count_1_reg_98 + 5'd1);

assign tmp_2_fu_239_p2 = (i_count_1_reg_145 + 10'd28);

assign tmp_3_fu_318_p1 = $unsigned(o_count_5_cast5_fu_308_p1);

assign tmp_4_fu_262_p2 = (o_count_2_reg_133 + 10'd30);

assign tmp_5_fu_251_p1 = i_count_2_reg_179;

assign tmp_6_fu_268_p1 = o_count_3_reg_168;

assign tmp_7_fu_256_p2 = (i_count_2_reg_179 + 10'd1);

assign tmp_8_fu_285_p1 = o_count_4_reg_189;

assign tmp_s_fu_222_p1 = o_count_1_reg_98;

endmodule //padding2d_fix16
