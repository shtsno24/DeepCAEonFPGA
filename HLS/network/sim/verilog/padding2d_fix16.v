// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [6:0] input_height_cast3_fu_318_p1;
reg  signed [6:0] input_height_cast3_reg_687;
wire   [4:0] tmp_21_fu_322_p1;
reg   [4:0] tmp_21_reg_692;
wire   [4:0] tmp_fu_326_p2;
reg   [4:0] tmp_reg_699;
wire   [11:0] tmp_29_fu_340_p2;
reg   [11:0] tmp_29_reg_704;
wire   [9:0] tmp_22_fu_346_p1;
reg   [9:0] tmp_22_reg_709;
wire   [4:0] tmp_24_fu_350_p1;
reg   [4:0] tmp_24_reg_715;
wire   [13:0] tmp_cast_fu_357_p1;
reg   [13:0] tmp_cast_reg_720;
wire    ap_CS_fsm_state2;
wire   [13:0] input_width_cast2_fu_360_p1;
reg   [13:0] input_width_cast2_reg_727;
wire   [13:0] tmp_s_fu_367_p2;
reg   [13:0] tmp_s_reg_732;
wire   [15:0] tmp_41_cast1_fu_373_p1;
reg   [15:0] tmp_41_cast1_reg_737;
wire   [4:0] tmp_30_fu_376_p2;
wire   [15:0] tmp_42_cast9_fu_381_p1;
reg   [15:0] tmp_42_cast9_reg_747;
wire   [13:0] tmp_42_cast_fu_393_p1;
wire   [15:0] tmp_43_cast6_fu_402_p1;
reg   [15:0] tmp_43_cast6_reg_757;
wire   [13:0] tmp_45_cast_fu_421_p1;
reg   [13:0] tmp_45_cast_reg_762;
wire   [13:0] tmp_46_cast_fu_430_p1;
wire   [13:0] tmp_51_cast_fu_449_p1;
wire   [4:0] tmp_5_fu_463_p2;
wire   [4:0] tmp_6_fu_469_p2;
reg   [4:0] tmp_6_reg_783;
wire   [5:0] tmp_25_fu_475_p1;
reg   [5:0] tmp_25_reg_789;
wire   [13:0] p_cast_fu_490_p1;
reg   [13:0] p_cast_reg_794;
wire   [4:0] depth_1_fu_503_p2;
reg   [4:0] depth_1_reg_802;
wire    ap_CS_fsm_state3;
wire   [15:0] tmp_37_fu_524_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond2_fu_513_p2;
wire   [13:0] i_count_3_fu_530_p2;
reg   [13:0] i_count_3_reg_815;
wire   [15:0] tmp_35_fu_540_p2;
reg   [15:0] tmp_35_reg_820;
wire   [4:0] height_1_fu_554_p2;
reg   [4:0] height_1_reg_829;
wire    ap_CS_fsm_state5;
wire   [13:0] tmp_39_fu_560_p2;
reg   [13:0] tmp_39_reg_834;
wire   [0:0] exitcond7_fu_549_p2;
wire   [15:0] tmp_38_fu_565_p2;
reg   [15:0] tmp_38_reg_839;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_569_p2;
wire   [13:0] tmp_44_fu_580_p2;
reg   [13:0] tmp_44_reg_852;
wire   [13:0] tmp_41_fu_586_p2;
reg   [13:0] tmp_41_reg_857;
wire   [13:0] o_count_8_fu_596_p2;
wire    ap_CS_fsm_state7;
wire   [13:0] o_count_9_fu_613_p2;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond5_fu_602_p2;
wire   [13:0] indvars_iv_next5_fu_619_p2;
wire   [13:0] indvars_iv_next4_fu_624_p2;
wire   [15:0] o_count_7_fu_644_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond8_fu_633_p2;
wire   [13:0] indvars_iv_next_fu_650_p2;
wire   [13:0] indvars_iv_next1_fu_655_p2;
wire   [13:0] indvars_iv_next2_fu_660_p2;
wire   [4:0] indvars_iv_next6_fu_665_p2;
wire   [4:0] indvars_iv_next3_fu_670_p2;
reg   [4:0] indvars_iv9_reg_128;
reg   [4:0] indvars_iv4_reg_138;
reg   [13:0] indvars_iv1_reg_148;
reg   [13:0] indvars_iv_reg_158;
reg   [13:0] indvars_iv2_reg_168;
reg   [15:0] o_count_reg_178;
reg   [13:0] i_count_reg_190;
reg   [4:0] depth_reg_202;
reg   [15:0] o_count_1_reg_213;
wire   [0:0] exitcond1_fu_498_p2;
reg   [13:0] indvars_iv3_reg_223;
reg   [13:0] o_count_6_reg_234;
reg   [13:0] o_count_2_reg_245;
reg   [13:0] i_count_1_reg_256;
reg   [4:0] height_reg_267;
reg   [13:0] o_count_3_reg_278;
reg   [13:0] i_count_2_reg_289;
reg   [13:0] o_count_4_reg_299;
reg   [15:0] o_count_5_reg_309;
wire   [63:0] tmp_36_fu_519_p1;
wire   [63:0] tmp_42_fu_575_p1;
wire   [63:0] tmp_43_fu_591_p1;
wire   [63:0] tmp_45_fu_608_p1;
wire   [63:0] tmp_40_fu_639_p1;
wire  signed [5:0] input_height_cast3_fu_318_p0;
wire  signed [5:0] tmp_21_fu_322_p0;
wire   [4:0] tmp_29_fu_340_p0;
wire   [6:0] tmp_29_fu_340_p1;
wire  signed [5:0] input_width_cast_fu_354_p0;
wire  signed [6:0] input_width_cast_fu_354_p1;
wire   [6:0] tmp_s_fu_367_p0;
wire   [6:0] tmp_s_fu_367_p1;
wire   [4:0] tmp_31_fu_397_p2;
wire   [9:0] tmp_42_cast7_fu_389_p1;
wire   [9:0] tmp1_fu_410_p2;
wire   [9:0] tmp_43_cast_fu_406_p1;
wire   [9:0] tmp_32_fu_415_p2;
wire   [5:0] tmp_42_cast8_fu_385_p1;
wire  signed [5:0] tmp_33_fu_425_p1;
wire   [5:0] tmp_33_fu_425_p2;
wire  signed [5:0] tmp_23_fu_434_p0;
wire   [5:0] tmp_23_fu_434_p2;
wire   [5:0] tmp_34_fu_443_p2;
wire   [4:0] tmp_3_fu_453_p2;
wire   [4:0] tmp_4_fu_458_p2;
wire   [9:0] tmp_50_cast_fu_439_p1;
wire   [9:0] tmp3_fu_479_p2;
wire   [9:0] tmp_18_fu_484_p2;
wire   [5:0] depth_cast_fu_494_p1;
wire   [4:0] tmp_26_fu_509_p1;
wire   [15:0] tmp2_fu_535_p2;
wire   [5:0] height_cast_fu_545_p1;
wire  signed [5:0] exitcond7_fu_549_p1;
wire   [4:0] tmp_27_fu_629_p1;
reg   [8:0] ap_NS_fsm;
wire   [11:0] tmp_29_fu_340_p00;
wire   [11:0] tmp_29_fu_340_p10;
wire   [13:0] tmp_s_fu_367_p00;
wire   [13:0] tmp_s_fu_367_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_reg_202 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
        depth_reg_202 <= depth_1_reg_802;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd1))) begin
        height_reg_267 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_602_p2 == 1'd1))) begin
        height_reg_267 <= height_1_reg_829;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd1))) begin
        i_count_1_reg_256 <= i_count_reg_190;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_602_p2 == 1'd1))) begin
        i_count_1_reg_256 <= tmp_39_reg_834;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_count_2_reg_289 <= tmp_44_reg_852;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_549_p2 == 1'd0))) begin
        i_count_2_reg_289 <= i_count_1_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_count_reg_190 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
        i_count_reg_190 <= i_count_3_reg_815;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv1_reg_148 <= tmp_51_cast_fu_449_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
        indvars_iv1_reg_148 <= indvars_iv_next2_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv2_reg_168 <= tmp_42_cast_fu_393_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
        indvars_iv2_reg_168 <= indvars_iv_next_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd1))) begin
        indvars_iv3_reg_223 <= indvars_iv1_reg_148;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_602_p2 == 1'd1))) begin
        indvars_iv3_reg_223 <= indvars_iv_next4_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv4_reg_138 <= tmp_5_fu_463_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
        indvars_iv4_reg_138 <= indvars_iv_next6_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv9_reg_128 <= tmp_30_fu_376_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
        indvars_iv9_reg_128 <= indvars_iv_next3_fu_670_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvars_iv_reg_158 <= tmp_46_cast_fu_430_p1;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
        indvars_iv_reg_158 <= indvars_iv_next1_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_498_p2 == 1'd0))) begin
        o_count_1_reg_213 <= o_count_reg_178;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd0))) begin
        o_count_1_reg_213 <= tmp_37_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd1))) begin
        o_count_2_reg_245 <= indvars_iv2_reg_168;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_602_p2 == 1'd1))) begin
        o_count_2_reg_245 <= tmp_41_reg_857;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        o_count_3_reg_278 <= o_count_8_fu_596_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_549_p2 == 1'd0))) begin
        o_count_3_reg_278 <= o_count_2_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_602_p2 == 1'd0))) begin
        o_count_4_reg_299 <= o_count_9_fu_613_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_569_p2 == 1'd1))) begin
        o_count_4_reg_299 <= o_count_6_reg_234;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd0))) begin
        o_count_5_reg_309 <= o_count_7_fu_644_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_549_p2 == 1'd1))) begin
        o_count_5_reg_309 <= tmp_35_reg_820;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd1))) begin
        o_count_6_reg_234 <= indvars_iv_reg_158;
    end else if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_602_p2 == 1'd1))) begin
        o_count_6_reg_234 <= indvars_iv_next5_fu_619_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        o_count_reg_178 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
        o_count_reg_178 <= tmp_38_reg_839;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_1_reg_802 <= depth_1_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        height_1_reg_829 <= height_1_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd1))) begin
        i_count_3_reg_815 <= i_count_3_fu_530_p2;
        tmp_35_reg_820 <= tmp_35_fu_540_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        input_height_cast3_reg_687 <= input_height_cast3_fu_318_p1;
        tmp_21_reg_692 <= tmp_21_fu_322_p1;
        tmp_22_reg_709 <= tmp_22_fu_346_p1;
        tmp_24_reg_715 <= tmp_24_fu_350_p1;
        tmp_29_reg_704 <= tmp_29_fu_340_p2;
        tmp_reg_699 <= tmp_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_width_cast2_reg_727[6 : 0] <= input_width_cast2_fu_360_p1[6 : 0];
        p_cast_reg_794[9 : 0] <= p_cast_fu_490_p1[9 : 0];
        tmp_25_reg_789 <= tmp_25_fu_475_p1;
        tmp_41_cast1_reg_737[11 : 0] <= tmp_41_cast1_fu_373_p1[11 : 0];
        tmp_42_cast9_reg_747[4 : 0] <= tmp_42_cast9_fu_381_p1[4 : 0];
        tmp_43_cast6_reg_757[4 : 0] <= tmp_43_cast6_fu_402_p1[4 : 0];
        tmp_45_cast_reg_762[9 : 0] <= tmp_45_cast_fu_421_p1[9 : 0];
        tmp_6_reg_783 <= tmp_6_fu_469_p2;
        tmp_cast_reg_720[4 : 0] <= tmp_cast_fu_357_p1[4 : 0];
        tmp_s_reg_732 <= tmp_s_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_549_p2 == 1'd1))) begin
        tmp_38_reg_839 <= tmp_38_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_549_p2 == 1'd0))) begin
        tmp_39_reg_834 <= tmp_39_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_569_p2 == 1'd1))) begin
        tmp_41_reg_857 <= tmp_41_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_569_p2 == 1'd0))) begin
        tmp_44_reg_852 <= tmp_44_fu_580_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_498_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_498_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_40_fu_639_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_45_fu_608_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_address0 = tmp_43_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        output_r_address0 = tmp_36_fu_519_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_602_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_fu_498_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_513_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond7_fu_549_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_569_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (exitcond5_fu_602_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond8_fu_633_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_1_fu_503_p2 = (depth_reg_202 + 5'd1);

assign depth_cast_fu_494_p1 = depth_reg_202;

assign exitcond1_fu_498_p2 = ((depth_cast_fu_494_p1 == tmp_25_reg_789) ? 1'b1 : 1'b0);

assign exitcond2_fu_513_p2 = ((tmp_26_fu_509_p1 == indvars_iv9_reg_128) ? 1'b1 : 1'b0);

assign exitcond5_fu_602_p2 = ((o_count_4_reg_299 == indvars_iv3_reg_223) ? 1'b1 : 1'b0);

assign exitcond7_fu_549_p1 = input_height;

assign exitcond7_fu_549_p2 = ((height_cast_fu_545_p1 == exitcond7_fu_549_p1) ? 1'b1 : 1'b0);

assign exitcond8_fu_633_p2 = ((tmp_27_fu_629_p1 == indvars_iv4_reg_138) ? 1'b1 : 1'b0);

assign exitcond_fu_569_p2 = ((o_count_3_reg_278 == o_count_6_reg_234) ? 1'b1 : 1'b0);

assign height_1_fu_554_p2 = (height_reg_267 + 5'd1);

assign height_cast_fu_545_p1 = height_reg_267;

assign i_count_3_fu_530_p2 = (tmp_s_reg_732 + i_count_reg_190);

assign indvars_iv_next1_fu_655_p2 = (tmp_45_cast_reg_762 + indvars_iv_reg_158);

assign indvars_iv_next2_fu_660_p2 = (indvars_iv1_reg_148 + p_cast_reg_794);

assign indvars_iv_next3_fu_670_p2 = (tmp_6_reg_783 + indvars_iv9_reg_128);

assign indvars_iv_next4_fu_624_p2 = (tmp_cast_reg_720 + indvars_iv3_reg_223);

assign indvars_iv_next5_fu_619_p2 = (tmp_cast_reg_720 + o_count_6_reg_234);

assign indvars_iv_next6_fu_665_p2 = (tmp_6_reg_783 + indvars_iv4_reg_138);

assign indvars_iv_next_fu_650_p2 = (tmp_45_cast_reg_762 + indvars_iv2_reg_168);

assign input_height_cast3_fu_318_p0 = input_height;

assign input_height_cast3_fu_318_p1 = input_height_cast3_fu_318_p0;

assign input_r_address0 = tmp_42_fu_575_p1;

assign input_width_cast2_fu_360_p1 = $unsigned(input_width_cast_fu_354_p1);

assign input_width_cast_fu_354_p0 = input_width;

assign input_width_cast_fu_354_p1 = input_width_cast_fu_354_p0;

assign o_count_7_fu_644_p2 = (o_count_5_reg_309 + 16'd1);

assign o_count_8_fu_596_p2 = (o_count_3_reg_278 + 14'd1);

assign o_count_9_fu_613_p2 = (o_count_4_reg_299 + 14'd1);

assign p_cast_fu_490_p1 = tmp_18_fu_484_p2;

assign tmp1_fu_410_p2 = (tmp_42_cast7_fu_389_p1 + tmp_22_reg_709);

assign tmp2_fu_535_p2 = (tmp_42_cast9_reg_747 + o_count_reg_178);

assign tmp3_fu_479_p2 = (10'd4 + tmp_22_reg_709);

assign tmp_18_fu_484_p2 = (tmp_50_cast_fu_439_p1 + tmp3_fu_479_p2);

assign tmp_21_fu_322_p0 = input_width;

assign tmp_21_fu_322_p1 = tmp_21_fu_322_p0[4:0];

assign tmp_22_fu_346_p1 = tmp_29_fu_340_p2[9:0];

assign tmp_23_fu_434_p0 = input_width;

assign tmp_23_fu_434_p2 = tmp_23_fu_434_p0 << 6'd1;

assign tmp_24_fu_350_p1 = tmp_29_fu_340_p2[4:0];

assign tmp_25_fu_475_p1 = input_depth[5:0];

assign tmp_26_fu_509_p1 = o_count_1_reg_213[4:0];

assign tmp_27_fu_629_p1 = o_count_5_reg_309[4:0];

assign tmp_29_fu_340_p0 = tmp_29_fu_340_p00;

assign tmp_29_fu_340_p00 = tmp_fu_326_p2;

assign tmp_29_fu_340_p1 = tmp_29_fu_340_p10;

assign tmp_29_fu_340_p10 = $unsigned(input_height_cast3_fu_318_p1);

assign tmp_29_fu_340_p2 = (tmp_29_fu_340_p0 * tmp_29_fu_340_p1);

assign tmp_30_fu_376_p2 = (5'd3 + tmp_21_reg_692);

assign tmp_31_fu_397_p2 = (5'd1 + tmp_21_reg_692);

assign tmp_32_fu_415_p2 = (tmp1_fu_410_p2 + tmp_43_cast_fu_406_p1);

assign tmp_33_fu_425_p1 = input_width;

assign tmp_33_fu_425_p2 = ($signed(tmp_42_cast8_fu_385_p1) + $signed(tmp_33_fu_425_p1));

assign tmp_34_fu_443_p2 = (6'd5 + tmp_23_fu_434_p2);

assign tmp_35_fu_540_p2 = (tmp2_fu_535_p2 + tmp_41_cast1_reg_737);

assign tmp_36_fu_519_p1 = o_count_1_reg_213;

assign tmp_37_fu_524_p2 = (o_count_1_reg_213 + 16'd1);

assign tmp_38_fu_565_p2 = (tmp_35_reg_820 + tmp_43_cast6_reg_757);

assign tmp_39_fu_560_p2 = (input_width_cast2_reg_727 + i_count_1_reg_256);

assign tmp_3_fu_453_p2 = (tmp_24_reg_715 + tmp_30_fu_376_p2);

assign tmp_40_fu_639_p1 = o_count_5_reg_309;

assign tmp_41_cast1_fu_373_p1 = tmp_29_reg_704;

assign tmp_41_fu_586_p2 = (tmp_cast_reg_720 + o_count_2_reg_245);

assign tmp_42_cast7_fu_389_p1 = tmp_30_fu_376_p2;

assign tmp_42_cast8_fu_385_p1 = tmp_30_fu_376_p2;

assign tmp_42_cast9_fu_381_p1 = tmp_30_fu_376_p2;

assign tmp_42_cast_fu_393_p1 = tmp_30_fu_376_p2;

assign tmp_42_fu_575_p1 = i_count_2_reg_289;

assign tmp_43_cast6_fu_402_p1 = tmp_31_fu_397_p2;

assign tmp_43_cast_fu_406_p1 = tmp_31_fu_397_p2;

assign tmp_43_fu_591_p1 = o_count_3_reg_278;

assign tmp_44_fu_580_p2 = (i_count_2_reg_289 + 14'd1);

assign tmp_45_cast_fu_421_p1 = tmp_32_fu_415_p2;

assign tmp_45_fu_608_p1 = o_count_4_reg_299;

assign tmp_46_cast_fu_430_p1 = tmp_33_fu_425_p2;

assign tmp_4_fu_458_p2 = (tmp_21_reg_692 + tmp_3_fu_453_p2);

assign tmp_50_cast_fu_439_p1 = tmp_23_fu_434_p2;

assign tmp_51_cast_fu_449_p1 = tmp_34_fu_443_p2;

assign tmp_5_fu_463_p2 = (5'd1 + tmp_4_fu_458_p2);

assign tmp_6_fu_469_p2 = (tmp_3_fu_453_p2 + tmp_31_fu_397_p2);

assign tmp_cast_fu_357_p1 = tmp_reg_699;

assign tmp_fu_326_p2 = (5'd2 + tmp_21_fu_322_p1);

assign tmp_s_fu_367_p0 = tmp_s_fu_367_p00;

assign tmp_s_fu_367_p00 = $unsigned(input_width_cast_fu_354_p1);

assign tmp_s_fu_367_p1 = tmp_s_fu_367_p10;

assign tmp_s_fu_367_p10 = $unsigned(input_height_cast3_reg_687);

assign tmp_s_fu_367_p2 = (tmp_s_fu_367_p0 * tmp_s_fu_367_p1);

always @ (posedge ap_clk) begin
    tmp_cast_reg_720[13:5] <= 9'b000000000;
    input_width_cast2_reg_727[13:7] <= 7'b0000000;
    tmp_41_cast1_reg_737[15:12] <= 4'b0000;
    tmp_42_cast9_reg_747[15:5] <= 11'b00000000000;
    tmp_43_cast6_reg_757[15:5] <= 11'b00000000000;
    tmp_45_cast_reg_762[13:10] <= 4'b0000;
    p_cast_reg_794[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
