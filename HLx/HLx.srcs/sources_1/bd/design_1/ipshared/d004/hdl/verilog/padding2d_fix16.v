// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_depth;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] tmp_28_fu_327_p1;
reg   [4:0] tmp_28_reg_685;
wire   [4:0] tmp_fu_331_p2;
reg   [4:0] tmp_reg_692;
wire    ap_CS_fsm_state2;
wire  signed [6:0] input_height_cast3_fu_337_p1;
reg  signed [6:0] input_height_cast3_reg_703;
wire   [11:0] tmp_30_fu_348_p2;
reg   [11:0] tmp_30_reg_708;
wire   [9:0] tmp_29_fu_354_p1;
reg   [9:0] tmp_29_reg_713;
wire   [4:0] tmp_31_fu_358_p2;
reg   [4:0] tmp_31_reg_719;
wire   [4:0] tmp_6_fu_367_p2;
reg   [4:0] tmp_6_reg_728;
wire   [13:0] tmp_cast_fu_376_p1;
reg   [13:0] tmp_cast_reg_734;
wire    ap_CS_fsm_state3;
wire   [13:0] input_width_cast2_fu_379_p1;
reg   [13:0] input_width_cast2_reg_741;
wire   [13:0] tmp_s_fu_386_p2;
reg   [13:0] tmp_s_reg_746;
wire   [15:0] tmp_39_cast1_fu_392_p1;
reg   [15:0] tmp_39_cast1_reg_751;
wire   [15:0] tmp_40_cast9_fu_395_p1;
reg   [15:0] tmp_40_cast9_reg_756;
wire   [13:0] tmp_40_cast_fu_404_p1;
wire   [15:0] tmp_41_cast6_fu_412_p1;
reg   [15:0] tmp_41_cast6_reg_766;
wire   [13:0] tmp_43_cast_fu_431_p1;
reg   [13:0] tmp_43_cast_reg_771;
wire   [13:0] tmp_44_cast_fu_440_p1;
wire   [13:0] tmp_49_cast_fu_459_p1;
wire   [4:0] tmp_8_fu_467_p2;
wire   [4:0] tmp_9_fu_473_p2;
reg   [4:0] tmp_9_reg_792;
wire   [5:0] tmp_38_fu_478_p1;
reg   [5:0] tmp_38_reg_798;
wire   [13:0] p_cast_fu_493_p1;
reg   [13:0] p_cast_reg_803;
wire   [4:0] depth_1_fu_506_p2;
reg   [4:0] depth_1_reg_811;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_41_fu_527_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_516_p2;
wire   [13:0] i_count_3_fu_533_p2;
reg   [13:0] i_count_3_reg_824;
wire   [15:0] tmp_39_fu_543_p2;
reg   [15:0] tmp_39_reg_829;
wire   [4:0] height_1_fu_557_p2;
reg   [4:0] height_1_reg_838;
wire    ap_CS_fsm_state6;
wire   [13:0] tmp_43_fu_563_p2;
reg   [13:0] tmp_43_reg_843;
wire   [0:0] exitcond7_fu_552_p2;
wire   [15:0] tmp_42_fu_568_p2;
reg   [15:0] tmp_42_reg_848;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_572_p2;
wire   [13:0] tmp_48_fu_583_p2;
reg   [13:0] tmp_48_reg_861;
wire   [13:0] tmp_45_fu_589_p2;
reg   [13:0] tmp_45_reg_866;
reg   [15:0] input_load_reg_871;
wire    ap_CS_fsm_state8;
wire   [13:0] o_count_8_fu_599_p2;
wire    ap_CS_fsm_state9;
wire   [13:0] o_count_9_fu_616_p2;
wire    ap_CS_fsm_state10;
wire   [0:0] exitcond5_fu_605_p2;
wire   [13:0] indvars_iv_next5_fu_622_p2;
wire   [13:0] indvars_iv_next4_fu_627_p2;
wire   [15:0] o_count_7_fu_647_p2;
wire    ap_CS_fsm_state11;
wire   [0:0] exitcond8_fu_636_p2;
wire   [13:0] indvars_iv_next_fu_653_p2;
wire   [13:0] indvars_iv_next1_fu_658_p2;
wire   [13:0] indvars_iv_next2_fu_663_p2;
wire   [4:0] indvars_iv_next6_fu_668_p2;
wire   [4:0] indvars_iv_next3_fu_673_p2;
reg   [4:0] indvars_iv9_reg_137;
reg   [4:0] indvars_iv4_reg_147;
reg   [13:0] indvars_iv1_reg_157;
reg   [13:0] indvars_iv_reg_167;
reg   [13:0] indvars_iv2_reg_177;
reg   [15:0] o_count_reg_187;
reg   [13:0] i_count_reg_199;
reg   [4:0] depth_reg_211;
reg   [15:0] o_count_1_reg_222;
wire   [0:0] exitcond1_fu_501_p2;
reg   [13:0] indvars_iv3_reg_232;
reg   [13:0] o_count_6_reg_243;
reg   [13:0] o_count_2_reg_254;
reg   [13:0] i_count_1_reg_265;
reg   [4:0] height_reg_276;
reg   [13:0] o_count_3_reg_287;
reg   [13:0] i_count_2_reg_298;
reg   [13:0] o_count_4_reg_308;
reg   [15:0] o_count_5_reg_318;
wire   [63:0] tmp_40_fu_522_p1;
wire   [63:0] tmp_46_fu_578_p1;
wire   [63:0] tmp_47_fu_594_p1;
wire   [63:0] tmp_49_fu_611_p1;
wire   [63:0] tmp_44_fu_642_p1;
wire  signed [5:0] tmp_28_fu_327_p0;
wire  signed [5:0] input_height_cast3_fu_337_p0;
wire   [4:0] tmp_30_fu_348_p0;
wire   [6:0] tmp_30_fu_348_p1;
wire   [4:0] tmp_37_fu_363_p1;
wire  signed [5:0] input_width_cast_fu_373_p0;
wire  signed [6:0] input_width_cast_fu_373_p1;
wire   [6:0] tmp_s_fu_386_p0;
wire   [6:0] tmp_s_fu_386_p1;
wire   [4:0] tmp_32_fu_407_p2;
wire   [9:0] tmp_40_cast7_fu_401_p1;
wire   [9:0] tmp1_fu_420_p2;
wire   [9:0] tmp_41_cast_fu_416_p1;
wire   [9:0] tmp_33_fu_425_p2;
wire   [5:0] tmp_40_cast8_fu_398_p1;
wire  signed [5:0] tmp_34_fu_435_p1;
wire   [5:0] tmp_34_fu_435_p2;
wire  signed [5:0] tmp_35_fu_444_p0;
wire   [5:0] tmp_35_fu_444_p2;
wire   [5:0] tmp_36_fu_453_p2;
wire   [4:0] tmp_7_fu_463_p2;
wire   [9:0] tmp_48_cast_fu_449_p1;
wire   [9:0] tmp3_fu_482_p2;
wire   [9:0] tmp_3_fu_487_p2;
wire   [5:0] depth_cast_fu_497_p1;
wire   [4:0] tmp_50_fu_512_p1;
wire   [15:0] tmp2_fu_538_p2;
wire   [5:0] height_cast_fu_548_p1;
wire  signed [5:0] exitcond7_fu_552_p1;
wire   [4:0] tmp_51_fu_632_p1;
reg   [10:0] ap_NS_fsm;
wire   [11:0] tmp_30_fu_348_p00;
wire   [11:0] tmp_30_fu_348_p10;
wire   [13:0] tmp_s_fu_386_p00;
wire   [13:0] tmp_s_fu_386_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        depth_reg_211 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
        depth_reg_211 <= depth_1_reg_811;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd1))) begin
        height_reg_276 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond5_fu_605_p2 == 1'd1))) begin
        height_reg_276 <= height_1_reg_838;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd1))) begin
        i_count_1_reg_265 <= i_count_reg_199;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond5_fu_605_p2 == 1'd1))) begin
        i_count_1_reg_265 <= tmp_43_reg_843;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_count_2_reg_298 <= tmp_48_reg_861;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond7_fu_552_p2 == 1'd0))) begin
        i_count_2_reg_298 <= i_count_1_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_count_reg_199 <= 14'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
        i_count_reg_199 <= i_count_3_reg_824;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv1_reg_157 <= tmp_49_cast_fu_459_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
        indvars_iv1_reg_157 <= indvars_iv_next2_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv2_reg_177 <= tmp_40_cast_fu_404_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
        indvars_iv2_reg_177 <= indvars_iv_next_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd1))) begin
        indvars_iv3_reg_232 <= indvars_iv1_reg_157;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond5_fu_605_p2 == 1'd1))) begin
        indvars_iv3_reg_232 <= indvars_iv_next4_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv4_reg_147 <= tmp_8_fu_467_p2;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
        indvars_iv4_reg_147 <= indvars_iv_next6_fu_668_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv9_reg_137 <= tmp_31_reg_719;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
        indvars_iv9_reg_137 <= indvars_iv_next3_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv_reg_167 <= tmp_44_cast_fu_440_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
        indvars_iv_reg_167 <= indvars_iv_next1_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_501_p2 == 1'd0))) begin
        o_count_1_reg_222 <= o_count_reg_187;
    end else if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd0))) begin
        o_count_1_reg_222 <= tmp_41_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd1))) begin
        o_count_2_reg_254 <= indvars_iv2_reg_177;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond5_fu_605_p2 == 1'd1))) begin
        o_count_2_reg_254 <= tmp_45_reg_866;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        o_count_3_reg_287 <= o_count_8_fu_599_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond7_fu_552_p2 == 1'd0))) begin
        o_count_3_reg_287 <= o_count_2_reg_254;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond5_fu_605_p2 == 1'd0))) begin
        o_count_4_reg_308 <= o_count_9_fu_616_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_572_p2 == 1'd1))) begin
        o_count_4_reg_308 <= o_count_6_reg_243;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd0))) begin
        o_count_5_reg_318 <= o_count_7_fu_647_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond7_fu_552_p2 == 1'd1))) begin
        o_count_5_reg_318 <= tmp_39_reg_829;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd1))) begin
        o_count_6_reg_243 <= indvars_iv_reg_167;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond5_fu_605_p2 == 1'd1))) begin
        o_count_6_reg_243 <= indvars_iv_next5_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        o_count_reg_187 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
        o_count_reg_187 <= tmp_42_reg_848;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        depth_1_reg_811 <= depth_1_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        height_1_reg_838 <= height_1_fu_557_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd1))) begin
        i_count_3_reg_824 <= i_count_3_fu_533_p2;
        tmp_39_reg_829 <= tmp_39_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_height_cast3_reg_703 <= input_height_cast3_fu_337_p1;
        tmp_29_reg_713 <= tmp_29_fu_354_p1;
        tmp_30_reg_708 <= tmp_30_fu_348_p2;
        tmp_31_reg_719 <= tmp_31_fu_358_p2;
        tmp_6_reg_728 <= tmp_6_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_load_reg_871 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_width_cast2_reg_741[6 : 0] <= input_width_cast2_fu_379_p1[6 : 0];
        p_cast_reg_803[9 : 0] <= p_cast_fu_493_p1[9 : 0];
        tmp_38_reg_798 <= tmp_38_fu_478_p1;
        tmp_39_cast1_reg_751[11 : 0] <= tmp_39_cast1_fu_392_p1[11 : 0];
        tmp_40_cast9_reg_756[4 : 0] <= tmp_40_cast9_fu_395_p1[4 : 0];
        tmp_41_cast6_reg_766[4 : 0] <= tmp_41_cast6_fu_412_p1[4 : 0];
        tmp_43_cast_reg_771[9 : 0] <= tmp_43_cast_fu_431_p1[9 : 0];
        tmp_9_reg_792 <= tmp_9_fu_473_p2;
        tmp_cast_reg_734[4 : 0] <= tmp_cast_fu_376_p1[4 : 0];
        tmp_s_reg_746 <= tmp_s_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_28_reg_685 <= tmp_28_fu_327_p1;
        tmp_reg_692 <= tmp_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond7_fu_552_p2 == 1'd1))) begin
        tmp_42_reg_848 <= tmp_42_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond7_fu_552_p2 == 1'd0))) begin
        tmp_43_reg_843 <= tmp_43_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_572_p2 == 1'd1))) begin
        tmp_45_reg_866 <= tmp_45_fu_589_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_572_p2 == 1'd0))) begin
        tmp_48_reg_861 <= tmp_48_fu_583_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_501_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_501_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = tmp_44_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_address0 = tmp_49_fu_611_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_47_fu_594_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_address0 = tmp_40_fu_522_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_d0 = input_load_reg_871;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state10) & (exitcond5_fu_605_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_501_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_516_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond7_fu_552_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_572_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond5_fu_605_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond8_fu_636_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_1_fu_506_p2 = (depth_reg_211 + 5'd1);

assign depth_cast_fu_497_p1 = depth_reg_211;

assign exitcond1_fu_501_p2 = ((depth_cast_fu_497_p1 == tmp_38_reg_798) ? 1'b1 : 1'b0);

assign exitcond2_fu_516_p2 = ((tmp_50_fu_512_p1 == indvars_iv9_reg_137) ? 1'b1 : 1'b0);

assign exitcond5_fu_605_p2 = ((o_count_4_reg_308 == indvars_iv3_reg_232) ? 1'b1 : 1'b0);

assign exitcond7_fu_552_p1 = input_height;

assign exitcond7_fu_552_p2 = ((height_cast_fu_548_p1 == exitcond7_fu_552_p1) ? 1'b1 : 1'b0);

assign exitcond8_fu_636_p2 = ((tmp_51_fu_632_p1 == indvars_iv4_reg_147) ? 1'b1 : 1'b0);

assign exitcond_fu_572_p2 = ((o_count_3_reg_287 == o_count_6_reg_243) ? 1'b1 : 1'b0);

assign height_1_fu_557_p2 = (height_reg_276 + 5'd1);

assign height_cast_fu_548_p1 = height_reg_276;

assign i_count_3_fu_533_p2 = (tmp_s_reg_746 + i_count_reg_199);

assign indvars_iv_next1_fu_658_p2 = (tmp_43_cast_reg_771 + indvars_iv_reg_167);

assign indvars_iv_next2_fu_663_p2 = (indvars_iv1_reg_157 + p_cast_reg_803);

assign indvars_iv_next3_fu_673_p2 = (tmp_9_reg_792 + indvars_iv9_reg_137);

assign indvars_iv_next4_fu_627_p2 = (tmp_cast_reg_734 + indvars_iv3_reg_232);

assign indvars_iv_next5_fu_622_p2 = (tmp_cast_reg_734 + o_count_6_reg_243);

assign indvars_iv_next6_fu_668_p2 = (tmp_9_reg_792 + indvars_iv4_reg_147);

assign indvars_iv_next_fu_653_p2 = (tmp_43_cast_reg_771 + indvars_iv2_reg_177);

assign input_height_cast3_fu_337_p0 = input_height;

assign input_height_cast3_fu_337_p1 = input_height_cast3_fu_337_p0;

assign input_r_address0 = tmp_46_fu_578_p1;

assign input_width_cast2_fu_379_p1 = $unsigned(input_width_cast_fu_373_p1);

assign input_width_cast_fu_373_p0 = input_width;

assign input_width_cast_fu_373_p1 = input_width_cast_fu_373_p0;

assign o_count_7_fu_647_p2 = (o_count_5_reg_318 + 16'd1);

assign o_count_8_fu_599_p2 = (o_count_3_reg_287 + 14'd1);

assign o_count_9_fu_616_p2 = (o_count_4_reg_308 + 14'd1);

assign p_cast_fu_493_p1 = tmp_3_fu_487_p2;

assign tmp1_fu_420_p2 = (tmp_40_cast7_fu_401_p1 + tmp_29_reg_713);

assign tmp2_fu_538_p2 = (tmp_40_cast9_reg_756 + o_count_reg_187);

assign tmp3_fu_482_p2 = (10'd4 + tmp_29_reg_713);

assign tmp_28_fu_327_p0 = input_width;

assign tmp_28_fu_327_p1 = tmp_28_fu_327_p0[4:0];

assign tmp_29_fu_354_p1 = tmp_30_fu_348_p2[9:0];

assign tmp_30_fu_348_p0 = tmp_30_fu_348_p00;

assign tmp_30_fu_348_p00 = tmp_reg_692;

assign tmp_30_fu_348_p1 = tmp_30_fu_348_p10;

assign tmp_30_fu_348_p10 = $unsigned(input_height_cast3_fu_337_p1);

assign tmp_30_fu_348_p2 = (tmp_30_fu_348_p0 * tmp_30_fu_348_p1);

assign tmp_31_fu_358_p2 = (5'd3 + tmp_28_reg_685);

assign tmp_32_fu_407_p2 = (5'd1 + tmp_28_reg_685);

assign tmp_33_fu_425_p2 = (tmp1_fu_420_p2 + tmp_41_cast_fu_416_p1);

assign tmp_34_fu_435_p1 = input_width;

assign tmp_34_fu_435_p2 = ($signed(tmp_40_cast8_fu_398_p1) + $signed(tmp_34_fu_435_p1));

assign tmp_35_fu_444_p0 = input_width;

assign tmp_35_fu_444_p2 = tmp_35_fu_444_p0 << 6'd1;

assign tmp_36_fu_453_p2 = (6'd5 + tmp_35_fu_444_p2);

assign tmp_37_fu_363_p1 = tmp_30_fu_348_p2[4:0];

assign tmp_38_fu_478_p1 = input_depth[5:0];

assign tmp_39_cast1_fu_392_p1 = tmp_30_reg_708;

assign tmp_39_fu_543_p2 = (tmp2_fu_538_p2 + tmp_39_cast1_reg_751);

assign tmp_3_fu_487_p2 = (tmp_48_cast_fu_449_p1 + tmp3_fu_482_p2);

assign tmp_40_cast7_fu_401_p1 = tmp_31_reg_719;

assign tmp_40_cast8_fu_398_p1 = tmp_31_reg_719;

assign tmp_40_cast9_fu_395_p1 = tmp_31_reg_719;

assign tmp_40_cast_fu_404_p1 = tmp_31_reg_719;

assign tmp_40_fu_522_p1 = o_count_1_reg_222;

assign tmp_41_cast6_fu_412_p1 = tmp_32_fu_407_p2;

assign tmp_41_cast_fu_416_p1 = tmp_32_fu_407_p2;

assign tmp_41_fu_527_p2 = (o_count_1_reg_222 + 16'd1);

assign tmp_42_fu_568_p2 = (tmp_39_reg_829 + tmp_41_cast6_reg_766);

assign tmp_43_cast_fu_431_p1 = tmp_33_fu_425_p2;

assign tmp_43_fu_563_p2 = (input_width_cast2_reg_741 + i_count_1_reg_265);

assign tmp_44_cast_fu_440_p1 = tmp_34_fu_435_p2;

assign tmp_44_fu_642_p1 = o_count_5_reg_318;

assign tmp_45_fu_589_p2 = (tmp_cast_reg_734 + o_count_2_reg_254);

assign tmp_46_fu_578_p1 = i_count_2_reg_298;

assign tmp_47_fu_594_p1 = o_count_3_reg_287;

assign tmp_48_cast_fu_449_p1 = tmp_35_fu_444_p2;

assign tmp_48_fu_583_p2 = (i_count_2_reg_298 + 14'd1);

assign tmp_49_cast_fu_459_p1 = tmp_36_fu_453_p2;

assign tmp_49_fu_611_p1 = o_count_4_reg_308;

assign tmp_50_fu_512_p1 = o_count_1_reg_222[4:0];

assign tmp_51_fu_632_p1 = o_count_5_reg_318[4:0];

assign tmp_6_fu_367_p2 = (tmp_37_fu_363_p1 + tmp_31_fu_358_p2);

assign tmp_7_fu_463_p2 = (tmp_28_reg_685 + tmp_6_reg_728);

assign tmp_8_fu_467_p2 = (5'd1 + tmp_7_fu_463_p2);

assign tmp_9_fu_473_p2 = (tmp_6_reg_728 + tmp_32_fu_407_p2);

assign tmp_cast_fu_376_p1 = tmp_reg_692;

assign tmp_fu_331_p2 = (5'd2 + tmp_28_fu_327_p1);

assign tmp_s_fu_386_p0 = tmp_s_fu_386_p00;

assign tmp_s_fu_386_p00 = $unsigned(input_width_cast_fu_373_p1);

assign tmp_s_fu_386_p1 = tmp_s_fu_386_p10;

assign tmp_s_fu_386_p10 = $unsigned(input_height_cast3_reg_703);

assign tmp_s_fu_386_p2 = (tmp_s_fu_386_p0 * tmp_s_fu_386_p1);

always @ (posedge ap_clk) begin
    tmp_cast_reg_734[13:5] <= 9'b000000000;
    input_width_cast2_reg_741[13:7] <= 7'b0000000;
    tmp_39_cast1_reg_751[15:12] <= 4'b0000;
    tmp_40_cast9_reg_756[15:5] <= 11'b00000000000;
    tmp_41_cast6_reg_766[15:5] <= 11'b00000000000;
    tmp_43_cast_reg_771[13:10] <= 4'b0000;
    p_cast_reg_803[13:10] <= 4'b0000;
end

endmodule //padding2d_fix16
