// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state15 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] SeparableConv2D_0_w_s_address0;
reg    SeparableConv2D_0_w_s_ce0;
wire   [14:0] SeparableConv2D_0_w_s_q0;
reg   [3:0] SeparableConv2D_0_w_s_address1;
reg    SeparableConv2D_0_w_s_ce1;
wire   [14:0] SeparableConv2D_0_w_s_q1;
reg   [9:0] indvar_flatten80_reg_265;
reg   [0:0] out_d_0_reg_276;
reg   [9:0] indvar_flatten_reg_288;
reg   [4:0] out_h_0_reg_300;
reg   [4:0] out_w_0_reg_312;
reg  signed [15:0] reg_324;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [0:0] icmp_ln24_reg_1376;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln24_reg_1376_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg  signed [15:0] reg_329;
wire   [63:0] zext_ln27_1_fu_334_p1;
reg   [63:0] zext_ln27_1_reg_1329;
wire   [0:0] out_d_fu_338_p2;
reg   [0:0] out_d_reg_1335;
wire   [63:0] zext_ln27_2_fu_344_p1;
reg   [63:0] zext_ln27_2_reg_1345;
wire   [2:0] select_ln27_fu_348_p3;
reg   [2:0] select_ln27_reg_1351;
wire   [10:0] tmp10_0_0_fu_384_p2;
reg   [10:0] tmp10_0_0_reg_1356;
wire   [10:0] tmp10_1_0_fu_420_p2;
reg   [10:0] tmp10_1_0_reg_1361;
wire   [9:0] tmp10_2_0_fu_452_p2;
reg   [9:0] tmp10_2_0_reg_1366;
wire   [10:0] tmp12_fu_488_p2;
reg   [10:0] tmp12_reg_1371;
wire   [0:0] icmp_ln24_fu_494_p2;
reg   [0:0] icmp_ln24_reg_1376_pp0_iter2_reg;
wire   [9:0] add_ln24_fu_500_p2;
reg   [9:0] add_ln24_reg_1380;
wire   [0:0] icmp_ln32_fu_506_p2;
reg   [0:0] icmp_ln32_reg_1385;
wire   [4:0] select_ln24_fu_512_p3;
reg   [4:0] select_ln24_reg_1405;
wire   [0:0] xor_ln24_2_fu_536_p2;
reg   [0:0] xor_ln24_2_reg_1422;
wire   [0:0] and_ln24_fu_553_p2;
reg   [0:0] and_ln24_reg_1428;
wire   [4:0] out_h_fu_559_p2;
reg   [4:0] out_h_reg_1437;
wire   [4:0] out_w_0_mid2_fu_570_p3;
reg   [4:0] out_w_0_mid2_reg_1445;
reg  signed [14:0] SeparableConv2D_0_w_2_reg_1453;
reg  signed [14:0] SeparableConv2D_0_w_4_reg_1458;
wire  signed [1:0] select_ln24_17_fu_593_p3;
reg  signed [1:0] select_ln24_17_reg_1463;
wire   [0:0] select_ln24_23_fu_613_p3;
reg   [0:0] select_ln24_23_reg_1478;
wire   [10:0] tmp10_0_0_mid2_fu_663_p3;
reg   [10:0] tmp10_0_0_mid2_reg_1483;
wire   [10:0] tmp10_1_0_mid2_fu_705_p3;
reg   [10:0] tmp10_1_0_mid2_reg_1488;
wire   [4:0] tmp11_mid1_fu_712_p2;
reg   [4:0] tmp11_mid1_reg_1495;
wire   [10:0] zext_ln40_1_fu_717_p1;
reg   [10:0] zext_ln40_1_reg_1501;
wire   [10:0] add_ln40_fu_720_p2;
reg   [10:0] add_ln40_reg_1507;
wire   [4:0] out_w_fu_726_p2;
reg   [4:0] out_w_reg_1512;
wire   [10:0] zext_ln40_12_fu_731_p1;
reg   [10:0] zext_ln40_12_reg_1518;
wire   [10:0] add_ln40_3_fu_735_p2;
reg   [10:0] add_ln40_3_reg_1523;
reg  signed [14:0] SeparableConv2D_0_w_6_reg_1528;
reg  signed [14:0] SeparableConv2D_0_w_8_reg_1533;
wire   [4:0] add_ln40_4_fu_876_p2;
reg   [4:0] add_ln40_4_reg_1558;
wire   [10:0] add_ln40_5_fu_885_p2;
reg   [10:0] add_ln40_5_reg_1563;
wire   [10:0] add_ln40_6_fu_890_p2;
reg   [10:0] add_ln40_6_reg_1568;
wire   [10:0] add_ln40_7_fu_894_p2;
reg   [10:0] add_ln40_7_reg_1573;
wire   [10:0] add_ln40_8_fu_898_p2;
reg   [10:0] add_ln40_8_reg_1578;
wire   [10:0] add_ln48_fu_903_p2;
reg   [10:0] add_ln48_reg_1583;
reg   [10:0] add_ln48_reg_1583_pp0_iter1_reg;
reg  signed [14:0] SeparableConv2D_0_w_10_reg_1588;
reg  signed [14:0] SeparableConv2D_0_w_12_reg_1593;
wire   [9:0] tmp10_2_0_mid2_fu_961_p3;
reg   [9:0] tmp10_2_0_mid2_reg_1608;
wire   [4:0] select_ln32_fu_968_p3;
reg   [4:0] select_ln32_reg_1615;
wire   [9:0] select_ln32_15_fu_995_p3;
reg   [9:0] select_ln32_15_reg_1630;
reg  signed [14:0] SeparableConv2D_0_w_14_reg_1635;
reg  signed [14:0] SeparableConv2D_0_w_16_reg_1640;
wire  signed [29:0] mul_ln40_fu_1275_p2;
reg  signed [29:0] mul_ln40_reg_1650;
wire  signed [29:0] mul_ln40_1_fu_1281_p2;
reg  signed [29:0] mul_ln40_1_reg_1655;
wire   [9:0] add_ln40_9_fu_1068_p2;
reg   [9:0] add_ln40_9_reg_1670;
wire   [9:0] add_ln40_10_fu_1073_p2;
reg   [9:0] add_ln40_10_reg_1675;
wire   [9:0] add_ln40_11_fu_1078_p2;
reg   [9:0] add_ln40_11_reg_1680;
reg  signed [14:0] SeparableConv2D_0_w_18_reg_1685;
wire  signed [29:0] mul_ln40_2_fu_1287_p2;
reg  signed [29:0] mul_ln40_2_reg_1690;
wire  signed [29:0] mul_ln40_3_fu_1293_p2;
reg  signed [29:0] mul_ln40_3_reg_1695;
wire   [15:0] add_ln48_1_fu_1123_p2;
reg   [15:0] add_ln48_1_reg_1710;
wire  signed [29:0] mul_ln40_4_fu_1299_p2;
reg  signed [29:0] mul_ln40_4_reg_1715;
wire  signed [29:0] mul_ln40_5_fu_1305_p2;
reg  signed [29:0] mul_ln40_5_reg_1720;
wire   [15:0] add_ln48_3_fu_1171_p2;
reg   [15:0] add_ln48_3_reg_1730;
wire  signed [29:0] mul_ln40_6_fu_1311_p2;
reg  signed [29:0] mul_ln40_6_reg_1735;
wire  signed [29:0] mul_ln40_7_fu_1317_p2;
reg  signed [29:0] mul_ln40_7_reg_1740;
wire   [15:0] add_ln48_4_fu_1208_p2;
reg   [15:0] add_ln48_4_reg_1745;
reg   [15:0] trunc_ln48_6_reg_1750;
reg   [15:0] trunc_ln48_7_reg_1755;
wire  signed [29:0] mul_ln40_8_fu_1323_p2;
reg  signed [29:0] mul_ln40_8_reg_1760;
wire   [15:0] add_ln48_6_fu_1253_p2;
reg   [15:0] add_ln48_6_reg_1765;
wire   [15:0] add_ln48_8_fu_1262_p2;
reg   [15:0] add_ln48_8_reg_1770;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [9:0] ap_phi_mux_indvar_flatten80_phi_fu_269_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_out_d_0_phi_fu_280_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_292_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_304_p4;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_316_p4;
wire    ap_block_pp0_stage1;
wire   [63:0] select_ln24_15_fu_519_p3;
wire   [63:0] select_ln24_16_fu_525_p3;
wire   [63:0] zext_ln24_fu_600_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] select_ln24_18_fu_605_p3;
wire   [63:0] zext_ln24_19_fu_763_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln24_22_fu_782_p1;
wire   [63:0] zext_ln40_2_fu_863_p1;
wire   [63:0] zext_ln40_3_fu_871_p1;
wire   [63:0] zext_ln24_20_fu_911_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] select_ln24_21_fu_916_p3;
wire   [63:0] zext_ln40_4_fu_976_p1;
wire   [63:0] zext_ln40_5_fu_984_p1;
wire   [63:0] zext_ln24_21_fu_1030_p1;
wire   [63:0] zext_ln40_6_fu_1055_p1;
wire   [63:0] zext_ln40_7_fu_1063_p1;
wire   [63:0] zext_ln40_8_fu_1115_p1;
wire   [63:0] zext_ln40_9_fu_1119_p1;
wire   [63:0] zext_ln40_10_fu_1161_p1;
wire   [63:0] zext_ln48_fu_1270_p1;
wire   [9:0] p_shl_fu_360_p3;
wire   [5:0] p_shl1_fu_372_p3;
wire   [10:0] p_shl19_cast_fu_368_p1;
wire   [10:0] p_shl20_cast_fu_380_p1;
wire   [4:0] tmp_1_0_fu_390_p2;
wire   [9:0] p_shl2_fu_396_p3;
wire   [5:0] p_shl3_fu_408_p3;
wire   [10:0] p_shl17_cast_fu_404_p1;
wire   [10:0] p_shl18_cast_fu_416_p1;
wire   [4:0] tmp_2_0_fu_426_p2;
wire   [5:0] p_shl5_fu_440_p3;
wire   [9:0] p_shl4_fu_432_p3;
wire   [9:0] p_shl16_cast_fu_448_p1;
wire   [4:0] zext_ln48_1_fu_356_p1;
wire   [4:0] tmp11_fu_458_p2;
wire   [9:0] p_shl6_fu_464_p3;
wire   [6:0] p_shl7_fu_476_p3;
wire   [10:0] p_shl13_cast_fu_472_p1;
wire   [10:0] p_shl14_cast_fu_484_p1;
wire   [0:0] xor_ln24_1_fu_531_p2;
wire   [0:0] icmp_ln33_fu_547_p2;
wire   [0:0] xor_ln24_fu_542_p2;
wire   [0:0] empty_63_fu_565_p2;
wire   [1:0] or_ln27_mid1_fu_578_p3;
wire   [1:0] or_ln_fu_585_p3;
wire   [9:0] p_shl19_mid1_fu_635_p3;
wire   [5:0] p_shl20_mid1_fu_646_p3;
wire   [10:0] p_shl19_cast_mid1_fu_642_p1;
wire   [10:0] p_shl20_cast_mid1_fu_653_p1;
wire   [10:0] tmp10_0_0_mid1_fu_657_p2;
wire   [10:0] select_ln24_24_fu_623_p3;
wire   [4:0] tmp_1_0_mid1_fu_670_p2;
wire   [9:0] p_shl17_mid1_fu_675_p3;
wire   [5:0] p_shl18_mid1_fu_687_p3;
wire   [10:0] p_shl17_cast_mid1_fu_683_p1;
wire   [10:0] p_shl18_cast_mid1_fu_695_p1;
wire   [10:0] tmp10_1_0_mid1_fu_699_p2;
wire   [10:0] select_ln24_25_fu_629_p3;
wire   [4:0] zext_ln24_23_fu_619_p1;
wire   [2:0] or_ln27_1_mid1_fu_741_p3;
wire   [2:0] or_ln27_s_fu_748_p3;
wire   [2:0] select_ln24_19_fu_756_p3;
wire   [2:0] select_ln27_1_fu_768_p3;
wire   [2:0] select_ln24_20_fu_776_p3;
wire   [5:0] tmp_fu_787_p3;
wire   [2:0] tmp_3_fu_798_p3;
wire   [6:0] p_shl13_cast_mid170_c_fu_794_p1;
wire   [6:0] p_shl14_cast_mid174_c_fu_805_p1;
wire   [6:0] tmp12_mid176_fu_809_p2;
wire  signed [10:0] tmp12_mid176_cast_fu_815_p1;
wire   [9:0] p_shl13_mid1_fu_825_p3;
wire   [6:0] p_shl14_mid1_fu_836_p3;
wire   [10:0] p_shl13_cast_mid1_fu_832_p1;
wire   [10:0] p_shl14_cast_mid1_fu_843_p1;
wire   [10:0] tmp12_mid1_fu_847_p2;
wire   [10:0] select_ln24_27_fu_819_p3;
wire  signed [31:0] sext_ln40_1_fu_860_p1;
wire  signed [31:0] sext_ln40_3_fu_868_p1;
wire   [10:0] zext_ln40_14_fu_881_p1;
wire   [10:0] tmp12_mid2_fu_853_p3;
wire  signed [2:0] sext_ln24_20_fu_908_p1;
wire   [4:0] tmp_2_0_mid1_fu_930_p2;
wire   [5:0] p_shl16_mid1_fu_943_p3;
wire   [9:0] p_shl15_mid1_fu_935_p3;
wire   [9:0] p_shl16_cast_mid1_fu_951_p1;
wire   [9:0] tmp10_2_0_mid1_fu_955_p2;
wire   [9:0] select_ln24_26_fu_924_p3;
wire  signed [31:0] sext_ln40_5_fu_973_p1;
wire  signed [31:0] sext_ln40_7_fu_981_p1;
wire   [9:0] add_ln32_3_fu_989_p2;
wire   [3:0] or_ln27_3_mid1_fu_1008_p3;
wire   [3:0] or_ln27_1_fu_1015_p3;
wire   [3:0] select_ln24_22_fu_1023_p3;
wire  signed [31:0] sext_ln40_9_fu_1052_p1;
wire  signed [31:0] sext_ln40_11_fu_1060_p1;
wire   [9:0] zext_ln40_fu_1035_p1;
wire   [9:0] zext_ln40_11_fu_1042_p1;
wire   [9:0] zext_ln40_13_fu_1049_p1;
wire   [15:0] trunc_ln_fu_1089_p4;
wire   [15:0] trunc_ln48_1_fu_1098_p4;
wire   [15:0] trunc_ln48_3_fu_1144_p4;
wire   [15:0] trunc_ln48_2_fu_1135_p4;
wire   [15:0] add_ln48_2_fu_1165_p2;
wire   [15:0] trunc_ln48_5_fu_1191_p4;
wire   [15:0] trunc_ln48_4_fu_1182_p4;
wire   [15:0] trunc_ln48_8_fu_1239_p4;
wire   [15:0] add_ln48_5_fu_1248_p2;
wire   [15:0] add_ln48_7_fu_1258_p2;
wire  signed [31:0] sext_ln48_fu_1267_p1;
wire    ap_CS_fsm_state15;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

depthwise_conv2d_fix_SeparableConv2D_0_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_w_s_address0),
    .ce0(SeparableConv2D_0_w_s_ce0),
    .q0(SeparableConv2D_0_w_s_q0),
    .address1(SeparableConv2D_0_w_s_address1),
    .ce1(SeparableConv2D_0_w_s_ce1),
    .q1(SeparableConv2D_0_w_s_q1)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U6(
    .din0(reg_324),
    .din1(SeparableConv2D_0_w_2_reg_1453),
    .dout(mul_ln40_fu_1275_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U7(
    .din0(reg_329),
    .din1(SeparableConv2D_0_w_4_reg_1458),
    .dout(mul_ln40_1_fu_1281_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U8(
    .din0(reg_324),
    .din1(SeparableConv2D_0_w_6_reg_1528),
    .dout(mul_ln40_2_fu_1287_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U9(
    .din0(reg_329),
    .din1(SeparableConv2D_0_w_8_reg_1533),
    .dout(mul_ln40_3_fu_1293_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U10(
    .din0(reg_324),
    .din1(SeparableConv2D_0_w_10_reg_1588),
    .dout(mul_ln40_4_fu_1299_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U11(
    .din0(reg_329),
    .din1(SeparableConv2D_0_w_12_reg_1593),
    .dout(mul_ln40_5_fu_1305_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U12(
    .din0(reg_324),
    .din1(SeparableConv2D_0_w_14_reg_1635),
    .dout(mul_ln40_6_fu_1311_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U13(
    .din0(reg_329),
    .din1(SeparableConv2D_0_w_16_reg_1640),
    .dout(mul_ln40_7_fu_1317_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U14(
    .din0(reg_324),
    .din1(SeparableConv2D_0_w_18_reg_1685),
    .dout(mul_ln40_8_fu_1323_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten80_reg_265 <= add_ln24_reg_1380;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten80_reg_265 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_288 <= select_ln32_15_reg_1630;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_288 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_d_0_reg_276 <= select_ln24_23_reg_1478;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_276 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_h_0_reg_300 <= select_ln32_reg_1615;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_300 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_w_0_reg_312 <= out_w_reg_1512;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_312 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_324 <= input_r_q0;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln24_reg_1376 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        reg_324 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_329 <= input_r_q1;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln24_reg_1376 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        reg_329 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        SeparableConv2D_0_w_10_reg_1588 <= SeparableConv2D_0_w_s_q0;
        SeparableConv2D_0_w_12_reg_1593 <= SeparableConv2D_0_w_s_q1;
        select_ln32_15_reg_1630 <= select_ln32_15_fu_995_p3;
        select_ln32_reg_1615 <= select_ln32_fu_968_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SeparableConv2D_0_w_14_reg_1635 <= SeparableConv2D_0_w_s_q0;
        SeparableConv2D_0_w_16_reg_1640 <= SeparableConv2D_0_w_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        SeparableConv2D_0_w_18_reg_1685 <= SeparableConv2D_0_w_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        SeparableConv2D_0_w_2_reg_1453 <= SeparableConv2D_0_w_s_q0;
        SeparableConv2D_0_w_4_reg_1458 <= SeparableConv2D_0_w_s_q1;
        out_w_reg_1512 <= out_w_fu_726_p2;
        select_ln24_23_reg_1478 <= select_ln24_23_fu_613_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        SeparableConv2D_0_w_6_reg_1528 <= SeparableConv2D_0_w_s_q0;
        SeparableConv2D_0_w_8_reg_1533 <= SeparableConv2D_0_w_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln24_reg_1380 <= add_ln24_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln40_10_reg_1675 <= add_ln40_10_fu_1073_p2;
        add_ln40_11_reg_1680 <= add_ln40_11_fu_1078_p2;
        add_ln40_9_reg_1670 <= add_ln40_9_fu_1068_p2;
        mul_ln40_1_reg_1655 <= mul_ln40_1_fu_1281_p2;
        mul_ln40_reg_1650 <= mul_ln40_fu_1275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln40_3_reg_1523 <= add_ln40_3_fu_735_p2;
        add_ln40_reg_1507 <= add_ln40_fu_720_p2;
        select_ln24_17_reg_1463[0] <= select_ln24_17_fu_593_p3[0];
        tmp10_0_0_mid2_reg_1483[10 : 1] <= tmp10_0_0_mid2_fu_663_p3[10 : 1];
        tmp10_1_0_mid2_reg_1488[10 : 1] <= tmp10_1_0_mid2_fu_705_p3[10 : 1];
        zext_ln40_12_reg_1518[4 : 0] <= zext_ln40_12_fu_731_p1[4 : 0];
        zext_ln40_1_reg_1501[4 : 0] <= zext_ln40_1_fu_717_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln40_4_reg_1558 <= add_ln40_4_fu_876_p2;
        add_ln40_5_reg_1563 <= add_ln40_5_fu_885_p2;
        add_ln40_6_reg_1568 <= add_ln40_6_fu_890_p2;
        add_ln40_7_reg_1573 <= add_ln40_7_fu_894_p2;
        add_ln40_8_reg_1578 <= add_ln40_8_fu_898_p2;
        add_ln48_reg_1583 <= add_ln48_fu_903_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln48_1_reg_1710 <= add_ln48_1_fu_1123_p2;
        mul_ln40_2_reg_1690 <= mul_ln40_2_fu_1287_p2;
        mul_ln40_3_reg_1695 <= mul_ln40_3_fu_1293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln48_3_reg_1730 <= add_ln48_3_fu_1171_p2;
        mul_ln40_4_reg_1715 <= mul_ln40_4_fu_1299_p2;
        mul_ln40_5_reg_1720 <= mul_ln40_5_fu_1305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln48_4_reg_1745 <= add_ln48_4_fu_1208_p2;
        mul_ln40_6_reg_1735 <= mul_ln40_6_fu_1311_p2;
        mul_ln40_7_reg_1740 <= mul_ln40_7_fu_1317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln48_6_reg_1765 <= add_ln48_6_fu_1253_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln48_8_reg_1770 <= add_ln48_8_fu_1262_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln48_reg_1583_pp0_iter1_reg <= add_ln48_reg_1583;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        and_ln24_reg_1428 <= and_ln24_fu_553_p2;
        out_h_reg_1437 <= out_h_fu_559_p2;
        out_w_0_mid2_reg_1445 <= out_w_0_mid2_fu_570_p3;
        select_ln24_reg_1405 <= select_ln24_fu_512_p3;
        xor_ln24_2_reg_1422 <= xor_ln24_2_fu_536_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln24_reg_1376 <= icmp_ln24_fu_494_p2;
        icmp_ln24_reg_1376_pp0_iter1_reg <= icmp_ln24_reg_1376;
        icmp_ln24_reg_1376_pp0_iter2_reg <= icmp_ln24_reg_1376_pp0_iter1_reg;
        out_d_reg_1335 <= out_d_fu_338_p2;
        select_ln27_reg_1351[1 : 0] <= select_ln27_fu_348_p3[1 : 0];
        tmp10_0_0_reg_1356[10 : 1] <= tmp10_0_0_fu_384_p2[10 : 1];
        tmp10_1_0_reg_1361[10 : 1] <= tmp10_1_0_fu_420_p2[10 : 1];
        tmp10_2_0_reg_1366[9 : 1] <= tmp10_2_0_fu_452_p2[9 : 1];
        tmp12_reg_1371[10 : 2] <= tmp12_fu_488_p2[10 : 2];
        zext_ln27_1_reg_1329[0] <= zext_ln27_1_fu_334_p1[0];
        zext_ln27_2_reg_1345[0] <= zext_ln27_2_fu_344_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_fu_494_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln32_reg_1385 <= icmp_ln32_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_ln40_8_reg_1760 <= mul_ln40_8_fu_1323_p2;
        trunc_ln48_6_reg_1750 <= {{mul_ln40_6_reg_1735[29:14]}};
        trunc_ln48_7_reg_1755 <= {{mul_ln40_7_reg_1740[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp10_2_0_mid2_reg_1608[9 : 1] <= tmp10_2_0_mid2_fu_961_p3[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln24_reg_1428) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp11_mid1_reg_1495 <= tmp11_mid1_fu_712_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SeparableConv2D_0_w_s_address0 = zext_ln24_21_fu_1030_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        SeparableConv2D_0_w_s_address0 = zext_ln24_20_fu_911_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        SeparableConv2D_0_w_s_address0 = zext_ln24_19_fu_763_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        SeparableConv2D_0_w_s_address0 = zext_ln24_fu_600_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        SeparableConv2D_0_w_s_address0 = select_ln24_15_fu_519_p3;
    end else begin
        SeparableConv2D_0_w_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            SeparableConv2D_0_w_s_address1 = select_ln24_21_fu_916_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            SeparableConv2D_0_w_s_address1 = zext_ln24_22_fu_782_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            SeparableConv2D_0_w_s_address1 = select_ln24_18_fu_605_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            SeparableConv2D_0_w_s_address1 = select_ln24_16_fu_525_p3;
        end else begin
            SeparableConv2D_0_w_s_address1 = 'bx;
        end
    end else begin
        SeparableConv2D_0_w_s_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        SeparableConv2D_0_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        SeparableConv2D_0_w_s_ce1 = 1'b1;
    end else begin
        SeparableConv2D_0_w_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_494_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten80_phi_fu_269_p4 = add_ln24_reg_1380;
    end else begin
        ap_phi_mux_indvar_flatten80_phi_fu_269_p4 = indvar_flatten80_reg_265;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_292_p4 = select_ln32_15_reg_1630;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_292_p4 = indvar_flatten_reg_288;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_280_p4 = select_ln24_23_reg_1478;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_280_p4 = out_d_0_reg_276;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1376 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_h_0_phi_fu_304_p4 = select_ln32_reg_1615;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_304_p4 = out_h_0_reg_300;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1376_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_out_w_0_phi_fu_316_p4 = out_w_reg_1512;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_316_p4 = out_w_0_reg_312;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln40_10_fu_1161_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address0 = zext_ln40_8_fu_1115_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln40_6_fu_1055_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address0 = zext_ln40_5_fu_984_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln40_3_fu_871_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_r_address1 = zext_ln40_9_fu_1119_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln40_7_fu_1063_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        input_r_address1 = zext_ln40_4_fu_976_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address1 = zext_ln40_2_fu_863_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1376_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_494_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_494_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_500_p2 = (ap_phi_mux_indvar_flatten80_phi_fu_269_p4 + 10'd1);

assign add_ln32_3_fu_989_p2 = (indvar_flatten_reg_288 + 10'd1);

assign add_ln40_10_fu_1073_p2 = (tmp10_2_0_mid2_reg_1608 + zext_ln40_11_fu_1042_p1);

assign add_ln40_11_fu_1078_p2 = (tmp10_2_0_mid2_reg_1608 + zext_ln40_13_fu_1049_p1);

assign add_ln40_3_fu_735_p2 = (tmp10_0_0_mid2_fu_663_p3 + zext_ln40_12_fu_731_p1);

assign add_ln40_4_fu_876_p2 = (out_w_0_mid2_reg_1445 + 5'd2);

assign add_ln40_5_fu_885_p2 = (tmp10_0_0_mid2_reg_1483 + zext_ln40_14_fu_881_p1);

assign add_ln40_6_fu_890_p2 = (zext_ln40_1_reg_1501 + tmp10_1_0_mid2_reg_1488);

assign add_ln40_7_fu_894_p2 = (tmp10_1_0_mid2_reg_1488 + zext_ln40_12_reg_1518);

assign add_ln40_8_fu_898_p2 = (tmp10_1_0_mid2_reg_1488 + zext_ln40_14_fu_881_p1);

assign add_ln40_9_fu_1068_p2 = (zext_ln40_fu_1035_p1 + tmp10_2_0_mid2_reg_1608);

assign add_ln40_fu_720_p2 = (zext_ln40_1_fu_717_p1 + tmp10_0_0_mid2_fu_663_p3);

assign add_ln48_1_fu_1123_p2 = (trunc_ln_fu_1089_p4 + trunc_ln48_1_fu_1098_p4);

assign add_ln48_2_fu_1165_p2 = (trunc_ln48_3_fu_1144_p4 + trunc_ln48_2_fu_1135_p4);

assign add_ln48_3_fu_1171_p2 = (add_ln48_1_reg_1710 + add_ln48_2_fu_1165_p2);

assign add_ln48_4_fu_1208_p2 = (trunc_ln48_5_fu_1191_p4 + trunc_ln48_4_fu_1182_p4);

assign add_ln48_5_fu_1248_p2 = (trunc_ln48_8_fu_1239_p4 + trunc_ln48_7_reg_1755);

assign add_ln48_6_fu_1253_p2 = (trunc_ln48_6_reg_1750 + add_ln48_5_fu_1248_p2);

assign add_ln48_7_fu_1258_p2 = (add_ln48_4_reg_1745 + add_ln48_6_reg_1765);

assign add_ln48_8_fu_1262_p2 = (add_ln48_3_reg_1730 + add_ln48_7_fu_1258_p2);

assign add_ln48_fu_903_p2 = (zext_ln40_1_reg_1501 + tmp12_mid2_fu_853_p3);

assign and_ln24_fu_553_p2 = (xor_ln24_fu_542_p2 & icmp_ln33_fu_547_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_63_fu_565_p2 = (icmp_ln32_reg_1385 | and_ln24_fu_553_p2);

assign icmp_ln24_fu_494_p2 = ((ap_phi_mux_indvar_flatten80_phi_fu_269_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_506_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_292_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_547_p2 = ((ap_phi_mux_out_w_0_phi_fu_316_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln27_1_fu_1015_p3 = {{3'd4}, {out_d_0_reg_276}};

assign or_ln27_1_mid1_fu_741_p3 = {{2'd2}, {out_d_reg_1335}};

assign or_ln27_3_mid1_fu_1008_p3 = {{3'd4}, {out_d_reg_1335}};

assign or_ln27_mid1_fu_578_p3 = {{1'd1}, {out_d_reg_1335}};

assign or_ln27_s_fu_748_p3 = {{2'd2}, {out_d_0_reg_276}};

assign or_ln_fu_585_p3 = {{1'd1}, {out_d_0_reg_276}};

assign out_d_fu_338_p2 = (ap_phi_mux_out_d_0_phi_fu_280_p4 ^ 1'd1);

assign out_h_fu_559_p2 = (select_ln24_fu_512_p3 + 5'd1);

assign out_w_0_mid2_fu_570_p3 = ((empty_63_fu_565_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_w_0_phi_fu_316_p4);

assign out_w_fu_726_p2 = (out_w_0_mid2_reg_1445 + 5'd1);

assign output_r_address0 = zext_ln48_fu_1270_p1;

assign output_r_d0 = add_ln48_8_reg_1770;

assign p_shl13_cast_fu_472_p1 = p_shl6_fu_464_p3;

assign p_shl13_cast_mid170_c_fu_794_p1 = tmp_fu_787_p3;

assign p_shl13_cast_mid1_fu_832_p1 = p_shl13_mid1_fu_825_p3;

assign p_shl13_mid1_fu_825_p3 = {{tmp11_mid1_reg_1495}, {5'd0}};

assign p_shl14_cast_fu_484_p1 = p_shl7_fu_476_p3;

assign p_shl14_cast_mid174_c_fu_805_p1 = tmp_3_fu_798_p3;

assign p_shl14_cast_mid1_fu_843_p1 = p_shl14_mid1_fu_836_p3;

assign p_shl14_mid1_fu_836_p3 = {{tmp11_mid1_reg_1495}, {2'd0}};

assign p_shl15_mid1_fu_935_p3 = {{tmp_2_0_mid1_fu_930_p2}, {5'd0}};

assign p_shl16_cast_fu_448_p1 = p_shl5_fu_440_p3;

assign p_shl16_cast_mid1_fu_951_p1 = p_shl16_mid1_fu_943_p3;

assign p_shl16_mid1_fu_943_p3 = {{tmp_2_0_mid1_fu_930_p2}, {1'd0}};

assign p_shl17_cast_fu_404_p1 = p_shl2_fu_396_p3;

assign p_shl17_cast_mid1_fu_683_p1 = p_shl17_mid1_fu_675_p3;

assign p_shl17_mid1_fu_675_p3 = {{tmp_1_0_mid1_fu_670_p2}, {5'd0}};

assign p_shl18_cast_fu_416_p1 = p_shl3_fu_408_p3;

assign p_shl18_cast_mid1_fu_695_p1 = p_shl18_mid1_fu_687_p3;

assign p_shl18_mid1_fu_687_p3 = {{tmp_1_0_mid1_fu_670_p2}, {1'd0}};

assign p_shl19_cast_fu_368_p1 = p_shl_fu_360_p3;

assign p_shl19_cast_mid1_fu_642_p1 = p_shl19_mid1_fu_635_p3;

assign p_shl19_mid1_fu_635_p3 = {{out_h_reg_1437}, {5'd0}};

assign p_shl1_fu_372_p3 = {{ap_phi_mux_out_h_0_phi_fu_304_p4}, {1'd0}};

assign p_shl20_cast_fu_380_p1 = p_shl1_fu_372_p3;

assign p_shl20_cast_mid1_fu_653_p1 = p_shl20_mid1_fu_646_p3;

assign p_shl20_mid1_fu_646_p3 = {{out_h_reg_1437}, {1'd0}};

assign p_shl2_fu_396_p3 = {{tmp_1_0_fu_390_p2}, {5'd0}};

assign p_shl3_fu_408_p3 = {{tmp_1_0_fu_390_p2}, {1'd0}};

assign p_shl4_fu_432_p3 = {{tmp_2_0_fu_426_p2}, {5'd0}};

assign p_shl5_fu_440_p3 = {{tmp_2_0_fu_426_p2}, {1'd0}};

assign p_shl6_fu_464_p3 = {{tmp11_fu_458_p2}, {5'd0}};

assign p_shl7_fu_476_p3 = {{tmp11_fu_458_p2}, {2'd0}};

assign p_shl_fu_360_p3 = {{ap_phi_mux_out_h_0_phi_fu_304_p4}, {5'd0}};

assign select_ln24_15_fu_519_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? zext_ln27_2_reg_1345 : zext_ln27_1_reg_1329);

assign select_ln24_16_fu_525_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? zext_ln27_1_reg_1329 : zext_ln27_2_reg_1345);

assign select_ln24_17_fu_593_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? or_ln27_mid1_fu_578_p3 : or_ln_fu_585_p3);

assign select_ln24_18_fu_605_p3 = ((xor_ln24_2_reg_1422[0:0] === 1'b1) ? 64'd3 : 64'd0);

assign select_ln24_19_fu_756_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? or_ln27_1_mid1_fu_741_p3 : or_ln27_s_fu_748_p3);

assign select_ln24_20_fu_776_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? select_ln27_1_fu_768_p3 : select_ln27_reg_1351);

assign select_ln24_21_fu_916_p3 = ((xor_ln24_2_reg_1422[0:0] === 1'b1) ? 64'd7 : 64'd0);

assign select_ln24_22_fu_1023_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? or_ln27_3_mid1_fu_1008_p3 : or_ln27_1_fu_1015_p3);

assign select_ln24_23_fu_613_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? out_d_reg_1335 : out_d_0_reg_276);

assign select_ln24_24_fu_623_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? 11'd0 : tmp10_0_0_reg_1356);

assign select_ln24_25_fu_629_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? 11'd30 : tmp10_1_0_reg_1361);

assign select_ln24_26_fu_924_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? 10'd60 : tmp10_2_0_reg_1366);

assign select_ln24_27_fu_819_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? tmp12_mid176_cast_fu_815_p1 : tmp12_reg_1371);

assign select_ln24_fu_512_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? 5'd0 : out_h_0_reg_300);

assign select_ln27_1_fu_768_p3 = ((out_d_0_reg_276[0:0] === 1'b1) ? 3'd5 : 3'd6);

assign select_ln27_fu_348_p3 = ((ap_phi_mux_out_d_0_phi_fu_280_p4[0:0] === 1'b1) ? 3'd6 : 3'd5);

assign select_ln32_15_fu_995_p3 = ((icmp_ln32_reg_1385[0:0] === 1'b1) ? 10'd1 : add_ln32_3_fu_989_p2);

assign select_ln32_fu_968_p3 = ((and_ln24_reg_1428[0:0] === 1'b1) ? out_h_reg_1437 : select_ln24_reg_1405);

assign sext_ln24_20_fu_908_p1 = select_ln24_17_reg_1463;

assign sext_ln40_11_fu_1060_p1 = $signed(add_ln40_8_reg_1578);

assign sext_ln40_1_fu_860_p1 = $signed(add_ln40_reg_1507);

assign sext_ln40_3_fu_868_p1 = $signed(add_ln40_3_reg_1523);

assign sext_ln40_5_fu_973_p1 = $signed(add_ln40_5_reg_1563);

assign sext_ln40_7_fu_981_p1 = $signed(add_ln40_6_reg_1568);

assign sext_ln40_9_fu_1052_p1 = $signed(add_ln40_7_reg_1573);

assign sext_ln48_fu_1267_p1 = $signed(add_ln48_reg_1583_pp0_iter1_reg);

assign tmp10_0_0_fu_384_p2 = (p_shl19_cast_fu_368_p1 - p_shl20_cast_fu_380_p1);

assign tmp10_0_0_mid1_fu_657_p2 = (p_shl19_cast_mid1_fu_642_p1 - p_shl20_cast_mid1_fu_653_p1);

assign tmp10_0_0_mid2_fu_663_p3 = ((and_ln24_reg_1428[0:0] === 1'b1) ? tmp10_0_0_mid1_fu_657_p2 : select_ln24_24_fu_623_p3);

assign tmp10_1_0_fu_420_p2 = (p_shl17_cast_fu_404_p1 - p_shl18_cast_fu_416_p1);

assign tmp10_1_0_mid1_fu_699_p2 = (p_shl17_cast_mid1_fu_683_p1 - p_shl18_cast_mid1_fu_695_p1);

assign tmp10_1_0_mid2_fu_705_p3 = ((and_ln24_reg_1428[0:0] === 1'b1) ? tmp10_1_0_mid1_fu_699_p2 : select_ln24_25_fu_629_p3);

assign tmp10_2_0_fu_452_p2 = (p_shl4_fu_432_p3 - p_shl16_cast_fu_448_p1);

assign tmp10_2_0_mid1_fu_955_p2 = (p_shl15_mid1_fu_935_p3 - p_shl16_cast_mid1_fu_951_p1);

assign tmp10_2_0_mid2_fu_961_p3 = ((and_ln24_reg_1428[0:0] === 1'b1) ? tmp10_2_0_mid1_fu_955_p2 : select_ln24_26_fu_924_p3);

assign tmp11_fu_458_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + zext_ln48_1_fu_356_p1);

assign tmp11_mid1_fu_712_p2 = (out_h_reg_1437 + zext_ln24_23_fu_619_p1);

assign tmp12_fu_488_p2 = (p_shl13_cast_fu_472_p1 - p_shl14_cast_fu_484_p1);

assign tmp12_mid176_cast_fu_815_p1 = $signed(tmp12_mid176_fu_809_p2);

assign tmp12_mid176_fu_809_p2 = (p_shl13_cast_mid170_c_fu_794_p1 - p_shl14_cast_mid174_c_fu_805_p1);

assign tmp12_mid1_fu_847_p2 = (p_shl13_cast_mid1_fu_832_p1 - p_shl14_cast_mid1_fu_843_p1);

assign tmp12_mid2_fu_853_p3 = ((and_ln24_reg_1428[0:0] === 1'b1) ? tmp12_mid1_fu_847_p2 : select_ln24_27_fu_819_p3);

assign tmp_1_0_fu_390_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + 5'd1);

assign tmp_1_0_mid1_fu_670_p2 = (select_ln24_reg_1405 + 5'd2);

assign tmp_2_0_fu_426_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + 5'd2);

assign tmp_2_0_mid1_fu_930_p2 = (select_ln24_reg_1405 + 5'd3);

assign tmp_3_fu_798_p3 = {{out_d_reg_1335}, {2'd0}};

assign tmp_fu_787_p3 = {{out_d_reg_1335}, {5'd0}};

assign trunc_ln48_1_fu_1098_p4 = {{mul_ln40_1_reg_1655[29:14]}};

assign trunc_ln48_2_fu_1135_p4 = {{mul_ln40_2_reg_1690[29:14]}};

assign trunc_ln48_3_fu_1144_p4 = {{mul_ln40_3_reg_1695[29:14]}};

assign trunc_ln48_4_fu_1182_p4 = {{mul_ln40_4_reg_1715[29:14]}};

assign trunc_ln48_5_fu_1191_p4 = {{mul_ln40_5_reg_1720[29:14]}};

assign trunc_ln48_8_fu_1239_p4 = {{mul_ln40_8_reg_1760[29:14]}};

assign trunc_ln_fu_1089_p4 = {{mul_ln40_reg_1650[29:14]}};

assign xor_ln24_1_fu_531_p2 = (icmp_ln32_reg_1385 ^ 1'd1);

assign xor_ln24_2_fu_536_p2 = (xor_ln24_1_fu_531_p2 ^ out_d_0_reg_276);

assign xor_ln24_fu_542_p2 = (icmp_ln32_reg_1385 ^ 1'd1);

assign zext_ln24_19_fu_763_p1 = select_ln24_19_fu_756_p3;

assign zext_ln24_20_fu_911_p1 = $unsigned(sext_ln24_20_fu_908_p1);

assign zext_ln24_21_fu_1030_p1 = select_ln24_22_fu_1023_p3;

assign zext_ln24_22_fu_782_p1 = select_ln24_20_fu_776_p3;

assign zext_ln24_23_fu_619_p1 = select_ln24_23_fu_613_p3;

assign zext_ln24_fu_600_p1 = $unsigned(select_ln24_17_fu_593_p3);

assign zext_ln27_1_fu_334_p1 = ap_phi_mux_out_d_0_phi_fu_280_p4;

assign zext_ln27_2_fu_344_p1 = out_d_fu_338_p2;

assign zext_ln40_10_fu_1161_p1 = add_ln40_11_reg_1680;

assign zext_ln40_11_fu_1042_p1 = out_w_reg_1512;

assign zext_ln40_12_fu_731_p1 = out_w_fu_726_p2;

assign zext_ln40_13_fu_1049_p1 = add_ln40_4_reg_1558;

assign zext_ln40_14_fu_881_p1 = add_ln40_4_fu_876_p2;

assign zext_ln40_1_fu_717_p1 = out_w_0_mid2_reg_1445;

assign zext_ln40_2_fu_863_p1 = $unsigned(sext_ln40_1_fu_860_p1);

assign zext_ln40_3_fu_871_p1 = $unsigned(sext_ln40_3_fu_868_p1);

assign zext_ln40_4_fu_976_p1 = $unsigned(sext_ln40_5_fu_973_p1);

assign zext_ln40_5_fu_984_p1 = $unsigned(sext_ln40_7_fu_981_p1);

assign zext_ln40_6_fu_1055_p1 = $unsigned(sext_ln40_9_fu_1052_p1);

assign zext_ln40_7_fu_1063_p1 = $unsigned(sext_ln40_11_fu_1060_p1);

assign zext_ln40_8_fu_1115_p1 = add_ln40_9_reg_1670;

assign zext_ln40_9_fu_1119_p1 = add_ln40_10_reg_1675;

assign zext_ln40_fu_1035_p1 = out_w_0_mid2_reg_1445;

assign zext_ln48_1_fu_356_p1 = ap_phi_mux_out_d_0_phi_fu_280_p4;

assign zext_ln48_fu_1270_p1 = $unsigned(sext_ln48_fu_1267_p1);

always @ (posedge ap_clk) begin
    zext_ln27_1_reg_1329[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    zext_ln27_2_reg_1345[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    select_ln27_reg_1351[2] <= 1'b1;
    tmp10_0_0_reg_1356[0] <= 1'b0;
    tmp10_1_0_reg_1361[0] <= 1'b0;
    tmp10_2_0_reg_1366[0] <= 1'b0;
    tmp12_reg_1371[1:0] <= 2'b00;
    select_ln24_17_reg_1463[1] <= 1'b1;
    tmp10_0_0_mid2_reg_1483[0] <= 1'b0;
    tmp10_1_0_mid2_reg_1488[0] <= 1'b0;
    zext_ln40_1_reg_1501[10:5] <= 6'b000000;
    zext_ln40_12_reg_1518[10:5] <= 6'b000000;
    tmp10_2_0_mid2_reg_1608[0] <= 1'b0;
end

endmodule //depthwise_conv2d_fix
