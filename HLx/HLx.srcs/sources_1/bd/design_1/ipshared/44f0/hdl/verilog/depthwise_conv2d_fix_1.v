// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_0_address0,
        kernel_0_ce0,
        kernel_0_q0,
        kernel_0_address1,
        kernel_0_ce1,
        kernel_0_q1
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [4:0] output_height;
input  [4:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [2:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [6:0] kernel_0_address0;
output   kernel_0_ce0;
input  [15:0] kernel_0_q0;
output  [6:0] kernel_0_address1;
output   kernel_0_ce1;
input  [15:0] kernel_0_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;
reg bias_ce0;
reg[6:0] kernel_0_address0;
reg kernel_0_ce0;
reg[6:0] kernel_0_address1;
reg kernel_0_ce1;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] reg_390;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
reg  signed [15:0] reg_395;
wire    ap_CS_fsm_state8;
wire   [15:0] output_width_cast_fu_399_p1;
reg   [15:0] output_width_cast_reg_1272;
wire   [6:0] zext_ln28_fu_403_p1;
reg   [6:0] zext_ln28_reg_1278;
wire   [12:0] zext_ln36_fu_407_p1;
reg   [12:0] zext_ln36_reg_1283;
wire   [6:0] zext_ln36_3_fu_411_p1;
reg   [6:0] zext_ln36_3_reg_1290;
wire   [11:0] zext_ln19_cast_fu_415_p1;
reg   [11:0] zext_ln19_cast_reg_1295;
wire   [3:0] empty_fu_419_p1;
reg   [3:0] empty_reg_1300;
wire   [6:0] add_ln19_fu_423_p2;
reg   [6:0] add_ln19_reg_1305;
wire    ap_CS_fsm_state2;
wire   [6:0] add_ln19_100_fu_428_p2;
reg   [6:0] add_ln19_100_reg_1310;
wire   [3:0] out_d_fu_439_p2;
reg   [3:0] out_d_reg_1318;
reg   [2:0] bias_addr_reg_1323;
wire   [0:0] icmp_ln19_fu_433_p2;
reg   [6:0] kernel_0_addr_reg_1328;
reg   [6:0] kernel_0_addr_1_reg_1333;
reg   [6:0] kernel_0_addr_2_reg_1338;
reg   [6:0] kernel_0_addr_3_reg_1343;
reg   [6:0] kernel_0_addr_4_reg_1348;
reg   [6:0] kernel_0_addr_5_reg_1353;
reg   [6:0] kernel_0_addr_6_reg_1358;
reg   [6:0] kernel_0_addr_7_reg_1363;
reg   [6:0] kernel_0_addr_8_reg_1368;
wire   [3:0] out_h_fu_574_p2;
reg   [3:0] out_h_reg_1376;
wire    ap_CS_fsm_state3;
wire   [6:0] tmp_0_0_0_fu_584_p2;
reg   [6:0] tmp_0_0_0_reg_1381;
wire   [0:0] icmp_ln20_fu_569_p2;
wire   [6:0] tmp_0_1_0_fu_590_p2;
reg   [6:0] tmp_0_1_0_reg_1386;
wire   [6:0] tmp_0_2_0_fu_596_p2;
reg   [6:0] tmp_0_2_0_reg_1391;
wire   [6:0] tmp6_0_fu_602_p2;
reg   [6:0] tmp6_0_reg_1396;
wire   [16:0] tmp5_0_0_0_cast_fu_616_p1;
reg   [16:0] tmp5_0_0_0_cast_reg_1401;
wire    ap_CS_fsm_state4;
wire   [16:0] tmp5_0_1_0_cast_fu_628_p1;
reg   [16:0] tmp5_0_1_0_cast_reg_1410;
wire   [16:0] tmp5_0_2_0_cast_fu_640_p1;
reg   [16:0] tmp5_0_2_0_cast_reg_1419;
wire   [16:0] tmp7_0_cast_fu_652_p1;
reg   [16:0] tmp7_0_cast_reg_1428;
wire   [0:0] icmp_ln21_fu_656_p2;
reg   [0:0] icmp_ln21_reg_1434;
wire    ap_CS_fsm_state5;
wire   [16:0] zext_ln28_31_fu_661_p1;
reg   [16:0] zext_ln28_31_reg_1438;
wire   [16:0] add_ln28_45_fu_665_p2;
reg   [16:0] add_ln28_45_reg_1445;
wire   [16:0] add_ln28_47_fu_670_p2;
reg   [16:0] add_ln28_47_reg_1450;
wire    ap_CS_fsm_state6;
wire   [16:0] zext_ln28_33_fu_686_p1;
reg   [16:0] zext_ln28_33_reg_1462;
wire   [16:0] add_ln28_46_fu_690_p2;
reg   [16:0] add_ln28_46_reg_1471;
wire   [16:0] add_ln28_48_fu_695_p2;
reg   [16:0] add_ln28_48_reg_1476;
wire   [0:0] icmp_ln21_1_fu_699_p2;
reg   [0:0] icmp_ln21_1_reg_1481;
reg  signed [15:0] kernel_0_load_reg_1485;
wire   [16:0] add_ln28_49_fu_712_p2;
reg   [16:0] add_ln28_49_reg_1500;
wire   [16:0] add_ln28_50_fu_716_p2;
reg   [16:0] add_ln28_50_reg_1505;
reg  signed [15:0] kernel_0_load_1_reg_1510;
reg  signed [15:0] input_load_209_reg_1515;
reg  signed [15:0] kernel_0_load_2_reg_1520;
wire   [16:0] add_ln28_51_fu_728_p2;
reg   [16:0] add_ln28_51_reg_1535;
wire   [16:0] add_ln28_52_fu_732_p2;
reg   [16:0] add_ln28_52_reg_1540;
reg  signed [15:0] input_load_210_reg_1545;
wire    ap_CS_fsm_state9;
reg  signed [15:0] kernel_0_load_3_reg_1550;
reg  signed [15:0] input_load_211_reg_1555;
reg  signed [15:0] kernel_0_load_4_reg_1560;
wire   [16:0] add_ln28_53_fu_744_p2;
reg   [16:0] add_ln28_53_reg_1575;
wire   [16:0] add_ln28_54_fu_748_p2;
reg   [16:0] add_ln28_54_reg_1580;
reg  signed [15:0] input_load_212_reg_1585;
wire    ap_CS_fsm_state10;
reg  signed [15:0] kernel_0_load_5_reg_1590;
reg  signed [15:0] input_load_213_reg_1595;
reg  signed [15:0] kernel_0_load_6_reg_1600;
reg  signed [15:0] input_load_214_reg_1615;
wire    ap_CS_fsm_state11;
reg  signed [15:0] kernel_0_load_7_reg_1620;
reg  signed [15:0] input_load_215_reg_1625;
reg  signed [15:0] kernel_0_load_8_reg_1630;
wire    ap_CS_fsm_state12;
wire  signed [29:0] sext_ln28_36_fu_763_p1;
reg  signed [29:0] sext_ln28_36_reg_1640;
wire  signed [29:0] sext_ln28_37_fu_766_p1;
reg  signed [29:0] sext_ln28_37_reg_1646;
wire  signed [29:0] sext_ln28_38_fu_769_p1;
reg  signed [29:0] sext_ln28_38_reg_1652;
wire  signed [29:0] sext_ln28_40_fu_775_p1;
reg  signed [29:0] sext_ln28_40_reg_1663;
wire    ap_CS_fsm_state13;
wire  signed [29:0] sext_ln28_24_fu_782_p1;
reg  signed [29:0] sext_ln28_24_reg_1674;
wire  signed [29:0] sext_ln28_25_fu_785_p1;
reg  signed [29:0] sext_ln28_25_reg_1680;
wire  signed [29:0] sext_ln28_26_fu_789_p1;
reg  signed [29:0] sext_ln28_26_reg_1686;
wire  signed [29:0] sext_ln28_28_fu_795_p1;
reg  signed [29:0] sext_ln28_28_reg_1697;
wire  signed [29:0] sext_ln28_30_fu_801_p1;
reg  signed [29:0] sext_ln28_30_reg_1708;
wire  signed [29:0] sext_ln28_31_fu_804_p1;
reg  signed [29:0] sext_ln28_31_reg_1714;
wire  signed [29:0] sext_ln28_32_fu_807_p1;
reg  signed [29:0] sext_ln28_32_reg_1720;
wire  signed [29:0] sext_ln28_34_fu_813_p1;
reg  signed [29:0] sext_ln28_34_reg_1731;
wire  signed [29:0] grp_fu_1176_p2;
reg  signed [29:0] mul_ln28_23_reg_1737;
wire    ap_CS_fsm_state14;
wire  signed [29:0] grp_fu_1182_p2;
reg  signed [29:0] mul_ln28_24_reg_1742;
wire  signed [29:0] grp_fu_1188_p2;
reg  signed [29:0] mul_ln28_25_reg_1747;
reg   [15:0] bias_load_reg_1752;
wire    ap_CS_fsm_state15;
wire  signed [29:0] grp_fu_1194_p2;
reg  signed [29:0] mul_ln28_reg_1758;
wire  signed [29:0] grp_fu_1200_p2;
reg  signed [29:0] mul_ln28_18_reg_1763;
wire  signed [29:0] grp_fu_1206_p2;
reg  signed [29:0] mul_ln28_19_reg_1768;
wire  signed [29:0] grp_fu_1212_p2;
reg  signed [29:0] mul_ln28_20_reg_1773;
wire  signed [29:0] grp_fu_1218_p2;
reg  signed [29:0] mul_ln28_21_reg_1778;
wire  signed [29:0] grp_fu_1224_p2;
reg  signed [29:0] mul_ln28_22_reg_1783;
wire   [15:0] add_ln28_61_fu_849_p2;
reg   [15:0] add_ln28_61_reg_1788;
wire   [15:0] add_ln28_55_fu_909_p2;
reg   [15:0] add_ln28_55_reg_1793;
wire    ap_CS_fsm_state16;
wire   [15:0] add_ln28_57_fu_920_p2;
reg   [15:0] add_ln28_57_reg_1798;
wire   [15:0] add_ln28_62_fu_932_p2;
reg   [15:0] add_ln28_62_reg_1803;
wire   [15:0] add_ln28_63_fu_941_p2;
reg   [15:0] add_ln28_63_reg_1808;
wire    ap_CS_fsm_state17;
wire   [16:0] add_ln36_fu_946_p2;
reg   [16:0] add_ln36_reg_1813;
wire   [16:0] add_ln28_64_fu_954_p2;
reg   [16:0] add_ln28_64_reg_1818;
wire    ap_CS_fsm_state18;
wire   [16:0] add_ln28_66_fu_959_p2;
reg   [16:0] add_ln28_66_reg_1825;
wire   [16:0] add_ln36_1_fu_964_p2;
reg   [16:0] add_ln36_1_reg_1832;
wire   [15:0] add_ln21_fu_968_p2;
reg   [15:0] add_ln21_reg_1837;
wire   [16:0] add_ln28_65_fu_974_p2;
reg   [16:0] add_ln28_65_reg_1842;
wire    ap_CS_fsm_state19;
wire   [16:0] add_ln28_67_fu_978_p2;
reg   [16:0] add_ln28_67_reg_1847;
wire  signed [29:0] grp_fu_1230_p2;
reg  signed [29:0] mul_ln28_26_reg_1852;
wire    ap_CS_fsm_state20;
wire  signed [29:0] grp_fu_1234_p2;
reg  signed [29:0] mul_ln28_29_reg_1867;
wire   [16:0] add_ln28_68_fu_990_p2;
reg   [16:0] add_ln28_68_reg_1872;
wire   [16:0] add_ln28_69_fu_994_p2;
reg   [16:0] add_ln28_69_reg_1877;
wire  signed [29:0] grp_fu_1238_p2;
reg  signed [29:0] mul_ln28_32_reg_1882;
wire   [16:0] add_ln28_70_fu_998_p2;
reg   [16:0] add_ln28_70_reg_1887;
wire   [16:0] add_ln28_71_fu_1002_p2;
reg   [16:0] add_ln28_71_reg_1892;
reg   [15:0] trunc_ln28_27_reg_1897;
reg   [15:0] trunc_ln28_30_reg_1912;
wire   [15:0] add_ln28_72_fu_1041_p2;
reg   [15:0] add_ln28_72_reg_1917;
wire  signed [29:0] grp_fu_1242_p2;
reg  signed [29:0] mul_ln28_27_reg_1952;
wire    ap_CS_fsm_state24;
wire  signed [29:0] grp_fu_1247_p2;
reg  signed [29:0] mul_ln28_28_reg_1957;
wire  signed [29:0] grp_fu_1252_p2;
reg  signed [29:0] mul_ln28_30_reg_1972;
wire    ap_CS_fsm_state25;
wire  signed [29:0] grp_fu_1257_p2;
reg  signed [29:0] mul_ln28_31_reg_1977;
wire   [15:0] add_ln28_74_fu_1101_p2;
reg   [15:0] add_ln28_74_reg_1982;
reg   [15:0] trunc_ln28_28_reg_1987;
wire    ap_CS_fsm_state26;
reg   [15:0] trunc_ln28_29_reg_1992;
wire  signed [29:0] grp_fu_1262_p2;
reg  signed [29:0] mul_ln28_33_reg_1997;
wire  signed [29:0] grp_fu_1267_p2;
reg  signed [29:0] mul_ln28_34_reg_2002;
wire   [15:0] add_ln28_78_fu_1149_p2;
reg   [15:0] add_ln28_78_reg_2007;
wire    ap_CS_fsm_state27;
wire   [15:0] add_ln28_79_fu_1158_p2;
reg   [15:0] add_ln28_79_reg_2012;
wire    ap_CS_fsm_state28;
wire   [15:0] add_ln28_80_fu_1167_p2;
reg   [15:0] add_ln28_80_reg_2017;
wire    ap_CS_fsm_state29;
reg   [3:0] out_d_0_reg_332;
reg   [6:0] phi_mul_reg_343;
reg   [6:0] phi_mul2_reg_355;
reg   [3:0] out_h_0_reg_367;
reg   [15:0] out_w_0_0_reg_378;
wire    ap_CS_fsm_state30;
wire   [63:0] zext_ln23_fu_445_p1;
wire   [63:0] zext_ln28_14_fu_476_p1;
wire   [63:0] zext_ln28_15_fu_487_p1;
wire   [63:0] zext_ln28_16_fu_498_p1;
wire   [63:0] zext_ln28_17_fu_509_p1;
wire   [63:0] zext_ln28_18_fu_520_p1;
wire   [63:0] zext_ln28_19_fu_531_p1;
wire   [63:0] zext_ln28_20_fu_542_p1;
wire   [63:0] zext_ln28_21_fu_553_p1;
wire   [63:0] zext_ln28_22_fu_564_p1;
wire   [63:0] zext_ln28_32_fu_676_p1;
wire   [63:0] zext_ln28_34_fu_704_p1;
wire   [63:0] zext_ln28_35_fu_708_p1;
wire   [63:0] zext_ln28_36_fu_720_p1;
wire   [63:0] zext_ln28_37_fu_724_p1;
wire   [63:0] zext_ln28_38_fu_736_p1;
wire   [63:0] zext_ln28_39_fu_740_p1;
wire   [63:0] zext_ln28_40_fu_752_p1;
wire   [63:0] zext_ln28_41_fu_756_p1;
wire   [63:0] zext_ln36_4_fu_950_p1;
wire   [63:0] zext_ln28_42_fu_982_p1;
wire   [63:0] zext_ln28_43_fu_986_p1;
wire   [63:0] zext_ln28_44_fu_1024_p1;
wire   [63:0] zext_ln28_45_fu_1028_p1;
wire   [63:0] zext_ln28_46_fu_1054_p1;
wire   [63:0] zext_ln28_47_fu_1058_p1;
wire   [63:0] zext_ln36_5_fu_1172_p1;
wire   [2:0] trunc_ln28_fu_454_p1;
wire   [5:0] zext_ln28_29_fu_450_p1;
wire   [5:0] shl_ln_fu_458_p3;
wire   [5:0] add_ln28_fu_466_p2;
wire   [6:0] zext_ln28_30_fu_472_p1;
wire   [6:0] add_ln28_37_fu_481_p2;
wire   [6:0] add_ln28_38_fu_492_p2;
wire   [6:0] add_ln28_39_fu_503_p2;
wire   [6:0] add_ln28_40_fu_514_p2;
wire   [6:0] add_ln28_41_fu_525_p2;
wire   [6:0] add_ln28_42_fu_536_p2;
wire   [6:0] add_ln28_43_fu_547_p2;
wire   [6:0] add_ln28_44_fu_558_p2;
wire   [6:0] zext_ln28_3_cast_fu_580_p1;
wire   [5:0] tmp5_0_0_0_fu_611_p0;
wire   [6:0] tmp5_0_0_0_fu_611_p1;
wire   [12:0] tmp5_0_0_0_fu_611_p2;
wire   [5:0] tmp5_0_1_0_fu_623_p0;
wire   [6:0] tmp5_0_1_0_fu_623_p1;
wire   [12:0] tmp5_0_1_0_fu_623_p2;
wire   [5:0] tmp5_0_2_0_fu_635_p0;
wire   [6:0] tmp5_0_2_0_fu_635_p1;
wire   [12:0] tmp5_0_2_0_fu_635_p2;
wire   [4:0] tmp7_0_fu_647_p0;
wire   [6:0] tmp7_0_fu_647_p1;
wire   [11:0] tmp7_0_fu_647_p2;
wire   [15:0] or_ln28_fu_680_p2;
wire   [15:0] trunc_ln28_22_fu_825_p4;
wire   [15:0] trunc_ln28_23_fu_834_p4;
wire   [15:0] add_ln28_60_fu_843_p2;
wire   [15:0] trunc_ln28_21_fu_816_p4;
wire   [15:0] trunc_ln_fu_855_p4;
wire   [15:0] trunc_ln28_17_fu_873_p4;
wire   [15:0] trunc_ln28_18_fu_882_p4;
wire   [15:0] add_ln28_56_fu_914_p2;
wire   [15:0] trunc_ln28_s_fu_864_p4;
wire   [15:0] trunc_ln28_19_fu_891_p4;
wire   [15:0] trunc_ln28_20_fu_900_p4;
wire   [15:0] add_ln28_59_fu_926_p2;
wire   [15:0] add_ln28_58_fu_937_p2;
wire   [15:0] trunc_ln28_24_fu_1006_p4;
wire   [15:0] trunc_ln28_26_fu_1087_p4;
wire   [15:0] add_ln28_73_fu_1096_p2;
wire   [15:0] trunc_ln28_25_fu_1078_p4;
wire   [15:0] trunc_ln28_31_fu_1125_p4;
wire   [15:0] trunc_ln28_32_fu_1134_p4;
wire   [15:0] add_ln28_77_fu_1143_p2;
wire   [15:0] add_ln28_76_fu_1154_p2;
wire   [15:0] add_ln28_75_fu_1163_p2;
wire  signed [15:0] grp_fu_1230_p0;
wire  signed [15:0] grp_fu_1230_p1;
wire  signed [15:0] grp_fu_1234_p0;
wire  signed [15:0] grp_fu_1234_p1;
wire  signed [15:0] grp_fu_1238_p0;
wire  signed [15:0] grp_fu_1238_p1;
wire  signed [15:0] grp_fu_1242_p0;
wire  signed [15:0] grp_fu_1247_p0;
wire  signed [15:0] grp_fu_1252_p0;
wire  signed [15:0] grp_fu_1257_p0;
wire  signed [15:0] grp_fu_1262_p0;
wire  signed [15:0] grp_fu_1267_p0;
reg   [29:0] ap_NS_fsm;
wire   [12:0] tmp5_0_0_0_fu_611_p10;
wire   [12:0] tmp5_0_1_0_fu_623_p10;
wire   [12:0] tmp5_0_2_0_fu_635_p10;
wire   [11:0] tmp7_0_fu_647_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
end

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_6_reg_1600),
    .din1(input_load_213_reg_1595),
    .ce(1'b1),
    .dout(grp_fu_1176_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_7_reg_1620),
    .din1(input_load_214_reg_1615),
    .ce(1'b1),
    .dout(grp_fu_1182_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_8_reg_1630),
    .din1(input_load_215_reg_1625),
    .ce(1'b1),
    .dout(grp_fu_1188_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_reg_1485),
    .din1(reg_390),
    .ce(1'b1),
    .dout(grp_fu_1194_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U111(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_1_reg_1510),
    .din1(reg_395),
    .ce(1'b1),
    .dout(grp_fu_1200_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U112(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_2_reg_1520),
    .din1(input_load_209_reg_1515),
    .ce(1'b1),
    .dout(grp_fu_1206_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U113(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_3_reg_1550),
    .din1(input_load_210_reg_1545),
    .ce(1'b1),
    .dout(grp_fu_1212_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U114(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_4_reg_1560),
    .din1(input_load_211_reg_1555),
    .ce(1'b1),
    .dout(grp_fu_1218_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U115(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_5_reg_1590),
    .din1(input_load_212_reg_1585),
    .ce(1'b1),
    .dout(grp_fu_1224_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U116(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1230_p0),
    .din1(grp_fu_1230_p1),
    .ce(1'b1),
    .dout(grp_fu_1230_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U117(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1234_p0),
    .din1(grp_fu_1234_p1),
    .ce(1'b1),
    .dout(grp_fu_1234_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U118(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1238_p0),
    .din1(grp_fu_1238_p1),
    .ce(1'b1),
    .dout(grp_fu_1238_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U119(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1242_p0),
    .din1(reg_390),
    .ce(1'b1),
    .dout(grp_fu_1242_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U120(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1247_p0),
    .din1(reg_395),
    .ce(1'b1),
    .dout(grp_fu_1247_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1252_p0),
    .din1(reg_390),
    .ce(1'b1),
    .dout(grp_fu_1252_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U122(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1257_p0),
    .din1(reg_395),
    .ce(1'b1),
    .dout(grp_fu_1257_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U123(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1262_p0),
    .din1(reg_390),
    .ce(1'b1),
    .dout(grp_fu_1262_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U124(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1267_p0),
    .din1(reg_395),
    .ce(1'b1),
    .dout(grp_fu_1267_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_569_p2 == 1'd1))) begin
        out_d_0_reg_332 <= out_d_reg_1318;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_d_0_reg_332 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_433_p2 == 1'd0))) begin
        out_h_0_reg_367 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & ((icmp_ln21_1_reg_1481 == 1'd1) | (icmp_ln21_reg_1434 == 1'd1)))) begin
        out_h_0_reg_367 <= out_h_reg_1376;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_w_0_0_reg_378 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        out_w_0_0_reg_378 <= add_ln21_reg_1837;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_569_p2 == 1'd1))) begin
        phi_mul2_reg_355 <= add_ln19_reg_1305;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul2_reg_355 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_569_p2 == 1'd1))) begin
        phi_mul_reg_343 <= add_ln19_100_reg_1310;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_343 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_390 <= input_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_390 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln19_100_reg_1310 <= add_ln19_100_fu_428_p2;
        add_ln19_reg_1305 <= add_ln19_fu_423_p2;
        out_d_reg_1318 <= out_d_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (icmp_ln21_1_reg_1481 == 1'd0) & (icmp_ln21_reg_1434 == 1'd0))) begin
        add_ln21_reg_1837 <= add_ln21_fu_968_p2;
        add_ln28_64_reg_1818[16 : 1] <= add_ln28_64_fu_954_p2[16 : 1];
        add_ln28_66_reg_1825[16 : 1] <= add_ln28_66_fu_959_p2[16 : 1];
        add_ln36_1_reg_1832 <= add_ln36_1_fu_964_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_656_p2 == 1'd0))) begin
        add_ln28_45_reg_1445 <= add_ln28_45_fu_665_p2;
        add_ln28_47_reg_1450 <= add_ln28_47_fu_670_p2;
        zext_ln28_31_reg_1438[15 : 0] <= zext_ln28_31_fu_661_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln28_46_reg_1471 <= add_ln28_46_fu_690_p2;
        add_ln28_48_reg_1476 <= add_ln28_48_fu_695_p2;
        icmp_ln21_1_reg_1481 <= icmp_ln21_1_fu_699_p2;
        zext_ln28_33_reg_1462[15 : 1] <= zext_ln28_33_fu_686_p1[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln28_49_reg_1500 <= add_ln28_49_fu_712_p2;
        add_ln28_50_reg_1505 <= add_ln28_50_fu_716_p2;
        kernel_0_load_reg_1485 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln28_51_reg_1535 <= add_ln28_51_fu_728_p2;
        add_ln28_52_reg_1540 <= add_ln28_52_fu_732_p2;
        input_load_209_reg_1515 <= input_r_q1;
        kernel_0_load_1_reg_1510 <= kernel_0_q0;
        kernel_0_load_2_reg_1520 <= kernel_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln28_53_reg_1575 <= add_ln28_53_fu_744_p2;
        add_ln28_54_reg_1580 <= add_ln28_54_fu_748_p2;
        input_load_210_reg_1545 <= input_r_q1;
        input_load_211_reg_1555 <= input_r_q0;
        kernel_0_load_3_reg_1550 <= kernel_0_q1;
        kernel_0_load_4_reg_1560 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln28_55_reg_1793 <= add_ln28_55_fu_909_p2;
        add_ln28_57_reg_1798 <= add_ln28_57_fu_920_p2;
        add_ln28_62_reg_1803 <= add_ln28_62_fu_932_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln28_61_reg_1788 <= add_ln28_61_fu_849_p2;
        bias_load_reg_1752 <= bias_q0;
        mul_ln28_18_reg_1763 <= grp_fu_1200_p2;
        mul_ln28_19_reg_1768 <= grp_fu_1206_p2;
        mul_ln28_20_reg_1773 <= grp_fu_1212_p2;
        mul_ln28_21_reg_1778 <= grp_fu_1218_p2;
        mul_ln28_22_reg_1783 <= grp_fu_1224_p2;
        mul_ln28_reg_1758 <= grp_fu_1194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln28_63_reg_1808 <= add_ln28_63_fu_941_p2;
        add_ln36_reg_1813 <= add_ln36_fu_946_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln28_65_reg_1842 <= add_ln28_65_fu_974_p2;
        add_ln28_67_reg_1847 <= add_ln28_67_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln28_68_reg_1872 <= add_ln28_68_fu_990_p2;
        add_ln28_69_reg_1877 <= add_ln28_69_fu_994_p2;
        add_ln28_70_reg_1887 <= add_ln28_70_fu_998_p2;
        add_ln28_71_reg_1892 <= add_ln28_71_fu_1002_p2;
        mul_ln28_26_reg_1852 <= grp_fu_1230_p2;
        mul_ln28_29_reg_1867 <= grp_fu_1234_p2;
        mul_ln28_32_reg_1882 <= grp_fu_1238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln28_72_reg_1917 <= add_ln28_72_fu_1041_p2;
        trunc_ln28_27_reg_1897 <= {{mul_ln28_29_reg_1867[29:14]}};
        trunc_ln28_30_reg_1912 <= {{mul_ln28_32_reg_1882[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln28_74_reg_1982 <= add_ln28_74_fu_1101_p2;
        mul_ln28_30_reg_1972 <= grp_fu_1252_p2;
        mul_ln28_31_reg_1977 <= grp_fu_1257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        add_ln28_78_reg_2007 <= add_ln28_78_fu_1149_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln28_79_reg_2012 <= add_ln28_79_fu_1158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln28_80_reg_2017 <= add_ln28_80_fu_1167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_433_p2 == 1'd0))) begin
        bias_addr_reg_1323 <= zext_ln23_fu_445_p1;
        kernel_0_addr_1_reg_1333 <= zext_ln28_15_fu_487_p1;
        kernel_0_addr_2_reg_1338 <= zext_ln28_16_fu_498_p1;
        kernel_0_addr_3_reg_1343 <= zext_ln28_17_fu_509_p1;
        kernel_0_addr_4_reg_1348 <= zext_ln28_18_fu_520_p1;
        kernel_0_addr_5_reg_1353 <= zext_ln28_19_fu_531_p1;
        kernel_0_addr_6_reg_1358 <= zext_ln28_20_fu_542_p1;
        kernel_0_addr_7_reg_1363 <= zext_ln28_21_fu_553_p1;
        kernel_0_addr_8_reg_1368 <= zext_ln28_22_fu_564_p1;
        kernel_0_addr_reg_1328[5 : 0] <= zext_ln28_14_fu_476_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_1300 <= empty_fu_419_p1;
        output_width_cast_reg_1272[4 : 0] <= output_width_cast_fu_399_p1[4 : 0];
        zext_ln19_cast_reg_1295[4 : 0] <= zext_ln19_cast_fu_415_p1[4 : 0];
        zext_ln28_reg_1278[5 : 0] <= zext_ln28_fu_403_p1[5 : 0];
        zext_ln36_3_reg_1290[4 : 0] <= zext_ln36_3_fu_411_p1[4 : 0];
        zext_ln36_reg_1283[5 : 0] <= zext_ln36_fu_407_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln21_reg_1434 <= icmp_ln21_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_load_212_reg_1585 <= input_r_q1;
        input_load_213_reg_1595 <= input_r_q0;
        kernel_0_load_5_reg_1590 <= kernel_0_q1;
        kernel_0_load_6_reg_1600 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_load_214_reg_1615 <= input_r_q1;
        input_load_215_reg_1625 <= input_r_q0;
        kernel_0_load_7_reg_1620 <= kernel_0_q1;
        kernel_0_load_8_reg_1630 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_ln28_23_reg_1737 <= grp_fu_1176_p2;
        mul_ln28_24_reg_1742 <= grp_fu_1182_p2;
        mul_ln28_25_reg_1747 <= grp_fu_1188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        mul_ln28_27_reg_1952 <= grp_fu_1242_p2;
        mul_ln28_28_reg_1957 <= grp_fu_1247_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mul_ln28_33_reg_1997 <= grp_fu_1262_p2;
        mul_ln28_34_reg_2002 <= grp_fu_1267_p2;
        trunc_ln28_28_reg_1987 <= {{mul_ln28_30_reg_1972[29:14]}};
        trunc_ln28_29_reg_1992 <= {{mul_ln28_31_reg_1977[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_reg_1376 <= out_h_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_395 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sext_ln28_24_reg_1674 <= sext_ln28_24_fu_782_p1;
        sext_ln28_25_reg_1680 <= sext_ln28_25_fu_785_p1;
        sext_ln28_26_reg_1686 <= sext_ln28_26_fu_789_p1;
        sext_ln28_28_reg_1697 <= sext_ln28_28_fu_795_p1;
        sext_ln28_30_reg_1708 <= sext_ln28_30_fu_801_p1;
        sext_ln28_31_reg_1714 <= sext_ln28_31_fu_804_p1;
        sext_ln28_32_reg_1720 <= sext_ln28_32_fu_807_p1;
        sext_ln28_34_reg_1731 <= sext_ln28_34_fu_813_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sext_ln28_36_reg_1640 <= sext_ln28_36_fu_763_p1;
        sext_ln28_37_reg_1646 <= sext_ln28_37_fu_766_p1;
        sext_ln28_38_reg_1652 <= sext_ln28_38_fu_769_p1;
        sext_ln28_40_reg_1663 <= sext_ln28_40_fu_775_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp5_0_0_0_cast_reg_1401[12 : 0] <= tmp5_0_0_0_cast_fu_616_p1[12 : 0];
        tmp5_0_1_0_cast_reg_1410[12 : 0] <= tmp5_0_1_0_cast_fu_628_p1[12 : 0];
        tmp5_0_2_0_cast_reg_1419[12 : 0] <= tmp5_0_2_0_cast_fu_640_p1[12 : 0];
        tmp7_0_cast_reg_1428[11 : 0] <= tmp7_0_cast_fu_652_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_569_p2 == 1'd0))) begin
        tmp6_0_reg_1396 <= tmp6_0_fu_602_p2;
        tmp_0_0_0_reg_1381 <= tmp_0_0_0_fu_584_p2;
        tmp_0_1_0_reg_1386 <= tmp_0_1_0_fu_590_p2;
        tmp_0_2_0_reg_1391 <= tmp_0_2_0_fu_596_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_433_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_433_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        input_r_address0 = zext_ln28_47_fu_1058_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input_r_address0 = zext_ln28_45_fu_1028_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        input_r_address0 = zext_ln28_43_fu_986_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = zext_ln28_41_fu_756_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = zext_ln28_39_fu_740_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = zext_ln28_37_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = zext_ln28_34_fu_704_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln28_32_fu_676_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        input_r_address1 = zext_ln28_46_fu_1054_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input_r_address1 = zext_ln28_44_fu_1024_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        input_r_address1 = zext_ln28_42_fu_982_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address1 = zext_ln28_40_fu_752_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address1 = zext_ln28_38_fu_736_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address1 = zext_ln28_36_fu_720_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address1 = zext_ln28_35_fu_708_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        kernel_0_address0 = kernel_0_addr_8_reg_1368;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_0_address0 = kernel_0_addr_6_reg_1358;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_0_address0 = kernel_0_addr_4_reg_1348;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_0_address0 = kernel_0_addr_1_reg_1333;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_0_address0 = kernel_0_addr_reg_1328;
    end else begin
        kernel_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        kernel_0_address1 = kernel_0_addr_7_reg_1363;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_0_address1 = kernel_0_addr_5_reg_1353;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_0_address1 = kernel_0_addr_3_reg_1343;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_0_address1 = kernel_0_addr_2_reg_1338;
    end else begin
        kernel_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        kernel_0_ce0 = 1'b1;
    end else begin
        kernel_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        kernel_0_ce1 = 1'b1;
    end else begin
        kernel_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_address0 = zext_ln36_5_fu_1172_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_r_address0 = zext_ln36_4_fu_950_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state18))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        output_r_d0 = add_ln28_80_reg_2017;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        output_r_d0 = add_ln28_63_reg_1808;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((1'b1 == ap_CS_fsm_state18) & (icmp_ln21_reg_1434 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_433_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln20_fu_569_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_656_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & ((icmp_ln21_1_reg_1481 == 1'd1) | (icmp_ln21_reg_1434 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_100_fu_428_p2 = (phi_mul_reg_343 + zext_ln28_reg_1278);

assign add_ln19_fu_423_p2 = (phi_mul2_reg_355 + zext_ln36_3_reg_1290);

assign add_ln21_fu_968_p2 = (out_w_0_0_reg_378 + 16'd2);

assign add_ln28_37_fu_481_p2 = (7'd1 + zext_ln28_30_fu_472_p1);

assign add_ln28_38_fu_492_p2 = (7'd2 + zext_ln28_30_fu_472_p1);

assign add_ln28_39_fu_503_p2 = (7'd3 + zext_ln28_30_fu_472_p1);

assign add_ln28_40_fu_514_p2 = (7'd4 + zext_ln28_30_fu_472_p1);

assign add_ln28_41_fu_525_p2 = (7'd5 + zext_ln28_30_fu_472_p1);

assign add_ln28_42_fu_536_p2 = (7'd6 + zext_ln28_30_fu_472_p1);

assign add_ln28_43_fu_547_p2 = (7'd7 + zext_ln28_30_fu_472_p1);

assign add_ln28_44_fu_558_p2 = (7'd8 + zext_ln28_30_fu_472_p1);

assign add_ln28_45_fu_665_p2 = (tmp5_0_0_0_cast_reg_1401 + zext_ln28_31_fu_661_p1);

assign add_ln28_46_fu_690_p2 = (zext_ln28_33_fu_686_p1 + tmp5_0_0_0_cast_reg_1401);

assign add_ln28_47_fu_670_p2 = (zext_ln28_31_fu_661_p1 + 17'd2);

assign add_ln28_48_fu_695_p2 = (add_ln28_47_reg_1450 + tmp5_0_0_0_cast_reg_1401);

assign add_ln28_49_fu_712_p2 = (tmp5_0_1_0_cast_reg_1410 + zext_ln28_31_reg_1438);

assign add_ln28_50_fu_716_p2 = (zext_ln28_33_reg_1462 + tmp5_0_1_0_cast_reg_1410);

assign add_ln28_51_fu_728_p2 = (add_ln28_47_reg_1450 + tmp5_0_1_0_cast_reg_1410);

assign add_ln28_52_fu_732_p2 = (tmp5_0_2_0_cast_reg_1419 + zext_ln28_31_reg_1438);

assign add_ln28_53_fu_744_p2 = (zext_ln28_33_reg_1462 + tmp5_0_2_0_cast_reg_1419);

assign add_ln28_54_fu_748_p2 = (add_ln28_47_reg_1450 + tmp5_0_2_0_cast_reg_1419);

assign add_ln28_55_fu_909_p2 = (bias_load_reg_1752 + trunc_ln_fu_855_p4);

assign add_ln28_56_fu_914_p2 = (trunc_ln28_17_fu_873_p4 + trunc_ln28_18_fu_882_p4);

assign add_ln28_57_fu_920_p2 = (add_ln28_56_fu_914_p2 + trunc_ln28_s_fu_864_p4);

assign add_ln28_58_fu_937_p2 = (add_ln28_57_reg_1798 + add_ln28_55_reg_1793);

assign add_ln28_59_fu_926_p2 = (trunc_ln28_19_fu_891_p4 + trunc_ln28_20_fu_900_p4);

assign add_ln28_60_fu_843_p2 = (trunc_ln28_22_fu_825_p4 + trunc_ln28_23_fu_834_p4);

assign add_ln28_61_fu_849_p2 = (add_ln28_60_fu_843_p2 + trunc_ln28_21_fu_816_p4);

assign add_ln28_62_fu_932_p2 = (add_ln28_61_reg_1788 + add_ln28_59_fu_926_p2);

assign add_ln28_63_fu_941_p2 = (add_ln28_62_reg_1803 + add_ln28_58_fu_937_p2);

assign add_ln28_64_fu_954_p2 = (zext_ln28_33_reg_1462 + 17'd1);

assign add_ln28_65_fu_974_p2 = (add_ln28_64_reg_1818 + tmp5_0_0_0_cast_reg_1401);

assign add_ln28_66_fu_959_p2 = (zext_ln28_33_reg_1462 + 17'd2);

assign add_ln28_67_fu_978_p2 = (add_ln28_66_reg_1825 + tmp5_0_0_0_cast_reg_1401);

assign add_ln28_68_fu_990_p2 = (add_ln28_64_reg_1818 + tmp5_0_1_0_cast_reg_1410);

assign add_ln28_69_fu_994_p2 = (add_ln28_66_reg_1825 + tmp5_0_1_0_cast_reg_1410);

assign add_ln28_70_fu_998_p2 = (add_ln28_64_reg_1818 + tmp5_0_2_0_cast_reg_1419);

assign add_ln28_71_fu_1002_p2 = (add_ln28_66_reg_1825 + tmp5_0_2_0_cast_reg_1419);

assign add_ln28_72_fu_1041_p2 = (bias_load_reg_1752 + trunc_ln28_24_fu_1006_p4);

assign add_ln28_73_fu_1096_p2 = (trunc_ln28_26_fu_1087_p4 + trunc_ln28_27_reg_1897);

assign add_ln28_74_fu_1101_p2 = (add_ln28_73_fu_1096_p2 + trunc_ln28_25_fu_1078_p4);

assign add_ln28_75_fu_1163_p2 = (add_ln28_74_reg_1982 + add_ln28_72_reg_1917);

assign add_ln28_76_fu_1154_p2 = (trunc_ln28_28_reg_1987 + trunc_ln28_29_reg_1992);

assign add_ln28_77_fu_1143_p2 = (trunc_ln28_31_fu_1125_p4 + trunc_ln28_32_fu_1134_p4);

assign add_ln28_78_fu_1149_p2 = (add_ln28_77_fu_1143_p2 + trunc_ln28_30_reg_1912);

assign add_ln28_79_fu_1158_p2 = (add_ln28_78_reg_2007 + add_ln28_76_fu_1154_p2);

assign add_ln28_80_fu_1167_p2 = (add_ln28_79_reg_2012 + add_ln28_75_fu_1163_p2);

assign add_ln28_fu_466_p2 = (zext_ln28_29_fu_450_p1 + shl_ln_fu_458_p3);

assign add_ln36_1_fu_964_p2 = (tmp7_0_cast_reg_1428 + zext_ln28_33_reg_1462);

assign add_ln36_fu_946_p2 = (tmp7_0_cast_reg_1428 + zext_ln28_31_reg_1438);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_1323;

assign empty_fu_419_p1 = output_height[3:0];

assign grp_fu_1230_p0 = sext_ln28_24_reg_1674;

assign grp_fu_1230_p1 = sext_ln28_25_reg_1680;

assign grp_fu_1234_p0 = sext_ln28_30_reg_1708;

assign grp_fu_1234_p1 = sext_ln28_31_reg_1714;

assign grp_fu_1238_p0 = sext_ln28_36_reg_1640;

assign grp_fu_1238_p1 = sext_ln28_37_reg_1646;

assign grp_fu_1242_p0 = sext_ln28_26_reg_1686;

assign grp_fu_1247_p0 = sext_ln28_28_reg_1697;

assign grp_fu_1252_p0 = sext_ln28_32_reg_1720;

assign grp_fu_1257_p0 = sext_ln28_34_reg_1731;

assign grp_fu_1262_p0 = sext_ln28_38_reg_1652;

assign grp_fu_1267_p0 = sext_ln28_40_reg_1663;

assign icmp_ln19_fu_433_p2 = ((out_d_0_reg_332 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_569_p2 = ((out_h_0_reg_367 == empty_reg_1300) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_699_p2 = ((or_ln28_fu_680_p2 == output_width_cast_reg_1272) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_656_p2 = ((out_w_0_0_reg_378 == output_width_cast_reg_1272) ? 1'b1 : 1'b0);

assign or_ln28_fu_680_p2 = (out_w_0_0_reg_378 | 16'd1);

assign out_d_fu_439_p2 = (out_d_0_reg_332 + 4'd1);

assign out_h_fu_574_p2 = (out_h_0_reg_367 + 4'd1);

assign output_width_cast_fu_399_p1 = output_width;

assign sext_ln28_24_fu_782_p1 = kernel_0_load_reg_1485;

assign sext_ln28_25_fu_785_p1 = reg_395;

assign sext_ln28_26_fu_789_p1 = kernel_0_load_1_reg_1510;

assign sext_ln28_28_fu_795_p1 = kernel_0_load_2_reg_1520;

assign sext_ln28_30_fu_801_p1 = kernel_0_load_3_reg_1550;

assign sext_ln28_31_fu_804_p1 = input_load_211_reg_1555;

assign sext_ln28_32_fu_807_p1 = kernel_0_load_4_reg_1560;

assign sext_ln28_34_fu_813_p1 = kernel_0_load_5_reg_1590;

assign sext_ln28_36_fu_763_p1 = kernel_0_load_6_reg_1600;

assign sext_ln28_37_fu_766_p1 = input_load_214_reg_1615;

assign sext_ln28_38_fu_769_p1 = kernel_0_load_7_reg_1620;

assign sext_ln28_40_fu_775_p1 = kernel_0_load_8_reg_1630;

assign shl_ln_fu_458_p3 = {{trunc_ln28_fu_454_p1}, {3'd0}};

assign tmp5_0_0_0_cast_fu_616_p1 = tmp5_0_0_0_fu_611_p2;

assign tmp5_0_0_0_fu_611_p0 = zext_ln36_reg_1283;

assign tmp5_0_0_0_fu_611_p1 = tmp5_0_0_0_fu_611_p10;

assign tmp5_0_0_0_fu_611_p10 = tmp_0_0_0_reg_1381;

assign tmp5_0_0_0_fu_611_p2 = (tmp5_0_0_0_fu_611_p0 * tmp5_0_0_0_fu_611_p1);

assign tmp5_0_1_0_cast_fu_628_p1 = tmp5_0_1_0_fu_623_p2;

assign tmp5_0_1_0_fu_623_p0 = zext_ln36_reg_1283;

assign tmp5_0_1_0_fu_623_p1 = tmp5_0_1_0_fu_623_p10;

assign tmp5_0_1_0_fu_623_p10 = tmp_0_1_0_reg_1386;

assign tmp5_0_1_0_fu_623_p2 = (tmp5_0_1_0_fu_623_p0 * tmp5_0_1_0_fu_623_p1);

assign tmp5_0_2_0_cast_fu_640_p1 = tmp5_0_2_0_fu_635_p2;

assign tmp5_0_2_0_fu_635_p0 = zext_ln36_reg_1283;

assign tmp5_0_2_0_fu_635_p1 = tmp5_0_2_0_fu_635_p10;

assign tmp5_0_2_0_fu_635_p10 = tmp_0_2_0_reg_1391;

assign tmp5_0_2_0_fu_635_p2 = (tmp5_0_2_0_fu_635_p0 * tmp5_0_2_0_fu_635_p1);

assign tmp6_0_fu_602_p2 = (zext_ln28_3_cast_fu_580_p1 + phi_mul2_reg_355);

assign tmp7_0_cast_fu_652_p1 = tmp7_0_fu_647_p2;

assign tmp7_0_fu_647_p0 = zext_ln19_cast_reg_1295;

assign tmp7_0_fu_647_p1 = tmp7_0_fu_647_p10;

assign tmp7_0_fu_647_p10 = tmp6_0_reg_1396;

assign tmp7_0_fu_647_p2 = (tmp7_0_fu_647_p0 * tmp7_0_fu_647_p1);

assign tmp_0_0_0_fu_584_p2 = (zext_ln28_3_cast_fu_580_p1 + phi_mul_reg_343);

assign tmp_0_1_0_fu_590_p2 = (tmp_0_0_0_fu_584_p2 + 7'd1);

assign tmp_0_2_0_fu_596_p2 = (tmp_0_0_0_fu_584_p2 + 7'd2);

assign trunc_ln28_17_fu_873_p4 = {{mul_ln28_19_reg_1768[29:14]}};

assign trunc_ln28_18_fu_882_p4 = {{mul_ln28_20_reg_1773[29:14]}};

assign trunc_ln28_19_fu_891_p4 = {{mul_ln28_21_reg_1778[29:14]}};

assign trunc_ln28_20_fu_900_p4 = {{mul_ln28_22_reg_1783[29:14]}};

assign trunc_ln28_21_fu_816_p4 = {{mul_ln28_23_reg_1737[29:14]}};

assign trunc_ln28_22_fu_825_p4 = {{mul_ln28_24_reg_1742[29:14]}};

assign trunc_ln28_23_fu_834_p4 = {{mul_ln28_25_reg_1747[29:14]}};

assign trunc_ln28_24_fu_1006_p4 = {{mul_ln28_26_reg_1852[29:14]}};

assign trunc_ln28_25_fu_1078_p4 = {{mul_ln28_27_reg_1952[29:14]}};

assign trunc_ln28_26_fu_1087_p4 = {{mul_ln28_28_reg_1957[29:14]}};

assign trunc_ln28_31_fu_1125_p4 = {{mul_ln28_33_reg_1997[29:14]}};

assign trunc_ln28_32_fu_1134_p4 = {{mul_ln28_34_reg_2002[29:14]}};

assign trunc_ln28_fu_454_p1 = out_d_0_reg_332[2:0];

assign trunc_ln28_s_fu_864_p4 = {{mul_ln28_18_reg_1763[29:14]}};

assign trunc_ln_fu_855_p4 = {{mul_ln28_reg_1758[29:14]}};

assign zext_ln19_cast_fu_415_p1 = output_width;

assign zext_ln23_fu_445_p1 = out_d_0_reg_332;

assign zext_ln28_14_fu_476_p1 = add_ln28_fu_466_p2;

assign zext_ln28_15_fu_487_p1 = add_ln28_37_fu_481_p2;

assign zext_ln28_16_fu_498_p1 = add_ln28_38_fu_492_p2;

assign zext_ln28_17_fu_509_p1 = add_ln28_39_fu_503_p2;

assign zext_ln28_18_fu_520_p1 = add_ln28_40_fu_514_p2;

assign zext_ln28_19_fu_531_p1 = add_ln28_41_fu_525_p2;

assign zext_ln28_20_fu_542_p1 = add_ln28_42_fu_536_p2;

assign zext_ln28_21_fu_553_p1 = add_ln28_43_fu_547_p2;

assign zext_ln28_22_fu_564_p1 = add_ln28_44_fu_558_p2;

assign zext_ln28_29_fu_450_p1 = out_d_0_reg_332;

assign zext_ln28_30_fu_472_p1 = add_ln28_fu_466_p2;

assign zext_ln28_31_fu_661_p1 = out_w_0_0_reg_378;

assign zext_ln28_32_fu_676_p1 = add_ln28_45_reg_1445;

assign zext_ln28_33_fu_686_p1 = or_ln28_fu_680_p2;

assign zext_ln28_34_fu_704_p1 = add_ln28_46_reg_1471;

assign zext_ln28_35_fu_708_p1 = add_ln28_48_reg_1476;

assign zext_ln28_36_fu_720_p1 = add_ln28_49_reg_1500;

assign zext_ln28_37_fu_724_p1 = add_ln28_50_reg_1505;

assign zext_ln28_38_fu_736_p1 = add_ln28_51_reg_1535;

assign zext_ln28_39_fu_740_p1 = add_ln28_52_reg_1540;

assign zext_ln28_3_cast_fu_580_p1 = out_h_0_reg_367;

assign zext_ln28_40_fu_752_p1 = add_ln28_53_reg_1575;

assign zext_ln28_41_fu_756_p1 = add_ln28_54_reg_1580;

assign zext_ln28_42_fu_982_p1 = add_ln28_65_reg_1842;

assign zext_ln28_43_fu_986_p1 = add_ln28_67_reg_1847;

assign zext_ln28_44_fu_1024_p1 = add_ln28_68_reg_1872;

assign zext_ln28_45_fu_1028_p1 = add_ln28_69_reg_1877;

assign zext_ln28_46_fu_1054_p1 = add_ln28_70_reg_1887;

assign zext_ln28_47_fu_1058_p1 = add_ln28_71_reg_1892;

assign zext_ln28_fu_403_p1 = input_height;

assign zext_ln36_3_fu_411_p1 = output_height;

assign zext_ln36_4_fu_950_p1 = add_ln36_reg_1813;

assign zext_ln36_5_fu_1172_p1 = add_ln36_1_reg_1832;

assign zext_ln36_fu_407_p1 = input_width;

always @ (posedge ap_clk) begin
    output_width_cast_reg_1272[15:5] <= 11'b00000000000;
    zext_ln28_reg_1278[6] <= 1'b0;
    zext_ln36_reg_1283[12:6] <= 7'b0000000;
    zext_ln36_3_reg_1290[6:5] <= 2'b00;
    zext_ln19_cast_reg_1295[11:5] <= 7'b0000000;
    kernel_0_addr_reg_1328[6] <= 1'b0;
    tmp5_0_0_0_cast_reg_1401[16:13] <= 4'b0000;
    tmp5_0_1_0_cast_reg_1410[16:13] <= 4'b0000;
    tmp5_0_2_0_cast_reg_1419[16:13] <= 4'b0000;
    tmp7_0_cast_reg_1428[16:12] <= 5'b00000;
    zext_ln28_31_reg_1438[16] <= 1'b0;
    zext_ln28_33_reg_1462[0] <= 1'b1;
    zext_ln28_33_reg_1462[16] <= 1'b0;
    add_ln28_64_reg_1818[0] <= 1'b0;
    add_ln28_66_reg_1825[0] <= 1'b1;
end

endmodule //depthwise_conv2d_fix_1
