// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_0_address0,
        kernel_0_ce0,
        kernel_0_q0,
        kernel_0_address1,
        kernel_0_ce1,
        kernel_0_q1
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [7:0] kernel_0_address0;
output   kernel_0_ce0;
input  [15:0] kernel_0_q0;
output  [7:0] kernel_0_address1;
output   kernel_0_ce1;
input  [15:0] kernel_0_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;
reg bias_ce0;
reg[7:0] kernel_0_address0;
reg kernel_0_ce0;
reg[7:0] kernel_0_address1;
reg kernel_0_ce1;

(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] reg_394;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
reg  signed [15:0] reg_399;
wire    ap_CS_fsm_state9;
wire   [15:0] output_width_cast_fu_407_p1;
reg   [15:0] output_width_cast_reg_1271;
wire   [8:0] zext_ln28_fu_411_p1;
reg   [8:0] zext_ln28_reg_1277;
wire   [15:0] zext_ln36_1_fu_415_p1;
reg   [15:0] zext_ln36_1_reg_1282;
wire   [8:0] zext_ln36_fu_419_p1;
reg   [8:0] zext_ln36_reg_1289;
wire   [14:0] zext_ln36_1_cast_cas_fu_423_p1;
reg   [14:0] zext_ln36_1_cast_cas_reg_1294;
wire   [4:0] empty_fu_427_p1;
reg   [4:0] empty_reg_1299;
wire   [8:0] add_ln19_fu_431_p2;
reg   [8:0] add_ln19_reg_1304;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln19_98_fu_436_p2;
reg   [8:0] add_ln19_98_reg_1309;
wire   [4:0] out_d_fu_447_p2;
reg   [4:0] out_d_reg_1317;
reg   [3:0] bias_addr_reg_1322;
wire   [0:0] icmp_ln19_fu_441_p2;
wire   [7:0] add_ln28_fu_478_p2;
reg   [7:0] add_ln28_reg_1327;
reg   [7:0] kernel_0_addr_reg_1340;
wire    ap_CS_fsm_state3;
reg   [7:0] kernel_0_addr_1_reg_1345;
reg   [7:0] kernel_0_addr_2_reg_1350;
reg   [7:0] kernel_0_addr_3_reg_1355;
reg   [7:0] kernel_0_addr_4_reg_1360;
reg   [7:0] kernel_0_addr_5_reg_1365;
reg   [7:0] kernel_0_addr_6_reg_1370;
reg   [7:0] kernel_0_addr_7_reg_1375;
reg   [7:0] kernel_0_addr_8_reg_1380;
wire   [4:0] out_h_fu_573_p2;
reg   [4:0] out_h_reg_1388;
wire    ap_CS_fsm_state4;
wire   [8:0] tmp_0_0_0_fu_583_p2;
reg   [8:0] tmp_0_0_0_reg_1393;
wire   [0:0] icmp_ln20_fu_568_p2;
wire   [8:0] tmp_0_1_0_fu_589_p2;
reg   [8:0] tmp_0_1_0_reg_1398;
wire   [8:0] tmp_0_2_0_fu_595_p2;
reg   [8:0] tmp_0_2_0_reg_1403;
wire   [8:0] tmp6_0_fu_601_p2;
reg   [8:0] tmp6_0_reg_1408;
wire   [16:0] tmp5_0_0_0_cast_fu_615_p1;
reg   [16:0] tmp5_0_0_0_cast_reg_1413;
wire    ap_CS_fsm_state5;
wire   [16:0] tmp5_0_1_0_cast_fu_627_p1;
reg   [16:0] tmp5_0_1_0_cast_reg_1422;
wire   [16:0] tmp5_0_2_0_cast_fu_639_p1;
reg   [16:0] tmp5_0_2_0_cast_reg_1431;
wire   [16:0] tmp7_0_cast_fu_651_p1;
reg   [16:0] tmp7_0_cast_reg_1440;
wire   [0:0] icmp_ln21_fu_655_p2;
reg   [0:0] icmp_ln21_reg_1446;
wire    ap_CS_fsm_state6;
wire   [16:0] zext_ln28_12_fu_660_p1;
reg   [16:0] zext_ln28_12_reg_1450;
wire   [16:0] add_ln28_9_fu_664_p2;
reg   [16:0] add_ln28_9_reg_1457;
wire   [16:0] add_ln28_11_fu_669_p2;
reg   [16:0] add_ln28_11_reg_1462;
wire    ap_CS_fsm_state7;
wire   [16:0] zext_ln28_14_fu_685_p1;
reg   [16:0] zext_ln28_14_reg_1474;
wire   [16:0] add_ln28_10_fu_689_p2;
reg   [16:0] add_ln28_10_reg_1483;
wire   [16:0] add_ln28_12_fu_694_p2;
reg   [16:0] add_ln28_12_reg_1488;
wire   [0:0] icmp_ln21_1_fu_698_p2;
reg   [0:0] icmp_ln21_1_reg_1493;
reg  signed [15:0] kernel_0_load_reg_1497;
wire   [16:0] add_ln28_13_fu_711_p2;
reg   [16:0] add_ln28_13_reg_1512;
wire   [16:0] add_ln28_14_fu_715_p2;
reg   [16:0] add_ln28_14_reg_1517;
reg  signed [15:0] kernel_0_load_1_reg_1522;
reg  signed [15:0] input_load_195_reg_1527;
reg  signed [15:0] kernel_0_load_2_reg_1532;
wire   [16:0] add_ln28_15_fu_727_p2;
reg   [16:0] add_ln28_15_reg_1547;
wire   [16:0] add_ln28_16_fu_731_p2;
reg   [16:0] add_ln28_16_reg_1552;
reg  signed [15:0] input_load_196_reg_1557;
wire    ap_CS_fsm_state10;
reg  signed [15:0] kernel_0_load_3_reg_1562;
reg  signed [15:0] input_load_197_reg_1567;
reg  signed [15:0] kernel_0_load_4_reg_1572;
wire   [16:0] add_ln28_17_fu_743_p2;
reg   [16:0] add_ln28_17_reg_1587;
wire   [16:0] add_ln28_18_fu_747_p2;
reg   [16:0] add_ln28_18_reg_1592;
reg  signed [15:0] input_load_198_reg_1597;
wire    ap_CS_fsm_state11;
reg  signed [15:0] kernel_0_load_5_reg_1602;
reg  signed [15:0] input_load_199_reg_1607;
reg  signed [15:0] kernel_0_load_6_reg_1612;
reg  signed [15:0] input_load_200_reg_1627;
wire    ap_CS_fsm_state12;
reg  signed [15:0] kernel_0_load_7_reg_1632;
reg  signed [15:0] input_load_201_reg_1637;
reg  signed [15:0] kernel_0_load_8_reg_1642;
wire    ap_CS_fsm_state13;
wire  signed [29:0] sext_ln28_13_fu_762_p1;
reg  signed [29:0] sext_ln28_13_reg_1652;
wire  signed [29:0] sext_ln28_14_fu_765_p1;
reg  signed [29:0] sext_ln28_14_reg_1658;
wire  signed [29:0] sext_ln28_15_fu_768_p1;
reg  signed [29:0] sext_ln28_15_reg_1664;
wire  signed [29:0] sext_ln28_17_fu_774_p1;
reg  signed [29:0] sext_ln28_17_reg_1675;
wire    ap_CS_fsm_state14;
wire  signed [29:0] sext_ln28_1_fu_781_p1;
reg  signed [29:0] sext_ln28_1_reg_1686;
wire  signed [29:0] sext_ln28_2_fu_784_p1;
reg  signed [29:0] sext_ln28_2_reg_1692;
wire  signed [29:0] sext_ln28_3_fu_788_p1;
reg  signed [29:0] sext_ln28_3_reg_1698;
wire  signed [29:0] sext_ln28_5_fu_794_p1;
reg  signed [29:0] sext_ln28_5_reg_1709;
wire  signed [29:0] sext_ln28_7_fu_800_p1;
reg  signed [29:0] sext_ln28_7_reg_1720;
wire  signed [29:0] sext_ln28_8_fu_803_p1;
reg  signed [29:0] sext_ln28_8_reg_1726;
wire  signed [29:0] sext_ln28_9_fu_806_p1;
reg  signed [29:0] sext_ln28_9_reg_1732;
wire  signed [29:0] sext_ln28_11_fu_812_p1;
reg  signed [29:0] sext_ln28_11_reg_1743;
wire  signed [29:0] grp_fu_1175_p2;
reg  signed [29:0] mul_ln28_6_reg_1749;
wire    ap_CS_fsm_state15;
wire  signed [29:0] grp_fu_1181_p2;
reg  signed [29:0] mul_ln28_7_reg_1754;
wire  signed [29:0] grp_fu_1187_p2;
reg  signed [29:0] mul_ln28_8_reg_1759;
reg   [15:0] bias_load_reg_1764;
wire    ap_CS_fsm_state16;
wire  signed [29:0] grp_fu_1193_p2;
reg  signed [29:0] mul_ln28_reg_1770;
wire  signed [29:0] grp_fu_1199_p2;
reg  signed [29:0] mul_ln28_1_reg_1775;
wire  signed [29:0] grp_fu_1205_p2;
reg  signed [29:0] mul_ln28_2_reg_1780;
wire  signed [29:0] grp_fu_1211_p2;
reg  signed [29:0] mul_ln28_3_reg_1785;
wire  signed [29:0] grp_fu_1217_p2;
reg  signed [29:0] mul_ln28_4_reg_1790;
wire  signed [29:0] grp_fu_1223_p2;
reg  signed [29:0] mul_ln28_5_reg_1795;
wire   [15:0] add_ln28_25_fu_848_p2;
reg   [15:0] add_ln28_25_reg_1800;
wire   [15:0] add_ln28_19_fu_908_p2;
reg   [15:0] add_ln28_19_reg_1805;
wire    ap_CS_fsm_state17;
wire   [15:0] add_ln28_21_fu_919_p2;
reg   [15:0] add_ln28_21_reg_1810;
wire   [15:0] add_ln28_26_fu_931_p2;
reg   [15:0] add_ln28_26_reg_1815;
wire   [15:0] add_ln28_27_fu_940_p2;
reg   [15:0] add_ln28_27_reg_1820;
wire    ap_CS_fsm_state18;
wire   [16:0] add_ln36_fu_945_p2;
reg   [16:0] add_ln36_reg_1825;
wire   [16:0] add_ln28_28_fu_953_p2;
reg   [16:0] add_ln28_28_reg_1830;
wire    ap_CS_fsm_state19;
wire   [16:0] add_ln28_30_fu_958_p2;
reg   [16:0] add_ln28_30_reg_1837;
wire   [16:0] add_ln36_1_fu_963_p2;
reg   [16:0] add_ln36_1_reg_1844;
wire   [15:0] add_ln21_fu_967_p2;
reg   [15:0] add_ln21_reg_1849;
wire   [16:0] add_ln28_29_fu_973_p2;
reg   [16:0] add_ln28_29_reg_1854;
wire    ap_CS_fsm_state20;
wire   [16:0] add_ln28_31_fu_977_p2;
reg   [16:0] add_ln28_31_reg_1859;
wire  signed [29:0] grp_fu_1229_p2;
reg  signed [29:0] mul_ln28_9_reg_1864;
wire    ap_CS_fsm_state21;
wire  signed [29:0] grp_fu_1233_p2;
reg  signed [29:0] mul_ln28_12_reg_1879;
wire   [16:0] add_ln28_32_fu_989_p2;
reg   [16:0] add_ln28_32_reg_1884;
wire   [16:0] add_ln28_33_fu_993_p2;
reg   [16:0] add_ln28_33_reg_1889;
wire  signed [29:0] grp_fu_1237_p2;
reg  signed [29:0] mul_ln28_15_reg_1894;
wire   [16:0] add_ln28_34_fu_997_p2;
reg   [16:0] add_ln28_34_reg_1899;
wire   [16:0] add_ln28_35_fu_1001_p2;
reg   [16:0] add_ln28_35_reg_1904;
reg   [15:0] trunc_ln28_11_reg_1909;
reg   [15:0] trunc_ln28_14_reg_1924;
wire   [15:0] add_ln28_36_fu_1040_p2;
reg   [15:0] add_ln28_36_reg_1929;
wire  signed [29:0] grp_fu_1241_p2;
reg  signed [29:0] mul_ln28_10_reg_1964;
wire    ap_CS_fsm_state25;
wire  signed [29:0] grp_fu_1246_p2;
reg  signed [29:0] mul_ln28_11_reg_1969;
wire  signed [29:0] grp_fu_1251_p2;
reg  signed [29:0] mul_ln28_13_reg_1984;
wire    ap_CS_fsm_state26;
wire  signed [29:0] grp_fu_1256_p2;
reg  signed [29:0] mul_ln28_14_reg_1989;
wire   [15:0] add_ln28_38_fu_1100_p2;
reg   [15:0] add_ln28_38_reg_1994;
reg   [15:0] trunc_ln28_12_reg_1999;
wire    ap_CS_fsm_state27;
reg   [15:0] trunc_ln28_13_reg_2004;
wire  signed [29:0] grp_fu_1261_p2;
reg  signed [29:0] mul_ln28_16_reg_2009;
wire  signed [29:0] grp_fu_1266_p2;
reg  signed [29:0] mul_ln28_17_reg_2014;
wire   [15:0] add_ln28_42_fu_1148_p2;
reg   [15:0] add_ln28_42_reg_2019;
wire    ap_CS_fsm_state28;
wire   [15:0] add_ln28_43_fu_1157_p2;
reg   [15:0] add_ln28_43_reg_2024;
wire    ap_CS_fsm_state29;
wire   [15:0] add_ln28_44_fu_1166_p2;
reg   [15:0] add_ln28_44_reg_2029;
wire    ap_CS_fsm_state30;
reg   [4:0] out_d_0_reg_336;
reg   [8:0] phi_mul_reg_347;
reg   [8:0] phi_mul2_reg_359;
reg   [4:0] out_h_0_reg_371;
reg   [15:0] out_w_0_0_reg_382;
wire    ap_CS_fsm_state31;
wire   [63:0] zext_ln23_fu_453_p1;
wire   [63:0] zext_ln28_3_fu_484_p1;
wire   [63:0] zext_ln28_4_fu_493_p1;
wire   [63:0] zext_ln28_5_fu_503_p1;
wire   [63:0] zext_ln28_6_fu_513_p1;
wire   [63:0] zext_ln28_7_fu_523_p1;
wire   [63:0] zext_ln28_8_fu_533_p1;
wire   [63:0] zext_ln28_9_fu_543_p1;
wire   [63:0] zext_ln28_10_fu_553_p1;
wire   [63:0] zext_ln28_11_fu_563_p1;
wire   [63:0] zext_ln28_13_fu_675_p1;
wire   [63:0] zext_ln28_15_fu_703_p1;
wire   [63:0] zext_ln28_16_fu_707_p1;
wire   [63:0] zext_ln28_17_fu_719_p1;
wire   [63:0] zext_ln28_18_fu_723_p1;
wire   [63:0] zext_ln28_19_fu_735_p1;
wire   [63:0] zext_ln28_20_fu_739_p1;
wire   [63:0] zext_ln28_21_fu_751_p1;
wire   [63:0] zext_ln28_22_fu_755_p1;
wire   [63:0] zext_ln36_2_fu_949_p1;
wire   [63:0] zext_ln28_23_fu_981_p1;
wire   [63:0] zext_ln28_24_fu_985_p1;
wire   [63:0] zext_ln28_25_fu_1023_p1;
wire   [63:0] zext_ln28_26_fu_1027_p1;
wire   [63:0] zext_ln28_27_fu_1053_p1;
wire   [63:0] zext_ln28_28_fu_1057_p1;
wire   [63:0] zext_ln36_3_fu_1171_p1;
wire  signed [6:0] input_width_cast_fu_403_p1;
wire   [3:0] trunc_ln28_fu_462_p1;
wire   [6:0] shl_ln_fu_466_p3;
wire   [7:0] zext_ln28_1_fu_458_p1;
wire   [7:0] zext_ln28_2_fu_474_p1;
wire   [7:0] add_ln28_1_fu_488_p2;
wire   [7:0] add_ln28_2_fu_498_p2;
wire   [7:0] add_ln28_3_fu_508_p2;
wire   [7:0] add_ln28_4_fu_518_p2;
wire   [7:0] add_ln28_5_fu_528_p2;
wire   [7:0] add_ln28_6_fu_538_p2;
wire   [7:0] add_ln28_7_fu_548_p2;
wire   [7:0] add_ln28_8_fu_558_p2;
wire   [8:0] zext_ln28_3_cast_fu_579_p1;
wire   [6:0] tmp5_0_0_0_fu_610_p0;
wire   [8:0] tmp5_0_0_0_fu_610_p1;
wire   [15:0] tmp5_0_0_0_fu_610_p2;
wire   [6:0] tmp5_0_1_0_fu_622_p0;
wire   [8:0] tmp5_0_1_0_fu_622_p1;
wire   [15:0] tmp5_0_1_0_fu_622_p2;
wire   [6:0] tmp5_0_2_0_fu_634_p0;
wire   [8:0] tmp5_0_2_0_fu_634_p1;
wire   [15:0] tmp5_0_2_0_fu_634_p2;
wire   [5:0] tmp7_0_fu_646_p0;
wire   [8:0] tmp7_0_fu_646_p1;
wire   [14:0] tmp7_0_fu_646_p2;
wire   [15:0] or_ln28_fu_679_p2;
wire   [15:0] trunc_ln28_6_fu_824_p4;
wire   [15:0] trunc_ln28_7_fu_833_p4;
wire   [15:0] add_ln28_24_fu_842_p2;
wire   [15:0] trunc_ln28_5_fu_815_p4;
wire   [15:0] trunc_ln_fu_854_p4;
wire   [15:0] trunc_ln28_1_fu_872_p4;
wire   [15:0] trunc_ln28_2_fu_881_p4;
wire   [15:0] add_ln28_20_fu_913_p2;
wire   [15:0] trunc_ln28_s_fu_863_p4;
wire   [15:0] trunc_ln28_3_fu_890_p4;
wire   [15:0] trunc_ln28_4_fu_899_p4;
wire   [15:0] add_ln28_23_fu_925_p2;
wire   [15:0] add_ln28_22_fu_936_p2;
wire   [15:0] trunc_ln28_8_fu_1005_p4;
wire   [15:0] trunc_ln28_10_fu_1086_p4;
wire   [15:0] add_ln28_37_fu_1095_p2;
wire   [15:0] trunc_ln28_9_fu_1077_p4;
wire   [15:0] trunc_ln28_15_fu_1124_p4;
wire   [15:0] trunc_ln28_16_fu_1133_p4;
wire   [15:0] add_ln28_41_fu_1142_p2;
wire   [15:0] add_ln28_40_fu_1153_p2;
wire   [15:0] add_ln28_39_fu_1162_p2;
wire  signed [15:0] grp_fu_1229_p0;
wire  signed [15:0] grp_fu_1229_p1;
wire  signed [15:0] grp_fu_1233_p0;
wire  signed [15:0] grp_fu_1233_p1;
wire  signed [15:0] grp_fu_1237_p0;
wire  signed [15:0] grp_fu_1237_p1;
wire  signed [15:0] grp_fu_1241_p0;
wire  signed [15:0] grp_fu_1246_p0;
wire  signed [15:0] grp_fu_1251_p0;
wire  signed [15:0] grp_fu_1256_p0;
wire  signed [15:0] grp_fu_1261_p0;
wire  signed [15:0] grp_fu_1266_p0;
reg   [30:0] ap_NS_fsm;
wire   [15:0] tmp5_0_0_0_fu_610_p10;
wire   [15:0] tmp5_0_1_0_fu_622_p10;
wire   [15:0] tmp5_0_2_0_fu_634_p10;
wire   [14:0] tmp7_0_fu_646_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
end

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_6_reg_1612),
    .din1(input_load_199_reg_1607),
    .ce(1'b1),
    .dout(grp_fu_1175_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_7_reg_1632),
    .din1(input_load_200_reg_1627),
    .ce(1'b1),
    .dout(grp_fu_1181_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_8_reg_1642),
    .din1(input_load_201_reg_1637),
    .ce(1'b1),
    .dout(grp_fu_1187_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_reg_1497),
    .din1(reg_394),
    .ce(1'b1),
    .dout(grp_fu_1193_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_1_reg_1522),
    .din1(reg_399),
    .ce(1'b1),
    .dout(grp_fu_1199_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_2_reg_1532),
    .din1(input_load_195_reg_1527),
    .ce(1'b1),
    .dout(grp_fu_1205_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_3_reg_1562),
    .din1(input_load_196_reg_1557),
    .ce(1'b1),
    .dout(grp_fu_1211_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_4_reg_1572),
    .din1(input_load_197_reg_1567),
    .ce(1'b1),
    .dout(grp_fu_1217_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(kernel_0_load_5_reg_1602),
    .din1(input_load_198_reg_1597),
    .ce(1'b1),
    .dout(grp_fu_1223_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1229_p0),
    .din1(grp_fu_1229_p1),
    .ce(1'b1),
    .dout(grp_fu_1229_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1233_p0),
    .din1(grp_fu_1233_p1),
    .ce(1'b1),
    .dout(grp_fu_1233_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1237_p0),
    .din1(grp_fu_1237_p1),
    .ce(1'b1),
    .dout(grp_fu_1237_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1241_p0),
    .din1(reg_394),
    .ce(1'b1),
    .dout(grp_fu_1241_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1246_p0),
    .din1(reg_399),
    .ce(1'b1),
    .dout(grp_fu_1246_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1251_p0),
    .din1(reg_394),
    .ce(1'b1),
    .dout(grp_fu_1251_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1256_p0),
    .din1(reg_399),
    .ce(1'b1),
    .dout(grp_fu_1256_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1261_p0),
    .din1(reg_394),
    .ce(1'b1),
    .dout(grp_fu_1261_p2)
);

network_mul_mul_16s_16s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_16s_30_3_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1266_p0),
    .din1(reg_399),
    .ce(1'b1),
    .dout(grp_fu_1266_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_568_p2 == 1'd1))) begin
        out_d_0_reg_336 <= out_d_reg_1317;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_d_0_reg_336 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_371 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state19) & ((icmp_ln21_1_reg_1493 == 1'd1) | (icmp_ln21_reg_1446 == 1'd1)))) begin
        out_h_0_reg_371 <= out_h_reg_1388;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_w_0_0_reg_382 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        out_w_0_0_reg_382 <= add_ln21_reg_1849;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_568_p2 == 1'd1))) begin
        phi_mul2_reg_359 <= add_ln19_reg_1304;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul2_reg_359 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_568_p2 == 1'd1))) begin
        phi_mul_reg_347 <= add_ln19_98_reg_1309;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_347 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_394 <= input_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_394 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln19_98_reg_1309 <= add_ln19_98_fu_436_p2;
        add_ln19_reg_1304 <= add_ln19_fu_431_p2;
        out_d_reg_1317 <= out_d_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (icmp_ln21_1_reg_1493 == 1'd0) & (icmp_ln21_reg_1446 == 1'd0))) begin
        add_ln21_reg_1849 <= add_ln21_fu_967_p2;
        add_ln28_28_reg_1830[16 : 1] <= add_ln28_28_fu_953_p2[16 : 1];
        add_ln28_30_reg_1837[16 : 1] <= add_ln28_30_fu_958_p2[16 : 1];
        add_ln36_1_reg_1844 <= add_ln36_1_fu_963_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln28_10_reg_1483 <= add_ln28_10_fu_689_p2;
        add_ln28_12_reg_1488 <= add_ln28_12_fu_694_p2;
        icmp_ln21_1_reg_1493 <= icmp_ln21_1_fu_698_p2;
        zext_ln28_14_reg_1474[15 : 1] <= zext_ln28_14_fu_685_p1[15 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_655_p2 == 1'd0))) begin
        add_ln28_11_reg_1462 <= add_ln28_11_fu_669_p2;
        add_ln28_9_reg_1457 <= add_ln28_9_fu_664_p2;
        zext_ln28_12_reg_1450[15 : 0] <= zext_ln28_12_fu_660_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln28_13_reg_1512 <= add_ln28_13_fu_711_p2;
        add_ln28_14_reg_1517 <= add_ln28_14_fu_715_p2;
        kernel_0_load_reg_1497 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln28_15_reg_1547 <= add_ln28_15_fu_727_p2;
        add_ln28_16_reg_1552 <= add_ln28_16_fu_731_p2;
        input_load_195_reg_1527 <= input_r_q1;
        kernel_0_load_1_reg_1522 <= kernel_0_q0;
        kernel_0_load_2_reg_1532 <= kernel_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln28_17_reg_1587 <= add_ln28_17_fu_743_p2;
        add_ln28_18_reg_1592 <= add_ln28_18_fu_747_p2;
        input_load_196_reg_1557 <= input_r_q1;
        input_load_197_reg_1567 <= input_r_q0;
        kernel_0_load_3_reg_1562 <= kernel_0_q1;
        kernel_0_load_4_reg_1572 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln28_19_reg_1805 <= add_ln28_19_fu_908_p2;
        add_ln28_21_reg_1810 <= add_ln28_21_fu_919_p2;
        add_ln28_26_reg_1815 <= add_ln28_26_fu_931_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln28_25_reg_1800 <= add_ln28_25_fu_848_p2;
        bias_load_reg_1764 <= bias_q0;
        mul_ln28_1_reg_1775 <= grp_fu_1199_p2;
        mul_ln28_2_reg_1780 <= grp_fu_1205_p2;
        mul_ln28_3_reg_1785 <= grp_fu_1211_p2;
        mul_ln28_4_reg_1790 <= grp_fu_1217_p2;
        mul_ln28_5_reg_1795 <= grp_fu_1223_p2;
        mul_ln28_reg_1770 <= grp_fu_1193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln28_27_reg_1820 <= add_ln28_27_fu_940_p2;
        add_ln36_reg_1825 <= add_ln36_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln28_29_reg_1854 <= add_ln28_29_fu_973_p2;
        add_ln28_31_reg_1859 <= add_ln28_31_fu_977_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln28_32_reg_1884 <= add_ln28_32_fu_989_p2;
        add_ln28_33_reg_1889 <= add_ln28_33_fu_993_p2;
        add_ln28_34_reg_1899 <= add_ln28_34_fu_997_p2;
        add_ln28_35_reg_1904 <= add_ln28_35_fu_1001_p2;
        mul_ln28_12_reg_1879 <= grp_fu_1233_p2;
        mul_ln28_15_reg_1894 <= grp_fu_1237_p2;
        mul_ln28_9_reg_1864 <= grp_fu_1229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln28_36_reg_1929 <= add_ln28_36_fu_1040_p2;
        trunc_ln28_11_reg_1909 <= {{mul_ln28_12_reg_1879[29:14]}};
        trunc_ln28_14_reg_1924 <= {{mul_ln28_15_reg_1894[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln28_38_reg_1994 <= add_ln28_38_fu_1100_p2;
        mul_ln28_13_reg_1984 <= grp_fu_1251_p2;
        mul_ln28_14_reg_1989 <= grp_fu_1256_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln28_42_reg_2019 <= add_ln28_42_fu_1148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        add_ln28_43_reg_2024 <= add_ln28_43_fu_1157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        add_ln28_44_reg_2029 <= add_ln28_44_fu_1166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_441_p2 == 1'd0))) begin
        add_ln28_reg_1327 <= add_ln28_fu_478_p2;
        bias_addr_reg_1322 <= zext_ln23_fu_453_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_1299 <= empty_fu_427_p1;
        output_width_cast_reg_1271[5 : 0] <= output_width_cast_fu_407_p1[5 : 0];
        zext_ln28_reg_1277[6 : 0] <= zext_ln28_fu_411_p1[6 : 0];
        zext_ln36_1_cast_cas_reg_1294[5 : 0] <= zext_ln36_1_cast_cas_fu_423_p1[5 : 0];
        zext_ln36_1_reg_1282[6 : 0] <= zext_ln36_1_fu_415_p1[6 : 0];
        zext_ln36_reg_1289[5 : 0] <= zext_ln36_fu_419_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln21_reg_1446 <= icmp_ln21_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_load_198_reg_1597 <= input_r_q1;
        input_load_199_reg_1607 <= input_r_q0;
        kernel_0_load_5_reg_1602 <= kernel_0_q1;
        kernel_0_load_6_reg_1612 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_load_200_reg_1627 <= input_r_q1;
        input_load_201_reg_1637 <= input_r_q0;
        kernel_0_load_7_reg_1632 <= kernel_0_q1;
        kernel_0_load_8_reg_1642 <= kernel_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_0_addr_1_reg_1345 <= zext_ln28_4_fu_493_p1;
        kernel_0_addr_2_reg_1350 <= zext_ln28_5_fu_503_p1;
        kernel_0_addr_3_reg_1355 <= zext_ln28_6_fu_513_p1;
        kernel_0_addr_4_reg_1360 <= zext_ln28_7_fu_523_p1;
        kernel_0_addr_5_reg_1365 <= zext_ln28_8_fu_533_p1;
        kernel_0_addr_6_reg_1370 <= zext_ln28_9_fu_543_p1;
        kernel_0_addr_7_reg_1375 <= zext_ln28_10_fu_553_p1;
        kernel_0_addr_8_reg_1380 <= zext_ln28_11_fu_563_p1;
        kernel_0_addr_reg_1340 <= zext_ln28_3_fu_484_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        mul_ln28_10_reg_1964 <= grp_fu_1241_p2;
        mul_ln28_11_reg_1969 <= grp_fu_1246_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        mul_ln28_16_reg_2009 <= grp_fu_1261_p2;
        mul_ln28_17_reg_2014 <= grp_fu_1266_p2;
        trunc_ln28_12_reg_1999 <= {{mul_ln28_13_reg_1984[29:14]}};
        trunc_ln28_13_reg_2004 <= {{mul_ln28_14_reg_1989[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mul_ln28_6_reg_1749 <= grp_fu_1175_p2;
        mul_ln28_7_reg_1754 <= grp_fu_1181_p2;
        mul_ln28_8_reg_1759 <= grp_fu_1187_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_h_reg_1388 <= out_h_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_399 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        sext_ln28_11_reg_1743 <= sext_ln28_11_fu_812_p1;
        sext_ln28_1_reg_1686 <= sext_ln28_1_fu_781_p1;
        sext_ln28_2_reg_1692 <= sext_ln28_2_fu_784_p1;
        sext_ln28_3_reg_1698 <= sext_ln28_3_fu_788_p1;
        sext_ln28_5_reg_1709 <= sext_ln28_5_fu_794_p1;
        sext_ln28_7_reg_1720 <= sext_ln28_7_fu_800_p1;
        sext_ln28_8_reg_1726 <= sext_ln28_8_fu_803_p1;
        sext_ln28_9_reg_1732 <= sext_ln28_9_fu_806_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sext_ln28_13_reg_1652 <= sext_ln28_13_fu_762_p1;
        sext_ln28_14_reg_1658 <= sext_ln28_14_fu_765_p1;
        sext_ln28_15_reg_1664 <= sext_ln28_15_fu_768_p1;
        sext_ln28_17_reg_1675 <= sext_ln28_17_fu_774_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp5_0_0_0_cast_reg_1413[15 : 0] <= tmp5_0_0_0_cast_fu_615_p1[15 : 0];
        tmp5_0_1_0_cast_reg_1422[15 : 0] <= tmp5_0_1_0_cast_fu_627_p1[15 : 0];
        tmp5_0_2_0_cast_reg_1431[15 : 0] <= tmp5_0_2_0_cast_fu_639_p1[15 : 0];
        tmp7_0_cast_reg_1440[14 : 0] <= tmp7_0_cast_fu_651_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_568_p2 == 1'd0))) begin
        tmp6_0_reg_1408 <= tmp6_0_fu_601_p2;
        tmp_0_0_0_reg_1393 <= tmp_0_0_0_fu_583_p2;
        tmp_0_1_0_reg_1398 <= tmp_0_1_0_fu_589_p2;
        tmp_0_2_0_reg_1403 <= tmp_0_2_0_fu_595_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_441_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_441_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input_r_address0 = zext_ln28_28_fu_1057_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        input_r_address0 = zext_ln28_26_fu_1027_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input_r_address0 = zext_ln28_24_fu_985_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = zext_ln28_22_fu_755_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = zext_ln28_20_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = zext_ln28_18_fu_723_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = zext_ln28_15_fu_703_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = zext_ln28_13_fu_675_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input_r_address1 = zext_ln28_27_fu_1053_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        input_r_address1 = zext_ln28_25_fu_1023_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input_r_address1 = zext_ln28_23_fu_981_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address1 = zext_ln28_21_fu_751_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address1 = zext_ln28_19_fu_735_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address1 = zext_ln28_17_fu_719_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address1 = zext_ln28_16_fu_707_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state23))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state23))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        kernel_0_address0 = kernel_0_addr_8_reg_1380;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        kernel_0_address0 = kernel_0_addr_6_reg_1370;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_0_address0 = kernel_0_addr_4_reg_1360;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_0_address0 = kernel_0_addr_1_reg_1345;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        kernel_0_address0 = kernel_0_addr_reg_1340;
    end else begin
        kernel_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        kernel_0_address1 = kernel_0_addr_7_reg_1375;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        kernel_0_address1 = kernel_0_addr_5_reg_1365;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_0_address1 = kernel_0_addr_3_reg_1355;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        kernel_0_address1 = kernel_0_addr_2_reg_1350;
    end else begin
        kernel_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        kernel_0_ce0 = 1'b1;
    end else begin
        kernel_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        kernel_0_ce1 = 1'b1;
    end else begin
        kernel_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        output_r_address0 = zext_ln36_3_fu_1171_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_address0 = zext_ln36_2_fu_949_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        output_r_d0 = add_ln28_44_reg_2029;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        output_r_d0 = add_ln28_27_reg_1820;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | ((1'b1 == ap_CS_fsm_state19) & (icmp_ln21_reg_1446 == 1'd0)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_441_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln20_fu_568_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln21_fu_655_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & ((icmp_ln21_1_reg_1493 == 1'd1) | (icmp_ln21_reg_1446 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_98_fu_436_p2 = (phi_mul_reg_347 + zext_ln28_reg_1277);

assign add_ln19_fu_431_p2 = (phi_mul2_reg_359 + zext_ln36_reg_1289);

assign add_ln21_fu_967_p2 = (out_w_0_0_reg_382 + 16'd2);

assign add_ln28_10_fu_689_p2 = (zext_ln28_14_fu_685_p1 + tmp5_0_0_0_cast_reg_1413);

assign add_ln28_11_fu_669_p2 = (zext_ln28_12_fu_660_p1 + 17'd2);

assign add_ln28_12_fu_694_p2 = (add_ln28_11_reg_1462 + tmp5_0_0_0_cast_reg_1413);

assign add_ln28_13_fu_711_p2 = (tmp5_0_1_0_cast_reg_1422 + zext_ln28_12_reg_1450);

assign add_ln28_14_fu_715_p2 = (zext_ln28_14_reg_1474 + tmp5_0_1_0_cast_reg_1422);

assign add_ln28_15_fu_727_p2 = (add_ln28_11_reg_1462 + tmp5_0_1_0_cast_reg_1422);

assign add_ln28_16_fu_731_p2 = (tmp5_0_2_0_cast_reg_1431 + zext_ln28_12_reg_1450);

assign add_ln28_17_fu_743_p2 = (zext_ln28_14_reg_1474 + tmp5_0_2_0_cast_reg_1431);

assign add_ln28_18_fu_747_p2 = (add_ln28_11_reg_1462 + tmp5_0_2_0_cast_reg_1431);

assign add_ln28_19_fu_908_p2 = (bias_load_reg_1764 + trunc_ln_fu_854_p4);

assign add_ln28_1_fu_488_p2 = (8'd1 + add_ln28_reg_1327);

assign add_ln28_20_fu_913_p2 = (trunc_ln28_1_fu_872_p4 + trunc_ln28_2_fu_881_p4);

assign add_ln28_21_fu_919_p2 = (add_ln28_20_fu_913_p2 + trunc_ln28_s_fu_863_p4);

assign add_ln28_22_fu_936_p2 = (add_ln28_21_reg_1810 + add_ln28_19_reg_1805);

assign add_ln28_23_fu_925_p2 = (trunc_ln28_3_fu_890_p4 + trunc_ln28_4_fu_899_p4);

assign add_ln28_24_fu_842_p2 = (trunc_ln28_6_fu_824_p4 + trunc_ln28_7_fu_833_p4);

assign add_ln28_25_fu_848_p2 = (add_ln28_24_fu_842_p2 + trunc_ln28_5_fu_815_p4);

assign add_ln28_26_fu_931_p2 = (add_ln28_25_reg_1800 + add_ln28_23_fu_925_p2);

assign add_ln28_27_fu_940_p2 = (add_ln28_26_reg_1815 + add_ln28_22_fu_936_p2);

assign add_ln28_28_fu_953_p2 = (zext_ln28_14_reg_1474 + 17'd1);

assign add_ln28_29_fu_973_p2 = (add_ln28_28_reg_1830 + tmp5_0_0_0_cast_reg_1413);

assign add_ln28_2_fu_498_p2 = (8'd2 + add_ln28_reg_1327);

assign add_ln28_30_fu_958_p2 = (zext_ln28_14_reg_1474 + 17'd2);

assign add_ln28_31_fu_977_p2 = (add_ln28_30_reg_1837 + tmp5_0_0_0_cast_reg_1413);

assign add_ln28_32_fu_989_p2 = (add_ln28_28_reg_1830 + tmp5_0_1_0_cast_reg_1422);

assign add_ln28_33_fu_993_p2 = (add_ln28_30_reg_1837 + tmp5_0_1_0_cast_reg_1422);

assign add_ln28_34_fu_997_p2 = (add_ln28_28_reg_1830 + tmp5_0_2_0_cast_reg_1431);

assign add_ln28_35_fu_1001_p2 = (add_ln28_30_reg_1837 + tmp5_0_2_0_cast_reg_1431);

assign add_ln28_36_fu_1040_p2 = (bias_load_reg_1764 + trunc_ln28_8_fu_1005_p4);

assign add_ln28_37_fu_1095_p2 = (trunc_ln28_10_fu_1086_p4 + trunc_ln28_11_reg_1909);

assign add_ln28_38_fu_1100_p2 = (add_ln28_37_fu_1095_p2 + trunc_ln28_9_fu_1077_p4);

assign add_ln28_39_fu_1162_p2 = (add_ln28_38_reg_1994 + add_ln28_36_reg_1929);

assign add_ln28_3_fu_508_p2 = (8'd3 + add_ln28_reg_1327);

assign add_ln28_40_fu_1153_p2 = (trunc_ln28_12_reg_1999 + trunc_ln28_13_reg_2004);

assign add_ln28_41_fu_1142_p2 = (trunc_ln28_15_fu_1124_p4 + trunc_ln28_16_fu_1133_p4);

assign add_ln28_42_fu_1148_p2 = (add_ln28_41_fu_1142_p2 + trunc_ln28_14_reg_1924);

assign add_ln28_43_fu_1157_p2 = (add_ln28_42_reg_2019 + add_ln28_40_fu_1153_p2);

assign add_ln28_44_fu_1166_p2 = (add_ln28_43_reg_2024 + add_ln28_39_fu_1162_p2);

assign add_ln28_4_fu_518_p2 = (8'd4 + add_ln28_reg_1327);

assign add_ln28_5_fu_528_p2 = (8'd5 + add_ln28_reg_1327);

assign add_ln28_6_fu_538_p2 = (8'd6 + add_ln28_reg_1327);

assign add_ln28_7_fu_548_p2 = (8'd7 + add_ln28_reg_1327);

assign add_ln28_8_fu_558_p2 = (8'd8 + add_ln28_reg_1327);

assign add_ln28_9_fu_664_p2 = (tmp5_0_0_0_cast_reg_1413 + zext_ln28_12_fu_660_p1);

assign add_ln28_fu_478_p2 = (zext_ln28_1_fu_458_p1 + zext_ln28_2_fu_474_p1);

assign add_ln36_1_fu_963_p2 = (tmp7_0_cast_reg_1440 + zext_ln28_14_reg_1474);

assign add_ln36_fu_945_p2 = (tmp7_0_cast_reg_1440 + zext_ln28_12_reg_1450);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = bias_addr_reg_1322;

assign empty_fu_427_p1 = output_height[4:0];

assign grp_fu_1229_p0 = sext_ln28_1_reg_1686;

assign grp_fu_1229_p1 = sext_ln28_2_reg_1692;

assign grp_fu_1233_p0 = sext_ln28_7_reg_1720;

assign grp_fu_1233_p1 = sext_ln28_8_reg_1726;

assign grp_fu_1237_p0 = sext_ln28_13_reg_1652;

assign grp_fu_1237_p1 = sext_ln28_14_reg_1658;

assign grp_fu_1241_p0 = sext_ln28_3_reg_1698;

assign grp_fu_1246_p0 = sext_ln28_5_reg_1709;

assign grp_fu_1251_p0 = sext_ln28_9_reg_1732;

assign grp_fu_1256_p0 = sext_ln28_11_reg_1743;

assign grp_fu_1261_p0 = sext_ln28_15_reg_1664;

assign grp_fu_1266_p0 = sext_ln28_17_reg_1675;

assign icmp_ln19_fu_441_p2 = ((out_d_0_reg_336 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_568_p2 = ((out_h_0_reg_371 == empty_reg_1299) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_698_p2 = ((or_ln28_fu_679_p2 == output_width_cast_reg_1271) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_655_p2 = ((out_w_0_0_reg_382 == output_width_cast_reg_1271) ? 1'b1 : 1'b0);

assign input_width_cast_fu_403_p1 = $signed(input_width);

assign or_ln28_fu_679_p2 = (out_w_0_0_reg_382 | 16'd1);

assign out_d_fu_447_p2 = (out_d_0_reg_336 + 5'd1);

assign out_h_fu_573_p2 = (out_h_0_reg_371 + 5'd1);

assign output_width_cast_fu_407_p1 = output_width;

assign sext_ln28_11_fu_812_p1 = kernel_0_load_5_reg_1602;

assign sext_ln28_13_fu_762_p1 = kernel_0_load_6_reg_1612;

assign sext_ln28_14_fu_765_p1 = input_load_200_reg_1627;

assign sext_ln28_15_fu_768_p1 = kernel_0_load_7_reg_1632;

assign sext_ln28_17_fu_774_p1 = kernel_0_load_8_reg_1642;

assign sext_ln28_1_fu_781_p1 = kernel_0_load_reg_1497;

assign sext_ln28_2_fu_784_p1 = reg_399;

assign sext_ln28_3_fu_788_p1 = kernel_0_load_1_reg_1522;

assign sext_ln28_5_fu_794_p1 = kernel_0_load_2_reg_1532;

assign sext_ln28_7_fu_800_p1 = kernel_0_load_3_reg_1562;

assign sext_ln28_8_fu_803_p1 = input_load_197_reg_1567;

assign sext_ln28_9_fu_806_p1 = kernel_0_load_4_reg_1572;

assign shl_ln_fu_466_p3 = {{trunc_ln28_fu_462_p1}, {3'd0}};

assign tmp5_0_0_0_cast_fu_615_p1 = tmp5_0_0_0_fu_610_p2;

assign tmp5_0_0_0_fu_610_p0 = zext_ln36_1_reg_1282;

assign tmp5_0_0_0_fu_610_p1 = tmp5_0_0_0_fu_610_p10;

assign tmp5_0_0_0_fu_610_p10 = tmp_0_0_0_reg_1393;

assign tmp5_0_0_0_fu_610_p2 = (tmp5_0_0_0_fu_610_p0 * tmp5_0_0_0_fu_610_p1);

assign tmp5_0_1_0_cast_fu_627_p1 = tmp5_0_1_0_fu_622_p2;

assign tmp5_0_1_0_fu_622_p0 = zext_ln36_1_reg_1282;

assign tmp5_0_1_0_fu_622_p1 = tmp5_0_1_0_fu_622_p10;

assign tmp5_0_1_0_fu_622_p10 = tmp_0_1_0_reg_1398;

assign tmp5_0_1_0_fu_622_p2 = (tmp5_0_1_0_fu_622_p0 * tmp5_0_1_0_fu_622_p1);

assign tmp5_0_2_0_cast_fu_639_p1 = tmp5_0_2_0_fu_634_p2;

assign tmp5_0_2_0_fu_634_p0 = zext_ln36_1_reg_1282;

assign tmp5_0_2_0_fu_634_p1 = tmp5_0_2_0_fu_634_p10;

assign tmp5_0_2_0_fu_634_p10 = tmp_0_2_0_reg_1403;

assign tmp5_0_2_0_fu_634_p2 = (tmp5_0_2_0_fu_634_p0 * tmp5_0_2_0_fu_634_p1);

assign tmp6_0_fu_601_p2 = (zext_ln28_3_cast_fu_579_p1 + phi_mul2_reg_359);

assign tmp7_0_cast_fu_651_p1 = tmp7_0_fu_646_p2;

assign tmp7_0_fu_646_p0 = zext_ln36_1_cast_cas_reg_1294;

assign tmp7_0_fu_646_p1 = tmp7_0_fu_646_p10;

assign tmp7_0_fu_646_p10 = tmp6_0_reg_1408;

assign tmp7_0_fu_646_p2 = (tmp7_0_fu_646_p0 * tmp7_0_fu_646_p1);

assign tmp_0_0_0_fu_583_p2 = (zext_ln28_3_cast_fu_579_p1 + phi_mul_reg_347);

assign tmp_0_1_0_fu_589_p2 = (tmp_0_0_0_fu_583_p2 + 9'd1);

assign tmp_0_2_0_fu_595_p2 = (tmp_0_0_0_fu_583_p2 + 9'd2);

assign trunc_ln28_10_fu_1086_p4 = {{mul_ln28_11_reg_1969[29:14]}};

assign trunc_ln28_15_fu_1124_p4 = {{mul_ln28_16_reg_2009[29:14]}};

assign trunc_ln28_16_fu_1133_p4 = {{mul_ln28_17_reg_2014[29:14]}};

assign trunc_ln28_1_fu_872_p4 = {{mul_ln28_2_reg_1780[29:14]}};

assign trunc_ln28_2_fu_881_p4 = {{mul_ln28_3_reg_1785[29:14]}};

assign trunc_ln28_3_fu_890_p4 = {{mul_ln28_4_reg_1790[29:14]}};

assign trunc_ln28_4_fu_899_p4 = {{mul_ln28_5_reg_1795[29:14]}};

assign trunc_ln28_5_fu_815_p4 = {{mul_ln28_6_reg_1749[29:14]}};

assign trunc_ln28_6_fu_824_p4 = {{mul_ln28_7_reg_1754[29:14]}};

assign trunc_ln28_7_fu_833_p4 = {{mul_ln28_8_reg_1759[29:14]}};

assign trunc_ln28_8_fu_1005_p4 = {{mul_ln28_9_reg_1864[29:14]}};

assign trunc_ln28_9_fu_1077_p4 = {{mul_ln28_10_reg_1964[29:14]}};

assign trunc_ln28_fu_462_p1 = out_d_0_reg_336[3:0];

assign trunc_ln28_s_fu_863_p4 = {{mul_ln28_1_reg_1775[29:14]}};

assign trunc_ln_fu_854_p4 = {{mul_ln28_reg_1770[29:14]}};

assign zext_ln23_fu_453_p1 = out_d_0_reg_336;

assign zext_ln28_10_fu_553_p1 = add_ln28_7_fu_548_p2;

assign zext_ln28_11_fu_563_p1 = add_ln28_8_fu_558_p2;

assign zext_ln28_12_fu_660_p1 = out_w_0_0_reg_382;

assign zext_ln28_13_fu_675_p1 = add_ln28_9_reg_1457;

assign zext_ln28_14_fu_685_p1 = or_ln28_fu_679_p2;

assign zext_ln28_15_fu_703_p1 = add_ln28_10_reg_1483;

assign zext_ln28_16_fu_707_p1 = add_ln28_12_reg_1488;

assign zext_ln28_17_fu_719_p1 = add_ln28_13_reg_1512;

assign zext_ln28_18_fu_723_p1 = add_ln28_14_reg_1517;

assign zext_ln28_19_fu_735_p1 = add_ln28_15_reg_1547;

assign zext_ln28_1_fu_458_p1 = out_d_0_reg_336;

assign zext_ln28_20_fu_739_p1 = add_ln28_16_reg_1552;

assign zext_ln28_21_fu_751_p1 = add_ln28_17_reg_1587;

assign zext_ln28_22_fu_755_p1 = add_ln28_18_reg_1592;

assign zext_ln28_23_fu_981_p1 = add_ln28_29_reg_1854;

assign zext_ln28_24_fu_985_p1 = add_ln28_31_reg_1859;

assign zext_ln28_25_fu_1023_p1 = add_ln28_32_reg_1884;

assign zext_ln28_26_fu_1027_p1 = add_ln28_33_reg_1889;

assign zext_ln28_27_fu_1053_p1 = add_ln28_34_reg_1899;

assign zext_ln28_28_fu_1057_p1 = add_ln28_35_reg_1904;

assign zext_ln28_2_fu_474_p1 = shl_ln_fu_466_p3;

assign zext_ln28_3_cast_fu_579_p1 = out_h_0_reg_371;

assign zext_ln28_3_fu_484_p1 = add_ln28_reg_1327;

assign zext_ln28_4_fu_493_p1 = add_ln28_1_fu_488_p2;

assign zext_ln28_5_fu_503_p1 = add_ln28_2_fu_498_p2;

assign zext_ln28_6_fu_513_p1 = add_ln28_3_fu_508_p2;

assign zext_ln28_7_fu_523_p1 = add_ln28_4_fu_518_p2;

assign zext_ln28_8_fu_533_p1 = add_ln28_5_fu_528_p2;

assign zext_ln28_9_fu_543_p1 = add_ln28_6_fu_538_p2;

assign zext_ln28_fu_411_p1 = input_height;

assign zext_ln36_1_cast_cas_fu_423_p1 = output_width;

assign zext_ln36_1_fu_415_p1 = $unsigned(input_width_cast_fu_403_p1);

assign zext_ln36_2_fu_949_p1 = add_ln36_reg_1825;

assign zext_ln36_3_fu_1171_p1 = add_ln36_1_reg_1844;

assign zext_ln36_fu_419_p1 = output_height;

always @ (posedge ap_clk) begin
    output_width_cast_reg_1271[15:6] <= 10'b0000000000;
    zext_ln28_reg_1277[8:7] <= 2'b00;
    zext_ln36_1_reg_1282[15:7] <= 9'b000000000;
    zext_ln36_reg_1289[8:6] <= 3'b000;
    zext_ln36_1_cast_cas_reg_1294[14:6] <= 9'b000000000;
    tmp5_0_0_0_cast_reg_1413[16] <= 1'b0;
    tmp5_0_1_0_cast_reg_1422[16] <= 1'b0;
    tmp5_0_2_0_cast_reg_1431[16] <= 1'b0;
    tmp7_0_cast_reg_1440[16:15] <= 2'b00;
    zext_ln28_12_reg_1450[16] <= 1'b0;
    zext_ln28_14_reg_1474[0] <= 1'b1;
    zext_ln28_14_reg_1474[16] <= 1'b0;
    add_ln28_28_reg_1830[0] <= 1'b0;
    add_ln28_30_reg_1837[0] <= 1'b1;
end

endmodule //depthwise_conv2d_fix_2
