// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg[13:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [15:0] reg_245;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
reg  signed [15:0] reg_250;
wire    ap_CS_fsm_state6;
reg  signed [15:0] reg_254;
wire   [4:0] out_h_fu_265_p2;
reg   [4:0] out_h_reg_1106;
wire    ap_CS_fsm_state2;
wire   [10:0] tmp5_0_0_0_fu_295_p2;
reg   [10:0] tmp5_0_0_0_reg_1111;
wire   [0:0] icmp_ln20_fu_259_p2;
wire   [10:0] tmp5_0_1_0_fu_325_p2;
reg   [10:0] tmp5_0_1_0_reg_1120;
wire   [9:0] tmp5_0_2_0_fu_357_p2;
reg   [9:0] tmp5_0_2_0_reg_1129;
wire   [10:0] tmp7_0_fu_375_p2;
reg   [10:0] tmp7_0_reg_1138;
wire   [10:0] zext_ln28_32_fu_387_p1;
reg   [10:0] zext_ln28_32_reg_1147;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln21_fu_381_p2;
wire   [10:0] add_ln28_fu_391_p2;
reg   [10:0] add_ln28_reg_1153;
wire    ap_CS_fsm_state4;
wire   [4:0] or_ln28_fu_404_p2;
reg   [4:0] or_ln28_reg_1163;
wire   [10:0] zext_ln28_34_fu_410_p1;
reg   [10:0] zext_ln28_34_reg_1169;
wire   [10:0] add_ln28_1_fu_414_p2;
reg   [10:0] add_ln28_1_reg_1175;
wire   [4:0] add_ln28_2_fu_419_p2;
reg   [4:0] add_ln28_2_reg_1180;
wire   [10:0] zext_ln28_36_fu_425_p1;
reg   [10:0] zext_ln28_36_reg_1186;
wire   [10:0] add_ln28_3_fu_429_p2;
reg   [10:0] add_ln28_3_reg_1191;
wire   [10:0] add_ln28_4_fu_450_p2;
reg   [10:0] add_ln28_4_reg_1206;
wire   [10:0] add_ln28_5_fu_454_p2;
reg   [10:0] add_ln28_5_reg_1211;
wire   [10:0] add_ln36_fu_458_p2;
reg   [10:0] add_ln36_reg_1216;
wire   [10:0] add_ln36_1_fu_462_p2;
reg   [10:0] add_ln36_1_reg_1221;
wire   [10:0] add_ln28_6_fu_486_p2;
reg   [10:0] add_ln28_6_reg_1236;
wire   [9:0] add_ln28_7_fu_490_p2;
reg   [9:0] add_ln28_7_reg_1241;
wire  signed [29:0] sext_ln28_12_fu_502_p1;
wire   [9:0] add_ln28_8_fu_525_p2;
reg   [9:0] add_ln28_8_reg_1272;
wire   [9:0] add_ln28_9_fu_530_p2;
reg   [9:0] add_ln28_9_reg_1277;
wire   [10:0] add_ln28_20_fu_564_p2;
reg   [10:0] add_ln28_20_reg_1297;
wire   [10:0] add_ln28_22_fu_583_p2;
reg   [10:0] add_ln28_22_reg_1302;
wire   [10:0] add_ln28_24_fu_588_p2;
reg   [10:0] add_ln28_24_reg_1307;
wire   [10:0] add_ln28_25_fu_593_p2;
reg   [10:0] add_ln28_25_reg_1312;
wire   [9:0] add_ln28_27_fu_598_p2;
reg   [9:0] add_ln28_27_reg_1317;
wire   [9:0] add_ln28_28_fu_603_p2;
reg   [9:0] add_ln28_28_reg_1322;
wire  signed [29:0] grp_fu_995_p2;
reg  signed [29:0] mul_ln28_reg_1327;
wire  signed [29:0] grp_fu_1001_p2;
reg  signed [29:0] mul_ln28_1_reg_1332;
wire  signed [27:0] grp_fu_1007_p2;
reg  signed [27:0] mul_ln28_2_reg_1337;
wire  signed [29:0] grp_fu_1013_p2;
reg  signed [29:0] mul_ln28_9_reg_1352;
reg   [13:0] tmp_reg_1367;
wire  signed [29:0] grp_fu_1019_p2;
reg  signed [29:0] mul_ln28_3_reg_1372;
wire  signed [29:0] sext_ln28_18_fu_659_p1;
wire   [15:0] add_ln28_10_fu_675_p2;
reg   [15:0] add_ln28_10_reg_1398;
reg   [15:0] trunc_ln28_9_reg_1403;
wire  signed [27:0] grp_fu_1025_p2;
reg  signed [27:0] mul_ln28_5_reg_1418;
wire  signed [26:0] grp_fu_1031_p2;
reg  signed [26:0] mul_ln28_6_reg_1423;
wire   [15:0] add_ln28_12_fu_724_p2;
reg   [15:0] add_ln28_12_reg_1428;
wire  signed [29:0] grp_fu_1037_p2;
reg  signed [29:0] mul_ln28_4_reg_1453;
reg   [13:0] tmp_10_reg_1458;
reg   [12:0] tmp_11_reg_1463;
wire  signed [28:0] grp_fu_1043_p2;
reg  signed [28:0] mul_ln28_7_reg_1468;
wire  signed [28:0] grp_fu_1049_p2;
reg  signed [28:0] mul_ln28_8_reg_1473;
wire  signed [29:0] grp_fu_1055_p2;
reg  signed [29:0] mul_ln28_12_reg_1478;
wire  signed [26:0] grp_fu_1061_p2;
reg  signed [26:0] mul_ln28_15_reg_1493;
wire   [15:0] add_ln28_13_fu_812_p2;
reg   [15:0] add_ln28_13_reg_1498;
wire    ap_CS_fsm_state13;
wire   [15:0] add_ln28_15_fu_824_p2;
reg   [15:0] add_ln28_15_reg_1503;
wire  signed [29:0] grp_fu_1067_p2;
reg  signed [29:0] mul_ln28_10_reg_1508;
wire  signed [27:0] grp_fu_1073_p2;
reg  signed [27:0] mul_ln28_11_reg_1513;
reg   [15:0] trunc_ln28_12_reg_1518;
reg   [12:0] tmp_16_reg_1523;
wire   [15:0] add_ln28_17_fu_860_p2;
reg   [15:0] add_ln28_17_reg_1538;
wire    ap_CS_fsm_state14;
reg   [13:0] tmp_14_reg_1543;
wire  signed [29:0] grp_fu_1079_p2;
reg  signed [29:0] mul_ln28_13_reg_1548;
wire  signed [27:0] grp_fu_1085_p2;
reg  signed [27:0] mul_ln28_14_reg_1553;
wire   [15:0] add_ln28_29_fu_883_p2;
reg   [15:0] add_ln28_29_reg_1558;
wire  signed [28:0] grp_fu_1091_p2;
reg  signed [28:0] mul_ln28_16_reg_1563;
wire    ap_CS_fsm_state15;
wire  signed [28:0] grp_fu_1097_p2;
reg  signed [28:0] mul_ln28_17_reg_1568;
wire   [15:0] add_ln28_31_fu_926_p2;
reg   [15:0] add_ln28_31_reg_1573;
wire   [15:0] add_ln28_32_fu_931_p2;
reg   [15:0] add_ln28_32_reg_1578;
wire   [15:0] add_ln28_34_fu_972_p2;
reg   [15:0] add_ln28_34_reg_1583;
wire    ap_CS_fsm_state16;
wire   [15:0] add_ln28_36_fu_982_p2;
reg   [15:0] add_ln28_36_reg_1588;
wire    ap_CS_fsm_state17;
reg   [4:0] out_h_0_reg_222;
reg   [4:0] out_w_0_0_reg_233;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln28_13_fu_399_p1;
wire   [63:0] zext_ln28_14_fu_437_p1;
wire   [63:0] zext_ln28_15_fu_445_p1;
wire   [63:0] zext_ln28_16_fu_473_p1;
wire   [63:0] zext_ln28_17_fu_481_p1;
wire   [63:0] zext_ln28_18_fu_516_p1;
wire   [63:0] zext_ln28_19_fu_521_p1;
wire   [63:0] zext_ln28_20_fu_539_p1;
wire   [63:0] zext_ln28_21_fu_543_p1;
wire   [63:0] zext_ln28_23_fu_619_p1;
wire   [63:0] zext_ln28_24_fu_627_p1;
wire   [63:0] zext_ln28_26_fu_693_p1;
wire   [63:0] zext_ln28_27_fu_701_p1;
wire   [63:0] zext_ln28_29_fu_737_p1;
wire   [63:0] zext_ln28_30_fu_741_p1;
wire   [63:0] zext_ln36_fu_891_p1;
wire   [63:0] zext_ln36_1_fu_990_p1;
wire   [9:0] p_shl_fu_271_p3;
wire   [5:0] p_shl1_fu_283_p3;
wire   [10:0] p_shl28_cast_fu_279_p1;
wire   [10:0] p_shl29_cast_fu_291_p1;
wire   [9:0] p_shl2_fu_301_p3;
wire   [5:0] p_shl3_fu_313_p3;
wire   [10:0] p_shl26_cast_fu_309_p1;
wire   [10:0] p_shl27_cast_fu_321_p1;
wire   [4:0] tmp_0_2_0_fu_331_p2;
wire   [5:0] p_shl5_fu_345_p3;
wire   [9:0] p_shl4_fu_337_p3;
wire   [9:0] p_shl25_cast_fu_353_p1;
wire   [6:0] p_shl6_fu_363_p3;
wire   [10:0] p_shl23_cast_fu_371_p1;
wire  signed [31:0] sext_ln28_9_fu_396_p1;
wire  signed [31:0] sext_ln28_11_fu_434_p1;
wire  signed [31:0] sext_ln28_13_fu_442_p1;
wire  signed [31:0] sext_ln28_15_fu_470_p1;
wire  signed [31:0] sext_ln28_17_fu_478_p1;
wire   [9:0] zext_ln28_31_fu_466_p1;
wire  signed [31:0] sext_ln28_19_fu_513_p1;
wire   [9:0] zext_ln28_33_fu_499_p1;
wire   [9:0] zext_ln28_35_fu_506_p1;
wire   [5:0] zext_ln28_38_fu_547_p1;
wire   [5:0] add_ln28_19_fu_550_p2;
wire   [10:0] zext_ln28_41_fu_560_p1;
wire   [5:0] add_ln28_21_fu_569_p2;
wire   [10:0] zext_ln28_43_fu_579_p1;
wire   [9:0] zext_ln28_40_fu_556_p1;
wire   [9:0] zext_ln28_42_fu_575_p1;
wire  signed [31:0] sext_ln28_26_fu_616_p1;
wire  signed [31:0] sext_ln28_28_fu_624_p1;
wire   [15:0] trunc_ln_fu_632_p4;
wire   [15:0] trunc_ln28_1_fu_641_p4;
wire  signed [31:0] sext_ln28_32_fu_690_p1;
wire  signed [31:0] sext_ln28_34_fu_698_p1;
wire   [15:0] trunc_ln28_3_fu_709_p4;
wire  signed [15:0] sext_ln28_47_fu_706_p1;
wire   [15:0] add_ln28_11_fu_718_p2;
wire   [14:0] tmp_12_fu_786_p4;
wire   [14:0] tmp_13_fu_799_p4;
wire  signed [15:0] sext_ln28_49_fu_780_p1;
wire   [15:0] trunc_ln28_4_fu_771_p4;
wire  signed [15:0] sext_ln28_56_fu_808_p1;
wire  signed [15:0] sext_ln28_54_fu_795_p1;
wire  signed [15:0] sext_ln28_51_fu_783_p1;
wire   [15:0] add_ln28_14_fu_818_p2;
wire   [15:0] add_ln28_16_fu_856_p2;
wire   [15:0] trunc_ln28_10_fu_865_p4;
wire  signed [31:0] sext_ln36_fu_888_p1;
wire   [13:0] tmp_15_fu_908_p4;
wire  signed [15:0] sext_ln28_58_fu_896_p1;
wire   [15:0] add_ln28_30_fu_921_p2;
wire  signed [15:0] sext_ln28_60_fu_917_p1;
wire   [15:0] trunc_ln28_13_fu_899_p4;
wire   [14:0] tmp_17_fu_940_p4;
wire   [14:0] tmp_18_fu_953_p4;
wire  signed [15:0] sext_ln28_65_fu_962_p1;
wire  signed [15:0] sext_ln28_63_fu_949_p1;
wire  signed [15:0] sext_ln28_61_fu_937_p1;
wire   [15:0] add_ln28_33_fu_966_p2;
wire   [15:0] add_ln28_35_fu_978_p2;
wire  signed [31:0] sext_ln36_1_fu_987_p1;
wire  signed [14:0] grp_fu_995_p1;
wire  signed [15:0] grp_fu_1001_p0;
wire  signed [14:0] grp_fu_1001_p1;
wire   [11:0] grp_fu_1007_p1;
wire  signed [15:0] grp_fu_1013_p0;
wire  signed [14:0] grp_fu_1013_p1;
wire  signed [13:0] grp_fu_1019_p1;
wire  signed [11:0] grp_fu_1025_p1;
wire  signed [10:0] grp_fu_1031_p1;
wire  signed [15:0] grp_fu_1037_p0;
wire  signed [13:0] grp_fu_1037_p1;
wire   [12:0] grp_fu_1043_p1;
wire  signed [12:0] grp_fu_1049_p1;
wire  signed [15:0] grp_fu_1055_p0;
wire  signed [13:0] grp_fu_1055_p1;
wire  signed [10:0] grp_fu_1061_p1;
wire  signed [14:0] grp_fu_1067_p1;
wire   [11:0] grp_fu_1073_p1;
wire  signed [13:0] grp_fu_1079_p1;
wire  signed [11:0] grp_fu_1085_p1;
wire   [12:0] grp_fu_1091_p1;
wire  signed [12:0] grp_fu_1097_p1;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

network_mul_mul_16s_15s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_3_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(grp_fu_995_p1),
    .ce(1'b1),
    .dout(grp_fu_995_p2)
);

network_mul_mul_16s_15s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_3_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1001_p0),
    .din1(grp_fu_1001_p1),
    .ce(1'b1),
    .dout(grp_fu_1001_p2)
);

network_mul_mul_16s_12ns_28_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
network_mul_mul_16s_12ns_28_3_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_254),
    .din1(grp_fu_1007_p1),
    .ce(1'b1),
    .dout(grp_fu_1007_p2)
);

network_mul_mul_16s_15s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_3_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1013_p0),
    .din1(grp_fu_1013_p1),
    .ce(1'b1),
    .dout(grp_fu_1013_p2)
);

network_mul_mul_16s_14s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_3_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(grp_fu_1019_p1),
    .ce(1'b1),
    .dout(grp_fu_1019_p2)
);

network_mul_mul_16s_12s_28_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
network_mul_mul_16s_12s_28_3_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(grp_fu_1025_p1),
    .ce(1'b1),
    .dout(grp_fu_1025_p2)
);

network_mul_mul_16s_11s_27_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 27 ))
network_mul_mul_16s_11s_27_3_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_254),
    .din1(grp_fu_1031_p1),
    .ce(1'b1),
    .dout(grp_fu_1031_p2)
);

network_mul_mul_16s_14s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_3_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1037_p0),
    .din1(grp_fu_1037_p1),
    .ce(1'b1),
    .dout(grp_fu_1037_p2)
);

network_mul_mul_16s_13ns_29_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
network_mul_mul_16s_13ns_29_3_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(grp_fu_1043_p1),
    .ce(1'b1),
    .dout(grp_fu_1043_p2)
);

network_mul_mul_16s_13s_29_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
network_mul_mul_16s_13s_29_3_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_254),
    .din1(grp_fu_1049_p1),
    .ce(1'b1),
    .dout(grp_fu_1049_p2)
);

network_mul_mul_16s_14s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_3_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1055_p0),
    .din1(grp_fu_1055_p1),
    .ce(1'b1),
    .dout(grp_fu_1055_p2)
);

network_mul_mul_16s_11s_27_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 27 ))
network_mul_mul_16s_11s_27_3_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(grp_fu_1061_p1),
    .ce(1'b1),
    .dout(grp_fu_1061_p2)
);

network_mul_mul_16s_15s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_3_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(grp_fu_1067_p1),
    .ce(1'b1),
    .dout(grp_fu_1067_p2)
);

network_mul_mul_16s_12ns_28_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
network_mul_mul_16s_12ns_28_3_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_250),
    .din1(grp_fu_1073_p1),
    .ce(1'b1),
    .dout(grp_fu_1073_p2)
);

network_mul_mul_16s_14s_30_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_14s_30_3_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(grp_fu_1079_p1),
    .ce(1'b1),
    .dout(grp_fu_1079_p2)
);

network_mul_mul_16s_12s_28_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 28 ))
network_mul_mul_16s_12s_28_3_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_250),
    .din1(grp_fu_1085_p1),
    .ce(1'b1),
    .dout(grp_fu_1085_p2)
);

network_mul_mul_16s_13ns_29_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
network_mul_mul_16s_13ns_29_3_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(grp_fu_1091_p1),
    .ce(1'b1),
    .dout(grp_fu_1091_p2)
);

network_mul_mul_16s_13s_29_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
network_mul_mul_16s_13s_29_3_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_250),
    .din1(grp_fu_1097_p1),
    .ce(1'b1),
    .dout(grp_fu_1097_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_381_p2 == 1'd1))) begin
        out_h_0_reg_222 <= out_h_reg_1106;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_h_0_reg_222 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_259_p2 == 1'd0))) begin
        out_w_0_0_reg_233 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        out_w_0_0_reg_233 <= add_ln28_2_reg_1180;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_245 <= input_r_q1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_245 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_254 <= input_r_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_254 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln28_10_reg_1398 <= add_ln28_10_fu_675_p2;
        mul_ln28_3_reg_1372 <= grp_fu_1019_p2;
        tmp_reg_1367 <= {{mul_ln28_2_reg_1337[27:14]}};
        trunc_ln28_9_reg_1403 <= {{mul_ln28_9_reg_1352[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln28_12_reg_1428 <= add_ln28_12_fu_724_p2;
        mul_ln28_5_reg_1418 <= grp_fu_1025_p2;
        mul_ln28_6_reg_1423 <= grp_fu_1031_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln28_13_reg_1498 <= add_ln28_13_fu_812_p2;
        add_ln28_15_reg_1503 <= add_ln28_15_fu_824_p2;
        mul_ln28_10_reg_1508 <= grp_fu_1067_p2;
        mul_ln28_11_reg_1513 <= grp_fu_1073_p2;
        tmp_16_reg_1523 <= {{mul_ln28_15_reg_1493[26:14]}};
        trunc_ln28_12_reg_1518 <= {{mul_ln28_12_reg_1478[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln28_17_reg_1538 <= add_ln28_17_fu_860_p2;
        add_ln28_29_reg_1558 <= add_ln28_29_fu_883_p2;
        mul_ln28_13_reg_1548 <= grp_fu_1079_p2;
        mul_ln28_14_reg_1553 <= grp_fu_1085_p2;
        tmp_14_reg_1543 <= {{mul_ln28_11_reg_1513[27:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln28_1_reg_1175[10 : 1] <= add_ln28_1_fu_414_p2[10 : 1];
        add_ln28_2_reg_1180 <= add_ln28_2_fu_419_p2;
        add_ln28_3_reg_1191 <= add_ln28_3_fu_429_p2;
        or_ln28_reg_1163[4 : 1] <= or_ln28_fu_404_p2[4 : 1];
        zext_ln28_34_reg_1169[4 : 1] <= zext_ln28_34_fu_410_p1[4 : 1];
        zext_ln28_36_reg_1186[4 : 0] <= zext_ln28_36_fu_425_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln28_20_reg_1297[10 : 1] <= add_ln28_20_fu_564_p2[10 : 1];
        add_ln28_22_reg_1302[10 : 1] <= add_ln28_22_fu_583_p2[10 : 1];
        add_ln28_24_reg_1307[10 : 1] <= add_ln28_24_fu_588_p2[10 : 1];
        add_ln28_25_reg_1312[10 : 1] <= add_ln28_25_fu_593_p2[10 : 1];
        add_ln28_27_reg_1317[9 : 1] <= add_ln28_27_fu_598_p2[9 : 1];
        add_ln28_28_reg_1322[9 : 1] <= add_ln28_28_fu_603_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln28_31_reg_1573 <= add_ln28_31_fu_926_p2;
        add_ln28_32_reg_1578 <= add_ln28_32_fu_931_p2;
        mul_ln28_16_reg_1563 <= grp_fu_1091_p2;
        mul_ln28_17_reg_1568 <= grp_fu_1097_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln28_34_reg_1583 <= add_ln28_34_fu_972_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        add_ln28_36_reg_1588 <= add_ln28_36_fu_982_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln28_4_reg_1206 <= add_ln28_4_fu_450_p2;
        add_ln28_5_reg_1211[10 : 1] <= add_ln28_5_fu_454_p2[10 : 1];
        add_ln36_1_reg_1221[10 : 1] <= add_ln36_1_fu_462_p2[10 : 1];
        add_ln36_reg_1216 <= add_ln36_fu_458_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln28_6_reg_1236 <= add_ln28_6_fu_486_p2;
        add_ln28_7_reg_1241 <= add_ln28_7_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln28_8_reg_1272[9 : 1] <= add_ln28_8_fu_525_p2[9 : 1];
        add_ln28_9_reg_1277 <= add_ln28_9_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_381_p2 == 1'd0))) begin
        add_ln28_reg_1153 <= add_ln28_fu_391_p2;
        zext_ln28_32_reg_1147[4 : 0] <= zext_ln28_32_fu_387_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln28_12_reg_1478 <= grp_fu_1055_p2;
        mul_ln28_15_reg_1493 <= grp_fu_1061_p2;
        mul_ln28_4_reg_1453 <= grp_fu_1037_p2;
        mul_ln28_7_reg_1468 <= grp_fu_1043_p2;
        mul_ln28_8_reg_1473 <= grp_fu_1049_p2;
        tmp_10_reg_1458 <= {{mul_ln28_5_reg_1418[27:14]}};
        tmp_11_reg_1463 <= {{mul_ln28_6_reg_1423[26:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln28_1_reg_1332 <= grp_fu_1001_p2;
        mul_ln28_2_reg_1337 <= grp_fu_1007_p2;
        mul_ln28_9_reg_1352 <= grp_fu_1013_p2;
        mul_ln28_reg_1327 <= grp_fu_995_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        out_h_reg_1106 <= out_h_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_250 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_259_p2 == 1'd0))) begin
        tmp5_0_0_0_reg_1111[10 : 1] <= tmp5_0_0_0_fu_295_p2[10 : 1];
        tmp5_0_1_0_reg_1120[10 : 1] <= tmp5_0_1_0_fu_325_p2[10 : 1];
        tmp5_0_2_0_reg_1129[9 : 1] <= tmp5_0_2_0_fu_357_p2[9 : 1];
        tmp7_0_reg_1138[10 : 2] <= tmp7_0_fu_375_p2[10 : 2];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_259_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_259_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = zext_ln28_30_fu_741_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = zext_ln28_27_fu_701_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = zext_ln28_24_fu_627_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = zext_ln28_21_fu_543_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = zext_ln28_19_fu_521_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln28_17_fu_481_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = zext_ln28_14_fu_437_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address0 = zext_ln28_13_fu_399_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address1 = zext_ln28_29_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address1 = zext_ln28_26_fu_693_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address1 = zext_ln28_23_fu_619_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address1 = zext_ln28_20_fu_539_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address1 = zext_ln28_18_fu_516_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address1 = zext_ln28_16_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address1 = zext_ln28_15_fu_445_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_r_address0 = zext_ln36_1_fu_990_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_address0 = zext_ln36_fu_891_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state15))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_r_d0 = add_ln28_36_reg_1588;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        output_r_d0 = add_ln28_17_reg_1538;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state15))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_259_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_381_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_10_fu_675_p2 = (trunc_ln_fu_632_p4 + trunc_ln28_1_fu_641_p4);

assign add_ln28_11_fu_718_p2 = ($signed(trunc_ln28_3_fu_709_p4) + $signed(sext_ln28_47_fu_706_p1));

assign add_ln28_12_fu_724_p2 = (add_ln28_10_reg_1398 + add_ln28_11_fu_718_p2);

assign add_ln28_13_fu_812_p2 = ($signed(sext_ln28_49_fu_780_p1) + $signed(trunc_ln28_4_fu_771_p4));

assign add_ln28_14_fu_818_p2 = ($signed(sext_ln28_56_fu_808_p1) + $signed(sext_ln28_54_fu_795_p1));

assign add_ln28_15_fu_824_p2 = ($signed(sext_ln28_51_fu_783_p1) + $signed(add_ln28_14_fu_818_p2));

assign add_ln28_16_fu_856_p2 = (add_ln28_13_reg_1498 + add_ln28_15_reg_1503);

assign add_ln28_17_fu_860_p2 = (add_ln28_12_reg_1428 + add_ln28_16_fu_856_p2);

assign add_ln28_19_fu_550_p2 = (zext_ln28_38_fu_547_p1 + 6'd1);

assign add_ln28_1_fu_414_p2 = (tmp5_0_0_0_reg_1111 + zext_ln28_34_fu_410_p1);

assign add_ln28_20_fu_564_p2 = (tmp5_0_0_0_reg_1111 + zext_ln28_41_fu_560_p1);

assign add_ln28_21_fu_569_p2 = (zext_ln28_38_fu_547_p1 + 6'd2);

assign add_ln28_22_fu_583_p2 = (tmp5_0_0_0_reg_1111 + zext_ln28_43_fu_579_p1);

assign add_ln28_24_fu_588_p2 = (tmp5_0_1_0_reg_1120 + zext_ln28_41_fu_560_p1);

assign add_ln28_25_fu_593_p2 = (tmp5_0_1_0_reg_1120 + zext_ln28_43_fu_579_p1);

assign add_ln28_27_fu_598_p2 = (tmp5_0_2_0_reg_1129 + zext_ln28_40_fu_556_p1);

assign add_ln28_28_fu_603_p2 = (tmp5_0_2_0_reg_1129 + zext_ln28_42_fu_575_p1);

assign add_ln28_29_fu_883_p2 = (trunc_ln28_9_reg_1403 + trunc_ln28_10_fu_865_p4);

assign add_ln28_2_fu_419_p2 = (out_w_0_0_reg_233 + 5'd2);

assign add_ln28_30_fu_921_p2 = ($signed(trunc_ln28_12_reg_1518) + $signed(sext_ln28_58_fu_896_p1));

assign add_ln28_31_fu_926_p2 = (add_ln28_29_reg_1558 + add_ln28_30_fu_921_p2);

assign add_ln28_32_fu_931_p2 = ($signed(sext_ln28_60_fu_917_p1) + $signed(trunc_ln28_13_fu_899_p4));

assign add_ln28_33_fu_966_p2 = ($signed(sext_ln28_65_fu_962_p1) + $signed(sext_ln28_63_fu_949_p1));

assign add_ln28_34_fu_972_p2 = ($signed(sext_ln28_61_fu_937_p1) + $signed(add_ln28_33_fu_966_p2));

assign add_ln28_35_fu_978_p2 = (add_ln28_32_reg_1578 + add_ln28_34_reg_1583);

assign add_ln28_36_fu_982_p2 = (add_ln28_31_reg_1573 + add_ln28_35_fu_978_p2);

assign add_ln28_3_fu_429_p2 = (tmp5_0_0_0_reg_1111 + zext_ln28_36_fu_425_p1);

assign add_ln28_4_fu_450_p2 = (zext_ln28_32_reg_1147 + tmp5_0_1_0_reg_1120);

assign add_ln28_5_fu_454_p2 = (tmp5_0_1_0_reg_1120 + zext_ln28_34_reg_1169);

assign add_ln28_6_fu_486_p2 = (tmp5_0_1_0_reg_1120 + zext_ln28_36_reg_1186);

assign add_ln28_7_fu_490_p2 = (zext_ln28_31_fu_466_p1 + tmp5_0_2_0_reg_1129);

assign add_ln28_8_fu_525_p2 = (tmp5_0_2_0_reg_1129 + zext_ln28_33_fu_499_p1);

assign add_ln28_9_fu_530_p2 = (tmp5_0_2_0_reg_1129 + zext_ln28_35_fu_506_p1);

assign add_ln28_fu_391_p2 = (zext_ln28_32_fu_387_p1 + tmp5_0_0_0_reg_1111);

assign add_ln36_1_fu_462_p2 = (zext_ln28_34_reg_1169 + tmp7_0_reg_1138);

assign add_ln36_fu_458_p2 = (zext_ln28_32_reg_1147 + tmp7_0_reg_1138);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_1001_p0 = sext_ln28_12_fu_502_p1;

assign grp_fu_1001_p1 = 30'd1073729139;

assign grp_fu_1007_p1 = 28'd1933;

assign grp_fu_1013_p0 = sext_ln28_12_fu_502_p1;

assign grp_fu_1013_p1 = 30'd1073729270;

assign grp_fu_1019_p1 = 30'd1073736502;

assign grp_fu_1025_p1 = 28'd268434419;

assign grp_fu_1031_p1 = 27'd134216945;

assign grp_fu_1037_p0 = sext_ln28_18_fu_659_p1;

assign grp_fu_1037_p1 = 30'd1073734222;

assign grp_fu_1043_p1 = 29'd3015;

assign grp_fu_1049_p1 = 29'd536867259;

assign grp_fu_1055_p0 = sext_ln28_18_fu_659_p1;

assign grp_fu_1055_p1 = 30'd1073736502;

assign grp_fu_1061_p1 = 27'd134216945;

assign grp_fu_1067_p1 = 30'd1073729139;

assign grp_fu_1073_p1 = 28'd1933;

assign grp_fu_1079_p1 = 30'd1073734222;

assign grp_fu_1085_p1 = 28'd268434419;

assign grp_fu_1091_p1 = 29'd3015;

assign grp_fu_1097_p1 = 29'd536867259;

assign grp_fu_995_p1 = 30'd1073729270;

assign icmp_ln20_fu_259_p2 = ((out_h_0_reg_222 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_381_p2 = ((out_w_0_0_reg_233 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln28_fu_404_p2 = (out_w_0_0_reg_233 | 5'd1);

assign out_h_fu_265_p2 = (out_h_0_reg_222 + 5'd1);

assign p_shl1_fu_283_p3 = {{out_h_0_reg_222}, {1'd0}};

assign p_shl23_cast_fu_371_p1 = p_shl6_fu_363_p3;

assign p_shl25_cast_fu_353_p1 = p_shl5_fu_345_p3;

assign p_shl26_cast_fu_309_p1 = p_shl2_fu_301_p3;

assign p_shl27_cast_fu_321_p1 = p_shl3_fu_313_p3;

assign p_shl28_cast_fu_279_p1 = p_shl_fu_271_p3;

assign p_shl29_cast_fu_291_p1 = p_shl1_fu_283_p3;

assign p_shl2_fu_301_p3 = {{out_h_fu_265_p2}, {5'd0}};

assign p_shl3_fu_313_p3 = {{out_h_fu_265_p2}, {1'd0}};

assign p_shl4_fu_337_p3 = {{tmp_0_2_0_fu_331_p2}, {5'd0}};

assign p_shl5_fu_345_p3 = {{tmp_0_2_0_fu_331_p2}, {1'd0}};

assign p_shl6_fu_363_p3 = {{out_h_0_reg_222}, {2'd0}};

assign p_shl_fu_271_p3 = {{out_h_0_reg_222}, {5'd0}};

assign sext_ln28_11_fu_434_p1 = $signed(add_ln28_1_reg_1175);

assign sext_ln28_12_fu_502_p1 = reg_250;

assign sext_ln28_13_fu_442_p1 = $signed(add_ln28_3_reg_1191);

assign sext_ln28_15_fu_470_p1 = $signed(add_ln28_4_reg_1206);

assign sext_ln28_17_fu_478_p1 = $signed(add_ln28_5_reg_1211);

assign sext_ln28_18_fu_659_p1 = reg_250;

assign sext_ln28_19_fu_513_p1 = $signed(add_ln28_6_reg_1236);

assign sext_ln28_26_fu_616_p1 = $signed(add_ln28_20_reg_1297);

assign sext_ln28_28_fu_624_p1 = $signed(add_ln28_22_reg_1302);

assign sext_ln28_32_fu_690_p1 = $signed(add_ln28_24_reg_1307);

assign sext_ln28_34_fu_698_p1 = $signed(add_ln28_25_reg_1312);

assign sext_ln28_47_fu_706_p1 = $signed(tmp_reg_1367);

assign sext_ln28_49_fu_780_p1 = $signed(tmp_10_reg_1458);

assign sext_ln28_51_fu_783_p1 = $signed(tmp_11_reg_1463);

assign sext_ln28_54_fu_795_p1 = $signed(tmp_12_fu_786_p4);

assign sext_ln28_56_fu_808_p1 = $signed(tmp_13_fu_799_p4);

assign sext_ln28_58_fu_896_p1 = $signed(tmp_14_reg_1543);

assign sext_ln28_60_fu_917_p1 = $signed(tmp_15_fu_908_p4);

assign sext_ln28_61_fu_937_p1 = $signed(tmp_16_reg_1523);

assign sext_ln28_63_fu_949_p1 = $signed(tmp_17_fu_940_p4);

assign sext_ln28_65_fu_962_p1 = $signed(tmp_18_fu_953_p4);

assign sext_ln28_9_fu_396_p1 = $signed(add_ln28_reg_1153);

assign sext_ln36_1_fu_987_p1 = $signed(add_ln36_1_reg_1221);

assign sext_ln36_fu_888_p1 = $signed(add_ln36_reg_1216);

assign tmp5_0_0_0_fu_295_p2 = (p_shl28_cast_fu_279_p1 - p_shl29_cast_fu_291_p1);

assign tmp5_0_1_0_fu_325_p2 = (p_shl26_cast_fu_309_p1 - p_shl27_cast_fu_321_p1);

assign tmp5_0_2_0_fu_357_p2 = (p_shl4_fu_337_p3 - p_shl25_cast_fu_353_p1);

assign tmp7_0_fu_375_p2 = (p_shl28_cast_fu_279_p1 - p_shl23_cast_fu_371_p1);

assign tmp_0_2_0_fu_331_p2 = (out_h_0_reg_222 + 5'd2);

assign tmp_12_fu_786_p4 = {{mul_ln28_7_reg_1468[28:14]}};

assign tmp_13_fu_799_p4 = {{mul_ln28_8_reg_1473[28:14]}};

assign tmp_15_fu_908_p4 = {{mul_ln28_14_reg_1553[27:14]}};

assign tmp_17_fu_940_p4 = {{mul_ln28_16_reg_1563[28:14]}};

assign tmp_18_fu_953_p4 = {{mul_ln28_17_reg_1568[28:14]}};

assign trunc_ln28_10_fu_865_p4 = {{mul_ln28_10_reg_1508[29:14]}};

assign trunc_ln28_13_fu_899_p4 = {{mul_ln28_13_reg_1548[29:14]}};

assign trunc_ln28_1_fu_641_p4 = {{mul_ln28_1_reg_1332[29:14]}};

assign trunc_ln28_3_fu_709_p4 = {{mul_ln28_3_reg_1372[29:14]}};

assign trunc_ln28_4_fu_771_p4 = {{mul_ln28_4_reg_1453[29:14]}};

assign trunc_ln_fu_632_p4 = {{mul_ln28_reg_1327[29:14]}};

assign zext_ln28_13_fu_399_p1 = $unsigned(sext_ln28_9_fu_396_p1);

assign zext_ln28_14_fu_437_p1 = $unsigned(sext_ln28_11_fu_434_p1);

assign zext_ln28_15_fu_445_p1 = $unsigned(sext_ln28_13_fu_442_p1);

assign zext_ln28_16_fu_473_p1 = $unsigned(sext_ln28_15_fu_470_p1);

assign zext_ln28_17_fu_481_p1 = $unsigned(sext_ln28_17_fu_478_p1);

assign zext_ln28_18_fu_516_p1 = $unsigned(sext_ln28_19_fu_513_p1);

assign zext_ln28_19_fu_521_p1 = add_ln28_7_reg_1241;

assign zext_ln28_20_fu_539_p1 = add_ln28_8_reg_1272;

assign zext_ln28_21_fu_543_p1 = add_ln28_9_reg_1277;

assign zext_ln28_23_fu_619_p1 = $unsigned(sext_ln28_26_fu_616_p1);

assign zext_ln28_24_fu_627_p1 = $unsigned(sext_ln28_28_fu_624_p1);

assign zext_ln28_26_fu_693_p1 = $unsigned(sext_ln28_32_fu_690_p1);

assign zext_ln28_27_fu_701_p1 = $unsigned(sext_ln28_34_fu_698_p1);

assign zext_ln28_29_fu_737_p1 = add_ln28_27_reg_1317;

assign zext_ln28_30_fu_741_p1 = add_ln28_28_reg_1322;

assign zext_ln28_31_fu_466_p1 = out_w_0_0_reg_233;

assign zext_ln28_32_fu_387_p1 = out_w_0_0_reg_233;

assign zext_ln28_33_fu_499_p1 = or_ln28_reg_1163;

assign zext_ln28_34_fu_410_p1 = or_ln28_fu_404_p2;

assign zext_ln28_35_fu_506_p1 = add_ln28_2_reg_1180;

assign zext_ln28_36_fu_425_p1 = add_ln28_2_fu_419_p2;

assign zext_ln28_38_fu_547_p1 = or_ln28_reg_1163;

assign zext_ln28_40_fu_556_p1 = add_ln28_19_fu_550_p2;

assign zext_ln28_41_fu_560_p1 = add_ln28_19_fu_550_p2;

assign zext_ln28_42_fu_575_p1 = add_ln28_21_fu_569_p2;

assign zext_ln28_43_fu_579_p1 = add_ln28_21_fu_569_p2;

assign zext_ln36_1_fu_990_p1 = $unsigned(sext_ln36_1_fu_987_p1);

assign zext_ln36_fu_891_p1 = $unsigned(sext_ln36_fu_888_p1);

always @ (posedge ap_clk) begin
    tmp5_0_0_0_reg_1111[0] <= 1'b0;
    tmp5_0_1_0_reg_1120[0] <= 1'b0;
    tmp5_0_2_0_reg_1129[0] <= 1'b0;
    tmp7_0_reg_1138[1:0] <= 2'b00;
    zext_ln28_32_reg_1147[10:5] <= 6'b000000;
    or_ln28_reg_1163[0] <= 1'b1;
    zext_ln28_34_reg_1169[0] <= 1'b1;
    zext_ln28_34_reg_1169[10:5] <= 6'b000000;
    add_ln28_1_reg_1175[0] <= 1'b1;
    zext_ln28_36_reg_1186[10:5] <= 6'b000000;
    add_ln28_5_reg_1211[0] <= 1'b1;
    add_ln36_1_reg_1221[0] <= 1'b1;
    add_ln28_8_reg_1272[0] <= 1'b1;
    add_ln28_20_reg_1297[0] <= 1'b0;
    add_ln28_22_reg_1302[0] <= 1'b1;
    add_ln28_24_reg_1307[0] <= 1'b0;
    add_ln28_25_reg_1312[0] <= 1'b1;
    add_ln28_27_reg_1317[0] <= 1'b0;
    add_ln28_28_reg_1322[0] <= 1'b1;
end

endmodule //depthwise_conv2d_fix
