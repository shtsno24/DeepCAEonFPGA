// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module padding2d_fix16_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_depth,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_depth;
input  [15:0] input_height;
input  [15:0] input_width;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [15:0] output_height;
input  [15:0] output_width;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[11:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[15:0] output_r_d0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_s_fu_226_p1;
reg   [31:0] tmp_s_reg_532;
wire   [16:0] tmp_15_fu_234_p2;
reg   [16:0] tmp_15_reg_537;
wire   [31:0] tmp_16_fu_240_p1;
reg   [31:0] tmp_16_reg_544;
wire   [31:0] tmp_17_fu_244_p1;
reg   [31:0] tmp_17_reg_549;
wire   [31:0] tmp_18_fu_248_p1;
reg   [31:0] tmp_18_reg_556;
wire   [16:0] tmp_19_fu_256_p2;
reg   [16:0] tmp_19_reg_561;
wire   [16:0] tmp_20_fu_262_p2;
reg   [16:0] tmp_20_reg_566;
wire   [16:0] tmp_21_fu_268_p2;
reg   [16:0] tmp_21_reg_571;
wire   [31:0] next_mul3_fu_274_p2;
reg   [31:0] next_mul3_reg_576;
wire    ap_CS_fsm_state2;
wire   [31:0] next_mul_fu_279_p2;
reg   [31:0] next_mul_reg_581;
wire   [15:0] depth_1_fu_289_p2;
reg   [15:0] depth_1_reg_589;
wire   [31:0] tmp_24_fu_295_p2;
reg   [31:0] tmp_24_reg_594;
wire   [0:0] exitcond2_fu_284_p2;
wire   [15:0] width_1_fu_313_p2;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_31_fu_342_p2;
reg  signed [31:0] tmp_31_reg_611;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_29_fu_337_p2;
wire  signed [31:0] tmp_fu_358_p2;
reg  signed [31:0] tmp_reg_616;
wire  signed [31:0] tmp_32_fu_364_p2;
reg  signed [31:0] tmp_32_reg_621;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp3_fu_368_p2;
reg   [31:0] tmp3_reg_628;
wire   [31:0] tmp_34_fu_376_p1;
reg   [31:0] tmp_34_reg_633;
wire    ap_CS_fsm_state7;
wire   [0:0] tmp_35_fu_384_p2;
wire   [15:0] width_3_fu_409_p2;
reg   [15:0] width_3_reg_646;
wire   [15:0] width_5_fu_424_p2;
wire    ap_CS_fsm_state9;
wire   [15:0] height_2_fu_453_p2;
wire   [0:0] tmp_44_fu_438_p2;
wire   [15:0] height_fu_459_p2;
reg   [15:0] height_reg_664;
wire    ap_CS_fsm_state10;
wire   [31:0] tmp_42_fu_512_p2;
reg   [31:0] tmp_42_reg_672;
wire   [0:0] tmp_37_fu_473_p2;
wire   [15:0] width_4_fu_491_p2;
wire    ap_CS_fsm_state11;
reg   [15:0] depth_reg_128;
reg   [31:0] phi_mul_reg_139;
reg  signed [31:0] phi_mul2_reg_151;
reg   [15:0] width_reg_163;
wire   [0:0] tmp_26_fu_308_p2;
reg   [15:0] height1_reg_174;
reg   [15:0] width3_reg_186;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state6;
reg   [15:0] width4_0_in_reg_197;
reg   [15:0] height5_0_in_reg_206;
wire   [0:0] tmp_46_fu_486_p2;
reg   [15:0] width6_reg_215;
wire  signed [63:0] tmp_30_fu_324_p1;
wire  signed [63:0] tmp_33_fu_372_p1;
wire  signed [63:0] tmp_39_fu_404_p1;
wire  signed [63:0] tmp_41_fu_419_p1;
wire  signed [63:0] tmp_48_fu_448_p1;
wire  signed [63:0] tmp_50_fu_507_p1;
wire   [16:0] tmp_cast_fu_230_p1;
wire   [16:0] tmp_18_cast_fu_252_p1;
wire   [15:0] tmp_24_fu_295_p1;
wire   [16:0] tmp_30_cast_fu_304_p1;
wire   [31:0] tmp_25_fu_300_p1;
wire   [31:0] tmp_27_fu_319_p2;
wire   [16:0] tmp_28_cast_fu_333_p1;
wire   [31:0] tmp_28_fu_329_p1;
wire   [16:0] tmp2_fu_348_p2;
wire  signed [31:0] tmp2_cast_fu_354_p1;
wire   [15:0] tmp_32_fu_364_p0;
wire   [15:0] tmp3_fu_368_p1;
wire   [16:0] tmp_43_cast_fu_380_p1;
wire   [16:0] tmp4_fu_389_p2;
wire  signed [31:0] tmp4_cast_fu_395_p1;
wire   [31:0] tmp_38_fu_399_p2;
wire   [31:0] tmp_40_fu_415_p2;
wire   [16:0] tmp_56_cast_fu_434_p1;
wire   [31:0] tmp_43_fu_430_p1;
wire   [31:0] tmp_47_fu_443_p2;
wire   [16:0] tmp_37_cast_fu_469_p1;
wire   [16:0] tmp_45_cast_fu_482_p1;
wire   [31:0] tmp_45_fu_478_p1;
wire   [31:0] tmp5_fu_497_p2;
(* use_dsp48 = "no" *) wire   [31:0] tmp_49_fu_502_p2;
wire   [15:0] tmp_42_fu_512_p0;
wire   [15:0] tmp_42_fu_512_p1;
reg   [10:0] ap_NS_fsm;
wire   [31:0] tmp_42_fu_512_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

network_mul_mul_16ns_16ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16ns_16ns_32_1_1_U34(
    .din0(tmp_42_fu_512_p0),
    .din1(tmp_42_fu_512_p1),
    .dout(tmp_42_fu_512_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        depth_reg_128 <= depth_1_reg_589;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        depth_reg_128 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_26_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        height1_reg_174 <= 16'd1;
    end else if (((tmp_44_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        height1_reg_174 <= height_2_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        height5_0_in_reg_206 <= input_height;
    end else if (((tmp_46_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        height5_0_in_reg_206 <= height_reg_664;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        phi_mul2_reg_151 <= next_mul3_reg_576;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_151 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_37_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        phi_mul_reg_139 <= next_mul_reg_581;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_139 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        width3_reg_186 <= 16'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        width3_reg_186 <= width_3_reg_646;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_35_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        width4_0_in_reg_197 <= input_width;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_44_fu_438_p2 == 1'd1))) begin
        width4_0_in_reg_197 <= width_5_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_37_fu_473_p2 == 1'd1))) begin
        width6_reg_215 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (tmp_46_fu_486_p2 == 1'd1))) begin
        width6_reg_215 <= width_4_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        width_reg_163 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_26_fu_308_p2 == 1'd1))) begin
        width_reg_163 <= width_1_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        depth_1_reg_589 <= depth_1_fu_289_p2;
        next_mul3_reg_576 <= next_mul3_fu_274_p2;
        next_mul_reg_581 <= next_mul_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        height_reg_664 <= height_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp3_reg_628 <= tmp3_fu_368_p2;
        tmp_32_reg_621 <= tmp_32_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_15_reg_537 <= tmp_15_fu_234_p2;
        tmp_16_reg_544[15 : 0] <= tmp_16_fu_240_p1[15 : 0];
        tmp_17_reg_549[15 : 0] <= tmp_17_fu_244_p1[15 : 0];
        tmp_18_reg_556[15 : 0] <= tmp_18_fu_248_p1[15 : 0];
        tmp_19_reg_561 <= tmp_19_fu_256_p2;
        tmp_20_reg_566 <= tmp_20_fu_262_p2;
        tmp_21_reg_571 <= tmp_21_fu_268_p2;
        tmp_s_reg_532[15 : 0] <= tmp_s_fu_226_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_24_reg_594 <= tmp_24_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_29_fu_337_p2 == 1'd1))) begin
        tmp_31_reg_611 <= tmp_31_fu_342_p2;
        tmp_reg_616 <= tmp_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_34_reg_633[15 : 0] <= tmp_34_fu_376_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_37_fu_473_p2 == 1'd1))) begin
        tmp_42_reg_672 <= tmp_42_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_35_fu_384_p2 == 1'd1))) begin
        width_3_reg_646 <= width_3_fu_409_p2;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        output_r_address0 = tmp_50_fu_507_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        output_r_address0 = tmp_48_fu_448_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_address0 = tmp_41_fu_419_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        output_r_address0 = tmp_33_fu_372_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_address0 = tmp_30_fu_324_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_d0 = input_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        output_r_d0 = 16'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state3) & (tmp_26_fu_308_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_46_fu_486_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state9) & (tmp_44_fu_438_p2 == 1'd1)))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_26_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_29_fu_337_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((tmp_35_fu_384_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state9 : begin
            if (((tmp_44_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((tmp_37_fu_473_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((tmp_46_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign depth_1_fu_289_p2 = (depth_reg_128 + 16'd1);

assign exitcond2_fu_284_p2 = ((depth_reg_128 == input_depth) ? 1'b1 : 1'b0);

assign height_2_fu_453_p2 = (height1_reg_174 + 16'd1);

assign height_fu_459_p2 = (height5_0_in_reg_206 + 16'd1);

assign input_r_address0 = tmp_39_fu_404_p1;

assign next_mul3_fu_274_p2 = ($signed(phi_mul2_reg_151) + $signed(tmp_16_reg_544));

assign next_mul_fu_279_p2 = (phi_mul_reg_139 + tmp_18_reg_556);

assign tmp2_cast_fu_354_p1 = $signed(tmp2_fu_348_p2);

assign tmp2_fu_348_p2 = ($signed(tmp_28_cast_fu_333_p1) + $signed(17'd131071));

assign tmp3_fu_368_p1 = tmp_s_reg_532;

assign tmp3_fu_368_p2 = ($signed(tmp_reg_616) * $signed({{1'b0}, {tmp3_fu_368_p1}}));

assign tmp4_cast_fu_395_p1 = $signed(tmp4_fu_389_p2);

assign tmp4_fu_389_p2 = ($signed(tmp_43_cast_fu_380_p1) + $signed(17'd131071));

assign tmp5_fu_497_p2 = (tmp_24_reg_594 + tmp_45_fu_478_p1);

assign tmp_15_fu_234_p2 = (tmp_cast_fu_230_p1 + 17'd2);

assign tmp_16_fu_240_p1 = output_height;

assign tmp_17_fu_244_p1 = output_width;

assign tmp_18_cast_fu_252_p1 = input_height;

assign tmp_18_fu_248_p1 = input_height;

assign tmp_19_fu_256_p2 = (tmp_18_cast_fu_252_p1 + 17'd1);

assign tmp_20_fu_262_p2 = (tmp_cast_fu_230_p1 + 17'd1);

assign tmp_21_fu_268_p2 = (tmp_18_cast_fu_252_p1 + 17'd2);

assign tmp_24_fu_295_p1 = tmp_17_reg_549;

assign tmp_24_fu_295_p2 = ($signed(phi_mul2_reg_151) * $signed({{1'b0}, {tmp_24_fu_295_p1}}));

assign tmp_25_fu_300_p1 = width_reg_163;

assign tmp_26_fu_308_p2 = ((tmp_30_cast_fu_304_p1 < tmp_15_reg_537) ? 1'b1 : 1'b0);

assign tmp_27_fu_319_p2 = (tmp_24_reg_594 + tmp_25_fu_300_p1);

assign tmp_28_cast_fu_333_p1 = height1_reg_174;

assign tmp_28_fu_329_p1 = height1_reg_174;

assign tmp_29_fu_337_p2 = ((tmp_28_cast_fu_333_p1 < tmp_19_reg_561) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_304_p1 = width_reg_163;

assign tmp_30_fu_324_p1 = $signed(tmp_27_fu_319_p2);

assign tmp_31_fu_342_p2 = ($signed(tmp_28_fu_329_p1) + $signed(phi_mul2_reg_151));

assign tmp_32_fu_364_p0 = tmp_17_reg_549;

assign tmp_32_fu_364_p2 = ($signed({{1'b0}, {tmp_32_fu_364_p0}}) * $signed(tmp_31_reg_611));

assign tmp_33_fu_372_p1 = tmp_32_reg_621;

assign tmp_34_fu_376_p1 = width3_reg_186;

assign tmp_35_fu_384_p2 = ((tmp_43_cast_fu_380_p1 < tmp_20_reg_566) ? 1'b1 : 1'b0);

assign tmp_37_cast_fu_469_p1 = height_fu_459_p2;

assign tmp_37_fu_473_p2 = ((tmp_37_cast_fu_469_p1 < tmp_21_reg_571) ? 1'b1 : 1'b0);

assign tmp_38_fu_399_p2 = ($signed(tmp4_cast_fu_395_p1) + $signed(tmp3_reg_628));

assign tmp_39_fu_404_p1 = $signed(tmp_38_fu_399_p2);

assign tmp_40_fu_415_p2 = ($signed(tmp_32_reg_621) + $signed(tmp_34_reg_633));

assign tmp_41_fu_419_p1 = $signed(tmp_40_fu_415_p2);

assign tmp_42_fu_512_p0 = tmp_42_fu_512_p00;

assign tmp_42_fu_512_p00 = height_fu_459_p2;

assign tmp_42_fu_512_p1 = tmp_17_reg_549;

assign tmp_43_cast_fu_380_p1 = width3_reg_186;

assign tmp_43_fu_430_p1 = width_5_fu_424_p2;

assign tmp_44_fu_438_p2 = ((tmp_56_cast_fu_434_p1 < tmp_15_reg_537) ? 1'b1 : 1'b0);

assign tmp_45_cast_fu_482_p1 = width6_reg_215;

assign tmp_45_fu_478_p1 = width6_reg_215;

assign tmp_46_fu_486_p2 = ((tmp_45_cast_fu_482_p1 < tmp_15_reg_537) ? 1'b1 : 1'b0);

assign tmp_47_fu_443_p2 = ($signed(tmp_32_reg_621) + $signed(tmp_43_fu_430_p1));

assign tmp_48_fu_448_p1 = $signed(tmp_47_fu_443_p2);

assign tmp_49_fu_502_p2 = (tmp5_fu_497_p2 + tmp_42_reg_672);

assign tmp_50_fu_507_p1 = $signed(tmp_49_fu_502_p2);

assign tmp_56_cast_fu_434_p1 = width_5_fu_424_p2;

assign tmp_cast_fu_230_p1 = input_width;

assign tmp_fu_358_p2 = ($signed(tmp2_cast_fu_354_p1) + $signed(phi_mul_reg_139));

assign tmp_s_fu_226_p1 = input_width;

assign width_1_fu_313_p2 = (width_reg_163 + 16'd1);

assign width_3_fu_409_p2 = (width3_reg_186 + 16'd1);

assign width_4_fu_491_p2 = (width6_reg_215 + 16'd1);

assign width_5_fu_424_p2 = (width4_0_in_reg_197 + 16'd1);

always @ (posedge ap_clk) begin
    tmp_s_reg_532[31:16] <= 16'b0000000000000000;
    tmp_16_reg_544[31:16] <= 16'b0000000000000000;
    tmp_17_reg_549[31:16] <= 16'b0000000000000000;
    tmp_18_reg_556[31:16] <= 16'b0000000000000000;
    tmp_34_reg_633[31:16] <= 16'b0000000000000000;
end

endmodule //padding2d_fix16_3
