// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state9 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] SeparableConv2D_3_b_s_address0;
reg    SeparableConv2D_3_b_s_ce0;
wire   [13:0] SeparableConv2D_3_b_s_q0;
reg   [10:0] indvar_flatten20_reg_404;
reg   [3:0] out_h_0_reg_415;
reg   [7:0] indvar_flatten_reg_426;
reg   [3:0] out_w_0_reg_437;
reg   [21:0] buffer_0_reg_448;
reg   [3:0] in_d_0_reg_458;
wire   [11:0] add_ln19_fu_469_p2;
reg   [11:0] add_ln19_reg_1121;
wire    ap_CS_fsm_state2;
wire   [4:0] out_d_fu_481_p2;
reg   [4:0] out_d_reg_1129;
wire   [0:0] icmp_ln19_fu_475_p2;
wire   [3:0] trunc_ln29_fu_492_p1;
reg   [3:0] trunc_ln29_reg_1139;
wire  signed [21:0] sext_ln29_fu_496_p1;
reg  signed [21:0] sext_ln29_reg_1144;
wire    ap_CS_fsm_state3;
wire   [6:0] shl_ln_fu_500_p3;
reg   [6:0] shl_ln_reg_1151;
wire   [0:0] icmp_ln20_fu_547_p2;
reg   [0:0] icmp_ln20_reg_1156;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_1156_pp0_iter1_reg;
reg   [0:0] icmp_ln20_reg_1156_pp0_iter2_reg;
reg   [0:0] icmp_ln20_reg_1156_pp0_iter3_reg;
wire   [10:0] add_ln20_fu_553_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln21_fu_565_p2;
reg   [0:0] icmp_ln21_reg_1165;
reg   [0:0] icmp_ln21_reg_1165_pp0_iter1_reg;
reg   [0:0] icmp_ln21_reg_1165_pp0_iter2_reg;
reg   [0:0] icmp_ln21_reg_1165_pp0_iter3_reg;
wire  signed [8:0] select_ln29_4_fu_609_p3;
reg  signed [8:0] select_ln29_4_reg_1170;
reg  signed [8:0] select_ln29_4_reg_1170_pp0_iter1_reg;
reg  signed [8:0] select_ln29_4_reg_1170_pp0_iter2_reg;
wire   [0:0] and_ln29_fu_637_p2;
reg   [0:0] and_ln29_reg_1175;
reg   [0:0] and_ln29_reg_1175_pp0_iter1_reg;
reg   [0:0] and_ln29_reg_1175_pp0_iter2_reg;
reg   [0:0] and_ln29_reg_1175_pp0_iter3_reg;
wire   [3:0] select_ln20_fu_643_p3;
wire   [3:0] select_ln24_3_fu_663_p3;
reg   [3:0] select_ln24_3_reg_1185;
reg   [3:0] select_ln24_3_reg_1185_pp0_iter1_reg;
wire   [3:0] select_ln24_4_fu_671_p3;
reg   [3:0] select_ln24_4_reg_1191;
reg   [3:0] select_ln24_4_reg_1191_pp0_iter1_reg;
reg   [3:0] select_ln24_4_reg_1191_pp0_iter2_reg;
wire   [8:0] select_ln24_5_fu_689_p3;
reg  signed [8:0] select_ln24_5_reg_1197;
wire   [3:0] in_d_fu_697_p2;
reg   [3:0] in_d_reg_1202;
reg   [3:0] in_d_reg_1202_pp0_iter1_reg;
reg   [3:0] in_d_reg_1202_pp0_iter2_reg;
wire   [7:0] select_ln21_fu_709_p3;
reg  signed [15:0] input_load_reg_1218;
wire   [15:0] tmp_3_fu_739_p130;
reg  signed [15:0] tmp_3_reg_1223;
wire  signed [31:0] mul_ln29_fu_1115_p2;
reg  signed [31:0] mul_ln29_reg_1228;
wire   [0:0] icmp_ln24_2_fu_1013_p2;
reg   [0:0] icmp_ln24_2_reg_1233;
wire   [12:0] add_ln34_1_fu_1028_p2;
reg   [12:0] add_ln34_1_reg_1237;
wire   [21:0] buffer_fu_1059_p2;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [4:0] out_d_0_reg_381;
wire    ap_CS_fsm_state9;
reg   [11:0] phi_mul_reg_392;
reg   [3:0] ap_phi_mux_out_w_0_phi_fu_441_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_in_d_0_phi_fu_462_p4;
wire   [63:0] zext_ln23_fu_487_p1;
wire   [63:0] zext_ln29_8_fu_726_p1;
wire   [63:0] zext_ln34_fu_1101_p1;
wire   [7:0] shl_ln29_5_fu_507_p3;
wire   [4:0] shl_ln29_6_fu_519_p3;
wire   [8:0] zext_ln29_fu_515_p1;
wire   [8:0] zext_ln29_6_fu_527_p1;
wire   [8:0] sub_ln29_fu_531_p2;
wire   [8:0] zext_ln24_fu_537_p1;
wire   [3:0] out_h_fu_559_p2;
wire   [7:0] shl_ln29_5_mid1_fu_579_p3;
wire   [4:0] shl_ln29_6_mid1_fu_591_p3;
wire   [8:0] zext_ln29_7_fu_587_p1;
wire   [8:0] zext_ln29_9_fu_599_p1;
wire   [8:0] sub_ln29_2_fu_603_p2;
wire   [8:0] add_ln29_fu_541_p2;
wire   [0:0] icmp_ln24_fu_631_p2;
wire   [0:0] xor_ln29_fu_625_p2;
wire   [3:0] select_ln29_fu_571_p3;
wire   [0:0] or_ln24_fu_657_p2;
wire   [3:0] out_w_fu_651_p2;
wire   [8:0] zext_ln24_3_fu_679_p1;
wire   [8:0] add_ln29_4_fu_683_p2;
wire   [8:0] select_ln29_5_fu_617_p3;
wire   [7:0] add_ln21_fu_703_p2;
wire  signed [11:0] grp_fu_1106_p3;
wire  signed [31:0] sext_ln29_5_fu_723_p1;
wire   [6:0] zext_ln29_11_fu_731_p1;
wire   [6:0] tmp_3_fu_739_p129;
wire   [11:0] zext_ln24_2_fu_1004_p1;
wire   [11:0] add_ln34_fu_1018_p2;
wire   [12:0] zext_ln34_2_fu_1024_p1;
wire  signed [12:0] sext_ln29_4_fu_1001_p1;
wire   [21:0] select_ln29_3_fu_1034_p3;
wire   [17:0] trunc_ln_fu_1046_p4;
wire  signed [21:0] sext_ln29_6_fu_1055_p1;
wire   [21:0] select_ln24_fu_1040_p3;
wire   [0:0] tmp_2_fu_1065_p3;
wire   [0:0] xor_ln33_fu_1077_p2;
wire   [15:0] select_ln33_fu_1083_p3;
wire   [15:0] trunc_ln33_fu_1073_p1;
wire  signed [31:0] sext_ln34_fu_1098_p1;
wire   [3:0] grp_fu_1106_p0;
wire   [8:0] grp_fu_1106_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_1106_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

pointwise_conv2d_fix_3_SeparableConv2D_3_b_s #(
    .DataWidth( 14 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
SeparableConv2D_3_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_3_b_s_address0),
    .ce0(SeparableConv2D_3_b_s_ce0),
    .q0(SeparableConv2D_3_b_s_q0)
);

network_mux_1287_16_1_1_x #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 16 ),
    .din65_WIDTH( 16 ),
    .din66_WIDTH( 16 ),
    .din67_WIDTH( 16 ),
    .din68_WIDTH( 16 ),
    .din69_WIDTH( 16 ),
    .din70_WIDTH( 16 ),
    .din71_WIDTH( 16 ),
    .din72_WIDTH( 16 ),
    .din73_WIDTH( 16 ),
    .din74_WIDTH( 16 ),
    .din75_WIDTH( 16 ),
    .din76_WIDTH( 16 ),
    .din77_WIDTH( 16 ),
    .din78_WIDTH( 16 ),
    .din79_WIDTH( 16 ),
    .din80_WIDTH( 16 ),
    .din81_WIDTH( 16 ),
    .din82_WIDTH( 16 ),
    .din83_WIDTH( 16 ),
    .din84_WIDTH( 16 ),
    .din85_WIDTH( 16 ),
    .din86_WIDTH( 16 ),
    .din87_WIDTH( 16 ),
    .din88_WIDTH( 16 ),
    .din89_WIDTH( 16 ),
    .din90_WIDTH( 16 ),
    .din91_WIDTH( 16 ),
    .din92_WIDTH( 16 ),
    .din93_WIDTH( 16 ),
    .din94_WIDTH( 16 ),
    .din95_WIDTH( 16 ),
    .din96_WIDTH( 16 ),
    .din97_WIDTH( 16 ),
    .din98_WIDTH( 16 ),
    .din99_WIDTH( 16 ),
    .din100_WIDTH( 16 ),
    .din101_WIDTH( 16 ),
    .din102_WIDTH( 16 ),
    .din103_WIDTH( 16 ),
    .din104_WIDTH( 16 ),
    .din105_WIDTH( 16 ),
    .din106_WIDTH( 16 ),
    .din107_WIDTH( 16 ),
    .din108_WIDTH( 16 ),
    .din109_WIDTH( 16 ),
    .din110_WIDTH( 16 ),
    .din111_WIDTH( 16 ),
    .din112_WIDTH( 16 ),
    .din113_WIDTH( 16 ),
    .din114_WIDTH( 16 ),
    .din115_WIDTH( 16 ),
    .din116_WIDTH( 16 ),
    .din117_WIDTH( 16 ),
    .din118_WIDTH( 16 ),
    .din119_WIDTH( 16 ),
    .din120_WIDTH( 16 ),
    .din121_WIDTH( 16 ),
    .din122_WIDTH( 16 ),
    .din123_WIDTH( 16 ),
    .din124_WIDTH( 16 ),
    .din125_WIDTH( 16 ),
    .din126_WIDTH( 16 ),
    .din127_WIDTH( 16 ),
    .din128_WIDTH( 7 ),
    .dout_WIDTH( 16 ))
network_mux_1287_16_1_1_x_U121(
    .din0(16'd62885),
    .din1(16'd2073),
    .din2(16'd1156),
    .din3(16'd3349),
    .din4(16'd604),
    .din5(16'd57380),
    .din6(16'd60508),
    .din7(16'd6387),
    .din8(16'd55510),
    .din9(16'd5920),
    .din10(16'd1322),
    .din11(16'd57996),
    .din12(16'd3993),
    .din13(16'd8863),
    .din14(16'd10066),
    .din15(16'd6497),
    .din16(16'd59697),
    .din17(16'd4141),
    .din18(16'd60043),
    .din19(16'd7347),
    .din20(16'd64048),
    .din21(16'd63388),
    .din22(16'd57513),
    .din23(16'd6361),
    .din24(16'd2258),
    .din25(16'd64569),
    .din26(16'd64590),
    .din27(16'd58169),
    .din28(16'd6947),
    .din29(16'd58235),
    .din30(16'd1582),
    .din31(16'd59650),
    .din32(16'd3762),
    .din33(16'd60298),
    .din34(16'd4505),
    .din35(16'd58497),
    .din36(16'd63790),
    .din37(16'd953),
    .din38(16'd5991),
    .din39(16'd58218),
    .din40(16'd61344),
    .din41(16'd7946),
    .din42(16'd58735),
    .din43(16'd58602),
    .din44(16'd6251),
    .din45(16'd58211),
    .din46(16'd61243),
    .din47(16'd57804),
    .din48(16'd6991),
    .din49(16'd62949),
    .din50(16'd1501),
    .din51(16'd61189),
    .din52(16'd58710),
    .din53(16'd535),
    .din54(16'd7485),
    .din55(16'd65437),
    .din56(16'd61129),
    .din57(16'd6362),
    .din58(16'd60818),
    .din59(16'd60802),
    .din60(16'd2770),
    .din61(16'd64224),
    .din62(16'd2669),
    .din63(16'd62677),
    .din64(16'd61095),
    .din65(16'd60052),
    .din66(16'd6676),
    .din67(16'd61248),
    .din68(16'd58276),
    .din69(16'd669),
    .din70(16'd59019),
    .din71(16'd62964),
    .din72(16'd59186),
    .din73(16'd2136),
    .din74(16'd4793),
    .din75(16'd7198),
    .din76(16'd58792),
    .din77(16'd8508),
    .din78(16'd59698),
    .din79(16'd6660),
    .din80(16'd8779),
    .din81(16'd7883),
    .din82(16'd64369),
    .din83(16'd64293),
    .din84(16'd3744),
    .din85(16'd2181),
    .din86(16'd4585),
    .din87(16'd63357),
    .din88(16'd738),
    .din89(16'd57610),
    .din90(16'd4738),
    .din91(16'd2494),
    .din92(16'd2931),
    .din93(16'd58083),
    .din94(16'd7364),
    .din95(16'd64769),
    .din96(16'd60896),
    .din97(16'd59412),
    .din98(16'd61162),
    .din99(16'd63852),
    .din100(16'd9249),
    .din101(16'd9727),
    .din102(16'd65469),
    .din103(16'd1304),
    .din104(16'd58553),
    .din105(16'd788),
    .din106(16'd5068),
    .din107(16'd62814),
    .din108(16'd60492),
    .din109(16'd57349),
    .din110(16'd64499),
    .din111(16'd7848),
    .din112(16'd63471),
    .din113(16'd58243),
    .din114(16'd2987),
    .din115(16'd60466),
    .din116(16'd65276),
    .din117(16'd57906),
    .din118(16'd65308),
    .din119(16'd62696),
    .din120(16'd62681),
    .din121(16'd57322),
    .din122(16'd62827),
    .din123(16'd59954),
    .din124(16'd60637),
    .din125(16'd4232),
    .din126(16'd5145),
    .din127(16'd1740),
    .din128(tmp_3_fu_739_p129),
    .dout(tmp_3_fu_739_p130)
);

network_mac_muladd_4ns_9ns_9s_12_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 12 ))
network_mac_muladd_4ns_9ns_9s_12_1_1_U122(
    .din0(grp_fu_1106_p0),
    .din1(grp_fu_1106_p1),
    .din2(select_ln24_5_reg_1197),
    .dout(grp_fu_1106_p3)
);

network_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16s_16s_32_1_1_U123(
    .din0(tmp_3_reg_1223),
    .din1(input_load_reg_1218),
    .dout(mul_ln29_fu_1115_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_1156_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        buffer_0_reg_448 <= buffer_fu_1059_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buffer_0_reg_448 <= sext_ln29_fu_496_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_1156 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        in_d_0_reg_458 <= in_d_reg_1202;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_d_0_reg_458 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten20_reg_404 <= add_ln20_fu_553_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten20_reg_404 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_426 <= select_ln21_fu_709_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_426 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        out_d_0_reg_381 <= out_d_reg_1129;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_381 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        out_h_0_reg_415 <= select_ln20_fu_643_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_h_0_reg_415 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_1156 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        out_w_0_reg_437 <= select_ln24_4_reg_1191;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_w_0_reg_437 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul_reg_392 <= add_ln19_reg_1121;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_392 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln19_reg_1121 <= add_ln19_fu_469_p2;
        out_d_reg_1129 <= out_d_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_2_fu_1013_p2 == 1'd1))) begin
        add_ln34_1_reg_1237 <= add_ln34_1_fu_1028_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln29_reg_1175 <= and_ln29_fu_637_p2;
        icmp_ln21_reg_1165 <= icmp_ln21_fu_565_p2;
        select_ln24_3_reg_1185 <= select_ln24_3_fu_663_p3;
        select_ln24_5_reg_1197 <= select_ln24_5_fu_689_p3;
        select_ln29_4_reg_1170[8 : 1] <= select_ln29_4_fu_609_p3[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln29_reg_1175_pp0_iter1_reg <= and_ln29_reg_1175;
        icmp_ln20_reg_1156 <= icmp_ln20_fu_547_p2;
        icmp_ln20_reg_1156_pp0_iter1_reg <= icmp_ln20_reg_1156;
        icmp_ln21_reg_1165_pp0_iter1_reg <= icmp_ln21_reg_1165;
        in_d_reg_1202_pp0_iter1_reg <= in_d_reg_1202;
        select_ln24_3_reg_1185_pp0_iter1_reg <= select_ln24_3_reg_1185;
        select_ln24_4_reg_1191_pp0_iter1_reg <= select_ln24_4_reg_1191;
        select_ln29_4_reg_1170_pp0_iter1_reg[8 : 1] <= select_ln29_4_reg_1170[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln29_reg_1175_pp0_iter2_reg <= and_ln29_reg_1175_pp0_iter1_reg;
        and_ln29_reg_1175_pp0_iter3_reg <= and_ln29_reg_1175_pp0_iter2_reg;
        icmp_ln20_reg_1156_pp0_iter2_reg <= icmp_ln20_reg_1156_pp0_iter1_reg;
        icmp_ln20_reg_1156_pp0_iter3_reg <= icmp_ln20_reg_1156_pp0_iter2_reg;
        icmp_ln21_reg_1165_pp0_iter2_reg <= icmp_ln21_reg_1165_pp0_iter1_reg;
        icmp_ln21_reg_1165_pp0_iter3_reg <= icmp_ln21_reg_1165_pp0_iter2_reg;
        in_d_reg_1202_pp0_iter2_reg <= in_d_reg_1202_pp0_iter1_reg;
        select_ln24_4_reg_1191_pp0_iter2_reg <= select_ln24_4_reg_1191_pp0_iter1_reg;
        select_ln29_4_reg_1170_pp0_iter2_reg[8 : 1] <= select_ln29_4_reg_1170_pp0_iter1_reg[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_1156_pp0_iter2_reg == 1'd0))) begin
        icmp_ln24_2_reg_1233 <= icmp_ln24_2_fu_1013_p2;
        mul_ln29_reg_1228 <= mul_ln29_fu_1115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        in_d_reg_1202 <= in_d_fu_697_p2;
        select_ln24_4_reg_1191 <= select_ln24_4_fu_671_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_1156_pp0_iter1_reg == 1'd0))) begin
        input_load_reg_1218 <= input_r_q0;
        tmp_3_reg_1223 <= tmp_3_fu_739_p130;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sext_ln29_reg_1144 <= sext_ln29_fu_496_p1;
        shl_ln_reg_1151[6 : 3] <= shl_ln_fu_500_p3[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln29_reg_1139 <= trunc_ln29_fu_492_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_3_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_3_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_547_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln19_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_1156 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_in_d_0_phi_fu_462_p4 = in_d_reg_1202;
    end else begin
        ap_phi_mux_in_d_0_phi_fu_462_p4 = in_d_0_reg_458;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_1156 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_out_w_0_phi_fu_441_p4 = select_ln24_4_reg_1191;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_441_p4 = out_w_0_reg_437;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln24_2_reg_1233 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln20_fu_547_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln20_fu_547_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_3_b_s_address0 = zext_ln23_fu_487_p1;

assign add_ln19_fu_469_p2 = (phi_mul_reg_392 + 12'd196);

assign add_ln20_fu_553_p2 = (indvar_flatten20_reg_404 + 11'd1);

assign add_ln21_fu_703_p2 = (indvar_flatten_reg_426 + 8'd1);

assign add_ln29_4_fu_683_p2 = ($signed(select_ln29_4_fu_609_p3) + $signed(zext_ln24_3_fu_679_p1));

assign add_ln29_fu_541_p2 = (sub_ln29_fu_531_p2 + zext_ln24_fu_537_p1);

assign add_ln34_1_fu_1028_p2 = ($signed(zext_ln34_2_fu_1024_p1) + $signed(sext_ln29_4_fu_1001_p1));

assign add_ln34_fu_1018_p2 = (phi_mul_reg_392 + zext_ln24_2_fu_1004_p1);

assign and_ln29_fu_637_p2 = (xor_ln29_fu_625_p2 & icmp_ln24_fu_631_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_fu_1059_p2 = ($signed(sext_ln29_6_fu_1055_p1) + $signed(select_ln24_fu_1040_p3));

assign grp_fu_1106_p0 = grp_fu_1106_p00;

assign grp_fu_1106_p00 = select_ln24_3_reg_1185;

assign grp_fu_1106_p1 = 12'd196;

assign icmp_ln19_fu_475_p2 = ((out_d_0_reg_381 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_547_p2 = ((indvar_flatten20_reg_404 == 11'd1568) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_565_p2 = ((indvar_flatten_reg_426 == 8'd112) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_1013_p2 = ((in_d_reg_1202_pp0_iter2_reg == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_631_p2 = ((ap_phi_mux_in_d_0_phi_fu_462_p4 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_697_p2 = (select_ln24_3_fu_663_p3 + 4'd1);

assign input_r_address0 = zext_ln29_8_fu_726_p1;

assign or_ln24_fu_657_p2 = (icmp_ln21_fu_565_p2 | and_ln29_fu_637_p2);

assign out_d_fu_481_p2 = (out_d_0_reg_381 + 5'd1);

assign out_h_fu_559_p2 = (out_h_0_reg_415 + 4'd1);

assign out_w_fu_651_p2 = (select_ln29_fu_571_p3 + 4'd1);

assign output_r_address0 = zext_ln34_fu_1101_p1;

assign output_r_d0 = (trunc_ln33_fu_1073_p1 & select_ln33_fu_1083_p3);

assign select_ln20_fu_643_p3 = ((icmp_ln21_fu_565_p2[0:0] === 1'b1) ? out_h_fu_559_p2 : out_h_0_reg_415);

assign select_ln21_fu_709_p3 = ((icmp_ln21_fu_565_p2[0:0] === 1'b1) ? 8'd1 : add_ln21_fu_703_p2);

assign select_ln24_3_fu_663_p3 = ((or_ln24_fu_657_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_in_d_0_phi_fu_462_p4);

assign select_ln24_4_fu_671_p3 = ((and_ln29_fu_637_p2[0:0] === 1'b1) ? out_w_fu_651_p2 : select_ln29_fu_571_p3);

assign select_ln24_5_fu_689_p3 = ((and_ln29_fu_637_p2[0:0] === 1'b1) ? add_ln29_4_fu_683_p2 : select_ln29_5_fu_617_p3);

assign select_ln24_fu_1040_p3 = ((and_ln29_reg_1175_pp0_iter3_reg[0:0] === 1'b1) ? sext_ln29_reg_1144 : select_ln29_3_fu_1034_p3);

assign select_ln29_3_fu_1034_p3 = ((icmp_ln21_reg_1165_pp0_iter3_reg[0:0] === 1'b1) ? sext_ln29_reg_1144 : buffer_0_reg_448);

assign select_ln29_4_fu_609_p3 = ((icmp_ln21_fu_565_p2[0:0] === 1'b1) ? sub_ln29_2_fu_603_p2 : sub_ln29_fu_531_p2);

assign select_ln29_5_fu_617_p3 = ((icmp_ln21_fu_565_p2[0:0] === 1'b1) ? sub_ln29_2_fu_603_p2 : add_ln29_fu_541_p2);

assign select_ln29_fu_571_p3 = ((icmp_ln21_fu_565_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_out_w_0_phi_fu_441_p4);

assign select_ln33_fu_1083_p3 = ((xor_ln33_fu_1077_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln29_4_fu_1001_p1 = select_ln29_4_reg_1170_pp0_iter2_reg;

assign sext_ln29_5_fu_723_p1 = grp_fu_1106_p3;

assign sext_ln29_6_fu_1055_p1 = $signed(trunc_ln_fu_1046_p4);

assign sext_ln29_fu_496_p1 = $signed(SeparableConv2D_3_b_s_q0);

assign sext_ln34_fu_1098_p1 = $signed(add_ln34_1_reg_1237);

assign shl_ln29_5_fu_507_p3 = {{out_h_0_reg_415}, {4'd0}};

assign shl_ln29_5_mid1_fu_579_p3 = {{out_h_fu_559_p2}, {4'd0}};

assign shl_ln29_6_fu_519_p3 = {{out_h_0_reg_415}, {1'd0}};

assign shl_ln29_6_mid1_fu_591_p3 = {{out_h_fu_559_p2}, {1'd0}};

assign shl_ln_fu_500_p3 = {{trunc_ln29_reg_1139}, {3'd0}};

assign sub_ln29_2_fu_603_p2 = (zext_ln29_7_fu_587_p1 - zext_ln29_9_fu_599_p1);

assign sub_ln29_fu_531_p2 = (zext_ln29_fu_515_p1 - zext_ln29_6_fu_527_p1);

assign tmp_2_fu_1065_p3 = buffer_fu_1059_p2[32'd15];

assign tmp_3_fu_739_p129 = (zext_ln29_11_fu_731_p1 + shl_ln_reg_1151);

assign trunc_ln29_fu_492_p1 = out_d_0_reg_381[3:0];

assign trunc_ln33_fu_1073_p1 = buffer_fu_1059_p2[15:0];

assign trunc_ln_fu_1046_p4 = {{mul_ln29_reg_1228[31:14]}};

assign xor_ln29_fu_625_p2 = (icmp_ln21_fu_565_p2 ^ 1'd1);

assign xor_ln33_fu_1077_p2 = (tmp_2_fu_1065_p3 ^ 1'd1);

assign zext_ln23_fu_487_p1 = out_d_0_reg_381;

assign zext_ln24_2_fu_1004_p1 = select_ln24_4_reg_1191_pp0_iter2_reg;

assign zext_ln24_3_fu_679_p1 = out_w_fu_651_p2;

assign zext_ln24_fu_537_p1 = ap_phi_mux_out_w_0_phi_fu_441_p4;

assign zext_ln29_11_fu_731_p1 = select_ln24_3_reg_1185_pp0_iter1_reg;

assign zext_ln29_6_fu_527_p1 = shl_ln29_6_fu_519_p3;

assign zext_ln29_7_fu_587_p1 = shl_ln29_5_mid1_fu_579_p3;

assign zext_ln29_8_fu_726_p1 = $unsigned(sext_ln29_5_fu_723_p1);

assign zext_ln29_9_fu_599_p1 = shl_ln29_6_mid1_fu_591_p3;

assign zext_ln29_fu_515_p1 = shl_ln29_5_fu_507_p3;

assign zext_ln34_2_fu_1024_p1 = add_ln34_fu_1018_p2;

assign zext_ln34_fu_1101_p1 = $unsigned(sext_ln34_fu_1098_p1);

always @ (posedge ap_clk) begin
    shl_ln_reg_1151[2:0] <= 3'b000;
    select_ln29_4_reg_1170[0] <= 1'b0;
    select_ln29_4_reg_1170_pp0_iter1_reg[0] <= 1'b0;
    select_ln29_4_reg_1170_pp0_iter2_reg[0] <= 1'b0;
end

endmodule //pointwise_conv2d_fix_3
