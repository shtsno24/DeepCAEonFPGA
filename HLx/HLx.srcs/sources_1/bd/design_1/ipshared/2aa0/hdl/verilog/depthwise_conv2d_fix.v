// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_pp0_stage1 = 7'd4;
parameter    ap_ST_fsm_pp0_stage2 = 7'd8;
parameter    ap_ST_fsm_pp0_stage3 = 7'd16;
parameter    ap_ST_fsm_pp0_stage4 = 7'd32;
parameter    ap_ST_fsm_state14 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] input_r_address1;
output   input_r_ce1;
input  [15:0] input_r_q1;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] input_r_address0;
reg input_r_ce0;
reg[13:0] input_r_address1;
reg input_r_ce1;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] SeparableConv2D_0_w_s_address0;
reg    SeparableConv2D_0_w_s_ce0;
wire   [14:0] SeparableConv2D_0_w_s_q0;
reg   [3:0] SeparableConv2D_0_w_s_address1;
reg    SeparableConv2D_0_w_s_ce1;
wire   [14:0] SeparableConv2D_0_w_s_q1;
reg   [9:0] indvar_flatten80_reg_265;
reg   [0:0] out_d_0_reg_276;
reg   [9:0] indvar_flatten_reg_288;
reg   [4:0] out_h_0_reg_300;
reg   [4:0] out_w_0_reg_311;
reg  signed [14:0] reg_323;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln24_reg_1404;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg  signed [14:0] reg_327;
reg  signed [14:0] reg_331;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg  signed [14:0] reg_335;
reg  signed [15:0] reg_339;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln24_reg_1404_pp0_iter1_reg;
reg  signed [15:0] reg_344;
wire   [63:0] zext_ln27_1_fu_349_p1;
reg   [63:0] zext_ln27_1_reg_1357;
wire   [0:0] out_d_fu_353_p2;
reg   [0:0] out_d_reg_1363;
wire   [63:0] zext_ln27_2_fu_359_p1;
reg   [63:0] zext_ln27_2_reg_1373;
wire   [2:0] select_ln27_fu_363_p3;
reg   [2:0] select_ln27_reg_1379;
wire   [10:0] tmp10_0_0_fu_399_p2;
reg   [10:0] tmp10_0_0_reg_1384;
wire   [10:0] tmp10_1_0_fu_435_p2;
reg   [10:0] tmp10_1_0_reg_1389;
wire   [9:0] tmp10_2_0_fu_467_p2;
reg   [9:0] tmp10_2_0_reg_1394;
wire   [10:0] tmp12_fu_503_p2;
reg   [10:0] tmp12_reg_1399;
wire   [0:0] icmp_ln24_fu_509_p2;
reg   [0:0] icmp_ln24_reg_1404_pp0_iter2_reg;
wire   [9:0] add_ln24_fu_515_p2;
reg   [9:0] add_ln24_reg_1408;
wire   [0:0] icmp_ln32_fu_521_p2;
reg   [0:0] icmp_ln32_reg_1413;
wire   [4:0] select_ln24_fu_527_p3;
reg   [4:0] select_ln24_reg_1432;
wire   [0:0] icmp_ln33_fu_535_p2;
reg   [0:0] icmp_ln33_reg_1440;
wire   [0:0] xor_ln24_2_fu_558_p2;
reg   [0:0] xor_ln24_2_reg_1455;
wire   [0:0] and_ln24_fu_575_p2;
reg   [0:0] and_ln24_reg_1461;
wire   [4:0] out_h_fu_580_p2;
reg   [4:0] out_h_reg_1469;
wire   [4:0] out_w_0_mid2_fu_590_p3;
reg   [4:0] out_w_0_mid2_reg_1475;
wire   [10:0] tmp10_0_0_mid2_fu_628_p3;
reg   [10:0] tmp10_0_0_mid2_reg_1482;
wire   [4:0] out_w_fu_636_p2;
reg   [4:0] out_w_reg_1489;
wire  signed [1:0] select_ln24_17_fu_657_p3;
reg  signed [1:0] select_ln24_17_reg_1496;
wire   [0:0] select_ln24_23_fu_677_p3;
reg   [0:0] select_ln24_23_reg_1511;
wire   [10:0] tmp10_1_0_mid2_fu_728_p3;
reg   [10:0] tmp10_1_0_mid2_reg_1516;
wire   [4:0] tmp11_mid1_fu_735_p2;
reg   [4:0] tmp11_mid1_reg_1523;
wire   [10:0] zext_ln40_1_fu_740_p1;
reg   [10:0] zext_ln40_1_reg_1529;
wire   [10:0] zext_ln40_12_fu_757_p1;
reg   [10:0] zext_ln40_12_reg_1540;
wire   [4:0] add_ln40_4_fu_774_p2;
reg   [4:0] add_ln40_4_reg_1550;
wire   [10:0] add_ln40_7_fu_928_p2;
reg   [10:0] add_ln40_7_reg_1576;
wire   [10:0] add_ln40_8_fu_932_p2;
reg   [10:0] add_ln40_8_reg_1581;
wire   [10:0] add_ln48_fu_937_p2;
reg   [10:0] add_ln48_reg_1586;
reg   [10:0] add_ln48_reg_1586_pp0_iter1_reg;
wire   [9:0] tmp10_2_0_mid2_fu_1003_p3;
reg   [9:0] tmp10_2_0_mid2_reg_1601;
wire   [4:0] select_ln32_fu_1010_p3;
reg   [4:0] select_ln32_reg_1608;
wire  signed [29:0] mul_ln40_fu_1303_p2;
reg  signed [29:0] mul_ln40_reg_1613;
wire  signed [29:0] mul_ln40_1_fu_1309_p2;
reg  signed [29:0] mul_ln40_1_reg_1618;
wire   [9:0] select_ln32_15_fu_1045_p3;
reg   [9:0] select_ln32_15_reg_1633;
wire  signed [29:0] mul_ln40_2_fu_1315_p2;
reg  signed [29:0] mul_ln40_2_reg_1643;
wire  signed [29:0] mul_ln40_3_fu_1321_p2;
reg  signed [29:0] mul_ln40_3_reg_1648;
wire   [9:0] add_ln40_11_fu_1142_p2;
reg   [9:0] add_ln40_11_reg_1663;
wire   [15:0] add_ln48_1_fu_1147_p2;
reg   [15:0] add_ln48_1_reg_1668;
reg  signed [14:0] SeparableConv2D_0_w_18_reg_1673;
wire  signed [29:0] mul_ln40_4_fu_1327_p2;
reg  signed [29:0] mul_ln40_4_reg_1678;
wire  signed [29:0] mul_ln40_5_fu_1333_p2;
reg  signed [29:0] mul_ln40_5_reg_1683;
wire   [15:0] add_ln48_3_fu_1197_p2;
reg   [15:0] add_ln48_3_reg_1693;
wire  signed [29:0] mul_ln40_6_fu_1339_p2;
reg  signed [29:0] mul_ln40_6_reg_1698;
wire  signed [29:0] mul_ln40_7_fu_1345_p2;
reg  signed [29:0] mul_ln40_7_reg_1703;
wire   [15:0] add_ln48_4_fu_1236_p2;
reg   [15:0] add_ln48_4_reg_1708;
reg   [15:0] trunc_ln48_6_reg_1713;
reg   [15:0] trunc_ln48_7_reg_1718;
wire  signed [29:0] mul_ln40_8_fu_1351_p2;
reg  signed [29:0] mul_ln40_8_reg_1723;
wire   [15:0] add_ln48_6_fu_1281_p2;
reg   [15:0] add_ln48_6_reg_1728;
wire   [15:0] add_ln48_8_fu_1290_p2;
reg   [15:0] add_ln48_8_reg_1733;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [9:0] ap_phi_mux_indvar_flatten80_phi_fu_269_p4;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_phi_mux_out_d_0_phi_fu_280_p4;
reg   [9:0] ap_phi_mux_indvar_flatten_phi_fu_292_p4;
reg   [4:0] ap_phi_mux_out_h_0_phi_fu_304_p4;
reg   [4:0] ap_phi_mux_out_w_0_phi_fu_315_p4;
wire   [63:0] select_ln24_15_fu_541_p3;
wire    ap_block_pp0_stage1;
wire   [63:0] select_ln24_16_fu_547_p3;
wire   [63:0] zext_ln24_fu_664_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] select_ln24_18_fu_669_p3;
wire   [63:0] zext_ln40_2_fu_752_p1;
wire   [63:0] zext_ln40_3_fu_769_p1;
wire   [63:0] zext_ln24_19_fu_801_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln24_22_fu_820_p1;
wire   [63:0] zext_ln40_4_fu_910_p1;
wire   [63:0] zext_ln40_5_fu_923_p1;
wire   [63:0] zext_ln24_20_fu_953_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] select_ln24_21_fu_958_p3;
wire   [63:0] zext_ln40_6_fu_1026_p1;
wire   [63:0] zext_ln40_7_fu_1034_p1;
wire   [63:0] zext_ln24_21_fu_1082_p1;
wire   [63:0] zext_ln40_8_fu_1127_p1;
wire   [63:0] zext_ln40_9_fu_1137_p1;
wire   [63:0] zext_ln40_10_fu_1187_p1;
wire   [63:0] zext_ln48_fu_1298_p1;
wire   [9:0] p_shl_fu_375_p3;
wire   [5:0] p_shl1_fu_387_p3;
wire   [10:0] p_shl19_cast_fu_383_p1;
wire   [10:0] p_shl20_cast_fu_395_p1;
wire   [4:0] tmp_1_0_fu_405_p2;
wire   [9:0] p_shl2_fu_411_p3;
wire   [5:0] p_shl3_fu_423_p3;
wire   [10:0] p_shl17_cast_fu_419_p1;
wire   [10:0] p_shl18_cast_fu_431_p1;
wire   [4:0] tmp_2_0_fu_441_p2;
wire   [5:0] p_shl5_fu_455_p3;
wire   [9:0] p_shl4_fu_447_p3;
wire   [9:0] p_shl16_cast_fu_463_p1;
wire   [4:0] zext_ln48_1_fu_371_p1;
wire   [4:0] tmp11_fu_473_p2;
wire   [9:0] p_shl6_fu_479_p3;
wire   [6:0] p_shl7_fu_491_p3;
wire   [10:0] p_shl13_cast_fu_487_p1;
wire   [10:0] p_shl14_cast_fu_499_p1;
wire   [0:0] xor_ln24_1_fu_553_p2;
wire   [0:0] xor_ln24_fu_570_p2;
wire   [0:0] empty_63_fu_585_p2;
wire   [9:0] p_shl19_mid1_fu_598_p3;
wire   [5:0] p_shl20_mid1_fu_610_p3;
wire   [10:0] p_shl19_cast_mid1_fu_606_p1;
wire   [10:0] p_shl20_cast_mid1_fu_618_p1;
wire   [10:0] tmp10_0_0_mid1_fu_622_p2;
wire   [10:0] select_ln24_24_fu_564_p3;
wire   [1:0] or_ln27_mid1_fu_642_p3;
wire   [1:0] or_ln_fu_649_p3;
wire   [4:0] tmp_1_0_mid1_fu_693_p2;
wire   [9:0] p_shl17_mid1_fu_698_p3;
wire   [5:0] p_shl18_mid1_fu_710_p3;
wire   [10:0] p_shl17_cast_mid1_fu_706_p1;
wire   [10:0] p_shl18_cast_mid1_fu_718_p1;
wire   [10:0] tmp10_1_0_mid1_fu_722_p2;
wire   [10:0] select_ln24_25_fu_687_p3;
wire   [4:0] zext_ln24_23_fu_683_p1;
wire   [10:0] add_ln40_fu_743_p2;
wire  signed [31:0] sext_ln40_1_fu_748_p1;
wire   [10:0] add_ln40_3_fu_760_p2;
wire  signed [31:0] sext_ln40_3_fu_765_p1;
wire   [2:0] or_ln27_1_mid1_fu_779_p3;
wire   [2:0] or_ln27_s_fu_786_p3;
wire   [2:0] select_ln24_19_fu_794_p3;
wire   [2:0] select_ln27_1_fu_806_p3;
wire   [2:0] select_ln24_20_fu_814_p3;
wire   [5:0] tmp_fu_825_p3;
wire   [2:0] tmp_3_fu_836_p3;
wire   [6:0] p_shl13_cast_mid170_c_fu_832_p1;
wire   [6:0] p_shl14_cast_mid174_c_fu_843_p1;
wire   [6:0] tmp12_mid176_fu_847_p2;
wire  signed [10:0] tmp12_mid176_cast_fu_853_p1;
wire   [9:0] p_shl13_mid1_fu_863_p3;
wire   [6:0] p_shl14_mid1_fu_874_p3;
wire   [10:0] p_shl13_cast_mid1_fu_870_p1;
wire   [10:0] p_shl14_cast_mid1_fu_881_p1;
wire   [10:0] tmp12_mid1_fu_885_p2;
wire   [10:0] select_ln24_27_fu_857_p3;
wire   [10:0] zext_ln40_14_fu_898_p1;
wire   [10:0] add_ln40_5_fu_901_p2;
wire  signed [31:0] sext_ln40_5_fu_906_p1;
wire   [10:0] add_ln40_6_fu_915_p2;
wire  signed [31:0] sext_ln40_7_fu_919_p1;
wire   [10:0] tmp12_mid2_fu_891_p3;
wire  signed [2:0] sext_ln24_20_fu_950_p1;
wire   [4:0] tmp_2_0_mid1_fu_972_p2;
wire   [5:0] p_shl16_mid1_fu_985_p3;
wire   [9:0] p_shl15_mid1_fu_977_p3;
wire   [9:0] p_shl16_cast_mid1_fu_993_p1;
wire   [9:0] tmp10_2_0_mid1_fu_997_p2;
wire   [9:0] select_ln24_26_fu_966_p3;
wire  signed [31:0] sext_ln40_9_fu_1023_p1;
wire  signed [31:0] sext_ln40_11_fu_1031_p1;
wire   [9:0] add_ln32_3_fu_1039_p2;
wire   [3:0] or_ln27_3_mid1_fu_1060_p3;
wire   [3:0] or_ln27_1_fu_1067_p3;
wire   [3:0] select_ln24_22_fu_1075_p3;
wire   [9:0] zext_ln40_fu_1087_p1;
wire   [9:0] add_ln40_9_fu_1122_p2;
wire   [9:0] zext_ln40_11_fu_1099_p1;
wire   [9:0] add_ln40_10_fu_1132_p2;
wire   [9:0] zext_ln40_13_fu_1111_p1;
wire   [15:0] trunc_ln_fu_1090_p4;
wire   [15:0] trunc_ln48_1_fu_1102_p4;
wire   [15:0] trunc_ln48_3_fu_1170_p4;
wire   [15:0] trunc_ln48_2_fu_1161_p4;
wire   [15:0] add_ln48_2_fu_1191_p2;
wire   [15:0] trunc_ln48_5_fu_1219_p4;
wire   [15:0] trunc_ln48_4_fu_1210_p4;
wire   [15:0] trunc_ln48_8_fu_1267_p4;
wire   [15:0] add_ln48_5_fu_1276_p2;
wire   [15:0] add_ln48_7_fu_1286_p2;
wire  signed [31:0] sext_ln48_fu_1295_p1;
wire    ap_CS_fsm_state14;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

depthwise_conv2d_fix_SeparableConv2D_0_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
SeparableConv2D_0_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_0_w_s_address0),
    .ce0(SeparableConv2D_0_w_s_ce0),
    .q0(SeparableConv2D_0_w_s_q0),
    .address1(SeparableConv2D_0_w_s_address1),
    .ce1(SeparableConv2D_0_w_s_ce1),
    .q1(SeparableConv2D_0_w_s_q1)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U6(
    .din0(reg_339),
    .din1(reg_323),
    .dout(mul_ln40_fu_1303_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U7(
    .din0(reg_344),
    .din1(reg_327),
    .dout(mul_ln40_1_fu_1309_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U8(
    .din0(reg_339),
    .din1(reg_331),
    .dout(mul_ln40_2_fu_1315_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U9(
    .din0(reg_344),
    .din1(reg_335),
    .dout(mul_ln40_3_fu_1321_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U10(
    .din0(reg_339),
    .din1(reg_323),
    .dout(mul_ln40_4_fu_1327_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U11(
    .din0(reg_344),
    .din1(reg_327),
    .dout(mul_ln40_5_fu_1333_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U12(
    .din0(reg_339),
    .din1(reg_331),
    .dout(mul_ln40_6_fu_1339_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U13(
    .din0(reg_344),
    .din1(reg_335),
    .dout(mul_ln40_7_fu_1345_p2)
);

network_mul_mul_16s_15s_30_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 30 ))
network_mul_mul_16s_15s_30_1_1_U14(
    .din0(reg_339),
    .din1(SeparableConv2D_0_w_18_reg_1673),
    .dout(mul_ln40_8_fu_1351_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten80_reg_265 <= add_ln24_reg_1408;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten80_reg_265 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_288 <= select_ln32_15_reg_1633;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_288 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_d_0_reg_276 <= select_ln24_23_reg_1511;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_276 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_h_0_reg_300 <= select_ln32_reg_1608;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_h_0_reg_300 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_w_0_reg_311 <= out_w_reg_1489;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_w_0_reg_311 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_339 <= input_r_q0;
    end else if ((((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln24_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_339 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        reg_344 <= input_r_q1;
    end else if ((((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln24_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_344 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        SeparableConv2D_0_w_18_reg_1673 <= SeparableConv2D_0_w_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln24_reg_1408 <= add_ln24_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln40_11_reg_1663 <= add_ln40_11_fu_1142_p2;
        add_ln48_1_reg_1668 <= add_ln48_1_fu_1147_p2;
        mul_ln40_2_reg_1643 <= mul_ln40_2_fu_1315_p2;
        mul_ln40_3_reg_1648 <= mul_ln40_3_fu_1321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln40_4_reg_1550 <= add_ln40_4_fu_774_p2;
        select_ln24_17_reg_1496[0] <= select_ln24_17_fu_657_p3[0];
        tmp10_1_0_mid2_reg_1516[10 : 1] <= tmp10_1_0_mid2_fu_728_p3[10 : 1];
        zext_ln40_12_reg_1540[4 : 0] <= zext_ln40_12_fu_757_p1[4 : 0];
        zext_ln40_1_reg_1529[4 : 0] <= zext_ln40_1_fu_740_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln40_7_reg_1576 <= add_ln40_7_fu_928_p2;
        add_ln40_8_reg_1581 <= add_ln40_8_fu_932_p2;
        add_ln48_reg_1586 <= add_ln48_fu_937_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln48_3_reg_1693 <= add_ln48_3_fu_1197_p2;
        mul_ln40_4_reg_1678 <= mul_ln40_4_fu_1327_p2;
        mul_ln40_5_reg_1683 <= mul_ln40_5_fu_1333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln48_4_reg_1708 <= add_ln48_4_fu_1236_p2;
        mul_ln40_6_reg_1698 <= mul_ln40_6_fu_1339_p2;
        mul_ln40_7_reg_1703 <= mul_ln40_7_fu_1345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln48_6_reg_1728 <= add_ln48_6_fu_1281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln48_8_reg_1733 <= add_ln48_8_fu_1290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln48_reg_1586_pp0_iter1_reg <= add_ln48_reg_1586;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        and_ln24_reg_1461 <= and_ln24_fu_575_p2;
        out_h_reg_1469 <= out_h_fu_580_p2;
        out_w_0_mid2_reg_1475 <= out_w_0_mid2_fu_590_p3;
        tmp10_0_0_mid2_reg_1482[10 : 1] <= tmp10_0_0_mid2_fu_628_p3[10 : 1];
        xor_ln24_2_reg_1455 <= xor_ln24_2_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln24_reg_1404 <= icmp_ln24_fu_509_p2;
        icmp_ln24_reg_1404_pp0_iter1_reg <= icmp_ln24_reg_1404;
        icmp_ln24_reg_1404_pp0_iter2_reg <= icmp_ln24_reg_1404_pp0_iter1_reg;
        out_d_reg_1363 <= out_d_fu_353_p2;
        select_ln27_reg_1379[1 : 0] <= select_ln27_fu_363_p3[1 : 0];
        tmp10_0_0_reg_1384[10 : 1] <= tmp10_0_0_fu_399_p2[10 : 1];
        tmp10_1_0_reg_1389[10 : 1] <= tmp10_1_0_fu_435_p2[10 : 1];
        tmp10_2_0_reg_1394[9 : 1] <= tmp10_2_0_fu_467_p2[9 : 1];
        tmp12_reg_1399[10 : 2] <= tmp12_fu_503_p2[10 : 2];
        zext_ln27_1_reg_1357[0] <= zext_ln27_1_fu_349_p1[0];
        zext_ln27_2_reg_1373[0] <= zext_ln27_2_fu_359_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_509_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln32_reg_1413 <= icmp_ln32_fu_521_p2;
        icmp_ln33_reg_1440 <= icmp_ln33_fu_535_p2;
        select_ln24_reg_1432 <= select_ln24_fu_527_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln24_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_ln40_1_reg_1618 <= mul_ln40_1_fu_1309_p2;
        mul_ln40_reg_1613 <= mul_ln40_fu_1303_p2;
        tmp10_2_0_mid2_reg_1601[9 : 1] <= tmp10_2_0_mid2_fu_1003_p3[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_ln40_8_reg_1723 <= mul_ln40_8_fu_1351_p2;
        trunc_ln48_6_reg_1713 <= {{mul_ln40_6_reg_1698[29:14]}};
        trunc_ln48_7_reg_1718 <= {{mul_ln40_7_reg_1703[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        out_w_reg_1489 <= out_w_fu_636_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln24_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_323 <= SeparableConv2D_0_w_s_q0;
        reg_327 <= SeparableConv2D_0_w_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln24_reg_1404 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_331 <= SeparableConv2D_0_w_s_q0;
        reg_335 <= SeparableConv2D_0_w_s_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        select_ln24_23_reg_1511 <= select_ln24_23_fu_677_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln24_reg_1404 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln32_15_reg_1633 <= select_ln32_15_fu_1045_p3;
        select_ln32_reg_1608 <= select_ln32_fu_1010_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == and_ln24_reg_1461))) begin
        tmp11_mid1_reg_1523 <= tmp11_mid1_fu_735_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        SeparableConv2D_0_w_s_address0 = zext_ln24_21_fu_1082_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        SeparableConv2D_0_w_s_address0 = zext_ln24_20_fu_953_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        SeparableConv2D_0_w_s_address0 = zext_ln24_19_fu_801_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        SeparableConv2D_0_w_s_address0 = zext_ln24_fu_664_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        SeparableConv2D_0_w_s_address0 = select_ln24_15_fu_541_p3;
    end else begin
        SeparableConv2D_0_w_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            SeparableConv2D_0_w_s_address1 = select_ln24_21_fu_958_p3;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            SeparableConv2D_0_w_s_address1 = zext_ln24_22_fu_820_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            SeparableConv2D_0_w_s_address1 = select_ln24_18_fu_669_p3;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            SeparableConv2D_0_w_s_address1 = select_ln24_16_fu_547_p3;
        end else begin
            SeparableConv2D_0_w_s_address1 = 'bx;
        end
    end else begin
        SeparableConv2D_0_w_s_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        SeparableConv2D_0_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_0_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        SeparableConv2D_0_w_s_ce1 = 1'b1;
    end else begin
        SeparableConv2D_0_w_s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln24_fu_509_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten80_phi_fu_269_p4 = add_ln24_reg_1408;
    end else begin
        ap_phi_mux_indvar_flatten80_phi_fu_269_p4 = indvar_flatten80_reg_265;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_292_p4 = select_ln32_15_reg_1633;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_292_p4 = indvar_flatten_reg_288;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_d_0_phi_fu_280_p4 = select_ln24_23_reg_1511;
    end else begin
        ap_phi_mux_out_d_0_phi_fu_280_p4 = out_d_0_reg_276;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_h_0_phi_fu_304_p4 = select_ln32_reg_1608;
    end else begin
        ap_phi_mux_out_h_0_phi_fu_304_p4 = out_h_0_reg_300;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1404 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_out_w_0_phi_fu_315_p4 = out_w_reg_1489;
    end else begin
        ap_phi_mux_out_w_0_phi_fu_315_p4 = out_w_0_reg_311;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_address0 = zext_ln40_10_fu_1187_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address0 = zext_ln40_8_fu_1127_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address0 = zext_ln40_7_fu_1034_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address0 = zext_ln40_5_fu_923_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address0 = zext_ln40_3_fu_769_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_address1 = zext_ln40_9_fu_1137_p1;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_r_address1 = zext_ln40_6_fu_1026_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        input_r_address1 = zext_ln40_4_fu_910_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        input_r_address1 = zext_ln40_2_fu_752_p1;
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_1404_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_509_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_509_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_515_p2 = (ap_phi_mux_indvar_flatten80_phi_fu_269_p4 + 10'd1);

assign add_ln32_3_fu_1039_p2 = (indvar_flatten_reg_288 + 10'd1);

assign add_ln40_10_fu_1132_p2 = (tmp10_2_0_mid2_reg_1601 + zext_ln40_11_fu_1099_p1);

assign add_ln40_11_fu_1142_p2 = (tmp10_2_0_mid2_reg_1601 + zext_ln40_13_fu_1111_p1);

assign add_ln40_3_fu_760_p2 = (tmp10_0_0_mid2_reg_1482 + zext_ln40_12_fu_757_p1);

assign add_ln40_4_fu_774_p2 = (out_w_0_mid2_reg_1475 + 5'd2);

assign add_ln40_5_fu_901_p2 = (tmp10_0_0_mid2_reg_1482 + zext_ln40_14_fu_898_p1);

assign add_ln40_6_fu_915_p2 = (zext_ln40_1_reg_1529 + tmp10_1_0_mid2_reg_1516);

assign add_ln40_7_fu_928_p2 = (tmp10_1_0_mid2_reg_1516 + zext_ln40_12_reg_1540);

assign add_ln40_8_fu_932_p2 = (tmp10_1_0_mid2_reg_1516 + zext_ln40_14_fu_898_p1);

assign add_ln40_9_fu_1122_p2 = (zext_ln40_fu_1087_p1 + tmp10_2_0_mid2_reg_1601);

assign add_ln40_fu_743_p2 = (zext_ln40_1_fu_740_p1 + tmp10_0_0_mid2_reg_1482);

assign add_ln48_1_fu_1147_p2 = (trunc_ln_fu_1090_p4 + trunc_ln48_1_fu_1102_p4);

assign add_ln48_2_fu_1191_p2 = (trunc_ln48_3_fu_1170_p4 + trunc_ln48_2_fu_1161_p4);

assign add_ln48_3_fu_1197_p2 = (add_ln48_1_reg_1668 + add_ln48_2_fu_1191_p2);

assign add_ln48_4_fu_1236_p2 = (trunc_ln48_5_fu_1219_p4 + trunc_ln48_4_fu_1210_p4);

assign add_ln48_5_fu_1276_p2 = (trunc_ln48_8_fu_1267_p4 + trunc_ln48_7_reg_1718);

assign add_ln48_6_fu_1281_p2 = (trunc_ln48_6_reg_1713 + add_ln48_5_fu_1276_p2);

assign add_ln48_7_fu_1286_p2 = (add_ln48_4_reg_1708 + add_ln48_6_reg_1728);

assign add_ln48_8_fu_1290_p2 = (add_ln48_3_reg_1693 + add_ln48_7_fu_1286_p2);

assign add_ln48_fu_937_p2 = (zext_ln40_1_reg_1529 + tmp12_mid2_fu_891_p3);

assign and_ln24_fu_575_p2 = (xor_ln24_fu_570_p2 & icmp_ln33_reg_1440);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_63_fu_585_p2 = (icmp_ln32_reg_1413 | and_ln24_fu_575_p2);

assign icmp_ln24_fu_509_p2 = ((ap_phi_mux_indvar_flatten80_phi_fu_269_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_521_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_292_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_535_p2 = ((ap_phi_mux_out_w_0_phi_fu_315_p4 == 5'd28) ? 1'b1 : 1'b0);

assign or_ln27_1_fu_1067_p3 = {{3'd4}, {out_d_0_reg_276}};

assign or_ln27_1_mid1_fu_779_p3 = {{2'd2}, {out_d_reg_1363}};

assign or_ln27_3_mid1_fu_1060_p3 = {{3'd4}, {out_d_reg_1363}};

assign or_ln27_mid1_fu_642_p3 = {{1'd1}, {out_d_reg_1363}};

assign or_ln27_s_fu_786_p3 = {{2'd2}, {out_d_0_reg_276}};

assign or_ln_fu_649_p3 = {{1'd1}, {out_d_0_reg_276}};

assign out_d_fu_353_p2 = (ap_phi_mux_out_d_0_phi_fu_280_p4 ^ 1'd1);

assign out_h_fu_580_p2 = (select_ln24_reg_1432 + 5'd1);

assign out_w_0_mid2_fu_590_p3 = ((empty_63_fu_585_p2[0:0] === 1'b1) ? 5'd0 : out_w_0_reg_311);

assign out_w_fu_636_p2 = (out_w_0_mid2_fu_590_p3 + 5'd1);

assign output_r_address0 = zext_ln48_fu_1298_p1;

assign output_r_d0 = add_ln48_8_reg_1733;

assign p_shl13_cast_fu_487_p1 = p_shl6_fu_479_p3;

assign p_shl13_cast_mid170_c_fu_832_p1 = tmp_fu_825_p3;

assign p_shl13_cast_mid1_fu_870_p1 = p_shl13_mid1_fu_863_p3;

assign p_shl13_mid1_fu_863_p3 = {{tmp11_mid1_reg_1523}, {5'd0}};

assign p_shl14_cast_fu_499_p1 = p_shl7_fu_491_p3;

assign p_shl14_cast_mid174_c_fu_843_p1 = tmp_3_fu_836_p3;

assign p_shl14_cast_mid1_fu_881_p1 = p_shl14_mid1_fu_874_p3;

assign p_shl14_mid1_fu_874_p3 = {{tmp11_mid1_reg_1523}, {2'd0}};

assign p_shl15_mid1_fu_977_p3 = {{tmp_2_0_mid1_fu_972_p2}, {5'd0}};

assign p_shl16_cast_fu_463_p1 = p_shl5_fu_455_p3;

assign p_shl16_cast_mid1_fu_993_p1 = p_shl16_mid1_fu_985_p3;

assign p_shl16_mid1_fu_985_p3 = {{tmp_2_0_mid1_fu_972_p2}, {1'd0}};

assign p_shl17_cast_fu_419_p1 = p_shl2_fu_411_p3;

assign p_shl17_cast_mid1_fu_706_p1 = p_shl17_mid1_fu_698_p3;

assign p_shl17_mid1_fu_698_p3 = {{tmp_1_0_mid1_fu_693_p2}, {5'd0}};

assign p_shl18_cast_fu_431_p1 = p_shl3_fu_423_p3;

assign p_shl18_cast_mid1_fu_718_p1 = p_shl18_mid1_fu_710_p3;

assign p_shl18_mid1_fu_710_p3 = {{tmp_1_0_mid1_fu_693_p2}, {1'd0}};

assign p_shl19_cast_fu_383_p1 = p_shl_fu_375_p3;

assign p_shl19_cast_mid1_fu_606_p1 = p_shl19_mid1_fu_598_p3;

assign p_shl19_mid1_fu_598_p3 = {{out_h_fu_580_p2}, {5'd0}};

assign p_shl1_fu_387_p3 = {{ap_phi_mux_out_h_0_phi_fu_304_p4}, {1'd0}};

assign p_shl20_cast_fu_395_p1 = p_shl1_fu_387_p3;

assign p_shl20_cast_mid1_fu_618_p1 = p_shl20_mid1_fu_610_p3;

assign p_shl20_mid1_fu_610_p3 = {{out_h_fu_580_p2}, {1'd0}};

assign p_shl2_fu_411_p3 = {{tmp_1_0_fu_405_p2}, {5'd0}};

assign p_shl3_fu_423_p3 = {{tmp_1_0_fu_405_p2}, {1'd0}};

assign p_shl4_fu_447_p3 = {{tmp_2_0_fu_441_p2}, {5'd0}};

assign p_shl5_fu_455_p3 = {{tmp_2_0_fu_441_p2}, {1'd0}};

assign p_shl6_fu_479_p3 = {{tmp11_fu_473_p2}, {5'd0}};

assign p_shl7_fu_491_p3 = {{tmp11_fu_473_p2}, {2'd0}};

assign p_shl_fu_375_p3 = {{ap_phi_mux_out_h_0_phi_fu_304_p4}, {5'd0}};

assign select_ln24_15_fu_541_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? zext_ln27_2_reg_1373 : zext_ln27_1_reg_1357);

assign select_ln24_16_fu_547_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? zext_ln27_1_reg_1357 : zext_ln27_2_reg_1373);

assign select_ln24_17_fu_657_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? or_ln27_mid1_fu_642_p3 : or_ln_fu_649_p3);

assign select_ln24_18_fu_669_p3 = ((xor_ln24_2_reg_1455[0:0] === 1'b1) ? 64'd3 : 64'd0);

assign select_ln24_19_fu_794_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? or_ln27_1_mid1_fu_779_p3 : or_ln27_s_fu_786_p3);

assign select_ln24_20_fu_814_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? select_ln27_1_fu_806_p3 : select_ln27_reg_1379);

assign select_ln24_21_fu_958_p3 = ((xor_ln24_2_reg_1455[0:0] === 1'b1) ? 64'd7 : 64'd0);

assign select_ln24_22_fu_1075_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? or_ln27_3_mid1_fu_1060_p3 : or_ln27_1_fu_1067_p3);

assign select_ln24_23_fu_677_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? out_d_reg_1363 : out_d_0_reg_276);

assign select_ln24_24_fu_564_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? 11'd0 : tmp10_0_0_reg_1384);

assign select_ln24_25_fu_687_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? 11'd30 : tmp10_1_0_reg_1389);

assign select_ln24_26_fu_966_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? 10'd60 : tmp10_2_0_reg_1394);

assign select_ln24_27_fu_857_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? tmp12_mid176_cast_fu_853_p1 : tmp12_reg_1399);

assign select_ln24_fu_527_p3 = ((icmp_ln32_fu_521_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_out_h_0_phi_fu_304_p4);

assign select_ln27_1_fu_806_p3 = ((out_d_0_reg_276[0:0] === 1'b1) ? 3'd5 : 3'd6);

assign select_ln27_fu_363_p3 = ((ap_phi_mux_out_d_0_phi_fu_280_p4[0:0] === 1'b1) ? 3'd6 : 3'd5);

assign select_ln32_15_fu_1045_p3 = ((icmp_ln32_reg_1413[0:0] === 1'b1) ? 10'd1 : add_ln32_3_fu_1039_p2);

assign select_ln32_fu_1010_p3 = ((and_ln24_reg_1461[0:0] === 1'b1) ? out_h_reg_1469 : select_ln24_reg_1432);

assign sext_ln24_20_fu_950_p1 = select_ln24_17_reg_1496;

assign sext_ln40_11_fu_1031_p1 = $signed(add_ln40_8_reg_1581);

assign sext_ln40_1_fu_748_p1 = $signed(add_ln40_fu_743_p2);

assign sext_ln40_3_fu_765_p1 = $signed(add_ln40_3_fu_760_p2);

assign sext_ln40_5_fu_906_p1 = $signed(add_ln40_5_fu_901_p2);

assign sext_ln40_7_fu_919_p1 = $signed(add_ln40_6_fu_915_p2);

assign sext_ln40_9_fu_1023_p1 = $signed(add_ln40_7_reg_1576);

assign sext_ln48_fu_1295_p1 = $signed(add_ln48_reg_1586_pp0_iter1_reg);

assign tmp10_0_0_fu_399_p2 = (p_shl19_cast_fu_383_p1 - p_shl20_cast_fu_395_p1);

assign tmp10_0_0_mid1_fu_622_p2 = (p_shl19_cast_mid1_fu_606_p1 - p_shl20_cast_mid1_fu_618_p1);

assign tmp10_0_0_mid2_fu_628_p3 = ((and_ln24_fu_575_p2[0:0] === 1'b1) ? tmp10_0_0_mid1_fu_622_p2 : select_ln24_24_fu_564_p3);

assign tmp10_1_0_fu_435_p2 = (p_shl17_cast_fu_419_p1 - p_shl18_cast_fu_431_p1);

assign tmp10_1_0_mid1_fu_722_p2 = (p_shl17_cast_mid1_fu_706_p1 - p_shl18_cast_mid1_fu_718_p1);

assign tmp10_1_0_mid2_fu_728_p3 = ((and_ln24_reg_1461[0:0] === 1'b1) ? tmp10_1_0_mid1_fu_722_p2 : select_ln24_25_fu_687_p3);

assign tmp10_2_0_fu_467_p2 = (p_shl4_fu_447_p3 - p_shl16_cast_fu_463_p1);

assign tmp10_2_0_mid1_fu_997_p2 = (p_shl15_mid1_fu_977_p3 - p_shl16_cast_mid1_fu_993_p1);

assign tmp10_2_0_mid2_fu_1003_p3 = ((and_ln24_reg_1461[0:0] === 1'b1) ? tmp10_2_0_mid1_fu_997_p2 : select_ln24_26_fu_966_p3);

assign tmp11_fu_473_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + zext_ln48_1_fu_371_p1);

assign tmp11_mid1_fu_735_p2 = (out_h_reg_1469 + zext_ln24_23_fu_683_p1);

assign tmp12_fu_503_p2 = (p_shl13_cast_fu_487_p1 - p_shl14_cast_fu_499_p1);

assign tmp12_mid176_cast_fu_853_p1 = $signed(tmp12_mid176_fu_847_p2);

assign tmp12_mid176_fu_847_p2 = (p_shl13_cast_mid170_c_fu_832_p1 - p_shl14_cast_mid174_c_fu_843_p1);

assign tmp12_mid1_fu_885_p2 = (p_shl13_cast_mid1_fu_870_p1 - p_shl14_cast_mid1_fu_881_p1);

assign tmp12_mid2_fu_891_p3 = ((and_ln24_reg_1461[0:0] === 1'b1) ? tmp12_mid1_fu_885_p2 : select_ln24_27_fu_857_p3);

assign tmp_1_0_fu_405_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + 5'd1);

assign tmp_1_0_mid1_fu_693_p2 = (select_ln24_reg_1432 + 5'd2);

assign tmp_2_0_fu_441_p2 = (ap_phi_mux_out_h_0_phi_fu_304_p4 + 5'd2);

assign tmp_2_0_mid1_fu_972_p2 = (select_ln24_reg_1432 + 5'd3);

assign tmp_3_fu_836_p3 = {{out_d_reg_1363}, {2'd0}};

assign tmp_fu_825_p3 = {{out_d_reg_1363}, {5'd0}};

assign trunc_ln48_1_fu_1102_p4 = {{mul_ln40_1_reg_1618[29:14]}};

assign trunc_ln48_2_fu_1161_p4 = {{mul_ln40_2_reg_1643[29:14]}};

assign trunc_ln48_3_fu_1170_p4 = {{mul_ln40_3_reg_1648[29:14]}};

assign trunc_ln48_4_fu_1210_p4 = {{mul_ln40_4_reg_1678[29:14]}};

assign trunc_ln48_5_fu_1219_p4 = {{mul_ln40_5_reg_1683[29:14]}};

assign trunc_ln48_8_fu_1267_p4 = {{mul_ln40_8_reg_1723[29:14]}};

assign trunc_ln_fu_1090_p4 = {{mul_ln40_reg_1613[29:14]}};

assign xor_ln24_1_fu_553_p2 = (icmp_ln32_reg_1413 ^ 1'd1);

assign xor_ln24_2_fu_558_p2 = (xor_ln24_1_fu_553_p2 ^ out_d_0_reg_276);

assign xor_ln24_fu_570_p2 = (icmp_ln32_reg_1413 ^ 1'd1);

assign zext_ln24_19_fu_801_p1 = select_ln24_19_fu_794_p3;

assign zext_ln24_20_fu_953_p1 = $unsigned(sext_ln24_20_fu_950_p1);

assign zext_ln24_21_fu_1082_p1 = select_ln24_22_fu_1075_p3;

assign zext_ln24_22_fu_820_p1 = select_ln24_20_fu_814_p3;

assign zext_ln24_23_fu_683_p1 = select_ln24_23_fu_677_p3;

assign zext_ln24_fu_664_p1 = $unsigned(select_ln24_17_fu_657_p3);

assign zext_ln27_1_fu_349_p1 = ap_phi_mux_out_d_0_phi_fu_280_p4;

assign zext_ln27_2_fu_359_p1 = out_d_fu_353_p2;

assign zext_ln40_10_fu_1187_p1 = add_ln40_11_reg_1663;

assign zext_ln40_11_fu_1099_p1 = out_w_reg_1489;

assign zext_ln40_12_fu_757_p1 = out_w_reg_1489;

assign zext_ln40_13_fu_1111_p1 = add_ln40_4_reg_1550;

assign zext_ln40_14_fu_898_p1 = add_ln40_4_reg_1550;

assign zext_ln40_1_fu_740_p1 = out_w_0_mid2_reg_1475;

assign zext_ln40_2_fu_752_p1 = $unsigned(sext_ln40_1_fu_748_p1);

assign zext_ln40_3_fu_769_p1 = $unsigned(sext_ln40_3_fu_765_p1);

assign zext_ln40_4_fu_910_p1 = $unsigned(sext_ln40_5_fu_906_p1);

assign zext_ln40_5_fu_923_p1 = $unsigned(sext_ln40_7_fu_919_p1);

assign zext_ln40_6_fu_1026_p1 = $unsigned(sext_ln40_9_fu_1023_p1);

assign zext_ln40_7_fu_1034_p1 = $unsigned(sext_ln40_11_fu_1031_p1);

assign zext_ln40_8_fu_1127_p1 = add_ln40_9_fu_1122_p2;

assign zext_ln40_9_fu_1137_p1 = add_ln40_10_fu_1132_p2;

assign zext_ln40_fu_1087_p1 = out_w_0_mid2_reg_1475;

assign zext_ln48_1_fu_371_p1 = ap_phi_mux_out_d_0_phi_fu_280_p4;

assign zext_ln48_fu_1298_p1 = $unsigned(sext_ln48_fu_1295_p1);

always @ (posedge ap_clk) begin
    zext_ln27_1_reg_1357[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    zext_ln27_2_reg_1373[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    select_ln27_reg_1379[2] <= 1'b1;
    tmp10_0_0_reg_1384[0] <= 1'b0;
    tmp10_1_0_reg_1389[0] <= 1'b0;
    tmp10_2_0_reg_1394[0] <= 1'b0;
    tmp12_reg_1399[1:0] <= 2'b00;
    tmp10_0_0_mid2_reg_1482[0] <= 1'b0;
    select_ln24_17_reg_1496[1] <= 1'b1;
    tmp10_1_0_mid2_reg_1516[0] <= 1'b0;
    zext_ln40_1_reg_1529[10:5] <= 6'b000000;
    zext_ln40_12_reg_1540[10:5] <= 6'b000000;
    tmp10_2_0_mid2_reg_1601[0] <= 1'b0;
end

endmodule //depthwise_conv2d_fix
