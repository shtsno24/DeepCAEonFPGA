// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module depthwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_height,
        input_width,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_height,
        output_width,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        bias_address0,
        bias_ce0,
        bias_q0,
        kernel_0_address0,
        kernel_0_ce0,
        kernel_0_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [6:0] input_height;
input  [5:0] input_width;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [5:0] output_height;
input  [5:0] output_width;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [3:0] bias_address0;
output   bias_ce0;
input  [15:0] bias_q0;
output  [7:0] kernel_0_address0;
output   kernel_0_ce0;
input  [15:0] kernel_0_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;
reg bias_ce0;
reg kernel_0_ce0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] zext_ln37_fu_288_p1;
reg   [8:0] zext_ln37_reg_599;
wire   [13:0] zext_ln37_6_cast_fu_292_p1;
reg   [13:0] zext_ln37_6_cast_reg_604;
wire   [8:0] zext_ln45_fu_296_p1;
reg   [8:0] zext_ln45_reg_609;
wire   [13:0] zext_ln45_1_cast_fu_300_p1;
reg   [13:0] zext_ln45_1_cast_reg_614;
wire   [4:0] empty_56_fu_304_p1;
reg   [4:0] empty_56_reg_619;
wire   [4:0] empty_57_fu_308_p1;
reg   [4:0] empty_57_reg_624;
wire   [8:0] add_ln22_fu_312_p2;
reg   [8:0] add_ln22_reg_629;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln22_1_fu_317_p2;
reg   [8:0] add_ln22_1_reg_634;
wire   [4:0] out_d_fu_328_p2;
reg   [4:0] out_d_reg_642;
wire   [7:0] zext_ln26_fu_346_p1;
reg   [7:0] zext_ln26_reg_647;
wire   [0:0] icmp_ln22_fu_322_p2;
wire   [3:0] i_fu_356_p2;
reg   [3:0] i_reg_655;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln24_fu_350_p2;
wire  signed [31:0] buffer_4_fu_396_p1;
reg  signed [31:0] buffer_4_reg_670;
wire    ap_CS_fsm_state5;
wire   [4:0] out_h_fu_405_p2;
reg   [4:0] out_h_reg_678;
wire    ap_CS_fsm_state6;
wire   [13:0] tmp8_fu_425_p2;
reg   [13:0] tmp8_reg_683;
wire   [0:0] icmp_ln31_fu_400_p2;
wire   [4:0] out_w_fu_435_p2;
reg   [4:0] out_w_reg_691;
wire    ap_CS_fsm_state7;
wire   [13:0] zext_ln35_fu_441_p1;
reg   [13:0] zext_ln35_reg_696;
wire   [0:0] icmp_ln32_fu_430_p2;
wire   [1:0] k_h_fu_451_p2;
reg   [1:0] k_h_reg_704;
wire    ap_CS_fsm_state8;
wire   [4:0] sub_ln37_fu_473_p2;
reg   [4:0] sub_ln37_reg_709;
wire   [0:0] icmp_ln35_fu_445_p2;
wire   [13:0] tmp6_fu_499_p2;
reg   [13:0] tmp6_reg_714;
wire   [1:0] k_w_fu_524_p2;
reg   [1:0] k_w_reg_722;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln36_fu_518_p2;
wire   [4:0] add_ln37_5_fu_554_p2;
reg   [4:0] add_ln37_5_reg_732;
reg  signed [15:0] input_load_reg_737;
wire    ap_CS_fsm_state10;
reg   [18:0] trunc_ln9_reg_747;
wire    ap_CS_fsm_state11;
wire   [31:0] buffer_fu_586_p2;
wire    ap_CS_fsm_state12;
reg   [3:0] empty_address0;
reg    empty_ce0;
reg    empty_we0;
wire  signed [15:0] empty_q0;
reg   [4:0] out_d_0_reg_168;
reg   [8:0] phi_mul_reg_180;
reg   [8:0] phi_mul2_reg_192;
reg   [3:0] i_0_reg_204;
wire    ap_CS_fsm_state4;
reg   [4:0] out_h_0_reg_216;
reg   [4:0] out_w_0_reg_228;
reg   [31:0] buffer_0_reg_240;
reg   [1:0] k_h_0_reg_250;
reg   [31:0] buffer_1_reg_261;
reg   [1:0] k_w_0_reg_273;
wire   [63:0] zext_ln26_5_fu_381_p1;
wire   [63:0] zext_ln29_fu_386_p1;
wire   [63:0] zext_ln26_3_fu_391_p1;
wire   [63:0] zext_ln45_1_fu_513_p1;
wire   [63:0] zext_ln37_14_fu_549_p1;
wire   [63:0] zext_ln37_12_fu_562_p1;
wire  signed [6:0] sext_ln4_fu_284_p1;
wire   [3:0] trunc_ln26_fu_334_p1;
wire   [6:0] shl_ln_fu_338_p3;
wire   [4:0] zext_ln26_2_fu_362_p1;
wire   [4:0] add_ln26_1_fu_366_p2;
wire   [7:0] zext_ln26_4_fu_372_p1;
wire   [7:0] add_ln26_fu_376_p2;
wire   [8:0] zext_ln37_7_cast_fu_411_p1;
wire   [8:0] tmp7_fu_415_p2;
wire   [8:0] tmp8_fu_425_p0;
wire   [5:0] tmp8_fu_425_p1;
wire   [3:0] shl_ln4_fu_461_p3;
wire   [4:0] zext_ln37_10_fu_469_p1;
wire   [4:0] zext_ln37_9_fu_457_p1;
wire   [4:0] tmp2_fu_479_p2;
wire   [8:0] tmp2_cast_fu_485_p1;
wire   [8:0] tmp_fu_489_p2;
wire   [6:0] tmp6_fu_499_p0;
wire   [8:0] tmp6_fu_499_p1;
wire   [13:0] add_ln45_fu_509_p2;
wire   [4:0] zext_ln37_11_fu_530_p1;
wire   [4:0] add_ln37_fu_534_p2;
wire   [13:0] zext_ln37_13_fu_540_p1;
wire   [13:0] add_ln37_4_fu_544_p2;
wire  signed [31:0] sext_ln37_fu_559_p1;
wire  signed [31:0] mul_ln37_fu_592_p2;
wire  signed [31:0] sext_ln37_4_fu_583_p1;
reg   [11:0] ap_NS_fsm;
wire   [13:0] tmp6_fu_499_p10;
wire   [13:0] tmp8_fu_425_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

depthwise_conv2d_fix_2_empty #(
    .DataWidth( 16 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
empty_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(empty_address0),
    .ce0(empty_ce0),
    .we0(empty_we0),
    .d0(kernel_0_q0),
    .q0(empty_q0)
);

network_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
network_mul_mul_16s_16s_32_1_1_U24(
    .din0(empty_q0),
    .din1(input_load_reg_737),
    .dout(mul_ln37_fu_592_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln36_fu_518_p2 == 1'd1))) begin
        buffer_0_reg_240 <= buffer_1_reg_261;
    end else if (((icmp_ln32_fu_430_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        buffer_0_reg_240 <= buffer_4_reg_670;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        buffer_1_reg_261 <= buffer_0_reg_240;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buffer_1_reg_261 <= buffer_fu_586_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_204 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_204 <= i_reg_655;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln36_fu_518_p2 == 1'd1))) begin
        k_h_0_reg_250 <= k_h_reg_704;
    end else if (((icmp_ln32_fu_430_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        k_h_0_reg_250 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        k_w_0_reg_273 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        k_w_0_reg_273 <= k_w_reg_722;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_400_p2 == 1'd1))) begin
        out_d_0_reg_168 <= out_d_reg_642;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_168 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln32_fu_430_p2 == 1'd1))) begin
        out_h_0_reg_216 <= out_h_reg_678;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_h_0_reg_216 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        out_w_0_reg_228 <= 5'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_445_p2 == 1'd1))) begin
        out_w_0_reg_228 <= out_w_reg_691;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_400_p2 == 1'd1))) begin
        phi_mul2_reg_192 <= add_ln22_reg_629;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul2_reg_192 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_400_p2 == 1'd1))) begin
        phi_mul_reg_180 <= add_ln22_1_reg_634;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_180 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln22_1_reg_634 <= add_ln22_1_fu_317_p2;
        add_ln22_reg_629 <= add_ln22_fu_312_p2;
        out_d_reg_642 <= out_d_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_518_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        add_ln37_5_reg_732 <= add_ln37_5_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_4_reg_670 <= buffer_4_fu_396_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        empty_56_reg_619 <= empty_56_fu_304_p1;
        empty_57_reg_624 <= empty_57_fu_308_p1;
        zext_ln37_6_cast_reg_604[6 : 0] <= zext_ln37_6_cast_fu_292_p1[6 : 0];
        zext_ln37_reg_599[6 : 0] <= zext_ln37_fu_288_p1[6 : 0];
        zext_ln45_1_cast_reg_614[5 : 0] <= zext_ln45_1_cast_fu_300_p1[5 : 0];
        zext_ln45_reg_609[5 : 0] <= zext_ln45_fu_296_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_655 <= i_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_load_reg_737 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_h_reg_704 <= k_h_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        k_w_reg_722 <= k_w_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_h_reg_678 <= out_h_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_w_reg_691 <= out_w_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sub_ln37_reg_709 <= sub_ln37_fu_473_p2;
        tmp6_reg_714 <= tmp6_fu_499_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp8_reg_683 <= tmp8_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        trunc_ln9_reg_747 <= {{mul_ln37_fu_592_p2[31:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_322_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln26_reg_647[6 : 3] <= zext_ln26_fu_346_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_430_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        zext_ln35_reg_696[4 : 0] <= zext_ln35_fu_441_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln22_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_ce0 = 1'b1;
    end else begin
        bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        empty_address0 = zext_ln37_12_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_address0 = zext_ln26_3_fu_391_p1;
    end else begin
        empty_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        empty_ce0 = 1'b1;
    end else begin
        empty_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_we0 = 1'b1;
    end else begin
        empty_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kernel_0_ce0 = 1'b1;
    end else begin
        kernel_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_445_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_322_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_400_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln32_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln36_fu_518_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_1_fu_317_p2 = (phi_mul_reg_180 + zext_ln37_reg_599);

assign add_ln22_fu_312_p2 = (phi_mul2_reg_192 + zext_ln45_reg_609);

assign add_ln26_1_fu_366_p2 = (out_d_0_reg_168 + zext_ln26_2_fu_362_p1);

assign add_ln26_fu_376_p2 = (zext_ln26_4_fu_372_p1 + zext_ln26_reg_647);

assign add_ln37_4_fu_544_p2 = (zext_ln37_13_fu_540_p1 + tmp6_reg_714);

assign add_ln37_5_fu_554_p2 = (sub_ln37_reg_709 + zext_ln37_11_fu_530_p1);

assign add_ln37_fu_534_p2 = (zext_ln37_11_fu_530_p1 + out_w_0_reg_228);

assign add_ln45_fu_509_p2 = (tmp8_reg_683 + zext_ln35_reg_696);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_address0 = zext_ln29_fu_386_p1;

assign buffer_4_fu_396_p1 = $signed(bias_q0);

assign buffer_fu_586_p2 = ($signed(sext_ln37_4_fu_583_p1) + $signed(buffer_1_reg_261));

assign empty_56_fu_304_p1 = output_width[4:0];

assign empty_57_fu_308_p1 = output_height[4:0];

assign i_fu_356_p2 = (i_0_reg_204 + 4'd1);

assign icmp_ln22_fu_322_p2 = ((out_d_0_reg_168 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_350_p2 = ((i_0_reg_204 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_400_p2 = ((out_h_0_reg_216 == empty_57_reg_624) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_430_p2 = ((out_w_0_reg_228 == empty_56_reg_619) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_445_p2 = ((k_h_0_reg_250 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_518_p2 = ((k_w_0_reg_273 == 2'd3) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln37_14_fu_549_p1;

assign k_h_fu_451_p2 = (k_h_0_reg_250 + 2'd1);

assign k_w_fu_524_p2 = (k_w_0_reg_273 + 2'd1);

assign kernel_0_address0 = zext_ln26_5_fu_381_p1;

assign out_d_fu_328_p2 = (out_d_0_reg_168 + 5'd1);

assign out_h_fu_405_p2 = (out_h_0_reg_216 + 5'd1);

assign out_w_fu_435_p2 = (out_w_0_reg_228 + 5'd1);

assign output_r_address0 = zext_ln45_1_fu_513_p1;

assign output_r_d0 = buffer_0_reg_240[15:0];

assign sext_ln37_4_fu_583_p1 = $signed(trunc_ln9_reg_747);

assign sext_ln37_fu_559_p1 = $signed(add_ln37_5_reg_732);

assign sext_ln4_fu_284_p1 = $signed(input_width);

assign shl_ln4_fu_461_p3 = {{k_h_0_reg_250}, {2'd0}};

assign shl_ln_fu_338_p3 = {{trunc_ln26_fu_334_p1}, {3'd0}};

assign sub_ln37_fu_473_p2 = (zext_ln37_10_fu_469_p1 - zext_ln37_9_fu_457_p1);

assign tmp2_cast_fu_485_p1 = tmp2_fu_479_p2;

assign tmp2_fu_479_p2 = (zext_ln37_9_fu_457_p1 + out_h_0_reg_216);

assign tmp6_fu_499_p0 = zext_ln37_6_cast_reg_604;

assign tmp6_fu_499_p1 = tmp6_fu_499_p10;

assign tmp6_fu_499_p10 = tmp_fu_489_p2;

assign tmp6_fu_499_p2 = (tmp6_fu_499_p0 * tmp6_fu_499_p1);

assign tmp7_fu_415_p2 = (phi_mul2_reg_192 + zext_ln37_7_cast_fu_411_p1);

assign tmp8_fu_425_p0 = tmp8_fu_425_p00;

assign tmp8_fu_425_p00 = tmp7_fu_415_p2;

assign tmp8_fu_425_p1 = zext_ln45_1_cast_reg_614;

assign tmp8_fu_425_p2 = (tmp8_fu_425_p0 * tmp8_fu_425_p1);

assign tmp_fu_489_p2 = (phi_mul_reg_180 + tmp2_cast_fu_485_p1);

assign trunc_ln26_fu_334_p1 = out_d_0_reg_168[3:0];

assign zext_ln26_2_fu_362_p1 = i_0_reg_204;

assign zext_ln26_3_fu_391_p1 = i_0_reg_204;

assign zext_ln26_4_fu_372_p1 = add_ln26_1_fu_366_p2;

assign zext_ln26_5_fu_381_p1 = add_ln26_fu_376_p2;

assign zext_ln26_fu_346_p1 = shl_ln_fu_338_p3;

assign zext_ln29_fu_386_p1 = out_d_0_reg_168;

assign zext_ln35_fu_441_p1 = out_w_0_reg_228;

assign zext_ln37_10_fu_469_p1 = shl_ln4_fu_461_p3;

assign zext_ln37_11_fu_530_p1 = k_w_0_reg_273;

assign zext_ln37_12_fu_562_p1 = $unsigned(sext_ln37_fu_559_p1);

assign zext_ln37_13_fu_540_p1 = add_ln37_fu_534_p2;

assign zext_ln37_14_fu_549_p1 = add_ln37_4_fu_544_p2;

assign zext_ln37_6_cast_fu_292_p1 = $unsigned(sext_ln4_fu_284_p1);

assign zext_ln37_7_cast_fu_411_p1 = out_h_0_reg_216;

assign zext_ln37_9_fu_457_p1 = k_h_0_reg_250;

assign zext_ln37_fu_288_p1 = input_height;

assign zext_ln45_1_cast_fu_300_p1 = output_width;

assign zext_ln45_1_fu_513_p1 = add_ln45_fu_509_p2;

assign zext_ln45_fu_296_p1 = output_height;

always @ (posedge ap_clk) begin
    zext_ln37_reg_599[8:7] <= 2'b00;
    zext_ln37_6_cast_reg_604[13:7] <= 7'b0000000;
    zext_ln45_reg_609[8:6] <= 3'b000;
    zext_ln45_1_cast_reg_614[13:6] <= 8'b00000000;
    zext_ln26_reg_647[2:0] <= 3'b000;
    zext_ln26_reg_647[7] <= 1'b0;
    zext_ln35_reg_696[13:5] <= 9'b000000000;
end

endmodule //depthwise_conv2d_fix_2
