// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv2d_fix_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [13:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] SeparableConv2D_2_b_s_address0;
reg    SeparableConv2D_2_b_s_ce0;
wire   [13:0] SeparableConv2D_2_b_s_q0;
wire   [5:0] SeparableConv2D_2_w_s_address0;
reg    SeparableConv2D_2_w_s_ce0;
wire   [14:0] SeparableConv2D_2_w_s_q0;
wire   [9:0] zext_ln24_fu_217_p1;
reg   [9:0] zext_ln24_reg_468;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln24_fu_221_p2;
reg   [8:0] add_ln24_reg_473;
wire   [3:0] out_d_fu_233_p2;
reg   [3:0] out_d_reg_481;
wire   [0:0] icmp_ln24_fu_227_p2;
wire   [2:0] trunc_ln28_fu_244_p1;
reg   [2:0] trunc_ln28_reg_491;
wire   [22:0] zext_ln34_fu_248_p1;
reg   [22:0] zext_ln34_reg_496;
wire    ap_CS_fsm_state3;
wire   [5:0] shl_ln_fu_252_p3;
reg   [5:0] shl_ln_reg_501;
wire   [3:0] i_fu_265_p2;
reg   [3:0] i_reg_509;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln26_fu_259_p2;
wire   [2:0] out_h_fu_296_p2;
reg   [2:0] out_h_reg_522;
wire    ap_CS_fsm_state6;
wire   [6:0] sub_ln37_fu_318_p2;
reg   [6:0] sub_ln37_reg_527;
wire   [0:0] icmp_ln31_fu_290_p2;
wire   [2:0] out_w_fu_330_p2;
reg   [2:0] out_w_reg_535;
wire    ap_CS_fsm_state7;
wire  signed [9:0] sext_ln37_fu_345_p1;
reg  signed [9:0] sext_ln37_reg_540;
wire   [0:0] icmp_ln33_fu_324_p2;
wire   [3:0] in_d_fu_359_p2;
reg   [3:0] in_d_reg_549;
wire    ap_CS_fsm_state8;
wire   [8:0] add_ln37_6_fu_365_p2;
reg   [8:0] add_ln37_6_reg_554;
wire   [0:0] icmp_ln35_fu_353_p2;
reg  signed [15:0] input_load_reg_564;
wire    ap_CS_fsm_state9;
reg   [17:0] tmp_2_reg_574;
wire    ap_CS_fsm_state10;
wire   [22:0] buffer_fu_455_p2;
wire    ap_CS_fsm_state11;
reg   [3:0] kernel_buffer_1_address0;
reg    kernel_buffer_1_ce0;
reg    kernel_buffer_1_we0;
wire  signed [14:0] kernel_buffer_1_q0;
reg   [3:0] out_d_0_reg_128;
reg   [8:0] phi_mul1_reg_139;
reg   [3:0] i_0_reg_150;
wire    ap_CS_fsm_state5;
reg   [2:0] out_h_0_reg_162;
reg   [2:0] out_w_0_reg_173;
reg   [22:0] buffer_0_reg_184;
reg   [3:0] in_d_0_reg_194;
reg   [8:0] phi_mul_reg_206;
wire   [63:0] zext_ln25_fu_239_p1;
wire   [63:0] zext_ln28_4_fu_280_p1;
wire   [63:0] zext_ln28_fu_285_p1;
wire   [63:0] zext_ln37_6_fu_380_p1;
wire   [63:0] zext_ln43_fu_426_p1;
wire   [63:0] zext_ln37_fu_431_p1;
wire   [5:0] zext_ln28_3_fu_271_p1;
wire   [5:0] add_ln28_fu_275_p2;
wire   [5:0] shl_ln2_fu_306_p3;
wire   [6:0] zext_ln37_8_fu_314_p1;
wire   [6:0] zext_ln37_7_fu_302_p1;
wire   [6:0] zext_ln35_fu_336_p1;
wire   [6:0] add_ln37_fu_340_p2;
wire   [9:0] zext_ln35_3_fu_349_p1;
wire   [9:0] add_ln37_1_fu_371_p2;
wire  signed [31:0] sext_ln37_7_fu_376_p1;
wire   [0:0] tmp_fu_385_p3;
wire   [0:0] xor_ln42_fu_397_p2;
wire   [15:0] select_ln42_fu_403_p3;
wire   [15:0] trunc_ln42_fu_393_p1;
wire   [9:0] add_ln43_fu_418_p2;
wire  signed [31:0] sext_ln43_fu_422_p1;
wire  signed [30:0] mul_ln37_fu_461_p2;
wire  signed [22:0] sext_ln37_9_fu_452_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

pointwise_conv2d_fix_2_SeparableConv2D_2_b_s #(
    .DataWidth( 14 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
SeparableConv2D_2_b_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_2_b_s_address0),
    .ce0(SeparableConv2D_2_b_s_ce0),
    .q0(SeparableConv2D_2_b_s_q0)
);

pointwise_conv2d_fix_2_SeparableConv2D_2_w_s #(
    .DataWidth( 15 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
SeparableConv2D_2_w_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(SeparableConv2D_2_w_s_address0),
    .ce0(SeparableConv2D_2_w_s_ce0),
    .q0(SeparableConv2D_2_w_s_q0)
);

pointwise_conv2d_fix_1_kernel_buffer_1 #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
kernel_buffer_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(kernel_buffer_1_address0),
    .ce0(kernel_buffer_1_ce0),
    .we0(kernel_buffer_1_we0),
    .d0(SeparableConv2D_2_w_s_q0),
    .q0(kernel_buffer_1_q0)
);

network_mul_mul_16s_15s_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 31 ))
network_mul_mul_16s_15s_31_1_1_U51(
    .din0(input_load_reg_564),
    .din1(kernel_buffer_1_q0),
    .dout(mul_ln37_fu_461_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        buffer_0_reg_184 <= zext_ln34_reg_496;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buffer_0_reg_184 <= buffer_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_150 <= i_reg_509;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_150 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        in_d_0_reg_194 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        in_d_0_reg_194 <= in_d_reg_549;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_290_p2 == 1'd1))) begin
        out_d_0_reg_128 <= out_d_reg_481;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_d_0_reg_128 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        out_h_0_reg_162 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln33_fu_324_p2 == 1'd1))) begin
        out_h_0_reg_162 <= out_h_reg_522;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        out_w_0_reg_173 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_353_p2 == 1'd1))) begin
        out_w_0_reg_173 <= out_w_reg_535;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_290_p2 == 1'd1))) begin
        phi_mul1_reg_139 <= add_ln24_reg_473;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_139 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        phi_mul_reg_206 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        phi_mul_reg_206 <= add_ln37_6_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln24_reg_473 <= add_ln24_fu_221_p2;
        out_d_reg_481 <= out_d_fu_233_p2;
        zext_ln24_reg_468[8 : 0] <= zext_ln24_fu_217_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_353_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        add_ln37_6_reg_554 <= add_ln37_6_fu_365_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_509 <= i_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        in_d_reg_549 <= in_d_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_load_reg_564 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_h_reg_522 <= out_h_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        out_w_reg_535 <= out_w_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        sext_ln37_reg_540 <= sext_ln37_fu_345_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shl_ln_reg_501[5 : 3] <= shl_ln_fu_252_p3[5 : 3];
        zext_ln34_reg_496[13 : 0] <= zext_ln34_fu_248_p1[13 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_290_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln37_reg_527 <= sub_ln37_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_2_reg_574 <= {{mul_ln37_fu_461_p2[30:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln28_reg_491 <= trunc_ln28_fu_244_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        SeparableConv2D_2_b_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_2_b_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        SeparableConv2D_2_w_s_ce0 = 1'b1;
    end else begin
        SeparableConv2D_2_w_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln24_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kernel_buffer_1_address0 = zext_ln37_fu_431_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_buffer_1_address0 = zext_ln28_fu_285_p1;
    end else begin
        kernel_buffer_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        kernel_buffer_1_ce0 = 1'b1;
    end else begin
        kernel_buffer_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kernel_buffer_1_we0 = 1'b1;
    end else begin
        kernel_buffer_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_353_p2 == 1'd1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln24_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln26_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln31_fu_290_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln33_fu_324_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln35_fu_353_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SeparableConv2D_2_b_s_address0 = zext_ln25_fu_239_p1;

assign SeparableConv2D_2_w_s_address0 = zext_ln28_4_fu_280_p1;

assign add_ln24_fu_221_p2 = (phi_mul1_reg_139 + 9'd49);

assign add_ln28_fu_275_p2 = (zext_ln28_3_fu_271_p1 + shl_ln_reg_501);

assign add_ln37_1_fu_371_p2 = ($signed(zext_ln35_3_fu_349_p1) + $signed(sext_ln37_reg_540));

assign add_ln37_6_fu_365_p2 = (phi_mul_reg_206 + 9'd49);

assign add_ln37_fu_340_p2 = (sub_ln37_reg_527 + zext_ln35_fu_336_p1);

assign add_ln43_fu_418_p2 = ($signed(zext_ln24_reg_468) + $signed(sext_ln37_reg_540));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign buffer_fu_455_p2 = ($signed(buffer_0_reg_184) + $signed(sext_ln37_9_fu_452_p1));

assign i_fu_265_p2 = (i_0_reg_150 + 4'd1);

assign icmp_ln24_fu_227_p2 = ((out_d_0_reg_128 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_259_p2 = ((i_0_reg_150 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_290_p2 = ((out_h_0_reg_162 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_324_p2 = ((out_w_0_reg_173 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_353_p2 = ((in_d_0_reg_194 == 4'd8) ? 1'b1 : 1'b0);

assign in_d_fu_359_p2 = (in_d_0_reg_194 + 4'd1);

assign input_r_address0 = zext_ln37_6_fu_380_p1;

assign out_d_fu_233_p2 = (out_d_0_reg_128 + 4'd1);

assign out_h_fu_296_p2 = (out_h_0_reg_162 + 3'd1);

assign out_w_fu_330_p2 = (out_w_0_reg_173 + 3'd1);

assign output_r_address0 = zext_ln43_fu_426_p1;

assign output_r_d0 = (trunc_ln42_fu_393_p1 & select_ln42_fu_403_p3);

assign select_ln42_fu_403_p3 = ((xor_ln42_fu_397_p2[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign sext_ln37_7_fu_376_p1 = $signed(add_ln37_1_fu_371_p2);

assign sext_ln37_9_fu_452_p1 = $signed(tmp_2_reg_574);

assign sext_ln37_fu_345_p1 = $signed(add_ln37_fu_340_p2);

assign sext_ln43_fu_422_p1 = $signed(add_ln43_fu_418_p2);

assign shl_ln2_fu_306_p3 = {{out_h_0_reg_162}, {3'd0}};

assign shl_ln_fu_252_p3 = {{trunc_ln28_reg_491}, {3'd0}};

assign sub_ln37_fu_318_p2 = (zext_ln37_8_fu_314_p1 - zext_ln37_7_fu_302_p1);

assign tmp_fu_385_p3 = buffer_0_reg_184[32'd22];

assign trunc_ln28_fu_244_p1 = out_d_0_reg_128[2:0];

assign trunc_ln42_fu_393_p1 = buffer_0_reg_184[15:0];

assign xor_ln42_fu_397_p2 = (tmp_fu_385_p3 ^ 1'd1);

assign zext_ln24_fu_217_p1 = phi_mul1_reg_139;

assign zext_ln25_fu_239_p1 = out_d_0_reg_128;

assign zext_ln28_3_fu_271_p1 = i_0_reg_150;

assign zext_ln28_4_fu_280_p1 = add_ln28_fu_275_p2;

assign zext_ln28_fu_285_p1 = i_0_reg_150;

assign zext_ln34_fu_248_p1 = SeparableConv2D_2_b_s_q0;

assign zext_ln35_3_fu_349_p1 = phi_mul_reg_206;

assign zext_ln35_fu_336_p1 = out_w_0_reg_173;

assign zext_ln37_6_fu_380_p1 = $unsigned(sext_ln37_7_fu_376_p1);

assign zext_ln37_7_fu_302_p1 = out_h_0_reg_162;

assign zext_ln37_8_fu_314_p1 = shl_ln2_fu_306_p3;

assign zext_ln37_fu_431_p1 = in_d_0_reg_194;

assign zext_ln43_fu_426_p1 = $unsigned(sext_ln43_fu_422_p1);

always @ (posedge ap_clk) begin
    zext_ln24_reg_468[9] <= 1'b0;
    zext_ln34_reg_496[22:14] <= 9'b000000000;
    shl_ln_reg_501[2:0] <= 3'b000;
end

endmodule //pointwise_conv2d_fix_2
